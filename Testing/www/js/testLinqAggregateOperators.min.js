"use strict";Bridge.define("ClientTestLibrary.Linq.TestLinqAggregateOperators",{statics:{test:function(n){var r,u,f,e,o,s,h,c,l,a,v,y,p,w,b,k,d,g,nt,tt,it,rt,ut,ft,et,ot,st,ht;n.expect(20);var t=[2,2,3,5,5,-1,2,-1],i=["one","two","three"],ct=Bridge.Linq.Enumerable.from(t).distinct().count();n.deepEqual(ct,4,"Count() distinct numbers");r=Bridge.Linq.Enumerable.from(t).count(function(n){return n%2==1});n.deepEqual(r,3,"Count() odd numbers");u=Bridge.Linq.Enumerable.from(ClientTestLibrary.Utilities.Group.getGroups()).groupJoin(ClientTestLibrary.Utilities.Person.getPersons(),function(n){return n.getName()},function(n){return n.getGroup()},function(n,t){return{group:n.getName(),personCount:Bridge.Linq.Enumerable.from(t).count()}}).toArray();f=[{group:"A",personCount:1},{group:"B",personCount:4},{group:"C",personCount:2},{group:"D",personCount:0}];n.deepEqual(u,f,"Count() within joint collections");e=Bridge.Linq.Enumerable.from(ClientTestLibrary.Utilities.Person.getPersons()).groupBy(function(n){return n.getGroup()}).select(function(n){return{group:n.key(),personCount:n.count()}}).toArray();o=[{group:"A",personCount:1},{group:"C",personCount:2},{group:"B",personCount:4},{group:Bridge.cast(null,String),personCount:1}];n.deepEqual(e,o,"Count() within group");s=Bridge.Linq.Enumerable.from(t).sum();n.deepEqual(s,17,"Sum() numbers");h=Bridge.Linq.Enumerable.from(i).sum(function(n){return n.length});n.deepEqual(h,11,"Sum() total chars");c=Bridge.Linq.Enumerable.from(ClientTestLibrary.Utilities.Person.getPersons()).groupBy(function(n){return n.getGroup()}).select(function(n){return{group:n.key(),sum:n.sum(function(n){return n.getCount()})}}).toArray();l=[{group:"A",sum:300},{group:"C",sum:600},{group:"B",sum:2e3},{group:Bridge.cast(null,String),sum:3e3}];n.deepEqual(c,l,"Sum() within group");a=Bridge.Linq.Enumerable.from(t).min();n.deepEqual(a,-1,"Min() number");v=Bridge.Linq.Enumerable.from(i).min(function(n){return n.length});n.deepEqual(v,3,"Min() for shortest word");y=Bridge.Linq.Enumerable.from(ClientTestLibrary.Utilities.Person.getPersons()).groupBy(function(n){return n.getGroup()}).select(function(n){return{group:n.key(),min:n.min(function(n){return n.getCount()})}}).toArray();p=[{group:"A",min:300},{group:"C",min:100},{group:"B",min:50},{group:Bridge.cast(null,String),min:3e3}];n.deepEqual(y,p,"Min() within group");w=Bridge.Linq.Enumerable.from(ClientTestLibrary.Utilities.Person.getPersons()).groupBy(function(n){return n.getGroup()}).select(function(n){return{g:n,minCount:n.min(function(n){return n.getCount()})}}).select(function(n){return{group:n.g.key(),name:n.g.where(function(t){return t.getCount()===n.minCount}).select(function(n){return n.getName()}).toArray()}}).toArray();b=[{group:"A",name:["Frank"]},{group:"C",name:["Zeppa"]},{group:"B",name:["Dora"]},{group:Bridge.cast(null,String),name:["Nemo"]}];n.deepEqual(w,b,"Min() within group with let");k=Bridge.Linq.Enumerable.from(t).max();n.deepEqual(k,5,"Max() number");d=Bridge.Linq.Enumerable.from(i).max(function(n){return n.length});n.deepEqual(d,5,"Max() for longest word");g=Bridge.Linq.Enumerable.from(ClientTestLibrary.Utilities.Person.getPersons()).groupBy(function(n){return n.getGroup()}).select(function(n){return{group:n.key(),max:n.max(function(n){return n.getCount()})}}).toArray();nt=[{group:"A",max:300},{group:"C",max:500},{group:"B",max:700},{group:Bridge.cast(null,String),max:3e3}];n.deepEqual(g,nt,"Max() within group");tt=Bridge.Linq.Enumerable.from(ClientTestLibrary.Utilities.Person.getPersons()).groupBy(function(n){return n.getGroup()}).select(function(n){return{g:n,maxCount:n.max(function(n){return n.getCount()})}}).select(function(n){return{group:n.g.key(),name:n.g.where(function(t){return t.getCount()===n.maxCount}).select(function(n){return n.getName()}).toArray()}}).toArray();it=[{group:"A",name:["Frank"]},{group:"C",name:["Billy"]},{group:"B",name:["John","Mary"]},{group:Bridge.cast(null,String),name:["Nemo"]}];n.deepEqual(tt,it,"Max() within group with let");rt=Bridge.Linq.Enumerable.from(t).average();n.deepEqual(rt,2.125,"Average() number");ut=["1","22","333","4444","55555"];ft=Bridge.Linq.Enumerable.from(ut).average(function(n){return n.length});n.deepEqual(ft,3,"Average() for word lengths");et=Bridge.Linq.Enumerable.from(ClientTestLibrary.Utilities.Person.getPersons()).groupBy(function(n){return n.getGroup()}).select(function(n){return{group:n.key(),average:n.average(function(n){return n.getCount()})}}).toArray();ot=[{group:"A",average:300},{group:"C",average:300},{group:"B",average:500},{group:Bridge.cast(null,String),average:3e3}];n.deepEqual(et,ot,"Average() within group");st=[1,2,3,4,5];ht=Bridge.Linq.Enumerable.from(st).aggregate(function(n,t){return n*t});n.deepEqual(ht,120,"Aggregate() within doubles");var lt=Bridge.Linq.Enumerable.from([20,10,40,50,10,70,30]).aggregate(100,function(n,t){return t<=n?n-t:n});n.deepEqual(lt,20,"Aggregate() balance")},bridge315:function(n){n.expect(1);var t=Bridge.Linq.Enumerable.from("a,b,c,a".toUpperCase().split(",")).aggregate("",function(n,t){return t+" "+n});n.equal(t,"A C B A ","Enumerable.Aggregate")}}});Bridge.init();
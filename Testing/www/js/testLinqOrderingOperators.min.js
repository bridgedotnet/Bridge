"use strict";Bridge.define("ClientTestLibrary.Linq.TestLinqOrderingOperators",{statics:{test:function(n){var t,i,r,u,f,e,o,s,h,c,l;n.expect(8);t=["ab2","ac","a","ab12","","ab","bac","z"];i=Bridge.Linq.Enumerable.from(t).orderBy(function(n){return n}).toArray();n.deepEqual(i,["","a","ab","ab12","ab2","ac","bac","z"],"Order by words");r=Bridge.Linq.Enumerable.from(t).orderBy(function(n){return n.length}).toArray();n.deepEqual(r,["","a","z","ac","ab","ab2","bac","ab12"],"Order by word length");u=Bridge.Linq.Enumerable.from(ClientTestLibrary.Utilities.Person.getPersons()).orderBy(function(n){return n.getName()}).select(function(n){return n.getName()}).toArray();n.deepEqual(u,["Billy","Dora","Frank","Ian","John","Mary","Nemo","Zeppa"],"Order by person names");f=[1,-.7,2.1,.9,1.4,2.9];e=Bridge.Linq.Enumerable.from(f).orderByDescending(function(n){return n}).toArray();n.deepEqual(e,[2.9,2.1,1.4,1,.9,-.7],"Order by descending double");o=Bridge.Linq.Enumerable.from(ClientTestLibrary.Utilities.Person.getPersons()).orderByDescending(function(n){return n.getCount()}).select(function(n){return n.getCount()}).toArray();n.deepEqual(o,[3e3,700,700,550,500,300,100,50],"Order by person count descending");s=Bridge.Linq.Enumerable.from(t).orderBy(function(n){return n.length}).thenBy(function(n){return n}).toArray();n.deepEqual(s,["","a","z","ab","ac","ab2","bac","ab12"],"Order by word length then by letters");h=Bridge.Linq.Enumerable.from(t).orderBy(function(n){return n.length}).thenByDescending(function(n){return n}).toArray();n.deepEqual(h,["","z","a","ac","ab","bac","ab2","ab12"],"Order by word length then by letters as lambda");c=[2,4,6,1,5];l=Bridge.Linq.Enumerable.from(c).reverse().toArray();n.deepEqual(l,[5,1,6,4,2],"Reverse() numbers")}}});Bridge.init();
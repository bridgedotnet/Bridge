"use strict";Bridge.define("ClientTestLibrary.Linq.TestLinqJoinOperators",{statics:{test:function(n){var t,i,r,u,f,e,o,s,h,c;n.expect(5);t=Bridge.Linq.Enumerable.from(ClientTestLibrary.Utilities.Person.getPersons()).join(ClientTestLibrary.Utilities.Group.getGroups(),function(n){return n.getGroup()},function(n){return n.getName()},function(n,t){return{name:n.getName(),limit:t.getLimit()}}).toArray();i=[{name:"Frank",limit:1e3},{name:"Zeppa",limit:800},{name:"John",limit:400},{name:"Billy",limit:800},{name:"Dora",limit:400},{name:"Ian",limit:400},{name:"Mary",limit:400}];n.deepEqual(t,i,"Join Persons and Groups");r=Bridge.Linq.Enumerable.from(ClientTestLibrary.Utilities.Person.getPersons()).join(ClientTestLibrary.Utilities.Group.getGroups(),function(n){return n.getGroup()},function(n){return n.getName()},function(n,t){return{name:n.getName(),limit:t.getLimit()}}).toArray();u=[{name:"Frank",limit:1e3},{name:"Zeppa",limit:800},{name:"John",limit:400},{name:"Billy",limit:800},{name:"Dora",limit:400},{name:"Ian",limit:400},{name:"Mary",limit:400}];n.deepEqual(r,u,"Join Persons and Groups by lambda");f=Bridge.Linq.Enumerable.from(ClientTestLibrary.Utilities.Group.getGroups()).groupJoin(ClientTestLibrary.Utilities.Person.getPersons(),function(n){return n.getName()},function(n){return n.getGroup()},function(n,t){return{group:n.getName(),persons:Bridge.Linq.Enumerable.from(t).select(function(n){return n.getName()}).toArray()}}).toArray();e=[{group:"A",persons:["Frank"]},{group:"B",persons:["John","Dora","Ian","Mary"]},{group:"C",persons:["Zeppa","Billy"]},{group:"D",persons:[]}];n.deepEqual(f,e,"Grouped join Persons and Groups");o=Bridge.Linq.Enumerable.from(ClientTestLibrary.Utilities.Group.getGroups()).groupJoin(ClientTestLibrary.Utilities.Person.getPersons(),function(n){return n.getName()},function(n){return n.getGroup()},function(n,t){return{g:n,pg:t}}).selectMany(function(n){return Bridge.Linq.Enumerable.from(n.pg).defaultIfEmpty(Bridge.getDefaultValue(ClientTestLibrary.Utilities.Person))},function(n,t){return{groupName:n.g.getName(),personName:t!==null?t.getName():""}}).toArray();s=[{groupName:"A",personName:"Frank"},{groupName:"B",personName:"John"},{groupName:"B",personName:"Dora"},{groupName:"B",personName:"Ian"},{groupName:"B",personName:"Mary"},{groupName:"C",personName:"Zeppa"},{groupName:"C",personName:"Billy"},{groupName:"D",personName:""}];n.deepEqual(o,s,"Grouped join Persons and Groups with DefaultIfEmpty");h=Bridge.Linq.Enumerable.from(ClientTestLibrary.Utilities.Group.getGroups()).groupJoin(ClientTestLibrary.Utilities.Person.getPersons(),function(n){return{name:n.getName(),digit:1}},function(n){return{name:n.getGroup(),digit:1}},function(n,t){return{g:n,pg:t}}).selectMany(function(n){return Bridge.Linq.Enumerable.from(n.pg).defaultIfEmpty(Bridge.getDefaultValue(ClientTestLibrary.Utilities.Person))},function(n,t){return{x3:n,ep:t}}).orderByDescending(function(n){return n.ep!==null?n.ep.getName():null}).select(function(n){return{groupName:n.x3.g!==null?n.x3.g.getName():null,personName:n.ep!==null?n.ep.getName():null}}).toArray();c=[{groupName:"C",personName:"Zeppa"},{groupName:"B",personName:"Mary"},{groupName:"B",personName:"John"},{groupName:"B",personName:"Ian"},{groupName:"A",personName:"Frank"},{groupName:"B",personName:"Dora"},{groupName:"C",personName:"Billy"},{groupName:"D",personName:Bridge.cast(null,String)}];n.deepEqual(h,c,"Issue #209. Grouped join Persons and Groups with DefaultIfEmpty, complex equals and ordering")}}});Bridge.init();
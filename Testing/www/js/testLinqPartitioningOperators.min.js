"use strict";Bridge.define("ClientTestLibrary.Linq.TestLinqPartitioningOperators",{statics:{test:function(n){var t,i,r,u,f,e,o,s,h;n.expect(8);t=[1,3,5,7,9];i=Bridge.Linq.Enumerable.from(t).take(2).toArray();n.deepEqual(i,[1,3],"Take() the first two array elements");r=Bridge.Linq.Enumerable.from(t).takeFromLast(3).toArray();n.deepEqual(r,[5,7,9],"TakeFromLast() the last three array elements");u=Bridge.Linq.Enumerable.from(t).takeExceptLast(2).toArray();n.deepEqual(u,[1,3,5],"TakeExceptLast() the first array elements except the last two");f=Bridge.Linq.Enumerable.from(t).takeWhile(function(n){return n<2}).toArray();n.deepEqual(f,[1],"TakeWhile() less two");e=Bridge.Linq.Enumerable.from(t).takeWhile(function(n,t){return n-t<=4}).toArray();n.deepEqual(e,[1,3,5,7],"TakeWhile() by value and index");o=Bridge.Linq.Enumerable.from(t).skip(3).toArray();n.deepEqual(o,[7,9],"Skip() the first three");s=Bridge.Linq.Enumerable.from(t).skipWhile(function(n){return n<9}).toArray();n.deepEqual(s,[9],"SkipWhile() less then 9");h=Bridge.Linq.Enumerable.from(t).skipWhile(function(n,t){return n<=3&&t<2}).toArray();n.deepEqual(h,[5,7,9],"SkipWhile() by value and index")}}});Bridge.init();
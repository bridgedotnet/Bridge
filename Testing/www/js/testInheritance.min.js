"use strict";Bridge.define("ClientTestLibrary.TestInheritance",{statics:{testA:function(n){n.expect(4);var t=new ClientTestLibrary.TestInheritance.A(10);n.ok(t!==null,"Instance of A created");n.equal(t.getX(),10,"a.X = 10");n.equal(t.handleNumber(100),100,"a.HandleNumber(100) = 100");n.equal(t.handleString("Hundred"),"Hundred","a.HandleString('Hundred') = 'Hundred'")},testB:function(n){n.expect(5);var t=new ClientTestLibrary.TestInheritance.B(10,20);n.ok(t!==null,"Instance of B created");n.equal(t.getX(),10,"b.X = 10");n.equal(t.getY(),20,"b.Y = 20");n.equal(t.handleNumber$1(1),100,"b.HandleNumber(1) = 100");n.equal(t.handleString("Hundred"),"Hundred","b.HandleString('Hundred') = 'Hundred'")},testAB:function(n){n.expect(4);var t=new ClientTestLibrary.TestInheritance.B(10,20);n.ok(t!==null,"Instance of B created as A type");n.equal(t.getX(),10,"b.X = 10");n.equal(t.handleNumber(10),10,"b.HandleNumber(10) = 10");n.equal(t.handleString("Hundred"),"Hundred","b.HandleString('Hundred') = 'Hundred'")}}});Bridge.define("ClientTestLibrary.TestInheritance.A",{config:{properties:{X:0}},constructor:function(n){this.setX(n)},handleNumber:function(n){return n},handleString:function(n){return n}});Bridge.define("ClientTestLibrary.TestInheritance.B",{inherits:[ClientTestLibrary.TestInheritance.A],config:{properties:{Y:0}},constructor:function(n,t){ClientTestLibrary.TestInheritance.A.prototype.$constructor.call(this,n);this.setY(t)},handleNumber$1:function(n){return n*100}});Bridge.init();
"use strict";Bridge.define("ClientTestLibrary.Linq.TestLinqConversionOperatorsIEqualityComparer",{inherits:[Bridge.EqualityComparer$1(String)],equals:function(n,t){return Bridge.String.equals(n,t)},getHashCode:function(n){return n===null?0:Bridge.getHashCode(n)}});Bridge.define("ClientTestLibrary.Linq.TestLinqConversionOperators",{statics:{test:function(n){var r,a,f,i,e,o,y,p;n.expect(13);var s=[1.7,2.3,1.9,4.1,2.9],w=Bridge.Linq.Enumerable.from(s).select(function(n){return n}),h=w.toArray();n.ok(Bridge.String.contains(Bridge.getType(h).toString(),"function Array()"),"ToArray() conversion for doubles - check type name");n.deepEqual(h,s,"ToArray() conversion for doubles - check content");var c=["1.one","2.two","3.three"],l=Bridge.Linq.Enumerable.from(Bridge.Linq.Enumerable.from(c).orderByDescending(function(n){return n})).toList(String),b=new Bridge.List$1(String)(["3.three","2.two","1.one"]);n.deepEqual(ClientTestLibrary.Utilities.TypeHelper.getTypeName(l),"Bridge.List$1$String","ToList() conversion with explicit String type for string - check type name");n.deepEqual(l,b,"ToList() conversion for strings with explicit String type - check content");r=Bridge.Linq.Enumerable.from(c).orderByDescending(function(n){return n}).toList(String);a=new Bridge.List$1(String)(["3.three","2.two","1.one"]);n.deepEqual(ClientTestLibrary.Utilities.TypeHelper.getTypeName(r),"Bridge.List$1$String","ToList() conversion for string - check type name");n.deepEqual(r,a,"ToList() conversion for strings - check content");var u=ClientTestLibrary.Utilities.Group.getGroups(),v=Bridge.Linq.Enumerable.from(u).select(function(n){return n}).toDictionary(function(n){return n.getName()},function(n){return n},String,ClientTestLibrary.Utilities.Group),t=new Bridge.Dictionary$2(String,ClientTestLibrary.Utilities.Group)();t.add("A",Bridge.merge(new ClientTestLibrary.Utilities.Group,{setName:"A",setLimit:1e3}));t.add("B",Bridge.merge(new ClientTestLibrary.Utilities.Group,{setName:"B",setLimit:400}));t.add("C",Bridge.merge(new ClientTestLibrary.Utilities.Group,{setName:"C",setLimit:800}));t.add("D",Bridge.merge(new ClientTestLibrary.Utilities.Group,{setName:"D",setLimit:200}));n.deepEqual(ClientTestLibrary.Utilities.TypeHelper.getTypeName(v),"Bridge.Dictionary$2$String$ClientTestLibrary.Utilities.Group","ToDictionary(keySelector, elementSelector) conversion for <string, Group> - check type name");n.deepEqual(v,t,"ToDictionary(keySelector, elementSelector) conversion for <string, Group> - check content");f=new ClientTestLibrary.Linq.TestLinqConversionOperatorsIEqualityComparer;i=new Bridge.Dictionary$2(String,ClientTestLibrary.Utilities.Group)(null,f);i.add("A",Bridge.merge(new ClientTestLibrary.Utilities.Group,{setName:"A",setLimit:1e3}));i.add("B",Bridge.merge(new ClientTestLibrary.Utilities.Group,{setName:"B",setLimit:400}));i.add("C",Bridge.merge(new ClientTestLibrary.Utilities.Group,{setName:"C",setLimit:800}));i.add("D",Bridge.merge(new ClientTestLibrary.Utilities.Group,{setName:"D",setLimit:200}));e=Bridge.Linq.Enumerable.from(u).select(function(n){return n}).toDictionary(function(n){return n.getName()},function(n){return n},String,ClientTestLibrary.Utilities.Group,f);n.deepEqual(ClientTestLibrary.Utilities.TypeHelper.getTypeName(e),"Bridge.Dictionary$2$String$ClientTestLibrary.Utilities.Group","ToDictionary(keySelector, elementSelector, IEqualityComparer) conversion for <string, Group> - check type name");n.deepEqual(e,i,"ToDictionary(keySelector, elementSelector, IEqualityComparer) conversion for <string, Group> - check content");o=Bridge.Linq.Enumerable.from(u).select(function(n){return n}).toDictionary(function(n){return n.getName()},null,String,ClientTestLibrary.Utilities.Group);n.deepEqual(ClientTestLibrary.Utilities.TypeHelper.getTypeName(o),"Bridge.Dictionary$2$String$ClientTestLibrary.Utilities.Group","ToDictionary(keySelector) conversion for <string, Group> - check type name");n.deepEqual(o,t,"ToDictionary(keySelector) conversion for <string, Group> - check content");y=[null,1,"two",3,"four",5,"six",7];p=Bridge.Linq.Enumerable.from(y).ofType(Number).toArray();n.deepEqual(p,[1,3,5,7],"Issue #218. OfType<double> should get only double type items")}}});Bridge.init();
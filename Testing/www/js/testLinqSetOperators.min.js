"use strict";Bridge.define("ClientTestLibrary.Linq.TestLinqSetOperators",{statics:{test:function(n){var y=Bridge.Linq.Enumerable.from([1,2]).intersect([1,2]).toArray(),f,e,o,s,h,c,l;n.expect(8);f=[1,2,3,3,1,5,4,2,3];e=Bridge.Linq.Enumerable.from(f).distinct().toArray();n.deepEqual(e,[1,2,3,5,4],"Distinct() to remove duplicate elements");o=Bridge.Linq.Enumerable.from(ClientTestLibrary.Utilities.Person.getPersons()).select(function(n){return n.getGroup()}).distinct().toArray();n.deepEqual(o,["A","C","B",null],"Distinct() to remove duplicate Group elements");var r=[0,2,4,5,6,8,9],u=[1,3,5,7,8],a=Bridge.Linq.Enumerable.from(r).union(u).toArray();n.deepEqual(a,[0,2,4,5,6,8,9,1,3,7],"Union() to get unique number sequence");var t=Bridge.Linq.Enumerable.from(ClientTestLibrary.Utilities.Person.getPersons()).select(function(n){return n.getName().charCodeAt(0)}),i=Bridge.Linq.Enumerable.from(ClientTestLibrary.Utilities.Person.getPersons()).select(function(n){return n.getCity().charCodeAt(0)}),v=t.union(i).toArray();n.deepEqual(v,[Bridge.cast(70,Bridge.Int),Bridge.cast(90,Bridge.Int),Bridge.cast(74,Bridge.Int),Bridge.cast(66,Bridge.Int),Bridge.cast(68,Bridge.Int),Bridge.cast(73,Bridge.Int),Bridge.cast(77,Bridge.Int),Bridge.cast(78,Bridge.Int),Bridge.cast(69,Bridge.Int),Bridge.cast(84,Bridge.Int),Bridge.cast(76,Bridge.Int),Bridge.cast(80,Bridge.Int),Bridge.cast(82,Bridge.Int),Bridge.cast(79,Bridge.Int)],"Union to get unique first letters of Name and City");s=Bridge.Linq.Enumerable.from(r).intersect(u).toArray();n.deepEqual(s,[5,8],"Intersect() to get common number sequence");t=Bridge.Linq.Enumerable.from(ClientTestLibrary.Utilities.Person.getPersons()).select(function(n){return n.getName().charCodeAt(0)});i=Bridge.Linq.Enumerable.from(ClientTestLibrary.Utilities.Person.getPersons()).select(function(n){return n.getCity().charCodeAt(0)});h=Bridge.Linq.Enumerable.from(t).intersect(i).toArray();n.deepEqual(h,[Bridge.cast(66,Bridge.Int),Bridge.cast(68,Bridge.Int)],"Intersect() to get common first letters of Name and City");c=Bridge.Linq.Enumerable.from(r).except(u).toArray();n.deepEqual(c,[0,2,4,6,9],"Except() to get numbers from first sequence and does not contain the second sequence numbers");l=t.except(i).toArray();n.deepEqual(l,[Bridge.cast(70,Bridge.Int),Bridge.cast(90,Bridge.Int),Bridge.cast(74,Bridge.Int),Bridge.cast(73,Bridge.Int),Bridge.cast(77,Bridge.Int),Bridge.cast(78,Bridge.Int)],"Except() to get letters from Name sequence and does not contain City letters")}}});Bridge.init();
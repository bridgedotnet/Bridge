"use strict";Bridge.define("ClientTestLibrary.TestOverloadInstanceMethods",{statics:{testInstance:function(n){n.expect(17);var t=new ClientTestLibrary.TestOverloadInstanceMethods.Instance;n.ok(t!==null,"i created");n.equal(t.foo$2(1),"Foo(int x)","Instance Foo(int x)");n.equal(t.foo$5("string"),"Foo(string s)","Instance Foo(string s)");n.equal(t.foo(1.1),"Foo(double d)","Instance Foo(double d)");n.equal(t.foo$4(1,2),"Foo(int x, int y)","Instance Foo(int x, int y)");n.equal(t.foo$3(1,1.1),"Foo(int x, double y)","Instance Foo(int x, double y)");n.equal(t.foo$1(1.1,1),"Foo(double x, int y)","Instance Foo(double x, int y)");n.equal(t.fooReturnType(1),67,"Instance char FooReturnType(int y)");n.equal(t.fooReturnType$1(1.1),"string FooReturnType(double d)","Instance string FooReturnType(double d)");n.equal(t.fooOptionalParameters(1),"FooOptionalParameters(int x)","Instance FooOptionalParameters(int x)");n.equal(t.fooOptionalParameters$1(1,2),"FooOptionalParameters(int x, int y = 5)","Instance FooOptionalParameters(int x, int y = 5)");n.equal(t.fooMultipleOptionalParameters(1,2),"FooMultipleOptionalParameters(int x, int y = 5)","Instance FooMultipleOptionalParameters(int x, int y = 5)");n.equal(t.fooMultipleOptionalParameters$1(1,5,2),"FooMultipleOptionalParameters(int x, int y = 5, int z = 10)","Instance FooMultipleOptionalParameters(int x, int y = 5, int z = 10)");n.equal(t.fooMultipleOptionalParameters$1(1,2,3),"FooMultipleOptionalParameters(int x, int y = 5, int z = 10)","Instance FooMultipleOptionalParameters(int x, int y = 5, int z = 10)");n.equal(t.fooMultipleOptionalParameters$1(1,3,2),"FooMultipleOptionalParameters(int x, int y = 5, int z = 10)","Instance FooMultipleOptionalParameters(int x, int y = 5, int z = 10)");n.equal(t.fooNamedArgument$1(1),"FooNamedArgument(int x)","Static FooNamedArgument(int x)");n.equal(t.fooNamedArgument(1),"FooNamedArgument(double d)","Static FooNamedArgument(double d)")}}});Bridge.define("ClientTestLibrary.TestOverloadInstanceMethods.Instance",{foo$2:function(){return"Foo(int x)"},foo$5:function(){return"Foo(string s)"},foo:function(){return"Foo(double d)"},foo$4:function(){return"Foo(int x, int y)"},foo$3:function(){return"Foo(int x, double y)"},foo$1:function(){return"Foo(double x, int y)"},fooReturnType:function(){return 67},fooReturnType$1:function(){return"string FooReturnType(double d)"},fooOptionalParameters$1:function(n,t){return t===void 0&&(t=5),"FooOptionalParameters(int x, int y = 5)"},fooOptionalParameters:function(){return"FooOptionalParameters(int x)"},fooMultipleOptionalParameters$1:function(n,t,i){return t===void 0&&(t=5),i===void 0&&(i=10),"FooMultipleOptionalParameters(int x, int y = 5, int z = 10)"},fooMultipleOptionalParameters:function(n,t){return t===void 0&&(t=5),"FooMultipleOptionalParameters(int x, int y = 5)"},fooNamedArgument$1:function(){return"FooNamedArgument(int x)"},fooNamedArgument:function(){return"FooNamedArgument(double d)"}});Bridge.init();
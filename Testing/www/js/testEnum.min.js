"use strict";Bridge.define("ClientTestLibrary.TestEnum",{statics:{testParse:function(n){n.expect(6);n.equal(Bridge.Enum.parse(ClientTestLibrary.TestEnum.Digits,"Zero"),ClientTestLibrary.TestEnum.Digits.zero,"Parse Digits.Zero");n.equal(Bridge.Enum.parse(ClientTestLibrary.TestEnum.Digits,"One"),ClientTestLibrary.TestEnum.Digits.one,"Parse Digits.One");n.equal(Bridge.Enum.parse(ClientTestLibrary.TestEnum.Digits,"Two"),ClientTestLibrary.TestEnum.Digits.two,"Parse Digits.Two");n.equal(Bridge.Enum.parse(ClientTestLibrary.TestEnum.Pets,"Dog, Cat"),3,"Parse Dog, Cat");n.equal(Bridge.Enum.parse(ClientTestLibrary.TestEnum.Pets,"Bird, Cat, Rabbit"),14,"Parse Bird, Cat, Rabbit");n.throws(function(){var n=Bridge.Enum.parse(ClientTestLibrary.TestEnum.Digits,"ONE")},"Parse ONE")},testParseIgnoreCase:function(n){n.expect(4);n.equal(Bridge.Enum.parse(ClientTestLibrary.TestEnum.Digits,"zero",!0),ClientTestLibrary.TestEnum.Digits.zero,"Parse Digits.Zero");n.equal(Bridge.Enum.parse(ClientTestLibrary.TestEnum.Digits,"oNe",!0),ClientTestLibrary.TestEnum.Digits.one,"Parse Digits.One");n.equal(Bridge.Enum.parse(ClientTestLibrary.TestEnum.Digits,"TWO",!0),ClientTestLibrary.TestEnum.Digits.two,"Parse Digits.Two");n.throws(function(){var n=Bridge.Enum.parse(ClientTestLibrary.TestEnum.Digits,"ONN",!0)},"Parse ONN")},testToString:function(n){n.expect(4);n.equal(Bridge.Enum.toString(ClientTestLibrary.TestEnum.Digits,ClientTestLibrary.TestEnum.Digits.zero),"Zero","ToString Digits.Zero");n.equal(Bridge.Enum.toString(ClientTestLibrary.TestEnum.Digits,ClientTestLibrary.TestEnum.Digits.one),"One","ToString Digits.One");n.equal(Bridge.Enum.toString(ClientTestLibrary.TestEnum.Digits,ClientTestLibrary.TestEnum.Digits.two),"Two","ToString Digits.Two");n.equal(Bridge.Enum.toString(ClientTestLibrary.TestEnum.Digits,150),"150","ToString (Digits)150")},testGetValues:function(n){n.expect(2);n.deepEqual(Bridge.Enum.getValues(ClientTestLibrary.TestEnum.Abc),[ClientTestLibrary.TestEnum.Abc.a,ClientTestLibrary.TestEnum.Abc.b,ClientTestLibrary.TestEnum.Abc.c],"Abc values");n.deepEqual(Bridge.Enum.getValues(ClientTestLibrary.TestEnum.Digits),[ClientTestLibrary.TestEnum.Digits.zero,ClientTestLibrary.TestEnum.Digits.one,ClientTestLibrary.TestEnum.Digits.two],"Digits values")},testCompareTo:function(n){n.expect(3);n.equal(Bridge.compare(ClientTestLibrary.TestEnum.Digits.two,ClientTestLibrary.TestEnum.Digits.two),0,"CompareTo Digits.Two with Digits.Two");n.equal(Bridge.compare(ClientTestLibrary.TestEnum.Digits.one,ClientTestLibrary.TestEnum.Digits.two),-1,"CompareTo Digits.One with Digits.Two");n.equal(Bridge.compare(ClientTestLibrary.TestEnum.Digits.two,ClientTestLibrary.TestEnum.Digits.zero),1,"CompareTo Digits.Two with Digits.Zero")},testFormat:function(n){n.expect(22);n.equal(Bridge.Enum.format(ClientTestLibrary.TestEnum.Digits,ClientTestLibrary.TestEnum.Digits.two,"G"),"Two","Format Digits.Two G");n.equal(Bridge.Enum.format(ClientTestLibrary.TestEnum.Digits,ClientTestLibrary.TestEnum.Digits.two,"g"),"Two","Format Digits.Two g");n.equal(Bridge.Enum.format(ClientTestLibrary.TestEnum.Digits,150,"G"),"150","Format (Digits)150 G");n.equal(Bridge.Enum.format(ClientTestLibrary.TestEnum.Digits,150,"g"),"150","Format (Digits)150 g");n.equal(Bridge.Enum.format(ClientTestLibrary.TestEnum.Pets,3,"G"),"Dog, Cat","Format Pets.Dog | Pets.Cat G");n.equal(Bridge.Enum.format(ClientTestLibrary.TestEnum.Pets,28,"g"),"Bird, Rabbit, Other","Format Pets.Bird | Pets.Rabbit | Pets.Other g");n.equal(Bridge.Enum.format(ClientTestLibrary.TestEnum.Pets1,3,"G"),"3","Format Pets1.Cat | Pets1.Dog G");n.equal(Bridge.Enum.format(ClientTestLibrary.TestEnum.Pets1,3,"g"),"3","Format Pets1.Cat | Pets1.Dog g");n.equal(Bridge.Enum.format(ClientTestLibrary.TestEnum.Digits,ClientTestLibrary.TestEnum.Digits.two,"X"),"2","Format Digits.Two X");n.equal(Bridge.Enum.format(ClientTestLibrary.TestEnum.Digits,ClientTestLibrary.TestEnum.Digits.one,"x"),"1","Format Digits.One x");n.equal(Bridge.Enum.format(ClientTestLibrary.TestEnum.Digits,255,"X"),"ff","Format (Digits)255 X");n.equal(Bridge.Enum.format(ClientTestLibrary.TestEnum.Digits,255,"x"),"ff","Format (Digits)255 x");n.equal(Bridge.Enum.format(ClientTestLibrary.TestEnum.Pets,24,"X"),"18","Format Pets.Rabbit | Pets.Other X");n.equal(Bridge.Enum.format(ClientTestLibrary.TestEnum.Pets,ClientTestLibrary.TestEnum.Pets.other,"x"),"10","Format Pets.Other x");n.equal(Bridge.Enum.format(ClientTestLibrary.TestEnum.Digits,ClientTestLibrary.TestEnum.Digits.two,"D"),"2","Format Digits.Two D");n.equal(Bridge.Enum.format(ClientTestLibrary.TestEnum.Digits,ClientTestLibrary.TestEnum.Digits.one,"d"),"1","Format Digits.One d");n.equal(Bridge.Enum.format(ClientTestLibrary.TestEnum.Digits,255,"D"),"255","Format (Digits)255 D");n.equal(Bridge.Enum.format(ClientTestLibrary.TestEnum.Digits,255,"d"),"255","Format (Digits)255 d");n.equal(Bridge.Enum.format(ClientTestLibrary.TestEnum.Pets,24,"D"),"24","Format Pets.Rabbit | Pets.Other D");n.equal(Bridge.Enum.format(ClientTestLibrary.TestEnum.Pets,ClientTestLibrary.TestEnum.Pets.other,"d"),"16","Format Pets.Other d");n.equal(Bridge.Enum.format(ClientTestLibrary.TestEnum.Pets1,3,"F"),"Dog, Cat","Format Pets1.Cat | Pets1.Dog F");n.equal(Bridge.Enum.format(ClientTestLibrary.TestEnum.Pets1,3,"f"),"Dog, Cat","Format Pets1.Cat | Pets1.Dog f")},testGetName:function(n){n.expect(3);n.equal(Bridge.Enum.getName(ClientTestLibrary.TestEnum.Digits,2),"Two","GetName 2");n.equal(Bridge.Enum.getName(ClientTestLibrary.TestEnum.Digits,1),"One","GetName 1");n.equal(Bridge.Enum.getName(ClientTestLibrary.TestEnum.Digits,100),null,"GetName 100")},testGetNames:function(n){n.expect(2);n.deepEqual(Bridge.Enum.getNames(ClientTestLibrary.TestEnum.Abc),["A","B","C"],"Abc names");n.deepEqual(Bridge.Enum.getNames(ClientTestLibrary.TestEnum.Digits),["Zero","One","Two"],"Digits names")},testHasFlag:function(n){n.expect(5);n.equal(Bridge.Enum.hasFlag(3,ClientTestLibrary.TestEnum.Pets.cat),!0,"(Pets.Dog | Pets.Cat).HasFlag(Pets.Cat)");n.equal(Bridge.Enum.hasFlag(3,ClientTestLibrary.TestEnum.Pets.dog),!0,"(Pets.Dog | Pets.Cat).HasFlag(Pets.Dog)");n.equal(Bridge.Enum.hasFlag(3,ClientTestLibrary.TestEnum.Pets.bird),!1,"(Pets.Dog | Pets.Cat).HasFlag(Pets.Bird)");n.equal(Bridge.Enum.hasFlag(ClientTestLibrary.TestEnum.Pets.dog,ClientTestLibrary.TestEnum.Pets.dog),!0,"Pets.Dog.HasFlag(Pets.Dog)");n.equal(Bridge.Enum.hasFlag(ClientTestLibrary.TestEnum.Pets.dog,ClientTestLibrary.TestEnum.Pets.cat),!1,"Pets.Dog.HasFlag(Pets.Cat)")},testIsDefined:function(n){n.expect(6);n.equal(Bridge.Enum.isDefined(ClientTestLibrary.TestEnum.Pets,1),!0,"Enum.IsDefined(typeof(Pets), 1)");n.equal(Bridge.Enum.isDefined(ClientTestLibrary.TestEnum.Pets,17),!1,"Enum.IsDefined(typeof(Pets), 17)");n.equal(Bridge.Enum.isDefined(ClientTestLibrary.TestEnum.Pets,"Rabbit"),!0,'Enum.IsDefined(typeof(Pets), "Rabbit")');n.equal(Bridge.Enum.isDefined(ClientTestLibrary.TestEnum.Pets,"Parrot"),!1,'Enum.IsDefined(typeof(Pets), "Parrot")');n.equal(Bridge.Enum.isDefined(ClientTestLibrary.TestEnum.Pets,"RABBIT"),!1,'Enum.IsDefined(typeof(Pets), "RABBIT")');n.equal(Bridge.Enum.isDefined(ClientTestLibrary.TestEnum.Pets,3),!1,"Enum.IsDefined(typeof(Pets), Pets.Dog | Pets.Cat)")},testTryParse:function(n){n.expect(11);var t={v:new ClientTestLibrary.TestEnum.Digits},i={v:new ClientTestLibrary.TestEnum.Pets};n.equal(Bridge.Enum.tryParse(ClientTestLibrary.TestEnum.Digits,"Zero",t),!0,"TryParse Digits.Zero");n.equal(t.v,ClientTestLibrary.TestEnum.Digits.zero);n.equal(Bridge.Enum.tryParse(ClientTestLibrary.TestEnum.Digits,"One",t),!0,"TryParse Digits.One");n.equal(t.v,ClientTestLibrary.TestEnum.Digits.one);n.equal(Bridge.Enum.tryParse(ClientTestLibrary.TestEnum.Digits,"Two",t),!0,"TryParse Digits.Two");n.equal(t.v,ClientTestLibrary.TestEnum.Digits.two);n.equal(Bridge.Enum.tryParse(ClientTestLibrary.TestEnum.Pets,"Dog, Cat",i),!0,"TryParse Dog, Cat");n.equal(i.v,3);n.equal(Bridge.Enum.tryParse(ClientTestLibrary.TestEnum.Pets,"Bird, Cat, Rabbit",i),!0,"TryParse Bird, Cat, Rabbit");n.equal(i.v,14);n.equal(Bridge.Enum.tryParse(ClientTestLibrary.TestEnum.Digits,"ONE",t),!1,"TryParse ONE")}}});Bridge.define("ClientTestLibrary.TestEnum.Digits",{statics:{zero:0,one:1,two:2},"enum":!0});Bridge.define("ClientTestLibrary.TestEnum.Pets",{statics:{none:0,dog:1,cat:2,bird:4,rabbit:8,other:16},"enum":!0,flags:!0});Bridge.define("ClientTestLibrary.TestEnum.Abc",{statics:{a:-1,b:0,c:1},"enum":!0});Bridge.define("ClientTestLibrary.TestEnum.Pets1",{statics:{none:0,dog:1,cat:2,bird:4,rabbit:8,other:16},"enum":!0});Bridge.init();
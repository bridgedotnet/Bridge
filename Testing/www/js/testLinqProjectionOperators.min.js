"use strict";Bridge.define("ClientTestLibrary.Linq.TestLinqProjectionOperators",{statics:{test:function(n){var t,f,u,e,o,s,h,c,l,a,v,y,p,w;n.expect(8);t=[1,3,5,7];f=Bridge.Linq.Enumerable.from(t).select(function(n){return n+1}).toArray();n.deepEqual(f,[2,4,6,8],"A sequence of ints one higher than the numbers[]");u=ClientTestLibrary.Utilities.Person.getPersons();e=Bridge.Linq.Enumerable.from(u).select(function(n){return n.getName()}).toArray();n.deepEqual(e,["Frank","Zeppa","John","Billy","Dora","Ian","Mary","Nemo"],"Selects names as instance field");o=["zero","one","two","three","four","five","six","seven","eight","nine"];s=Bridge.Linq.Enumerable.from(t).select(function(n){return o[n]}).toArray();n.deepEqual(s,["one","three","five","seven"],"Selects names as items of another array");h=Bridge.Linq.Enumerable.from(u).select(function(n){return{name:n.getName()}}).toArray();c=[{name:"Frank"},{name:"Zeppa"},{name:"John"},{name:"Billy"},{name:"Dora"},{name:"Ian"},{name:"Mary"},{name:"Nemo"}];n.deepEqual(h,c,"Selects names as an anonymous type");t=[0,1,3,3];l=Bridge.Linq.Enumerable.from(t).select(function(n,t){return{number:n,isIndex:n===t}}).toArray();a=[{number:0,isIndex:!0},{number:1,isIndex:!0},{number:3,isIndex:!1},{number:3,isIndex:!0}];n.deepEqual(l,a,"Selects numbers as an anonymous type");var i=[1,5,2],r=[3,4,2],b=Bridge.Linq.Enumerable.from(i).selectMany(function(){return r},function(n,t){return{a:n,b:t}}).where(function(n){return n.a<n.b}).select(function(n){return{a:n.a,b:n.b}}).toArray();n.deepEqual(b,[{a:1,b:3},{a:1,b:4},{a:1,b:2},{a:2,b:3},{a:2,b:4}],"Join two numeric arrays with one where clause");i=[1,5,2,4,3];r=[3,4,2,5,1];v=Bridge.Linq.Enumerable.from(i).where(function(n){return n>1}).selectMany(function(){return r},function(n,t){return{a:n,b:t}}).where(function(n){return n.b<4&&n.a>n.b}).select(function(n){return{sum:n.a+n.b}}).toArray();y=[{sum:8},{sum:7},{sum:6},{sum:3},{sum:7},{sum:6},{sum:5},{sum:5},{sum:4}];n.deepEqual(v,y,"Join two numeric arrays with two where clauses");i=[1,5,2,4,3];r=[3,4,2,5,1];p=Bridge.Linq.Enumerable.from(i).selectMany(function(n,t){return Bridge.Linq.Enumerable.from(r).where(function(i){return n===i&&i>t}).select(function(i){return{a:n,b:i,i:t}})}).toArray();w=[{a:1,b:1,i:0},{a:5,b:5,i:1},{a:4,b:4,i:3}];n.deepEqual(p,w,"SelectMany() two number arrays")}}});Bridge.init();
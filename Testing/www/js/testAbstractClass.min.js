"use strict";Bridge.define("ClientTestLibrary.TestAbstractClass",{statics:{testB:function(n){n.expect(3);var t=new ClientTestLibrary.TestAbstractClass.B;n.ok(t!==null,"Instance of B created");n.equal(t.getString(),"B","b.GetString() = 'B'");n.equal(t.getData(),1,"b.Data = 1")},testC:function(n){n.expect(3);var t=new ClientTestLibrary.TestAbstractClass.C;n.ok(t!==null,"Instance of C created");n.equal(t.getString(),"C","c.GetString() = 'C'");n.equal(t.getData(),-1,"c.Data = -1")},testBC:function(n){var t,i;n.expect(6);t=new ClientTestLibrary.TestAbstractClass.B;n.ok(t!==null,"Instance of B created as instance of A");n.equal(t.getString(),"B","b.GetString() = 'B'");n.equal(t.getData(),1,"b.Data = 1");i=new ClientTestLibrary.TestAbstractClass.C;n.ok(i!==null,"Instance of C created as instance of A");n.equal(i.getString(),"C","c.GetString() = 'C'");n.equal(i.getData(),-1,"c.Data = -1")}}});Bridge.define("ClientTestLibrary.TestAbstractClass.A",{config:{properties:{Data:0}}});Bridge.define("ClientTestLibrary.TestAbstractClass.B",{inherits:[ClientTestLibrary.TestAbstractClass.A],getString:function(){return this.setData(this.getData()+1),"B"}});Bridge.define("ClientTestLibrary.TestAbstractClass.C",{inherits:[ClientTestLibrary.TestAbstractClass.B],getString:function(){return this.setData(this.getData()-1),"C"}});Bridge.init();
"use strict";Bridge.define("ClientTestLibrary.Linq.AnagramEqualityComparer",{inherits:[Bridge.EqualityComparer$1(String)],equals:function(n,t){return this.getCanonicalString(n)===this.getCanonicalString(t)},getHashCode:function(n){return Bridge.getHashCode(this.getCanonicalString(n))},getCanonicalString:function(n){if(n===null)return null;var t=Bridge.String.toCharArray(n,0,n.length);return t.sort(),String.fromCharCode.apply(null,t)}});Bridge.define("ClientTestLibrary.Linq.TestLinqGroupingOperators",{statics:{test:function(n){var t,i,r,u;n.expect(3);var f=Bridge.Linq.Enumerable.from([2,10,3,5,30,1,-15]).groupBy(function(n){return n%5}).select(function(n){return{remainder:n.key(),numbers:n.toArray()}}).toArray();n.deepEqual(f,[{remainder:2,numbers:[2]},{remainder:0,numbers:[10,5,30,-15]},{remainder:3,numbers:[3]},{remainder:1,numbers:[1]}],"Group numbers by remainders");t=Bridge.Linq.Enumerable.from(["1.one","3.three","2.two","22.twentytwo","11.eleven","30.thirty"]).groupBy(function(n){return n.charCodeAt(0)}).select(function(n){return{firstLetter:n.key(),words:n.toArray()}}).toArray();i=[{firstLetter:49,words:["1.one","11.eleven"]},{firstLetter:51,words:["3.three","30.thirty"]},{firstLetter:50,words:["2.two","22.twentytwo"]}];n.deepEqual(t,i,"Group words by first letters");r=Bridge.Linq.Enumerable.from(ClientTestLibrary.Utilities.Person.getPersons()).groupBy(function(n){return n.getGroup()}).select(function(n){return{group:n.key(),persons:n.select(function(n){return n.getName()}).toArray()}}).toArray();u=[{group:"A",persons:["Frank"]},{group:"C",persons:["Zeppa","Billy"]},{group:"B",persons:["John","Dora","Ian","Mary"]},{group:Bridge.cast(null,String),persons:["Nemo"]}];n.deepEqual(r,u,"Person group by Group field")},testComplexGrouping:function(n){n.expect(1);var t=["1.one","3.three","2.two","22.twentytwo","11.eleven","30.thirty"],i=Bridge.Linq.Enumerable.from([2,10,3,5,30,1,-15]).select(function(n){return{number:n,words:Bridge.Linq.Enumerable.from(t).where(function(t){return String.fromCharCode(t.charCodeAt(0))===n.toString()}).groupBy(function(n){return n.charCodeAt(0)}).select(function(n){return{letter:n.key(),letterGroups:Bridge.Linq.Enumerable.from(n).groupBy(function(n){return n},function(n){return n}).select(function(n){return{letter:n.key(),letters:n.toArray()}}).toArray()}}).toArray()}}).toArray(),r=ClientTestLibrary.Linq.TestLinqGroupingOperators.getComplexGroupingExpectedResult();n.deepEqual(i,r,"Complex grouping for numbers and words")},testAnagrams:function(n){var i,r;n.expect(2);var t=[" from "," salt "," earn "," last "," near "," form "],u=Bridge.Linq.Enumerable.from(t).groupBy(function(n){return n.trim()},null,null,new ClientTestLibrary.Linq.AnagramEqualityComparer).select(function(n){return{key:n.key(),words:n.toArray()}}).toArray();n.deepEqual(u,[{key:"from",words:[" from "," form "]},{key:"salt",words:[" salt "," last "]},{key:"earn",words:[" earn "," near "]}],"Anagram grouping with equality comparer");i=Bridge.Linq.Enumerable.from(t).groupBy(function(n){return n.trim()},function(n){return n.toUpperCase()},null,new ClientTestLibrary.Linq.AnagramEqualityComparer).select(function(n){return{key:n.key(),words:n.toArray()}}).toArray();r=[{key:"from",words:[" FROM "," FORM "]},{key:"salt",words:[" SALT "," LAST "]},{key:"earn",words:[" EARN "," NEAR "]}];n.deepEqual(i,r,"Anagram grouping with equality compare and upper case")},getComplexGroupingExpectedResult:function(){return[{number:2,words:[{letter:50,letterGroups:[{letter:"2.two",letters:["2.two"]},{letter:"22.twentytwo",letters:["22.twentytwo"]}]}]},{number:10,words:[]},{number:3,words:[{letter:51,letterGroups:[{letter:"3.three",letters:["3.three"]},{letter:"30.thirty",letters:["30.thirty"]}]}]},{number:5,words:[]},{number:30,words:[]},{number:1,words:[{letter:49,letterGroups:[{letter:"1.one",letters:["1.one"]},{letter:"11.eleven",letters:["11.eleven"]}]}]},{number:-15,words:[]}]}}});Bridge.init();
"use strict";Bridge.define("Classes.Animal",{name:null,constructor:function(){this.name="Animal"},constructor$1:function(n){this.name=n},getName:function(){return this.name},move:function(){return 1}});Bridge.define("Classes.Snake",{inherits:[Classes.Animal],constructor:function(n){Classes.Animal.prototype.constructor$1.call(this,n)},move:function(){return 5}});Bridge.define("Classes.Employee",{inherits:[Classes.Animal],name$1:null,id:0,constructor:function(n,t){Classes.Animal.prototype.constructor$1.call(this,n);this.name$1=n;this.id=t}});Bridge.define("Classes.Dog",{inherits:[Classes.Animal],constructor:function(n){Classes.Animal.prototype.constructor$1.call(this,n)},move$1:function(){return 20}});Bridge.define("Classes.StaticClass",{statics:{move:function(n,t,i){return new Classes.Point("constructor$1",n.x+t,n.y+i)}}});Bridge.define("Classes.Point",{x:0,y:0,constructor$1:function(n,t){this.x=n;this.y=t},constructor:function(){},getHashCode:function(){var n=17;return n=n*23+(this.x==null?0:Bridge.getHashCode(this.x)),n*23+(this.y==null?0:Bridge.getHashCode(this.y))},equals:function(n){return Bridge.is(n,Classes.Point)?Bridge.equals(this.x,n.x)&&Bridge.equals(this.y,n.y):!1},$clone:function(n){var t=n||new Classes.Point;return t.x=this.x,t.y=this.y,t}});Bridge.define("Classes.MovePoint",{statics:{move:function(n,t,i){return Classes.StaticClass.move(n.$clone(),t,i)}},config:{init:function(){Bridge.property(this,"Point",new Classes.Point)}},move:function(n,t){this.setPoint(Classes.MovePoint.move(this.getPoint().$clone(),n,t))}});Bridge.init();
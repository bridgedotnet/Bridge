Bridge.assembly("Bridge_ClientTest_Batch4_Tests", function ($asm, globals) {
    

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner", {
        $main: function () {
            QUnit.test("ActivatorTests - NonGenericCreateInstanceWithoutArgumentsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ActivatorTests.nonGenericCreateInstanceWithoutArgumentsWorks);
            QUnit.test("ActivatorTests - NonGenericCreateInstanceWithOneArgumentWorks_SPI_1540", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ActivatorTests.nonGenericCreateInstanceWithOneArgumentWorks_SPI_1540);
            QUnit.test("ActivatorTests - NonGenericCreateInstanceWithTwoArgumentsWorks_SPI_1541", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ActivatorTests.nonGenericCreateInstanceWithTwoArgumentsWorks_SPI_1541);
            QUnit.test("ActivatorTests - GenericCreateInstanceWithoutArgumentsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ActivatorTests.genericCreateInstanceWithoutArgumentsWorks);
            QUnit.test("ActivatorTests - GenericCreateInstanceWithOneArgumentWorks_SPI_1542", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ActivatorTests.genericCreateInstanceWithOneArgumentWorks_SPI_1542);
            QUnit.test("ActivatorTests - GenericCreateInstanceWithTwoArgumentsWorks_SPI_1543", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ActivatorTests.genericCreateInstanceWithTwoArgumentsWorks_SPI_1543);
            QUnit.test("ActivatorTests - InstantiatingTypeParameterWithDefaultConstructorConstraintWorks_SPI_1544", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ActivatorTests.instantiatingTypeParameterWithDefaultConstructorConstraintWorks_SPI_1544);
            QUnit.test("ActivatorTests - CreateInstanceWithNoArgumentsWorksForClassWithUnnamedDefaultConstructor", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ActivatorTests.createInstanceWithNoArgumentsWorksForClassWithUnnamedDefaultConstructor);
            QUnit.test("ActivatorTests - CreateInstanceWithNoArgumentsWorksForClassWithNamedDefaultConstructor", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ActivatorTests.createInstanceWithNoArgumentsWorksForClassWithNamedDefaultConstructor);
            QUnit.test("ActivatorTests - CreateInstanceWithNoArgumentsWorksForClassWithInlineCodeDefaultConstructor_SPI_1545", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ActivatorTests.createInstanceWithNoArgumentsWorksForClassWithInlineCodeDefaultConstructor_SPI_1545);
            QUnit.test("ActivatorTests - CreateInstanceWithNoArgumentsWorksForClassWithStaticMethodDefaultConstructor", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ActivatorTests.createInstanceWithNoArgumentsWorksForClassWithStaticMethodDefaultConstructor);
            QUnit.test("ActivatorTests - CreateInstanceWithNoArgumentsWorksForClassWithJsonDefaultConstructor", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ActivatorTests.createInstanceWithNoArgumentsWorksForClassWithJsonDefaultConstructor);
            QUnit.test("ActivatorTests - CreateInstanceWithNoArgumentsWorksForGenericClassWithNamedDefaultConstructor", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ActivatorTests.createInstanceWithNoArgumentsWorksForGenericClassWithNamedDefaultConstructor);
            QUnit.test("AppDomainTests - GetAssembliesWorks_SPI_1646", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_AppDomainTests.getAssembliesWorks_SPI_1646);
            QUnit.test("ArgumentsTests - LengthWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArgumentsTests.lengthWorks);
            QUnit.test("ArgumentsTests - GetArgumentWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArgumentsTests.getArgumentWorks);
            QUnit.test("ArgumentsTests - ToArrayWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArgumentsTests.toArrayWorks);
            QUnit.test("ArgumentsTests - ToArrayOfTWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArgumentsTests.toArrayOfTWorks);
            QUnit.test("ArrayTests - TypePropertiesAreCorrect_SPI_1546", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.typePropertiesAreCorrect_SPI_1546);
            QUnit.test("ArrayTests - TypePropertiesAreCorrect_SPI_1548", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.typePropertiesAreCorrect_SPI_1548);
            QUnit.test("ArrayTests - ArrayCanBeAssignedToTheCollectionInterfaces_SPI_1547", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.arrayCanBeAssignedToTheCollectionInterfaces_SPI_1547);
            QUnit.test("ArrayTests - LengthWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.lengthWorks);
            QUnit.test("ArrayTests - RankIsOne", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.rankIsOne);
            QUnit.test("ArrayTests - GetLengthWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.getLengthWorks);
            QUnit.test("ArrayTests - GetLowerBound", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.getLowerBound);
            QUnit.test("ArrayTests - GetUpperBoundWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.getUpperBoundWorks);
            QUnit.test("ArrayTests - GettingValueByIndexWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.gettingValueByIndexWorks);
            QUnit.test("ArrayTests - GetValueWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.getValueWorks);
            QUnit.test("ArrayTests - SettingValueByIndexWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.settingValueByIndexWorks);
            QUnit.test("ArrayTests - SetValueWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.setValueWorks);
            QUnit.test("ArrayTests - ForeachWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.foreachWorks);
            QUnit.test("ArrayTests - CloneWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.cloneWorks);
            QUnit.test("ArrayTests - ConcatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.concatWorks);
            QUnit.test("ArrayTests - ContainsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.containsWorks);
            QUnit.test("ArrayTests - ContainsUsesEqualsMethod", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.containsUsesEqualsMethod);
            QUnit.test("ArrayTests - SliceWithoutEndWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.sliceWithoutEndWorks);
            QUnit.test("ArrayTests - SliceWithEndWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.sliceWithEndWorks);
            QUnit.test("ArrayTests - ForeachWithArrayItemCallbackWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.foreachWithArrayItemCallbackWorks);
            QUnit.test("ArrayTests - IndexOfWithoutStartIndexWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.indexOfWithoutStartIndexWorks);
            QUnit.test("ArrayTests - IndexOfWithoutStartIndexUsesEqualsMethod", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.indexOfWithoutStartIndexUsesEqualsMethod);
            QUnit.test("ArrayTests - IndexOfWithStartIndexWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.indexOfWithStartIndexWorks);
            QUnit.test("ArrayTests - IndexOfWithStartIndexUsesEqualsMethod", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.indexOfWithStartIndexUsesEqualsMethod);
            QUnit.test("ArrayTests - JoinWithoutDelimiterWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.joinWithoutDelimiterWorks);
            QUnit.test("ArrayTests - JoinWithDelimiterWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.joinWithDelimiterWorks);
            QUnit.test("ArrayTests - ReverseWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.reverseWorks);
            QUnit.test("ArrayTests - SortWithDefaultCompareWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.sortWithDefaultCompareWorks);
            QUnit.test("ArrayTests - SortWithCompareCallbackWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.sortWithCompareCallbackWorks);
            QUnit.test("ArrayTests - ForeachWhenCastToIListWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.foreachWhenCastToIListWorks);
            QUnit.test("ArrayTests - ICollectionCountWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.iCollectionCountWorks);
            QUnit.test("ArrayTests - ICollectionAddWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.iCollectionAddWorks);
            QUnit.test("ArrayTests - ICollectionClearWorks_NDN_1548", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.iCollectionClearWorks_NDN_1548);
            QUnit.test("ArrayTests - ICollectionContainsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.iCollectionContainsWorks);
            QUnit.test("ArrayTests - ICollectionContainsUsesEqualsMethod", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.iCollectionContainsUsesEqualsMethod);
            QUnit.test("ArrayTests - ICollectionRemoveWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.iCollectionRemoveWorks);
            QUnit.test("ArrayTests - IListIndexingWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.iListIndexingWorks);
            QUnit.test("ArrayTests - IListIndexOfWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.iListIndexOfWorks);
            QUnit.test("ArrayTests - IListIndexOfUsesEqualsMethod", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.iListIndexOfUsesEqualsMethod);
            QUnit.test("ArrayTests - IListInsertWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.iListInsertWorks);
            QUnit.test("ArrayTests - IListRemoveAtWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.iListRemoveAtWorks);
            QUnit.test("ArrayTests - RepeatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.repeatWorks);
            QUnit.test("ArrayTests - ClearWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.clearWorks);
            QUnit.test("ArrayTests - CopyWithDifferentArraysWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.copyWithDifferentArraysWorks);
            QUnit.test("ArrayTests - CopyWithinArrayWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests.copyWithinArrayWorks);
            QUnit.test("ComparerTests - TypePropertiesAreCorrect_SPI_1546", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ComparerTests.typePropertiesAreCorrect_SPI_1546);
            QUnit.test("ComparerTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ComparerTests.typePropertiesAreCorrect);
            QUnit.test("ComparerTests - DefaultComparerCanOrderNumbers", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ComparerTests.defaultComparerCanOrderNumbers);
            QUnit.test("ComparerTests - DefaultComparerCanOrderNullValues", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ComparerTests.defaultComparerCanOrderNullValues);
            QUnit.test("ComparerTests - DefaultComparerUsesCompareMethodIfClassImplementsIComparable", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ComparerTests.defaultComparerUsesCompareMethodIfClassImplementsIComparable);
            QUnit.test("ComparerTests - CreateWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ComparerTests.createWorks);
            QUnit.test("EqualityComparerTests - TypePropertiesAreCorrect_SPI_1546", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_EqualityComparerTests.typePropertiesAreCorrect_SPI_1546);
            QUnit.test("EqualityComparerTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_EqualityComparerTests.typePropertiesAreCorrect);
            QUnit.test("EqualityComparerTests - DefaultComparerCanGetHashCodeOfNumber", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_EqualityComparerTests.defaultComparerCanGetHashCodeOfNumber);
            QUnit.test("EqualityComparerTests - DefaultComparerReturnsZeroAsHashCodeForNullAndUndefined", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_EqualityComparerTests.defaultComparerReturnsZeroAsHashCodeForNullAndUndefined);
            QUnit.test("EqualityComparerTests - DefaultComparerCanDetermineEquality", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_EqualityComparerTests.defaultComparerCanDetermineEquality);
            QUnit.test("EqualityComparerTests - DefaultComparerInvokesOverriddenGetHashCode", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_EqualityComparerTests.defaultComparerInvokesOverriddenGetHashCode);
            QUnit.test("EqualityComparerTests - DefaultComparerInvokesOverriddenEquals", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_EqualityComparerTests.defaultComparerInvokesOverriddenEquals);
            QUnit.test("GenericDictionaryTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests.typePropertiesAreCorrect);
            QUnit.test("GenericDictionaryTests - DefaultConstructorWorks_SPI_1549", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests.defaultConstructorWorks_SPI_1549);
            QUnit.test("GenericDictionaryTests - CapacityConstructorWorks_SPI_1549", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests.capacityConstructorWorks_SPI_1549);
            QUnit.test("GenericDictionaryTests - CapacityAndEqualityComparerWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests.capacityAndEqualityComparerWorks);
            QUnit.test("GenericDictionaryTests - CopyConstructorWorks_SPI_1549", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests.copyConstructorWorks_SPI_1549);
            QUnit.test("GenericDictionaryTests - EqualityComparerOnlyConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests.equalityComparerOnlyConstructorWorks);
            QUnit.test("GenericDictionaryTests - ConstructorWithBothDictionaryAndEqualityComparerWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests.constructorWithBothDictionaryAndEqualityComparerWorks);
            QUnit.test("GenericDictionaryTests - CountWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests.countWorks);
            QUnit.test("GenericDictionaryTests - KeysWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests.keysWorks);
            QUnit.test("GenericDictionaryTests - ValuesWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests.valuesWorks);
            QUnit.test("GenericDictionaryTests - IndexerGetterWorksForExistingItems", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests.indexerGetterWorksForExistingItems);
            QUnit.test("GenericDictionaryTests - IndexerSetterWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests.indexerSetterWorks);
            QUnit.test("GenericDictionaryTests - IndexerGetterThrowsForNonExistingItems", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests.indexerGetterThrowsForNonExistingItems);
            QUnit.test("GenericDictionaryTests - AddWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests.addWorks);
            QUnit.test("GenericDictionaryTests - AddThrowsIfItemAlreadyExists", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests.addThrowsIfItemAlreadyExists);
            QUnit.test("GenericDictionaryTests - ClearWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests.clearWorks);
            QUnit.test("GenericDictionaryTests - ContainsKeyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests.containsKeyWorks);
            QUnit.test("GenericDictionaryTests - EnumeratingWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests.enumeratingWorks);
            QUnit.test("GenericDictionaryTests - RemoveWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests.removeWorks);
            QUnit.test("GenericDictionaryTests - TryGetValueWithIntKeysWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests.tryGetValueWithIntKeysWorks);
            QUnit.test("GenericDictionaryTests - TryGetValueWithObjectKeysWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests.tryGetValueWithObjectKeysWorks);
            QUnit.test("GenericDictionaryTests - CanUseCustomComparer", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests.canUseCustomComparer);
            QUnit.test("ICollectionTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ICollectionTests.typePropertiesAreCorrect);
            QUnit.test("ICollectionTests - ArrayImplementsICollection", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ICollectionTests.arrayImplementsICollection);
            QUnit.test("ICollectionTests - CustomClassThatShouldImplementICollectionDoesSo", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ICollectionTests.customClassThatShouldImplementICollectionDoesSo);
            QUnit.test("ICollectionTests - ArrayCastToICollectionCountWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ICollectionTests.arrayCastToICollectionCountWorks);
            QUnit.test("ICollectionTests - ClassImplementingICollectionCountWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ICollectionTests.classImplementingICollectionCountWorks);
            QUnit.test("ICollectionTests - ClassImplementingICollectionCastToICollectionCountWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ICollectionTests.classImplementingICollectionCastToICollectionCountWorks);
            QUnit.test("ICollectionTests - ClassImplementingICollectionAddWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ICollectionTests.classImplementingICollectionAddWorks);
            QUnit.test("ICollectionTests - ClassImplementingICollectionCastToICollectionAddWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ICollectionTests.classImplementingICollectionCastToICollectionAddWorks);
            QUnit.test("ICollectionTests - ClassImplementingICollectionClearWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ICollectionTests.classImplementingICollectionClearWorks);
            QUnit.test("ICollectionTests - ClassImplementingICollectionCastToICollectionClearWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ICollectionTests.classImplementingICollectionCastToICollectionClearWorks);
            QUnit.test("ICollectionTests - ArrayCastToICollectionContainsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ICollectionTests.arrayCastToICollectionContainsWorks);
            QUnit.test("ICollectionTests - ClassImplementingICollectionContainsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ICollectionTests.classImplementingICollectionContainsWorks);
            QUnit.test("ICollectionTests - ClassImplementingICollectionCastToICollectionContainsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ICollectionTests.classImplementingICollectionCastToICollectionContainsWorks);
            QUnit.test("ICollectionTests - ClassImplementingICollectionRemoveWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ICollectionTests.classImplementingICollectionRemoveWorks);
            QUnit.test("ICollectionTests - ClassImplementingICollectionCastToICollectionRemoveWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ICollectionTests.classImplementingICollectionCastToICollectionRemoveWorks);
            QUnit.test("IDictionaryTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IDictionaryTests.typePropertiesAreCorrect);
            QUnit.test("IDictionaryTests - ClassImplementsInterfaces_SPI_1626", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IDictionaryTests.classImplementsInterfaces_SPI_1626);
            QUnit.test("IDictionaryTests - CountWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IDictionaryTests.countWorks);
            QUnit.test("IDictionaryTests - KeysWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IDictionaryTests.keysWorks);
            QUnit.test("IDictionaryTests - GetItemWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IDictionaryTests.getItemWorks);
            QUnit.test("IDictionaryTests - ValuesWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IDictionaryTests.valuesWorks);
            QUnit.test("IDictionaryTests - ContainsKeyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IDictionaryTests.containsKeyWorks);
            QUnit.test("IDictionaryTests - TryGetValueWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IDictionaryTests.tryGetValueWorks);
            QUnit.test("IDictionaryTests - AddWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IDictionaryTests.addWorks);
            QUnit.test("IDictionaryTests - ClearWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IDictionaryTests.clearWorks);
            QUnit.test("IDictionaryTests - SetItemWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IDictionaryTests.setItemWorks);
            QUnit.test("IEnumerableTests - ArrayImplementsIEnumerable", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IEnumerableTests.arrayImplementsIEnumerable);
            QUnit.test("IEnumerableTests - CustomClassThatShouldImplementIEnumerableDoesSo", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IEnumerableTests.customClassThatShouldImplementIEnumerableDoesSo);
            QUnit.test("IEnumerableTests - ArrayGetEnumeratorMethodWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IEnumerableTests.arrayGetEnumeratorMethodWorks);
            QUnit.test("IEnumerableTests - ArrayCastToIEnumerableCanBeEnumerated", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IEnumerableTests.arrayCastToIEnumerableCanBeEnumerated);
            QUnit.test("IEnumerableTests - ClassImplementingIEnumerableCanBeEnumerated", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IEnumerableTests.classImplementingIEnumerableCanBeEnumerated);
            QUnit.test("IEnumerableTests - ClassImplementingIEnumerableCastToIEnumerableCanBeEnumerated", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IEnumerableTests.classImplementingIEnumerableCastToIEnumerableCanBeEnumerated);
            QUnit.test("IListTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IListTests.typePropertiesAreCorrect);
            QUnit.test("IListTests - ArrayImplementsIList", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IListTests.arrayImplementsIList);
            QUnit.test("IListTests - CustomClassThatShouldImplementIListDoesSo", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IListTests.customClassThatShouldImplementIListDoesSo);
            QUnit.test("IListTests - ArrayCastToIListGetItemWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IListTests.arrayCastToIListGetItemWorks);
            QUnit.test("IListTests - ClassImplementingIListGetItemWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IListTests.classImplementingIListGetItemWorks);
            QUnit.test("IListTests - ClassImplementingIListCastToIListGetItemWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IListTests.classImplementingIListCastToIListGetItemWorks);
            QUnit.test("IListTests - ArrayCastToIListSetItemWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IListTests.arrayCastToIListSetItemWorks);
            QUnit.test("IListTests - ClassImplementingIListSetItemWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IListTests.classImplementingIListSetItemWorks);
            QUnit.test("IListTests - ClassImplementingIListCastToIListSetItemWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IListTests.classImplementingIListCastToIListSetItemWorks);
            QUnit.test("IListTests - ArrayCastToIListIndexOfWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IListTests.arrayCastToIListIndexOfWorks);
            QUnit.test("IListTests - ClassImplementingIListIndexOfWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IListTests.classImplementingIListIndexOfWorks);
            QUnit.test("IListTests - ClassImplementingIListCastToIListIndexOfWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IListTests.classImplementingIListCastToIListIndexOfWorks);
            QUnit.test("IListTests - ClassImplementingIListInsertWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IListTests.classImplementingIListInsertWorks);
            QUnit.test("IListTests - ClassImplementingIListCastToIListInsertWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IListTests.classImplementingIListCastToIListInsertWorks);
            QUnit.test("IListTests - ClassImplementingIListRemoveAtWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IListTests.classImplementingIListRemoveAtWorks);
            QUnit.test("IListTests - ClassImplementingIListCastToIListRemoveAtWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IListTests.classImplementingIListCastToIListRemoveAtWorks);
            QUnit.test("IteratorBlockTests - TypeReturnedByIteratorBlockReturningIEnumeratorImplementsThatInterfaceAndIDisposable_SPI_1554", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IteratorBlockTests.typeReturnedByIteratorBlockReturningIEnumeratorImplementsThatInterfaceAndIDisposable_SPI_1554);
            QUnit.test("IteratorBlockTests - EnumeratingIEnumeratorIteratorToEndWorks_SPI_1555", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IteratorBlockTests.enumeratingIEnumeratorIteratorToEndWorks_SPI_1555);
            QUnit.test("IteratorBlockTests - PrematureDisposalOfIEnumeratorIteratorExecutesFinallyBlocks_SPI_1555", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IteratorBlockTests.prematureDisposalOfIEnumeratorIteratorExecutesFinallyBlocks_SPI_1555);
            QUnit.test("IteratorBlockTests - ExceptionInIEnumeratorIteratorBodyExecutesFinallyBlocks_SPI_1554", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IteratorBlockTests.exceptionInIEnumeratorIteratorBodyExecutesFinallyBlocks_SPI_1554);
            QUnit.test("IteratorBlockTests - TypeReturnedByIteratorBlockReturningIEnumerableImplementsThatInterface_SPI_1554", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IteratorBlockTests.typeReturnedByIteratorBlockReturningIEnumerableImplementsThatInterface_SPI_1554);
            QUnit.test("IteratorBlockTests - EnumeratingIEnumerableIteratorToEndWorks_SPI_1555", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IteratorBlockTests.enumeratingIEnumerableIteratorToEndWorks_SPI_1555);
            QUnit.test("IteratorBlockTests - PrematureDisposalOfIEnumerableIteratorExecutesFinallyBlocks_SPI_1555", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IteratorBlockTests.prematureDisposalOfIEnumerableIteratorExecutesFinallyBlocks_SPI_1555);
            QUnit.test("IteratorBlockTests - ExceptionInIEnumerableIteratorBodyExecutesFinallyBlocks_SPI_1554", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IteratorBlockTests.exceptionInIEnumerableIteratorBodyExecutesFinallyBlocks_SPI_1554);
            QUnit.test("IteratorBlockTests - EnumeratingAnIteratorBlockReturningIEnumerableMultipleTimesUsesTheInitialValuesForParameters", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IteratorBlockTests.enumeratingAnIteratorBlockReturningIEnumerableMultipleTimesUsesTheInitialValuesForParameters);
            QUnit.test("IteratorBlockTests - DifferentGetEnumeratorCallsOnIteratorBlockReturningIEnumerableGetOwnCopiesOfLocals", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IteratorBlockTests.differentGetEnumeratorCallsOnIteratorBlockReturningIEnumerableGetOwnCopiesOfLocals);
            QUnit.test("KeyValuePairTests - TheConstructorWithParametersCanBeUsed", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_KeyValuePairTests.theConstructorWithParametersCanBeUsed);
            QUnit.test("KeyValuePairTests - TypeTestWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_KeyValuePairTests.typeTestWorks);
            QUnit.test("KeyValuePairTests - TypeTestWorksGeneric_SPI_1556", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_KeyValuePairTests.typeTestWorksGeneric_SPI_1556);
            QUnit.test("KeyValuePairTests - TheDefaultConstructorCanBeUsed_SPI_1556", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_KeyValuePairTests.theDefaultConstructorCanBeUsed_SPI_1556);
            QUnit.test("KeyValuePairTests - CreatingADefaultKeyValuePairCreatesAnInstanceThatIsNotNull_SPI_1556", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_KeyValuePairTests.creatingADefaultKeyValuePairCreatesAnInstanceThatIsNotNull_SPI_1556);
            QUnit.test("KeyValuePairTests - ActivatorCreateInstanceWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_KeyValuePairTests.activatorCreateInstanceWorks);
            QUnit.test("ListTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.typePropertiesAreCorrect);
            QUnit.test("ListTests - DefaultConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.defaultConstructorWorks);
            QUnit.test("ListTests - ConstructorWithCapacityWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.constructorWithCapacityWorks);
            QUnit.test("ListTests - ConstructingFromArrayWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.constructingFromArrayWorks);
            QUnit.test("ListTests - ConstructingFromListWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.constructingFromListWorks);
            QUnit.test("ListTests - ConstructingFromIEnumerableWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.constructingFromIEnumerableWorks);
            QUnit.test("ListTests - CountWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.countWorks);
            QUnit.test("ListTests - IndexingWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.indexingWorks);
            QUnit.test("ListTests - ForeachWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.foreachWorks);
            QUnit.test("ListTests - GetEnumeratorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.getEnumeratorWorks);
            QUnit.test("ListTests - AddWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.addWorks);
            QUnit.test("ListTests - AddRangeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.addRangeWorks);
            QUnit.test("ListTests - ClearWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.clearWorks);
            QUnit.test("ListTests - ConcatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.concatWorks);
            QUnit.test("ListTests - ContainsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.containsWorks);
            QUnit.test("ListTests - ContainsUsesEqualsMethod", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.containsUsesEqualsMethod);
            QUnit.test("ListTests - SliceWithoutEndWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.sliceWithoutEndWorks);
            QUnit.test("ListTests - SliceWithEndWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.sliceWithEndWorks);
            QUnit.test("ListTests - IndexOfWithoutStartIndexWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.indexOfWithoutStartIndexWorks);
            QUnit.test("ListTests - IndexOfWithoutStartIndexUsesEqualsMethod", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.indexOfWithoutStartIndexUsesEqualsMethod);
            QUnit.test("ListTests - IndexOfWithStartIndexWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.indexOfWithStartIndexWorks);
            QUnit.test("ListTests - IndexOfWithStartIndexUsesEqualsMethod", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.indexOfWithStartIndexUsesEqualsMethod);
            QUnit.test("ListTests - InsertWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.insertWorks);
            QUnit.test("ListTests - InsertRangeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.insertRangeWorks);
            QUnit.test("ListTests - JoinWithoutDelimiterWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.joinWithoutDelimiterWorks);
            QUnit.test("ListTests - JoinWithDelimiterWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.joinWithDelimiterWorks);
            QUnit.test("ListTests - RemoveWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.removeWorks);
            QUnit.test("ListTests - RemoveReturnsFalseIfTheElementWasNotFound", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.removeReturnsFalseIfTheElementWasNotFound);
            QUnit.test("ListTests - RemoveCanRemoveNullItem", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.removeCanRemoveNullItem);
            QUnit.test("ListTests - RemoveUsesEqualsMethod", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.removeUsesEqualsMethod);
            QUnit.test("ListTests - RemoveAtWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.removeAtWorks);
            QUnit.test("ListTests - RemoveRangeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.removeRangeWorks);
            QUnit.test("ListTests - ReverseWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.reverseWorks);
            QUnit.test("ListTests - SortWithDefaultCompareWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.sortWithDefaultCompareWorks);
            QUnit.test("ListTests - SortWithCompareCallbackWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.sortWithCompareCallbackWorks);
            QUnit.test("ListTests - SortWithIComparerWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.sortWithIComparerWorks);
            QUnit.test("ListTests - ForeachWhenCastToIEnumerableWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.foreachWhenCastToIEnumerableWorks);
            QUnit.test("ListTests - IEnumerableGetEnumeratorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.iEnumerableGetEnumeratorWorks);
            QUnit.test("ListTests - ICollectionCountWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.iCollectionCountWorks);
            QUnit.test("ListTests - ICollectionAddWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.iCollectionAddWorks);
            QUnit.test("ListTests - ICollectionClearWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.iCollectionClearWorks);
            QUnit.test("ListTests - ICollectionContainsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.iCollectionContainsWorks);
            QUnit.test("ListTests - ICollectionContainsUsesEqualsMethod", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.iCollectionContainsUsesEqualsMethod);
            QUnit.test("ListTests - ICollectionRemoveWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.iCollectionRemoveWorks);
            QUnit.test("ListTests - ICollectionRemoveCanRemoveNullItem", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.iCollectionRemoveCanRemoveNullItem);
            QUnit.test("ListTests - ICollectionRemoveUsesEqualsMethod", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.iCollectionRemoveUsesEqualsMethod);
            QUnit.test("ListTests - IListIndexingWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.iListIndexingWorks);
            QUnit.test("ListTests - IListIndexOfWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.iListIndexOfWorks);
            QUnit.test("ListTests - IListIndexOfUsesEqualsMethod", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.iListIndexOfUsesEqualsMethod);
            QUnit.test("ListTests - IListInsertWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.iListInsertWorks);
            QUnit.test("ListTests - IListRemoveAtWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.iListRemoveAtWorks);
            QUnit.test("ListTests - ToArrayWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests.toArrayWorks);
            QUnit.test("ReadOnlyCollectionTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_ObjectModel_ReadOnlyCollectionTests.typePropertiesAreCorrect);
            QUnit.test("ReadOnlyCollectionTests - ConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_ObjectModel_ReadOnlyCollectionTests.constructorWorks);
            QUnit.test("ReadOnlyCollectionTests - CountWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_ObjectModel_ReadOnlyCollectionTests.countWorks);
            QUnit.test("ReadOnlyCollectionTests - IndexingWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_ObjectModel_ReadOnlyCollectionTests.indexingWorks);
            QUnit.test("ReadOnlyCollectionTests - ForeachWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_ObjectModel_ReadOnlyCollectionTests.foreachWorks);
            QUnit.test("ReadOnlyCollectionTests - GetEnumeratorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_ObjectModel_ReadOnlyCollectionTests.getEnumeratorWorks);
            QUnit.test("ReadOnlyCollectionTests - ContainsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_ObjectModel_ReadOnlyCollectionTests.containsWorks);
            QUnit.test("ReadOnlyCollectionTests - ContainsUsesEqualsMethod", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_ObjectModel_ReadOnlyCollectionTests.containsUsesEqualsMethod);
            QUnit.test("ReadOnlyCollectionTests - IndexOfWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_ObjectModel_ReadOnlyCollectionTests.indexOfWorks);
            QUnit.test("ReadOnlyCollectionTests - ForeachWhenCastToIEnumerableWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_ObjectModel_ReadOnlyCollectionTests.foreachWhenCastToIEnumerableWorks);
            QUnit.test("ReadOnlyCollectionTests - IEnumerableGetEnumeratorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_ObjectModel_ReadOnlyCollectionTests.iEnumerableGetEnumeratorWorks);
            QUnit.test("ReadOnlyCollectionTests - ICollectionCountWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_ObjectModel_ReadOnlyCollectionTests.iCollectionCountWorks);
            QUnit.test("ReadOnlyCollectionTests - ICollectionContainsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_ObjectModel_ReadOnlyCollectionTests.iCollectionContainsWorks);
            QUnit.test("ReadOnlyCollectionTests - ICollectionContainsUsesEqualsMethod", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_ObjectModel_ReadOnlyCollectionTests.iCollectionContainsUsesEqualsMethod);
            QUnit.test("ReadOnlyCollectionTests - IListIndexingWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_ObjectModel_ReadOnlyCollectionTests.iListIndexingWorks);
            QUnit.test("ReadOnlyCollectionTests - IListIndexOfWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_ObjectModel_ReadOnlyCollectionTests.iListIndexOfWorks);
            QUnit.test("ReadOnlyCollectionTests - IListIndexOfUsesEqualsMethod", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_ObjectModel_ReadOnlyCollectionTests.iListIndexOfUsesEqualsMethod);
            QUnit.test("ArrayBufferTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_ArrayBufferTests.typePropertiesAreCorrect);
            QUnit.test("ArrayBufferTests - ConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_ArrayBufferTests.constructorWorks);
            QUnit.test("ArrayBufferTests - ByteLengthPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_ArrayBufferTests.byteLengthPropertyWorks);
            QUnit.test("DataViewTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests.typePropertiesAreCorrect);
            QUnit.test("DataViewTests - ArrayBufferOnlyConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests.arrayBufferOnlyConstructorWorks);
            QUnit.test("DataViewTests - ArrayBufferAndByteOffsetConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests.arrayBufferAndByteOffsetConstructorWorks);
            QUnit.test("DataViewTests - ArrayBufferAndByteOffsetAndByteLengthConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests.arrayBufferAndByteOffsetAndByteLengthConstructorWorks);
            QUnit.test("DataViewTests - GetInt8Works", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests.getInt8Works);
            QUnit.test("DataViewTests - GetUint8Works", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests.getUint8Works);
            QUnit.test("DataViewTests - GetInt16Works", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests.getInt16Works);
            QUnit.test("DataViewTests - GetUint16Works", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests.getUint16Works);
            QUnit.test("DataViewTests - GetInt32Works", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests.getInt32Works);
            QUnit.test("DataViewTests - GetUint32Works", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests.getUint32Works);
            QUnit.test("DataViewTests - GetFloat32Works", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests.getFloat32Works);
            QUnit.test("DataViewTests - GetFloat64Works", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests.getFloat64Works);
            QUnit.test("DataViewTests - SetInt8Works", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests.setInt8Works);
            QUnit.test("DataViewTests - SetUint8Works", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests.setUint8Works);
            QUnit.test("DataViewTests - SetInt16Works", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests.setInt16Works);
            QUnit.test("DataViewTests - SetUint16Works", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests.setUint16Works);
            QUnit.test("DataViewTests - SetInt32Works", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests.setInt32Works);
            QUnit.test("DataViewTests - SetUint32Works", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests.setUint32Works);
            QUnit.test("DataViewTests - SetFloat32Works", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests.setFloat32Works);
            QUnit.test("DataViewTests - SetFloat64Works", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests.setFloat64Works);
            QUnit.test("Float32ArrayTests - TypePropertiesAreCorrect_SPI_1559", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests.typePropertiesAreCorrect_SPI_1559);
            QUnit.test("Float32ArrayTests - LengthConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests.lengthConstructorWorks);
            QUnit.test("Float32ArrayTests - ConstructorFromIntWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests.constructorFromIntWorks);
            QUnit.test("Float32ArrayTests - CopyConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests.copyConstructorWorks);
            QUnit.test("Float32ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests.arrayBufferConstructorWorks);
            QUnit.test("Float32ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests.arrayBufferWithOffsetConstructorWorks);
            QUnit.test("Float32ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests.arrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Float32ArrayTests - StaticBytesPerElementWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests.staticBytesPerElementWorks);
            QUnit.test("Float32ArrayTests - LengthWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests.lengthWorks);
            QUnit.test("Float32ArrayTests - IndexingWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests.indexingWorks);
            QUnit.test("Float32ArrayTests - SetFloat32ArrayWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests.setFloat32ArrayWorks);
            QUnit.test("Float32ArrayTests - SetFloat32ArrayWithOffsetWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests.setFloat32ArrayWithOffsetWorks);
            QUnit.test("Float32ArrayTests - SetNormalArrayWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests.setNormalArrayWorks);
            QUnit.test("Float32ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests.setNormalArrayWithOffsetWorks);
            QUnit.test("Float32ArrayTests - SubarrayWithBeginWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests.subarrayWithBeginWorks);
            QUnit.test("Float32ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests.subarrayWithBeginAndEndWorks);
            QUnit.test("Float32ArrayTests - BufferPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests.bufferPropertyWorks);
            QUnit.test("Float32ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests.byteOffsetPropertyWorks);
            QUnit.test("Float32ArrayTests - ByteLengthPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests.byteLengthPropertyWorks);
            QUnit.test("Float32ArrayTests - IndexOfWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests.indexOfWorks);
            QUnit.test("Float32ArrayTests - ContainsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests.containsWorks);
            QUnit.test("Float32ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests.foreachWorks_SPI_1401);
            QUnit.test("Float32ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests.getEnumeratorWorks_SPI_1401);
            QUnit.test("Float32ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests.iEnumerableGetEnumeratorWorks);
            QUnit.test("Float32ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests.iCollectionMethodsWork_SPI_1559);
            QUnit.test("Float32ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests.iListMethodsWork_SPI_1559);
            QUnit.test("Float64ArrayTests - TypePropertiesAreCorrect_SPI_1559", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests.typePropertiesAreCorrect_SPI_1559);
            QUnit.test("Float64ArrayTests - LengthConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests.lengthConstructorWorks);
            QUnit.test("Float64ArrayTests - ConstructorFromIntWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests.constructorFromIntWorks);
            QUnit.test("Float64ArrayTests - CopyConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests.copyConstructorWorks);
            QUnit.test("Float64ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests.arrayBufferConstructorWorks);
            QUnit.test("Float64ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests.arrayBufferWithOffsetConstructorWorks);
            QUnit.test("Float64ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests.arrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Float64ArrayTests - StaticBytesPerElementWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests.staticBytesPerElementWorks);
            QUnit.test("Float64ArrayTests - LengthWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests.lengthWorks);
            QUnit.test("Float64ArrayTests - IndexingWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests.indexingWorks);
            QUnit.test("Float64ArrayTests - SetFloat64ArrayWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests.setFloat64ArrayWorks);
            QUnit.test("Float64ArrayTests - SetFloat64ArrayWithOffsetWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests.setFloat64ArrayWithOffsetWorks);
            QUnit.test("Float64ArrayTests - SetNormalArrayWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests.setNormalArrayWorks);
            QUnit.test("Float64ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests.setNormalArrayWithOffsetWorks);
            QUnit.test("Float64ArrayTests - SubarrayWithBeginWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests.subarrayWithBeginWorks);
            QUnit.test("Float64ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests.subarrayWithBeginAndEndWorks);
            QUnit.test("Float64ArrayTests - BufferPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests.bufferPropertyWorks);
            QUnit.test("Float64ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests.byteOffsetPropertyWorks);
            QUnit.test("Float64ArrayTests - ByteLengthPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests.byteLengthPropertyWorks);
            QUnit.test("Float64ArrayTests - IndexOfWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests.indexOfWorks);
            QUnit.test("Float64ArrayTests - ContainsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests.containsWorks);
            QUnit.test("Float64ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests.foreachWorks_SPI_1401);
            QUnit.test("Float64ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests.getEnumeratorWorks_SPI_1401);
            QUnit.test("Float64ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests.iEnumerableGetEnumeratorWorks);
            QUnit.test("Float64ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests.iCollectionMethodsWork_SPI_1559);
            QUnit.test("Float64ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests.iListMethodsWork_SPI_1559);
            QUnit.test("Int16ArrayTests - TypePropertiesAreCorrect_SPI_1559", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests.typePropertiesAreCorrect_SPI_1559);
            QUnit.test("Int16ArrayTests - LengthConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests.lengthConstructorWorks);
            QUnit.test("Int16ArrayTests - ConstructorFromIntWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests.constructorFromIntWorks);
            QUnit.test("Int16ArrayTests - CopyConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests.copyConstructorWorks);
            QUnit.test("Int16ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests.arrayBufferConstructorWorks);
            QUnit.test("Int16ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests.arrayBufferWithOffsetConstructorWorks);
            QUnit.test("Int16ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests.arrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Int16ArrayTests - StaticBytesPerElementWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests.staticBytesPerElementWorks);
            QUnit.test("Int16ArrayTests - LengthWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests.lengthWorks);
            QUnit.test("Int16ArrayTests - IndexingWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests.indexingWorks);
            QUnit.test("Int16ArrayTests - SetInt16ArrayWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests.setInt16ArrayWorks);
            QUnit.test("Int16ArrayTests - SetInt16ArrayWithOffsetWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests.setInt16ArrayWithOffsetWorks);
            QUnit.test("Int16ArrayTests - SetNormalArrayWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests.setNormalArrayWorks);
            QUnit.test("Int16ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests.setNormalArrayWithOffsetWorks);
            QUnit.test("Int16ArrayTests - SubarrayWithBeginWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests.subarrayWithBeginWorks);
            QUnit.test("Int16ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests.subarrayWithBeginAndEndWorks);
            QUnit.test("Int16ArrayTests - BufferPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests.bufferPropertyWorks);
            QUnit.test("Int16ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests.byteOffsetPropertyWorks);
            QUnit.test("Int16ArrayTests - ByteLengthPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests.byteLengthPropertyWorks);
            QUnit.test("Int16ArrayTests - IndexOfWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests.indexOfWorks);
            QUnit.test("Int16ArrayTests - ContainsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests.containsWorks);
            QUnit.test("Int16ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests.foreachWorks_SPI_1401);
            QUnit.test("Int16ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests.getEnumeratorWorks_SPI_1401);
            QUnit.test("Int16ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests.iEnumerableGetEnumeratorWorks);
            QUnit.test("Int16ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests.iCollectionMethodsWork_SPI_1559);
            QUnit.test("Int16ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests.iListMethodsWork_SPI_1559);
            QUnit.test("Int32ArrayTests - TypePropertiesAreCorrect_SPI_1559", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests.typePropertiesAreCorrect_SPI_1559);
            QUnit.test("Int32ArrayTests - LengthConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests.lengthConstructorWorks);
            QUnit.test("Int32ArrayTests - ConstructorFromIntWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests.constructorFromIntWorks);
            QUnit.test("Int32ArrayTests - CopyConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests.copyConstructorWorks);
            QUnit.test("Int32ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests.arrayBufferConstructorWorks);
            QUnit.test("Int32ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests.arrayBufferWithOffsetConstructorWorks);
            QUnit.test("Int32ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests.arrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Int32ArrayTests - StaticBytesPerElementWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests.staticBytesPerElementWorks);
            QUnit.test("Int32ArrayTests - LengthWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests.lengthWorks);
            QUnit.test("Int32ArrayTests - IndexingWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests.indexingWorks);
            QUnit.test("Int32ArrayTests - SetInt32ArrayWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests.setInt32ArrayWorks);
            QUnit.test("Int32ArrayTests - SetInt32ArrayWithOffsetWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests.setInt32ArrayWithOffsetWorks);
            QUnit.test("Int32ArrayTests - SetNormalArrayWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests.setNormalArrayWorks);
            QUnit.test("Int32ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests.setNormalArrayWithOffsetWorks);
            QUnit.test("Int32ArrayTests - SubarrayWithBeginWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests.subarrayWithBeginWorks);
            QUnit.test("Int32ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests.subarrayWithBeginAndEndWorks);
            QUnit.test("Int32ArrayTests - BufferPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests.bufferPropertyWorks);
            QUnit.test("Int32ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests.byteOffsetPropertyWorks);
            QUnit.test("Int32ArrayTests - ByteLengthPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests.byteLengthPropertyWorks);
            QUnit.test("Int32ArrayTests - IndexOfWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests.indexOfWorks);
            QUnit.test("Int32ArrayTests - ContainsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests.containsWorks);
            QUnit.test("Int32ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests.foreachWorks_SPI_1401);
            QUnit.test("Int32ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests.getEnumeratorWorks_SPI_1401);
            QUnit.test("Int32ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests.iEnumerableGetEnumeratorWorks);
            QUnit.test("Int32ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests.iCollectionMethodsWork_SPI_1559);
            QUnit.test("Int32ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests.iListMethodsWork_SPI_1559);
            QUnit.test("Int8ArrayTests - TypePropertiesAreCorrect_SPI_1559", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests.typePropertiesAreCorrect_SPI_1559);
            QUnit.test("Int8ArrayTests - LengthConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests.lengthConstructorWorks);
            QUnit.test("Int8ArrayTests - ConstructorFromIntWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests.constructorFromIntWorks);
            QUnit.test("Int8ArrayTests - CopyConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests.copyConstructorWorks);
            QUnit.test("Int8ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests.arrayBufferConstructorWorks);
            QUnit.test("Int8ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests.arrayBufferWithOffsetConstructorWorks);
            QUnit.test("Int8ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests.arrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Int8ArrayTests - StaticBytesPerElementWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests.staticBytesPerElementWorks);
            QUnit.test("Int8ArrayTests - LengthWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests.lengthWorks);
            QUnit.test("Int8ArrayTests - IndexingWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests.indexingWorks);
            QUnit.test("Int8ArrayTests - SetInt8ArrayWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests.setInt8ArrayWorks);
            QUnit.test("Int8ArrayTests - SetInt8ArrayWithOffsetWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests.setInt8ArrayWithOffsetWorks);
            QUnit.test("Int8ArrayTests - SetNormalArrayWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests.setNormalArrayWorks);
            QUnit.test("Int8ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests.setNormalArrayWithOffsetWorks);
            QUnit.test("Int8ArrayTests - SubarrayWithBeginWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests.subarrayWithBeginWorks);
            QUnit.test("Int8ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests.subarrayWithBeginAndEndWorks);
            QUnit.test("Int8ArrayTests - BufferPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests.bufferPropertyWorks);
            QUnit.test("Int8ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests.byteOffsetPropertyWorks);
            QUnit.test("Int8ArrayTests - ByteLengthPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests.byteLengthPropertyWorks);
            QUnit.test("Int8ArrayTests - IndexOfWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests.indexOfWorks);
            QUnit.test("Int8ArrayTests - ContainsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests.containsWorks);
            QUnit.test("Int8ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests.foreachWorks_SPI_1401);
            QUnit.test("Int8ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests.getEnumeratorWorks_SPI_1401);
            QUnit.test("Int8ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests.iEnumerableGetEnumeratorWorks);
            QUnit.test("Int8ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests.iCollectionMethodsWork_SPI_1559);
            QUnit.test("Int8ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests.iListMethodsWork_SPI_1559);
            QUnit.test("Uint16ArrayTests - TypePropertiesAreCorrect_SPI_1559", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests.typePropertiesAreCorrect_SPI_1559);
            QUnit.test("Uint16ArrayTests - LengthConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests.lengthConstructorWorks);
            QUnit.test("Uint16ArrayTests - ConstructorFromIntWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests.constructorFromIntWorks);
            QUnit.test("Uint16ArrayTests - CopyConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests.copyConstructorWorks);
            QUnit.test("Uint16ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests.arrayBufferConstructorWorks);
            QUnit.test("Uint16ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests.arrayBufferWithOffsetConstructorWorks);
            QUnit.test("Uint16ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests.arrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Uint16ArrayTests - StaticBytesPerElementWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests.staticBytesPerElementWorks);
            QUnit.test("Uint16ArrayTests - LengthWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests.lengthWorks);
            QUnit.test("Uint16ArrayTests - IndexingWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests.indexingWorks);
            QUnit.test("Uint16ArrayTests - SetUint16ArrayWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests.setUint16ArrayWorks);
            QUnit.test("Uint16ArrayTests - SetUint16ArrayWithOffsetWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests.setUint16ArrayWithOffsetWorks);
            QUnit.test("Uint16ArrayTests - SetNormalArrayWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests.setNormalArrayWorks);
            QUnit.test("Uint16ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests.setNormalArrayWithOffsetWorks);
            QUnit.test("Uint16ArrayTests - SubarrayWithBeginWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests.subarrayWithBeginWorks);
            QUnit.test("Uint16ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests.subarrayWithBeginAndEndWorks);
            QUnit.test("Uint16ArrayTests - BufferPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests.bufferPropertyWorks);
            QUnit.test("Uint16ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests.byteOffsetPropertyWorks);
            QUnit.test("Uint16ArrayTests - ByteLengthPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests.byteLengthPropertyWorks);
            QUnit.test("Uint16ArrayTests - IndexOfWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests.indexOfWorks);
            QUnit.test("Uint16ArrayTests - ContainsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests.containsWorks);
            QUnit.test("Uint16ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests.foreachWorks_SPI_1401);
            QUnit.test("Uint16ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests.getEnumeratorWorks_SPI_1401);
            QUnit.test("Uint16ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests.iEnumerableGetEnumeratorWorks);
            QUnit.test("Uint16ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests.iCollectionMethodsWork_SPI_1559);
            QUnit.test("Uint16ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests.iListMethodsWork_SPI_1559);
            QUnit.test("Uint32ArrayTests - TypePropertiesAreCorrect_SPI_1559", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests.typePropertiesAreCorrect_SPI_1559);
            QUnit.test("Uint32ArrayTests - LengthConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests.lengthConstructorWorks);
            QUnit.test("Uint32ArrayTests - ConstructorFromIntWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests.constructorFromIntWorks);
            QUnit.test("Uint32ArrayTests - CopyConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests.copyConstructorWorks);
            QUnit.test("Uint32ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests.arrayBufferConstructorWorks);
            QUnit.test("Uint32ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests.arrayBufferWithOffsetConstructorWorks);
            QUnit.test("Uint32ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests.arrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Uint32ArrayTests - StaticBytesPerElementWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests.staticBytesPerElementWorks);
            QUnit.test("Uint32ArrayTests - LengthWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests.lengthWorks);
            QUnit.test("Uint32ArrayTests - IndexingWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests.indexingWorks);
            QUnit.test("Uint32ArrayTests - SetUint32ArrayWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests.setUint32ArrayWorks);
            QUnit.test("Uint32ArrayTests - SetUint32ArrayWithOffsetWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests.setUint32ArrayWithOffsetWorks);
            QUnit.test("Uint32ArrayTests - SetNormalArrayWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests.setNormalArrayWorks);
            QUnit.test("Uint32ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests.setNormalArrayWithOffsetWorks);
            QUnit.test("Uint32ArrayTests - SubarrayWithBeginWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests.subarrayWithBeginWorks);
            QUnit.test("Uint32ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests.subarrayWithBeginAndEndWorks);
            QUnit.test("Uint32ArrayTests - BufferPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests.bufferPropertyWorks);
            QUnit.test("Uint32ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests.byteOffsetPropertyWorks);
            QUnit.test("Uint32ArrayTests - ByteLengthPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests.byteLengthPropertyWorks);
            QUnit.test("Uint32ArrayTests - IndexOfWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests.indexOfWorks);
            QUnit.test("Uint32ArrayTests - ContainsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests.containsWorks);
            QUnit.test("Uint32ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests.foreachWorks_SPI_1401);
            QUnit.test("Uint32ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests.getEnumeratorWorks_SPI_1401);
            QUnit.test("Uint32ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests.iEnumerableGetEnumeratorWorks);
            QUnit.test("Uint32ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests.iCollectionMethodsWork_SPI_1559);
            QUnit.test("Uint32ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests.iListMethodsWork_SPI_1559);
            QUnit.test("Uint8ArrayTests - TypePropertiesAreCorrect_SPI_1559", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests.typePropertiesAreCorrect_SPI_1559);
            QUnit.test("Uint8ArrayTests - LengthConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests.lengthConstructorWorks);
            QUnit.test("Uint8ArrayTests - ConstructorFromIntWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests.constructorFromIntWorks);
            QUnit.test("Uint8ArrayTests - CopyConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests.copyConstructorWorks);
            QUnit.test("Uint8ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests.arrayBufferConstructorWorks);
            QUnit.test("Uint8ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests.arrayBufferWithOffsetConstructorWorks);
            QUnit.test("Uint8ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests.arrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Uint8ArrayTests - StaticBytesPerElementWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests.staticBytesPerElementWorks);
            QUnit.test("Uint8ArrayTests - LengthWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests.lengthWorks);
            QUnit.test("Uint8ArrayTests - IndexingWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests.indexingWorks);
            QUnit.test("Uint8ArrayTests - SetUint8ArrayWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests.setUint8ArrayWorks);
            QUnit.test("Uint8ArrayTests - SetUint8ArrayWithOffsetWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests.setUint8ArrayWithOffsetWorks);
            QUnit.test("Uint8ArrayTests - SetNormalArrayWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests.setNormalArrayWorks);
            QUnit.test("Uint8ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests.setNormalArrayWithOffsetWorks);
            QUnit.test("Uint8ArrayTests - SubarrayWithBeginWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests.subarrayWithBeginWorks);
            QUnit.test("Uint8ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests.subarrayWithBeginAndEndWorks);
            QUnit.test("Uint8ArrayTests - BufferPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests.bufferPropertyWorks);
            QUnit.test("Uint8ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests.byteOffsetPropertyWorks);
            QUnit.test("Uint8ArrayTests - ByteLengthPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests.byteLengthPropertyWorks);
            QUnit.test("Uint8ArrayTests - IndexOfWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests.indexOfWorks);
            QUnit.test("Uint8ArrayTests - ContainsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests.containsWorks);
            QUnit.test("Uint8ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests.foreachWorks_SPI_1401);
            QUnit.test("Uint8ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests.getEnumeratorWorks_SPI_1401);
            QUnit.test("Uint8ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests.iEnumerableGetEnumeratorWorks);
            QUnit.test("Uint8ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests.iCollectionMethodsWork_SPI_1559);
            QUnit.test("Uint8ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests.iListMethodsWork_SPI_1559);
            QUnit.test("Uint8ClampedArrayTests - TypePropertiesAreCorrect_SPI_1560", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests.typePropertiesAreCorrect_SPI_1560);
            QUnit.test("Uint8ClampedArrayTests - TypePropertiesAreCorrect_SPI_1559", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests.typePropertiesAreCorrect_SPI_1559);
            QUnit.test("Uint8ClampedArrayTests - LengthConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests.lengthConstructorWorks);
            QUnit.test("Uint8ClampedArrayTests - ConstructorFromIntWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests.constructorFromIntWorks);
            QUnit.test("Uint8ClampedArrayTests - ConstructorFromUint8ArrayWorks_SPI_TODO", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests.constructorFromUint8ArrayWorks_SPI_TODO);
            QUnit.test("Uint8ClampedArrayTests - CopyConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests.copyConstructorWorks);
            QUnit.test("Uint8ClampedArrayTests - ArrayBufferConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests.arrayBufferConstructorWorks);
            QUnit.test("Uint8ClampedArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests.arrayBufferWithOffsetConstructorWorks);
            QUnit.test("Uint8ClampedArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests.arrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Uint8ClampedArrayTests - StaticBytesPerElementWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests.staticBytesPerElementWorks);
            QUnit.test("Uint8ClampedArrayTests - LengthWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests.lengthWorks);
            QUnit.test("Uint8ClampedArrayTests - IndexingWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests.indexingWorks);
            QUnit.test("Uint8ClampedArrayTests - SetUint8ClampedArrayWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests.setUint8ClampedArrayWorks);
            QUnit.test("Uint8ClampedArrayTests - SetUint8ClampedArrayWithOffsetWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests.setUint8ClampedArrayWithOffsetWorks);
            QUnit.test("Uint8ClampedArrayTests - SetNormalArrayWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests.setNormalArrayWorks);
            QUnit.test("Uint8ClampedArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests.setNormalArrayWithOffsetWorks);
            QUnit.test("Uint8ClampedArrayTests - SubarrayWithBeginWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests.subarrayWithBeginWorks);
            QUnit.test("Uint8ClampedArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests.subarrayWithBeginAndEndWorks);
            QUnit.test("Uint8ClampedArrayTests - BufferPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests.bufferPropertyWorks);
            QUnit.test("Uint8ClampedArrayTests - ByteOffsetPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests.byteOffsetPropertyWorks);
            QUnit.test("Uint8ClampedArrayTests - ByteLengthPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests.byteLengthPropertyWorks);
            QUnit.test("Uint8ClampedArrayTests - IndexOfWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests.indexOfWorks);
            QUnit.test("Uint8ClampedArrayTests - ContainsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests.containsWorks);
            QUnit.test("Uint8ClampedArrayTests - ForeachWorks_SPI_1401", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests.foreachWorks_SPI_1401);
            QUnit.test("Uint8ClampedArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests.getEnumeratorWorks_SPI_1401);
            QUnit.test("Uint8ClampedArrayTests - IEnumerableGetEnumeratorWorks_SPI_1560", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests.iEnumerableGetEnumeratorWorks_SPI_1560);
            QUnit.test("Uint8ClampedArrayTests - ICollectionMethodsWork_SPI_1559_1560", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests.iCollectionMethodsWork_SPI_1559_1560);
            QUnit.test("Uint8ClampedArrayTests - IListMethodsWork_SPI_1559_1560", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests.iListMethodsWork_SPI_1559_1560);
            QUnit.test("ConvertTests - ToBase64StringWithOnlyArrayWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ConvertTests.toBase64StringWithOnlyArrayWorks);
            QUnit.test("ConvertTests - ToBase64StringWithArrayAndFormattingOptionsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ConvertTests.toBase64StringWithArrayAndFormattingOptionsWorks);
            QUnit.test("ConvertTests - ToBase64StringWithArrayAndOffsetAndLengthWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ConvertTests.toBase64StringWithArrayAndOffsetAndLengthWorks);
            QUnit.test("ConvertTests - ToBase64StringWithArrayAndOffsetAndLengthAndFormattingOptionsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ConvertTests.toBase64StringWithArrayAndOffsetAndLengthAndFormattingOptionsWorks);
            QUnit.test("ConvertTests - FromBase64StringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ConvertTests.fromBase64StringWorks);
            QUnit.test("CultureInfoTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_CultureInfoTests.typePropertiesAreCorrect);
            QUnit.test("CultureInfoTests - GetFormatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_CultureInfoTests.getFormatWorks);
            QUnit.test("CultureInfoTests - InvariantWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_CultureInfoTests.invariantWorks);
            QUnit.test("DateTimeFormatInfoTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DateTimeFormatInfoTests.typePropertiesAreCorrect);
            QUnit.test("DateTimeFormatInfoTests - GetFormatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DateTimeFormatInfoTests.getFormatWorks);
            QUnit.test("DateTimeFormatInfoTests - InvariantWorks_SPI_1562", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DateTimeFormatInfoTests.invariantWorks_SPI_1562);
            QUnit.test("DelegateTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests.typePropertiesAreCorrect);
            QUnit.test("DelegateTests - CreatingAndInvokingADelegateWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests.creatingAndInvokingADelegateWorks);
            QUnit.test("DelegateTests - CreateWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests.createWorks);
            QUnit.test("DelegateTests - CombineWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests.combineWorks);
            QUnit.test("DelegateTests - CombineDoesAddsDuplicateDelegates", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests.combineDoesAddsDuplicateDelegates);
            QUnit.test("DelegateTests - CombineDoesNotAffectOriginal_SPI_1563", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests.combineDoesNotAffectOriginal_SPI_1563);
            QUnit.test("DelegateTests - AddWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests.addWorks);
            QUnit.test("DelegateTests - AddAssignWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests.addAssignWorks);
            QUnit.test("DelegateTests - RemoveWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests.removeWorks);
            QUnit.test("DelegateTests - RemoveDoesNotAffectOriginal_SPI_1563", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests.removeDoesNotAffectOriginal_SPI_1563);
            QUnit.test("DelegateTests - SubtractingDelegateFromItselfReturnsNull", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests.subtractingDelegateFromItselfReturnsNull);
            QUnit.test("DelegateTests - RemoveWorksWithMethodGroupConversion_SPI_1563", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests.removeWorksWithMethodGroupConversion_SPI_1563);
            QUnit.test("DelegateTests - SubtractWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests.subtractWorks);
            QUnit.test("DelegateTests - SubtractAssignWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests.subtractAssignWorks);
            QUnit.test("DelegateTests - CloneWorks_SPI_1563", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests.cloneWorks_SPI_1563);
            QUnit.test("DelegateTests - CloningDelegateToADifferentTypeIsANoOp", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests.cloningDelegateToADifferentTypeIsANoOp);
            QUnit.test("DelegateTests - CloningDelegateToTheSameTypeCreatesANewClone_SPI_1563", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests.cloningDelegateToTheSameTypeCreatesANewClone_SPI_1563);
            QUnit.test("DelegateTests - EqualityAndInequalityOperatorsAndEqualsMethod_SPI_1563", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests.equalityAndInequalityOperatorsAndEqualsMethod_SPI_1563);
            QUnit.test("DelegateTests - GetInvocationListWorksForImportedFunction_SPI_1563", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests.getInvocationListWorksForImportedFunction_SPI_1563);
            QUnit.test("DelegateTests - GetInvocationListWorksForMulticastDelegate", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests.getInvocationListWorksForMulticastDelegate);
            QUnit.test("ContractTests - Assume", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Diagnostics_Contracts_ContractTests.assume);
            QUnit.test("ContractTests - AssumeWithUserMessage", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Diagnostics_Contracts_ContractTests.assumeWithUserMessage);
            QUnit.test("ContractTests - Assert", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Diagnostics_Contracts_ContractTests.assert);
            QUnit.test("ContractTests - AssertWithUserMessage", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Diagnostics_Contracts_ContractTests.assertWithUserMessage);
            QUnit.test("ContractTests - Requires", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Diagnostics_Contracts_ContractTests.requires);
            QUnit.test("ContractTests - RequiresWithUserMessage", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Diagnostics_Contracts_ContractTests.requiresWithUserMessage);
            QUnit.test("ContractTests - RequiresWithTypeException", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Diagnostics_Contracts_ContractTests.requiresWithTypeException);
            QUnit.test("ContractTests - RequiredWithTypeExceptionAndUserMessage", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Diagnostics_Contracts_ContractTests.requiredWithTypeExceptionAndUserMessage);
            QUnit.test("ContractTests - ForAll", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Diagnostics_Contracts_ContractTests.forAll);
            QUnit.test("ContractTests - ForAllWithCollection", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Diagnostics_Contracts_ContractTests.forAllWithCollection);
            QUnit.test("ContractTests - Exists", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Diagnostics_Contracts_ContractTests.exists);
            QUnit.test("ContractTests - ExistsWithCollection", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Diagnostics_Contracts_ContractTests.existsWithCollection);
            QUnit.test("EnvironmentTests - NewLineIsAStringContainingOnlyTheNewLineChar", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_EnvironmentTests.newLineIsAStringContainingOnlyTheNewLineChar);
            QUnit.test("AggregateExceptionTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_AggregateExceptionTests.typePropertiesAreCorrect);
            QUnit.test("AggregateExceptionTests - DefaultConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_AggregateExceptionTests.defaultConstructorWorks);
            QUnit.test("AggregateExceptionTests - ConstructorWithIEnumerableInnerExceptionsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_AggregateExceptionTests.constructorWithIEnumerableInnerExceptionsWorks);
            QUnit.test("AggregateExceptionTests - ConstructorWithInnerExceptionArrayWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_AggregateExceptionTests.constructorWithInnerExceptionArrayWorks);
            QUnit.test("AggregateExceptionTests - ConstructorWithMessageWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_AggregateExceptionTests.constructorWithMessageWorks);
            QUnit.test("AggregateExceptionTests - ConstructorWithMessageAndIEnumerableInnerExceptionsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_AggregateExceptionTests.constructorWithMessageAndIEnumerableInnerExceptionsWorks);
            QUnit.test("AggregateExceptionTests - ConstructorWithMessageAndInnerExceptionArrayWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_AggregateExceptionTests.constructorWithMessageAndInnerExceptionArrayWorks);
            QUnit.test("AggregateExceptionTests - FlattenWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_AggregateExceptionTests.flattenWorks);
            QUnit.test("AmbiguousMatchExceptionTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_AmbiguousMatchExceptionTests.typePropertiesAreCorrect);
            QUnit.test("AmbiguousMatchExceptionTests - DefaultConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_AmbiguousMatchExceptionTests.defaultConstructorWorks);
            QUnit.test("AmbiguousMatchExceptionTests - ConstructorWithMessageWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_AmbiguousMatchExceptionTests.constructorWithMessageWorks);
            QUnit.test("AmbiguousMatchExceptionTests - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_AmbiguousMatchExceptionTests.constructorWithMessageAndInnerExceptionWorks);
            QUnit.test("ArgumentExceptionTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentExceptionTests.typePropertiesAreCorrect);
            QUnit.test("ArgumentExceptionTests - DefaultConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentExceptionTests.defaultConstructorWorks);
            QUnit.test("ArgumentExceptionTests - ConstructorWithMessageWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentExceptionTests.constructorWithMessageWorks);
            QUnit.test("ArgumentExceptionTests - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentExceptionTests.constructorWithMessageAndInnerExceptionWorks);
            QUnit.test("ArgumentExceptionTests - ConstructorWithMessageAndParamNameWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentExceptionTests.constructorWithMessageAndParamNameWorks);
            QUnit.test("ArgumentExceptionTests - ConstructorWithMessageAndParamNameAndInnerExceptionWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentExceptionTests.constructorWithMessageAndParamNameAndInnerExceptionWorks);
            QUnit.test("ArgumentNullExceptionTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentNullExceptionTests.typePropertiesAreCorrect);
            QUnit.test("ArgumentNullExceptionTests - DefaultConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentNullExceptionTests.defaultConstructorWorks);
            QUnit.test("ArgumentNullExceptionTests - ConstructorWithParamNameWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentNullExceptionTests.constructorWithParamNameWorks);
            QUnit.test("ArgumentNullExceptionTests - ConstructorWithParamNameAndMessageWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentNullExceptionTests.constructorWithParamNameAndMessageWorks);
            QUnit.test("ArgumentNullExceptionTests - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentNullExceptionTests.constructorWithMessageAndInnerExceptionWorks);
            QUnit.test("ArgumentOutOfRangeExceptionTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentOutOfRangeExceptionTests.typePropertiesAreCorrect);
            QUnit.test("ArgumentOutOfRangeExceptionTests - DefaultConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentOutOfRangeExceptionTests.defaultConstructorWorks);
            QUnit.test("ArgumentOutOfRangeExceptionTests - ConstructorWithParamNameWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentOutOfRangeExceptionTests.constructorWithParamNameWorks);
            QUnit.test("ArgumentOutOfRangeExceptionTests - ConstructorWithParamNameAndMessageWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentOutOfRangeExceptionTests.constructorWithParamNameAndMessageWorks);
            QUnit.test("ArgumentOutOfRangeExceptionTests - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentOutOfRangeExceptionTests.constructorWithMessageAndInnerExceptionWorks);
            QUnit.test("ArgumentOutOfRangeExceptionTests - ConstructorWithParamNameAndActualValueAndMessageWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentOutOfRangeExceptionTests.constructorWithParamNameAndActualValueAndMessageWorks);
            QUnit.test("ArgumentOutOfRangeExceptionTests - RangeErrorIsConvertedToArgumentOutOfRangeException", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentOutOfRangeExceptionTests.rangeErrorIsConvertedToArgumentOutOfRangeException);
            QUnit.test("ArithmeticExceptionTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArithmeticExceptionTests.typePropertiesAreCorrect);
            QUnit.test("ArithmeticExceptionTests - DefaultConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArithmeticExceptionTests.defaultConstructorWorks);
            QUnit.test("ArithmeticExceptionTests - ConstructorWithMessageWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArithmeticExceptionTests.constructorWithMessageWorks);
            QUnit.test("ArithmeticExceptionTests - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArithmeticExceptionTests.constructorWithMessageAndInnerExceptionWorks);
            QUnit.test("ContractExceptionTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ContractExceptionTests.typePropertiesAreCorrect);
            QUnit.test("ContractExceptionTests - DefaultConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ContractExceptionTests.defaultConstructorWorks);
            QUnit.test("DivideByZeroExceptionTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_DivideByZeroExceptionTests.typePropertiesAreCorrect);
            QUnit.test("DivideByZeroExceptionTests - DefaultConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_DivideByZeroExceptionTests.defaultConstructorWorks);
            QUnit.test("DivideByZeroExceptionTests - ConstructorWithMessageWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_DivideByZeroExceptionTests.constructorWithMessageWorks);
            QUnit.test("DivideByZeroExceptionTests - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_DivideByZeroExceptionTests.constructorWithMessageAndInnerExceptionWorks);
            QUnit.test("ErrorExceptionTests - TypePropertiesAreCorrect_SPI_1564", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ErrorExceptionTests.typePropertiesAreCorrect_SPI_1564);
            QUnit.test("ErrorExceptionTests - ErrorOnlyConstructorWorks_SPI_1564", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ErrorExceptionTests.errorOnlyConstructorWorks_SPI_1564);
            QUnit.test("ErrorExceptionTests - ErrorAndMessageAndInnerExceptionConstructorWorks_SPI_1564", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ErrorExceptionTests.errorAndMessageAndInnerExceptionConstructorWorks_SPI_1564);
            QUnit.test("ExceptionTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ExceptionTests.typePropertiesAreCorrect);
            QUnit.test("ExceptionTests - DefaultConstructorWorks_SPI_1669", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ExceptionTests.defaultConstructorWorks_SPI_1669);
            QUnit.test("ExceptionTests - ConstructorWithMessageWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ExceptionTests.constructorWithMessageWorks);
            QUnit.test("ExceptionTests - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ExceptionTests.constructorWithMessageAndInnerExceptionWorks);
            QUnit.test("ExceptionTests - MessagePropertyCanBeOverridden", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ExceptionTests.messagePropertyCanBeOverridden);
            QUnit.test("ExceptionTests - InnerExceptionPropertyCanBeOverridden", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ExceptionTests.innerExceptionPropertyCanBeOverridden);
            QUnit.test("FormatExceptionTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_FormatExceptionTests.typePropertiesAreCorrect);
            QUnit.test("FormatExceptionTests - DefaultConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_FormatExceptionTests.defaultConstructorWorks);
            QUnit.test("FormatExceptionTests - ConstructorWithMessageWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_FormatExceptionTests.constructorWithMessageWorks);
            QUnit.test("FormatExceptionTests - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_FormatExceptionTests.constructorWithMessageAndInnerExceptionWorks);
            QUnit.test("InvalidCastExceptionTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_InvalidCastExceptionTests.typePropertiesAreCorrect);
            QUnit.test("InvalidCastExceptionTests - DefaultConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_InvalidCastExceptionTests.defaultConstructorWorks);
            QUnit.test("InvalidCastExceptionTests - ConstructorWithMessageWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_InvalidCastExceptionTests.constructorWithMessageWorks);
            QUnit.test("InvalidCastExceptionTests - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_InvalidCastExceptionTests.constructorWithMessageAndInnerExceptionWorks);
            QUnit.test("InvalidOperationExceptionTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_InvalidOperationExceptionTests.typePropertiesAreCorrect);
            QUnit.test("InvalidOperationExceptionTests - DefaultConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_InvalidOperationExceptionTests.defaultConstructorWorks);
            QUnit.test("InvalidOperationExceptionTests - ConstructorWithMessageWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_InvalidOperationExceptionTests.constructorWithMessageWorks);
            QUnit.test("InvalidOperationExceptionTests - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_InvalidOperationExceptionTests.constructorWithMessageAndInnerExceptionWorks);
            QUnit.test("KeyNotFoundExceptionTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_KeyNotFoundExceptionTests.typePropertiesAreCorrect);
            QUnit.test("KeyNotFoundExceptionTests - DefaultConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_KeyNotFoundExceptionTests.defaultConstructorWorks);
            QUnit.test("KeyNotFoundExceptionTests - ConstructorWithMessageWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_KeyNotFoundExceptionTests.constructorWithMessageWorks);
            QUnit.test("KeyNotFoundExceptionTests - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_KeyNotFoundExceptionTests.constructorWithMessageAndInnerExceptionWorks);
            QUnit.test("NotImplementedExceptionTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_NotImplementedExceptionTests.typePropertiesAreCorrect);
            QUnit.test("NotImplementedExceptionTests - DefaultConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_NotImplementedExceptionTests.defaultConstructorWorks);
            QUnit.test("NotImplementedExceptionTests - ConstructorWithMessageWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_NotImplementedExceptionTests.constructorWithMessageWorks);
            QUnit.test("NotImplementedExceptionTests - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_NotImplementedExceptionTests.constructorWithMessageAndInnerExceptionWorks);
            QUnit.test("NotSupportedExceptionTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_NotSupportedExceptionTests.typePropertiesAreCorrect);
            QUnit.test("NotSupportedExceptionTests - DefaultConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_NotSupportedExceptionTests.defaultConstructorWorks);
            QUnit.test("NotSupportedExceptionTests - ConstructorWithMessageWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_NotSupportedExceptionTests.constructorWithMessageWorks);
            QUnit.test("NotSupportedExceptionTests - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_NotSupportedExceptionTests.constructorWithMessageAndInnerExceptionWorks);
            QUnit.test("NullReferenceExceptionTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_NullReferenceExceptionTests.typePropertiesAreCorrect);
            QUnit.test("NullReferenceExceptionTests - DefaultConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_NullReferenceExceptionTests.defaultConstructorWorks);
            QUnit.test("NullReferenceExceptionTests - ConstructorWithMessageWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_NullReferenceExceptionTests.constructorWithMessageWorks);
            QUnit.test("NullReferenceExceptionTests - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_NullReferenceExceptionTests.constructorWithMessageAndInnerExceptionWorks);
            QUnit.test("NullReferenceExceptionTests - AccessingAFieldOnANullObjectCausesANullReferenceException", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_NullReferenceExceptionTests.accessingAFieldOnANullObjectCausesANullReferenceException);
            QUnit.test("OperationCanceledExceptionTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_OperationCanceledExceptionTests.typePropertiesAreCorrect);
            QUnit.test("OperationCanceledExceptionTests - DefaultConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_OperationCanceledExceptionTests.defaultConstructorWorks);
            QUnit.test("OperationCanceledExceptionTests - CancellationTokenOnlyConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_OperationCanceledExceptionTests.cancellationTokenOnlyConstructorWorks);
            QUnit.test("OperationCanceledExceptionTests - MessageOnlyConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_OperationCanceledExceptionTests.messageOnlyConstructorWorks);
            QUnit.test("OperationCanceledExceptionTests - MessageAndInnerExceptionConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_OperationCanceledExceptionTests.messageAndInnerExceptionConstructorWorks);
            QUnit.test("OperationCanceledExceptionTests - MessageAndCancellationTokenConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_OperationCanceledExceptionTests.messageAndCancellationTokenConstructorWorks);
            QUnit.test("OperationCanceledExceptionTests - MessageAndInnerExceptionAndCancellationTokenConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_OperationCanceledExceptionTests.messageAndInnerExceptionAndCancellationTokenConstructorWorks);
            QUnit.test("OverflowExceptionTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_OverflowExceptionTests.typePropertiesAreCorrect);
            QUnit.test("OverflowExceptionTests - DefaultConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_OverflowExceptionTests.defaultConstructorWorks);
            QUnit.test("OverflowExceptionTests - ConstructorWithMessageWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_OverflowExceptionTests.constructorWithMessageWorks);
            QUnit.test("OverflowExceptionTests - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_OverflowExceptionTests.constructorWithMessageAndInnerExceptionWorks);
            QUnit.test("PromiseExceptionTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_PromiseExceptionTests.typePropertiesAreCorrect);
            QUnit.test("PromiseExceptionTests - ArgumentsOnlyConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_PromiseExceptionTests.argumentsOnlyConstructorWorks);
            QUnit.test("PromiseExceptionTests - ArgumentsAndMessageConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_PromiseExceptionTests.argumentsAndMessageConstructorWorks);
            QUnit.test("PromiseExceptionTests - ArgumentsAndMessageAndInnerExceptionConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_PromiseExceptionTests.argumentsAndMessageAndInnerExceptionConstructorWorks);
            QUnit.test("TaskCanceledExceptionTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_TaskCanceledExceptionTests.typePropertiesAreCorrect);
            QUnit.test("TaskCanceledExceptionTests - DefaultConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_TaskCanceledExceptionTests.defaultConstructorWorks);
            QUnit.test("TaskCanceledExceptionTests - MessageOnlyConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_TaskCanceledExceptionTests.messageOnlyConstructorWorks);
            QUnit.test("TaskCanceledExceptionTests - TaskOnlyConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_TaskCanceledExceptionTests.taskOnlyConstructorWorks);
            QUnit.test("TaskCanceledExceptionTests - MessageAndInnerExceptionConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_TaskCanceledExceptionTests.messageAndInnerExceptionConstructorWorks);
            QUnit.test("ExceptionTests - ThrowingAndCatchingExceptionsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ExceptionTests.throwingAndCatchingExceptionsWorks);
            QUnit.test("ExceptionTests - ExceptionOfWrongTypeIsNotCaught", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ExceptionTests.exceptionOfWrongTypeIsNotCaught);
            QUnit.test("ExceptionTests - CanCatchExceptionAsBaseType", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ExceptionTests.canCatchExceptionAsBaseType);
            QUnit.test("ExceptionTests - CanCatchStringAsException", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ExceptionTests.canCatchStringAsException);
            QUnit.test("ExceptionTests - CanCatchStringAsCatchAll", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ExceptionTests.canCatchStringAsCatchAll);
            QUnit.test("FormattableStringTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_FormattableStringTests.typePropertiesAreCorrect);
            QUnit.test("FormattableStringTests - ArgumentCountWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_FormattableStringTests.argumentCountWorks);
            QUnit.test("FormattableStringTests - FormatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_FormattableStringTests.formatWorks);
            QUnit.test("FormattableStringTests - GetArgumentWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_FormattableStringTests.getArgumentWorks);
            QUnit.test("FormattableStringTests - GetArgumentsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_FormattableStringTests.getArgumentsWorks);
            QUnit.test("FormattableStringTests - ArrayReturnedByGetArgumentsCanBeModified", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_FormattableStringTests.arrayReturnedByGetArgumentsCanBeModified);
            QUnit.test("FormattableStringTests - ToStringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_FormattableStringTests.toStringWorks);
            QUnit.test("FormattableStringTests - ToStringWithFormatProviderWorks_SPI_1651", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_FormattableStringTests.toStringWithFormatProviderWorks_SPI_1651);
            QUnit.test("FormattableStringTests - IFormattableToStringWorks_SPI_1633_1651", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_FormattableStringTests.iFormattableToStringWorks_SPI_1633_1651);
            QUnit.test("FormattableStringTests - InvariantWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_FormattableStringTests.invariantWorks);
            QUnit.test("GuidTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests.typePropertiesAreCorrect);
            QUnit.test("GuidTests - DefaultValueWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests.defaultValueWorks);
            QUnit.test("GuidTests - CreateInstanceWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests.createInstanceWorks);
            QUnit.test("GuidTests - DefaultConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests.defaultConstructorWorks);
            QUnit.test("GuidTests - EmptyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests.emptyWorks);
            QUnit.test("GuidTests - ToStringWithoutArgumentsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests.toStringWithoutArgumentsWorks);
            QUnit.test("GuidTests - ByteArrayConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests.byteArrayConstructorWorks);
            QUnit.test("GuidTests - Int32Int16Int16ByteArrayConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests.int32Int16Int16ByteArrayConstructorWorks);
            QUnit.test("GuidTests - Int32Int16Int16BytesConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests.int32Int16Int16BytesConstructorWorks);
            QUnit.test("GuidTests - UInt32UInt16UInt16BytesConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests.uInt32UInt16UInt16BytesConstructorWorks);
            QUnit.test("GuidTests - StringConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests.stringConstructorWorks);
            QUnit.test("GuidTests - ParseWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests.parseWorks);
            QUnit.test("GuidTests - ParseExactWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests.parseExactWorks);
            QUnit.test("GuidTests - TryParseWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests.tryParseWorks);
            QUnit.test("GuidTests - TryParseExactWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests.tryParseExactWorks);
            QUnit.test("GuidTests - CompareToWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests.compareToWorks);
            QUnit.test("GuidTests - IComparableCompareToWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests.iComparableCompareToWorks);
            QUnit.test("GuidTests - EqualsObjectWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests.equalsObjectWorks);
            QUnit.test("GuidTests - EqualsGuidWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests.equalsGuidWorks);
            QUnit.test("GuidTests - IEquatableEqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests.iEquatableEqualsWorks);
            QUnit.test("GuidTests - GetHashCodeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests.getHashCodeWorks);
            QUnit.test("GuidTests - EqualityOperatorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests.equalityOperatorWorks);
            QUnit.test("GuidTests - InequalityOperatorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests.inequalityOperatorWorks);
            QUnit.test("GuidTests - ToStringWithFormatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests.toStringWithFormatWorks);
            QUnit.test("GuidTests - NewGuidWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests.newGuidWorks);
            QUnit.test("GuidTests - ToByteArrayWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests.toByteArrayWorks);
            QUnit.test("IComparableTests - CallingMethodThroughIComparableInterfaceInvokesImplementingMethod", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_IComparableTests.callingMethodThroughIComparableInterfaceInvokesImplementingMethod);
            QUnit.test("IEquatableTests - CallingMethodThroughIComparableInterfaceInvokesImplementingMethod", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_IEquatableTests.callingMethodThroughIComparableInterfaceInvokesImplementingMethod);
            QUnit.test("IFormattableTests - IFormattableIsRecordedInInterfaceList", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_IFormattableTests.iFormattableIsRecordedInInterfaceList);
            QUnit.test("IFormattableTests - CallingMethodThroughIFormattableInterfaceInvokesImplementingMethod_SPI_1565_1633", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_IFormattableTests.callingMethodThroughIFormattableInterfaceInvokesImplementingMethod_SPI_1565_1633);
            QUnit.test("LINQ Expressions - ExpressionProtectedConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.expressionProtectedConstructorWorks);
            QUnit.test("LINQ Expressions - SimpleExpressionTreeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.simpleExpressionTreeWorks);
            QUnit.test("LINQ Expressions - LambdaWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.lambdaWorks);
            QUnit.test("LINQ Expressions - ParameterAndVariableWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.parameterAndVariableWork);
            QUnit.test("LINQ Expressions - ConstantWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.constantWorks);
            QUnit.test("LINQ Expressions - BinaryExpressionsWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.binaryExpressionsWork);
            QUnit.test("LINQ Expressions - UnaryExpressionsWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.unaryExpressionsWork);
            QUnit.test("LINQ Expressions - ArrayLengthWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.arrayLengthWorks);
            QUnit.test("LINQ Expressions - ConversionsWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.conversionsWork);
            QUnit.test("LINQ Expressions - ArrayIndexWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.arrayIndexWorks);
            QUnit.test("LINQ Expressions - MultiDimensionalArrayIndexWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.multiDimensionalArrayIndexWorks);
            QUnit.test("LINQ Expressions - ConditionWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.conditionWorks);
            QUnit.test("LINQ Expressions - CallWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.callWorks);
            QUnit.test("LINQ Expressions - MethodGroupConversionWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.methodGroupConversionWorks);
            QUnit.test("LINQ Expressions - InvokeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.invokeWorks);
            QUnit.test("LINQ Expressions - ArrayCreationWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.arrayCreationWorks);
            QUnit.test("LINQ Expressions - PropertiesAndFieldsWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.propertiesAndFieldsWork);
            QUnit.test("LINQ Expressions - IndexersWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.indexersWork);
            QUnit.test("LINQ Expressions - IndexExpressionsWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.indexExpressionsWork);
            QUnit.test("LINQ Expressions - ObjectConstructionWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.objectConstructionWorks);
            QUnit.test("LINQ Expressions - AnonymousTypeConstructionWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.anonymousTypeConstructionWorks);
            QUnit.test("LINQ Expressions - TransparentIdentifiersWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.transparentIdentifiersWork);
            QUnit.test("LINQ Expressions - NewExpressionWithMembersWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.newExpressionWithMembersWork);
            QUnit.test("LINQ Expressions - BindWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.bindWorks);
            QUnit.test("LINQ Expressions - ElementInitWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.elementInitWorks);
            QUnit.test("LINQ Expressions - ListBindWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.listBindWorks);
            QUnit.test("LINQ Expressions - MemberBindWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.memberBindWorks);
            QUnit.test("LINQ Expressions - MemberInitWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.memberInitWorks);
            QUnit.test("LINQ Expressions - ListInitWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.listInitWorks);
            QUnit.test("LINQ Expressions - TypeIsAndTypeEqualWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.typeIsAndTypeEqualWork);
            QUnit.test("LINQ Expressions - QuoteWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.quoteWorks);
            QUnit.test("LINQ Expressions - LocalVariableReferenceWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.localVariableReferenceWorks);
            QUnit.test("LINQ Expressions - ThrowAndRethrowWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.throwAndRethrowWork);
            QUnit.test("LINQ Expressions - DefaultAndEmptyWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.defaultAndEmptyWork);
            QUnit.test("LINQ Expressions - BlockWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.blockWorks);
            QUnit.test("LINQ Expressions - IfThenWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.ifThenWorks);
            QUnit.test("LINQ Expressions - LabelTargetWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.labelTargetWorks);
            QUnit.test("LINQ Expressions - GotoWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.gotoWorks);
            QUnit.test("LINQ Expressions - LabelExpressionWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.labelExpressionWorks);
            QUnit.test("LINQ Expressions - LoopWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.loopWorks);
            QUnit.test("LINQ Expressions - SwitchCaseWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.switchCaseWorks);
            QUnit.test("LINQ Expressions - SwitchWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.switchWorks);
            QUnit.test("LINQ Expressions - CatchBlockWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.catchBlockWorks);
            QUnit.test("LINQ Expressions - TryWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.tryWorks);
            QUnit.test("LINQ Expressions - DynamicWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests.dynamicWorks);
            QUnit.test("MathTests - ConstantsWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.constantsWork);
            QUnit.test("MathTests - AbsOfDoubleWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.absOfDoubleWorks);
            QUnit.test("MathTests - AbsOfIntWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.absOfIntWorks);
            QUnit.test("MathTests - AbsOfLongWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.absOfLongWorks);
            QUnit.test("MathTests - AbsOfSbyteWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.absOfSbyteWorks);
            QUnit.test("MathTests - AbsOfShortWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.absOfShortWorks);
            QUnit.test("MathTests - AbsOfFloatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.absOfFloatWorks);
            QUnit.test("MathTests - AbsOfDecimalWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.absOfDecimalWorks);
            QUnit.test("MathTests - AcosWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.acosWorks);
            QUnit.test("MathTests - AsinWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.asinWorks);
            QUnit.test("MathTests - AtanWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.atanWorks);
            QUnit.test("MathTests - Atan2Works", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.atan2Works);
            QUnit.test("MathTests - CeilingOfDoubleWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.ceilingOfDoubleWorks);
            QUnit.test("MathTests - CeilingOfDecimalWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.ceilingOfDecimalWorks);
            QUnit.test("MathTests - CosWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.cosWorks);
            QUnit.test("MathTests - CoshWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.coshWorks);
            QUnit.test("MathTests - SinhWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.sinhWorks);
            QUnit.test("MathTests - TanhWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.tanhWorks);
            QUnit.test("MathTests - ExpWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.expWorks);
            QUnit.test("MathTests - FloorOfDoubleWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.floorOfDoubleWorks);
            QUnit.test("MathTests - FloorOfDecimalWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.floorOfDecimalWorks);
            QUnit.test("MathTests - LogWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.logWorks);
            QUnit.test("MathTests - LogWithBaseWorks_SPI_1566", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.logWithBaseWorks_SPI_1566);
            QUnit.test("MathTests - MaxOfByteWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.maxOfByteWorks);
            QUnit.test("MathTests - MaxOfDecimalWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.maxOfDecimalWorks);
            QUnit.test("MathTests - MaxOfDoubleWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.maxOfDoubleWorks);
            QUnit.test("MathTests - MaxOfShortWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.maxOfShortWorks);
            QUnit.test("MathTests - MaxOfIntWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.maxOfIntWorks);
            QUnit.test("MathTests - MaxOfLongWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.maxOfLongWorks);
            QUnit.test("MathTests - MaxOfSByteWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.maxOfSByteWorks);
            QUnit.test("MathTests - MaxOfFloatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.maxOfFloatWorks);
            QUnit.test("MathTests - MaxOfUShortWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.maxOfUShortWorks);
            QUnit.test("MathTests - MaxOfUIntWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.maxOfUIntWorks);
            QUnit.test("MathTests - MaxOfULongWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.maxOfULongWorks);
            QUnit.test("MathTests - MinOfByteWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.minOfByteWorks);
            QUnit.test("MathTests - MinOfDecimalWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.minOfDecimalWorks);
            QUnit.test("MathTests - MinOfDoubleWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.minOfDoubleWorks);
            QUnit.test("MathTests - MinOfShortWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.minOfShortWorks);
            QUnit.test("MathTests - MinOfIntWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.minOfIntWorks);
            QUnit.test("MathTests - MinOfLongWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.minOfLongWorks);
            QUnit.test("MathTests - MinOfSByteWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.minOfSByteWorks);
            QUnit.test("MathTests - MinOfFloatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.minOfFloatWorks);
            QUnit.test("MathTests - MinOfUShortWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.minOfUShortWorks);
            QUnit.test("MathTests - MinOfUIntWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.minOfUIntWorks);
            QUnit.test("MathTests - MinOfULongWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.minOfULongWorks);
            QUnit.test("MathTests - PowWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.powWorks);
            QUnit.test("MathTests - RandomWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.randomWorks);
            QUnit.test("MathTests - RoundOfDoubleWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.roundOfDoubleWorks);
            QUnit.test("MathTests - RoundOfDecimalWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.roundOfDecimalWorks);
            QUnit.test("MathTests - JsRoundOfDoubleWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.jsRoundOfDoubleWorks);
            QUnit.test("MathTests - RoundOfDoubleWithDigitsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.roundOfDoubleWithDigitsWorks);
            QUnit.test("MathTests - RoundOfDecimalWithDigitsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.roundOfDecimalWithDigitsWorks);
            QUnit.test("MathTests - SignWithDecimalWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.signWithDecimalWorks);
            QUnit.test("MathTests - SignWithDoubleWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.signWithDoubleWorks);
            QUnit.test("MathTests - SignWithFloatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.signWithFloatWorks);
            QUnit.test("MathTests - SinWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.sinWorks);
            QUnit.test("MathTests - SqrtWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.sqrtWorks);
            QUnit.test("MathTests - TanWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.tanWorks);
            QUnit.test("MathTests - TruncateWithDoubleWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.truncateWithDoubleWorks);
            QUnit.test("MathTests - TruncateWithDecimalWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.truncateWithDecimalWorks);
            QUnit.test("MathTests - IEEERemainderWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.iEEERemainderWorks);
            QUnit.test("MathTests - RoundOfDoubleWithMidpointRoundingWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.roundOfDoubleWithMidpointRoundingWorks);
            QUnit.test("MathTests - RoundOfDecimalWithMidpointRoundingWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.roundOfDecimalWithMidpointRoundingWorks);
            QUnit.test("MathTests - RoundOfDoubleWithDigitsAndMidpointRoundingWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.roundOfDoubleWithDigitsAndMidpointRoundingWorks);
            QUnit.test("MathTests - RoundOfDecimalWithDigitsAndMidpointRoundingWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.roundOfDecimalWithDigitsAndMidpointRoundingWorks);
            QUnit.test("MathTests - DivRemWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests.divRemWorks);
            QUnit.test("MultidimArrayTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MultidimArrayTests.typePropertiesAreCorrect);
            QUnit.test("MultidimArrayTests - LengthWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MultidimArrayTests.lengthWorks);
            QUnit.test("MultidimArrayTests - GettingValueByIndexWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MultidimArrayTests.gettingValueByIndexWorks);
            QUnit.test("MultidimArrayTests - GetValueWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MultidimArrayTests.getValueWorks);
            QUnit.test("MultidimArrayTests - GetValueWorksForUninitializedElement", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MultidimArrayTests.getValueWorksForUninitializedElement);
            QUnit.test("MultidimArrayTests - GetValueByIndexWorksForUninitializedElement", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MultidimArrayTests.getValueByIndexWorksForUninitializedElement);
            QUnit.test("MultidimArrayTests - SettingValueByIndexWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MultidimArrayTests.settingValueByIndexWorks);
            QUnit.test("MultidimArrayTests - SetValueWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MultidimArrayTests.setValueWorks);
            QUnit.test("MultidimArrayTests - GetLengthWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MultidimArrayTests.getLengthWorks);
            QUnit.test("MultidimArrayTests - GetLowerBoundWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MultidimArrayTests.getLowerBoundWorks);
            QUnit.test("MultidimArrayTests - GetUpperBoundWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MultidimArrayTests.getUpperBoundWorks);
            QUnit.test("MultidimArrayTests - ForeachWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MultidimArrayTests.foreachWorks);
            QUnit.test("MultidimArrayTests - RankWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MultidimArrayTests.rankWorks);
            QUnit.test("MultidimArrayTests - GetValueWithIndexOutOfRangeThrowsAnException", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MultidimArrayTests.getValueWithIndexOutOfRangeThrowsAnException);
            QUnit.test("MultidimArrayTests - SetValueWithIndexOutOfRangeThrowsAnException", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MultidimArrayTests.setValueWithIndexOutOfRangeThrowsAnException);
            QUnit.test("NullableTests - TypePropertiesAreCorrect_SPI_1567", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.typePropertiesAreCorrect_SPI_1567);
            QUnit.test("NullableTests - ConvertingToNullableWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.convertingToNullableWorks);
            QUnit.test("NullableTests - HasValueWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.hasValueWorks);
            QUnit.test("NullableTests - BoxingWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.boxingWorks);
            QUnit.test("NullableTests - UnboxingWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.unboxingWorks);
            QUnit.test("NullableTests - ValueWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.valueWorks);
            QUnit.test("NullableTests - UnboxingValueOfWrongTypeThrowsAnException", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.unboxingValueOfWrongTypeThrowsAnException);
            QUnit.test("NullableTests - GetValueOrDefaultWithArgWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.getValueOrDefaultWithArgWorks);
            QUnit.test("NullableTests - LiftedEqualityWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.liftedEqualityWorks);
            QUnit.test("NullableTests - LiftedInequalityWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.liftedInequalityWorks);
            QUnit.test("NullableTests - LiftedLessThanWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.liftedLessThanWorks);
            QUnit.test("NullableTests - LiftedGreaterThanWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.liftedGreaterThanWorks);
            QUnit.test("NullableTests - LiftedLessThanOrEqualWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.liftedLessThanOrEqualWorks);
            QUnit.test("NullableTests - LiftedGreaterThanOrEqualWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.liftedGreaterThanOrEqualWorks);
            QUnit.test("NullableTests - LiftedSubtractionWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.liftedSubtractionWorks);
            QUnit.test("NullableTests - LiftedAdditionWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.liftedAdditionWorks);
            QUnit.test("NullableTests - LiftedModWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.liftedModWorks);
            QUnit.test("NullableTests - LiftedFloatingPointDivisionWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.liftedFloatingPointDivisionWorks);
            QUnit.test("NullableTests - LiftedIntegerDivisionWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.liftedIntegerDivisionWorks);
            QUnit.test("NullableTests - LiftedMultiplicationWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.liftedMultiplicationWorks);
            QUnit.test("NullableTests - LiftedBitwiseAndWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.liftedBitwiseAndWorks);
            QUnit.test("NullableTests - LiftedBitwiseOrWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.liftedBitwiseOrWorks);
            QUnit.test("NullableTests - LiftedBitwiseXorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.liftedBitwiseXorWorks);
            QUnit.test("NullableTests - LiftedLeftShiftWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.liftedLeftShiftWorks);
            QUnit.test("NullableTests - LiftedSignedRightShiftWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.liftedSignedRightShiftWorks);
            QUnit.test("NullableTests - LiftedUnsignedRightShiftWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.liftedUnsignedRightShiftWorks);
            QUnit.test("NullableTests - LiftedEqualityWorksWithUserDefinedOperators", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.liftedEqualityWorksWithUserDefinedOperators);
            QUnit.test("NullableTests - LiftedInequalityWorksWithUserDefinedOperators", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.liftedInequalityWorksWithUserDefinedOperators);
            QUnit.test("NullableTests - LiftedLessThanWorksWithUserDefinedOperators", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.liftedLessThanWorksWithUserDefinedOperators);
            QUnit.test("NullableTests - LiftedGreaterThanWorksWithUserDefinedOperators", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.liftedGreaterThanWorksWithUserDefinedOperators);
            QUnit.test("NullableTests - LiftedLessThanOrEqualWorksWithUserDefinedOperators", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.liftedLessThanOrEqualWorksWithUserDefinedOperators);
            QUnit.test("NullableTests - LiftedGreaterThanOrEqualWorksWithUserDefinedOperators", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.liftedGreaterThanOrEqualWorksWithUserDefinedOperators);
            QUnit.test("NullableTests - LiftedAdditionWorksWithUserDefinedOperators", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.liftedAdditionWorksWithUserDefinedOperators);
            QUnit.test("NullableTests - LiftedUnaryMinusWorksWithUserDefinedOperators_SPI_1634", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.liftedUnaryMinusWorksWithUserDefinedOperators_SPI_1634);
            QUnit.test("NullableTests - LiftedBooleanAndWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.liftedBooleanAndWorks);
            QUnit.test("NullableTests - LiftedBooleanOrWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.liftedBooleanOrWorks);
            QUnit.test("NullableTests - LiftedBooleanXorWorks_SPI_1568", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.liftedBooleanXorWorks_SPI_1568);
            QUnit.test("NullableTests - LiftedBooleanNotWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.liftedBooleanNotWorks);
            QUnit.test("NullableTests - LiftedNegationWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.liftedNegationWorks);
            QUnit.test("NullableTests - LiftedUnaryPlusWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.liftedUnaryPlusWorks);
            QUnit.test("NullableTests - LiftedOnesComplementWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.liftedOnesComplementWorks);
            QUnit.test("NullableTests - CoalesceWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests.coalesceWorks);
            QUnit.test("NumberFormatInfoTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NumberFormatInfoTests.typePropertiesAreCorrect);
            QUnit.test("NumberFormatInfoTests - GetFormatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NumberFormatInfoTests.getFormatWorks);
            QUnit.test("NumberFormatInfoTests - InvariantWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NumberFormatInfoTests.invariantWorks);
            QUnit.test("PropertyAccessorTests - AccessorsCanBeInvokedInstance", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_PropertyAccessorTests.accessorsCanBeInvokedInstance);
            QUnit.test("PropertyAccessorTests - AccessorsCanBeInvokedStatic", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_PropertyAccessorTests.accessorsCanBeInvokedStatic);
            QUnit.test("PropertyAccessorTests - AccessorsCanBeInvokedGeneric", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_PropertyAccessorTests.accessorsCanBeInvokedGeneric);
            QUnit.test("PropertyAccessorTests - AccessorsCanBeInvokedGenericStatic", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_PropertyAccessorTests.accessorsCanBeInvokedGenericStatic);
            QUnit.test("PropertyAccessorTests - BaseAccessorsCanBeInvoked", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_PropertyAccessorTests.baseAccessorsCanBeInvoked);
            QUnit.test("PropertyAccessorTests - BaseAccessorsCanBeInvokedGeneric", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_PropertyAccessorTests.baseAccessorsCanBeInvokedGeneric);
            QUnit.test("RandomTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_RandomTests.typePropertiesAreCorrect);
            QUnit.test("RandomTests - DefaultConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_RandomTests.defaultConstructorWorks);
            QUnit.test("RandomTests - SeedConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_RandomTests.seedConstructorWorks);
            QUnit.test("RandomTests - NextWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_RandomTests.nextWorks);
            QUnit.test("RandomTests - NextWithMaxWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_RandomTests.nextWithMaxWorks);
            QUnit.test("RandomTests - NextWithMinAndMaxWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_RandomTests.nextWithMinAndMaxWorks);
            QUnit.test("RandomTests - NextDoubleWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_RandomTests.nextDoubleWorks);
            QUnit.test("RandomTests - NextBytesWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_RandomTests.nextBytesWorks);
            QUnit.test("AssemblyTests - GetExecutingAssemblyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AssemblyTests.getExecutingAssemblyWorks);
            QUnit.test("AssemblyTests - GetAssemblyForTypeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AssemblyTests.getAssemblyForTypeWorks);
            QUnit.test("AssemblyTests - FullNameWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AssemblyTests.fullNameWorks);
            QUnit.test("AssemblyTests - ToStringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AssemblyTests.toStringWorks);
            QUnit.test("AssemblyTests - GetTypesWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AssemblyTests.getTypesWorks);
            QUnit.test("AssemblyTests - GetTypesWithImportedModuleWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AssemblyTests.getTypesWithImportedModuleWorks);
            QUnit.test("AssemblyTests - GetTypeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AssemblyTests.getTypeWorks);
            QUnit.test("AssemblyTests - GetTypeWorksWithGenerics", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AssemblyTests.getTypeWorksWithGenerics);
            QUnit.test("AssemblyTests - GetTypeWithImportedModuleWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AssemblyTests.getTypeWithImportedModuleWorks);
            QUnit.test("AssemblyTests - AssemblyOfBuiltInTypes", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AssemblyTests.assemblyOfBuiltInTypes);
            QUnit.test("AssemblyTests - CreateInstanceWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AssemblyTests.createInstanceWorks);
            QUnit.test("AssemblyTests - GetCustomAttributesWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AssemblyTests.getCustomAttributesWorks);
            QUnit.test("AssemblyTests - LoadCanReturnReferenceToLoadedAssembly", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AssemblyTests.loadCanReturnReferenceToLoadedAssembly);
            QUnit.test("AssemblyTests - GetManifestResourceNamesWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AssemblyTests.getManifestResourceNamesWorks);
            QUnit.test("AssemblyTests - GetManifestResourceDataAsBase64WithoutTypeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AssemblyTests.getManifestResourceDataAsBase64WithoutTypeWorks);
            QUnit.test("AssemblyTests - GetManifestResourceDataAsBase64WithTypeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AssemblyTests.getManifestResourceDataAsBase64WithTypeWorks);
            QUnit.test("AssemblyTests - GetManifestResourceDataWithoutTypeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AssemblyTests.getManifestResourceDataWithoutTypeWorks);
            QUnit.test("AssemblyTests - GetManifestResourceDataWithTypeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AssemblyTests.getManifestResourceDataWithTypeWorks);
            QUnit.test("AttributeTests - CanGetCustomTypeAttributesForTypeWithNoAttributes", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests.canGetCustomTypeAttributesForTypeWithNoAttributes);
            QUnit.test("AttributeTests - CanGetCustomTypeAttributesForClassWithAttributes", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests.canGetCustomTypeAttributesForClassWithAttributes);
            QUnit.test("AttributeTests - NonScriptableAttributesAreNotIncluded", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests.nonScriptableAttributesAreNotIncluded);
            QUnit.test("AttributeTests - CanGetCustomTypeAttributesForInterfaceWithAttributes", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests.canGetCustomTypeAttributesForInterfaceWithAttributes);
            QUnit.test("AttributeTests - CanGetCustomTypeAttributesForEnumWithAttributes", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests.canGetCustomTypeAttributesForEnumWithAttributes);
            QUnit.test("AttributeTests - InheritedFlagToGetCustomAttributesWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests.inheritedFlagToGetCustomAttributesWorks);
            QUnit.test("AttributeTests - DeepInheritanceWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests.deepInheritanceWorks);
            QUnit.test("AttributeTests - OverridingSingleUseAttributeReplacesTheAttributeOnTheBaseClass", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests.overridingSingleUseAttributeReplacesTheAttributeOnTheBaseClass);
            QUnit.test("AttributeTests - ApplyingNewInstanceOfMultipleUseAttributeAddsTheAttribute", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests.applyingNewInstanceOfMultipleUseAttributeAddsTheAttribute);
            QUnit.test("AttributeTests - NonInheritedAttributeIsNotInherited", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests.nonInheritedAttributeIsNotInherited);
            QUnit.test("AttributeTests - GetCustomAttributesTypeFilterWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests.getCustomAttributesTypeFilterWorks);
            QUnit.test("AttributeTests - GetCustomAttributesWorksForOpenGenericClass", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests.getCustomAttributesWorksForOpenGenericClass);
            QUnit.test("AttributeTests - GetCustomAttributesWorksForConstructedGenericClass", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests.getCustomAttributesWorksForConstructedGenericClass);
            QUnit.test("AttributeTests - GetCustomAttributesWorksForOpenGenericInterface", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests.getCustomAttributesWorksForOpenGenericInterface);
            QUnit.test("AttributeTests - GetCustomAttributesWorksForConstructedGenericInterface", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests.getCustomAttributesWorksForConstructedGenericInterface);
            QUnit.test("AttributeTests - AllSupportedScalarTypesCanBeUsedAsAttributeArguments", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests.allSupportedScalarTypesCanBeUsedAsAttributeArguments);
            QUnit.test("AttributeTests - ArraysCanBeUsedAsAttributeArguments", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests.arraysCanBeUsedAsAttributeArguments);
            QUnit.test("AttributeTests - NamedValuesEnumCanBeUsedAsAttributeArgument", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests.namedValuesEnumCanBeUsedAsAttributeArgument);
            QUnit.test("AttributeTests - PropertiesWithSetMethodsImplementedAsNormalMethodsCanBeSetInAttributeDeclaration", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests.propertiesWithSetMethodsImplementedAsNormalMethodsCanBeSetInAttributeDeclaration);
            QUnit.test("AttributeTests - PropertiesWithSetMethodsImplementedAsInlineCodeCanBeSetInAttributeDeclaration", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests.propertiesWithSetMethodsImplementedAsInlineCodeCanBeSetInAttributeDeclaration);
            QUnit.test("AttributeTests - PropertiesImplementedAsFieldsCanBeAssignedInAttributeDeclaration", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests.propertiesImplementedAsFieldsCanBeAssignedInAttributeDeclaration);
            QUnit.test("AttributeTests - FieldsCanBeAssignedInAttributeDeclaration", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests.fieldsCanBeAssignedInAttributeDeclaration);
            QUnit.test("AttributeTests - CreatingAttributeWithNamedConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests.creatingAttributeWithNamedConstructorWorks);
            QUnit.test("AttributeTests - CreatingAttributeWithInlineCodeConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests.creatingAttributeWithInlineCodeConstructorWorks);
            QUnit.test("AttributeTests - ConditionalAttributesWhoseSymbolsAreNotDefinedAreRemoved", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests.conditionalAttributesWhoseSymbolsAreNotDefinedAreRemoved);
            QUnit.test("GetMembersTests - GetMembersWithoutBindingFlagsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests.getMembersWithoutBindingFlagsWorks);
            QUnit.test("GetMembersTests - GetMembersWorksForInterface", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests.getMembersWorksForInterface);
            QUnit.test("GetMembersTests - GetMembersWithBindingFlagsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests.getMembersWithBindingFlagsWorks);
            QUnit.test("GetMembersTests - GetMemberWithNameWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests.getMemberWithNameWorks);
            QUnit.test("GetMembersTests - GetMemberWithNameAndBindingFlagsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests.getMemberWithNameAndBindingFlagsWorks);
            QUnit.test("GetMembersTests - GetConstructorsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests.getConstructorsWorks);
            QUnit.test("GetMembersTests - GetConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests.getConstructorWorks);
            QUnit.test("GetMembersTests - GetMethodsWithoutBindingFlagsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests.getMethodsWithoutBindingFlagsWorks);
            QUnit.test("GetMembersTests - GetMethodsWithBindingFlagsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests.getMethodsWithBindingFlagsWorks);
            QUnit.test("GetMembersTests - GetMethodWithNameWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests.getMethodWithNameWorks);
            QUnit.test("GetMembersTests - GetMethodWithNameAndBindingFlagsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests.getMethodWithNameAndBindingFlagsWorks);
            QUnit.test("GetMembersTests - GetMethodWithNameAndArgumentTypesWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests.getMethodWithNameAndArgumentTypesWorks);
            QUnit.test("GetMembersTests - GetMethodWithNameAndArgumentTypesAndBindingFlagsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests.getMethodWithNameAndArgumentTypesAndBindingFlagsWorks);
            QUnit.test("GetMembersTests - GetPropertiesWithoutBindingFlagsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests.getPropertiesWithoutBindingFlagsWorks);
            QUnit.test("GetMembersTests - GetPropertiesWithBindingFlagsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests.getPropertiesWithBindingFlagsWorks);
            QUnit.test("GetMembersTests - GetPropertyWithNameWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests.getPropertyWithNameWorks);
            QUnit.test("GetMembersTests - GetPropertyWithNameAndBindingFlagsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests.getPropertyWithNameAndBindingFlagsWorks);
            QUnit.test("GetMembersTests - GetPropertyWithNameAndArgumentTypesWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests.getPropertyWithNameAndArgumentTypesWorks);
            QUnit.test("GetMembersTests - GetPropertyWithNameAndArgumentTypesAndBindingFlagsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests.getPropertyWithNameAndArgumentTypesAndBindingFlagsWorks);
            QUnit.test("GetMembersTests - GetFieldsWithoutBindingFlagsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests.getFieldsWithoutBindingFlagsWorks);
            QUnit.test("GetMembersTests - GetFieldsWithBindingFlagsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests.getFieldsWithBindingFlagsWorks);
            QUnit.test("GetMembersTests - GetFieldWithNameWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests.getFieldWithNameWorks);
            QUnit.test("GetMembersTests - GetFieldWithNameAndBindingFlagsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests.getFieldWithNameAndBindingFlagsWorks);
            QUnit.test("GetMembersTests - GetEventsWithoutBindingFlagsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests.getEventsWithoutBindingFlagsWorks);
            QUnit.test("GetMembersTests - GetEventsWithBindingFlagsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests.getEventsWithBindingFlagsWorks);
            QUnit.test("GetMembersTests - GetEventWithNameWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests.getEventWithNameWorks);
            QUnit.test("GetMembersTests - GetEventWithNameAndBindingFlagsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests.getEventWithNameAndBindingFlagsWorks);
            QUnit.test("GetMembersTests - IsOperatorForMemberInfoWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests.isOperatorForMemberInfoWorks);
            QUnit.test("ReflectionTests - GetMembersReturnsMethodsWithAnyScriptableAttributeOrReflectableAttribute", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.getMembersReturnsMethodsWithAnyScriptableAttributeOrReflectableAttribute);
            QUnit.test("ReflectionTests - StructMemberReflectionWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.structMemberReflectionWorks);
            QUnit.test("ReflectionTests - IsStaticFlagWorksForMethod", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.isStaticFlagWorksForMethod);
            QUnit.test("ReflectionTests - MemberTypeIsMethodForMethod", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.memberTypeIsMethodForMethod);
            QUnit.test("ReflectionTests - IsConstructorIsFalseForMethod", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.isConstructorIsFalseForMethod);
            QUnit.test("ReflectionTests - IsConstructorIsTrueForAllKindsOfConstructors", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.isConstructorIsTrueForAllKindsOfConstructors);
            QUnit.test("ReflectionTests - IsStaticIsFalseForAllKindsOfConstructors", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.isStaticIsFalseForAllKindsOfConstructors);
            QUnit.test("ReflectionTests - MemberTypeIsConstructorForAllKindsOfConstructors", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.memberTypeIsConstructorForAllKindsOfConstructors);
            QUnit.test("ReflectionTests - NameIsCtorForAllKindsOfConstructors", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.nameIsCtorForAllKindsOfConstructors);
            QUnit.test("ReflectionTests - DeclaringTypeIsCorrectForAllKindsOfConstructors", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.declaringTypeIsCorrectForAllKindsOfConstructors);
            QUnit.test("ReflectionTests - ScriptNameIsCorrectForAllKindsOfConstructors", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.scriptNameIsCorrectForAllKindsOfConstructors);
            QUnit.test("ReflectionTests - IsStaticMethodIsTrueOnlyForStaticMethodConstructors", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.isStaticMethodIsTrueOnlyForStaticMethodConstructors);
            QUnit.test("ReflectionTests - IsExpandParamsIsCorrectForConstructors", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.isExpandParamsIsCorrectForConstructors);
            QUnit.test("ReflectionTests - SpecialImplementationExistsOnlyForObjectLiteralAndInlineCodeConstructors", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.specialImplementationExistsOnlyForObjectLiteralAndInlineCodeConstructors);
            QUnit.test("ReflectionTests - DeclaringTypeShouldBeCorrectForMethods", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.declaringTypeShouldBeCorrectForMethods);
            QUnit.test("ReflectionTests - ReturnTypeAndParameterTypesAreCorrectForMethods", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.returnTypeAndParameterTypesAreCorrectForMethods);
            QUnit.test("ReflectionTests - ParameterTypesShouldBeCorrectForConstructors", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.parameterTypesShouldBeCorrectForConstructors);
            QUnit.test("ReflectionTests - VoidIsConsideredObjectAsReturnType", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.voidIsConsideredObjectAsReturnType);
            QUnit.test("ReflectionTests - MethodNameIsTheCSharpName", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.methodNameIsTheCSharpName);
            QUnit.test("ReflectionTests - TypeParametersAreReplacedWithObjectForReturnAndParameterTypesForOpenGenericTypes", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.typeParametersAreReplacedWithObjectForReturnAndParameterTypesForOpenGenericTypes);
            QUnit.test("ReflectionTests - TypeParametersAreCorrectForReturnAndParameterTypesForConstructedGenericTypes", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.typeParametersAreCorrectForReturnAndParameterTypesForConstructedGenericTypes);
            QUnit.test("ReflectionTests - MethodTypeParametersAreReplacedWithObjectForReturnAndParameterTypes", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.methodTypeParametersAreReplacedWithObjectForReturnAndParameterTypes);
            QUnit.test("ReflectionTests - IsGenericMethodDefinitionAndTypeParameterCountWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.isGenericMethodDefinitionAndTypeParameterCountWork);
            QUnit.test("ReflectionTests - ScriptNameWorksForAllKindsOfMethods", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.scriptNameWorksForAllKindsOfMethods);
            QUnit.test("ReflectionTests - SpecialImplementationExistsOnlyForMethodsImplementedAsInlineCode", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.specialImplementationExistsOnlyForMethodsImplementedAsInlineCode);
            QUnit.test("ReflectionTests - IsExpandParamsIsCorrectForMethods", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.isExpandParamsIsCorrectForMethods);
            QUnit.test("ReflectionTests - CreateDelegateWorksForNonGenericInstanceMethods", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.createDelegateWorksForNonGenericInstanceMethods);
            QUnit.test("ReflectionTests - DelegateCreateDelegateWorksForNonGenericInstanceMethods", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.delegateCreateDelegateWorksForNonGenericInstanceMethods);
            QUnit.test("ReflectionTests - CreateDelegateWorksNonGenericStaticMethods", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.createDelegateWorksNonGenericStaticMethods);
            QUnit.test("ReflectionTests - CreateDelegateWorksNonGenericStaticMethodOfGenericType", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.createDelegateWorksNonGenericStaticMethodOfGenericType);
            QUnit.test("ReflectionTests - CreateDelegateWorksForGenericInstanceMethods", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.createDelegateWorksForGenericInstanceMethods);
            QUnit.test("ReflectionTests - CreateDelegateWorksForGenericStaticMethods", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.createDelegateWorksForGenericStaticMethods);
            QUnit.test("ReflectionTests - InvokeWorksForNonGenericInstanceMethods", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.invokeWorksForNonGenericInstanceMethods);
            QUnit.test("ReflectionTests - InvokeWorksForNonGenericStaticMethods", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.invokeWorksForNonGenericStaticMethods);
            QUnit.test("ReflectionTests - InvokeWorksForNonGenericInstanceMethodsOnSerializableTypes", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.invokeWorksForNonGenericInstanceMethodsOnSerializableTypes);
            QUnit.test("ReflectionTests - InvokeWorksForNonGenericInlineCodeMethods", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.invokeWorksForNonGenericInlineCodeMethods);
            QUnit.test("ReflectionTests - InvokeWorksForGenericInlineCodeMethods", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.invokeWorksForGenericInlineCodeMethods);
            QUnit.test("ReflectionTests - InvokeWorksForGenericInstanceMethod", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.invokeWorksForGenericInstanceMethod);
            QUnit.test("ReflectionTests - InvokeWorksForGenericStaticMethod", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.invokeWorksForGenericStaticMethod);
            QUnit.test("ReflectionTests - InvokeWorksForGenericInstanceMethodsOnSerializableTypes", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.invokeWorksForGenericInstanceMethodsOnSerializableTypes);
            QUnit.test("ReflectionTests - InvokeWorksForExpandParamsMethods", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.invokeWorksForExpandParamsMethods);
            QUnit.test("ReflectionTests - InvokeWorksForAllKindsOfConstructors", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.invokeWorksForAllKindsOfConstructors);
            QUnit.test("ReflectionTests - InvokeWorksForExpandParamsConstructors", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.invokeWorksForExpandParamsConstructors);
            QUnit.test("ReflectionTests - MemberTypeIsFieldForField", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.memberTypeIsFieldForField);
            QUnit.test("ReflectionTests - DeclaringTypeIsCorrectForField", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.declaringTypeIsCorrectForField);
            QUnit.test("ReflectionTests - NameIsCorrectForField", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.nameIsCorrectForField);
            QUnit.test("ReflectionTests - IsStaticIsCorrectForField", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.isStaticIsCorrectForField);
            QUnit.test("ReflectionTests - FieldTypeIsCorrectForField", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.fieldTypeIsCorrectForField);
            QUnit.test("ReflectionTests - ScriptNameIsCorrectForField", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.scriptNameIsCorrectForField);
            QUnit.test("ReflectionTests - GetValueWorksForInstanceField", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.getValueWorksForInstanceField);
            QUnit.test("ReflectionTests - GetValueWorksForStaticField", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.getValueWorksForStaticField);
            QUnit.test("ReflectionTests - SetValueWorksForInstanceField", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.setValueWorksForInstanceField);
            QUnit.test("ReflectionTests - SetValueWorksForStaticField", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.setValueWorksForStaticField);
            QUnit.test("ReflectionTests - MemberTypeIsEventForEvent", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.memberTypeIsEventForEvent);
            QUnit.test("ReflectionTests - DeclaringTypeIsCorrectForEvent", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.declaringTypeIsCorrectForEvent);
            QUnit.test("ReflectionTests - NameIsCorrectForEvent", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.nameIsCorrectForEvent);
            QUnit.test("ReflectionTests - IsStaticIsCorrectForEvent", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.isStaticIsCorrectForEvent);
            QUnit.test("ReflectionTests - AddEventHandlerMethodWorksForInstanceEvent", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.addEventHandlerMethodWorksForInstanceEvent);
            QUnit.test("ReflectionTests - AddEventHandlerMethodWorksForInstanceEventWithInlineCodeAddMethod", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.addEventHandlerMethodWorksForInstanceEventWithInlineCodeAddMethod);
            QUnit.test("ReflectionTests - AddEventHandlerMethodWorksForStaticEvent", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.addEventHandlerMethodWorksForStaticEvent);
            QUnit.test("ReflectionTests - AddEventHandlerMethodWorksForStaticEventWithInlineCodeAddMethod", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.addEventHandlerMethodWorksForStaticEventWithInlineCodeAddMethod);
            QUnit.test("ReflectionTests - RemoveEventHandlerMethodWorksForInstanceEvent", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.removeEventHandlerMethodWorksForInstanceEvent);
            QUnit.test("ReflectionTests - RemoveEventHandlerMethodWorksForInstanceEventWithInlineCodeRemoveMethod", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.removeEventHandlerMethodWorksForInstanceEventWithInlineCodeRemoveMethod);
            QUnit.test("ReflectionTests - RemoveEventHandlerMethodWorksForStaticEvent", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.removeEventHandlerMethodWorksForStaticEvent);
            QUnit.test("ReflectionTests - RemoveEventHandlerMethodWorksForStaticEventWithInlineCodeRemoveMethod", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.removeEventHandlerMethodWorksForStaticEventWithInlineCodeRemoveMethod);
            QUnit.test("ReflectionTests - PropertiesForAddMethodAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.propertiesForAddMethodAreCorrect);
            QUnit.test("ReflectionTests - PropertiesForRemoveMethodAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.propertiesForRemoveMethodAreCorrect);
            QUnit.test("ReflectionTests - MemberTypeIsPropertyForProperty", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.memberTypeIsPropertyForProperty);
            QUnit.test("ReflectionTests - ScriptFieldNameIsCorrectForPropertiesImplementedAsFieldAndNullForOtherProperties", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.scriptFieldNameIsCorrectForPropertiesImplementedAsFieldAndNullForOtherProperties);
            QUnit.test("ReflectionTests - MemberTypeIsPropertyForIndexer", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.memberTypeIsPropertyForIndexer);
            QUnit.test("ReflectionTests - DeclaringTypeIsCorrectForProperty", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.declaringTypeIsCorrectForProperty);
            QUnit.test("ReflectionTests - DeclaringTypeIsCorrectForIndexer", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.declaringTypeIsCorrectForIndexer);
            QUnit.test("ReflectionTests - NameIsCorrectForProperty", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.nameIsCorrectForProperty);
            QUnit.test("ReflectionTests - NameIsCorrectForIndexer", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.nameIsCorrectForIndexer);
            QUnit.test("ReflectionTests - IsStaticIsCorrectForProperty", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.isStaticIsCorrectForProperty);
            QUnit.test("ReflectionTests - IsStaticIsFalseForIndexer", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.isStaticIsFalseForIndexer);
            QUnit.test("ReflectionTests - PropertyTypeIsCorrectForProperty", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.propertyTypeIsCorrectForProperty);
            QUnit.test("ReflectionTests - PropertyTypeIsCorrectForIndexer", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.propertyTypeIsCorrectForIndexer);
            QUnit.test("ReflectionTests - IndexParameterTypesAreEmptyForProperty", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.indexParameterTypesAreEmptyForProperty);
            QUnit.test("ReflectionTests - IndexParameterTypesAreCorrectForIndexer", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.indexParameterTypesAreCorrectForIndexer);
            QUnit.test("ReflectionTests - PropertiesForGetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.propertiesForGetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods);
            QUnit.test("ReflectionTests - PropertiesForSetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.propertiesForSetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods);
            QUnit.test("ReflectionTests - PropertiesForGetMethodAreCorrectForPropertyImplementedAsFields", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.propertiesForGetMethodAreCorrectForPropertyImplementedAsFields);
            QUnit.test("ReflectionTests - PropertiesForSetMethodAreCorrectForPropertyImplementedAsFields", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.propertiesForSetMethodAreCorrectForPropertyImplementedAsFields);
            QUnit.test("ReflectionTests - PropertiesForGetMethodAreCorrectForIndexer", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.propertiesForGetMethodAreCorrectForIndexer);
            QUnit.test("ReflectionTests - PropertiesForSetMethodAreCorrectForIndexer", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.propertiesForSetMethodAreCorrectForIndexer);
            QUnit.test("ReflectionTests - CanReadAndWriteAndPropertiesWithOnlyOneAccessor", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.canReadAndWriteAndPropertiesWithOnlyOneAccessor);
            QUnit.test("ReflectionTests - CanReadAndWriteAndIndexersWithOnlyOneAccessor", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.canReadAndWriteAndIndexersWithOnlyOneAccessor);
            QUnit.test("ReflectionTests - PropertyInfoGetValueWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.propertyInfoGetValueWorks);
            QUnit.test("ReflectionTests - PropertyInfoSetValueWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.propertyInfoSetValueWorks);
            QUnit.test("ReflectionTests - MemberAttributesWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.memberAttributesWork);
            QUnit.test("ReflectionTests - MembersReflectableAttributeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests.membersReflectableAttributeWorks);
            QUnit.test("TypeSystemLanguageSupportTests - TypeIsWorksForReferenceTypes", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemLanguageSupportTests.typeIsWorksForReferenceTypes);
            QUnit.test("TypeSystemLanguageSupportTests - TypeAsWorksForReferenceTypes", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemLanguageSupportTests.typeAsWorksForReferenceTypes);
            QUnit.test("TypeSystemLanguageSupportTests - CastWorksForReferenceTypes", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemLanguageSupportTests.castWorksForReferenceTypes);
            QUnit.test("TypeSystemLanguageSupportTests - GetTypeWorksOnObjects", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemLanguageSupportTests.getTypeWorksOnObjects);
            QUnit.test("TypeSystemLanguageSupportTests - GetTypeOnNullInstanceThrowsException", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemLanguageSupportTests.getTypeOnNullInstanceThrowsException);
            QUnit.test("TypeSystemLanguageSupportTests - CastOperatorForSerializableTypeWithoutTypeCheckCodeAlwaysSucceedsGeneric", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemLanguageSupportTests.castOperatorForSerializableTypeWithoutTypeCheckCodeAlwaysSucceedsGeneric);
            QUnit.test("TypeSystemLanguageSupportTests - TypeCheckForSubTypeOfGenericType", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemLanguageSupportTests.typeCheckForSubTypeOfGenericType);
            QUnit.test("TypeSystemTests - FullNamePropertyReturnsTheNameWithTheNamespace", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.fullNamePropertyReturnsTheNameWithTheNamespace);
            QUnit.test("TypeSystemTests - AssemblyQualifiedNameReturnsTheNameWithTheNamespaceAndAssemblyName", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.assemblyQualifiedNameReturnsTheNameWithTheNamespaceAndAssemblyName);
            QUnit.test("TypeSystemTests - AssemblyPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.assemblyPropertyWorks);
            QUnit.test("TypeSystemTests - NamespacePropertyReturnsTheNamespaceWithoutTheName", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.namespacePropertyReturnsTheNamespaceWithoutTheName);
            QUnit.test("TypeSystemTests - InstantiatingClassWithConstructorThatNeedsToBeAppliedWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.instantiatingClassWithConstructorThatNeedsToBeAppliedWorks);
            QUnit.test("TypeSystemTests - NamePropertyRemovesTheNamespace", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.namePropertyRemovesTheNamespace);
            QUnit.test("TypeSystemTests - GettingBaseTypeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.gettingBaseTypeWorks);
            QUnit.test("TypeSystemTests - GettingImplementedInterfacesWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.gettingImplementedInterfacesWorks);
            QUnit.test("TypeSystemTests - TypeOfAnOpenGenericClassWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.typeOfAnOpenGenericClassWorks);
            QUnit.test("TypeSystemTests - TypeOfAnOpenGenericInterfaceWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.typeOfAnOpenGenericInterfaceWorks);
            QUnit.test("TypeSystemTests - TypeOfInstantiatedGenericClassWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.typeOfInstantiatedGenericClassWorks);
            QUnit.test("TypeSystemTests - TypeOfInstantiatedGenericInterfaceWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.typeOfInstantiatedGenericInterfaceWorks);
            QUnit.test("TypeSystemTests - ConstructingAGenericTypeTwiceWithTheSameArgumentsReturnsTheSameInstance", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.constructingAGenericTypeTwiceWithTheSameArgumentsReturnsTheSameInstance);
            QUnit.test("TypeSystemTests - AccessingAStaticMemberInAGenericClassWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.accessingAStaticMemberInAGenericClassWorks);
            QUnit.test("TypeSystemTests - TypeOfNestedGenericClassWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.typeOfNestedGenericClassWorks);
            QUnit.test("TypeSystemTests - BaseTypeAndImplementedInterfacesForGenericTypeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.baseTypeAndImplementedInterfacesForGenericTypeWorks);
            QUnit.test("TypeSystemTests - IsGenericTypeDefinitionWorksAsExpected", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.isGenericTypeDefinitionWorksAsExpected);
            QUnit.test("TypeSystemTests - GenericParameterCountReturnsZeroForConstructedTypesAndNonZeroForOpenOnes", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.genericParameterCountReturnsZeroForConstructedTypesAndNonZeroForOpenOnes);
            QUnit.test("TypeSystemTests - GetGenericArgumentsReturnsTheCorrectTypesForConstructedTypesOtherwiseNull", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.getGenericArgumentsReturnsTheCorrectTypesForConstructedTypesOtherwiseNull);
            QUnit.test("TypeSystemTests - GetGenericTypeDefinitionReturnsTheGenericTypeDefinitionForConstructedTypeOtherwiseNull", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.getGenericTypeDefinitionReturnsTheGenericTypeDefinitionForConstructedTypeOtherwiseNull);
            QUnit.test("TypeSystemTests - IsAssignableFromWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.isAssignableFromWorks);
            QUnit.test("TypeSystemTests - IsSubclassOfWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.isSubclassOfWorks);
            QUnit.test("TypeSystemTests - IsClassWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.isClassWorks);
            QUnit.test("TypeSystemTests - IsEnumWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.isEnumWorks);
            QUnit.test("TypeSystemTests - IsArrayWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.isArrayWorks);
            QUnit.test("TypeSystemTests - IsFlagsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.isFlagsWorks);
            QUnit.test("TypeSystemTests - IsInterfaceWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.isInterfaceWorks);
            QUnit.test("TypeSystemTests - IsInstanceOfTypeWorksForReferenceTypes", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.isInstanceOfTypeWorksForReferenceTypes);
            QUnit.test("TypeSystemTests - InvokingBaseUnnamedConstructorWithoutArgumentsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.invokingBaseUnnamedConstructorWithoutArgumentsWorks);
            QUnit.test("TypeSystemTests - InvokingBaseUnnamedConstructorWithArgumentsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.invokingBaseUnnamedConstructorWithArgumentsWorks);
            QUnit.test("TypeSystemTests - InvokingBaseNamedConstructorWithoutArgumentsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.invokingBaseNamedConstructorWithoutArgumentsWorks);
            QUnit.test("TypeSystemTests - InvokingBaseNamedConstructorWithArgumentsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.invokingBaseNamedConstructorWithArgumentsWorks);
            QUnit.test("TypeSystemTests - ConstructingInstanceWithNamedConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.constructingInstanceWithNamedConstructorWorks);
            QUnit.test("TypeSystemTests - ConstructingInstanceWithNamedConstructorWorks2", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.constructingInstanceWithNamedConstructorWorks2);
            QUnit.test("TypeSystemTests - InvokingBaseMethodWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.invokingBaseMethodWorks);
            QUnit.test("TypeSystemTests - InvokingGenericBaseMethodWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.invokingGenericBaseMethodWorks);
            QUnit.test("TypeSystemTests - MethodGroupConversionWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.methodGroupConversionWorks);
            QUnit.test("TypeSystemTests - MethodGroupConversionOnGenericMethodWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.methodGroupConversionOnGenericMethodWorks);
            QUnit.test("TypeSystemTests - MethodGroupConversionOnBaseMethodWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.methodGroupConversionOnBaseMethodWorks);
            QUnit.test("TypeSystemTests - MethodGroupConversionOnGenericBaseMethodWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.methodGroupConversionOnGenericBaseMethodWorks);
            QUnit.test("TypeSystemTests - ImportedInterfaceAppearsAsObjectWhenUsedAsGenericArgument", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.importedInterfaceAppearsAsObjectWhenUsedAsGenericArgument);
            QUnit.test("TypeSystemTests - FalseIsFunctionShouldReturnFalse", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.falseIsFunctionShouldReturnFalse);
            QUnit.test("TypeSystemTests - CastingUndefinedToOtherTypeShouldReturnUndefined", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.castingUndefinedToOtherTypeShouldReturnUndefined);
            QUnit.test("TypeSystemTests - NonSerializableTypeCanInheritFromSerializableType", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.nonSerializableTypeCanInheritFromSerializableType);
            QUnit.test("TypeSystemTests - InheritingFromRecordWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.inheritingFromRecordWorks);
            QUnit.test("TypeSystemTests - InstanceOfWorksForSerializableTypesWithCustomTypeCheckCode", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.instanceOfWorksForSerializableTypesWithCustomTypeCheckCode);
            QUnit.test("TypeSystemTests - StaticGetTypeMethodWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.staticGetTypeMethodWorks);
            QUnit.test("TypeSystemTests - StaticGetTypeMethodWithGenericsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.staticGetTypeMethodWithGenericsWorks);
            QUnit.test("TypeSystemTests - CastingToNamedValuesEnumCastsToString", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.castingToNamedValuesEnumCastsToString);
            QUnit.test("TypeSystemTests - CastingToImportedNamedValuesEnumCastsToString", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.castingToImportedNamedValuesEnumCastsToString);
            QUnit.test("TypeSystemTests - DefaultValueOfNamedValuesEnumIsNull", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.defaultValueOfNamedValuesEnumIsNull);
            QUnit.test("TypeSystemTests - DefaultValueOfImportedNamedValuesEnumIsNull", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests.defaultValueOfImportedNamedValuesEnumIsNull);
            QUnit.test("RefParameterTests - CanUseReferenceToLocalVariables", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_RefParameterTests.canUseReferenceToLocalVariables);
            QUnit.test("RefParameterTests - CanUseReferenceToField", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_RefParameterTests.canUseReferenceToField);
            QUnit.test("RefParameterTests - CanUseReferenceToOneDimensionalArray", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_RefParameterTests.canUseReferenceToOneDimensionalArray);
            QUnit.test("RefParameterTests - CanUseReferenceToMultiDimensionalArray", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_RefParameterTests.canUseReferenceToMultiDimensionalArray);
            QUnit.test("RefParameterTests - CanUseReferenceToThis_SPI_1569", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_RefParameterTests.canUseReferenceToThis_SPI_1569);
            QUnit.test("RuntimeHelpersTests - GetHashCodeWoksForObject_SPI_1570", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Runtime_CompilerServices_RuntimeHelpersTests.getHashCodeWoksForObject_SPI_1570);
            QUnit.test("RuntimeHelpersTests - GetHashCodeCallsGetHashCodeNonVirtually_SPI_1570", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Runtime_CompilerServices_RuntimeHelpersTests.getHashCodeCallsGetHashCodeNonVirtually_SPI_1570);
            QUnit.test("ScriptTests - EvalWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ScriptTests.evalWorks);
            QUnit.test("ScriptTests - TypeOfWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ScriptTests.typeOfWorks);
            QUnit.test("ScriptTests - DeleteWorks_SPI_1571", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ScriptTests.deleteWorks_SPI_1571);
            QUnit.test("ScriptTests - ParseIntWithoutRadixWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ScriptTests.parseIntWithoutRadixWorks);
            QUnit.test("ScriptTests - ParseIntWithRadixWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ScriptTests.parseIntWithRadixWorks);
            QUnit.test("JsonTests - NonGenericParseWorks_SPI_1574", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Serialization_JsonTests.nonGenericParseWorks_SPI_1574);
            QUnit.test("JsonTests - GenericParseWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Serialization_JsonTests.genericParseWorks);
            QUnit.test("JsonTests - NonGenericParseWithCallbackWorks_SPI_1574", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Serialization_JsonTests.nonGenericParseWithCallbackWorks_SPI_1574);
            QUnit.test("JsonTests - GenericParseWithCallbackWorks_SPI_1574", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Serialization_JsonTests.genericParseWithCallbackWorks_SPI_1574);
            QUnit.test("JsonTests - StringifyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Serialization_JsonTests.stringifyWorks);
            QUnit.test("JsonTests - StringifyWithSerializableMembersArrayWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Serialization_JsonTests.stringifyWithSerializableMembersArrayWorks);
            QUnit.test("JsonTests - StringifyWithSerializableMembersArrayAndIntentCountWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Serialization_JsonTests.stringifyWithSerializableMembersArrayAndIntentCountWorks);
            QUnit.test("JsonTests - StringifyWithSerializableMembersArrayAndIntentTextWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Serialization_JsonTests.stringifyWithSerializableMembersArrayAndIntentTextWorks);
            QUnit.test("JsonTests - StringifyWithCallbackWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Serialization_JsonTests.stringifyWithCallbackWorks);
            QUnit.test("JsonTests - StringifyWithCallbackAndIndentCountWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Serialization_JsonTests.stringifyWithCallbackAndIndentCountWorks);
            QUnit.test("JsonTests - StringifyWithCallbackAndIndentTextWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Serialization_JsonTests.stringifyWithCallbackAndIndentTextWorks);
            QUnit.test("BooleanTests - TypePropertiesAreCorrect_SPI_1575", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_BooleanTests.typePropertiesAreCorrect_SPI_1575);
            QUnit.test("BooleanTests - DefaultValueIsFalse", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_BooleanTests.defaultValueIsFalse);
            QUnit.test("BooleanTests - CreatingInstanceReturnsFalse", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_BooleanTests.creatingInstanceReturnsFalse);
            QUnit.test("BooleanTests - DefaultConstructorReturnsFalse_SPI_1576", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_BooleanTests.defaultConstructorReturnsFalse_SPI_1576);
            QUnit.test("BooleanTests - ParseWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_BooleanTests.parseWorks);
            QUnit.test("BooleanTests - GetHashCodeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_BooleanTests.getHashCodeWorks);
            QUnit.test("BooleanTests - ObjectEqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_BooleanTests.objectEqualsWorks);
            QUnit.test("BooleanTests - IEquatableEqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_BooleanTests.iEquatableEqualsWorks);
            QUnit.test("BooleanTests - CompareToWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_BooleanTests.compareToWorks);
            QUnit.test("BooleanTests - IComparableCompareToWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_BooleanTests.iComparableCompareToWorks);
            QUnit.test("ByteTests - TypePropertiesAreCorrect_SPI_1717", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests.typePropertiesAreCorrect_SPI_1717);
            QUnit.test("ByteTests - CastsWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests.castsWork);
            QUnit.test("ByteTests - DefaultValueIs0", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests.defaultValueIs0);
            QUnit.test("ByteTests - DefaultConstructorReturnsZero", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests.defaultConstructorReturnsZero);
            QUnit.test("ByteTests - CreatingInstanceReturnsZero", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests.creatingInstanceReturnsZero);
            QUnit.test("ByteTests - ConstantsWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests.constantsWork);
            QUnit.test("ByteTests - FormatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests.formatWorks);
            QUnit.test("ByteTests - ToStringWithFormatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests.toStringWithFormatWorks);
            QUnit.test("ByteTests - ToStringWithFormatAndProviderWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests.toStringWithFormatAndProviderWorks);
            QUnit.test("ByteTests - IFormattableToStringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests.iFormattableToStringWorks);
            QUnit.test("ByteTests - TryParseWorks_SPI_1592", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests.tryParseWorks_SPI_1592);
            QUnit.test("ByteTests - ParseWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests.parseWorks);
            QUnit.test("ByteTests - ToStringWithoutRadixWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests.toStringWithoutRadixWorks);
            QUnit.test("ByteTests - ToStringWithRadixWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests.toStringWithRadixWorks);
            QUnit.test("ByteTests - GetHashCodeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests.getHashCodeWorks);
            QUnit.test("ByteTests - EqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests.equalsWorks);
            QUnit.test("ByteTests - IEquatableEqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests.iEquatableEqualsWorks);
            QUnit.test("ByteTests - CompareToWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests.compareToWorks);
            QUnit.test("ByteTests - IComparableCompareToWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests.iComparableCompareToWorks);
            QUnit.test("CharTests - TypePropertiesAreInt32_SPI_1603", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests.typePropertiesAreInt32_SPI_1603);
            QUnit.test("CharTests - CastsWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests.castsWork);
            QUnit.test("CharTests - DefaultValueWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests.defaultValueWorks);
            QUnit.test("CharTests - DefaultConstructorReturnsZero", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests.defaultConstructorReturnsZero);
            QUnit.test("CharTests - CreatingInstanceReturnsZero", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests.creatingInstanceReturnsZero);
            QUnit.test("CharTests - ConstantsWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests.constantsWork);
            QUnit.test("CharTests - CharComparisonWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests.charComparisonWorks);
            QUnit.test("CharTests - ParseWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests.parseWorks);
            QUnit.test("CharTests - FormatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests.formatWorks);
            QUnit.test("CharTests - IFormattableToStringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests.iFormattableToStringWorks);
            QUnit.test("CharTests - ToStringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests.toStringWorks);
            QUnit.test("CharTests - GetHashCodeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests.getHashCodeWorks);
            QUnit.test("CharTests - EqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests.equalsWorks);
            QUnit.test("CharTests - IEquatableEqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests.iEquatableEqualsWorks);
            QUnit.test("CharTests - CompareToWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests.compareToWorks);
            QUnit.test("CharTests - IsLowerWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests.isLowerWorks);
            QUnit.test("CharTests - IsUpperWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests.isUpperWorks);
            QUnit.test("CharTests - ToLowerWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests.toLowerWorks);
            QUnit.test("CharTests - ToUpperWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests.toUpperWorks);
            QUnit.test("CharTests - IsDigitWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests.isDigitWorks);
            QUnit.test("CharTests - IsWhiteSpaceWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests.isWhiteSpaceWorks);
            QUnit.test("CharTests - IsDigitWithStringAndIndexWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests.isDigitWithStringAndIndexWorks);
            QUnit.test("CharTests - IsWhiteSpaceWithStringAndIndexWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests.isWhiteSpaceWithStringAndIndexWorks);
            QUnit.test("DateTests - TypePropertiesAreCorrect_SPI_1608_1609", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.typePropertiesAreCorrect_SPI_1608_1609);
            QUnit.test("DateTests - DefaultConstructorReturnsTodaysDate", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.defaultConstructorReturnsTodaysDate);
            QUnit.test("DateTests - CreatingInstanceReturnsTodaysDate_SPI_1604", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.creatingInstanceReturnsTodaysDate_SPI_1604);
            QUnit.test("DateTests - MillisecondSinceEpochConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.millisecondSinceEpochConstructorWorks);
            QUnit.test("DateTests - StringConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.stringConstructorWorks);
            QUnit.test("DateTests - YMDConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.yMDConstructorWorks);
            QUnit.test("DateTests - YMDHConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.yMDHConstructorWorks);
            QUnit.test("DateTests - YMDHNConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.yMDHNConstructorWorks);
            QUnit.test("DateTests - YMDHNSConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.yMDHNSConstructorWorks);
            QUnit.test("DateTests - YMDHNSUConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.yMDHNSUConstructorWorks);
            QUnit.test("DateTests - GetFullYearWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.getFullYearWorks);
            QUnit.test("DateTests - GetMonthWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.getMonthWorks);
            QUnit.test("DateTests - GetDateWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.getDateWorks);
            QUnit.test("DateTests - GetHoursWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.getHoursWorks);
            QUnit.test("DateTests - GetMinutesWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.getMinutesWorks);
            QUnit.test("DateTests - GetSecondsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.getSecondsWorks);
            QUnit.test("DateTests - GetMillisecondsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.getMillisecondsWorks);
            QUnit.test("DateTests - GetDayWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.getDayWorks);
            QUnit.test("DateTests - GetTimeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.getTimeWorks);
            QUnit.test("DateTests - ValueOfWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.valueOfWorks);
            QUnit.test("DateTests - GetTimezoneOffsetWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.getTimezoneOffsetWorks);
            QUnit.test("DateTests - GetUtcFullYearWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.getUtcFullYearWorks);
            QUnit.test("DateTests - GetUtcMonthWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.getUtcMonthWorks);
            QUnit.test("DateTests - GetUtcDateWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.getUtcDateWorks);
            QUnit.test("DateTests - GetUtcHoursWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.getUtcHoursWorks);
            QUnit.test("DateTests - GetUtcMinutesWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.getUtcMinutesWorks);
            QUnit.test("DateTests - GetUtcSecondsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.getUtcSecondsWorks);
            QUnit.test("DateTests - GetUtcMillisecondsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.getUtcMillisecondsWorks);
            QUnit.test("DateTests - GetUtcDayWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.getUtcDayWorks);
            QUnit.test("DateTests - ToDateStringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.toDateStringWorks);
            QUnit.test("DateTests - ToTimeStringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.toTimeStringWorks);
            QUnit.test("DateTests - ToUtcStringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.toUtcStringWorks);
            QUnit.test("DateTests - ToLocaleDateStringWorks_SPI_1624", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.toLocaleDateStringWorks_SPI_1624);
            QUnit.test("DateTests - ToLocaleTimeStringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.toLocaleTimeStringWorks);
            QUnit.test("DateTests - SubtractingDatesWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.subtractingDatesWorks);
            QUnit.test("DateTests - DateEqualityWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.dateEqualityWorks);
            QUnit.test("DateTests - DateInequalityWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.dateInequalityWorks);
            QUnit.test("DateTests - DateLessThanWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.dateLessThanWorks);
            QUnit.test("DateTests - DateLessEqualWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.dateLessEqualWorks);
            QUnit.test("DateTests - DateGreaterThanWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.dateGreaterThanWorks);
            QUnit.test("DateTests - DateGreaterEqualWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.dateGreaterEqualWorks);
            QUnit.test("DateTests - SetFullYearWithOneParameterWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.setFullYearWithOneParameterWorks);
            QUnit.test("DateTests - SetFullYearWithTwoParametersWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.setFullYearWithTwoParametersWorks);
            QUnit.test("DateTests - SetFullYearWithThreeParametersWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.setFullYearWithThreeParametersWorks);
            QUnit.test("DateTests - SetMonthWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.setMonthWorks);
            QUnit.test("DateTests - SetDateWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.setDateWorks);
            QUnit.test("DateTests - SetHoursWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.setHoursWorks);
            QUnit.test("DateTests - SetMinutesWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.setMinutesWorks);
            QUnit.test("DateTests - SetSecondsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.setSecondsWorks);
            QUnit.test("DateTests - SetMillisecondsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.setMillisecondsWorks);
            QUnit.test("DateTests - SetTimeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.setTimeWorks);
            QUnit.test("DateTests - SetTimeAsDoubleWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.setTimeAsDoubleWorks);
            QUnit.test("DateTests - SetUtcFullYearWithOneParameterWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.setUtcFullYearWithOneParameterWorks);
            QUnit.test("DateTests - SetUtcFullYearWithTwoParametersWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.setUtcFullYearWithTwoParametersWorks);
            QUnit.test("DateTests - SetUtcFullYearWithThreeParametersWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.setUtcFullYearWithThreeParametersWorks);
            QUnit.test("DateTests - SetUtcMonthWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.setUtcMonthWorks);
            QUnit.test("DateTests - SetUtcDateWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.setUtcDateWorks);
            QUnit.test("DateTests - SetUtcHoursWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.setUtcHoursWorks);
            QUnit.test("DateTests - SetUtcMinutesWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.setUtcMinutesWorks);
            QUnit.test("DateTests - SetUtcSecondsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.setUtcSecondsWorks);
            QUnit.test("DateTests - SetUtcMillisecondsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.setUtcMillisecondsWorks);
            QUnit.test("DateTests - GetHashCodeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.getHashCodeWorks);
            QUnit.test("DateTests - EqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests.equalsWorks);
            QUnit.test("DateTimeTests - TypePropertiesAreCorrect_SPI_1607_1608_1609", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.typePropertiesAreCorrect_SPI_1607_1608_1609);
            QUnit.test("DateTimeTests - DefaultConstructorWorks_SPI_1606", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.defaultConstructorWorks_SPI_1606);
            QUnit.test("DateTimeTests - DefaultValueWorks_SPI_1606", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.defaultValueWorks_SPI_1606);
            QUnit.test("DateTimeTests - CreatingInstanceReturnsDateWithZeroValue_SPI_1606", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.creatingInstanceReturnsDateWithZeroValue_SPI_1606);
            QUnit.test("DateTimeTests - MillisecondSinceEpochConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.millisecondSinceEpochConstructorWorks);
            QUnit.test("DateTimeTests - StringConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.stringConstructorWorks);
            QUnit.test("DateTimeTests - YMDConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.yMDConstructorWorks);
            QUnit.test("DateTimeTests - YMDHConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.yMDHConstructorWorks);
            QUnit.test("DateTimeTests - YMDHNConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.yMDHNConstructorWorks);
            QUnit.test("DateTimeTests - YMDHNSConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.yMDHNSConstructorWorks);
            QUnit.test("DateTimeTests - YMDHNSUConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.yMDHNSUConstructorWorks);
            QUnit.test("DateTimeTests - NowWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.nowWorks);
            QUnit.test("DateTimeTests - UtcNowWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.utcNowWorks);
            QUnit.test("DateTimeTests - ToUniversalWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.toUniversalWorks);
            QUnit.test("DateTimeTests - ToLocalWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.toLocalWorks);
            QUnit.test("DateTimeTests - TodayWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.todayWorks);
            QUnit.test("DateTimeTests - FormatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.formatWorks);
            QUnit.test("DateTimeTests - ToStringWithFormatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.toStringWithFormatWorks);
            QUnit.test("DateTimeTests - ToStringWithFormatAndProviderWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.toStringWithFormatAndProviderWorks);
            QUnit.test("DateTimeTests - IFormattableToStringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.iFormattableToStringWorks);
            QUnit.test("DateTimeTests - GetFullYearWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.getFullYearWorks);
            QUnit.test("DateTimeTests - GetMonthWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.getMonthWorks);
            QUnit.test("DateTimeTests - GetDateWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.getDateWorks);
            QUnit.test("DateTimeTests - GetHoursWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.getHoursWorks);
            QUnit.test("DateTimeTests - GetMinutesWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.getMinutesWorks);
            QUnit.test("DateTimeTests - GetSecondsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.getSecondsWorks);
            QUnit.test("DateTimeTests - GetMillisecondsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.getMillisecondsWorks);
            QUnit.test("DateTimeTests - GetDayWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.getDayWorks);
            QUnit.test("DateTimeTests - GetTimeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.getTimeWorks);
            QUnit.test("DateTimeTests - ValueOfWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.valueOfWorks);
            QUnit.test("DateTimeTests - GetUtcFullYearWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.getUtcFullYearWorks);
            QUnit.test("DateTimeTests - GetUtcMonthWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.getUtcMonthWorks);
            QUnit.test("DateTimeTests - GetUtcDateWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.getUtcDateWorks);
            QUnit.test("DateTimeTests - GetUtcHoursWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.getUtcHoursWorks);
            QUnit.test("DateTimeTests - GetUtcMinutesWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.getUtcMinutesWorks);
            QUnit.test("DateTimeTests - GetUtcSecondsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.getUtcSecondsWorks);
            QUnit.test("DateTimeTests - GetUtcMillisecondsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.getUtcMillisecondsWorks);
            QUnit.test("DateTimeTests - GetUtcDayWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.getUtcDayWorks);
            QUnit.test("DateTimeTests - ParseWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.parseWorks);
            QUnit.test("DateTimeTests - ParseExactWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.parseExactWorks);
            QUnit.test("DateTimeTests - ParseExactReturnsNullIfTheInputIsInvalid", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.parseExactReturnsNullIfTheInputIsInvalid);
            QUnit.test("DateTimeTests - ParseExactWithCultureWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.parseExactWithCultureWorks);
            QUnit.test("DateTimeTests - ParseExactWithCultureReturnsNullIfTheInputIsInvalid", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.parseExactWithCultureReturnsNullIfTheInputIsInvalid);
            QUnit.test("DateTimeTests - ParseExactUtcWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.parseExactUtcWorks);
            QUnit.test("DateTimeTests - ParseExactUtcReturnsNullIfTheInputIsInvalid", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.parseExactUtcReturnsNullIfTheInputIsInvalid);
            QUnit.test("DateTimeTests - ParseExactUtcWithCultureWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.parseExactUtcWithCultureWorks);
            QUnit.test("DateTimeTests - ParseExactUtcWithCultureReturnsNullIfTheInputIsInvalid", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.parseExactUtcWithCultureReturnsNullIfTheInputIsInvalid);
            QUnit.test("DateTimeTests - ToDateStringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.toDateStringWorks);
            QUnit.test("DateTimeTests - ToTimeStringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.toTimeStringWorks);
            QUnit.test("DateTimeTests - ToUtcStringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.toUtcStringWorks);
            QUnit.test("DateTimeTests - ToLocaleDateStringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.toLocaleDateStringWorks);
            QUnit.test("DateTimeTests - ToLocaleTimeStringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.toLocaleTimeStringWorks);
            QUnit.test("DateTimeTests - UtcYMDWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.utcYMDWorks);
            QUnit.test("DateTimeTests - UtcYMDHWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.utcYMDHWorks);
            QUnit.test("DateTimeTests - UtcYMDHNWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.utcYMDHNWorks);
            QUnit.test("DateTimeTests - UtcYMDHNSWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.utcYMDHNSWorks);
            QUnit.test("DateTimeTests - UtcYMDHNSUWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.utcYMDHNSUWorks);
            QUnit.test("DateTimeTests - SubtractingDatesWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.subtractingDatesWorks);
            QUnit.test("DateTimeTests - SubtractMethodReturningTimeSpanWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.subtractMethodReturningTimeSpanWorks);
            QUnit.test("DateTimeTests - DateEqualityWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.dateEqualityWorks);
            QUnit.test("DateTimeTests - DateInequalityWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.dateInequalityWorks);
            QUnit.test("DateTimeTests - DateLessThanWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.dateLessThanWorks);
            QUnit.test("DateTimeTests - DateLessEqualWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.dateLessEqualWorks);
            QUnit.test("DateTimeTests - DateGreaterThanWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.dateGreaterThanWorks);
            QUnit.test("DateTimeTests - DateGreaterEqualWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.dateGreaterEqualWorks);
            QUnit.test("DateTimeTests - ConvertingDateToMutableDateReturnsANewButEqualInstance", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.convertingDateToMutableDateReturnsANewButEqualInstance);
            QUnit.test("DateTimeTests - ConvertingMutableDateToDateReturnsANewButEqualInstance", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.convertingMutableDateToDateReturnsANewButEqualInstance);
            QUnit.test("DateTimeTests - GetHashCodeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.getHashCodeWorks);
            QUnit.test("DateTimeTests - EqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.equalsWorks);
            QUnit.test("DateTimeTests - IEquatableEqualsWorks_SPI_1608", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.iEquatableEqualsWorks_SPI_1608);
            QUnit.test("DateTimeTests - StaticEqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.staticEqualsWorks);
            QUnit.test("DateTimeTests - CompareToWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.compareToWorks);
            QUnit.test("DateTimeTests - StaticCompareWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.staticCompareWorks);
            QUnit.test("DateTimeTests - IComparableCompareToWorks_SPI_1609", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.iComparableCompareToWorks_SPI_1609);
            QUnit.test("DateTimeTests - DatePropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.datePropertyWorks);
            QUnit.test("DateTimeTests - DayPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.dayPropertyWorks);
            QUnit.test("DateTimeTests - DayOfWeekPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.dayOfWeekPropertyWorks);
            QUnit.test("DateTimeTests - DayOfYearPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.dayOfYearPropertyWorks);
            QUnit.test("DateTimeTests - HourPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.hourPropertyWorks);
            QUnit.test("DateTimeTests - MillisecondPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.millisecondPropertyWorks);
            QUnit.test("DateTimeTests - MinutePropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.minutePropertyWorks);
            QUnit.test("DateTimeTests - MonthPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.monthPropertyWorks);
            QUnit.test("DateTimeTests - SecondPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.secondPropertyWorks);
            QUnit.test("DateTimeTests - YearPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.yearPropertyWorks);
            QUnit.test("DateTimeTests - AddDaysWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.addDaysWorks);
            QUnit.test("DateTimeTests - AddHoursWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.addHoursWorks);
            QUnit.test("DateTimeTests - AddMillisecondsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.addMillisecondsWorks);
            QUnit.test("DateTimeTests - AddMinutesWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.addMinutesWorks);
            QUnit.test("DateTimeTests - AddMonthsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.addMonthsWorks);
            QUnit.test("DateTimeTests - AddSecondsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.addSecondsWorks);
            QUnit.test("DateTimeTests - AddYearsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.addYearsWorks);
            QUnit.test("DateTimeTests - DaysInMonthWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.daysInMonthWorks);
            QUnit.test("DateTimeTests - IsLeapYearWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests.isLeapYearWorks);
            QUnit.test("DecimalTests - TypePropertiesAreCorrect_SPI_1717", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.typePropertiesAreCorrect_SPI_1717);
            QUnit.test("DecimalTests - DefaultValueIsDecimal0", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.defaultValueIsDecimal0);
            QUnit.test("DecimalTests - CreatingInstanceReturnsZero", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.creatingInstanceReturnsZero);
            QUnit.test("DecimalTests - LiteralDecimalsWork_SPI_1590", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.literalDecimalsWork_SPI_1590);
            QUnit.test("DecimalTests - ConstantsWork_SPI_1590", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.constantsWork_SPI_1590);
            QUnit.test("DecimalTests - DefaultConstructorReturnsZero", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.defaultConstructorReturnsZero);
            QUnit.test("DecimalTests - ConvertingConstructorsWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.convertingConstructorsWork);
            QUnit.test("DecimalTests - FormatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.formatWorks);
            QUnit.test("DecimalTests - ToStringWithFormatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.toStringWithFormatWorks);
            QUnit.test("DecimalTests - ToStringWithFormatAndProviderWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.toStringWithFormatAndProviderWorks);
            QUnit.test("DecimalTests - IFormattableToStringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.iFormattableToStringWorks);
            QUnit.test("DecimalTests - ToStringWithoutRadixWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.toStringWithoutRadixWorks);
            QUnit.test("DecimalTests - ConversionsToDecimalWork_SPI_1580", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.conversionsToDecimalWork_SPI_1580);
            QUnit.test("DecimalTests - NullableConversionsToDecimalWork_SPI_1580_1581_1587", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.nullableConversionsToDecimalWork_SPI_1580_1581_1587);
            QUnit.test("DecimalTests - DecimalToSByte_SPI_1580", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.decimalToSByte_SPI_1580);
            QUnit.test("DecimalTests - DecimalToByte_SPI_1580", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.decimalToByte_SPI_1580);
            QUnit.test("DecimalTests - DecimalToShort_SPI_1580", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.decimalToShort_SPI_1580);
            QUnit.test("DecimalTests - DecimalToUShort_SPI_1580", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.decimalToUShort_SPI_1580);
            QUnit.test("DecimalTests - DecimalToChar", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.decimalToChar);
            QUnit.test("DecimalTests - DecimalToInt_SPI_1580", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.decimalToInt_SPI_1580);
            QUnit.test("DecimalTests - DecimalToUInt_SPI_1580", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.decimalToUInt_SPI_1580);
            QUnit.test("DecimalTests - DecimalToLong_SPI_1578", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.decimalToLong_SPI_1578);
            QUnit.test("DecimalTests - DecimalToULong_SPI_1584_1585", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.decimalToULong_SPI_1584_1585);
            QUnit.test("DecimalTests - DecimalToFloat", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.decimalToFloat);
            QUnit.test("DecimalTests - DecimalToDouble", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.decimalToDouble);
            QUnit.test("DecimalTests - NullableDecimalToSByte", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.nullableDecimalToSByte);
            QUnit.test("DecimalTests - NullableDecimalToByte", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.nullableDecimalToByte);
            QUnit.test("DecimalTests - NullableDecimalToShort", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.nullableDecimalToShort);
            QUnit.test("DecimalTests - NullableDecimalToUShort", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.nullableDecimalToUShort);
            QUnit.test("DecimalTests - NullableDecimalToChar", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.nullableDecimalToChar);
            QUnit.test("DecimalTests - NullableDecimalToInt", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.nullableDecimalToInt);
            QUnit.test("DecimalTests - NullableDecimalToUInt", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.nullableDecimalToUInt);
            QUnit.test("DecimalTests - NullableDecimalToLong_SPI_1582", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.nullableDecimalToLong_SPI_1582);
            QUnit.test("DecimalTests - NullableDecimalToULong_SPI_1582", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.nullableDecimalToULong_SPI_1582);
            QUnit.test("DecimalTests - NullableDecimalToFloat_SPI_1579", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.nullableDecimalToFloat_SPI_1579);
            QUnit.test("DecimalTests - NullableDecimalToDouble_SPI_1579", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.nullableDecimalToDouble_SPI_1579);
            QUnit.test("DecimalTests - OperatorsWork_SPI_1583", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.operatorsWork_SPI_1583);
            QUnit.test("DecimalTests - LiftedOperatorsWork_SPI_1583", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.liftedOperatorsWork_SPI_1583);
            QUnit.test("DecimalTests - AddWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.addWorks);
            QUnit.test("DecimalTests - CeilingWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.ceilingWorks);
            QUnit.test("DecimalTests - DivideWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.divideWorks);
            QUnit.test("DecimalTests - FloorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.floorWorks);
            QUnit.test("DecimalTests - RemainderWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.remainderWorks);
            QUnit.test("DecimalTests - MultiplyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.multiplyWorks);
            QUnit.test("DecimalTests - NegateWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.negateWorks);
            QUnit.test("DecimalTests - ParseWorks_SPI_1586", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.parseWorks_SPI_1586);
            QUnit.test("DecimalTests - TryParseWorks_SPI_1586", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.tryParseWorks_SPI_1586);
            QUnit.test("DecimalTests - RoundWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.roundWorks);
            QUnit.test("DecimalTests - RoundWithDecimalsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.roundWithDecimalsWorks);
            QUnit.test("DecimalTests - RoundWithMidpointRoundingWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.roundWithMidpointRoundingWorks);
            QUnit.test("DecimalTests - RoundWithDecimalsAndMidpointRoundingWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.roundWithDecimalsAndMidpointRoundingWorks);
            QUnit.test("DecimalTests - TruncateWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.truncateWorks);
            QUnit.test("DecimalTests - SubtractWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.subtractWorks);
            QUnit.test("DecimalTests - GetHashCodeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.getHashCodeWorks);
            QUnit.test("DecimalTests - EqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.equalsWorks);
            QUnit.test("DecimalTests - StaticEqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.staticEqualsWorks);
            QUnit.test("DecimalTests - IEquatableEqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.iEquatableEqualsWorks);
            QUnit.test("DecimalTests - CompareToWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.compareToWorks);
            QUnit.test("DecimalTests - StaticCompareWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.staticCompareWorks);
            QUnit.test("DecimalTests - IComparableCompareToWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.iComparableCompareToWorks);
            QUnit.test("DecimalTests - ImplementationTests_SPI_1588_1590_1650", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests.implementationTests_SPI_1588_1590_1650);
            QUnit.test("DoubleTests - TypePropertiesAreCorrect_SPI_1717", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests.typePropertiesAreCorrect_SPI_1717);
            QUnit.test("DoubleTests - DefaultValueIs0", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests.defaultValueIs0);
            QUnit.test("DoubleTests - CreatingInstanceReturnsZero", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests.creatingInstanceReturnsZero);
            QUnit.test("DoubleTests - ConstantsWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests.constantsWork);
            QUnit.test("DoubleTests - DefaultConstructorReturnsZero", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests.defaultConstructorReturnsZero);
            QUnit.test("DoubleTests - FormatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests.formatWorks);
            QUnit.test("DoubleTests - ToStringWithFormatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests.toStringWithFormatWorks);
            QUnit.test("DoubleTests - ToStringWithFormatAndProviderWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests.toStringWithFormatAndProviderWorks);
            QUnit.test("DoubleTests - IFormattableToStringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests.iFormattableToStringWorks);
            QUnit.test("DoubleTests - ToStringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests.toStringWorks);
            QUnit.test("DoubleTests - ToExponentialWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests.toExponentialWorks);
            QUnit.test("DoubleTests - ToExponentialWithFractionalDigitsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests.toExponentialWithFractionalDigitsWorks);
            QUnit.test("DoubleTests - ToFixed", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests.toFixed);
            QUnit.test("DoubleTests - ToFixedWithFractionalDigitsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests.toFixedWithFractionalDigitsWorks);
            QUnit.test("DoubleTests - ToPrecisionWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests.toPrecisionWorks);
            QUnit.test("DoubleTests - ToPrecisionWithPrecisionWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests.toPrecisionWithPrecisionWorks);
            QUnit.test("DoubleTests - IsPositiveInfinityWorks_SPI_1600", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests.isPositiveInfinityWorks_SPI_1600);
            QUnit.test("DoubleTests - IsNegativeInfinityWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests.isNegativeInfinityWorks);
            QUnit.test("DoubleTests - IsInfinityWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests.isInfinityWorks);
            QUnit.test("DoubleTests - IsFiniteWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests.isFiniteWorks);
            QUnit.test("DoubleTests - IsNaNWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests.isNaNWorks);
            QUnit.test("DoubleTests - GetHashCodeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests.getHashCodeWorks);
            QUnit.test("DoubleTests - EqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests.equalsWorks);
            QUnit.test("DoubleTests - IEquatableEqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests.iEquatableEqualsWorks);
            QUnit.test("DoubleTests - CompareToWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests.compareToWorks);
            QUnit.test("DoubleTests - IComparableCompareToWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests.iComparableCompareToWorks);
            QUnit.test("EnumTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_EnumTests.typePropertiesAreCorrect);
            QUnit.test("EnumTests - DefaultValueOfEnumClassIsNull", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_EnumTests.defaultValueOfEnumClassIsNull);
            QUnit.test("EnumTests - DefaultValueOfEnumTypeIsZero_SPI_1595", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_EnumTests.defaultValueOfEnumTypeIsZero_SPI_1595);
            QUnit.test("EnumTests - DefaultConstructorOfEnumTypeReturnsZero_SPI_1595", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_EnumTests.defaultConstructorOfEnumTypeReturnsZero_SPI_1595);
            QUnit.test("EnumTests - CreatingInstanceOfEnumTypeReturnsZero_SPI_1595", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_EnumTests.creatingInstanceOfEnumTypeReturnsZero_SPI_1595);
            QUnit.test("EnumTests - DefaultExpressionWithEnumReturnsZero_SPI_1595", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_EnumTests.defaultExpressionWithEnumReturnsZero_SPI_1595);
            QUnit.test("EnumTests - ParseWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_EnumTests.parseWorks);
            QUnit.test("EnumTests - StaticToStringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_EnumTests.staticToStringWorks);
            QUnit.test("EnumTests - GetHashCodeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_EnumTests.getHashCodeWorks);
            QUnit.test("EnumTests - EqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_EnumTests.equalsWorks);
            QUnit.test("EnumTests - ConversionsToEnumAreTreatedAsConversionsToTheUnderlyingType_SPI_1596", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_EnumTests.conversionsToEnumAreTreatedAsConversionsToTheUnderlyingType_SPI_1596);
            QUnit.test("EnumTests - GetValuesWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_EnumTests.getValuesWorks);
            QUnit.test("Int16Tests - TypePropertiesAreCorrect_SPI_1717", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests.typePropertiesAreCorrect_SPI_1717);
            QUnit.test("Int16Tests - CastsWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests.castsWork);
            QUnit.test("Int16Tests - DefaultValueIs0", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests.defaultValueIs0);
            QUnit.test("Int16Tests - DefaultConstructorReturnsZero", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests.defaultConstructorReturnsZero);
            QUnit.test("Int16Tests - CreatingInstanceReturnsZero", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests.creatingInstanceReturnsZero);
            QUnit.test("Int16Tests - ConstantsWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests.constantsWork);
            QUnit.test("Int16Tests - FormatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests.formatWorks);
            QUnit.test("Int16Tests - ToStringWithFormatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests.toStringWithFormatWorks);
            QUnit.test("Int16Tests - ToStringWithFormatAndProviderWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests.toStringWithFormatAndProviderWorks);
            QUnit.test("Int16Tests - IFormattableToStringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests.iFormattableToStringWorks);
            QUnit.test("Int16Tests - TryParseWorks_SPI_1592", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests.tryParseWorks_SPI_1592);
            QUnit.test("Int16Tests - ParseWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests.parseWorks);
            QUnit.test("Int16Tests - ToStringWithoutRadixWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests.toStringWithoutRadixWorks);
            QUnit.test("Int16Tests - ToStringWithRadixWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests.toStringWithRadixWorks);
            QUnit.test("Int16Tests - GetHashCodeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests.getHashCodeWorks);
            QUnit.test("Int16Tests - EqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests.equalsWorks);
            QUnit.test("Int16Tests - IEquatableEqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests.iEquatableEqualsWorks);
            QUnit.test("Int16Tests - CompareToWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests.compareToWorks);
            QUnit.test("Int16Tests - IComparableCompareToWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests.iComparableCompareToWorks);
            QUnit.test("Int32Tests - TypePropertiesAreCorrect_SPI_1717", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests.typePropertiesAreCorrect_SPI_1717);
            QUnit.test("Int32Tests - CastsWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests.castsWork);
            QUnit.test("Int32Tests - TypeIsWorksForInt32", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests.typeIsWorksForInt32);
            QUnit.test("Int32Tests - TypeAsWorksForInt32", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests.typeAsWorksForInt32);
            QUnit.test("Int32Tests - UnboxingWorksForInt32", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests.unboxingWorksForInt32);
            QUnit.test("Int32Tests - DefaultValueIs0", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests.defaultValueIs0);
            QUnit.test("Int32Tests - DefaultConstructorReturnsZero", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests.defaultConstructorReturnsZero);
            QUnit.test("Int32Tests - CreatingInstanceReturnsZero", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests.creatingInstanceReturnsZero);
            QUnit.test("Int32Tests - ConstantsWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests.constantsWork);
            QUnit.test("Int32Tests - FormatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests.formatWorks);
            QUnit.test("Int32Tests - ToStringWithFormatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests.toStringWithFormatWorks);
            QUnit.test("Int32Tests - ToStringWithFormatAndProviderWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests.toStringWithFormatAndProviderWorks);
            QUnit.test("Int32Tests - IFormattableToStringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests.iFormattableToStringWorks);
            QUnit.test("Int32Tests - TryParseWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests.tryParseWorks);
            QUnit.test("Int32Tests - ParseWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests.parseWorks);
            QUnit.test("Int32Tests - ToStringWithoutRadixWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests.toStringWithoutRadixWorks);
            QUnit.test("Int32Tests - ToStringWithRadixWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests.toStringWithRadixWorks);
            QUnit.test("Int32Tests - GetHashCodeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests.getHashCodeWorks);
            QUnit.test("Int32Tests - EqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests.equalsWorks);
            QUnit.test("Int32Tests - IEquatableEqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests.iEquatableEqualsWorks);
            QUnit.test("Int32Tests - CompareToWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests.compareToWorks);
            QUnit.test("Int32Tests - IComparableCompareToWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests.iComparableCompareToWorks);
            QUnit.test("Int32Tests - IntegerDivisionWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests.integerDivisionWorks);
            QUnit.test("Int32Tests - IntegerModuloWorks_SPI_1602", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests.integerModuloWorks_SPI_1602);
            QUnit.test("Int32Tests - IntegerDivisionByZeroThrowsDivideByZeroException", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests.integerDivisionByZeroThrowsDivideByZeroException);
            QUnit.test("Int32Tests - DoublesAreTruncatedWhenConvertedToIntegers", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests.doublesAreTruncatedWhenConvertedToIntegers);
            QUnit.test("Int64Tests - TypePropertiesAreCorrect_SPI_1717", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests.typePropertiesAreCorrect_SPI_1717);
            QUnit.test("Int64Tests - CastsWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests.castsWork);
            QUnit.test("Int64Tests - DefaultValueIs0", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests.defaultValueIs0);
            QUnit.test("Int64Tests - DefaultConstructorReturnsZero", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests.defaultConstructorReturnsZero);
            QUnit.test("Int64Tests - CreatingInstanceReturnsZero", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests.creatingInstanceReturnsZero);
            QUnit.test("Int64Tests - FormatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests.formatWorks);
            QUnit.test("Int64Tests - ToStringWithFormatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests.toStringWithFormatWorks);
            QUnit.test("Int64Tests - ToStringWithFormatAndProviderWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests.toStringWithFormatAndProviderWorks);
            QUnit.test("Int64Tests - IFormattableToStringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests.iFormattableToStringWorks);
            QUnit.test("Int64Tests - TryParseWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests.tryParseWorks);
            QUnit.test("Int64Tests - ParseWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests.parseWorks);
            QUnit.test("Int64Tests - CastingOfLargeDoublesToInt64Works", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests.castingOfLargeDoublesToInt64Works);
            QUnit.test("Int64Tests - DivisionOfLargeInt64Works", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests.divisionOfLargeInt64Works);
            QUnit.test("Int64Tests - ToStringWithoutRadixWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests.toStringWithoutRadixWorks);
            QUnit.test("Int64Tests - ToStringWithRadixWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests.toStringWithRadixWorks);
            QUnit.test("Int64Tests - GetHashCodeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests.getHashCodeWorks);
            QUnit.test("Int64Tests - EqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests.equalsWorks);
            QUnit.test("Int64Tests - IEquatableEqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests.iEquatableEqualsWorks);
            QUnit.test("Int64Tests - CompareToWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests.compareToWorks);
            QUnit.test("Int64Tests - IComparableCompareToWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests.iComparableCompareToWorks);
            QUnit.test("ObjectTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ObjectTests.typePropertiesAreCorrect);
            QUnit.test("ObjectTests - CanGetHashCodeForObject", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ObjectTests.canGetHashCodeForObject);
            QUnit.test("ObjectTests - RepeatedCallsToGetHashCodeReturnsSameValue", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ObjectTests.repeatedCallsToGetHashCodeReturnsSameValue);
            QUnit.test("ObjectTests - ObjectIsEqualToItself", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ObjectTests.objectIsEqualToItself);
            QUnit.test("ObjectTests - ObjectIsNotEqualToOtherObject", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ObjectTests.objectIsNotEqualToOtherObject);
            QUnit.test("ObjectTests - StaticEqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ObjectTests.staticEqualsWorks);
            QUnit.test("ObjectTests - ReferenceEqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ObjectTests.referenceEqualsWorks);
            QUnit.test("ObjectTests - ToStringOverride", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ObjectTests.toStringOverride);
            QUnit.test("SByteTests - TypePropertiesAreCorrect_SPI_1717", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests.typePropertiesAreCorrect_SPI_1717);
            QUnit.test("SByteTests - CastsWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests.castsWork);
            QUnit.test("SByteTests - DefaultValueIs0", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests.defaultValueIs0);
            QUnit.test("SByteTests - DefaultConstructorReturnsZero", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests.defaultConstructorReturnsZero);
            QUnit.test("SByteTests - CreatingInstanceReturnsZero", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests.creatingInstanceReturnsZero);
            QUnit.test("SByteTests - ConstantsWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests.constantsWork);
            QUnit.test("SByteTests - FormatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests.formatWorks);
            QUnit.test("SByteTests - ToStringWithFormatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests.toStringWithFormatWorks);
            QUnit.test("SByteTests - ToStringWithFormatAndProviderWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests.toStringWithFormatAndProviderWorks);
            QUnit.test("SByteTests - IFormattableToStringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests.iFormattableToStringWorks);
            QUnit.test("SByteTests - TryParseWorks_SPI_1592", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests.tryParseWorks_SPI_1592);
            QUnit.test("SByteTests - ParseWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests.parseWorks);
            QUnit.test("SByteTests - ToStringWithoutRadixWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests.toStringWithoutRadixWorks);
            QUnit.test("SByteTests - ToStringWithRadixWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests.toStringWithRadixWorks);
            QUnit.test("SByteTests - GetHashCodeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests.getHashCodeWorks);
            QUnit.test("SByteTests - EqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests.equalsWorks);
            QUnit.test("SByteTests - IEquatableEqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests.iEquatableEqualsWorks);
            QUnit.test("SByteTests - CompareToWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests.compareToWorks);
            QUnit.test("SByteTests - IComparableCompareToWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests.iComparableCompareToWorks);
            QUnit.test("SingleTests - TypePropertiesAreCorrect_SPI_1717", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests.typePropertiesAreCorrect_SPI_1717);
            QUnit.test("SingleTests - DefaultValueIs0", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests.defaultValueIs0);
            QUnit.test("SingleTests - CreatingInstanceReturnsZero", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests.creatingInstanceReturnsZero);
            QUnit.test("SingleTests - ConstantsWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests.constantsWork);
            QUnit.test("SingleTests - DefaultConstructorReturnsZero", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests.defaultConstructorReturnsZero);
            QUnit.test("SingleTests - FormatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests.formatWorks);
            QUnit.test("SingleTests - ToStringWithFormatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests.toStringWithFormatWorks);
            QUnit.test("SingleTests - ToStringWithFormatAndProviderWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests.toStringWithFormatAndProviderWorks);
            QUnit.test("SingleTests - IFormattableToStringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests.iFormattableToStringWorks);
            QUnit.test("SingleTests - ToStringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests.toStringWorks);
            QUnit.test("SingleTests - ToExponentialWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests.toExponentialWorks);
            QUnit.test("SingleTests - ToExponentialWithFractionalDigitsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests.toExponentialWithFractionalDigitsWorks);
            QUnit.test("SingleTests - ToFixed", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests.toFixed);
            QUnit.test("SingleTests - ToFixedWithFractionalDigitsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests.toFixedWithFractionalDigitsWorks);
            QUnit.test("SingleTests - ToPrecisionWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests.toPrecisionWorks);
            QUnit.test("SingleTests - ToPrecisionWithPrecisionWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests.toPrecisionWithPrecisionWorks);
            QUnit.test("SingleTests - IsPositiveInfinityWorks_SPI_1600", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests.isPositiveInfinityWorks_SPI_1600);
            QUnit.test("SingleTests - IsNegativeInfinityWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests.isNegativeInfinityWorks);
            QUnit.test("SingleTests - IsInfinityWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests.isInfinityWorks);
            QUnit.test("SingleTests - IsFiniteWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests.isFiniteWorks);
            QUnit.test("SingleTests - IsNaNWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests.isNaNWorks);
            QUnit.test("SingleTests - GetHashCodeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests.getHashCodeWorks);
            QUnit.test("SingleTests - EqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests.equalsWorks);
            QUnit.test("SingleTests - IEquatableEqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests.iEquatableEqualsWorks);
            QUnit.test("SingleTests - CompareToWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests.compareToWorks);
            QUnit.test("SingleTests - IComparableCompareToWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests.iComparableCompareToWorks);
            QUnit.test("StringTests - TypePropertiesAreCorrect_SPI_1597", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.typePropertiesAreCorrect_SPI_1597);
            QUnit.test("StringTests - DefaultConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.defaultConstructorWorks);
            QUnit.test("StringTests - CharAndCountConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.charAndCountConstructorWorks);
            QUnit.test("StringTests - CharArrayConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.charArrayConstructorWorks);
            QUnit.test("StringTests - CharArrayWithStartIndexAndLengthConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.charArrayWithStartIndexAndLengthConstructorWorks);
            QUnit.test("StringTests - EmptyFieldWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.emptyFieldWorks);
            QUnit.test("StringTests - LengthPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.lengthPropertyWorks);
            QUnit.test("StringTests - CharAtWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.charAtWorks);
            QUnit.test("StringTests - CharCodeAtWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.charCodeAtWorks);
            QUnit.test("StringTests - CompareToWithIgnoreCaseArgWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.compareToWithIgnoreCaseArgWorks);
            QUnit.test("StringTests - CompareWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.compareWorks);
            QUnit.test("StringTests - CompareWithIgnoreCaseArgWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.compareWithIgnoreCaseArgWorks);
            QUnit.test("StringTests - ConcatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.concatWorks);
            QUnit.test("StringTests - ConcatWithObjectsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.concatWithObjectsWorks);
            QUnit.test("StringTests - EndsWithStringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.endsWithStringWorks);
            QUnit.test("StringTests - StaticEqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.staticEqualsWorks);
            QUnit.test("StringTests - FormatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.formatWorks);
            QUnit.test("StringTests - FormatWorksWithIFormattable_SPI_1598", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.formatWorksWithIFormattable_SPI_1598);
            QUnit.test("StringTests - FormatWorksWithIFormattableAndFormatProvider_SPI_1598", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.formatWorksWithIFormattableAndFormatProvider_SPI_1598);
            QUnit.test("StringTests - FormatCanUseEscapedBraces", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.formatCanUseEscapedBraces);
            QUnit.test("StringTests - FromCharCodeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.fromCharCodeWorks);
            QUnit.test("StringTests - IndexOfCharWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.indexOfCharWorks);
            QUnit.test("StringTests - IndexOfStringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.indexOfStringWorks);
            QUnit.test("StringTests - IndexOfCharWithStartIndexWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.indexOfCharWithStartIndexWorks);
            QUnit.test("StringTests - IndexOfCharWithStartIndexAndCountWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.indexOfCharWithStartIndexAndCountWorks);
            QUnit.test("StringTests - IndexOfStringWithStartIndexWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.indexOfStringWithStartIndexWorks);
            QUnit.test("StringTests - IndexOfStringWithStartIndexAndCountWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.indexOfStringWithStartIndexAndCountWorks);
            QUnit.test("StringTests - IndexOfAnyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.indexOfAnyWorks);
            QUnit.test("StringTests - IndexOfAnyWithStartIndexWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.indexOfAnyWithStartIndexWorks);
            QUnit.test("StringTests - IndexOfAnyWithStartIndexAndCountWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.indexOfAnyWithStartIndexAndCountWorks);
            QUnit.test("StringTests - InsertWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.insertWorks);
            QUnit.test("StringTests - IsNullOrEmptyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.isNullOrEmptyWorks);
            QUnit.test("StringTests - LastIndexOfCharWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.lastIndexOfCharWorks);
            QUnit.test("StringTests - LastIndexOfStringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.lastIndexOfStringWorks);
            QUnit.test("StringTests - LastIndexOfCharWithStartIndexWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.lastIndexOfCharWithStartIndexWorks);
            QUnit.test("StringTests - LastIndexOfStringWithStartIndexWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.lastIndexOfStringWithStartIndexWorks);
            QUnit.test("StringTests - LastIndexOfCharWithStartIndexAndCountWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.lastIndexOfCharWithStartIndexAndCountWorks);
            QUnit.test("StringTests - LastIndexOfStringWithStartIndexAndCountWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.lastIndexOfStringWithStartIndexAndCountWorks);
            QUnit.test("StringTests - LastIndexOfAnyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.lastIndexOfAnyWorks);
            QUnit.test("StringTests - LastIndexOfAnyWithStartIndexWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.lastIndexOfAnyWithStartIndexWorks);
            QUnit.test("StringTests - LastIndexOfAnyWithStartIndexAndCountWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.lastIndexOfAnyWithStartIndexAndCountWorks);
            QUnit.test("StringTests - LocaleCompareWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.localeCompareWorks);
            QUnit.test("StringTests - PadLeftWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.padLeftWorks);
            QUnit.test("StringTests - PadLeftWithCharWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.padLeftWithCharWorks);
            QUnit.test("StringTests - PadRightWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.padRightWorks);
            QUnit.test("StringTests - PadRightWithCharWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.padRightWithCharWorks);
            QUnit.test("StringTests - RemoveWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.removeWorks);
            QUnit.test("StringTests - RemoveWithCountWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.removeWithCountWorks);
            QUnit.test("StringTests - ReplaceWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.replaceWorks);
            QUnit.test("StringTests - ReplaceCharWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.replaceCharWorks);
            QUnit.test("StringTests - ReplaceRegexWithReplaceTextWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.replaceRegexWithReplaceTextWorks);
            QUnit.test("StringTests - ReplaceRegexWithReplaceCallbackWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.replaceRegexWithReplaceCallbackWorks);
            QUnit.test("StringTests - SearchWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.searchWorks);
            QUnit.test("StringTests - SplitWithStringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.splitWithStringWorks);
            QUnit.test("StringTests - SplitWithCharWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.splitWithCharWorks);
            QUnit.test("StringTests - SplitWithCharsAndLimitWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.splitWithCharsAndLimitWorks);
            QUnit.test("StringTests - SplitWithCharsAndStringSplitOptionsAndLimitWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.splitWithCharsAndStringSplitOptionsAndLimitWorks);
            QUnit.test("StringTests - SplitWithRegexWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.splitWithRegexWorks);
            QUnit.test("StringTests - SomeNetSplitTests", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.someNetSplitTests);
            QUnit.test("StringTests - SplitWithCharsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.splitWithCharsWorks);
            QUnit.test("StringTests - SplitWithStringsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.splitWithStringsWorks);
            QUnit.test("StringTests - SplitWithStringsAndLimitWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.splitWithStringsAndLimitWorks);
            QUnit.test("StringTests - StartsWithStringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.startsWithStringWorks);
            QUnit.test("StringTests - SubstrWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.substrWorks);
            QUnit.test("StringTests - SubstrWithLengthWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.substrWithLengthWorks);
            QUnit.test("StringTests - SubstringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.substringWorks);
            QUnit.test("StringTests - SubstringWithLengthWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.substringWithLengthWorks);
            QUnit.test("StringTests - JsSubstringWithEndIndexWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.jsSubstringWithEndIndexWorks);
            QUnit.test("StringTests - ToLowerWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.toLowerWorks);
            QUnit.test("StringTests - ToUpperWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.toUpperWorks);
            QUnit.test("StringTests - TrimWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.trimWorks);
            QUnit.test("StringTests - TrimCharsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.trimCharsWorks);
            QUnit.test("StringTests - TrimStartCharsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.trimStartCharsWorks);
            QUnit.test("StringTests - TrimEndCharsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.trimEndCharsWorks);
            QUnit.test("StringTests - TrimStartWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.trimStartWorks);
            QUnit.test("StringTests - TrimEndWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.trimEndWorks);
            QUnit.test("StringTests - StringEqualityWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.stringEqualityWorks);
            QUnit.test("StringTests - StringInequalityWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.stringInequalityWorks);
            QUnit.test("StringTests - StringIndexingWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.stringIndexingWorks);
            QUnit.test("StringTests - GetHashCodeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.getHashCodeWorks);
            QUnit.test("StringTests - InstanceEqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.instanceEqualsWorks);
            QUnit.test("StringTests - IEquatableEqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.iEquatableEqualsWorks);
            QUnit.test("StringTests - CompareToWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.compareToWorks);
            QUnit.test("StringTests - IComparableCompareToWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.iComparableCompareToWorks);
            QUnit.test("StringTests - JoinWorks_SPI_1599", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.joinWorks_SPI_1599);
            QUnit.test("StringTests - ContainsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.containsWorks);
            QUnit.test("StringTests - ToCharArrayWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests.toCharArrayWorks);
            QUnit.test("TimeSpanTests - TypePropertiesAreCorrect_SPI_1717", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests.typePropertiesAreCorrect_SPI_1717);
            QUnit.test("TimeSpanTests - DefaultConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests.defaultConstructorWorks);
            QUnit.test("TimeSpanTests - DefaultValueWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests.defaultValueWorks);
            QUnit.test("TimeSpanTests - ZeroWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests.zeroWorks);
            QUnit.test("TimeSpanTests - CreatingInstanceReturnsTimeSpanWithZeroValue", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests.creatingInstanceReturnsTimeSpanWithZeroValue);
            QUnit.test("TimeSpanTests - ParameterConstructorsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests.parameterConstructorsWorks);
            QUnit.test("TimeSpanTests - FactoryMethodsWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests.factoryMethodsWork);
            QUnit.test("TimeSpanTests - PropertiesWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests.propertiesWork);
            QUnit.test("TimeSpanTests - CompareToWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests.compareToWorks);
            QUnit.test("TimeSpanTests - CompareWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests.compareWorks);
            QUnit.test("TimeSpanTests - StaticEqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests.staticEqualsWorks);
            QUnit.test("TimeSpanTests - EqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests.equalsWorks);
            QUnit.test("TimeSpanTests - IEquatableEqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests.iEquatableEqualsWorks);
            QUnit.test("TimeSpanTests - ToStringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests.toStringWorks);
            QUnit.test("TimeSpanTests - AddWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests.addWorks);
            QUnit.test("TimeSpanTests - SubtractWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests.subtractWorks);
            QUnit.test("TimeSpanTests - DurationWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests.durationWorks);
            QUnit.test("TimeSpanTests - NegateWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests.negateWorks);
            QUnit.test("TimeSpanTests - ComparisonOperatorsWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests.comparisonOperatorsWork);
            QUnit.test("TimeSpanTests - AdditionOperatorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests.additionOperatorWorks);
            QUnit.test("TimeSpanTests - SubtractionOperatorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests.subtractionOperatorWorks);
            QUnit.test("TimeSpanTests - UnaryPlusWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests.unaryPlusWorks);
            QUnit.test("TimeSpanTests - UnaryMinusWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests.unaryMinusWorks);
            QUnit.test("TupleTests - Tuple1Works", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TupleTests.tuple1Works);
            QUnit.test("TupleTests - Tuple2Works", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TupleTests.tuple2Works);
            QUnit.test("TupleTests - Tuple3Works", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TupleTests.tuple3Works);
            QUnit.test("TupleTests - Tuple4Works", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TupleTests.tuple4Works);
            QUnit.test("TupleTests - Tuple5Works", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TupleTests.tuple5Works);
            QUnit.test("TupleTests - Tuple6Works", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TupleTests.tuple6Works);
            QUnit.test("TupleTests - Tuple7Works", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TupleTests.tuple7Works);
            QUnit.test("TupleTests - Tuple8Works", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TupleTests.tuple8Works);
            QUnit.test("UInt16Tests - TypePropertiesAreCorrect_SPI_1717", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests.typePropertiesAreCorrect_SPI_1717);
            QUnit.test("UInt16Tests - CastsWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests.castsWork);
            QUnit.test("UInt16Tests - DefaultValueIs0", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests.defaultValueIs0);
            QUnit.test("UInt16Tests - DefaultConstructorReturnsZero", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests.defaultConstructorReturnsZero);
            QUnit.test("UInt16Tests - CreatingInstanceReturnsZero", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests.creatingInstanceReturnsZero);
            QUnit.test("UInt16Tests - ConstantsWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests.constantsWork);
            QUnit.test("UInt16Tests - FormatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests.formatWorks);
            QUnit.test("UInt16Tests - ToStringWithFormatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests.toStringWithFormatWorks);
            QUnit.test("UInt16Tests - ToStringWithFormatAndProviderWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests.toStringWithFormatAndProviderWorks);
            QUnit.test("UInt16Tests - IFormattableToStringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests.iFormattableToStringWorks);
            QUnit.test("UInt16Tests - TryParseWorks_SPI_1592", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests.tryParseWorks_SPI_1592);
            QUnit.test("UInt16Tests - ParseWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests.parseWorks);
            QUnit.test("UInt16Tests - ToStringWithoutRadixWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests.toStringWithoutRadixWorks);
            QUnit.test("UInt16Tests - ToStringWithRadixWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests.toStringWithRadixWorks);
            QUnit.test("UInt16Tests - GetHashCodeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests.getHashCodeWorks);
            QUnit.test("UInt16Tests - EqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests.equalsWorks);
            QUnit.test("UInt16Tests - IEquatableEqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests.iEquatableEqualsWorks);
            QUnit.test("UInt16Tests - CompareToWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests.compareToWorks);
            QUnit.test("UInt16Tests - IComparableCompareToWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests.iComparableCompareToWorks);
            QUnit.test("UInt32Tests - TypePropertiesAreCorrect_SPI_1717", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests.typePropertiesAreCorrect_SPI_1717);
            QUnit.test("UInt32Tests - CastsWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests.castsWork);
            QUnit.test("UInt32Tests - DefaultValueIs0", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests.defaultValueIs0);
            QUnit.test("UInt32Tests - DefaultConstructorReturnsZero", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests.defaultConstructorReturnsZero);
            QUnit.test("UInt32Tests - CreatingInstanceReturnsZero", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests.creatingInstanceReturnsZero);
            QUnit.test("UInt32Tests - ConstantsWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests.constantsWork);
            QUnit.test("UInt32Tests - FormatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests.formatWorks);
            QUnit.test("UInt32Tests - ToStringWithFormatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests.toStringWithFormatWorks);
            QUnit.test("UInt32Tests - ToStringWithFormatAndProviderWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests.toStringWithFormatAndProviderWorks);
            QUnit.test("UInt32Tests - IFormattableToStringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests.iFormattableToStringWorks);
            QUnit.test("UInt32Tests - TryParseWorks_SPI_1592", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests.tryParseWorks_SPI_1592);
            QUnit.test("UInt32Tests - ParseWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests.parseWorks);
            QUnit.test("UInt32Tests - ToStringWithoutRadixWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests.toStringWithoutRadixWorks);
            QUnit.test("UInt32Tests - ToStringWithRadixWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests.toStringWithRadixWorks);
            QUnit.test("UInt32Tests - GetHashCodeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests.getHashCodeWorks);
            QUnit.test("UInt32Tests - EqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests.equalsWorks);
            QUnit.test("UInt32Tests - IEquatableEqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests.iEquatableEqualsWorks);
            QUnit.test("UInt32Tests - CompareToWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests.compareToWorks);
            QUnit.test("UInt32Tests - IComparableCompareToWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests.iComparableCompareToWorks);
            QUnit.test("UInt64Tests - TypePropertiesAreCorrect_SPI_1717", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests.typePropertiesAreCorrect_SPI_1717);
            QUnit.test("UInt64Tests - CastsWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests.castsWork);
            QUnit.test("UInt64Tests - DefaultValueIs0", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests.defaultValueIs0);
            QUnit.test("UInt64Tests - DefaultConstructorReturnsZero", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests.defaultConstructorReturnsZero);
            QUnit.test("UInt64Tests - CreatingInstanceReturnsZero", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests.creatingInstanceReturnsZero);
            QUnit.test("UInt64Tests - ConstantsWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests.constantsWork);
            QUnit.test("UInt64Tests - FormatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests.formatWorks);
            QUnit.test("UInt64Tests - ToStringWithFormatWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests.toStringWithFormatWorks);
            QUnit.test("UInt64Tests - ToStringWithFormatAndProviderWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests.toStringWithFormatAndProviderWorks);
            QUnit.test("UInt64Tests - IFormattableToStringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests.iFormattableToStringWorks);
            QUnit.test("UInt64Tests - CastingOfLargeValuesToUInt64Works_SPI_1591", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests.castingOfLargeValuesToUInt64Works_SPI_1591);
            QUnit.test("UInt64Tests - DivisionOfLargeUInt64Works", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests.divisionOfLargeUInt64Works);
            QUnit.test("UInt64Tests - TryParseWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests.tryParseWorks);
            QUnit.test("UInt64Tests - ParseWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests.parseWorks);
            QUnit.test("UInt64Tests - ToStringWithoutRadixWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests.toStringWithoutRadixWorks);
            QUnit.test("UInt64Tests - ToStringWithRadixWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests.toStringWithRadixWorks);
            QUnit.test("UInt64Tests - GetHashCodeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests.getHashCodeWorks);
            QUnit.test("UInt64Tests - EqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests.equalsWorks);
            QUnit.test("UInt64Tests - IEquatableEqualsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests.iEquatableEqualsWorks);
            QUnit.test("UInt64Tests - CompareToWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests.compareToWorks);
            QUnit.test("UInt64Tests - IComparableCompareToWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests.iComparableCompareToWorks);
            QUnit.test("StopwatchTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_StopwatchTests.typePropertiesAreCorrect);
            QUnit.test("StopwatchTests - DefaultConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_StopwatchTests.defaultConstructorWorks);
            QUnit.test("StopwatchTests - ConstantsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_StopwatchTests.constantsWorks);
            QUnit.test("StopwatchTests - StartNewWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_StopwatchTests.startNewWorks);
            QUnit.test("StopwatchTests - StartAndStopWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_StopwatchTests.startAndStopWork);
            QUnit.test("StopwatchTests - ElapsedWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_StopwatchTests.elapsedWorks);
            QUnit.test("StopwatchTests - GetTimestampWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_StopwatchTests.getTimestampWorks);
            QUnit.test("RegexTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_RegularExpressions_RegexTests.typePropertiesAreCorrect);
            QUnit.test("RegexTests - StringOnlyConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_RegularExpressions_RegexTests.stringOnlyConstructorWorks);
            QUnit.test("RegexTests - ConstructorWithFlagsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_RegularExpressions_RegexTests.constructorWithFlagsWorks);
            QUnit.test("RegexTests - GlobalFlagWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_RegularExpressions_RegexTests.globalFlagWorks);
            QUnit.test("RegexTests - IgnoreCaseFlagWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_RegularExpressions_RegexTests.ignoreCaseFlagWorks);
            QUnit.test("RegexTests - MultilineFlagWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_RegularExpressions_RegexTests.multilineFlagWorks);
            QUnit.test("RegexTests - PatternPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_RegularExpressions_RegexTests.patternPropertyWorks);
            QUnit.test("RegexTests - SourcePropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_RegularExpressions_RegexTests.sourcePropertyWorks);
            QUnit.test("RegexTests - ExecWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_RegularExpressions_RegexTests.execWorks);
            QUnit.test("RegexTests - LastIndexWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_RegularExpressions_RegexTests.lastIndexWorks);
            QUnit.test("RegexTests - TestWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_RegularExpressions_RegexTests.testWorks);
            QUnit.test("RegexTests - EscapeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_RegularExpressions_RegexTests.escapeWorks);
            QUnit.test("StringBuilderTests - TypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests.typePropertiesAreCorrect);
            QUnit.test("StringBuilderTests - DefaultConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests.defaultConstructorWorks);
            QUnit.test("StringBuilderTests - ConstructorWithCapacityWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests.constructorWithCapacityWorks);
            QUnit.test("StringBuilderTests - InitialTextConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests.initialTextConstructorWorks);
            QUnit.test("StringBuilderTests - InitialTextConstructorWithCapacityWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests.initialTextConstructorWithCapacityWorks);
            QUnit.test("StringBuilderTests - AppendBoolWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests.appendBoolWorks);
            QUnit.test("StringBuilderTests - AppendCharWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests.appendCharWorks);
            QUnit.test("StringBuilderTests - AppendIntWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests.appendIntWorks);
            QUnit.test("StringBuilderTests - AppendDoubleWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests.appendDoubleWorks);
            QUnit.test("StringBuilderTests - AppendObjectWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests.appendObjectWorks);
            QUnit.test("StringBuilderTests - AppendStringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests.appendStringWorks);
            QUnit.test("StringBuilderTests - AppendLineWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests.appendLineWorks);
            QUnit.test("StringBuilderTests - AppendLineBoolWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests.appendLineBoolWorks);
            QUnit.test("StringBuilderTests - AppendLineCharWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests.appendLineCharWorks);
            QUnit.test("StringBuilderTests - AppendLineIntWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests.appendLineIntWorks);
            QUnit.test("StringBuilderTests - AppendLineDoubleWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests.appendLineDoubleWorks);
            QUnit.test("StringBuilderTests - AppendLineObjectWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests.appendLineObjectWorks);
            QUnit.test("StringBuilderTests - AppendLineStringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests.appendLineStringWorks);
            QUnit.test("StringBuilderTests - ClearWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests.clearWorks);
            QUnit.test("StringBuilderTests - ToStringWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests.toStringWorks);
            QUnit.test("StringBuilderTests - LengthPropertyWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests.lengthPropertyWorks);
            QUnit.test("AsyncTests - AsyncVoid", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_AsyncTests.asyncVoid);
            QUnit.test("AsyncTests - AsyncTask", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_AsyncTests.asyncTask);
            QUnit.test("AsyncTests - AsyncTaskBodyThrowsException", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_AsyncTests.asyncTaskBodyThrowsException);
            QUnit.test("AsyncTests - AwaitTaskThatFaults", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_AsyncTests.awaitTaskThatFaults);
            QUnit.test("AsyncTests - AggregateExceptionsAreUnwrappedWhenAwaitingTask", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_AsyncTests.aggregateExceptionsAreUnwrappedWhenAwaitingTask);
            QUnit.test("AsyncTests - AsyncTaskThatReturnsValue", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_AsyncTests.asyncTaskThatReturnsValue);
            QUnit.test("CancellationTokenTests - TypePropertiesForCancellationTokenSourceAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests.typePropertiesForCancellationTokenSourceAreCorrect);
            QUnit.test("CancellationTokenTests - TypePropertiesForCancellationTokenAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests.typePropertiesForCancellationTokenAreCorrect);
            QUnit.test("CancellationTokenTests - TypePropertiesForCancellationTokenRegistrationAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests.typePropertiesForCancellationTokenRegistrationAreCorrect);
            QUnit.test("CancellationTokenTests - CancellationTokenCreatedWithDefaultConstructorIsNotCanceledAndCannotBe", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests.cancellationTokenCreatedWithDefaultConstructorIsNotCanceledAndCannotBe);
            QUnit.test("CancellationTokenTests - CancellationTokenCreatedWithFalseArgumentToConstructorIsNotCanceledAndCannotBe", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests.cancellationTokenCreatedWithFalseArgumentToConstructorIsNotCanceledAndCannotBe);
            QUnit.test("CancellationTokenTests - CancellationTokenCreatedWithTrueArgumentToConstructorIsCanceled", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests.cancellationTokenCreatedWithTrueArgumentToConstructorIsCanceled);
            QUnit.test("CancellationTokenTests - CancellationTokenNoneIsNotCancelledAndCannotBe", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests.cancellationTokenNoneIsNotCancelledAndCannotBe);
            QUnit.test("CancellationTokenTests - CreatingADefaultCancellationTokenReturnsACancellationTokenThatIsNotCancelled", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests.creatingADefaultCancellationTokenReturnsACancellationTokenThatIsNotCancelled);
            QUnit.test("CancellationTokenTests - ActivatorCreateForCancellationTokenReturnsACancellationTokenThatIsNotCancelled", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests.activatorCreateForCancellationTokenReturnsACancellationTokenThatIsNotCancelled);
            QUnit.test("CancellationTokenTests - CanBeCanceledIsTrueForTokenCreatedForCancellationTokenSource", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests.canBeCanceledIsTrueForTokenCreatedForCancellationTokenSource);
            QUnit.test("CancellationTokenTests - IsCancellationRequestedForTokenCreatedForCancellationTokenSourceIsSetByTheCancelMethod", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests.isCancellationRequestedForTokenCreatedForCancellationTokenSourceIsSetByTheCancelMethod);
            QUnit.test("CancellationTokenTests - ThrowIfCancellationRequestedForTokenCreatedForCancellationTokenSourceThrowsAfterTheCancelMethodIsCalled", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests.throwIfCancellationRequestedForTokenCreatedForCancellationTokenSourceThrowsAfterTheCancelMethodIsCalled);
            QUnit.test("CancellationTokenTests - CancelWithoutArgumentsWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests.cancelWithoutArgumentsWorks);
            QUnit.test("CancellationTokenTests - CancelWorksWhenThrowOnFirstExceptionIsFalse", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests.cancelWorksWhenThrowOnFirstExceptionIsFalse);
            QUnit.test("CancellationTokenTests - CancelWorksWhenThrowOnFirstExceptionIsTrue", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests.cancelWorksWhenThrowOnFirstExceptionIsTrue);
            QUnit.test("CancellationTokenTests - RegisterOnACancelledSourceWithoutContextInvokesTheCallback", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests.registerOnACancelledSourceWithoutContextInvokesTheCallback);
            QUnit.test("CancellationTokenTests - RegisterWithArgumentOnACancelledSourceInvokesTheCallback", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests.registerWithArgumentOnACancelledSourceInvokesTheCallback);
            QUnit.test("CancellationTokenTests - RegisterOnACancelledSourceWithoutContextRethrowsAThrownException", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests.registerOnACancelledSourceWithoutContextRethrowsAThrownException);
            QUnit.test("CancellationTokenTests - RegisterOnACancelledSourceWithContextRethrowsAThrownException", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests.registerOnACancelledSourceWithContextRethrowsAThrownException);
            QUnit.test("CancellationTokenTests - RegisterOverloadsWithUseSynchronizationContextWork", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests.registerOverloadsWithUseSynchronizationContextWork);
            QUnit.test("CancellationTokenTests - RegisterOnCancellationTokenCreatedNonCancelledDoesNothing", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests.registerOnCancellationTokenCreatedNonCancelledDoesNothing);
            QUnit.test("CancellationTokenTests - RegisterOnCancellationTokenCreatedCancelledInvokesTheActionImmediately", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests.registerOnCancellationTokenCreatedCancelledInvokesTheActionImmediately);
            QUnit.test("CancellationTokenTests - DuplicateCancelDoesNotCauseCallbacksToBeCalledTwice", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests.duplicateCancelDoesNotCauseCallbacksToBeCalledTwice);
            QUnit.test("CancellationTokenTests - RegistrationsCanBeCompared", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests.registrationsCanBeCompared);
            QUnit.test("CancellationTokenTests - RegistrationsCanBeUnregistered", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests.registrationsCanBeUnregistered);
            QUnit.test("CancellationTokenTests - CreatingADefaultCancellationTokenRegistrationReturnsARegistrationThatCanBeDisposedWithoutHarm", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests.creatingADefaultCancellationTokenRegistrationReturnsARegistrationThatCanBeDisposedWithoutHarm);
            QUnit.test("CancellationTokenTests - LinkedSourceWithTwoTokensWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests.linkedSourceWithTwoTokensWorks);
            QUnit.test("CancellationTokenTests - LinkedSourceWithThreeTokensWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests.linkedSourceWithThreeTokensWorks);
            QUnit.test("PromiseTests - TaskFromPromiseWithoutResultFactoryWorksWhenPromiseCompletes", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_PromiseTests.taskFromPromiseWithoutResultFactoryWorksWhenPromiseCompletes);
            QUnit.test("PromiseTests - TaskFromPromiseWithResultFactoryWorksWhenPromiseCompletes", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_PromiseTests.taskFromPromiseWithResultFactoryWorksWhenPromiseCompletes);
            QUnit.test("PromiseTests - TaskFromPromiseWorksWhenPromiseFails", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_PromiseTests.taskFromPromiseWorksWhenPromiseFails);
            QUnit.test("PromiseTests - CompletingPromiseCanBeAwaited", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_PromiseTests.completingPromiseCanBeAwaited);
            QUnit.test("PromiseTests - FailingPromiseCanBeAwaited", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_PromiseTests.failingPromiseCanBeAwaited);
            QUnit.test("PromiseTests - TaskFromPromiseWithProgressWithoutResultFactoryWorksWhenPromiseProgressesAndCompletes", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_PromiseTests.taskFromPromiseWithProgressWithoutResultFactoryWorksWhenPromiseProgressesAndCompletes);
            QUnit.test("TaskTests - TaskCompletionSourceTypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.taskCompletionSourceTypePropertiesAreCorrect);
            QUnit.test("TaskTests - TaskTypePropertiesAreCorrect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.taskTypePropertiesAreCorrect);
            QUnit.test("TaskTests - TaskCompletionSourceWorksWhenSettingResult", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.taskCompletionSourceWorksWhenSettingResult);
            QUnit.test("TaskTests - TaskCompletionSourceWorksWhenSettingASingleException", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.taskCompletionSourceWorksWhenSettingASingleException);
            QUnit.test("TaskTests - TaskCompletionSourceWorksWhenSettingTwoExceptions", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.taskCompletionSourceWorksWhenSettingTwoExceptions);
            QUnit.test("TaskTests - TaskCompletionSourceWorksWhenCancelling", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.taskCompletionSourceWorksWhenCancelling);
            QUnit.test("TaskTests - CancelledTaskThrowsTaskCanceledExceptionWhenAwaited", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.cancelledTaskThrowsTaskCanceledExceptionWhenAwaited);
            QUnit.test("TaskTests - CancelledTaskThrowsAggregateExceptionWithTaskCanceledExceptionWhenResultIsAccessed", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.cancelledTaskThrowsAggregateExceptionWithTaskCanceledExceptionWhenResultIsAccessed);
            QUnit.test("TaskTests - SetResultFailsWhenTheTaskIsCompleted", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.setResultFailsWhenTheTaskIsCompleted);
            QUnit.test("TaskTests - SetCanceledFailsWhenTheTaskIsCompleted", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.setCanceledFailsWhenTheTaskIsCompleted);
            QUnit.test("TaskTests - SetExceptionFailsWhenTheTaskIsCompleted", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.setExceptionFailsWhenTheTaskIsCompleted);
            QUnit.test("TaskTests - CompletedTaskHasCorrectIsXProperties", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.completedTaskHasCorrectIsXProperties);
            QUnit.test("TaskTests - CancelledTaskHasCorrectIsXProperties", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.cancelledTaskHasCorrectIsXProperties);
            QUnit.test("TaskTests - FaultedTaskHasCorrectIsXProperties", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.faultedTaskHasCorrectIsXProperties);
            QUnit.test("TaskTests - TrySetResultReturnsFalseWhenTheTaskIsCompleted", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.trySetResultReturnsFalseWhenTheTaskIsCompleted);
            QUnit.test("TaskTests - TrySetCanceledReturnsFalseWhenTheTaskIsCompleted", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.trySetCanceledReturnsFalseWhenTheTaskIsCompleted);
            QUnit.test("TaskTests - TrySetExceptionReturnsFalseWhenTheTaskIsCompleted", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.trySetExceptionReturnsFalseWhenTheTaskIsCompleted);
            QUnit.test("TaskTests - ContinueWithForNonGenericTaskWorkWithNoResultAndNoException", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.continueWithForNonGenericTaskWorkWithNoResultAndNoException);
            QUnit.test("TaskTests - ContinueWithWhenCallbackThrowsAnException", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.continueWithWhenCallbackThrowsAnException);
            QUnit.test("TaskTests - ExceptionInTaskBodyAppearsInTheExceptionMemberForNonGenericTask", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.exceptionInTaskBodyAppearsInTheExceptionMemberForNonGenericTask);
            QUnit.test("TaskTests - ContinueWithForNonGenericTaskCanReturnAValue", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.continueWithForNonGenericTaskCanReturnAValue);
            QUnit.test("TaskTests - ContinueWithWithNoReturnValueForGenericTaskWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.continueWithWithNoReturnValueForGenericTaskWorks);
            QUnit.test("TaskTests - ContinueWithForGenericTaskCanReturnAValue", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.continueWithForGenericTaskCanReturnAValue);
            QUnit.test("TaskTests - DelayWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.delayWorks);
            QUnit.test("TaskTests - FromResultWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.fromResultWorks);
            QUnit.test("TaskTests - RunWithoutResultWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.runWithoutResultWorks);
            QUnit.test("TaskTests - RunWithResultWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.runWithResultWorks);
            QUnit.test("TaskTests - RunWorksWhenBodyThrows", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.runWorksWhenBodyThrows);
            QUnit.test("TaskTests - WhenAllParamArrayWithResultWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.whenAllParamArrayWithResultWorks);
            QUnit.test("TaskTests - WhenAllEnumerableWithResultWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.whenAllEnumerableWithResultWorks);
            QUnit.test("TaskTests - WhenAllParamArrayWithoutResultWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.whenAllParamArrayWithoutResultWorks);
            QUnit.test("TaskTests - WhenAllEnumerableWithoutResultWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.whenAllEnumerableWithoutResultWorks);
            QUnit.test("TaskTests - WhenAllShouldHaveAnErrorIfAnyIncludedTaskFaulted", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.whenAllShouldHaveAnErrorIfAnyIncludedTaskFaulted);
            QUnit.test("TaskTests - WhenAllShouldBeCancelledIfNoTaskWasFaultedButSomeWasCancelled", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.whenAllShouldBeCancelledIfNoTaskWasFaultedButSomeWasCancelled);
            QUnit.test("TaskTests - WhenAnyParamArrayWithResultWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.whenAnyParamArrayWithResultWorks);
            QUnit.test("TaskTests - WhenAnyEnumerableWithResultWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.whenAnyEnumerableWithResultWorks);
            QUnit.test("TaskTests - WhenAnyParamArrayWithoutResultWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.whenAnyParamArrayWithoutResultWorks);
            QUnit.test("TaskTests - WhenAnyEnumerableWithoutResultWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.whenAnyEnumerableWithoutResultWorks);
            QUnit.test("TaskTests - WhenAnyFaultsIfTheFirstTaskFaulted", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.whenAnyFaultsIfTheFirstTaskFaulted);
            QUnit.test("TaskTests - WhenAnyIsCancelledIfTheFirstTaskWasCancelled", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.whenAnyIsCancelledIfTheFirstTaskWasCancelled);
            QUnit.test("TaskTests - ConstructorWithOnlyActionWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.constructorWithOnlyActionWorks);
            QUnit.test("TaskTests - ConstructorWithActionAndStateWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.constructorWithActionAndStateWorks);
            QUnit.test("TaskTests - ExceptionInManuallyCreatedTaskIsStoredOnTheTask", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.exceptionInManuallyCreatedTaskIsStoredOnTheTask);
            QUnit.test("TaskTests - ConstructorWithOnlyFunctionWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.constructorWithOnlyFunctionWorks);
            QUnit.test("TaskTests - ConstructorWithFunctionAndStateWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests.constructorWithFunctionAndStateWorks);
            QUnit.test("UserDefinedStructTests - IsClassIsFalse", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests.isClassIsFalse);
            QUnit.test("UserDefinedStructTests - UserDefinedStructCanBeUsed", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests.userDefinedStructCanBeUsed);
            QUnit.test("UserDefinedStructTests - DefaultConstructorOfStructReturnsInstanceWithAllMembersInitialized", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests.defaultConstructorOfStructReturnsInstanceWithAllMembersInitialized);
            QUnit.test("UserDefinedStructTests - DefaultConstructorOfStructReturnsInstanceWithAllMembersInitializedGeneric", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests.defaultConstructorOfStructReturnsInstanceWithAllMembersInitializedGeneric);
            QUnit.test("UserDefinedStructTests - DefaultValueOfStructIsInstanceWithAllMembersInitialized", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests.defaultValueOfStructIsInstanceWithAllMembersInitialized);
            QUnit.test("UserDefinedStructTests - DefaultValueOfStructIsInstanceWithAllMembersInitializedGeneric", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests.defaultValueOfStructIsInstanceWithAllMembersInitializedGeneric);
            QUnit.test("UserDefinedStructTests - DefaultValueOfStructIsInstanceWithAllMembersInitializedIndirect", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests.defaultValueOfStructIsInstanceWithAllMembersInitializedIndirect);
            QUnit.test("UserDefinedStructTests - DefaultValueOfStructIsInstanceWithAllMembersInitializedIndirectGeneric", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests.defaultValueOfStructIsInstanceWithAllMembersInitializedIndirectGeneric);
            QUnit.test("UserDefinedStructTests - DefaultValueOfStructWithInlineCodeDefaultConstructorWorks_SPI_1610", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests.defaultValueOfStructWithInlineCodeDefaultConstructorWorks_SPI_1610);
            QUnit.test("UserDefinedStructTests - DefaultValueOfStructWithInlineCodeDefaultConstructorWorksGeneric_SPI_1610", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests.defaultValueOfStructWithInlineCodeDefaultConstructorWorksGeneric_SPI_1610);
            QUnit.test("UserDefinedStructTests - DefaultConstructorOfStructWithInlineCodeDefaultConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests.defaultConstructorOfStructWithInlineCodeDefaultConstructorWorks);
            QUnit.test("UserDefinedStructTests - DefaultConstructorOfStructWithInlineCodeDefaultConstructorWorksGeneric", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests.defaultConstructorOfStructWithInlineCodeDefaultConstructorWorksGeneric);
            QUnit.test("UserDefinedStructTests - DefaultGetHashCodeGeneratesHashCodeBasedOnAllInstanceFields", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests.defaultGetHashCodeGeneratesHashCodeBasedOnAllInstanceFields);
            QUnit.test("UserDefinedStructTests - DefaultEqualsUsesValueEqualityForAllMembers", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests.defaultEqualsUsesValueEqualityForAllMembers);
            QUnit.test("UserDefinedStructTests - CanOverrideGetHashCode", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests.canOverrideGetHashCode);
            QUnit.test("UserDefinedStructTests - CanOverrideEquals", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests.canOverrideEquals);
            QUnit.test("UserDefinedStructTests - CanLiftUserDefinedBinaryOperator", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests.canLiftUserDefinedBinaryOperator);
            QUnit.test("UserDefinedStructTests - CanLiftUserDefinedUnaryOperator_SPI_1634", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests.canLiftUserDefinedUnaryOperator_SPI_1634);
            QUnit.test("UserDefinedStructTests - CanLiftUserDefinedConversionOperator_SPI_1611", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests.canLiftUserDefinedConversionOperator_SPI_1611);
            QUnit.test("UserDefinedStructTests - ClonedValueTypeIsCorrectType", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests.clonedValueTypeIsCorrectType);
            QUnit.test("UserDefinedStructTests - FieldsAreClonedWhenValueTypeIsCopied", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests.fieldsAreClonedWhenValueTypeIsCopied);
            QUnit.test("UserDefinedStructTests - AutoPropertyBackingFieldsAreClonedWhenValueTypeIsCopied", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests.autoPropertyBackingFieldsAreClonedWhenValueTypeIsCopied);
            QUnit.test("UserDefinedStructTests - PropertiesWithFieldImplementationAreClonedWhenValueTypeIsCopied", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests.propertiesWithFieldImplementationAreClonedWhenValueTypeIsCopied);
            QUnit.test("UserDefinedStructTests - AutoEventBackingFieldsAreClonedWhenValueTypeIsCopied_SPI_1612", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests.autoEventBackingFieldsAreClonedWhenValueTypeIsCopied_SPI_1612);
            QUnit.test("UserDefinedStructTests - NestedStructsAreClonedWhenValueTypeIsCopied_SPI_1613", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests.nestedStructsAreClonedWhenValueTypeIsCopied_SPI_1613);
            QUnit.test("UserDefinedStructTests - GenericMutableValueTypeWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests.genericMutableValueTypeWorks);
            QUnit.test("UserDefinedStructTests - CloningValueTypeWithNamedDefaultConstructorWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests.cloningValueTypeWithNamedDefaultConstructorWorks);
            QUnit.test("UserDefinedStructTests - CloningNullableValueTypesWorks", Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests.cloningNullableValueTypesWorks);
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ActivatorTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ActivatorTests)],
        statics: {
            nonGenericCreateInstanceWithoutArgumentsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ActivatorTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ActivatorTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NonGenericCreateInstanceWithoutArgumentsWorks()",
                    line: "106"
                } ));
                t.getFixture().nonGenericCreateInstanceWithoutArgumentsWorks();
            },
            nonGenericCreateInstanceWithOneArgumentWorks_SPI_1540: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ActivatorTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ActivatorTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NonGenericCreateInstanceWithOneArgumentWorks_SPI_1540()",
                    line: "114"
                } ));
                t.getFixture().nonGenericCreateInstanceWithOneArgumentWorks_SPI_1540();
            },
            nonGenericCreateInstanceWithTwoArgumentsWorks_SPI_1541: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ActivatorTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ActivatorTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NonGenericCreateInstanceWithTwoArgumentsWorks_SPI_1541()",
                    line: "128"
                } ));
                t.getFixture().nonGenericCreateInstanceWithTwoArgumentsWorks_SPI_1541();
            },
            genericCreateInstanceWithoutArgumentsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ActivatorTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ActivatorTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GenericCreateInstanceWithoutArgumentsWorks()",
                    line: "144"
                } ));
                t.getFixture().genericCreateInstanceWithoutArgumentsWorks();
            },
            genericCreateInstanceWithOneArgumentWorks_SPI_1542: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ActivatorTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ActivatorTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GenericCreateInstanceWithOneArgumentWorks_SPI_1542()",
                    line: "152"
                } ));
                t.getFixture().genericCreateInstanceWithOneArgumentWorks_SPI_1542();
            },
            genericCreateInstanceWithTwoArgumentsWorks_SPI_1543: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ActivatorTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ActivatorTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GenericCreateInstanceWithTwoArgumentsWorks_SPI_1543()",
                    line: "166"
                } ));
                t.getFixture().genericCreateInstanceWithTwoArgumentsWorks_SPI_1543();
            },
            instantiatingTypeParameterWithDefaultConstructorConstraintWorks_SPI_1544: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ActivatorTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ActivatorTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "InstantiatingTypeParameterWithDefaultConstructorConstraintWorks_SPI_1544()",
                    line: "187"
                } ));
                t.getFixture().instantiatingTypeParameterWithDefaultConstructorConstraintWorks_SPI_1544();
            },
            createInstanceWithNoArgumentsWorksForClassWithUnnamedDefaultConstructor: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ActivatorTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ActivatorTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreateInstanceWithNoArgumentsWorksForClassWithUnnamedDefaultConstructor()",
                    line: "196"
                } ));
                t.getFixture().createInstanceWithNoArgumentsWorksForClassWithUnnamedDefaultConstructor();
            },
            createInstanceWithNoArgumentsWorksForClassWithNamedDefaultConstructor: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ActivatorTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ActivatorTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreateInstanceWithNoArgumentsWorksForClassWithNamedDefaultConstructor()",
                    line: "208"
                } ));
                t.getFixture().createInstanceWithNoArgumentsWorksForClassWithNamedDefaultConstructor();
            },
            createInstanceWithNoArgumentsWorksForClassWithInlineCodeDefaultConstructor_SPI_1545: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ActivatorTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ActivatorTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreateInstanceWithNoArgumentsWorksForClassWithInlineCodeDefaultConstructor_SPI_1545()",
                    line: "220"
                } ));
                t.getFixture().createInstanceWithNoArgumentsWorksForClassWithInlineCodeDefaultConstructor_SPI_1545();
            },
            createInstanceWithNoArgumentsWorksForClassWithStaticMethodDefaultConstructor: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ActivatorTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ActivatorTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreateInstanceWithNoArgumentsWorksForClassWithStaticMethodDefaultConstructor()",
                    line: "233"
                } ));
                t.getFixture().createInstanceWithNoArgumentsWorksForClassWithStaticMethodDefaultConstructor();
            },
            createInstanceWithNoArgumentsWorksForClassWithJsonDefaultConstructor: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ActivatorTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ActivatorTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreateInstanceWithNoArgumentsWorksForClassWithJsonDefaultConstructor()",
                    line: "245"
                } ));
                t.getFixture().createInstanceWithNoArgumentsWorksForClassWithJsonDefaultConstructor();
            },
            createInstanceWithNoArgumentsWorksForGenericClassWithNamedDefaultConstructor: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ActivatorTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ActivatorTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreateInstanceWithNoArgumentsWorksForGenericClassWithNamedDefaultConstructor()",
                    line: "257"
                } ));
                t.getFixture().createInstanceWithNoArgumentsWorksForGenericClassWithNamedDefaultConstructor();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.ActivatorTests",
                    file: "Batch4\\ActivatorTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_AppDomainTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.AppDomainTests)],
        statics: {
            getAssembliesWorks_SPI_1646: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.AppDomainTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_AppDomainTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetAssembliesWorks_SPI_1646()",
                    line: "9"
                } ));
                t.getFixture().getAssembliesWorks_SPI_1646();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.AppDomainTests",
                    file: "Batch4\\AppDomainTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArgumentsTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArgumentsTests)],
        statics: {
            lengthWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArgumentsTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArgumentsTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LengthWorks()",
                    line: "44"
                } ));
                t.getFixture().lengthWorks();
            },
            getArgumentWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArgumentsTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArgumentsTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetArgumentWorks()",
                    line: "52"
                } ));
                t.getFixture().getArgumentWorks();
            },
            toArrayWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArgumentsTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArgumentsTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToArrayWorks()",
                    line: "60"
                } ));
                t.getFixture().toArrayWorks();
            },
            toArrayOfTWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArgumentsTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArgumentsTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToArrayOfTWorks()",
                    line: "68"
                } ));
                t.getFixture().toArrayOfTWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.ArgumentsTests",
                    file: "Batch4\\ArgumentsTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests)],
        statics: {
            typePropertiesAreCorrect_SPI_1546: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect_SPI_1546()",
                    line: "31"
                } ));
                t.getFixture().typePropertiesAreCorrect_SPI_1546();
            },
            typePropertiesAreCorrect_SPI_1548: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect_SPI_1548()",
                    line: "38"
                } ));
                t.getFixture().typePropertiesAreCorrect_SPI_1548();
            },
            arrayCanBeAssignedToTheCollectionInterfaces_SPI_1547: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayCanBeAssignedToTheCollectionInterfaces_SPI_1547()",
                    line: "65"
                } ));
                t.getFixture().arrayCanBeAssignedToTheCollectionInterfaces_SPI_1547();
            },
            lengthWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LengthWorks()",
                    line: "74"
                } ));
                t.getFixture().lengthWorks();
            },
            rankIsOne: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RankIsOne()",
                    line: "82"
                } ));
                t.getFixture().rankIsOne();
            },
            getLengthWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetLengthWorks()",
                    line: "88"
                } ));
                t.getFixture().getLengthWorks();
            },
            getLowerBound: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetLowerBound()",
                    line: "96"
                } ));
                t.getFixture().getLowerBound();
            },
            getUpperBoundWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetUpperBoundWorks()",
                    line: "104"
                } ));
                t.getFixture().getUpperBoundWorks();
            },
            gettingValueByIndexWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GettingValueByIndexWorks()",
                    line: "112"
                } ));
                t.getFixture().gettingValueByIndexWorks();
            },
            getValueWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetValueWorks()",
                    line: "119"
                } ));
                t.getFixture().getValueWorks();
            },
            settingValueByIndexWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SettingValueByIndexWorks()",
                    line: "126"
                } ));
                t.getFixture().settingValueByIndexWorks();
            },
            setValueWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetValueWorks()",
                    line: "136"
                } ));
                t.getFixture().setValueWorks();
            },
            foreachWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ForeachWorks()",
                    line: "146"
                } ));
                t.getFixture().foreachWorks();
            },
            cloneWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CloneWorks()",
                    line: "157"
                } ));
                t.getFixture().cloneWorks();
            },
            concatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConcatWorks()",
                    line: "166"
                } ));
                t.getFixture().concatWorks();
            },
            containsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ContainsWorks()",
                    line: "175"
                } ));
                t.getFixture().containsWorks();
            },
            containsUsesEqualsMethod: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ContainsUsesEqualsMethod()",
                    line: "184"
                } ));
                t.getFixture().containsUsesEqualsMethod();
            },
            sliceWithoutEndWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SliceWithoutEndWorks()",
                    line: "223"
                } ));
                t.getFixture().sliceWithoutEndWorks();
            },
            sliceWithEndWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SliceWithEndWorks()",
                    line: "229"
                } ));
                t.getFixture().sliceWithEndWorks();
            },
            foreachWithArrayItemCallbackWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ForeachWithArrayItemCallbackWorks()",
                    line: "250"
                } ));
                t.getFixture().foreachWithArrayItemCallbackWorks();
            },
            indexOfWithoutStartIndexWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexOfWithoutStartIndexWorks()",
                    line: "267"
                } ));
                t.getFixture().indexOfWithoutStartIndexWorks();
            },
            indexOfWithoutStartIndexUsesEqualsMethod: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexOfWithoutStartIndexUsesEqualsMethod()",
                    line: "274"
                } ));
                t.getFixture().indexOfWithoutStartIndexUsesEqualsMethod();
            },
            indexOfWithStartIndexWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexOfWithStartIndexWorks()",
                    line: "282"
                } ));
                t.getFixture().indexOfWithStartIndexWorks();
            },
            indexOfWithStartIndexUsesEqualsMethod: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexOfWithStartIndexUsesEqualsMethod()",
                    line: "289"
                } ));
                t.getFixture().indexOfWithStartIndexUsesEqualsMethod();
            },
            joinWithoutDelimiterWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "JoinWithoutDelimiterWorks()",
                    line: "296"
                } ));
                t.getFixture().joinWithoutDelimiterWorks();
            },
            joinWithDelimiterWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "JoinWithDelimiterWorks()",
                    line: "302"
                } ));
                t.getFixture().joinWithDelimiterWorks();
            },
            reverseWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ReverseWorks()",
                    line: "322"
                } ));
                t.getFixture().reverseWorks();
            },
            sortWithDefaultCompareWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SortWithDefaultCompareWorks()",
                    line: "346"
                } ));
                t.getFixture().sortWithDefaultCompareWorks();
            },
            sortWithCompareCallbackWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SortWithCompareCallbackWorks()",
                    line: "354"
                } ));
                t.getFixture().sortWithCompareCallbackWorks();
            },
            foreachWhenCastToIListWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ForeachWhenCastToIListWorks()",
                    line: "362"
                } ));
                t.getFixture().foreachWhenCastToIListWorks();
            },
            iCollectionCountWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ICollectionCountWorks()",
                    line: "374"
                } ));
                t.getFixture().iCollectionCountWorks();
            },
            iCollectionAddWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ICollectionAddWorks()",
                    line: "381"
                } ));
                t.getFixture().iCollectionAddWorks();
            },
            iCollectionClearWorks_NDN_1548: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ICollectionClearWorks_NDN_1548()",
                    line: "390"
                } ));
                t.getFixture().iCollectionClearWorks_NDN_1548();
            },
            iCollectionContainsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ICollectionContainsWorks()",
                    line: "399"
                } ));
                t.getFixture().iCollectionContainsWorks();
            },
            iCollectionContainsUsesEqualsMethod: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ICollectionContainsUsesEqualsMethod()",
                    line: "408"
                } ));
                t.getFixture().iCollectionContainsUsesEqualsMethod();
            },
            iCollectionRemoveWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ICollectionRemoveWorks()",
                    line: "416"
                } ));
                t.getFixture().iCollectionRemoveWorks();
            },
            iListIndexingWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IListIndexingWorks()",
                    line: "443"
                } ));
                t.getFixture().iListIndexingWorks();
            },
            iListIndexOfWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IListIndexOfWorks()",
                    line: "452"
                } ));
                t.getFixture().iListIndexOfWorks();
            },
            iListIndexOfUsesEqualsMethod: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IListIndexOfUsesEqualsMethod()",
                    line: "461"
                } ));
                t.getFixture().iListIndexOfUsesEqualsMethod();
            },
            iListInsertWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IListInsertWorks()",
                    line: "469"
                } ));
                t.getFixture().iListInsertWorks();
            },
            iListRemoveAtWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IListRemoveAtWorks()",
                    line: "478"
                } ));
                t.getFixture().iListRemoveAtWorks();
            },
            repeatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RepeatWorks()",
                    line: "495"
                } ));
                t.getFixture().repeatWorks();
            },
            clearWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ClearWorks()",
                    line: "503"
                } ));
                t.getFixture().clearWorks();
            },
            copyWithDifferentArraysWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CopyWithDifferentArraysWorks()",
                    line: "519"
                } ));
                t.getFixture().copyWithDifferentArraysWorks();
            },
            copyWithinArrayWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CopyWithinArrayWorks()",
                    line: "532"
                } ));
                t.getFixture().copyWithinArrayWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.ArrayTests",
                    file: "Batch4\\ArrayTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ComparerTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ComparerTests)],
        statics: {
            typePropertiesAreCorrect_SPI_1546: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ComparerTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ComparerTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect_SPI_1546()",
                    line: "25"
                } ));
                t.getFixture().typePropertiesAreCorrect_SPI_1546();
            },
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ComparerTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ComparerTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "32"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            defaultComparerCanOrderNumbers: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ComparerTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ComparerTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultComparerCanOrderNumbers()",
                    line: "43"
                } ));
                t.getFixture().defaultComparerCanOrderNumbers();
            },
            defaultComparerCanOrderNullValues: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ComparerTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ComparerTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultComparerCanOrderNullValues()",
                    line: "51"
                } ));
                t.getFixture().defaultComparerCanOrderNullValues();
            },
            defaultComparerUsesCompareMethodIfClassImplementsIComparable: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ComparerTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ComparerTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultComparerUsesCompareMethodIfClassImplementsIComparable()",
                    line: "59"
                } ));
                t.getFixture().defaultComparerUsesCompareMethodIfClassImplementsIComparable();
            },
            createWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ComparerTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ComparerTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreateWorks()",
                    line: "67"
                } ));
                t.getFixture().createWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Collections.Generic.ComparerTests",
                    file: "Batch4\\Collections\\Generic\\ComparerTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_EqualityComparerTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.EqualityComparerTests)],
        statics: {
            typePropertiesAreCorrect_SPI_1546: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.EqualityComparerTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_EqualityComparerTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect_SPI_1546()",
                    line: "27"
                } ));
                t.getFixture().typePropertiesAreCorrect_SPI_1546();
            },
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.EqualityComparerTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_EqualityComparerTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "34"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            defaultComparerCanGetHashCodeOfNumber: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.EqualityComparerTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_EqualityComparerTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultComparerCanGetHashCodeOfNumber()",
                    line: "45"
                } ));
                t.getFixture().defaultComparerCanGetHashCodeOfNumber();
            },
            defaultComparerReturnsZeroAsHashCodeForNullAndUndefined: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.EqualityComparerTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_EqualityComparerTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultComparerReturnsZeroAsHashCodeForNullAndUndefined()",
                    line: "51"
                } ));
                t.getFixture().defaultComparerReturnsZeroAsHashCodeForNullAndUndefined();
            },
            defaultComparerCanDetermineEquality: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.EqualityComparerTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_EqualityComparerTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultComparerCanDetermineEquality()",
                    line: "58"
                } ));
                t.getFixture().defaultComparerCanDetermineEquality();
            },
            defaultComparerInvokesOverriddenGetHashCode: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.EqualityComparerTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_EqualityComparerTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultComparerInvokesOverriddenGetHashCode()",
                    line: "69"
                } ));
                t.getFixture().defaultComparerInvokesOverriddenGetHashCode();
            },
            defaultComparerInvokesOverriddenEquals: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.EqualityComparerTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_EqualityComparerTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultComparerInvokesOverriddenEquals()",
                    line: "78"
                } ));
                t.getFixture().defaultComparerInvokesOverriddenEquals();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Collections.Generic.EqualityComparerTests",
                    file: "Batch4\\Collections\\Generic\\EqualityComparerTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "23"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            defaultConstructorWorks_SPI_1549: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorWorks_SPI_1549()",
                    line: "36"
                } ));
                t.getFixture().defaultConstructorWorks_SPI_1549();
            },
            capacityConstructorWorks_SPI_1549: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CapacityConstructorWorks_SPI_1549()",
                    line: "46"
                } ));
                t.getFixture().capacityConstructorWorks_SPI_1549();
            },
            capacityAndEqualityComparerWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CapacityAndEqualityComparerWorks()",
                    line: "56"
                } ));
                t.getFixture().capacityAndEqualityComparerWorks();
            },
            copyConstructorWorks_SPI_1549: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CopyConstructorWorks_SPI_1549()",
                    line: "101"
                } ));
                t.getFixture().copyConstructorWorks_SPI_1549();
            },
            equalityComparerOnlyConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "EqualityComparerOnlyConstructorWorks()",
                    line: "119"
                } ));
                t.getFixture().equalityComparerOnlyConstructorWorks();
            },
            constructorWithBothDictionaryAndEqualityComparerWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithBothDictionaryAndEqualityComparerWorks()",
                    line: "128"
                } ));
                t.getFixture().constructorWithBothDictionaryAndEqualityComparerWorks();
            },
            countWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CountWorks()",
                    line: "145"
                } ));
                t.getFixture().countWorks();
            },
            keysWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "KeysWorks()",
                    line: "156"
                } ));
                t.getFixture().keysWorks();
            },
            valuesWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ValuesWorks()",
                    line: "180"
                } ));
                t.getFixture().valuesWorks();
            },
            indexerGetterWorksForExistingItems: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexerGetterWorksForExistingItems()",
                    line: "204"
                } ));
                t.getFixture().indexerGetterWorksForExistingItems();
            },
            indexerSetterWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexerSetterWorks()",
                    line: "211"
                } ));
                t.getFixture().indexerSetterWorks();
            },
            indexerGetterThrowsForNonExistingItems: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests, 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexerGetterThrowsForNonExistingItems()",
                    line: "223"
                } ));
                t.getFixture().indexerGetterThrowsForNonExistingItems();
            },
            addWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AddWorks()",
                    line: "237"
                } ));
                t.getFixture().addWorks();
            },
            addThrowsIfItemAlreadyExists: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests, 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AddThrowsIfItemAlreadyExists()",
                    line: "248"
                } ));
                t.getFixture().addThrowsIfItemAlreadyExists();
            },
            clearWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ClearWorks()",
                    line: "262"
                } ));
                t.getFixture().clearWorks();
            },
            containsKeyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ContainsKeyWorks()",
                    line: "270"
                } ));
                t.getFixture().containsKeyWorks();
            },
            enumeratingWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "EnumeratingWorks()",
                    line: "278"
                } ));
                t.getFixture().enumeratingWorks();
            },
            removeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RemoveWorks()",
                    line: "302"
                } ));
                t.getFixture().removeWorks();
            },
            tryGetValueWithIntKeysWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TryGetValueWithIntKeysWorks()",
                    line: "312"
                } ));
                t.getFixture().tryGetValueWithIntKeysWorks();
            },
            tryGetValueWithObjectKeysWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TryGetValueWithObjectKeysWorks()",
                    line: "324"
                } ));
                t.getFixture().tryGetValueWithObjectKeysWorks();
            },
            canUseCustomComparer: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CanUseCustomComparer()",
                    line: "336"
                } ));
                t.getFixture().canUseCustomComparer();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Collections.Generic.GenericDictionaryTests",
                    file: "Batch4\\Collections\\Generic\\GenericDictionaryTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ICollectionTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ICollectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "95"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            arrayImplementsICollection: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ICollectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayImplementsICollection()",
                    line: "106"
                } ));
                t.getFixture().arrayImplementsICollection();
            },
            customClassThatShouldImplementICollectionDoesSo: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ICollectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CustomClassThatShouldImplementICollectionDoesSo()",
                    line: "112"
                } ));
                t.getFixture().customClassThatShouldImplementICollectionDoesSo();
            },
            arrayCastToICollectionCountWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ICollectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayCastToICollectionCountWorks()",
                    line: "118"
                } ));
                t.getFixture().arrayCastToICollectionCountWorks();
            },
            classImplementingICollectionCountWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ICollectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ClassImplementingICollectionCountWorks()",
                    line: "124"
                } ));
                t.getFixture().classImplementingICollectionCountWorks();
            },
            classImplementingICollectionCastToICollectionCountWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ICollectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ClassImplementingICollectionCastToICollectionCountWorks()",
                    line: "130"
                } ));
                t.getFixture().classImplementingICollectionCastToICollectionCountWorks();
            },
            classImplementingICollectionAddWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ICollectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ClassImplementingICollectionAddWorks()",
                    line: "136"
                } ));
                t.getFixture().classImplementingICollectionAddWorks();
            },
            classImplementingICollectionCastToICollectionAddWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ICollectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ClassImplementingICollectionCastToICollectionAddWorks()",
                    line: "145"
                } ));
                t.getFixture().classImplementingICollectionCastToICollectionAddWorks();
            },
            classImplementingICollectionClearWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ICollectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ClassImplementingICollectionClearWorks()",
                    line: "154"
                } ));
                t.getFixture().classImplementingICollectionClearWorks();
            },
            classImplementingICollectionCastToICollectionClearWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ICollectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ClassImplementingICollectionCastToICollectionClearWorks()",
                    line: "162"
                } ));
                t.getFixture().classImplementingICollectionCastToICollectionClearWorks();
            },
            arrayCastToICollectionContainsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ICollectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayCastToICollectionContainsWorks()",
                    line: "170"
                } ));
                t.getFixture().arrayCastToICollectionContainsWorks();
            },
            classImplementingICollectionContainsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ICollectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ClassImplementingICollectionContainsWorks()",
                    line: "178"
                } ));
                t.getFixture().classImplementingICollectionContainsWorks();
            },
            classImplementingICollectionCastToICollectionContainsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ICollectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ClassImplementingICollectionCastToICollectionContainsWorks()",
                    line: "186"
                } ));
                t.getFixture().classImplementingICollectionCastToICollectionContainsWorks();
            },
            classImplementingICollectionRemoveWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ICollectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ClassImplementingICollectionRemoveWorks()",
                    line: "194"
                } ));
                t.getFixture().classImplementingICollectionRemoveWorks();
            },
            classImplementingICollectionCastToICollectionRemoveWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ICollectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ClassImplementingICollectionCastToICollectionRemoveWorks()",
                    line: "204"
                } ));
                t.getFixture().classImplementingICollectionCastToICollectionRemoveWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Collections.Generic.ICollectionTests",
                    file: "Batch4\\Collections\\Generic\\ICollectionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IDictionaryTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IDictionaryTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "97"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            classImplementsInterfaces_SPI_1626: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IDictionaryTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ClassImplementsInterfaces_SPI_1626()",
                    line: "109"
                } ));
                t.getFixture().classImplementsInterfaces_SPI_1626();
            },
            countWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IDictionaryTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CountWorks()",
                    line: "118"
                } ));
                t.getFixture().countWorks();
            },
            keysWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IDictionaryTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "KeysWorks()",
                    line: "132"
                } ));
                t.getFixture().keysWorks();
            },
            getItemWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IDictionaryTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetItemWorks()",
                    line: "151"
                } ));
                t.getFixture().getItemWorks();
            },
            valuesWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IDictionaryTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ValuesWorks()",
                    line: "191"
                } ));
                t.getFixture().valuesWorks();
            },
            containsKeyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IDictionaryTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ContainsKeyWorks()",
                    line: "210"
                } ));
                t.getFixture().containsKeyWorks();
            },
            tryGetValueWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IDictionaryTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TryGetValueWorks()",
                    line: "229"
                } ));
                t.getFixture().tryGetValueWorks();
            },
            addWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IDictionaryTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AddWorks()",
                    line: "257"
                } ));
                t.getFixture().addWorks();
            },
            clearWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IDictionaryTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ClearWorks()",
                    line: "282"
                } ));
                t.getFixture().clearWorks();
            },
            setItemWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IDictionaryTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetItemWorks()",
                    line: "311"
                } ));
                t.getFixture().setItemWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Collections.Generic.IDictionaryTests",
                    file: "Batch4\\Collections\\Generic\\IDictionaryTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IEnumerableTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IEnumerableTests)],
        statics: {
            arrayImplementsIEnumerable: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IEnumerableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IEnumerableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayImplementsIEnumerable()",
                    line: "25"
                } ));
                t.getFixture().arrayImplementsIEnumerable();
            },
            customClassThatShouldImplementIEnumerableDoesSo: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IEnumerableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IEnumerableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CustomClassThatShouldImplementIEnumerableDoesSo()",
                    line: "31"
                } ));
                t.getFixture().customClassThatShouldImplementIEnumerableDoesSo();
            },
            arrayGetEnumeratorMethodWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IEnumerableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IEnumerableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayGetEnumeratorMethodWorks()",
                    line: "37"
                } ));
                t.getFixture().arrayGetEnumeratorMethodWorks();
            },
            arrayCastToIEnumerableCanBeEnumerated: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IEnumerableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IEnumerableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayCastToIEnumerableCanBeEnumerated()",
                    line: "50"
                } ));
                t.getFixture().arrayCastToIEnumerableCanBeEnumerated();
            },
            classImplementingIEnumerableCanBeEnumerated: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IEnumerableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IEnumerableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ClassImplementingIEnumerableCanBeEnumerated()",
                    line: "64"
                } ));
                t.getFixture().classImplementingIEnumerableCanBeEnumerated();
            },
            classImplementingIEnumerableCastToIEnumerableCanBeEnumerated: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IEnumerableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IEnumerableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ClassImplementingIEnumerableCastToIEnumerableCanBeEnumerated()",
                    line: "78"
                } ));
                t.getFixture().classImplementingIEnumerableCastToIEnumerableCanBeEnumerated();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Collections.Generic.IEnumerableTests",
                    file: "Batch4\\Collections\\Generic\\IEnumerableTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IListTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IListTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "123"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            arrayImplementsIList: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayImplementsIList()",
                    line: "135"
                } ));
                t.getFixture().arrayImplementsIList();
            },
            customClassThatShouldImplementIListDoesSo: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CustomClassThatShouldImplementIListDoesSo()",
                    line: "141"
                } ));
                t.getFixture().customClassThatShouldImplementIListDoesSo();
            },
            arrayCastToIListGetItemWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayCastToIListGetItemWorks()",
                    line: "147"
                } ));
                t.getFixture().arrayCastToIListGetItemWorks();
            },
            classImplementingIListGetItemWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ClassImplementingIListGetItemWorks()",
                    line: "154"
                } ));
                t.getFixture().classImplementingIListGetItemWorks();
            },
            classImplementingIListCastToIListGetItemWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ClassImplementingIListCastToIListGetItemWorks()",
                    line: "161"
                } ));
                t.getFixture().classImplementingIListCastToIListGetItemWorks();
            },
            arrayCastToIListSetItemWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayCastToIListSetItemWorks()",
                    line: "168"
                } ));
                t.getFixture().arrayCastToIListSetItemWorks();
            },
            classImplementingIListSetItemWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ClassImplementingIListSetItemWorks()",
                    line: "176"
                } ));
                t.getFixture().classImplementingIListSetItemWorks();
            },
            classImplementingIListCastToIListSetItemWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ClassImplementingIListCastToIListSetItemWorks()",
                    line: "184"
                } ));
                t.getFixture().classImplementingIListCastToIListSetItemWorks();
            },
            arrayCastToIListIndexOfWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayCastToIListIndexOfWorks()",
                    line: "192"
                } ));
                t.getFixture().arrayCastToIListIndexOfWorks();
            },
            classImplementingIListIndexOfWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ClassImplementingIListIndexOfWorks()",
                    line: "200"
                } ));
                t.getFixture().classImplementingIListIndexOfWorks();
            },
            classImplementingIListCastToIListIndexOfWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ClassImplementingIListCastToIListIndexOfWorks()",
                    line: "208"
                } ));
                t.getFixture().classImplementingIListCastToIListIndexOfWorks();
            },
            classImplementingIListInsertWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ClassImplementingIListInsertWorks()",
                    line: "216"
                } ));
                t.getFixture().classImplementingIListInsertWorks();
            },
            classImplementingIListCastToIListInsertWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ClassImplementingIListCastToIListInsertWorks()",
                    line: "224"
                } ));
                t.getFixture().classImplementingIListCastToIListInsertWorks();
            },
            classImplementingIListRemoveAtWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ClassImplementingIListRemoveAtWorks()",
                    line: "232"
                } ));
                t.getFixture().classImplementingIListRemoveAtWorks();
            },
            classImplementingIListCastToIListRemoveAtWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ClassImplementingIListCastToIListRemoveAtWorks()",
                    line: "240"
                } ));
                t.getFixture().classImplementingIListCastToIListRemoveAtWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Collections.Generic.IListTests",
                    file: "Batch4\\Collections\\Generic\\IListTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IteratorBlockTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IteratorBlockTests)],
        statics: {
            typeReturnedByIteratorBlockReturningIEnumeratorImplementsThatInterfaceAndIDisposable_SPI_1554: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IteratorBlockTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IteratorBlockTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypeReturnedByIteratorBlockReturningIEnumeratorImplementsThatInterfaceAndIDisposable_SPI_1554()",
                    line: "121"
                } ));
                t.getFixture().typeReturnedByIteratorBlockReturningIEnumeratorImplementsThatInterfaceAndIDisposable_SPI_1554();
            },
            enumeratingIEnumeratorIteratorToEndWorks_SPI_1555: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IteratorBlockTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IteratorBlockTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "EnumeratingIEnumeratorIteratorToEndWorks_SPI_1555()",
                    line: "134"
                } ));
                t.getFixture().enumeratingIEnumeratorIteratorToEndWorks_SPI_1555();
            },
            prematureDisposalOfIEnumeratorIteratorExecutesFinallyBlocks_SPI_1555: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IteratorBlockTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IteratorBlockTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "PrematureDisposalOfIEnumeratorIteratorExecutesFinallyBlocks_SPI_1555()",
                    line: "157"
                } ));
                t.getFixture().prematureDisposalOfIEnumeratorIteratorExecutesFinallyBlocks_SPI_1555();
            },
            exceptionInIEnumeratorIteratorBodyExecutesFinallyBlocks_SPI_1554: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IteratorBlockTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IteratorBlockTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ExceptionInIEnumeratorIteratorBodyExecutesFinallyBlocks_SPI_1554()",
                    line: "180"
                } ));
                t.getFixture().exceptionInIEnumeratorIteratorBodyExecutesFinallyBlocks_SPI_1554();
            },
            typeReturnedByIteratorBlockReturningIEnumerableImplementsThatInterface_SPI_1554: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IteratorBlockTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IteratorBlockTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypeReturnedByIteratorBlockReturningIEnumerableImplementsThatInterface_SPI_1554()",
                    line: "215"
                } ));
                t.getFixture().typeReturnedByIteratorBlockReturningIEnumerableImplementsThatInterface_SPI_1554();
            },
            enumeratingIEnumerableIteratorToEndWorks_SPI_1555: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IteratorBlockTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IteratorBlockTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "EnumeratingIEnumerableIteratorToEndWorks_SPI_1555()",
                    line: "227"
                } ));
                t.getFixture().enumeratingIEnumerableIteratorToEndWorks_SPI_1555();
            },
            prematureDisposalOfIEnumerableIteratorExecutesFinallyBlocks_SPI_1555: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IteratorBlockTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IteratorBlockTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "PrematureDisposalOfIEnumerableIteratorExecutesFinallyBlocks_SPI_1555()",
                    line: "259"
                } ));
                t.getFixture().prematureDisposalOfIEnumerableIteratorExecutesFinallyBlocks_SPI_1555();
            },
            exceptionInIEnumerableIteratorBodyExecutesFinallyBlocks_SPI_1554: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IteratorBlockTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IteratorBlockTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ExceptionInIEnumerableIteratorBodyExecutesFinallyBlocks_SPI_1554()",
                    line: "281"
                } ));
                t.getFixture().exceptionInIEnumerableIteratorBodyExecutesFinallyBlocks_SPI_1554();
            },
            enumeratingAnIteratorBlockReturningIEnumerableMultipleTimesUsesTheInitialValuesForParameters: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IteratorBlockTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IteratorBlockTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "EnumeratingAnIteratorBlockReturningIEnumerableMultipleTimesUsesTheInitialValuesForParameters()",
                    line: "317"
                } ));
                t.getFixture().enumeratingAnIteratorBlockReturningIEnumerableMultipleTimesUsesTheInitialValuesForParameters();
            },
            differentGetEnumeratorCallsOnIteratorBlockReturningIEnumerableGetOwnCopiesOfLocals: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.IteratorBlockTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_IteratorBlockTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DifferentGetEnumeratorCallsOnIteratorBlockReturningIEnumerableGetOwnCopiesOfLocals()",
                    line: "338"
                } ));
                t.getFixture().differentGetEnumeratorCallsOnIteratorBlockReturningIEnumerableGetOwnCopiesOfLocals();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Collections.Generic.IteratorBlockTests",
                    file: "Batch4\\Collections\\Generic\\IteratorBlockTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_KeyValuePairTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.KeyValuePairTests)],
        statics: {
            theConstructorWithParametersCanBeUsed: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.KeyValuePairTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_KeyValuePairTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TheConstructorWithParametersCanBeUsed()",
                    line: "12"
                } ));
                t.getFixture().theConstructorWithParametersCanBeUsed();
            },
            typeTestWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.KeyValuePairTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_KeyValuePairTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypeTestWorks()",
                    line: "21"
                } ));
                t.getFixture().typeTestWorks();
            },
            typeTestWorksGeneric_SPI_1556: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.KeyValuePairTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_KeyValuePairTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypeTestWorksGeneric_SPI_1556()",
                    line: "33"
                } ));
                t.getFixture().typeTestWorksGeneric_SPI_1556();
            },
            theDefaultConstructorCanBeUsed_SPI_1556: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.KeyValuePairTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_KeyValuePairTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TheDefaultConstructorCanBeUsed_SPI_1556()",
                    line: "41"
                } ));
                t.getFixture().theDefaultConstructorCanBeUsed_SPI_1556();
            },
            creatingADefaultKeyValuePairCreatesAnInstanceThatIsNotNull_SPI_1556: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.KeyValuePairTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_KeyValuePairTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreatingADefaultKeyValuePairCreatesAnInstanceThatIsNotNull_SPI_1556()",
                    line: "51"
                } ));
                t.getFixture().creatingADefaultKeyValuePairCreatesAnInstanceThatIsNotNull_SPI_1556();
            },
            activatorCreateInstanceWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.KeyValuePairTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_KeyValuePairTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ActivatorCreateInstanceWorks()",
                    line: "62"
                } ));
                t.getFixture().activatorCreateInstanceWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Collections.Generic.KeyValuePairTests",
                    file: "Batch4\\Collections\\Generic\\KeyValuePairTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "31"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "43"
                } ));
                t.getFixture().defaultConstructorWorks();
            },
            constructorWithCapacityWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithCapacityWorks()",
                    line: "50"
                } ));
                t.getFixture().constructorWithCapacityWorks();
            },
            constructingFromArrayWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructingFromArrayWorks()",
                    line: "69"
                } ));
                t.getFixture().constructingFromArrayWorks();
            },
            constructingFromListWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructingFromListWorks()",
                    line: "78"
                } ));
                t.getFixture().constructingFromListWorks();
            },
            constructingFromIEnumerableWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructingFromIEnumerableWorks()",
                    line: "92"
                } ));
                t.getFixture().constructingFromIEnumerableWorks();
            },
            countWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CountWorks()",
                    line: "107"
                } ));
                t.getFixture().countWorks();
            },
            indexingWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexingWorks()",
                    line: "115"
                } ));
                t.getFixture().indexingWorks();
            },
            foreachWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ForeachWorks()",
                    line: "122"
                } ));
                t.getFixture().foreachWorks();
            },
            getEnumeratorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetEnumeratorWorks()",
                    line: "133"
                } ));
                t.getFixture().getEnumeratorWorks();
            },
            addWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AddWorks()",
                    line: "144"
                } ));
                t.getFixture().addWorks();
            },
            addRangeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AddRangeWorks()",
                    line: "152"
                } ));
                t.getFixture().addRangeWorks();
            },
            clearWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ClearWorks()",
                    line: "170"
                } ));
                t.getFixture().clearWorks();
            },
            concatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConcatWorks()",
                    line: "178"
                } ));
                t.getFixture().concatWorks();
            },
            containsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ContainsWorks()",
                    line: "187"
                } ));
                t.getFixture().containsWorks();
            },
            containsUsesEqualsMethod: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ContainsUsesEqualsMethod()",
                    line: "195"
                } ));
                t.getFixture().containsUsesEqualsMethod();
            },
            sliceWithoutEndWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SliceWithoutEndWorks()",
                    line: "234"
                } ));
                t.getFixture().sliceWithoutEndWorks();
            },
            sliceWithEndWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SliceWithEndWorks()",
                    line: "240"
                } ));
                t.getFixture().sliceWithEndWorks();
            },
            indexOfWithoutStartIndexWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexOfWithoutStartIndexWorks()",
                    line: "280"
                } ));
                t.getFixture().indexOfWithoutStartIndexWorks();
            },
            indexOfWithoutStartIndexUsesEqualsMethod: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexOfWithoutStartIndexUsesEqualsMethod()",
                    line: "286"
                } ));
                t.getFixture().indexOfWithoutStartIndexUsesEqualsMethod();
            },
            indexOfWithStartIndexWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexOfWithStartIndexWorks()",
                    line: "294"
                } ));
                t.getFixture().indexOfWithStartIndexWorks();
            },
            indexOfWithStartIndexUsesEqualsMethod: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexOfWithStartIndexUsesEqualsMethod()",
                    line: "300"
                } ));
                t.getFixture().indexOfWithStartIndexUsesEqualsMethod();
            },
            insertWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "InsertWorks()",
                    line: "306"
                } ));
                t.getFixture().insertWorks();
            },
            insertRangeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "InsertRangeWorks()",
                    line: "314"
                } ));
                t.getFixture().insertRangeWorks();
            },
            joinWithoutDelimiterWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "JoinWithoutDelimiterWorks()",
                    line: "322"
                } ));
                t.getFixture().joinWithoutDelimiterWorks();
            },
            joinWithDelimiterWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "JoinWithDelimiterWorks()",
                    line: "328"
                } ));
                t.getFixture().joinWithDelimiterWorks();
            },
            removeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RemoveWorks()",
                    line: "348"
                } ));
                t.getFixture().removeWorks();
            },
            removeReturnsFalseIfTheElementWasNotFound: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RemoveReturnsFalseIfTheElementWasNotFound()",
                    line: "356"
                } ));
                t.getFixture().removeReturnsFalseIfTheElementWasNotFound();
            },
            removeCanRemoveNullItem: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RemoveCanRemoveNullItem()",
                    line: "364"
                } ));
                t.getFixture().removeCanRemoveNullItem();
            },
            removeUsesEqualsMethod: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RemoveUsesEqualsMethod()",
                    line: "372"
                } ));
                t.getFixture().removeUsesEqualsMethod();
            },
            removeAtWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RemoveAtWorks()",
                    line: "382"
                } ));
                t.getFixture().removeAtWorks();
            },
            removeRangeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RemoveRangeWorks()",
                    line: "390"
                } ));
                t.getFixture().removeRangeWorks();
            },
            reverseWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ReverseWorks()",
                    line: "398"
                } ));
                t.getFixture().reverseWorks();
            },
            sortWithDefaultCompareWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SortWithDefaultCompareWorks()",
                    line: "422"
                } ));
                t.getFixture().sortWithDefaultCompareWorks();
            },
            sortWithCompareCallbackWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SortWithCompareCallbackWorks()",
                    line: "430"
                } ));
                t.getFixture().sortWithCompareCallbackWorks();
            },
            sortWithIComparerWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SortWithIComparerWorks()",
                    line: "438"
                } ));
                t.getFixture().sortWithIComparerWorks();
            },
            foreachWhenCastToIEnumerableWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ForeachWhenCastToIEnumerableWorks()",
                    line: "455"
                } ));
                t.getFixture().foreachWhenCastToIEnumerableWorks();
            },
            iEnumerableGetEnumeratorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IEnumerableGetEnumeratorWorks()",
                    line: "467"
                } ));
                t.getFixture().iEnumerableGetEnumeratorWorks();
            },
            iCollectionCountWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ICollectionCountWorks()",
                    line: "479"
                } ));
                t.getFixture().iCollectionCountWorks();
            },
            iCollectionAddWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ICollectionAddWorks()",
                    line: "486"
                } ));
                t.getFixture().iCollectionAddWorks();
            },
            iCollectionClearWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ICollectionClearWorks()",
                    line: "494"
                } ));
                t.getFixture().iCollectionClearWorks();
            },
            iCollectionContainsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ICollectionContainsWorks()",
                    line: "502"
                } ));
                t.getFixture().iCollectionContainsWorks();
            },
            iCollectionContainsUsesEqualsMethod: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ICollectionContainsUsesEqualsMethod()",
                    line: "510"
                } ));
                t.getFixture().iCollectionContainsUsesEqualsMethod();
            },
            iCollectionRemoveWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ICollectionRemoveWorks()",
                    line: "518"
                } ));
                t.getFixture().iCollectionRemoveWorks();
            },
            iCollectionRemoveCanRemoveNullItem: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ICollectionRemoveCanRemoveNullItem()",
                    line: "527"
                } ));
                t.getFixture().iCollectionRemoveCanRemoveNullItem();
            },
            iCollectionRemoveUsesEqualsMethod: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ICollectionRemoveUsesEqualsMethod()",
                    line: "535"
                } ));
                t.getFixture().iCollectionRemoveUsesEqualsMethod();
            },
            iListIndexingWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IListIndexingWorks()",
                    line: "545"
                } ));
                t.getFixture().iListIndexingWorks();
            },
            iListIndexOfWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IListIndexOfWorks()",
                    line: "554"
                } ));
                t.getFixture().iListIndexOfWorks();
            },
            iListIndexOfUsesEqualsMethod: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IListIndexOfUsesEqualsMethod()",
                    line: "562"
                } ));
                t.getFixture().iListIndexOfUsesEqualsMethod();
            },
            iListInsertWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IListInsertWorks()",
                    line: "570"
                } ));
                t.getFixture().iListInsertWorks();
            },
            iListRemoveAtWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IListRemoveAtWorks()",
                    line: "578"
                } ));
                t.getFixture().iListRemoveAtWorks();
            },
            toArrayWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.Generic.ListTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_Generic_ListTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToArrayWorks()",
                    line: "586"
                } ));
                t.getFixture().toArrayWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Collections.Generic.ListTests",
                    file: "Batch4\\Collections\\Generic\\ListTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_ObjectModel_ReadOnlyCollectionTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_ObjectModel_ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "30"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            constructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_ObjectModel_ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWorks()",
                    line: "42"
                } ));
                t.getFixture().constructorWorks();
            },
            countWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_ObjectModel_ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CountWorks()",
                    line: "52"
                } ));
                t.getFixture().countWorks();
            },
            indexingWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_ObjectModel_ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexingWorks()",
                    line: "60"
                } ));
                t.getFixture().indexingWorks();
            },
            foreachWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_ObjectModel_ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ForeachWorks()",
                    line: "68"
                } ));
                t.getFixture().foreachWorks();
            },
            getEnumeratorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_ObjectModel_ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetEnumeratorWorks()",
                    line: "79"
                } ));
                t.getFixture().getEnumeratorWorks();
            },
            containsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_ObjectModel_ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ContainsWorks()",
                    line: "90"
                } ));
                t.getFixture().containsWorks();
            },
            containsUsesEqualsMethod: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_ObjectModel_ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ContainsUsesEqualsMethod()",
                    line: "98"
                } ));
                t.getFixture().containsUsesEqualsMethod();
            },
            indexOfWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_ObjectModel_ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexOfWorks()",
                    line: "106"
                } ));
                t.getFixture().indexOfWorks();
            },
            foreachWhenCastToIEnumerableWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_ObjectModel_ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ForeachWhenCastToIEnumerableWorks()",
                    line: "113"
                } ));
                t.getFixture().foreachWhenCastToIEnumerableWorks();
            },
            iEnumerableGetEnumeratorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_ObjectModel_ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IEnumerableGetEnumeratorWorks()",
                    line: "125"
                } ));
                t.getFixture().iEnumerableGetEnumeratorWorks();
            },
            iCollectionCountWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_ObjectModel_ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ICollectionCountWorks()",
                    line: "137"
                } ));
                t.getFixture().iCollectionCountWorks();
            },
            iCollectionContainsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_ObjectModel_ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ICollectionContainsWorks()",
                    line: "144"
                } ));
                t.getFixture().iCollectionContainsWorks();
            },
            iCollectionContainsUsesEqualsMethod: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_ObjectModel_ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ICollectionContainsUsesEqualsMethod()",
                    line: "152"
                } ));
                t.getFixture().iCollectionContainsUsesEqualsMethod();
            },
            iListIndexingWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_ObjectModel_ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IListIndexingWorks()",
                    line: "160"
                } ));
                t.getFixture().iListIndexingWorks();
            },
            iListIndexOfWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_ObjectModel_ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IListIndexOfWorks()",
                    line: "167"
                } ));
                t.getFixture().iListIndexOfWorks();
            },
            iListIndexOfUsesEqualsMethod: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_ObjectModel_ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IListIndexOfUsesEqualsMethod()",
                    line: "175"
                } ));
                t.getFixture().iListIndexOfUsesEqualsMethod();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Collections.ObjectModel.ReadOnlyCollectionTests",
                    file: "Batch4\\Collections\\ObjectModel\\ReadOnlyCollectionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_ArrayBufferTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.ArrayBufferTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.ArrayBufferTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_ArrayBufferTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "18"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            constructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.ArrayBufferTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_ArrayBufferTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWorks()",
                    line: "27"
                } ));
                t.getFixture().constructorWorks();
            },
            byteLengthPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.ArrayBufferTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_ArrayBufferTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ByteLengthPropertyWorks()",
                    line: "35"
                } ));
                t.getFixture().byteLengthPropertyWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Collections.TypedArrays.ArrayBufferTests",
                    file: "Batch4\\Collections\\TypedArrays\\ArrayBufferTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "19"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            arrayBufferOnlyConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayBufferOnlyConstructorWorks()",
                    line: "28"
                } ));
                t.getFixture().arrayBufferOnlyConstructorWorks();
            },
            arrayBufferAndByteOffsetConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayBufferAndByteOffsetConstructorWorks()",
                    line: "37"
                } ));
                t.getFixture().arrayBufferAndByteOffsetConstructorWorks();
            },
            arrayBufferAndByteOffsetAndByteLengthConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayBufferAndByteOffsetAndByteLengthConstructorWorks()",
                    line: "46"
                } ));
                t.getFixture().arrayBufferAndByteOffsetAndByteLengthConstructorWorks();
            },
            getInt8Works: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetInt8Works()",
                    line: "56"
                } ));
                t.getFixture().getInt8Works();
            },
            getUint8Works: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetUint8Works()",
                    line: "64"
                } ));
                t.getFixture().getUint8Works();
            },
            getInt16Works: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetInt16Works()",
                    line: "72"
                } ));
                t.getFixture().getInt16Works();
            },
            getUint16Works: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetUint16Works()",
                    line: "87"
                } ));
                t.getFixture().getUint16Works();
            },
            getInt32Works: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetInt32Works()",
                    line: "102"
                } ));
                t.getFixture().getInt32Works();
            },
            getUint32Works: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetUint32Works()",
                    line: "117"
                } ));
                t.getFixture().getUint32Works();
            },
            getFloat32Works: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetFloat32Works()",
                    line: "132"
                } ));
                t.getFixture().getFloat32Works();
            },
            getFloat64Works: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetFloat64Works()",
                    line: "141"
                } ));
                t.getFixture().getFloat64Works();
            },
            setInt8Works: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetInt8Works()",
                    line: "165"
                } ));
                t.getFixture().setInt8Works();
            },
            setUint8Works: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetUint8Works()",
                    line: "175"
                } ));
                t.getFixture().setUint8Works();
            },
            setInt16Works: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetInt16Works()",
                    line: "185"
                } ));
                t.getFixture().setInt16Works();
            },
            setUint16Works: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetUint16Works()",
                    line: "199"
                } ));
                t.getFixture().setUint16Works();
            },
            setInt32Works: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetInt32Works()",
                    line: "213"
                } ));
                t.getFixture().setInt32Works();
            },
            setUint32Works: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetUint32Works()",
                    line: "227"
                } ));
                t.getFixture().setUint32Works();
            },
            setFloat32Works: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetFloat32Works()",
                    line: "241"
                } ));
                t.getFixture().setFloat32Works();
            },
            setFloat64Works: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_DataViewTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetFloat64Works()",
                    line: "252"
                } ));
                t.getFixture().setFloat64Works();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Collections.TypedArrays.DataViewTests",
                    file: "Batch4\\Collections\\TypedArrays\\DataViewTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests)],
        statics: {
            typePropertiesAreCorrect_SPI_1559: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect_SPI_1559()",
                    line: "29"
                } ));
                t.getFixture().typePropertiesAreCorrect_SPI_1559();
            },
            lengthConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LengthConstructorWorks()",
                    line: "54"
                } ));
                t.getFixture().lengthConstructorWorks();
            },
            constructorFromIntWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorFromIntWorks()",
                    line: "62"
                } ));
                t.getFixture().constructorFromIntWorks();
            },
            copyConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CopyConstructorWorks()",
                    line: "72"
                } ));
                t.getFixture().copyConstructorWorks();
            },
            arrayBufferConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayBufferConstructorWorks()",
                    line: "82"
                } ));
                t.getFixture().arrayBufferConstructorWorks();
            },
            arrayBufferWithOffsetConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayBufferWithOffsetConstructorWorks()",
                    line: "92"
                } ));
                t.getFixture().arrayBufferWithOffsetConstructorWorks();
            },
            arrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayBufferWithOffsetAndLengthConstructorWorks()",
                    line: "102"
                } ));
                t.getFixture().arrayBufferWithOffsetAndLengthConstructorWorks();
            },
            staticBytesPerElementWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "StaticBytesPerElementWorks()",
                    line: "119"
                } ));
                t.getFixture().staticBytesPerElementWorks();
            },
            lengthWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LengthWorks()",
                    line: "125"
                } ));
                t.getFixture().lengthWorks();
            },
            indexingWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexingWorks()",
                    line: "132"
                } ));
                t.getFixture().indexingWorks();
            },
            setFloat32ArrayWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetFloat32ArrayWorks()",
                    line: "141"
                } ));
                t.getFixture().setFloat32ArrayWorks();
            },
            setFloat32ArrayWithOffsetWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetFloat32ArrayWithOffsetWorks()",
                    line: "149"
                } ));
                t.getFixture().setFloat32ArrayWithOffsetWorks();
            },
            setNormalArrayWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetNormalArrayWorks()",
                    line: "157"
                } ));
                t.getFixture().setNormalArrayWorks();
            },
            setNormalArrayWithOffsetWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetNormalArrayWithOffsetWorks()",
                    line: "165"
                } ));
                t.getFixture().setNormalArrayWithOffsetWorks();
            },
            subarrayWithBeginWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SubarrayWithBeginWorks()",
                    line: "173"
                } ));
                t.getFixture().subarrayWithBeginWorks();
            },
            subarrayWithBeginAndEndWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SubarrayWithBeginAndEndWorks()",
                    line: "183"
                } ));
                t.getFixture().subarrayWithBeginAndEndWorks();
            },
            bufferPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "BufferPropertyWorks()",
                    line: "194"
                } ));
                t.getFixture().bufferPropertyWorks();
            },
            byteOffsetPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ByteOffsetPropertyWorks()",
                    line: "202"
                } ));
                t.getFixture().byteOffsetPropertyWorks();
            },
            byteLengthPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ByteLengthPropertyWorks()",
                    line: "210"
                } ));
                t.getFixture().byteLengthPropertyWorks();
            },
            indexOfWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexOfWorks()",
                    line: "217"
                } ));
                t.getFixture().indexOfWorks();
            },
            containsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ContainsWorks()",
                    line: "226"
                } ));
                t.getFixture().containsWorks();
            },
            foreachWorks_SPI_1401: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ForeachWorks_SPI_1401()",
                    line: "235"
                } ));
                t.getFixture().foreachWorks_SPI_1401();
            },
            getEnumeratorWorks_SPI_1401: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetEnumeratorWorks_SPI_1401()",
                    line: "249"
                } ));
                t.getFixture().getEnumeratorWorks_SPI_1401();
            },
            iEnumerableGetEnumeratorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IEnumerableGetEnumeratorWorks()",
                    line: "263"
                } ));
                t.getFixture().iEnumerableGetEnumeratorWorks();
            },
            iCollectionMethodsWork_SPI_1559: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ICollectionMethodsWork_SPI_1559()",
                    line: "276"
                } ));
                t.getFixture().iCollectionMethodsWork_SPI_1559();
            },
            iListMethodsWork_SPI_1559: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IListMethodsWork_SPI_1559()",
                    line: "289"
                } ));
                t.getFixture().iListMethodsWork_SPI_1559();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Collections.TypedArrays.Float32ArrayTests",
                    file: "Batch4\\Collections\\TypedArrays\\Float32ArrayTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests)],
        statics: {
            typePropertiesAreCorrect_SPI_1559: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect_SPI_1559()",
                    line: "29"
                } ));
                t.getFixture().typePropertiesAreCorrect_SPI_1559();
            },
            lengthConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LengthConstructorWorks()",
                    line: "55"
                } ));
                t.getFixture().lengthConstructorWorks();
            },
            constructorFromIntWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorFromIntWorks()",
                    line: "63"
                } ));
                t.getFixture().constructorFromIntWorks();
            },
            copyConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CopyConstructorWorks()",
                    line: "73"
                } ));
                t.getFixture().copyConstructorWorks();
            },
            arrayBufferConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayBufferConstructorWorks()",
                    line: "83"
                } ));
                t.getFixture().arrayBufferConstructorWorks();
            },
            arrayBufferWithOffsetConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayBufferWithOffsetConstructorWorks()",
                    line: "93"
                } ));
                t.getFixture().arrayBufferWithOffsetConstructorWorks();
            },
            arrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayBufferWithOffsetAndLengthConstructorWorks()",
                    line: "103"
                } ));
                t.getFixture().arrayBufferWithOffsetAndLengthConstructorWorks();
            },
            staticBytesPerElementWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "StaticBytesPerElementWorks()",
                    line: "120"
                } ));
                t.getFixture().staticBytesPerElementWorks();
            },
            lengthWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LengthWorks()",
                    line: "126"
                } ));
                t.getFixture().lengthWorks();
            },
            indexingWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexingWorks()",
                    line: "133"
                } ));
                t.getFixture().indexingWorks();
            },
            setFloat64ArrayWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetFloat64ArrayWorks()",
                    line: "142"
                } ));
                t.getFixture().setFloat64ArrayWorks();
            },
            setFloat64ArrayWithOffsetWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetFloat64ArrayWithOffsetWorks()",
                    line: "150"
                } ));
                t.getFixture().setFloat64ArrayWithOffsetWorks();
            },
            setNormalArrayWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetNormalArrayWorks()",
                    line: "158"
                } ));
                t.getFixture().setNormalArrayWorks();
            },
            setNormalArrayWithOffsetWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetNormalArrayWithOffsetWorks()",
                    line: "166"
                } ));
                t.getFixture().setNormalArrayWithOffsetWorks();
            },
            subarrayWithBeginWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SubarrayWithBeginWorks()",
                    line: "174"
                } ));
                t.getFixture().subarrayWithBeginWorks();
            },
            subarrayWithBeginAndEndWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SubarrayWithBeginAndEndWorks()",
                    line: "184"
                } ));
                t.getFixture().subarrayWithBeginAndEndWorks();
            },
            bufferPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "BufferPropertyWorks()",
                    line: "195"
                } ));
                t.getFixture().bufferPropertyWorks();
            },
            byteOffsetPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ByteOffsetPropertyWorks()",
                    line: "203"
                } ));
                t.getFixture().byteOffsetPropertyWorks();
            },
            byteLengthPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ByteLengthPropertyWorks()",
                    line: "211"
                } ));
                t.getFixture().byteLengthPropertyWorks();
            },
            indexOfWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexOfWorks()",
                    line: "218"
                } ));
                t.getFixture().indexOfWorks();
            },
            containsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ContainsWorks()",
                    line: "227"
                } ));
                t.getFixture().containsWorks();
            },
            foreachWorks_SPI_1401: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ForeachWorks_SPI_1401()",
                    line: "236"
                } ));
                t.getFixture().foreachWorks_SPI_1401();
            },
            getEnumeratorWorks_SPI_1401: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetEnumeratorWorks_SPI_1401()",
                    line: "250"
                } ));
                t.getFixture().getEnumeratorWorks_SPI_1401();
            },
            iEnumerableGetEnumeratorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IEnumerableGetEnumeratorWorks()",
                    line: "264"
                } ));
                t.getFixture().iEnumerableGetEnumeratorWorks();
            },
            iCollectionMethodsWork_SPI_1559: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ICollectionMethodsWork_SPI_1559()",
                    line: "277"
                } ));
                t.getFixture().iCollectionMethodsWork_SPI_1559();
            },
            iListMethodsWork_SPI_1559: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IListMethodsWork_SPI_1559()",
                    line: "290"
                } ));
                t.getFixture().iListMethodsWork_SPI_1559();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Collections.TypedArrays.Float64ArrayTests",
                    file: "Batch4\\Collections\\TypedArrays\\Float64ArrayTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests)],
        statics: {
            typePropertiesAreCorrect_SPI_1559: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect_SPI_1559()",
                    line: "29"
                } ));
                t.getFixture().typePropertiesAreCorrect_SPI_1559();
            },
            lengthConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LengthConstructorWorks()",
                    line: "54"
                } ));
                t.getFixture().lengthConstructorWorks();
            },
            constructorFromIntWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorFromIntWorks()",
                    line: "62"
                } ));
                t.getFixture().constructorFromIntWorks();
            },
            copyConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CopyConstructorWorks()",
                    line: "72"
                } ));
                t.getFixture().copyConstructorWorks();
            },
            arrayBufferConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayBufferConstructorWorks()",
                    line: "82"
                } ));
                t.getFixture().arrayBufferConstructorWorks();
            },
            arrayBufferWithOffsetConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayBufferWithOffsetConstructorWorks()",
                    line: "92"
                } ));
                t.getFixture().arrayBufferWithOffsetConstructorWorks();
            },
            arrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayBufferWithOffsetAndLengthConstructorWorks()",
                    line: "102"
                } ));
                t.getFixture().arrayBufferWithOffsetAndLengthConstructorWorks();
            },
            staticBytesPerElementWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "StaticBytesPerElementWorks()",
                    line: "119"
                } ));
                t.getFixture().staticBytesPerElementWorks();
            },
            lengthWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LengthWorks()",
                    line: "125"
                } ));
                t.getFixture().lengthWorks();
            },
            indexingWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexingWorks()",
                    line: "132"
                } ));
                t.getFixture().indexingWorks();
            },
            setInt16ArrayWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetInt16ArrayWorks()",
                    line: "141"
                } ));
                t.getFixture().setInt16ArrayWorks();
            },
            setInt16ArrayWithOffsetWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetInt16ArrayWithOffsetWorks()",
                    line: "149"
                } ));
                t.getFixture().setInt16ArrayWithOffsetWorks();
            },
            setNormalArrayWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetNormalArrayWorks()",
                    line: "157"
                } ));
                t.getFixture().setNormalArrayWorks();
            },
            setNormalArrayWithOffsetWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetNormalArrayWithOffsetWorks()",
                    line: "165"
                } ));
                t.getFixture().setNormalArrayWithOffsetWorks();
            },
            subarrayWithBeginWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SubarrayWithBeginWorks()",
                    line: "173"
                } ));
                t.getFixture().subarrayWithBeginWorks();
            },
            subarrayWithBeginAndEndWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SubarrayWithBeginAndEndWorks()",
                    line: "183"
                } ));
                t.getFixture().subarrayWithBeginAndEndWorks();
            },
            bufferPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "BufferPropertyWorks()",
                    line: "194"
                } ));
                t.getFixture().bufferPropertyWorks();
            },
            byteOffsetPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ByteOffsetPropertyWorks()",
                    line: "202"
                } ));
                t.getFixture().byteOffsetPropertyWorks();
            },
            byteLengthPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ByteLengthPropertyWorks()",
                    line: "210"
                } ));
                t.getFixture().byteLengthPropertyWorks();
            },
            indexOfWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexOfWorks()",
                    line: "217"
                } ));
                t.getFixture().indexOfWorks();
            },
            containsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ContainsWorks()",
                    line: "226"
                } ));
                t.getFixture().containsWorks();
            },
            foreachWorks_SPI_1401: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ForeachWorks_SPI_1401()",
                    line: "235"
                } ));
                t.getFixture().foreachWorks_SPI_1401();
            },
            getEnumeratorWorks_SPI_1401: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetEnumeratorWorks_SPI_1401()",
                    line: "249"
                } ));
                t.getFixture().getEnumeratorWorks_SPI_1401();
            },
            iEnumerableGetEnumeratorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IEnumerableGetEnumeratorWorks()",
                    line: "263"
                } ));
                t.getFixture().iEnumerableGetEnumeratorWorks();
            },
            iCollectionMethodsWork_SPI_1559: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ICollectionMethodsWork_SPI_1559()",
                    line: "276"
                } ));
                t.getFixture().iCollectionMethodsWork_SPI_1559();
            },
            iListMethodsWork_SPI_1559: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IListMethodsWork_SPI_1559()",
                    line: "289"
                } ));
                t.getFixture().iListMethodsWork_SPI_1559();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Collections.TypedArrays.Int16ArrayTests",
                    file: "Batch4\\Collections\\TypedArrays\\Int16ArrayTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests)],
        statics: {
            typePropertiesAreCorrect_SPI_1559: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect_SPI_1559()",
                    line: "29"
                } ));
                t.getFixture().typePropertiesAreCorrect_SPI_1559();
            },
            lengthConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LengthConstructorWorks()",
                    line: "53"
                } ));
                t.getFixture().lengthConstructorWorks();
            },
            constructorFromIntWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorFromIntWorks()",
                    line: "61"
                } ));
                t.getFixture().constructorFromIntWorks();
            },
            copyConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CopyConstructorWorks()",
                    line: "71"
                } ));
                t.getFixture().copyConstructorWorks();
            },
            arrayBufferConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayBufferConstructorWorks()",
                    line: "81"
                } ));
                t.getFixture().arrayBufferConstructorWorks();
            },
            arrayBufferWithOffsetConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayBufferWithOffsetConstructorWorks()",
                    line: "91"
                } ));
                t.getFixture().arrayBufferWithOffsetConstructorWorks();
            },
            arrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayBufferWithOffsetAndLengthConstructorWorks()",
                    line: "101"
                } ));
                t.getFixture().arrayBufferWithOffsetAndLengthConstructorWorks();
            },
            staticBytesPerElementWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "StaticBytesPerElementWorks()",
                    line: "118"
                } ));
                t.getFixture().staticBytesPerElementWorks();
            },
            lengthWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LengthWorks()",
                    line: "124"
                } ));
                t.getFixture().lengthWorks();
            },
            indexingWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexingWorks()",
                    line: "131"
                } ));
                t.getFixture().indexingWorks();
            },
            setInt32ArrayWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetInt32ArrayWorks()",
                    line: "140"
                } ));
                t.getFixture().setInt32ArrayWorks();
            },
            setInt32ArrayWithOffsetWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetInt32ArrayWithOffsetWorks()",
                    line: "148"
                } ));
                t.getFixture().setInt32ArrayWithOffsetWorks();
            },
            setNormalArrayWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetNormalArrayWorks()",
                    line: "156"
                } ));
                t.getFixture().setNormalArrayWorks();
            },
            setNormalArrayWithOffsetWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetNormalArrayWithOffsetWorks()",
                    line: "164"
                } ));
                t.getFixture().setNormalArrayWithOffsetWorks();
            },
            subarrayWithBeginWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SubarrayWithBeginWorks()",
                    line: "172"
                } ));
                t.getFixture().subarrayWithBeginWorks();
            },
            subarrayWithBeginAndEndWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SubarrayWithBeginAndEndWorks()",
                    line: "182"
                } ));
                t.getFixture().subarrayWithBeginAndEndWorks();
            },
            bufferPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "BufferPropertyWorks()",
                    line: "193"
                } ));
                t.getFixture().bufferPropertyWorks();
            },
            byteOffsetPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ByteOffsetPropertyWorks()",
                    line: "201"
                } ));
                t.getFixture().byteOffsetPropertyWorks();
            },
            byteLengthPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ByteLengthPropertyWorks()",
                    line: "209"
                } ));
                t.getFixture().byteLengthPropertyWorks();
            },
            indexOfWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexOfWorks()",
                    line: "216"
                } ));
                t.getFixture().indexOfWorks();
            },
            containsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ContainsWorks()",
                    line: "225"
                } ));
                t.getFixture().containsWorks();
            },
            foreachWorks_SPI_1401: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ForeachWorks_SPI_1401()",
                    line: "234"
                } ));
                t.getFixture().foreachWorks_SPI_1401();
            },
            getEnumeratorWorks_SPI_1401: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetEnumeratorWorks_SPI_1401()",
                    line: "248"
                } ));
                t.getFixture().getEnumeratorWorks_SPI_1401();
            },
            iEnumerableGetEnumeratorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IEnumerableGetEnumeratorWorks()",
                    line: "262"
                } ));
                t.getFixture().iEnumerableGetEnumeratorWorks();
            },
            iCollectionMethodsWork_SPI_1559: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ICollectionMethodsWork_SPI_1559()",
                    line: "275"
                } ));
                t.getFixture().iCollectionMethodsWork_SPI_1559();
            },
            iListMethodsWork_SPI_1559: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IListMethodsWork_SPI_1559()",
                    line: "288"
                } ));
                t.getFixture().iListMethodsWork_SPI_1559();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Collections.TypedArrays.Int32ArrayTests",
                    file: "Batch4\\Collections\\TypedArrays\\Int32ArrayTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests)],
        statics: {
            typePropertiesAreCorrect_SPI_1559: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect_SPI_1559()",
                    line: "29"
                } ));
                t.getFixture().typePropertiesAreCorrect_SPI_1559();
            },
            lengthConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LengthConstructorWorks()",
                    line: "53"
                } ));
                t.getFixture().lengthConstructorWorks();
            },
            constructorFromIntWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorFromIntWorks()",
                    line: "61"
                } ));
                t.getFixture().constructorFromIntWorks();
            },
            copyConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CopyConstructorWorks()",
                    line: "71"
                } ));
                t.getFixture().copyConstructorWorks();
            },
            arrayBufferConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayBufferConstructorWorks()",
                    line: "81"
                } ));
                t.getFixture().arrayBufferConstructorWorks();
            },
            arrayBufferWithOffsetConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayBufferWithOffsetConstructorWorks()",
                    line: "91"
                } ));
                t.getFixture().arrayBufferWithOffsetConstructorWorks();
            },
            arrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayBufferWithOffsetAndLengthConstructorWorks()",
                    line: "101"
                } ));
                t.getFixture().arrayBufferWithOffsetAndLengthConstructorWorks();
            },
            staticBytesPerElementWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "StaticBytesPerElementWorks()",
                    line: "118"
                } ));
                t.getFixture().staticBytesPerElementWorks();
            },
            lengthWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LengthWorks()",
                    line: "124"
                } ));
                t.getFixture().lengthWorks();
            },
            indexingWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexingWorks()",
                    line: "131"
                } ));
                t.getFixture().indexingWorks();
            },
            setInt8ArrayWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetInt8ArrayWorks()",
                    line: "140"
                } ));
                t.getFixture().setInt8ArrayWorks();
            },
            setInt8ArrayWithOffsetWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetInt8ArrayWithOffsetWorks()",
                    line: "148"
                } ));
                t.getFixture().setInt8ArrayWithOffsetWorks();
            },
            setNormalArrayWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetNormalArrayWorks()",
                    line: "156"
                } ));
                t.getFixture().setNormalArrayWorks();
            },
            setNormalArrayWithOffsetWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetNormalArrayWithOffsetWorks()",
                    line: "164"
                } ));
                t.getFixture().setNormalArrayWithOffsetWorks();
            },
            subarrayWithBeginWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SubarrayWithBeginWorks()",
                    line: "172"
                } ));
                t.getFixture().subarrayWithBeginWorks();
            },
            subarrayWithBeginAndEndWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SubarrayWithBeginAndEndWorks()",
                    line: "182"
                } ));
                t.getFixture().subarrayWithBeginAndEndWorks();
            },
            bufferPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "BufferPropertyWorks()",
                    line: "193"
                } ));
                t.getFixture().bufferPropertyWorks();
            },
            byteOffsetPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ByteOffsetPropertyWorks()",
                    line: "201"
                } ));
                t.getFixture().byteOffsetPropertyWorks();
            },
            byteLengthPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ByteLengthPropertyWorks()",
                    line: "209"
                } ));
                t.getFixture().byteLengthPropertyWorks();
            },
            indexOfWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexOfWorks()",
                    line: "216"
                } ));
                t.getFixture().indexOfWorks();
            },
            containsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ContainsWorks()",
                    line: "225"
                } ));
                t.getFixture().containsWorks();
            },
            foreachWorks_SPI_1401: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ForeachWorks_SPI_1401()",
                    line: "234"
                } ));
                t.getFixture().foreachWorks_SPI_1401();
            },
            getEnumeratorWorks_SPI_1401: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetEnumeratorWorks_SPI_1401()",
                    line: "248"
                } ));
                t.getFixture().getEnumeratorWorks_SPI_1401();
            },
            iEnumerableGetEnumeratorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IEnumerableGetEnumeratorWorks()",
                    line: "262"
                } ));
                t.getFixture().iEnumerableGetEnumeratorWorks();
            },
            iCollectionMethodsWork_SPI_1559: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ICollectionMethodsWork_SPI_1559()",
                    line: "275"
                } ));
                t.getFixture().iCollectionMethodsWork_SPI_1559();
            },
            iListMethodsWork_SPI_1559: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IListMethodsWork_SPI_1559()",
                    line: "288"
                } ));
                t.getFixture().iListMethodsWork_SPI_1559();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Collections.TypedArrays.Int8ArrayTests",
                    file: "Batch4\\Collections\\TypedArrays\\Int8ArrayTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests)],
        statics: {
            typePropertiesAreCorrect_SPI_1559: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect_SPI_1559()",
                    line: "29"
                } ));
                t.getFixture().typePropertiesAreCorrect_SPI_1559();
            },
            lengthConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LengthConstructorWorks()",
                    line: "53"
                } ));
                t.getFixture().lengthConstructorWorks();
            },
            constructorFromIntWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorFromIntWorks()",
                    line: "61"
                } ));
                t.getFixture().constructorFromIntWorks();
            },
            copyConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CopyConstructorWorks()",
                    line: "71"
                } ));
                t.getFixture().copyConstructorWorks();
            },
            arrayBufferConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayBufferConstructorWorks()",
                    line: "81"
                } ));
                t.getFixture().arrayBufferConstructorWorks();
            },
            arrayBufferWithOffsetConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayBufferWithOffsetConstructorWorks()",
                    line: "91"
                } ));
                t.getFixture().arrayBufferWithOffsetConstructorWorks();
            },
            arrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayBufferWithOffsetAndLengthConstructorWorks()",
                    line: "101"
                } ));
                t.getFixture().arrayBufferWithOffsetAndLengthConstructorWorks();
            },
            staticBytesPerElementWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "StaticBytesPerElementWorks()",
                    line: "118"
                } ));
                t.getFixture().staticBytesPerElementWorks();
            },
            lengthWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LengthWorks()",
                    line: "124"
                } ));
                t.getFixture().lengthWorks();
            },
            indexingWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexingWorks()",
                    line: "131"
                } ));
                t.getFixture().indexingWorks();
            },
            setUint16ArrayWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetUint16ArrayWorks()",
                    line: "140"
                } ));
                t.getFixture().setUint16ArrayWorks();
            },
            setUint16ArrayWithOffsetWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetUint16ArrayWithOffsetWorks()",
                    line: "148"
                } ));
                t.getFixture().setUint16ArrayWithOffsetWorks();
            },
            setNormalArrayWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetNormalArrayWorks()",
                    line: "156"
                } ));
                t.getFixture().setNormalArrayWorks();
            },
            setNormalArrayWithOffsetWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetNormalArrayWithOffsetWorks()",
                    line: "164"
                } ));
                t.getFixture().setNormalArrayWithOffsetWorks();
            },
            subarrayWithBeginWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SubarrayWithBeginWorks()",
                    line: "172"
                } ));
                t.getFixture().subarrayWithBeginWorks();
            },
            subarrayWithBeginAndEndWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SubarrayWithBeginAndEndWorks()",
                    line: "182"
                } ));
                t.getFixture().subarrayWithBeginAndEndWorks();
            },
            bufferPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "BufferPropertyWorks()",
                    line: "193"
                } ));
                t.getFixture().bufferPropertyWorks();
            },
            byteOffsetPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ByteOffsetPropertyWorks()",
                    line: "201"
                } ));
                t.getFixture().byteOffsetPropertyWorks();
            },
            byteLengthPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ByteLengthPropertyWorks()",
                    line: "209"
                } ));
                t.getFixture().byteLengthPropertyWorks();
            },
            indexOfWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexOfWorks()",
                    line: "216"
                } ));
                t.getFixture().indexOfWorks();
            },
            containsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ContainsWorks()",
                    line: "225"
                } ));
                t.getFixture().containsWorks();
            },
            foreachWorks_SPI_1401: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ForeachWorks_SPI_1401()",
                    line: "234"
                } ));
                t.getFixture().foreachWorks_SPI_1401();
            },
            getEnumeratorWorks_SPI_1401: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetEnumeratorWorks_SPI_1401()",
                    line: "248"
                } ));
                t.getFixture().getEnumeratorWorks_SPI_1401();
            },
            iEnumerableGetEnumeratorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IEnumerableGetEnumeratorWorks()",
                    line: "262"
                } ));
                t.getFixture().iEnumerableGetEnumeratorWorks();
            },
            iCollectionMethodsWork_SPI_1559: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ICollectionMethodsWork_SPI_1559()",
                    line: "275"
                } ));
                t.getFixture().iCollectionMethodsWork_SPI_1559();
            },
            iListMethodsWork_SPI_1559: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IListMethodsWork_SPI_1559()",
                    line: "288"
                } ));
                t.getFixture().iListMethodsWork_SPI_1559();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint16ArrayTests",
                    file: "Batch4\\Collections\\TypedArrays\\Uint16ArrayTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests)],
        statics: {
            typePropertiesAreCorrect_SPI_1559: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect_SPI_1559()",
                    line: "29"
                } ));
                t.getFixture().typePropertiesAreCorrect_SPI_1559();
            },
            lengthConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LengthConstructorWorks()",
                    line: "53"
                } ));
                t.getFixture().lengthConstructorWorks();
            },
            constructorFromIntWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorFromIntWorks()",
                    line: "61"
                } ));
                t.getFixture().constructorFromIntWorks();
            },
            copyConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CopyConstructorWorks()",
                    line: "71"
                } ));
                t.getFixture().copyConstructorWorks();
            },
            arrayBufferConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayBufferConstructorWorks()",
                    line: "81"
                } ));
                t.getFixture().arrayBufferConstructorWorks();
            },
            arrayBufferWithOffsetConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayBufferWithOffsetConstructorWorks()",
                    line: "91"
                } ));
                t.getFixture().arrayBufferWithOffsetConstructorWorks();
            },
            arrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayBufferWithOffsetAndLengthConstructorWorks()",
                    line: "101"
                } ));
                t.getFixture().arrayBufferWithOffsetAndLengthConstructorWorks();
            },
            staticBytesPerElementWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "StaticBytesPerElementWorks()",
                    line: "118"
                } ));
                t.getFixture().staticBytesPerElementWorks();
            },
            lengthWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LengthWorks()",
                    line: "124"
                } ));
                t.getFixture().lengthWorks();
            },
            indexingWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexingWorks()",
                    line: "131"
                } ));
                t.getFixture().indexingWorks();
            },
            setUint32ArrayWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetUint32ArrayWorks()",
                    line: "140"
                } ));
                t.getFixture().setUint32ArrayWorks();
            },
            setUint32ArrayWithOffsetWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetUint32ArrayWithOffsetWorks()",
                    line: "148"
                } ));
                t.getFixture().setUint32ArrayWithOffsetWorks();
            },
            setNormalArrayWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetNormalArrayWorks()",
                    line: "156"
                } ));
                t.getFixture().setNormalArrayWorks();
            },
            setNormalArrayWithOffsetWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetNormalArrayWithOffsetWorks()",
                    line: "164"
                } ));
                t.getFixture().setNormalArrayWithOffsetWorks();
            },
            subarrayWithBeginWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SubarrayWithBeginWorks()",
                    line: "172"
                } ));
                t.getFixture().subarrayWithBeginWorks();
            },
            subarrayWithBeginAndEndWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SubarrayWithBeginAndEndWorks()",
                    line: "182"
                } ));
                t.getFixture().subarrayWithBeginAndEndWorks();
            },
            bufferPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "BufferPropertyWorks()",
                    line: "193"
                } ));
                t.getFixture().bufferPropertyWorks();
            },
            byteOffsetPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ByteOffsetPropertyWorks()",
                    line: "201"
                } ));
                t.getFixture().byteOffsetPropertyWorks();
            },
            byteLengthPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ByteLengthPropertyWorks()",
                    line: "209"
                } ));
                t.getFixture().byteLengthPropertyWorks();
            },
            indexOfWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexOfWorks()",
                    line: "216"
                } ));
                t.getFixture().indexOfWorks();
            },
            containsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ContainsWorks()",
                    line: "225"
                } ));
                t.getFixture().containsWorks();
            },
            foreachWorks_SPI_1401: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ForeachWorks_SPI_1401()",
                    line: "234"
                } ));
                t.getFixture().foreachWorks_SPI_1401();
            },
            getEnumeratorWorks_SPI_1401: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetEnumeratorWorks_SPI_1401()",
                    line: "248"
                } ));
                t.getFixture().getEnumeratorWorks_SPI_1401();
            },
            iEnumerableGetEnumeratorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IEnumerableGetEnumeratorWorks()",
                    line: "262"
                } ));
                t.getFixture().iEnumerableGetEnumeratorWorks();
            },
            iCollectionMethodsWork_SPI_1559: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ICollectionMethodsWork_SPI_1559()",
                    line: "275"
                } ));
                t.getFixture().iCollectionMethodsWork_SPI_1559();
            },
            iListMethodsWork_SPI_1559: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IListMethodsWork_SPI_1559()",
                    line: "288"
                } ));
                t.getFixture().iListMethodsWork_SPI_1559();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint32ArrayTests",
                    file: "Batch4\\Collections\\TypedArrays\\Uint32ArrayTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests)],
        statics: {
            typePropertiesAreCorrect_SPI_1559: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect_SPI_1559()",
                    line: "29"
                } ));
                t.getFixture().typePropertiesAreCorrect_SPI_1559();
            },
            lengthConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LengthConstructorWorks()",
                    line: "53"
                } ));
                t.getFixture().lengthConstructorWorks();
            },
            constructorFromIntWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorFromIntWorks()",
                    line: "61"
                } ));
                t.getFixture().constructorFromIntWorks();
            },
            copyConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CopyConstructorWorks()",
                    line: "71"
                } ));
                t.getFixture().copyConstructorWorks();
            },
            arrayBufferConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayBufferConstructorWorks()",
                    line: "81"
                } ));
                t.getFixture().arrayBufferConstructorWorks();
            },
            arrayBufferWithOffsetConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayBufferWithOffsetConstructorWorks()",
                    line: "91"
                } ));
                t.getFixture().arrayBufferWithOffsetConstructorWorks();
            },
            arrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayBufferWithOffsetAndLengthConstructorWorks()",
                    line: "101"
                } ));
                t.getFixture().arrayBufferWithOffsetAndLengthConstructorWorks();
            },
            staticBytesPerElementWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "StaticBytesPerElementWorks()",
                    line: "118"
                } ));
                t.getFixture().staticBytesPerElementWorks();
            },
            lengthWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LengthWorks()",
                    line: "124"
                } ));
                t.getFixture().lengthWorks();
            },
            indexingWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexingWorks()",
                    line: "131"
                } ));
                t.getFixture().indexingWorks();
            },
            setUint8ArrayWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetUint8ArrayWorks()",
                    line: "140"
                } ));
                t.getFixture().setUint8ArrayWorks();
            },
            setUint8ArrayWithOffsetWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetUint8ArrayWithOffsetWorks()",
                    line: "148"
                } ));
                t.getFixture().setUint8ArrayWithOffsetWorks();
            },
            setNormalArrayWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetNormalArrayWorks()",
                    line: "156"
                } ));
                t.getFixture().setNormalArrayWorks();
            },
            setNormalArrayWithOffsetWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetNormalArrayWithOffsetWorks()",
                    line: "164"
                } ));
                t.getFixture().setNormalArrayWithOffsetWorks();
            },
            subarrayWithBeginWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SubarrayWithBeginWorks()",
                    line: "172"
                } ));
                t.getFixture().subarrayWithBeginWorks();
            },
            subarrayWithBeginAndEndWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SubarrayWithBeginAndEndWorks()",
                    line: "182"
                } ));
                t.getFixture().subarrayWithBeginAndEndWorks();
            },
            bufferPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "BufferPropertyWorks()",
                    line: "193"
                } ));
                t.getFixture().bufferPropertyWorks();
            },
            byteOffsetPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ByteOffsetPropertyWorks()",
                    line: "201"
                } ));
                t.getFixture().byteOffsetPropertyWorks();
            },
            byteLengthPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ByteLengthPropertyWorks()",
                    line: "209"
                } ));
                t.getFixture().byteLengthPropertyWorks();
            },
            indexOfWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexOfWorks()",
                    line: "216"
                } ));
                t.getFixture().indexOfWorks();
            },
            containsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ContainsWorks()",
                    line: "225"
                } ));
                t.getFixture().containsWorks();
            },
            foreachWorks_SPI_1401: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ForeachWorks_SPI_1401()",
                    line: "234"
                } ));
                t.getFixture().foreachWorks_SPI_1401();
            },
            getEnumeratorWorks_SPI_1401: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetEnumeratorWorks_SPI_1401()",
                    line: "248"
                } ));
                t.getFixture().getEnumeratorWorks_SPI_1401();
            },
            iEnumerableGetEnumeratorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IEnumerableGetEnumeratorWorks()",
                    line: "262"
                } ));
                t.getFixture().iEnumerableGetEnumeratorWorks();
            },
            iCollectionMethodsWork_SPI_1559: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ICollectionMethodsWork_SPI_1559()",
                    line: "275"
                } ));
                t.getFixture().iCollectionMethodsWork_SPI_1559();
            },
            iListMethodsWork_SPI_1559: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IListMethodsWork_SPI_1559()",
                    line: "288"
                } ));
                t.getFixture().iListMethodsWork_SPI_1559();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ArrayTests",
                    file: "Batch4\\Collections\\TypedArrays\\Uint8ArrayTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests)],
        statics: {
            typePropertiesAreCorrect_SPI_1560: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect_SPI_1560()",
                    line: "29"
                } ));
                t.getFixture().typePropertiesAreCorrect_SPI_1560();
            },
            typePropertiesAreCorrect_SPI_1559: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect_SPI_1559()",
                    line: "37"
                } ));
                t.getFixture().typePropertiesAreCorrect_SPI_1559();
            },
            lengthConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LengthConstructorWorks()",
                    line: "62"
                } ));
                t.getFixture().lengthConstructorWorks();
            },
            constructorFromIntWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorFromIntWorks()",
                    line: "70"
                } ));
                t.getFixture().constructorFromIntWorks();
            },
            constructorFromUint8ArrayWorks_SPI_TODO: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorFromUint8ArrayWorks_SPI_TODO()",
                    line: "80"
                } ));
                t.getFixture().constructorFromUint8ArrayWorks_SPI_TODO();
            },
            copyConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CopyConstructorWorks()",
                    line: "90"
                } ));
                t.getFixture().copyConstructorWorks();
            },
            arrayBufferConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayBufferConstructorWorks()",
                    line: "100"
                } ));
                t.getFixture().arrayBufferConstructorWorks();
            },
            arrayBufferWithOffsetConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayBufferWithOffsetConstructorWorks()",
                    line: "110"
                } ));
                t.getFixture().arrayBufferWithOffsetConstructorWorks();
            },
            arrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayBufferWithOffsetAndLengthConstructorWorks()",
                    line: "120"
                } ));
                t.getFixture().arrayBufferWithOffsetAndLengthConstructorWorks();
            },
            staticBytesPerElementWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "StaticBytesPerElementWorks()",
                    line: "137"
                } ));
                t.getFixture().staticBytesPerElementWorks();
            },
            lengthWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LengthWorks()",
                    line: "143"
                } ));
                t.getFixture().lengthWorks();
            },
            indexingWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexingWorks()",
                    line: "150"
                } ));
                t.getFixture().indexingWorks();
            },
            setUint8ClampedArrayWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetUint8ClampedArrayWorks()",
                    line: "179"
                } ));
                t.getFixture().setUint8ClampedArrayWorks();
            },
            setUint8ClampedArrayWithOffsetWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetUint8ClampedArrayWithOffsetWorks()",
                    line: "187"
                } ));
                t.getFixture().setUint8ClampedArrayWithOffsetWorks();
            },
            setNormalArrayWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetNormalArrayWorks()",
                    line: "195"
                } ));
                t.getFixture().setNormalArrayWorks();
            },
            setNormalArrayWithOffsetWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetNormalArrayWithOffsetWorks()",
                    line: "203"
                } ));
                t.getFixture().setNormalArrayWithOffsetWorks();
            },
            subarrayWithBeginWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SubarrayWithBeginWorks()",
                    line: "211"
                } ));
                t.getFixture().subarrayWithBeginWorks();
            },
            subarrayWithBeginAndEndWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SubarrayWithBeginAndEndWorks()",
                    line: "221"
                } ));
                t.getFixture().subarrayWithBeginAndEndWorks();
            },
            bufferPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "BufferPropertyWorks()",
                    line: "232"
                } ));
                t.getFixture().bufferPropertyWorks();
            },
            byteOffsetPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ByteOffsetPropertyWorks()",
                    line: "240"
                } ));
                t.getFixture().byteOffsetPropertyWorks();
            },
            byteLengthPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ByteLengthPropertyWorks()",
                    line: "248"
                } ));
                t.getFixture().byteLengthPropertyWorks();
            },
            indexOfWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexOfWorks()",
                    line: "255"
                } ));
                t.getFixture().indexOfWorks();
            },
            containsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ContainsWorks()",
                    line: "264"
                } ));
                t.getFixture().containsWorks();
            },
            foreachWorks_SPI_1401: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ForeachWorks_SPI_1401()",
                    line: "273"
                } ));
                t.getFixture().foreachWorks_SPI_1401();
            },
            getEnumeratorWorks_SPI_1401: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetEnumeratorWorks_SPI_1401()",
                    line: "287"
                } ));
                t.getFixture().getEnumeratorWorks_SPI_1401();
            },
            iEnumerableGetEnumeratorWorks_SPI_1560: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IEnumerableGetEnumeratorWorks_SPI_1560()",
                    line: "301"
                } ));
                t.getFixture().iEnumerableGetEnumeratorWorks_SPI_1560();
            },
            iCollectionMethodsWork_SPI_1559_1560: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ICollectionMethodsWork_SPI_1559_1560()",
                    line: "319"
                } ));
                t.getFixture().iCollectionMethodsWork_SPI_1559_1560();
            },
            iListMethodsWork_SPI_1559_1560: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Collections_TypedArrays_Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IListMethodsWork_SPI_1559_1560()",
                    line: "332"
                } ));
                t.getFixture().iListMethodsWork_SPI_1559_1560();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Collections.TypedArrays.Uint8ClampedArrayTests",
                    file: "Batch4\\Collections\\TypedArrays\\Uint8ClampedArrayTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ConvertTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ConvertTests)],
        statics: {
            toBase64StringWithOnlyArrayWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ConvertTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ConvertTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToBase64StringWithOnlyArrayWorks()",
                    line: "21"
                } ));
                t.getFixture().toBase64StringWithOnlyArrayWorks();
            },
            toBase64StringWithArrayAndFormattingOptionsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ConvertTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ConvertTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToBase64StringWithArrayAndFormattingOptionsWorks()",
                    line: "34"
                } ));
                t.getFixture().toBase64StringWithArrayAndFormattingOptionsWorks();
            },
            toBase64StringWithArrayAndOffsetAndLengthWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ConvertTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ConvertTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToBase64StringWithArrayAndOffsetAndLengthWorks()",
                    line: "45"
                } ));
                t.getFixture().toBase64StringWithArrayAndOffsetAndLengthWorks();
            },
            toBase64StringWithArrayAndOffsetAndLengthAndFormattingOptionsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ConvertTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ConvertTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToBase64StringWithArrayAndOffsetAndLengthAndFormattingOptionsWorks()",
                    line: "52"
                } ));
                t.getFixture().toBase64StringWithArrayAndOffsetAndLengthAndFormattingOptionsWorks();
            },
            fromBase64StringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ConvertTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ConvertTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "FromBase64StringWorks()",
                    line: "63"
                } ));
                t.getFixture().fromBase64StringWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.ConvertTests",
                    file: "Batch4\\ConvertTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_CultureInfoTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.CultureInfoTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.CultureInfoTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_CultureInfoTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "10"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            getFormatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.CultureInfoTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_CultureInfoTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetFormatWorks()",
                    line: "20"
                } ));
                t.getFixture().getFormatWorks();
            },
            invariantWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.CultureInfoTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_CultureInfoTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "InvariantWorks()",
                    line: "29"
                } ));
                t.getFixture().invariantWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.CultureInfoTests",
                    file: "Batch4\\CultureInfoTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DateTimeFormatInfoTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.DateTimeFormatInfoTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.DateTimeFormatInfoTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DateTimeFormatInfoTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "10"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            getFormatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.DateTimeFormatInfoTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DateTimeFormatInfoTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetFormatWorks()",
                    line: "20"
                } ));
                t.getFixture().getFormatWorks();
            },
            invariantWorks_SPI_1562: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.DateTimeFormatInfoTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DateTimeFormatInfoTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "InvariantWorks_SPI_1562()",
                    line: "28"
                } ));
                t.getFixture().invariantWorks_SPI_1562();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.DateTimeFormatInfoTests",
                    file: "Batch4\\DateTimeFormatInfoTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "30"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            creatingAndInvokingADelegateWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreatingAndInvokingADelegateWorks()",
                    line: "48"
                } ));
                t.getFixture().creatingAndInvokingADelegateWorks();
            },
            createWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreateWorks()",
                    line: "60"
                } ));
                t.getFixture().createWorks();
            },
            combineWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CombineWorks()",
                    line: "70"
                } ));
                t.getFixture().combineWorks();
            },
            combineDoesAddsDuplicateDelegates: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CombineDoesAddsDuplicateDelegates()",
                    line: "79"
                } ));
                t.getFixture().combineDoesAddsDuplicateDelegates();
            },
            combineDoesNotAffectOriginal_SPI_1563: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CombineDoesNotAffectOriginal_SPI_1563()",
                    line: "92"
                } ));
                t.getFixture().combineDoesNotAffectOriginal_SPI_1563();
            },
            addWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AddWorks()",
                    line: "109"
                } ));
                t.getFixture().addWorks();
            },
            addAssignWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AddAssignWorks()",
                    line: "118"
                } ));
                t.getFixture().addAssignWorks();
            },
            removeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RemoveWorks()",
                    line: "128"
                } ));
                t.getFixture().removeWorks();
            },
            removeDoesNotAffectOriginal_SPI_1563: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RemoveDoesNotAffectOriginal_SPI_1563()",
                    line: "139"
                } ));
                t.getFixture().removeDoesNotAffectOriginal_SPI_1563();
            },
            subtractingDelegateFromItselfReturnsNull: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SubtractingDelegateFromItselfReturnsNull()",
                    line: "161"
                } ));
                t.getFixture().subtractingDelegateFromItselfReturnsNull();
            },
            removeWorksWithMethodGroupConversion_SPI_1563: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RemoveWorksWithMethodGroupConversion_SPI_1563()",
                    line: "175"
                } ));
                t.getFixture().removeWorksWithMethodGroupConversion_SPI_1563();
            },
            subtractWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SubtractWorks()",
                    line: "191"
                } ));
                t.getFixture().subtractWorks();
            },
            subtractAssignWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SubtractAssignWorks()",
                    line: "202"
                } ));
                t.getFixture().subtractAssignWorks();
            },
            cloneWorks_SPI_1563: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CloneWorks_SPI_1563()",
                    line: "213"
                } ));
                t.getFixture().cloneWorks_SPI_1563();
            },
            cloningDelegateToADifferentTypeIsANoOp: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CloningDelegateToADifferentTypeIsANoOp()",
                    line: "249"
                } ));
                t.getFixture().cloningDelegateToADifferentTypeIsANoOp();
            },
            cloningDelegateToTheSameTypeCreatesANewClone_SPI_1563: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CloningDelegateToTheSameTypeCreatesANewClone_SPI_1563()",
                    line: "259"
                } ));
                t.getFixture().cloningDelegateToTheSameTypeCreatesANewClone_SPI_1563();
            },
            equalityAndInequalityOperatorsAndEqualsMethod_SPI_1563: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "EqualityAndInequalityOperatorsAndEqualsMethod_SPI_1563()",
                    line: "291"
                } ));
                t.getFixture().equalityAndInequalityOperatorsAndEqualsMethod_SPI_1563();
            },
            getInvocationListWorksForImportedFunction_SPI_1563: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetInvocationListWorksForImportedFunction_SPI_1563()",
                    line: "340"
                } ));
                t.getFixture().getInvocationListWorksForImportedFunction_SPI_1563();
            },
            getInvocationListWorksForMulticastDelegate: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.DelegateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_DelegateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetInvocationListWorksForMulticastDelegate()",
                    line: "353"
                } ));
                t.getFixture().getInvocationListWorksForMulticastDelegate();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.DelegateTests",
                    file: "Batch4\\DelegateTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Diagnostics_Contracts_ContractTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests)],
        statics: {
            assume: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Diagnostics_Contracts_ContractTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "Assume()",
                    line: "47"
                } ));
                t.getFixture().assume();
            },
            assumeWithUserMessage: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Diagnostics_Contracts_ContractTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AssumeWithUserMessage()",
                    line: "56"
                } ));
                t.getFixture().assumeWithUserMessage();
            },
            assert: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Diagnostics_Contracts_ContractTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "Assert()",
                    line: "65"
                } ));
                t.getFixture().assert();
            },
            assertWithUserMessage: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Diagnostics_Contracts_ContractTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AssertWithUserMessage()",
                    line: "74"
                } ));
                t.getFixture().assertWithUserMessage();
            },
            requires: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Diagnostics_Contracts_ContractTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "Requires()",
                    line: "83"
                } ));
                t.getFixture().requires();
            },
            requiresWithUserMessage: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Diagnostics_Contracts_ContractTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RequiresWithUserMessage()",
                    line: "92"
                } ));
                t.getFixture().requiresWithUserMessage();
            },
            requiresWithTypeException: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Diagnostics_Contracts_ContractTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RequiresWithTypeException()",
                    line: "101"
                } ));
                t.getFixture().requiresWithTypeException();
            },
            requiredWithTypeExceptionAndUserMessage: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Diagnostics_Contracts_ContractTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RequiredWithTypeExceptionAndUserMessage()",
                    line: "109"
                } ));
                t.getFixture().requiredWithTypeExceptionAndUserMessage();
            },
            forAll: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Diagnostics_Contracts_ContractTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ForAll()",
                    line: "117"
                } ));
                t.getFixture().forAll();
            },
            forAllWithCollection: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Diagnostics_Contracts_ContractTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ForAllWithCollection()",
                    line: "126"
                } ));
                t.getFixture().forAllWithCollection();
            },
            exists: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Diagnostics_Contracts_ContractTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "Exists()",
                    line: "135"
                } ));
                t.getFixture().exists();
            },
            existsWithCollection: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Diagnostics_Contracts_ContractTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ExistsWithCollection()",
                    line: "144"
                } ));
                t.getFixture().existsWithCollection();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Diagnostics.Contracts.ContractTests",
                    file: "Batch4\\Diagnostics\\Contracts\\ContractTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_EnvironmentTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.EnvironmentTests)],
        statics: {
            newLineIsAStringContainingOnlyTheNewLineChar: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.EnvironmentTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_EnvironmentTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NewLineIsAStringContainingOnlyTheNewLineChar()",
                    line: "9"
                } ));
                t.getFixture().newLineIsAStringContainingOnlyTheNewLineChar();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.EnvironmentTests",
                    file: "Batch4\\EnvironmentTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_AggregateExceptionTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.AggregateExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.AggregateExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_AggregateExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "19"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.AggregateExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_AggregateExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "33"
                } ));
                t.getFixture().defaultConstructorWorks();
            },
            constructorWithIEnumerableInnerExceptionsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.AggregateExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_AggregateExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithIEnumerableInnerExceptionsWorks()",
                    line: "44"
                } ));
                t.getFixture().constructorWithIEnumerableInnerExceptionsWorks();
            },
            constructorWithInnerExceptionArrayWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.AggregateExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_AggregateExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithInnerExceptionArrayWorks()",
                    line: "75"
                } ));
                t.getFixture().constructorWithInnerExceptionArrayWorks();
            },
            constructorWithMessageWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.AggregateExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_AggregateExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithMessageWorks()",
                    line: "106"
                } ));
                t.getFixture().constructorWithMessageWorks();
            },
            constructorWithMessageAndIEnumerableInnerExceptionsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.AggregateExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_AggregateExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithMessageAndIEnumerableInnerExceptionsWorks()",
                    line: "117"
                } ));
                t.getFixture().constructorWithMessageAndIEnumerableInnerExceptionsWorks();
            },
            constructorWithMessageAndInnerExceptionArrayWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.AggregateExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_AggregateExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionArrayWorks()",
                    line: "148"
                } ));
                t.getFixture().constructorWithMessageAndInnerExceptionArrayWorks();
            },
            flattenWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.AggregateExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_AggregateExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "FlattenWorks()",
                    line: "179"
                } ));
                t.getFixture().flattenWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Exceptions.AggregateExceptionTests",
                    file: "Batch4\\Exceptions\\AggregateExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_AmbiguousMatchExceptionTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.AmbiguousMatchExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.AmbiguousMatchExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_AmbiguousMatchExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "11"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.AmbiguousMatchExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_AmbiguousMatchExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "25"
                } ));
                t.getFixture().defaultConstructorWorks();
            },
            constructorWithMessageWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.AmbiguousMatchExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_AmbiguousMatchExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithMessageWorks()",
                    line: "34"
                } ));
                t.getFixture().constructorWithMessageWorks();
            },
            constructorWithMessageAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.AmbiguousMatchExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_AmbiguousMatchExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionWorks()",
                    line: "43"
                } ));
                t.getFixture().constructorWithMessageAndInnerExceptionWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Exceptions.AmbiguousMatchExceptionTests",
                    file: "Batch4\\Exceptions\\AmbiguousMatchExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentExceptionTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "11"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "25"
                } ));
                t.getFixture().defaultConstructorWorks();
            },
            constructorWithMessageWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithMessageWorks()",
                    line: "35"
                } ));
                t.getFixture().constructorWithMessageWorks();
            },
            constructorWithMessageAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionWorks()",
                    line: "45"
                } ));
                t.getFixture().constructorWithMessageAndInnerExceptionWorks();
            },
            constructorWithMessageAndParamNameWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithMessageAndParamNameWorks()",
                    line: "56"
                } ));
                t.getFixture().constructorWithMessageAndParamNameWorks();
            },
            constructorWithMessageAndParamNameAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithMessageAndParamNameAndInnerExceptionWorks()",
                    line: "66"
                } ));
                t.getFixture().constructorWithMessageAndParamNameAndInnerExceptionWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Exceptions.ArgumentExceptionTests",
                    file: "Batch4\\Exceptions\\ArgumentExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentNullExceptionTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentNullExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentNullExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentNullExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "9"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentNullExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentNullExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "24"
                } ));
                t.getFixture().defaultConstructorWorks();
            },
            constructorWithParamNameWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentNullExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentNullExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithParamNameWorks()",
                    line: "34"
                } ));
                t.getFixture().constructorWithParamNameWorks();
            },
            constructorWithParamNameAndMessageWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentNullExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentNullExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithParamNameAndMessageWorks()",
                    line: "44"
                } ));
                t.getFixture().constructorWithParamNameAndMessageWorks();
            },
            constructorWithMessageAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentNullExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentNullExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionWorks()",
                    line: "54"
                } ));
                t.getFixture().constructorWithMessageAndInnerExceptionWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Exceptions.ArgumentNullExceptionTests",
                    file: "Batch4\\Exceptions\\ArgumentNullExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentOutOfRangeExceptionTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentOutOfRangeExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentOutOfRangeExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentOutOfRangeExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "9"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentOutOfRangeExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentOutOfRangeExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "24"
                } ));
                t.getFixture().defaultConstructorWorks();
            },
            constructorWithParamNameWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentOutOfRangeExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentOutOfRangeExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithParamNameWorks()",
                    line: "35"
                } ));
                t.getFixture().constructorWithParamNameWorks();
            },
            constructorWithParamNameAndMessageWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentOutOfRangeExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentOutOfRangeExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithParamNameAndMessageWorks()",
                    line: "46"
                } ));
                t.getFixture().constructorWithParamNameAndMessageWorks();
            },
            constructorWithMessageAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentOutOfRangeExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentOutOfRangeExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionWorks()",
                    line: "57"
                } ));
                t.getFixture().constructorWithMessageAndInnerExceptionWorks();
            },
            constructorWithParamNameAndActualValueAndMessageWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentOutOfRangeExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentOutOfRangeExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithParamNameAndActualValueAndMessageWorks()",
                    line: "69"
                } ));
                t.getFixture().constructorWithParamNameAndActualValueAndMessageWorks();
            },
            rangeErrorIsConvertedToArgumentOutOfRangeException: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArgumentOutOfRangeExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArgumentOutOfRangeExceptionTests, 2, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RangeErrorIsConvertedToArgumentOutOfRangeException()",
                    line: "80"
                } ));
                t.getFixture().rangeErrorIsConvertedToArgumentOutOfRangeException();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Exceptions.ArgumentOutOfRangeExceptionTests",
                    file: "Batch4\\Exceptions\\ArgumentOutOfRangeExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArithmeticExceptionTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArithmeticExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArithmeticExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArithmeticExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "9"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArithmeticExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArithmeticExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "23"
                } ));
                t.getFixture().defaultConstructorWorks();
            },
            constructorWithMessageWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArithmeticExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArithmeticExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithMessageWorks()",
                    line: "32"
                } ));
                t.getFixture().constructorWithMessageWorks();
            },
            constructorWithMessageAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ArithmeticExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ArithmeticExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionWorks()",
                    line: "41"
                } ));
                t.getFixture().constructorWithMessageAndInnerExceptionWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Exceptions.ArithmeticExceptionTests",
                    file: "Batch4\\Exceptions\\ArithmeticExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ContractExceptionTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ContractExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ContractExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ContractExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "10"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ContractExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ContractExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "24"
                } ));
                t.getFixture().defaultConstructorWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Exceptions.ContractExceptionTests",
                    file: "Batch4\\Exceptions\\ContractExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_DivideByZeroExceptionTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.DivideByZeroExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.DivideByZeroExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_DivideByZeroExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "9"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.DivideByZeroExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_DivideByZeroExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "23"
                } ));
                t.getFixture().defaultConstructorWorks();
            },
            constructorWithMessageWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.DivideByZeroExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_DivideByZeroExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithMessageWorks()",
                    line: "32"
                } ));
                t.getFixture().constructorWithMessageWorks();
            },
            constructorWithMessageAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.DivideByZeroExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_DivideByZeroExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionWorks()",
                    line: "41"
                } ));
                t.getFixture().constructorWithMessageAndInnerExceptionWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Exceptions.DivideByZeroExceptionTests",
                    file: "Batch4\\Exceptions\\DivideByZeroExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ErrorExceptionTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ErrorExceptionTests)],
        statics: {
            typePropertiesAreCorrect_SPI_1564: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ErrorExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ErrorExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect_SPI_1564()",
                    line: "9"
                } ));
                t.getFixture().typePropertiesAreCorrect_SPI_1564();
            },
            errorOnlyConstructorWorks_SPI_1564: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ErrorExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ErrorExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ErrorOnlyConstructorWorks_SPI_1564()",
                    line: "30"
                } ));
                t.getFixture().errorOnlyConstructorWorks_SPI_1564();
            },
            errorAndMessageAndInnerExceptionConstructorWorks_SPI_1564: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ErrorExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ErrorExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ErrorAndMessageAndInnerExceptionConstructorWorks_SPI_1564()",
                    line: "62"
                } ));
                t.getFixture().errorAndMessageAndInnerExceptionConstructorWorks_SPI_1564();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Exceptions.ErrorExceptionTests",
                    file: "Batch4\\Exceptions\\JsErrorExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ExceptionTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "37"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            defaultConstructorWorks_SPI_1669: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorWorks_SPI_1669()",
                    line: "50"
                } ));
                t.getFixture().defaultConstructorWorks_SPI_1669();
            },
            constructorWithMessageWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithMessageWorks()",
                    line: "61"
                } ));
                t.getFixture().constructorWithMessageWorks();
            },
            constructorWithMessageAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionWorks()",
                    line: "71"
                } ));
                t.getFixture().constructorWithMessageAndInnerExceptionWorks();
            },
            messagePropertyCanBeOverridden: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MessagePropertyCanBeOverridden()",
                    line: "82"
                } ));
                t.getFixture().messagePropertyCanBeOverridden();
            },
            innerExceptionPropertyCanBeOverridden: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.ExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_ExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "InnerExceptionPropertyCanBeOverridden()",
                    line: "89"
                } ));
                t.getFixture().innerExceptionPropertyCanBeOverridden();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Exceptions.ExceptionTests",
                    file: "Batch4\\Exceptions\\ExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_FormatExceptionTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.FormatExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.FormatExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_FormatExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "9"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.FormatExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_FormatExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "23"
                } ));
                t.getFixture().defaultConstructorWorks();
            },
            constructorWithMessageWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.FormatExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_FormatExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithMessageWorks()",
                    line: "32"
                } ));
                t.getFixture().constructorWithMessageWorks();
            },
            constructorWithMessageAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.FormatExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_FormatExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionWorks()",
                    line: "41"
                } ));
                t.getFixture().constructorWithMessageAndInnerExceptionWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Exceptions.FormatExceptionTests",
                    file: "Batch4\\Exceptions\\FormatExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_InvalidCastExceptionTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.InvalidCastExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.InvalidCastExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_InvalidCastExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "9"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.InvalidCastExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_InvalidCastExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "23"
                } ));
                t.getFixture().defaultConstructorWorks();
            },
            constructorWithMessageWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.InvalidCastExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_InvalidCastExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithMessageWorks()",
                    line: "32"
                } ));
                t.getFixture().constructorWithMessageWorks();
            },
            constructorWithMessageAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.InvalidCastExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_InvalidCastExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionWorks()",
                    line: "41"
                } ));
                t.getFixture().constructorWithMessageAndInnerExceptionWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Exceptions.InvalidCastExceptionTests",
                    file: "Batch4\\Exceptions\\InvalidCastExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_InvalidOperationExceptionTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.InvalidOperationExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.InvalidOperationExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_InvalidOperationExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "9"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.InvalidOperationExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_InvalidOperationExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "23"
                } ));
                t.getFixture().defaultConstructorWorks();
            },
            constructorWithMessageWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.InvalidOperationExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_InvalidOperationExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithMessageWorks()",
                    line: "32"
                } ));
                t.getFixture().constructorWithMessageWorks();
            },
            constructorWithMessageAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.InvalidOperationExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_InvalidOperationExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionWorks()",
                    line: "41"
                } ));
                t.getFixture().constructorWithMessageAndInnerExceptionWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Exceptions.InvalidOperationExceptionTests",
                    file: "Batch4\\Exceptions\\InvalidOperationExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_KeyNotFoundExceptionTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.KeyNotFoundExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.KeyNotFoundExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_KeyNotFoundExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "10"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.KeyNotFoundExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_KeyNotFoundExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "24"
                } ));
                t.getFixture().defaultConstructorWorks();
            },
            constructorWithMessageWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.KeyNotFoundExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_KeyNotFoundExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithMessageWorks()",
                    line: "33"
                } ));
                t.getFixture().constructorWithMessageWorks();
            },
            constructorWithMessageAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.KeyNotFoundExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_KeyNotFoundExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionWorks()",
                    line: "42"
                } ));
                t.getFixture().constructorWithMessageAndInnerExceptionWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Exceptions.KeyNotFoundExceptionTests",
                    file: "Batch4\\Exceptions\\KeyNotFoundExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_NotImplementedExceptionTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.NotImplementedExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.NotImplementedExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_NotImplementedExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "9"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.NotImplementedExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_NotImplementedExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "23"
                } ));
                t.getFixture().defaultConstructorWorks();
            },
            constructorWithMessageWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.NotImplementedExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_NotImplementedExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithMessageWorks()",
                    line: "32"
                } ));
                t.getFixture().constructorWithMessageWorks();
            },
            constructorWithMessageAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.NotImplementedExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_NotImplementedExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionWorks()",
                    line: "41"
                } ));
                t.getFixture().constructorWithMessageAndInnerExceptionWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Exceptions.NotImplementedExceptionTests",
                    file: "Batch4\\Exceptions\\NotImplementedExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_NotSupportedExceptionTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.NotSupportedExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.NotSupportedExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_NotSupportedExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "9"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.NotSupportedExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_NotSupportedExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "23"
                } ));
                t.getFixture().defaultConstructorWorks();
            },
            constructorWithMessageWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.NotSupportedExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_NotSupportedExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithMessageWorks()",
                    line: "32"
                } ));
                t.getFixture().constructorWithMessageWorks();
            },
            constructorWithMessageAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.NotSupportedExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_NotSupportedExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionWorks()",
                    line: "41"
                } ));
                t.getFixture().constructorWithMessageAndInnerExceptionWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Exceptions.NotSupportedExceptionTests",
                    file: "Batch4\\Exceptions\\NotSupportedExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_NullReferenceExceptionTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.NullReferenceExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.NullReferenceExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_NullReferenceExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "9"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.NullReferenceExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_NullReferenceExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "23"
                } ));
                t.getFixture().defaultConstructorWorks();
            },
            constructorWithMessageWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.NullReferenceExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_NullReferenceExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithMessageWorks()",
                    line: "32"
                } ));
                t.getFixture().constructorWithMessageWorks();
            },
            constructorWithMessageAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.NullReferenceExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_NullReferenceExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionWorks()",
                    line: "41"
                } ));
                t.getFixture().constructorWithMessageAndInnerExceptionWorks();
            },
            accessingAFieldOnANullObjectCausesANullReferenceException: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.NullReferenceExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_NullReferenceExceptionTests, 2, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AccessingAFieldOnANullObjectCausesANullReferenceException()",
                    line: "51"
                } ));
                t.getFixture().accessingAFieldOnANullObjectCausesANullReferenceException();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Exceptions.NullReferenceExceptionTests",
                    file: "Batch4\\Exceptions\\NullReferenceExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_OperationCanceledExceptionTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.OperationCanceledExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.OperationCanceledExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_OperationCanceledExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "10"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.OperationCanceledExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_OperationCanceledExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "24"
                } ));
                t.getFixture().defaultConstructorWorks();
            },
            cancellationTokenOnlyConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.OperationCanceledExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_OperationCanceledExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CancellationTokenOnlyConstructorWorks()",
                    line: "34"
                } ));
                t.getFixture().cancellationTokenOnlyConstructorWorks();
            },
            messageOnlyConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.OperationCanceledExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_OperationCanceledExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MessageOnlyConstructorWorks()",
                    line: "45"
                } ));
                t.getFixture().messageOnlyConstructorWorks();
            },
            messageAndInnerExceptionConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.OperationCanceledExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_OperationCanceledExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MessageAndInnerExceptionConstructorWorks()",
                    line: "55"
                } ));
                t.getFixture().messageAndInnerExceptionConstructorWorks();
            },
            messageAndCancellationTokenConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.OperationCanceledExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_OperationCanceledExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MessageAndCancellationTokenConstructorWorks()",
                    line: "66"
                } ));
                t.getFixture().messageAndCancellationTokenConstructorWorks();
            },
            messageAndInnerExceptionAndCancellationTokenConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.OperationCanceledExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_OperationCanceledExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MessageAndInnerExceptionAndCancellationTokenConstructorWorks()",
                    line: "77"
                } ));
                t.getFixture().messageAndInnerExceptionAndCancellationTokenConstructorWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Exceptions.OperationCanceledExceptionTests",
                    file: "Batch4\\Exceptions\\OperationCanceledExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_OverflowExceptionTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.OverflowExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.OverflowExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_OverflowExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "9"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.OverflowExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_OverflowExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "23"
                } ));
                t.getFixture().defaultConstructorWorks();
            },
            constructorWithMessageWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.OverflowExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_OverflowExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithMessageWorks()",
                    line: "32"
                } ));
                t.getFixture().constructorWithMessageWorks();
            },
            constructorWithMessageAndInnerExceptionWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.OverflowExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_OverflowExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithMessageAndInnerExceptionWorks()",
                    line: "41"
                } ));
                t.getFixture().constructorWithMessageAndInnerExceptionWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Exceptions.OverflowExceptionTests",
                    file: "Batch4\\Exceptions\\OverflowExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_PromiseExceptionTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.PromiseExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.PromiseExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_PromiseExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "10"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            argumentsOnlyConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.PromiseExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_PromiseExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArgumentsOnlyConstructorWorks()",
                    line: "24"
                } ));
                t.getFixture().argumentsOnlyConstructorWorks();
            },
            argumentsAndMessageConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.PromiseExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_PromiseExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArgumentsAndMessageConstructorWorks()",
                    line: "36"
                } ));
                t.getFixture().argumentsAndMessageConstructorWorks();
            },
            argumentsAndMessageAndInnerExceptionConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.PromiseExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_PromiseExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArgumentsAndMessageAndInnerExceptionConstructorWorks()",
                    line: "47"
                } ));
                t.getFixture().argumentsAndMessageAndInnerExceptionConstructorWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Exceptions.PromiseExceptionTests",
                    file: "Batch4\\Exceptions\\PromiseExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_TaskCanceledExceptionTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.TaskCanceledExceptionTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.TaskCanceledExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_TaskCanceledExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "11"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.TaskCanceledExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_TaskCanceledExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "26"
                } ));
                t.getFixture().defaultConstructorWorks();
            },
            messageOnlyConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.TaskCanceledExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_TaskCanceledExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MessageOnlyConstructorWorks()",
                    line: "37"
                } ));
                t.getFixture().messageOnlyConstructorWorks();
            },
            taskOnlyConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.TaskCanceledExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_TaskCanceledExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TaskOnlyConstructorWorks()",
                    line: "48"
                } ));
                t.getFixture().taskOnlyConstructorWorks();
            },
            messageAndInnerExceptionConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Exceptions.TaskCanceledExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Exceptions_TaskCanceledExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MessageAndInnerExceptionConstructorWorks()",
                    line: "60"
                } ));
                t.getFixture().messageAndInnerExceptionConstructorWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Exceptions.TaskCanceledExceptionTests",
                    file: "Batch4\\Exceptions\\TaskCanceledExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ExceptionTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ExceptionTests)],
        statics: {
            throwingAndCatchingExceptionsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ThrowingAndCatchingExceptionsWorks()",
                    line: "27"
                } ));
                t.getFixture().throwingAndCatchingExceptionsWorks();
            },
            exceptionOfWrongTypeIsNotCaught: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ExceptionOfWrongTypeIsNotCaught()",
                    line: "43"
                } ));
                t.getFixture().exceptionOfWrongTypeIsNotCaught();
            },
            canCatchExceptionAsBaseType: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CanCatchExceptionAsBaseType()",
                    line: "63"
                } ));
                t.getFixture().canCatchExceptionAsBaseType();
            },
            canCatchStringAsException: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ExceptionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CanCatchStringAsException()",
                    line: "84"
                } ));
                t.getFixture().canCatchStringAsException();
            },
            canCatchStringAsCatchAll: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ExceptionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ExceptionTests, 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CanCatchStringAsCatchAll()",
                    line: "104"
                } ));
                t.getFixture().canCatchStringAsCatchAll();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.ExceptionTests",
                    file: "Batch4\\ExceptionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_FormattableStringTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.FormattableStringTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.FormattableStringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_FormattableStringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "28"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            argumentCountWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.FormattableStringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_FormattableStringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArgumentCountWorks()",
                    line: "42"
                } ));
                t.getFixture().argumentCountWorks();
            },
            formatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.FormattableStringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_FormattableStringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "FormatWorks()",
                    line: "51"
                } ));
                t.getFixture().formatWorks();
            },
            getArgumentWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.FormattableStringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_FormattableStringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetArgumentWorks()",
                    line: "58"
                } ));
                t.getFixture().getArgumentWorks();
            },
            getArgumentsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.FormattableStringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_FormattableStringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetArgumentsWorks()",
                    line: "66"
                } ));
                t.getFixture().getArgumentsWorks();
            },
            arrayReturnedByGetArgumentsCanBeModified: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.FormattableStringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_FormattableStringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayReturnedByGetArgumentsCanBeModified()",
                    line: "75"
                } ));
                t.getFixture().arrayReturnedByGetArgumentsCanBeModified();
            },
            toStringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.FormattableStringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_FormattableStringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWorks()",
                    line: "87"
                } ));
                t.getFixture().toStringWorks();
            },
            toStringWithFormatProviderWorks_SPI_1651: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.FormattableStringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_FormattableStringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithFormatProviderWorks_SPI_1651()",
                    line: "95"
                } ));
                t.getFixture().toStringWithFormatProviderWorks_SPI_1651();
            },
            iFormattableToStringWorks_SPI_1633_1651: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.FormattableStringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_FormattableStringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IFormattableToStringWorks_SPI_1633_1651()",
                    line: "104"
                } ));
                t.getFixture().iFormattableToStringWorks_SPI_1633_1651();
            },
            invariantWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.FormattableStringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_FormattableStringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "InvariantWorks()",
                    line: "113"
                } ));
                t.getFixture().invariantWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.FormattableStringTests",
                    file: "Batch4\\FormattableStringTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "10"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            defaultValueWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultValueWorks()",
                    line: "32"
                } ));
                t.getFixture().defaultValueWorks();
            },
            createInstanceWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreateInstanceWorks()",
                    line: "40"
                } ));
                t.getFixture().createInstanceWorks();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "48"
                } ));
                t.getFixture().defaultConstructorWorks();
            },
            emptyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "EmptyWorks()",
                    line: "56"
                } ));
                t.getFixture().emptyWorks();
            },
            toStringWithoutArgumentsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithoutArgumentsWorks()",
                    line: "62"
                } ));
                t.getFixture().toStringWithoutArgumentsWorks();
            },
            byteArrayConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ByteArrayConstructorWorks()",
                    line: "69"
                } ));
                t.getFixture().byteArrayConstructorWorks();
            },
            int32Int16Int16ByteArrayConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "Int32Int16Int16ByteArrayConstructorWorks()",
                    line: "78"
                } ));
                t.getFixture().int32Int16Int16ByteArrayConstructorWorks();
            },
            int32Int16Int16BytesConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "Int32Int16Int16BytesConstructorWorks()",
                    line: "86"
                } ));
                t.getFixture().int32Int16Int16BytesConstructorWorks();
            },
            uInt32UInt16UInt16BytesConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "UInt32UInt16UInt16BytesConstructorWorks()",
                    line: "94"
                } ));
                t.getFixture().uInt32UInt16UInt16BytesConstructorWorks();
            },
            stringConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "StringConstructorWorks()",
                    line: "102"
                } ));
                t.getFixture().stringConstructorWorks();
            },
            parseWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ParseWorks()",
                    line: "120"
                } ));
                t.getFixture().parseWorks();
            },
            parseExactWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ParseExactWorks()",
                    line: "138"
                } ));
                t.getFixture().parseExactWorks();
            },
            tryParseWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TryParseWorks()",
                    line: "159"
                } ));
                t.getFixture().tryParseWorks();
            },
            tryParseExactWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TryParseExactWorks()",
                    line: "180"
                } ));
                t.getFixture().tryParseExactWorks();
            },
            compareToWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CompareToWorks()",
                    line: "210"
                } ));
                t.getFixture().compareToWorks();
            },
            iComparableCompareToWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IComparableCompareToWorks()",
                    line: "218"
                } ));
                t.getFixture().iComparableCompareToWorks();
            },
            equalsObjectWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "EqualsObjectWorks()",
                    line: "226"
                } ));
                t.getFixture().equalsObjectWorks();
            },
            equalsGuidWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "EqualsGuidWorks()",
                    line: "235"
                } ));
                t.getFixture().equalsGuidWorks();
            },
            iEquatableEqualsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IEquatableEqualsWorks()",
                    line: "243"
                } ));
                t.getFixture().iEquatableEqualsWorks();
            },
            getHashCodeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetHashCodeWorks()",
                    line: "251"
                } ));
                t.getFixture().getHashCodeWorks();
            },
            equalityOperatorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "EqualityOperatorWorks()",
                    line: "258"
                } ));
                t.getFixture().equalityOperatorWorks();
            },
            inequalityOperatorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "InequalityOperatorWorks()",
                    line: "265"
                } ));
                t.getFixture().inequalityOperatorWorks();
            },
            toStringWithFormatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithFormatWorks()",
                    line: "272"
                } ));
                t.getFixture().toStringWithFormatWorks();
            },
            newGuidWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NewGuidWorks()",
                    line: "284"
                } ));
                t.getFixture().newGuidWorks();
            },
            toByteArrayWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.GuidTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_GuidTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToByteArrayWorks()",
                    line: "300"
                } ));
                t.getFixture().toByteArrayWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.GuidTests",
                    file: "Batch4\\GuidTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_IComparableTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.IComparableTests)],
        statics: {
            callingMethodThroughIComparableInterfaceInvokesImplementingMethod: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.IComparableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_IComparableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CallingMethodThroughIComparableInterfaceInvokesImplementingMethod()",
                    line: "21"
                } ));
                t.getFixture().callingMethodThroughIComparableInterfaceInvokesImplementingMethod();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.IComparableTests",
                    file: "Batch4\\IComparableTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_IEquatableTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.IEquatableTests)],
        statics: {
            callingMethodThroughIComparableInterfaceInvokesImplementingMethod: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.IEquatableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_IEquatableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CallingMethodThroughIComparableInterfaceInvokesImplementingMethod()",
                    line: "21"
                } ));
                t.getFixture().callingMethodThroughIComparableInterfaceInvokesImplementingMethod();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.IEquatableTests",
                    file: "Batch4\\IEquatableTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_IFormattableTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.IFormattableTests)],
        statics: {
            iFormattableIsRecordedInInterfaceList: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.IFormattableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_IFormattableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IFormattableIsRecordedInInterfaceList()",
                    line: "25"
                } ));
                t.getFixture().iFormattableIsRecordedInInterfaceList();
            },
            callingMethodThroughIFormattableInterfaceInvokesImplementingMethod_SPI_1565_1633: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.IFormattableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_IFormattableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CallingMethodThroughIFormattableInterfaceInvokesImplementingMethod_SPI_1565_1633()",
                    line: "32"
                } ));
                t.getFixture().callingMethodThroughIFormattableInterfaceInvokesImplementingMethod_SPI_1565_1633();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.IFormattableTests",
                    file: "Batch4\\IFormattableTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests)],
        statics: {
            expressionProtectedConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ExpressionProtectedConstructorWorks()",
                    line: "335"
                } ));
                t.getFixture().expressionProtectedConstructorWorks();
            },
            simpleExpressionTreeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SimpleExpressionTreeWorks()",
                    line: "343"
                } ));
                t.getFixture().simpleExpressionTreeWorks();
            },
            lambdaWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LambdaWorks()",
                    line: "355"
                } ));
                t.getFixture().lambdaWorks();
            },
            parameterAndVariableWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ParameterAndVariableWork()",
                    line: "391"
                } ));
                t.getFixture().parameterAndVariableWork();
            },
            constantWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstantWorks()",
                    line: "418"
                } ));
                t.getFixture().constantWorks();
            },
            binaryExpressionsWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "BinaryExpressionsWork()",
                    line: "441"
                } ));
                t.getFixture().binaryExpressionsWork();
            },
            unaryExpressionsWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "UnaryExpressionsWork()",
                    line: "716"
                } ));
                t.getFixture().unaryExpressionsWork();
            },
            arrayLengthWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayLengthWorks()",
                    line: "833"
                } ));
                t.getFixture().arrayLengthWorks();
            },
            conversionsWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConversionsWork()",
                    line: "852"
                } ));
                t.getFixture().conversionsWork();
            },
            arrayIndexWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayIndexWorks()",
                    line: "907"
                } ));
                t.getFixture().arrayIndexWorks();
            },
            multiDimensionalArrayIndexWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MultiDimensionalArrayIndexWorks()",
                    line: "928"
                } ));
                t.getFixture().multiDimensionalArrayIndexWorks();
            },
            conditionWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConditionWorks()",
                    line: "962"
                } ));
                t.getFixture().conditionWorks();
            },
            callWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CallWorks()",
                    line: "985"
                } ));
                t.getFixture().callWorks();
            },
            methodGroupConversionWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MethodGroupConversionWorks()",
                    line: "1036"
                } ));
                t.getFixture().methodGroupConversionWorks();
            },
            invokeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "InvokeWorks()",
                    line: "1058"
                } ));
                t.getFixture().invokeWorks();
            },
            arrayCreationWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArrayCreationWorks()",
                    line: "1084"
                } ));
                t.getFixture().arrayCreationWorks();
            },
            propertiesAndFieldsWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "PropertiesAndFieldsWork()",
                    line: "1146"
                } ));
                t.getFixture().propertiesAndFieldsWork();
            },
            indexersWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexersWork()",
                    line: "1201"
                } ));
                t.getFixture().indexersWork();
            },
            indexExpressionsWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexExpressionsWork()",
                    line: "1217"
                } ));
                t.getFixture().indexExpressionsWork();
            },
            objectConstructionWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ObjectConstructionWorks()",
                    line: "1253"
                } ));
                t.getFixture().objectConstructionWorks();
            },
            anonymousTypeConstructionWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AnonymousTypeConstructionWorks()",
                    line: "1296"
                } ));
                t.getFixture().anonymousTypeConstructionWorks();
            },
            transparentIdentifiersWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TransparentIdentifiersWork()",
                    line: "1351"
                } ));
                t.getFixture().transparentIdentifiersWork();
            },
            newExpressionWithMembersWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NewExpressionWithMembersWork()",
                    line: "1394"
                } ));
                t.getFixture().newExpressionWithMembersWork();
            },
            bindWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "BindWorks()",
                    line: "1424"
                } ));
                t.getFixture().bindWorks();
            },
            elementInitWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ElementInitWorks()",
                    line: "1469"
                } ));
                t.getFixture().elementInitWorks();
            },
            listBindWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ListBindWorks()",
                    line: "1501"
                } ));
                t.getFixture().listBindWorks();
            },
            memberBindWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MemberBindWorks()",
                    line: "1566"
                } ));
                t.getFixture().memberBindWorks();
            },
            memberInitWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MemberInitWorks()",
                    line: "1628"
                } ));
                t.getFixture().memberInitWorks();
            },
            listInitWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ListInitWorks()",
                    line: "1664"
                } ));
                t.getFixture().listInitWorks();
            },
            typeIsAndTypeEqualWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypeIsAndTypeEqualWork()",
                    line: "1718"
                } ));
                t.getFixture().typeIsAndTypeEqualWork();
            },
            quoteWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "QuoteWorks()",
                    line: "1746"
                } ));
                t.getFixture().quoteWorks();
            },
            localVariableReferenceWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LocalVariableReferenceWorks()",
                    line: "1771"
                } ));
                t.getFixture().localVariableReferenceWorks();
            },
            throwAndRethrowWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ThrowAndRethrowWork()",
                    line: "1823"
                } ));
                t.getFixture().throwAndRethrowWork();
            },
            defaultAndEmptyWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultAndEmptyWork()",
                    line: "1855"
                } ));
                t.getFixture().defaultAndEmptyWork();
            },
            blockWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "BlockWorks()",
                    line: "1872"
                } ));
                t.getFixture().blockWorks();
            },
            ifThenWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IfThenWorks()",
                    line: "1931"
                } ));
                t.getFixture().ifThenWorks();
            },
            labelTargetWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LabelTargetWorks()",
                    line: "1959"
                } ));
                t.getFixture().labelTargetWorks();
            },
            gotoWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GotoWorks()",
                    line: "1977"
                } ));
                t.getFixture().gotoWorks();
            },
            labelExpressionWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LabelExpressionWorks()",
                    line: "2029"
                } ));
                t.getFixture().labelExpressionWorks();
            },
            loopWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LoopWorks()",
                    line: "2060"
                } ));
                t.getFixture().loopWorks();
            },
            switchCaseWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SwitchCaseWorks()",
                    line: "2103"
                } ));
                t.getFixture().switchCaseWorks();
            },
            switchWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SwitchWorks()",
                    line: "2124"
                } ));
                t.getFixture().switchWorks();
            },
            catchBlockWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CatchBlockWorks()",
                    line: "2169"
                } ));
                t.getFixture().catchBlockWorks();
            },
            tryWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TryWorks()",
                    line: "2199"
                } ));
                t.getFixture().tryWorks();
            },
            dynamicWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Linq_Expressions_ExpressionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DynamicWorks()",
                    line: "2245"
                } ));
                t.getFixture().dynamicWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Linq.Expressions.ExpressionTests",
                    file: "Batch4\\Linq\\Expressions\\ExpressionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests)],
        statics: {
            constantsWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstantsWork()",
                    line: "23"
                } ));
                t.getFixture().constantsWork();
            },
            absOfDoubleWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AbsOfDoubleWorks()",
                    line: "36"
                } ));
                t.getFixture().absOfDoubleWorks();
            },
            absOfIntWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AbsOfIntWorks()",
                    line: "42"
                } ));
                t.getFixture().absOfIntWorks();
            },
            absOfLongWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AbsOfLongWorks()",
                    line: "48"
                } ));
                t.getFixture().absOfLongWorks();
            },
            absOfSbyteWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AbsOfSbyteWorks()",
                    line: "54"
                } ));
                t.getFixture().absOfSbyteWorks();
            },
            absOfShortWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AbsOfShortWorks()",
                    line: "60"
                } ));
                t.getFixture().absOfShortWorks();
            },
            absOfFloatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AbsOfFloatWorks()",
                    line: "66"
                } ));
                t.getFixture().absOfFloatWorks();
            },
            absOfDecimalWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AbsOfDecimalWorks()",
                    line: "72"
                } ));
                t.getFixture().absOfDecimalWorks();
            },
            acosWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AcosWorks()",
                    line: "80"
                } ));
                t.getFixture().acosWorks();
            },
            asinWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AsinWorks()",
                    line: "86"
                } ));
                t.getFixture().asinWorks();
            },
            atanWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AtanWorks()",
                    line: "92"
                } ));
                t.getFixture().atanWorks();
            },
            atan2Works: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "Atan2Works()",
                    line: "98"
                } ));
                t.getFixture().atan2Works();
            },
            ceilingOfDoubleWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CeilingOfDoubleWorks()",
                    line: "104"
                } ));
                t.getFixture().ceilingOfDoubleWorks();
            },
            ceilingOfDecimalWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CeilingOfDecimalWorks()",
                    line: "111"
                } ));
                t.getFixture().ceilingOfDecimalWorks();
            },
            cosWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CosWorks()",
                    line: "119"
                } ));
                t.getFixture().cosWorks();
            },
            coshWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CoshWorks()",
                    line: "125"
                } ));
                t.getFixture().coshWorks();
            },
            sinhWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SinhWorks()",
                    line: "131"
                } ));
                t.getFixture().sinhWorks();
            },
            tanhWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TanhWorks()",
                    line: "137"
                } ));
                t.getFixture().tanhWorks();
            },
            expWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ExpWorks()",
                    line: "143"
                } ));
                t.getFixture().expWorks();
            },
            floorOfDoubleWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "FloorOfDoubleWorks()",
                    line: "149"
                } ));
                t.getFixture().floorOfDoubleWorks();
            },
            floorOfDecimalWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "FloorOfDecimalWorks()",
                    line: "156"
                } ));
                t.getFixture().floorOfDecimalWorks();
            },
            logWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LogWorks()",
                    line: "164"
                } ));
                t.getFixture().logWorks();
            },
            logWithBaseWorks_SPI_1566: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LogWithBaseWorks_SPI_1566()",
                    line: "170"
                } ));
                t.getFixture().logWithBaseWorks_SPI_1566();
            },
            maxOfByteWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MaxOfByteWorks()",
                    line: "193"
                } ));
                t.getFixture().maxOfByteWorks();
            },
            maxOfDecimalWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MaxOfDecimalWorks()",
                    line: "200"
                } ));
                t.getFixture().maxOfDecimalWorks();
            },
            maxOfDoubleWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MaxOfDoubleWorks()",
                    line: "207"
                } ));
                t.getFixture().maxOfDoubleWorks();
            },
            maxOfShortWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MaxOfShortWorks()",
                    line: "214"
                } ));
                t.getFixture().maxOfShortWorks();
            },
            maxOfIntWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MaxOfIntWorks()",
                    line: "221"
                } ));
                t.getFixture().maxOfIntWorks();
            },
            maxOfLongWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MaxOfLongWorks()",
                    line: "228"
                } ));
                t.getFixture().maxOfLongWorks();
            },
            maxOfSByteWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MaxOfSByteWorks()",
                    line: "235"
                } ));
                t.getFixture().maxOfSByteWorks();
            },
            maxOfFloatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MaxOfFloatWorks()",
                    line: "242"
                } ));
                t.getFixture().maxOfFloatWorks();
            },
            maxOfUShortWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MaxOfUShortWorks()",
                    line: "249"
                } ));
                t.getFixture().maxOfUShortWorks();
            },
            maxOfUIntWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MaxOfUIntWorks()",
                    line: "256"
                } ));
                t.getFixture().maxOfUIntWorks();
            },
            maxOfULongWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MaxOfULongWorks()",
                    line: "263"
                } ));
                t.getFixture().maxOfULongWorks();
            },
            minOfByteWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MinOfByteWorks()",
                    line: "270"
                } ));
                t.getFixture().minOfByteWorks();
            },
            minOfDecimalWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MinOfDecimalWorks()",
                    line: "277"
                } ));
                t.getFixture().minOfDecimalWorks();
            },
            minOfDoubleWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MinOfDoubleWorks()",
                    line: "284"
                } ));
                t.getFixture().minOfDoubleWorks();
            },
            minOfShortWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MinOfShortWorks()",
                    line: "291"
                } ));
                t.getFixture().minOfShortWorks();
            },
            minOfIntWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MinOfIntWorks()",
                    line: "298"
                } ));
                t.getFixture().minOfIntWorks();
            },
            minOfLongWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MinOfLongWorks()",
                    line: "305"
                } ));
                t.getFixture().minOfLongWorks();
            },
            minOfSByteWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MinOfSByteWorks()",
                    line: "312"
                } ));
                t.getFixture().minOfSByteWorks();
            },
            minOfFloatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MinOfFloatWorks()",
                    line: "319"
                } ));
                t.getFixture().minOfFloatWorks();
            },
            minOfUShortWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MinOfUShortWorks()",
                    line: "326"
                } ));
                t.getFixture().minOfUShortWorks();
            },
            minOfUIntWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MinOfUIntWorks()",
                    line: "333"
                } ));
                t.getFixture().minOfUIntWorks();
            },
            minOfULongWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MinOfULongWorks()",
                    line: "340"
                } ));
                t.getFixture().minOfULongWorks();
            },
            powWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "PowWorks()",
                    line: "347"
                } ));
                t.getFixture().powWorks();
            },
            randomWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RandomWorks()",
                    line: "353"
                } ));
                t.getFixture().randomWorks();
            },
            roundOfDoubleWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RoundOfDoubleWorks()",
                    line: "364"
                } ));
                t.getFixture().roundOfDoubleWorks();
            },
            roundOfDecimalWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RoundOfDecimalWorks()",
                    line: "375"
                } ));
                t.getFixture().roundOfDecimalWorks();
            },
            jsRoundOfDoubleWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "JsRoundOfDoubleWorks()",
                    line: "386"
                } ));
                t.getFixture().jsRoundOfDoubleWorks();
            },
            roundOfDoubleWithDigitsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RoundOfDoubleWithDigitsWorks()",
                    line: "397"
                } ));
                t.getFixture().roundOfDoubleWithDigitsWorks();
            },
            roundOfDecimalWithDigitsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RoundOfDecimalWithDigitsWorks()",
                    line: "408"
                } ));
                t.getFixture().roundOfDecimalWithDigitsWorks();
            },
            signWithDecimalWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SignWithDecimalWorks()",
                    line: "419"
                } ));
                t.getFixture().signWithDecimalWorks();
            },
            signWithDoubleWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SignWithDoubleWorks()",
                    line: "427"
                } ));
                t.getFixture().signWithDoubleWorks();
            },
            signWithFloatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SignWithFloatWorks()",
                    line: "475"
                } ));
                t.getFixture().signWithFloatWorks();
            },
            sinWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SinWorks()",
                    line: "483"
                } ));
                t.getFixture().sinWorks();
            },
            sqrtWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SqrtWorks()",
                    line: "489"
                } ));
                t.getFixture().sqrtWorks();
            },
            tanWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TanWorks()",
                    line: "495"
                } ));
                t.getFixture().tanWorks();
            },
            truncateWithDoubleWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TruncateWithDoubleWorks()",
                    line: "501"
                } ));
                t.getFixture().truncateWithDoubleWorks();
            },
            truncateWithDecimalWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TruncateWithDecimalWorks()",
                    line: "508"
                } ));
                t.getFixture().truncateWithDecimalWorks();
            },
            iEEERemainderWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IEEERemainderWorks()",
                    line: "515"
                } ));
                t.getFixture().iEEERemainderWorks();
            },
            roundOfDoubleWithMidpointRoundingWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RoundOfDoubleWithMidpointRoundingWorks()",
                    line: "531"
                } ));
                t.getFixture().roundOfDoubleWithMidpointRoundingWorks();
            },
            roundOfDecimalWithMidpointRoundingWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RoundOfDecimalWithMidpointRoundingWorks()",
                    line: "546"
                } ));
                t.getFixture().roundOfDecimalWithMidpointRoundingWorks();
            },
            roundOfDoubleWithDigitsAndMidpointRoundingWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RoundOfDoubleWithDigitsAndMidpointRoundingWorks()",
                    line: "561"
                } ));
                t.getFixture().roundOfDoubleWithDigitsAndMidpointRoundingWorks();
            },
            roundOfDecimalWithDigitsAndMidpointRoundingWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RoundOfDecimalWithDigitsAndMidpointRoundingWorks()",
                    line: "576"
                } ));
                t.getFixture().roundOfDecimalWithDigitsAndMidpointRoundingWorks();
            },
            divRemWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MathTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MathTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DivRemWorks()",
                    line: "599"
                } ));
                t.getFixture().divRemWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.MathTests",
                    file: "Batch4\\MathTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MultidimArrayTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MultidimArrayTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MultidimArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "10"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            lengthWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MultidimArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LengthWorks()",
                    line: "20"
                } ));
                t.getFixture().lengthWorks();
            },
            gettingValueByIndexWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MultidimArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GettingValueByIndexWorks()",
                    line: "27"
                } ));
                t.getFixture().gettingValueByIndexWorks();
            },
            getValueWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MultidimArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetValueWorks()",
                    line: "39"
                } ));
                t.getFixture().getValueWorks();
            },
            getValueWorksForUninitializedElement: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MultidimArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetValueWorksForUninitializedElement()",
                    line: "51"
                } ));
                t.getFixture().getValueWorksForUninitializedElement();
            },
            getValueByIndexWorksForUninitializedElement: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MultidimArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetValueByIndexWorksForUninitializedElement()",
                    line: "58"
                } ));
                t.getFixture().getValueByIndexWorksForUninitializedElement();
            },
            settingValueByIndexWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MultidimArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SettingValueByIndexWorks()",
                    line: "65"
                } ));
                t.getFixture().settingValueByIndexWorks();
            },
            setValueWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MultidimArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetValueWorks()",
                    line: "83"
                } ));
                t.getFixture().setValueWorks();
            },
            getLengthWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MultidimArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetLengthWorks()",
                    line: "101"
                } ));
                t.getFixture().getLengthWorks();
            },
            getLowerBoundWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MultidimArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetLowerBoundWorks()",
                    line: "110"
                } ));
                t.getFixture().getLowerBoundWorks();
            },
            getUpperBoundWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MultidimArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetUpperBoundWorks()",
                    line: "119"
                } ));
                t.getFixture().getUpperBoundWorks();
            },
            foreachWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MultidimArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ForeachWorks()",
                    line: "128"
                } ));
                t.getFixture().foreachWorks();
            },
            rankWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MultidimArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RankWorks()",
                    line: "140"
                } ));
                t.getFixture().rankWorks();
            },
            getValueWithIndexOutOfRangeThrowsAnException: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MultidimArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetValueWithIndexOutOfRangeThrowsAnException()",
                    line: "147"
                } ));
                t.getFixture().getValueWithIndexOutOfRangeThrowsAnException();
            },
            setValueWithIndexOutOfRangeThrowsAnException: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.MultidimArrayTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetValueWithIndexOutOfRangeThrowsAnException()",
                    line: "162"
                } ));
                t.getFixture().setValueWithIndexOutOfRangeThrowsAnException();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.MultidimArrayTests",
                    file: "Batch4\\MultidimArrayTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests)],
        statics: {
            typePropertiesAreCorrect_SPI_1567: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect_SPI_1567()",
                    line: "75"
                } ));
                t.getFixture().typePropertiesAreCorrect_SPI_1567();
            },
            convertingToNullableWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConvertingToNullableWorks()",
                    line: "98"
                } ));
                t.getFixture().convertingToNullableWorks();
            },
            hasValueWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "HasValueWorks()",
                    line: "108"
                } ));
                t.getFixture().hasValueWorks();
            },
            boxingWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "BoxingWorks()",
                    line: "116"
                } ));
                t.getFixture().boxingWorks();
            },
            unboxingWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "UnboxingWorks()",
                    line: "124"
                } ));
                t.getFixture().unboxingWorks();
            },
            valueWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ValueWorks()",
                    line: "139"
                } ));
                t.getFixture().valueWorks();
            },
            unboxingValueOfWrongTypeThrowsAnException: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "UnboxingValueOfWrongTypeThrowsAnException()",
                    line: "154"
                } ));
                t.getFixture().unboxingValueOfWrongTypeThrowsAnException();
            },
            getValueOrDefaultWithArgWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetValueOrDefaultWithArgWorks()",
                    line: "164"
                } ));
                t.getFixture().getValueOrDefaultWithArgWorks();
            },
            liftedEqualityWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LiftedEqualityWorks()",
                    line: "172"
                } ));
                t.getFixture().liftedEqualityWorks();
            },
            liftedInequalityWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LiftedInequalityWorks()",
                    line: "182"
                } ));
                t.getFixture().liftedInequalityWorks();
            },
            liftedLessThanWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LiftedLessThanWorks()",
                    line: "192"
                } ));
                t.getFixture().liftedLessThanWorks();
            },
            liftedGreaterThanWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LiftedGreaterThanWorks()",
                    line: "202"
                } ));
                t.getFixture().liftedGreaterThanWorks();
            },
            liftedLessThanOrEqualWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LiftedLessThanOrEqualWorks()",
                    line: "212"
                } ));
                t.getFixture().liftedLessThanOrEqualWorks();
            },
            liftedGreaterThanOrEqualWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LiftedGreaterThanOrEqualWorks()",
                    line: "222"
                } ));
                t.getFixture().liftedGreaterThanOrEqualWorks();
            },
            liftedSubtractionWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LiftedSubtractionWorks()",
                    line: "232"
                } ));
                t.getFixture().liftedSubtractionWorks();
            },
            liftedAdditionWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LiftedAdditionWorks()",
                    line: "240"
                } ));
                t.getFixture().liftedAdditionWorks();
            },
            liftedModWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LiftedModWorks()",
                    line: "248"
                } ));
                t.getFixture().liftedModWorks();
            },
            liftedFloatingPointDivisionWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LiftedFloatingPointDivisionWorks()",
                    line: "256"
                } ));
                t.getFixture().liftedFloatingPointDivisionWorks();
            },
            liftedIntegerDivisionWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LiftedIntegerDivisionWorks()",
                    line: "264"
                } ));
                t.getFixture().liftedIntegerDivisionWorks();
            },
            liftedMultiplicationWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LiftedMultiplicationWorks()",
                    line: "272"
                } ));
                t.getFixture().liftedMultiplicationWorks();
            },
            liftedBitwiseAndWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LiftedBitwiseAndWorks()",
                    line: "280"
                } ));
                t.getFixture().liftedBitwiseAndWorks();
            },
            liftedBitwiseOrWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LiftedBitwiseOrWorks()",
                    line: "288"
                } ));
                t.getFixture().liftedBitwiseOrWorks();
            },
            liftedBitwiseXorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LiftedBitwiseXorWorks()",
                    line: "296"
                } ));
                t.getFixture().liftedBitwiseXorWorks();
            },
            liftedLeftShiftWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LiftedLeftShiftWorks()",
                    line: "304"
                } ));
                t.getFixture().liftedLeftShiftWorks();
            },
            liftedSignedRightShiftWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LiftedSignedRightShiftWorks()",
                    line: "312"
                } ));
                t.getFixture().liftedSignedRightShiftWorks();
            },
            liftedUnsignedRightShiftWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LiftedUnsignedRightShiftWorks()",
                    line: "320"
                } ));
                t.getFixture().liftedUnsignedRightShiftWorks();
            },
            liftedEqualityWorksWithUserDefinedOperators: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LiftedEqualityWorksWithUserDefinedOperators()",
                    line: "328"
                } ));
                t.getFixture().liftedEqualityWorksWithUserDefinedOperators();
            },
            liftedInequalityWorksWithUserDefinedOperators: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LiftedInequalityWorksWithUserDefinedOperators()",
                    line: "339"
                } ));
                t.getFixture().liftedInequalityWorksWithUserDefinedOperators();
            },
            liftedLessThanWorksWithUserDefinedOperators: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LiftedLessThanWorksWithUserDefinedOperators()",
                    line: "350"
                } ));
                t.getFixture().liftedLessThanWorksWithUserDefinedOperators();
            },
            liftedGreaterThanWorksWithUserDefinedOperators: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LiftedGreaterThanWorksWithUserDefinedOperators()",
                    line: "361"
                } ));
                t.getFixture().liftedGreaterThanWorksWithUserDefinedOperators();
            },
            liftedLessThanOrEqualWorksWithUserDefinedOperators: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LiftedLessThanOrEqualWorksWithUserDefinedOperators()",
                    line: "372"
                } ));
                t.getFixture().liftedLessThanOrEqualWorksWithUserDefinedOperators();
            },
            liftedGreaterThanOrEqualWorksWithUserDefinedOperators: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LiftedGreaterThanOrEqualWorksWithUserDefinedOperators()",
                    line: "383"
                } ));
                t.getFixture().liftedGreaterThanOrEqualWorksWithUserDefinedOperators();
            },
            liftedAdditionWorksWithUserDefinedOperators: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LiftedAdditionWorksWithUserDefinedOperators()",
                    line: "394"
                } ));
                t.getFixture().liftedAdditionWorksWithUserDefinedOperators();
            },
            liftedUnaryMinusWorksWithUserDefinedOperators_SPI_1634: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LiftedUnaryMinusWorksWithUserDefinedOperators_SPI_1634()",
                    line: "403"
                } ));
                t.getFixture().liftedUnaryMinusWorksWithUserDefinedOperators_SPI_1634();
            },
            liftedBooleanAndWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LiftedBooleanAndWorks()",
                    line: "412"
                } ));
                t.getFixture().liftedBooleanAndWorks();
            },
            liftedBooleanOrWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LiftedBooleanOrWorks()",
                    line: "427"
                } ));
                t.getFixture().liftedBooleanOrWorks();
            },
            liftedBooleanXorWorks_SPI_1568: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LiftedBooleanXorWorks_SPI_1568()",
                    line: "442"
                } ));
                t.getFixture().liftedBooleanXorWorks_SPI_1568();
            },
            liftedBooleanNotWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LiftedBooleanNotWorks()",
                    line: "461"
                } ));
                t.getFixture().liftedBooleanNotWorks();
            },
            liftedNegationWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LiftedNegationWorks()",
                    line: "470"
                } ));
                t.getFixture().liftedNegationWorks();
            },
            liftedUnaryPlusWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LiftedUnaryPlusWorks()",
                    line: "478"
                } ));
                t.getFixture().liftedUnaryPlusWorks();
            },
            liftedOnesComplementWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LiftedOnesComplementWorks()",
                    line: "486"
                } ));
                t.getFixture().liftedOnesComplementWorks();
            },
            coalesceWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NullableTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NullableTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CoalesceWorks()",
                    line: "494"
                } ));
                t.getFixture().coalesceWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.NullableTests",
                    file: "Batch4\\NullableTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NumberFormatInfoTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NumberFormatInfoTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NumberFormatInfoTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NumberFormatInfoTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "10"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            getFormatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NumberFormatInfoTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NumberFormatInfoTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetFormatWorks()",
                    line: "20"
                } ));
                t.getFixture().getFormatWorks();
            },
            invariantWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.NumberFormatInfoTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_NumberFormatInfoTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "InvariantWorks()",
                    line: "28"
                } ));
                t.getFixture().invariantWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.NumberFormatInfoTests",
                    file: "Batch4\\NumberFormatInfoTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_PropertyAccessorTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.PropertyAccessorTests)],
        statics: {
            accessorsCanBeInvokedInstance: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.PropertyAccessorTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_PropertyAccessorTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AccessorsCanBeInvokedInstance()",
                    line: "291"
                } ));
                t.getFixture().accessorsCanBeInvokedInstance();
            },
            accessorsCanBeInvokedStatic: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.PropertyAccessorTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_PropertyAccessorTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AccessorsCanBeInvokedStatic()",
                    line: "310"
                } ));
                t.getFixture().accessorsCanBeInvokedStatic();
            },
            accessorsCanBeInvokedGeneric: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.PropertyAccessorTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_PropertyAccessorTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AccessorsCanBeInvokedGeneric()",
                    line: "327"
                } ));
                t.getFixture().accessorsCanBeInvokedGeneric();
            },
            accessorsCanBeInvokedGenericStatic: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.PropertyAccessorTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_PropertyAccessorTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AccessorsCanBeInvokedGenericStatic()",
                    line: "346"
                } ));
                t.getFixture().accessorsCanBeInvokedGenericStatic();
            },
            baseAccessorsCanBeInvoked: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.PropertyAccessorTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_PropertyAccessorTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "BaseAccessorsCanBeInvoked()",
                    line: "363"
                } ));
                t.getFixture().baseAccessorsCanBeInvoked();
            },
            baseAccessorsCanBeInvokedGeneric: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.PropertyAccessorTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_PropertyAccessorTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "BaseAccessorsCanBeInvokedGeneric()",
                    line: "382"
                } ));
                t.getFixture().baseAccessorsCanBeInvokedGeneric();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.PropertyAccessorTests",
                    file: "Batch4\\PropertyAccessorTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_RandomTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.RandomTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.RandomTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_RandomTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "9"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.RandomTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_RandomTests, 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "20"
                } ));
                t.getFixture().defaultConstructorWorks();
            },
            seedConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.RandomTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_RandomTests, 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SeedConstructorWorks()",
                    line: "26"
                } ));
                t.getFixture().seedConstructorWorks();
            },
            nextWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.RandomTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_RandomTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NextWorks()",
                    line: "34"
                } ));
                t.getFixture().nextWorks();
            },
            nextWithMaxWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.RandomTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_RandomTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NextWithMaxWorks()",
                    line: "46"
                } ));
                t.getFixture().nextWithMaxWorks();
            },
            nextWithMinAndMaxWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.RandomTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_RandomTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NextWithMinAndMaxWorks()",
                    line: "58"
                } ));
                t.getFixture().nextWithMinAndMaxWorks();
            },
            nextDoubleWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.RandomTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_RandomTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NextDoubleWorks()",
                    line: "70"
                } ));
                t.getFixture().nextDoubleWorks();
            },
            nextBytesWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.RandomTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_RandomTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NextBytesWorks()",
                    line: "82"
                } ));
                t.getFixture().nextBytesWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.RandomTests",
                    file: "Batch4\\RandomTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AssemblyTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests)],
        statics: {
            getExecutingAssemblyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AssemblyTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetExecutingAssemblyWorks()",
                    line: "133"
                } ));
                t.getFixture().getExecutingAssemblyWorks();
            },
            getAssemblyForTypeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AssemblyTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetAssemblyForTypeWorks()",
                    line: "139"
                } ));
                t.getFixture().getAssemblyForTypeWorks();
            },
            fullNameWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AssemblyTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "FullNameWorks()",
                    line: "146"
                } ));
                t.getFixture().fullNameWorks();
            },
            toStringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AssemblyTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWorks()",
                    line: "153"
                } ));
                t.getFixture().toStringWorks();
            },
            getTypesWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AssemblyTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetTypesWorks()",
                    line: "160"
                } ));
                t.getFixture().getTypesWorks();
            },
            getTypesWithImportedModuleWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AssemblyTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetTypesWithImportedModuleWorks()",
                    line: "170"
                } ));
                t.getFixture().getTypesWithImportedModuleWorks();
            },
            getTypeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AssemblyTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetTypeWorks()",
                    line: "181"
                } ));
                t.getFixture().getTypeWorks();
            },
            getTypeWorksWithGenerics: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AssemblyTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetTypeWorksWithGenerics()",
                    line: "189"
                } ));
                t.getFixture().getTypeWorksWithGenerics();
            },
            getTypeWithImportedModuleWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AssemblyTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetTypeWithImportedModuleWorks()",
                    line: "196"
                } ));
                t.getFixture().getTypeWithImportedModuleWorks();
            },
            assemblyOfBuiltInTypes: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AssemblyTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AssemblyOfBuiltInTypes()",
                    line: "206"
                } ));
                t.getFixture().assemblyOfBuiltInTypes();
            },
            createInstanceWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AssemblyTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreateInstanceWorks()",
                    line: "217"
                } ));
                t.getFixture().createInstanceWorks();
            },
            getCustomAttributesWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AssemblyTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetCustomAttributesWorks()",
                    line: "225"
                } ));
                t.getFixture().getCustomAttributesWorks();
            },
            loadCanReturnReferenceToLoadedAssembly: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AssemblyTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LoadCanReturnReferenceToLoadedAssembly()",
                    line: "251"
                } ));
                t.getFixture().loadCanReturnReferenceToLoadedAssembly();
            },
            getManifestResourceNamesWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AssemblyTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetManifestResourceNamesWorks()",
                    line: "258"
                } ));
                t.getFixture().getManifestResourceNamesWorks();
            },
            getManifestResourceDataAsBase64WithoutTypeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AssemblyTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetManifestResourceDataAsBase64WithoutTypeWorks()",
                    line: "266"
                } ));
                t.getFixture().getManifestResourceDataAsBase64WithoutTypeWorks();
            },
            getManifestResourceDataAsBase64WithTypeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AssemblyTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetManifestResourceDataAsBase64WithTypeWorks()",
                    line: "274"
                } ));
                t.getFixture().getManifestResourceDataAsBase64WithTypeWorks();
            },
            getManifestResourceDataWithoutTypeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AssemblyTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetManifestResourceDataWithoutTypeWorks()",
                    line: "282"
                } ));
                t.getFixture().getManifestResourceDataWithoutTypeWorks();
            },
            getManifestResourceDataWithTypeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AssemblyTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AssemblyTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetManifestResourceDataWithTypeWorks()",
                    line: "290"
                } ));
                t.getFixture().getManifestResourceDataWithTypeWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Reflection.AssemblyTests",
                    file: "Batch4\\Reflection\\AssemblyTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests)],
        statics: {
            canGetCustomTypeAttributesForTypeWithNoAttributes: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CanGetCustomTypeAttributesForTypeWithNoAttributes()",
                    line: "416"
                } ));
                t.getFixture().canGetCustomTypeAttributesForTypeWithNoAttributes();
            },
            canGetCustomTypeAttributesForClassWithAttributes: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CanGetCustomTypeAttributesForClassWithAttributes()",
                    line: "423"
                } ));
                t.getFixture().canGetCustomTypeAttributesForClassWithAttributes();
            },
            nonScriptableAttributesAreNotIncluded: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NonScriptableAttributesAreNotIncluded()",
                    line: "436"
                } ));
                t.getFixture().nonScriptableAttributesAreNotIncluded();
            },
            canGetCustomTypeAttributesForInterfaceWithAttributes: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CanGetCustomTypeAttributesForInterfaceWithAttributes()",
                    line: "444"
                } ));
                t.getFixture().canGetCustomTypeAttributesForInterfaceWithAttributes();
            },
            canGetCustomTypeAttributesForEnumWithAttributes: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CanGetCustomTypeAttributesForEnumWithAttributes()",
                    line: "457"
                } ));
                t.getFixture().canGetCustomTypeAttributesForEnumWithAttributes();
            },
            inheritedFlagToGetCustomAttributesWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "InheritedFlagToGetCustomAttributesWorks()",
                    line: "470"
                } ));
                t.getFixture().inheritedFlagToGetCustomAttributesWorks();
            },
            deepInheritanceWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DeepInheritanceWorks()",
                    line: "484"
                } ));
                t.getFixture().deepInheritanceWorks();
            },
            overridingSingleUseAttributeReplacesTheAttributeOnTheBaseClass: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "OverridingSingleUseAttributeReplacesTheAttributeOnTheBaseClass()",
                    line: "495"
                } ));
                t.getFixture().overridingSingleUseAttributeReplacesTheAttributeOnTheBaseClass();
            },
            applyingNewInstanceOfMultipleUseAttributeAddsTheAttribute: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ApplyingNewInstanceOfMultipleUseAttributeAddsTheAttribute()",
                    line: "506"
                } ));
                t.getFixture().applyingNewInstanceOfMultipleUseAttributeAddsTheAttribute();
            },
            nonInheritedAttributeIsNotInherited: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NonInheritedAttributeIsNotInherited()",
                    line: "518"
                } ));
                t.getFixture().nonInheritedAttributeIsNotInherited();
            },
            getCustomAttributesTypeFilterWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetCustomAttributesTypeFilterWorks()",
                    line: "525"
                } ));
                t.getFixture().getCustomAttributesTypeFilterWorks();
            },
            getCustomAttributesWorksForOpenGenericClass: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetCustomAttributesWorksForOpenGenericClass()",
                    line: "535"
                } ));
                t.getFixture().getCustomAttributesWorksForOpenGenericClass();
            },
            getCustomAttributesWorksForConstructedGenericClass: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetCustomAttributesWorksForConstructedGenericClass()",
                    line: "543"
                } ));
                t.getFixture().getCustomAttributesWorksForConstructedGenericClass();
            },
            getCustomAttributesWorksForOpenGenericInterface: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetCustomAttributesWorksForOpenGenericInterface()",
                    line: "551"
                } ));
                t.getFixture().getCustomAttributesWorksForOpenGenericInterface();
            },
            getCustomAttributesWorksForConstructedGenericInterface: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetCustomAttributesWorksForConstructedGenericInterface()",
                    line: "559"
                } ));
                t.getFixture().getCustomAttributesWorksForConstructedGenericInterface();
            },
            allSupportedScalarTypesCanBeUsedAsAttributeArguments: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AllSupportedScalarTypesCanBeUsedAsAttributeArguments()",
                    line: "567"
                } ));
                t.getFixture().allSupportedScalarTypesCanBeUsedAsAttributeArguments();
            },
            arraysCanBeUsedAsAttributeArguments: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ArraysCanBeUsedAsAttributeArguments()",
                    line: "585"
                } ));
                t.getFixture().arraysCanBeUsedAsAttributeArguments();
            },
            namedValuesEnumCanBeUsedAsAttributeArgument: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NamedValuesEnumCanBeUsedAsAttributeArgument()",
                    line: "593"
                } ));
                t.getFixture().namedValuesEnumCanBeUsedAsAttributeArgument();
            },
            propertiesWithSetMethodsImplementedAsNormalMethodsCanBeSetInAttributeDeclaration: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "PropertiesWithSetMethodsImplementedAsNormalMethodsCanBeSetInAttributeDeclaration()",
                    line: "600"
                } ));
                t.getFixture().propertiesWithSetMethodsImplementedAsNormalMethodsCanBeSetInAttributeDeclaration();
            },
            propertiesWithSetMethodsImplementedAsInlineCodeCanBeSetInAttributeDeclaration: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "PropertiesWithSetMethodsImplementedAsInlineCodeCanBeSetInAttributeDeclaration()",
                    line: "607"
                } ));
                t.getFixture().propertiesWithSetMethodsImplementedAsInlineCodeCanBeSetInAttributeDeclaration();
            },
            propertiesImplementedAsFieldsCanBeAssignedInAttributeDeclaration: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "PropertiesImplementedAsFieldsCanBeAssignedInAttributeDeclaration()",
                    line: "614"
                } ));
                t.getFixture().propertiesImplementedAsFieldsCanBeAssignedInAttributeDeclaration();
            },
            fieldsCanBeAssignedInAttributeDeclaration: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "FieldsCanBeAssignedInAttributeDeclaration()",
                    line: "621"
                } ));
                t.getFixture().fieldsCanBeAssignedInAttributeDeclaration();
            },
            creatingAttributeWithNamedConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreatingAttributeWithNamedConstructorWorks()",
                    line: "628"
                } ));
                t.getFixture().creatingAttributeWithNamedConstructorWorks();
            },
            creatingAttributeWithInlineCodeConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreatingAttributeWithInlineCodeConstructorWorks()",
                    line: "635"
                } ));
                t.getFixture().creatingAttributeWithInlineCodeConstructorWorks();
            },
            conditionalAttributesWhoseSymbolsAreNotDefinedAreRemoved: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.AttributeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_AttributeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConditionalAttributesWhoseSymbolsAreNotDefinedAreRemoved()",
                    line: "642"
                } ));
                t.getFixture().conditionalAttributesWhoseSymbolsAreNotDefinedAreRemoved();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Reflection.AttributeTests",
                    file: "Batch4\\Reflection\\AttributeTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests)],
        statics: {
            getMembersWithoutBindingFlagsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetMembersWithoutBindingFlagsWorks()",
                    line: "885"
                } ));
                t.getFixture().getMembersWithoutBindingFlagsWorks();
            },
            getMembersWorksForInterface: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetMembersWorksForInterface()",
                    line: "895"
                } ));
                t.getFixture().getMembersWorksForInterface();
            },
            getMembersWithBindingFlagsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetMembersWithBindingFlagsWorks()",
                    line: "903"
                } ));
                t.getFixture().getMembersWithBindingFlagsWorks();
            },
            getMemberWithNameWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetMemberWithNameWorks()",
                    line: "941"
                } ));
                t.getFixture().getMemberWithNameWorks();
            },
            getMemberWithNameAndBindingFlagsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetMemberWithNameAndBindingFlagsWorks()",
                    line: "951"
                } ));
                t.getFixture().getMemberWithNameAndBindingFlagsWorks();
            },
            getConstructorsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetConstructorsWorks()",
                    line: "966"
                } ));
                t.getFixture().getConstructorsWorks();
            },
            getConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetConstructorWorks()",
                    line: "972"
                } ));
                t.getFixture().getConstructorWorks();
            },
            getMethodsWithoutBindingFlagsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetMethodsWithoutBindingFlagsWorks()",
                    line: "980"
                } ));
                t.getFixture().getMethodsWithoutBindingFlagsWorks();
            },
            getMethodsWithBindingFlagsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetMethodsWithBindingFlagsWorks()",
                    line: "990"
                } ));
                t.getFixture().getMethodsWithBindingFlagsWorks();
            },
            getMethodWithNameWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetMethodWithNameWorks()",
                    line: "1028"
                } ));
                t.getFixture().getMethodWithNameWorks();
            },
            getMethodWithNameAndBindingFlagsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetMethodWithNameAndBindingFlagsWorks()",
                    line: "1044"
                } ));
                t.getFixture().getMethodWithNameAndBindingFlagsWorks();
            },
            getMethodWithNameAndArgumentTypesWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetMethodWithNameAndArgumentTypesWorks()",
                    line: "1072"
                } ));
                t.getFixture().getMethodWithNameAndArgumentTypesWorks();
            },
            getMethodWithNameAndArgumentTypesAndBindingFlagsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetMethodWithNameAndArgumentTypesAndBindingFlagsWorks()",
                    line: "1087"
                } ));
                t.getFixture().getMethodWithNameAndArgumentTypesAndBindingFlagsWorks();
            },
            getPropertiesWithoutBindingFlagsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetPropertiesWithoutBindingFlagsWorks()",
                    line: "1107"
                } ));
                t.getFixture().getPropertiesWithoutBindingFlagsWorks();
            },
            getPropertiesWithBindingFlagsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetPropertiesWithBindingFlagsWorks()",
                    line: "1117"
                } ));
                t.getFixture().getPropertiesWithBindingFlagsWorks();
            },
            getPropertyWithNameWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetPropertyWithNameWorks()",
                    line: "1155"
                } ));
                t.getFixture().getPropertyWithNameWorks();
            },
            getPropertyWithNameAndBindingFlagsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetPropertyWithNameAndBindingFlagsWorks()",
                    line: "1167"
                } ));
                t.getFixture().getPropertyWithNameAndBindingFlagsWorks();
            },
            getPropertyWithNameAndArgumentTypesWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetPropertyWithNameAndArgumentTypesWorks()",
                    line: "1187"
                } ));
                t.getFixture().getPropertyWithNameAndArgumentTypesWorks();
            },
            getPropertyWithNameAndArgumentTypesAndBindingFlagsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetPropertyWithNameAndArgumentTypesAndBindingFlagsWorks()",
                    line: "1198"
                } ));
                t.getFixture().getPropertyWithNameAndArgumentTypesAndBindingFlagsWorks();
            },
            getFieldsWithoutBindingFlagsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetFieldsWithoutBindingFlagsWorks()",
                    line: "1214"
                } ));
                t.getFixture().getFieldsWithoutBindingFlagsWorks();
            },
            getFieldsWithBindingFlagsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetFieldsWithBindingFlagsWorks()",
                    line: "1224"
                } ));
                t.getFixture().getFieldsWithBindingFlagsWorks();
            },
            getFieldWithNameWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetFieldWithNameWorks()",
                    line: "1262"
                } ));
                t.getFixture().getFieldWithNameWorks();
            },
            getFieldWithNameAndBindingFlagsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetFieldWithNameAndBindingFlagsWorks()",
                    line: "1272"
                } ));
                t.getFixture().getFieldWithNameAndBindingFlagsWorks();
            },
            getEventsWithoutBindingFlagsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetEventsWithoutBindingFlagsWorks()",
                    line: "1289"
                } ));
                t.getFixture().getEventsWithoutBindingFlagsWorks();
            },
            getEventsWithBindingFlagsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetEventsWithBindingFlagsWorks()",
                    line: "1299"
                } ));
                t.getFixture().getEventsWithBindingFlagsWorks();
            },
            getEventWithNameWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetEventWithNameWorks()",
                    line: "1337"
                } ));
                t.getFixture().getEventWithNameWorks();
            },
            getEventWithNameAndBindingFlagsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetEventWithNameAndBindingFlagsWorks()",
                    line: "1347"
                } ));
                t.getFixture().getEventWithNameAndBindingFlagsWorks();
            },
            isOperatorForMemberInfoWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.GetMembersTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_GetMembersTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsOperatorForMemberInfoWorks()",
                    line: "1364"
                } ));
                t.getFixture().isOperatorForMemberInfoWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Reflection.GetMembersTests",
                    file: "Batch4\\Reflection\\GetMembersTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests)],
        statics: {
            getMembersReturnsMethodsWithAnyScriptableAttributeOrReflectableAttribute: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetMembersReturnsMethodsWithAnyScriptableAttributeOrReflectableAttribute()",
                    line: "847"
                } ));
                t.getFixture().getMembersReturnsMethodsWithAnyScriptableAttributeOrReflectableAttribute();
            },
            structMemberReflectionWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "StructMemberReflectionWorks()",
                    line: "856"
                } ));
                t.getFixture().structMemberReflectionWorks();
            },
            isStaticFlagWorksForMethod: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsStaticFlagWorksForMethod()",
                    line: "865"
                } ));
                t.getFixture().isStaticFlagWorksForMethod();
            },
            memberTypeIsMethodForMethod: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MemberTypeIsMethodForMethod()",
                    line: "872"
                } ));
                t.getFixture().memberTypeIsMethodForMethod();
            },
            isConstructorIsFalseForMethod: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsConstructorIsFalseForMethod()",
                    line: "879"
                } ));
                t.getFixture().isConstructorIsFalseForMethod();
            },
            isConstructorIsTrueForAllKindsOfConstructors: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsConstructorIsTrueForAllKindsOfConstructors()",
                    line: "886"
                } ));
                t.getFixture().isConstructorIsTrueForAllKindsOfConstructors();
            },
            isStaticIsFalseForAllKindsOfConstructors: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsStaticIsFalseForAllKindsOfConstructors()",
                    line: "900"
                } ));
                t.getFixture().isStaticIsFalseForAllKindsOfConstructors();
            },
            memberTypeIsConstructorForAllKindsOfConstructors: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MemberTypeIsConstructorForAllKindsOfConstructors()",
                    line: "914"
                } ));
                t.getFixture().memberTypeIsConstructorForAllKindsOfConstructors();
            },
            nameIsCtorForAllKindsOfConstructors: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NameIsCtorForAllKindsOfConstructors()",
                    line: "928"
                } ));
                t.getFixture().nameIsCtorForAllKindsOfConstructors();
            },
            declaringTypeIsCorrectForAllKindsOfConstructors: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DeclaringTypeIsCorrectForAllKindsOfConstructors()",
                    line: "942"
                } ));
                t.getFixture().declaringTypeIsCorrectForAllKindsOfConstructors();
            },
            scriptNameIsCorrectForAllKindsOfConstructors: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ScriptNameIsCorrectForAllKindsOfConstructors()",
                    line: "956"
                } ));
                t.getFixture().scriptNameIsCorrectForAllKindsOfConstructors();
            },
            isStaticMethodIsTrueOnlyForStaticMethodConstructors: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsStaticMethodIsTrueOnlyForStaticMethodConstructors()",
                    line: "970"
                } ));
                t.getFixture().isStaticMethodIsTrueOnlyForStaticMethodConstructors();
            },
            isExpandParamsIsCorrectForConstructors: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsExpandParamsIsCorrectForConstructors()",
                    line: "984"
                } ));
                t.getFixture().isExpandParamsIsCorrectForConstructors();
            },
            specialImplementationExistsOnlyForObjectLiteralAndInlineCodeConstructors: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SpecialImplementationExistsOnlyForObjectLiteralAndInlineCodeConstructors()",
                    line: "997"
                } ));
                t.getFixture().specialImplementationExistsOnlyForObjectLiteralAndInlineCodeConstructors();
            },
            declaringTypeShouldBeCorrectForMethods: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DeclaringTypeShouldBeCorrectForMethods()",
                    line: "1011"
                } ));
                t.getFixture().declaringTypeShouldBeCorrectForMethods();
            },
            returnTypeAndParameterTypesAreCorrectForMethods: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ReturnTypeAndParameterTypesAreCorrectForMethods()",
                    line: "1019"
                } ));
                t.getFixture().returnTypeAndParameterTypesAreCorrectForMethods();
            },
            parameterTypesShouldBeCorrectForConstructors: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ParameterTypesShouldBeCorrectForConstructors()",
                    line: "1042"
                } ));
                t.getFixture().parameterTypesShouldBeCorrectForConstructors();
            },
            voidIsConsideredObjectAsReturnType: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "VoidIsConsideredObjectAsReturnType()",
                    line: "1056"
                } ));
                t.getFixture().voidIsConsideredObjectAsReturnType();
            },
            methodNameIsTheCSharpName: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MethodNameIsTheCSharpName()",
                    line: "1062"
                } ));
                t.getFixture().methodNameIsTheCSharpName();
            },
            typeParametersAreReplacedWithObjectForReturnAndParameterTypesForOpenGenericTypes: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypeParametersAreReplacedWithObjectForReturnAndParameterTypesForOpenGenericTypes()",
                    line: "1069"
                } ));
                t.getFixture().typeParametersAreReplacedWithObjectForReturnAndParameterTypesForOpenGenericTypes();
            },
            typeParametersAreCorrectForReturnAndParameterTypesForConstructedGenericTypes: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypeParametersAreCorrectForReturnAndParameterTypesForConstructedGenericTypes()",
                    line: "1077"
                } ));
                t.getFixture().typeParametersAreCorrectForReturnAndParameterTypesForConstructedGenericTypes();
            },
            methodTypeParametersAreReplacedWithObjectForReturnAndParameterTypes: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MethodTypeParametersAreReplacedWithObjectForReturnAndParameterTypes()",
                    line: "1089"
                } ));
                t.getFixture().methodTypeParametersAreReplacedWithObjectForReturnAndParameterTypes();
            },
            isGenericMethodDefinitionAndTypeParameterCountWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsGenericMethodDefinitionAndTypeParameterCountWork()",
                    line: "1097"
                } ));
                t.getFixture().isGenericMethodDefinitionAndTypeParameterCountWork();
            },
            scriptNameWorksForAllKindsOfMethods: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ScriptNameWorksForAllKindsOfMethods()",
                    line: "1108"
                } ));
                t.getFixture().scriptNameWorksForAllKindsOfMethods();
            },
            specialImplementationExistsOnlyForMethodsImplementedAsInlineCode: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SpecialImplementationExistsOnlyForMethodsImplementedAsInlineCode()",
                    line: "1122"
                } ));
                t.getFixture().specialImplementationExistsOnlyForMethodsImplementedAsInlineCode();
            },
            isExpandParamsIsCorrectForMethods: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsExpandParamsIsCorrectForMethods()",
                    line: "1130"
                } ));
                t.getFixture().isExpandParamsIsCorrectForMethods();
            },
            createDelegateWorksForNonGenericInstanceMethods: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreateDelegateWorksForNonGenericInstanceMethods()",
                    line: "1143"
                } ));
                t.getFixture().createDelegateWorksForNonGenericInstanceMethods();
            },
            delegateCreateDelegateWorksForNonGenericInstanceMethods: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DelegateCreateDelegateWorksForNonGenericInstanceMethods()",
                    line: "1161"
                } ));
                t.getFixture().delegateCreateDelegateWorksForNonGenericInstanceMethods();
            },
            createDelegateWorksNonGenericStaticMethods: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreateDelegateWorksNonGenericStaticMethods()",
                    line: "1169"
                } ));
                t.getFixture().createDelegateWorksNonGenericStaticMethods();
            },
            createDelegateWorksNonGenericStaticMethodOfGenericType: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreateDelegateWorksNonGenericStaticMethodOfGenericType()",
                    line: "1188"
                } ));
                t.getFixture().createDelegateWorksNonGenericStaticMethodOfGenericType();
            },
            createDelegateWorksForGenericInstanceMethods: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreateDelegateWorksForGenericInstanceMethods()",
                    line: "1196"
                } ));
                t.getFixture().createDelegateWorksForGenericInstanceMethods();
            },
            createDelegateWorksForGenericStaticMethods: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreateDelegateWorksForGenericStaticMethods()",
                    line: "1210"
                } ));
                t.getFixture().createDelegateWorksForGenericStaticMethods();
            },
            invokeWorksForNonGenericInstanceMethods: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "InvokeWorksForNonGenericInstanceMethods()",
                    line: "1223"
                } ));
                t.getFixture().invokeWorksForNonGenericInstanceMethods();
            },
            invokeWorksForNonGenericStaticMethods: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "InvokeWorksForNonGenericStaticMethods()",
                    line: "1236"
                } ));
                t.getFixture().invokeWorksForNonGenericStaticMethods();
            },
            invokeWorksForNonGenericInstanceMethodsOnSerializableTypes: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "InvokeWorksForNonGenericInstanceMethodsOnSerializableTypes()",
                    line: "1246"
                } ));
                t.getFixture().invokeWorksForNonGenericInstanceMethodsOnSerializableTypes();
            },
            invokeWorksForNonGenericInlineCodeMethods: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "InvokeWorksForNonGenericInlineCodeMethods()",
                    line: "1253"
                } ));
                t.getFixture().invokeWorksForNonGenericInlineCodeMethods();
            },
            invokeWorksForGenericInlineCodeMethods: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "InvokeWorksForGenericInlineCodeMethods()",
                    line: "1260"
                } ));
                t.getFixture().invokeWorksForGenericInlineCodeMethods();
            },
            invokeWorksForGenericInstanceMethod: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "InvokeWorksForGenericInstanceMethod()",
                    line: "1267"
                } ));
                t.getFixture().invokeWorksForGenericInstanceMethod();
            },
            invokeWorksForGenericStaticMethod: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "InvokeWorksForGenericStaticMethod()",
                    line: "1282"
                } ));
                t.getFixture().invokeWorksForGenericStaticMethod();
            },
            invokeWorksForGenericInstanceMethodsOnSerializableTypes: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "InvokeWorksForGenericInstanceMethodsOnSerializableTypes()",
                    line: "1294"
                } ));
                t.getFixture().invokeWorksForGenericInstanceMethodsOnSerializableTypes();
            },
            invokeWorksForExpandParamsMethods: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "InvokeWorksForExpandParamsMethods()",
                    line: "1301"
                } ));
                t.getFixture().invokeWorksForExpandParamsMethods();
            },
            invokeWorksForAllKindsOfConstructors: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "InvokeWorksForAllKindsOfConstructors()",
                    line: "1313"
                } ));
                t.getFixture().invokeWorksForAllKindsOfConstructors();
            },
            invokeWorksForExpandParamsConstructors: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "InvokeWorksForExpandParamsConstructors()",
                    line: "1339"
                } ));
                t.getFixture().invokeWorksForExpandParamsConstructors();
            },
            memberTypeIsFieldForField: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MemberTypeIsFieldForField()",
                    line: "1353"
                } ));
                t.getFixture().memberTypeIsFieldForField();
            },
            declaringTypeIsCorrectForField: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DeclaringTypeIsCorrectForField()",
                    line: "1360"
                } ));
                t.getFixture().declaringTypeIsCorrectForField();
            },
            nameIsCorrectForField: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NameIsCorrectForField()",
                    line: "1367"
                } ));
                t.getFixture().nameIsCorrectForField();
            },
            isStaticIsCorrectForField: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsStaticIsCorrectForField()",
                    line: "1374"
                } ));
                t.getFixture().isStaticIsCorrectForField();
            },
            fieldTypeIsCorrectForField: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "FieldTypeIsCorrectForField()",
                    line: "1382"
                } ));
                t.getFixture().fieldTypeIsCorrectForField();
            },
            scriptNameIsCorrectForField: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ScriptNameIsCorrectForField()",
                    line: "1390"
                } ));
                t.getFixture().scriptNameIsCorrectForField();
            },
            getValueWorksForInstanceField: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetValueWorksForInstanceField()",
                    line: "1397"
                } ));
                t.getFixture().getValueWorksForInstanceField();
            },
            getValueWorksForStaticField: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetValueWorksForStaticField()",
                    line: "1404"
                } ));
                t.getFixture().getValueWorksForStaticField();
            },
            setValueWorksForInstanceField: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetValueWorksForInstanceField()",
                    line: "1411"
                } ));
                t.getFixture().setValueWorksForInstanceField();
            },
            setValueWorksForStaticField: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetValueWorksForStaticField()",
                    line: "1419"
                } ));
                t.getFixture().setValueWorksForStaticField();
            },
            memberTypeIsEventForEvent: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MemberTypeIsEventForEvent()",
                    line: "1426"
                } ));
                t.getFixture().memberTypeIsEventForEvent();
            },
            declaringTypeIsCorrectForEvent: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DeclaringTypeIsCorrectForEvent()",
                    line: "1433"
                } ));
                t.getFixture().declaringTypeIsCorrectForEvent();
            },
            nameIsCorrectForEvent: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NameIsCorrectForEvent()",
                    line: "1440"
                } ));
                t.getFixture().nameIsCorrectForEvent();
            },
            isStaticIsCorrectForEvent: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsStaticIsCorrectForEvent()",
                    line: "1447"
                } ));
                t.getFixture().isStaticIsCorrectForEvent();
            },
            addEventHandlerMethodWorksForInstanceEvent: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AddEventHandlerMethodWorksForInstanceEvent()",
                    line: "1454"
                } ));
                t.getFixture().addEventHandlerMethodWorksForInstanceEvent();
            },
            addEventHandlerMethodWorksForInstanceEventWithInlineCodeAddMethod: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AddEventHandlerMethodWorksForInstanceEventWithInlineCodeAddMethod()",
                    line: "1466"
                } ));
                t.getFixture().addEventHandlerMethodWorksForInstanceEventWithInlineCodeAddMethod();
            },
            addEventHandlerMethodWorksForStaticEvent: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AddEventHandlerMethodWorksForStaticEvent()",
                    line: "1477"
                } ));
                t.getFixture().addEventHandlerMethodWorksForStaticEvent();
            },
            addEventHandlerMethodWorksForStaticEventWithInlineCodeAddMethod: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AddEventHandlerMethodWorksForStaticEventWithInlineCodeAddMethod()",
                    line: "1488"
                } ));
                t.getFixture().addEventHandlerMethodWorksForStaticEventWithInlineCodeAddMethod();
            },
            removeEventHandlerMethodWorksForInstanceEvent: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RemoveEventHandlerMethodWorksForInstanceEvent()",
                    line: "1498"
                } ));
                t.getFixture().removeEventHandlerMethodWorksForInstanceEvent();
            },
            removeEventHandlerMethodWorksForInstanceEventWithInlineCodeRemoveMethod: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RemoveEventHandlerMethodWorksForInstanceEventWithInlineCodeRemoveMethod()",
                    line: "1513"
                } ));
                t.getFixture().removeEventHandlerMethodWorksForInstanceEventWithInlineCodeRemoveMethod();
            },
            removeEventHandlerMethodWorksForStaticEvent: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RemoveEventHandlerMethodWorksForStaticEvent()",
                    line: "1525"
                } ));
                t.getFixture().removeEventHandlerMethodWorksForStaticEvent();
            },
            removeEventHandlerMethodWorksForStaticEventWithInlineCodeRemoveMethod: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RemoveEventHandlerMethodWorksForStaticEventWithInlineCodeRemoveMethod()",
                    line: "1539"
                } ));
                t.getFixture().removeEventHandlerMethodWorksForStaticEventWithInlineCodeRemoveMethod();
            },
            propertiesForAddMethodAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "PropertiesForAddMethodAreCorrect()",
                    line: "1550"
                } ));
                t.getFixture().propertiesForAddMethodAreCorrect();
            },
            propertiesForRemoveMethodAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "PropertiesForRemoveMethodAreCorrect()",
                    line: "1587"
                } ));
                t.getFixture().propertiesForRemoveMethodAreCorrect();
            },
            memberTypeIsPropertyForProperty: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MemberTypeIsPropertyForProperty()",
                    line: "1626"
                } ));
                t.getFixture().memberTypeIsPropertyForProperty();
            },
            scriptFieldNameIsCorrectForPropertiesImplementedAsFieldAndNullForOtherProperties: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ScriptFieldNameIsCorrectForPropertiesImplementedAsFieldAndNullForOtherProperties()",
                    line: "1635"
                } ));
                t.getFixture().scriptFieldNameIsCorrectForPropertiesImplementedAsFieldAndNullForOtherProperties();
            },
            memberTypeIsPropertyForIndexer: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MemberTypeIsPropertyForIndexer()",
                    line: "1642"
                } ));
                t.getFixture().memberTypeIsPropertyForIndexer();
            },
            declaringTypeIsCorrectForProperty: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DeclaringTypeIsCorrectForProperty()",
                    line: "1649"
                } ));
                t.getFixture().declaringTypeIsCorrectForProperty();
            },
            declaringTypeIsCorrectForIndexer: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DeclaringTypeIsCorrectForIndexer()",
                    line: "1658"
                } ));
                t.getFixture().declaringTypeIsCorrectForIndexer();
            },
            nameIsCorrectForProperty: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NameIsCorrectForProperty()",
                    line: "1665"
                } ));
                t.getFixture().nameIsCorrectForProperty();
            },
            nameIsCorrectForIndexer: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NameIsCorrectForIndexer()",
                    line: "1674"
                } ));
                t.getFixture().nameIsCorrectForIndexer();
            },
            isStaticIsCorrectForProperty: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsStaticIsCorrectForProperty()",
                    line: "1681"
                } ));
                t.getFixture().isStaticIsCorrectForProperty();
            },
            isStaticIsFalseForIndexer: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsStaticIsFalseForIndexer()",
                    line: "1690"
                } ));
                t.getFixture().isStaticIsFalseForIndexer();
            },
            propertyTypeIsCorrectForProperty: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "PropertyTypeIsCorrectForProperty()",
                    line: "1697"
                } ));
                t.getFixture().propertyTypeIsCorrectForProperty();
            },
            propertyTypeIsCorrectForIndexer: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "PropertyTypeIsCorrectForIndexer()",
                    line: "1706"
                } ));
                t.getFixture().propertyTypeIsCorrectForIndexer();
            },
            indexParameterTypesAreEmptyForProperty: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexParameterTypesAreEmptyForProperty()",
                    line: "1713"
                } ));
                t.getFixture().indexParameterTypesAreEmptyForProperty();
            },
            indexParameterTypesAreCorrectForIndexer: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexParameterTypesAreCorrectForIndexer()",
                    line: "1722"
                } ));
                t.getFixture().indexParameterTypesAreCorrectForIndexer();
            },
            propertiesForGetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "PropertiesForGetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods()",
                    line: "1729"
                } ));
                t.getFixture().propertiesForGetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods();
            },
            propertiesForSetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "PropertiesForSetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods()",
                    line: "1782"
                } ));
                t.getFixture().propertiesForSetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods();
            },
            propertiesForGetMethodAreCorrectForPropertyImplementedAsFields: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "PropertiesForGetMethodAreCorrectForPropertyImplementedAsFields()",
                    line: "1835"
                } ));
                t.getFixture().propertiesForGetMethodAreCorrectForPropertyImplementedAsFields();
            },
            propertiesForSetMethodAreCorrectForPropertyImplementedAsFields: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "PropertiesForSetMethodAreCorrectForPropertyImplementedAsFields()",
                    line: "1869"
                } ));
                t.getFixture().propertiesForSetMethodAreCorrectForPropertyImplementedAsFields();
            },
            propertiesForGetMethodAreCorrectForIndexer: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "PropertiesForGetMethodAreCorrectForIndexer()",
                    line: "1903"
                } ));
                t.getFixture().propertiesForGetMethodAreCorrectForIndexer();
            },
            propertiesForSetMethodAreCorrectForIndexer: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "PropertiesForSetMethodAreCorrectForIndexer()",
                    line: "1937"
                } ));
                t.getFixture().propertiesForSetMethodAreCorrectForIndexer();
            },
            canReadAndWriteAndPropertiesWithOnlyOneAccessor: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CanReadAndWriteAndPropertiesWithOnlyOneAccessor()",
                    line: "1977"
                } ));
                t.getFixture().canReadAndWriteAndPropertiesWithOnlyOneAccessor();
            },
            canReadAndWriteAndIndexersWithOnlyOneAccessor: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CanReadAndWriteAndIndexersWithOnlyOneAccessor()",
                    line: "2031"
                } ));
                t.getFixture().canReadAndWriteAndIndexersWithOnlyOneAccessor();
            },
            propertyInfoGetValueWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "PropertyInfoGetValueWorks()",
                    line: "2049"
                } ));
                t.getFixture().propertyInfoGetValueWorks();
            },
            propertyInfoSetValueWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "PropertyInfoSetValueWorks()",
                    line: "2070"
                } ));
                t.getFixture().propertyInfoSetValueWorks();
            },
            memberAttributesWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MemberAttributesWork()",
                    line: "2125"
                } ));
                t.getFixture().memberAttributesWork();
            },
            membersReflectableAttributeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.ReflectionTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_ReflectionTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MembersReflectableAttributeWorks()",
                    line: "2141"
                } ));
                t.getFixture().membersReflectableAttributeWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Reflection.ReflectionTests",
                    file: "Batch4\\Reflection\\ReflectionTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemLanguageSupportTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests)],
        statics: {
            typeIsWorksForReferenceTypes: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemLanguageSupportTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypeIsWorksForReferenceTypes()",
                    line: "206"
                } ));
                t.getFixture().typeIsWorksForReferenceTypes();
            },
            typeAsWorksForReferenceTypes: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemLanguageSupportTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypeAsWorksForReferenceTypes()",
                    line: "349"
                } ));
                t.getFixture().typeAsWorksForReferenceTypes();
            },
            castWorksForReferenceTypes: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemLanguageSupportTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CastWorksForReferenceTypes()",
                    line: "492"
                } ));
                t.getFixture().castWorksForReferenceTypes();
            },
            getTypeWorksOnObjects: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemLanguageSupportTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetTypeWorksOnObjects()",
                    line: "635"
                } ));
                t.getFixture().getTypeWorksOnObjects();
            },
            getTypeOnNullInstanceThrowsException: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemLanguageSupportTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetTypeOnNullInstanceThrowsException()",
                    line: "649"
                } ));
                t.getFixture().getTypeOnNullInstanceThrowsException();
            },
            castOperatorForSerializableTypeWithoutTypeCheckCodeAlwaysSucceedsGeneric: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemLanguageSupportTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CastOperatorForSerializableTypeWithoutTypeCheckCodeAlwaysSucceedsGeneric()",
                    line: "662"
                } ));
                t.getFixture().castOperatorForSerializableTypeWithoutTypeCheckCodeAlwaysSucceedsGeneric();
            },
            typeCheckForSubTypeOfGenericType: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemLanguageSupportTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypeCheckForSubTypeOfGenericType()",
                    line: "704"
                } ));
                t.getFixture().typeCheckForSubTypeOfGenericType();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Reflection.TypeSystemLanguageSupportTests",
                    file: "Batch4\\Reflection\\TypeSystemLanguageSupportTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests)],
        statics: {
            fullNamePropertyReturnsTheNameWithTheNamespace: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "FullNamePropertyReturnsTheNameWithTheNamespace()",
                    line: "123"
                } ));
                t.getFixture().fullNamePropertyReturnsTheNameWithTheNamespace();
            },
            assemblyQualifiedNameReturnsTheNameWithTheNamespaceAndAssemblyName: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AssemblyQualifiedNameReturnsTheNameWithTheNamespaceAndAssemblyName()",
                    line: "129"
                } ));
                t.getFixture().assemblyQualifiedNameReturnsTheNameWithTheNamespaceAndAssemblyName();
            },
            assemblyPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AssemblyPropertyWorks()",
                    line: "137"
                } ));
                t.getFixture().assemblyPropertyWorks();
            },
            namespacePropertyReturnsTheNamespaceWithoutTheName: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NamespacePropertyReturnsTheNamespaceWithoutTheName()",
                    line: "149"
                } ));
                t.getFixture().namespacePropertyReturnsTheNamespaceWithoutTheName();
            },
            instantiatingClassWithConstructorThatNeedsToBeAppliedWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "InstantiatingClassWithConstructorThatNeedsToBeAppliedWorks()",
                    line: "156"
                } ));
                t.getFixture().instantiatingClassWithConstructorThatNeedsToBeAppliedWorks();
            },
            namePropertyRemovesTheNamespace: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NamePropertyRemovesTheNamespace()",
                    line: "166"
                } ));
                t.getFixture().namePropertyRemovesTheNamespace();
            },
            gettingBaseTypeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GettingBaseTypeWorks()",
                    line: "174"
                } ));
                t.getFixture().gettingBaseTypeWorks();
            },
            gettingImplementedInterfacesWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GettingImplementedInterfacesWorks()",
                    line: "182"
                } ));
                t.getFixture().gettingImplementedInterfacesWorks();
            },
            typeOfAnOpenGenericClassWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypeOfAnOpenGenericClassWorks()",
                    line: "193"
                } ));
                t.getFixture().typeOfAnOpenGenericClassWorks();
            },
            typeOfAnOpenGenericInterfaceWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypeOfAnOpenGenericInterfaceWorks()",
                    line: "199"
                } ));
                t.getFixture().typeOfAnOpenGenericInterfaceWorks();
            },
            typeOfInstantiatedGenericClassWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypeOfInstantiatedGenericClassWorks()",
                    line: "205"
                } ));
                t.getFixture().typeOfInstantiatedGenericClassWorks();
            },
            typeOfInstantiatedGenericInterfaceWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypeOfInstantiatedGenericInterfaceWorks()",
                    line: "211"
                } ));
                t.getFixture().typeOfInstantiatedGenericInterfaceWorks();
            },
            constructingAGenericTypeTwiceWithTheSameArgumentsReturnsTheSameInstance: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructingAGenericTypeTwiceWithTheSameArgumentsReturnsTheSameInstance()",
                    line: "217"
                } ));
                t.getFixture().constructingAGenericTypeTwiceWithTheSameArgumentsReturnsTheSameInstance();
            },
            accessingAStaticMemberInAGenericClassWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AccessingAStaticMemberInAGenericClassWorks()",
                    line: "227"
                } ));
                t.getFixture().accessingAStaticMemberInAGenericClassWorks();
            },
            typeOfNestedGenericClassWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypeOfNestedGenericClassWorks()",
                    line: "235"
                } ));
                t.getFixture().typeOfNestedGenericClassWorks();
            },
            baseTypeAndImplementedInterfacesForGenericTypeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "BaseTypeAndImplementedInterfacesForGenericTypeWorks()",
                    line: "241"
                } ));
                t.getFixture().baseTypeAndImplementedInterfacesForGenericTypeWorks();
            },
            isGenericTypeDefinitionWorksAsExpected: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsGenericTypeDefinitionWorksAsExpected()",
                    line: "248"
                } ));
                t.getFixture().isGenericTypeDefinitionWorksAsExpected();
            },
            genericParameterCountReturnsZeroForConstructedTypesAndNonZeroForOpenOnes: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GenericParameterCountReturnsZeroForConstructedTypesAndNonZeroForOpenOnes()",
                    line: "260"
                } ));
                t.getFixture().genericParameterCountReturnsZeroForConstructedTypesAndNonZeroForOpenOnes();
            },
            getGenericArgumentsReturnsTheCorrectTypesForConstructedTypesOtherwiseNull: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetGenericArgumentsReturnsTheCorrectTypesForConstructedTypesOtherwiseNull()",
                    line: "272"
                } ));
                t.getFixture().getGenericArgumentsReturnsTheCorrectTypesForConstructedTypesOtherwiseNull();
            },
            getGenericTypeDefinitionReturnsTheGenericTypeDefinitionForConstructedTypeOtherwiseNull: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetGenericTypeDefinitionReturnsTheGenericTypeDefinitionForConstructedTypeOtherwiseNull()",
                    line: "284"
                } ));
                t.getFixture().getGenericTypeDefinitionReturnsTheGenericTypeDefinitionForConstructedTypeOtherwiseNull();
            },
            isAssignableFromWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsAssignableFromWorks()",
                    line: "427"
                } ));
                t.getFixture().isAssignableFromWorks();
            },
            isSubclassOfWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsSubclassOfWorks()",
                    line: "645"
                } ));
                t.getFixture().isSubclassOfWorks();
            },
            isClassWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsClassWorks()",
                    line: "662"
                } ));
                t.getFixture().isClassWorks();
            },
            isEnumWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsEnumWorks()",
                    line: "675"
                } ));
                t.getFixture().isEnumWorks();
            },
            isArrayWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsArrayWorks()",
                    line: "688"
                } ));
                t.getFixture().isArrayWorks();
            },
            isFlagsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsFlagsWorks()",
                    line: "700"
                } ));
                t.getFixture().isFlagsWorks();
            },
            isInterfaceWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsInterfaceWorks()",
                    line: "713"
                } ));
                t.getFixture().isInterfaceWorks();
            },
            isInstanceOfTypeWorksForReferenceTypes: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsInstanceOfTypeWorksForReferenceTypes()",
                    line: "726"
                } ));
                t.getFixture().isInstanceOfTypeWorksForReferenceTypes();
            },
            invokingBaseUnnamedConstructorWithoutArgumentsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "InvokingBaseUnnamedConstructorWithoutArgumentsWorks()",
                    line: "918"
                } ));
                t.getFixture().invokingBaseUnnamedConstructorWithoutArgumentsWorks();
            },
            invokingBaseUnnamedConstructorWithArgumentsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "InvokingBaseUnnamedConstructorWithArgumentsWorks()",
                    line: "948"
                } ));
                t.getFixture().invokingBaseUnnamedConstructorWithArgumentsWorks();
            },
            invokingBaseNamedConstructorWithoutArgumentsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "InvokingBaseNamedConstructorWithoutArgumentsWorks()",
                    line: "978"
                } ));
                t.getFixture().invokingBaseNamedConstructorWithoutArgumentsWorks();
            },
            invokingBaseNamedConstructorWithArgumentsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "InvokingBaseNamedConstructorWithArgumentsWorks()",
                    line: "1008"
                } ));
                t.getFixture().invokingBaseNamedConstructorWithArgumentsWorks();
            },
            constructingInstanceWithNamedConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructingInstanceWithNamedConstructorWorks()",
                    line: "1048"
                } ));
                t.getFixture().constructingInstanceWithNamedConstructorWorks();
            },
            constructingInstanceWithNamedConstructorWorks2: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructingInstanceWithNamedConstructorWorks2()",
                    line: "1057"
                } ));
                t.getFixture().constructingInstanceWithNamedConstructorWorks2();
            },
            invokingBaseMethodWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "InvokingBaseMethodWorks()",
                    line: "1108"
                } ));
                t.getFixture().invokingBaseMethodWorks();
            },
            invokingGenericBaseMethodWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "InvokingGenericBaseMethodWorks()",
                    line: "1114"
                } ));
                t.getFixture().invokingGenericBaseMethodWorks();
            },
            methodGroupConversionWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MethodGroupConversionWorks()",
                    line: "1200"
                } ));
                t.getFixture().methodGroupConversionWorks();
            },
            methodGroupConversionOnGenericMethodWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MethodGroupConversionOnGenericMethodWorks()",
                    line: "1207"
                } ));
                t.getFixture().methodGroupConversionOnGenericMethodWorks();
            },
            methodGroupConversionOnBaseMethodWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MethodGroupConversionOnBaseMethodWorks()",
                    line: "1214"
                } ));
                t.getFixture().methodGroupConversionOnBaseMethodWorks();
            },
            methodGroupConversionOnGenericBaseMethodWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MethodGroupConversionOnGenericBaseMethodWorks()",
                    line: "1221"
                } ));
                t.getFixture().methodGroupConversionOnGenericBaseMethodWorks();
            },
            importedInterfaceAppearsAsObjectWhenUsedAsGenericArgument: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ImportedInterfaceAppearsAsObjectWhenUsedAsGenericArgument()",
                    line: "1228"
                } ));
                t.getFixture().importedInterfaceAppearsAsObjectWhenUsedAsGenericArgument();
            },
            falseIsFunctionShouldReturnFalse: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "FalseIsFunctionShouldReturnFalse()",
                    line: "1234"
                } ));
                t.getFixture().falseIsFunctionShouldReturnFalse();
            },
            castingUndefinedToOtherTypeShouldReturnUndefined: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CastingUndefinedToOtherTypeShouldReturnUndefined()",
                    line: "1240"
                } ));
                t.getFixture().castingUndefinedToOtherTypeShouldReturnUndefined();
            },
            nonSerializableTypeCanInheritFromSerializableType: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NonSerializableTypeCanInheritFromSerializableType()",
                    line: "1246"
                } ));
                t.getFixture().nonSerializableTypeCanInheritFromSerializableType();
            },
            inheritingFromRecordWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "InheritingFromRecordWorks()",
                    line: "1254"
                } ));
                t.getFixture().inheritingFromRecordWorks();
            },
            instanceOfWorksForSerializableTypesWithCustomTypeCheckCode: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "InstanceOfWorksForSerializableTypesWithCustomTypeCheckCode()",
                    line: "1261"
                } ));
                t.getFixture().instanceOfWorksForSerializableTypesWithCustomTypeCheckCode();
            },
            staticGetTypeMethodWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "StaticGetTypeMethodWorks()",
                    line: "1270"
                } ));
                t.getFixture().staticGetTypeMethodWorks();
            },
            staticGetTypeMethodWithGenericsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "StaticGetTypeMethodWithGenericsWorks()",
                    line: "1280"
                } ));
                t.getFixture().staticGetTypeMethodWithGenericsWorks();
            },
            castingToNamedValuesEnumCastsToString: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CastingToNamedValuesEnumCastsToString()",
                    line: "1329"
                } ));
                t.getFixture().castingToNamedValuesEnumCastsToString();
            },
            castingToImportedNamedValuesEnumCastsToString: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CastingToImportedNamedValuesEnumCastsToString()",
                    line: "1349"
                } ));
                t.getFixture().castingToImportedNamedValuesEnumCastsToString();
            },
            defaultValueOfNamedValuesEnumIsNull: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultValueOfNamedValuesEnumIsNull()",
                    line: "1365"
                } ));
                t.getFixture().defaultValueOfNamedValuesEnumIsNull();
            },
            defaultValueOfImportedNamedValuesEnumIsNull: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Reflection.TypeSystemTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Reflection_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultValueOfImportedNamedValuesEnumIsNull()",
                    line: "1372"
                } ));
                t.getFixture().defaultValueOfImportedNamedValuesEnumIsNull();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Reflection.TypeSystemTests",
                    file: "Batch4\\Reflection\\TypeSystemTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_RefParameterTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.RefParameterTests)],
        statics: {
            canUseReferenceToLocalVariables: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.RefParameterTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_RefParameterTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CanUseReferenceToLocalVariables()",
                    line: "19"
                } ));
                t.getFixture().canUseReferenceToLocalVariables();
            },
            canUseReferenceToField: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.RefParameterTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_RefParameterTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CanUseReferenceToField()",
                    line: "37"
                } ));
                t.getFixture().canUseReferenceToField();
            },
            canUseReferenceToOneDimensionalArray: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.RefParameterTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_RefParameterTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CanUseReferenceToOneDimensionalArray()",
                    line: "58"
                } ));
                t.getFixture().canUseReferenceToOneDimensionalArray();
            },
            canUseReferenceToMultiDimensionalArray: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.RefParameterTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_RefParameterTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CanUseReferenceToMultiDimensionalArray()",
                    line: "73"
                } ));
                t.getFixture().canUseReferenceToMultiDimensionalArray();
            },
            canUseReferenceToThis_SPI_1569: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.RefParameterTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_RefParameterTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CanUseReferenceToThis_SPI_1569()",
                    line: "152"
                } ));
                t.getFixture().canUseReferenceToThis_SPI_1569();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.RefParameterTests",
                    file: "Batch4\\RefParameterTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Runtime_CompilerServices_RuntimeHelpersTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Runtime.CompilerServices.RuntimeHelpersTests)],
        statics: {
            getHashCodeWoksForObject_SPI_1570: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Runtime.CompilerServices.RuntimeHelpersTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Runtime_CompilerServices_RuntimeHelpersTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetHashCodeWoksForObject_SPI_1570()",
                    line: "17"
                } ));
                t.getFixture().getHashCodeWoksForObject_SPI_1570();
            },
            getHashCodeCallsGetHashCodeNonVirtually_SPI_1570: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Runtime.CompilerServices.RuntimeHelpersTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Runtime_CompilerServices_RuntimeHelpersTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetHashCodeCallsGetHashCodeNonVirtually_SPI_1570()",
                    line: "26"
                } ));
                t.getFixture().getHashCodeCallsGetHashCodeNonVirtually_SPI_1570();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Runtime.CompilerServices.RuntimeHelpersTests",
                    file: "Batch4\\Runtime\\CompilerServices\\RuntimeHelpersTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ScriptTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ScriptTests)],
        statics: {
            evalWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ScriptTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ScriptTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "EvalWorks()",
                    line: "92"
                } ));
                t.getFixture().evalWorks();
            },
            typeOfWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ScriptTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ScriptTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypeOfWorks()",
                    line: "144"
                } ));
                t.getFixture().typeOfWorks();
            },
            deleteWorks_SPI_1571: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ScriptTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ScriptTests, 4, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DeleteWorks_SPI_1571()",
                    line: "160"
                } ));
                t.getFixture().deleteWorks_SPI_1571();
            },
            parseIntWithoutRadixWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ScriptTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ScriptTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ParseIntWithoutRadixWorks()",
                    line: "206"
                } ));
                t.getFixture().parseIntWithoutRadixWorks();
            },
            parseIntWithRadixWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.ScriptTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_ScriptTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ParseIntWithRadixWorks()",
                    line: "212"
                } ));
                t.getFixture().parseIntWithRadixWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.ScriptTests",
                    file: "Batch4\\ScriptTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Serialization_JsonTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Serialization.JsonTests)],
        statics: {
            nonGenericParseWorks_SPI_1574: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Serialization.JsonTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Serialization_JsonTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NonGenericParseWorks_SPI_1574()",
                    line: "30"
                } ));
                t.getFixture().nonGenericParseWorks_SPI_1574();
            },
            genericParseWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Serialization.JsonTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Serialization_JsonTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GenericParseWorks()",
                    line: "47"
                } ));
                t.getFixture().genericParseWorks();
            },
            nonGenericParseWithCallbackWorks_SPI_1574: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Serialization.JsonTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Serialization_JsonTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NonGenericParseWithCallbackWorks_SPI_1574()",
                    line: "56"
                } ));
                t.getFixture().nonGenericParseWithCallbackWorks_SPI_1574();
            },
            genericParseWithCallbackWorks_SPI_1574: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Serialization.JsonTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Serialization_JsonTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GenericParseWithCallbackWorks_SPI_1574()",
                    line: "80"
                } ));
                t.getFixture().genericParseWithCallbackWorks_SPI_1574();
            },
            stringifyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Serialization.JsonTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Serialization_JsonTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "StringifyWorks()",
                    line: "101"
                } ));
                t.getFixture().stringifyWorks();
            },
            stringifyWithSerializableMembersArrayWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Serialization.JsonTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Serialization_JsonTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "StringifyWithSerializableMembersArrayWorks()",
                    line: "110"
                } ));
                t.getFixture().stringifyWithSerializableMembersArrayWorks();
            },
            stringifyWithSerializableMembersArrayAndIntentCountWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Serialization.JsonTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Serialization_JsonTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "StringifyWithSerializableMembersArrayAndIntentCountWorks()",
                    line: "120"
                } ));
                t.getFixture().stringifyWithSerializableMembersArrayAndIntentCountWorks();
            },
            stringifyWithSerializableMembersArrayAndIntentTextWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Serialization.JsonTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Serialization_JsonTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "StringifyWithSerializableMembersArrayAndIntentTextWorks()",
                    line: "130"
                } ));
                t.getFixture().stringifyWithSerializableMembersArrayAndIntentTextWorks();
            },
            stringifyWithCallbackWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Serialization.JsonTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Serialization_JsonTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "StringifyWithCallbackWorks()",
                    line: "140"
                } ));
                t.getFixture().stringifyWithCallbackWorks();
            },
            stringifyWithCallbackAndIndentCountWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Serialization.JsonTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Serialization_JsonTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "StringifyWithCallbackAndIndentCountWorks()",
                    line: "150"
                } ));
                t.getFixture().stringifyWithCallbackAndIndentCountWorks();
            },
            stringifyWithCallbackAndIndentTextWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Serialization.JsonTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Serialization_JsonTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "StringifyWithCallbackAndIndentTextWorks()",
                    line: "160"
                } ));
                t.getFixture().stringifyWithCallbackAndIndentTextWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Serialization.JsonTests",
                    file: "Batch4\\Serialization\\JsonTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_BooleanTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.BooleanTests)],
        statics: {
            typePropertiesAreCorrect_SPI_1575: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.BooleanTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_BooleanTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect_SPI_1575()",
                    line: "9"
                } ));
                t.getFixture().typePropertiesAreCorrect_SPI_1575();
            },
            defaultValueIsFalse: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.BooleanTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_BooleanTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultValueIsFalse()",
                    line: "35"
                } ));
                t.getFixture().defaultValueIsFalse();
            },
            creatingInstanceReturnsFalse: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.BooleanTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_BooleanTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreatingInstanceReturnsFalse()",
                    line: "41"
                } ));
                t.getFixture().creatingInstanceReturnsFalse();
            },
            defaultConstructorReturnsFalse_SPI_1576: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.BooleanTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_BooleanTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorReturnsFalse_SPI_1576()",
                    line: "47"
                } ));
                t.getFixture().defaultConstructorReturnsFalse_SPI_1576();
            },
            parseWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.BooleanTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_BooleanTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ParseWorks()",
                    line: "54"
                } ));
                t.getFixture().parseWorks();
            },
            getHashCodeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.BooleanTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_BooleanTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetHashCodeWorks()",
                    line: "68"
                } ));
                t.getFixture().getHashCodeWorks();
            },
            objectEqualsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.BooleanTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_BooleanTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ObjectEqualsWorks()",
                    line: "76"
                } ));
                t.getFixture().objectEqualsWorks();
            },
            iEquatableEqualsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.BooleanTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_BooleanTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IEquatableEqualsWorks()",
                    line: "85"
                } ));
                t.getFixture().iEquatableEqualsWorks();
            },
            compareToWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.BooleanTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_BooleanTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CompareToWorks()",
                    line: "99"
                } ));
                t.getFixture().compareToWorks();
            },
            iComparableCompareToWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.BooleanTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_BooleanTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IComparableCompareToWorks()",
                    line: "108"
                } ));
                t.getFixture().iComparableCompareToWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.SimpleTypes.BooleanTests",
                    file: "Batch4\\SimpleTypes\\BooleanTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests)],
        statics: {
            typePropertiesAreCorrect_SPI_1717: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect_SPI_1717()",
                    line: "10"
                } ));
                t.getFixture().typePropertiesAreCorrect_SPI_1717();
            },
            castsWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CastsWork()",
                    line: "35"
                } ));
                t.getFixture().castsWork();
            },
            defaultValueIs0: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultValueIs0()",
                    line: "91"
                } ));
                t.getFixture().defaultValueIs0();
            },
            defaultConstructorReturnsZero: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorReturnsZero()",
                    line: "97"
                } ));
                t.getFixture().defaultConstructorReturnsZero();
            },
            creatingInstanceReturnsZero: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreatingInstanceReturnsZero()",
                    line: "103"
                } ));
                t.getFixture().creatingInstanceReturnsZero();
            },
            constantsWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstantsWork()",
                    line: "109"
                } ));
                t.getFixture().constantsWork();
            },
            formatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "FormatWorks()",
                    line: "116"
                } ));
                t.getFixture().formatWorks();
            },
            toStringWithFormatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithFormatWorks()",
                    line: "122"
                } ));
                t.getFixture().toStringWithFormatWorks();
            },
            toStringWithFormatAndProviderWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithFormatAndProviderWorks()",
                    line: "128"
                } ));
                t.getFixture().toStringWithFormatAndProviderWorks();
            },
            iFormattableToStringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IFormattableToStringWorks()",
                    line: "134"
                } ));
                t.getFixture().iFormattableToStringWorks();
            },
            tryParseWorks_SPI_1592: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TryParseWorks_SPI_1592()",
                    line: "147"
                } ));
                t.getFixture().tryParseWorks_SPI_1592();
            },
            parseWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ParseWorks()",
                    line: "182"
                } ));
                t.getFixture().parseWorks();
            },
            toStringWithoutRadixWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithoutRadixWorks()",
                    line: "194"
                } ));
                t.getFixture().toStringWithoutRadixWorks();
            },
            toStringWithRadixWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithRadixWorks()",
                    line: "200"
                } ));
                t.getFixture().toStringWithRadixWorks();
            },
            getHashCodeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetHashCodeWorks()",
                    line: "207"
                } ));
                t.getFixture().getHashCodeWorks();
            },
            equalsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "EqualsWorks()",
                    line: "215"
                } ));
                t.getFixture().equalsWorks();
            },
            iEquatableEqualsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IEquatableEqualsWorks()",
                    line: "224"
                } ));
                t.getFixture().iEquatableEqualsWorks();
            },
            compareToWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CompareToWorks()",
                    line: "238"
                } ));
                t.getFixture().compareToWorks();
            },
            iComparableCompareToWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IComparableCompareToWorks()",
                    line: "246"
                } ));
                t.getFixture().iComparableCompareToWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.SimpleTypes.ByteTests",
                    file: "Batch4\\SimpleTypes\\ByteTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.CharTests)],
        statics: {
            typePropertiesAreInt32_SPI_1603: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreInt32_SPI_1603()",
                    line: "9"
                } ));
                t.getFixture().typePropertiesAreInt32_SPI_1603();
            },
            castsWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CastsWork()",
                    line: "29"
                } ));
                t.getFixture().castsWork();
            },
            defaultValueWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultValueWorks()",
                    line: "85"
                } ));
                t.getFixture().defaultValueWorks();
            },
            defaultConstructorReturnsZero: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorReturnsZero()",
                    line: "91"
                } ));
                t.getFixture().defaultConstructorReturnsZero();
            },
            creatingInstanceReturnsZero: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreatingInstanceReturnsZero()",
                    line: "97"
                } ));
                t.getFixture().creatingInstanceReturnsZero();
            },
            constantsWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstantsWork()",
                    line: "103"
                } ));
                t.getFixture().constantsWork();
            },
            charComparisonWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CharComparisonWorks()",
                    line: "110"
                } ));
                t.getFixture().charComparisonWorks();
            },
            parseWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ParseWorks()",
                    line: "141"
                } ));
                t.getFixture().parseWorks();
            },
            formatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "FormatWorks()",
                    line: "150"
                } ));
                t.getFixture().formatWorks();
            },
            iFormattableToStringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IFormattableToStringWorks()",
                    line: "156"
                } ));
                t.getFixture().iFormattableToStringWorks();
            },
            toStringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWorks()",
                    line: "169"
                } ));
                t.getFixture().toStringWorks();
            },
            getHashCodeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetHashCodeWorks()",
                    line: "189"
                } ));
                t.getFixture().getHashCodeWorks();
            },
            equalsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "EqualsWorks()",
                    line: "197"
                } ));
                t.getFixture().equalsWorks();
            },
            iEquatableEqualsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IEquatableEqualsWorks()",
                    line: "206"
                } ));
                t.getFixture().iEquatableEqualsWorks();
            },
            compareToWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CompareToWorks()",
                    line: "215"
                } ));
                t.getFixture().compareToWorks();
            },
            isLowerWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsLowerWorks()",
                    line: "224"
                } ));
                t.getFixture().isLowerWorks();
            },
            isUpperWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsUpperWorks()",
                    line: "232"
                } ));
                t.getFixture().isUpperWorks();
            },
            toLowerWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToLowerWorks()",
                    line: "240"
                } ));
                t.getFixture().toLowerWorks();
            },
            toUpperWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToUpperWorks()",
                    line: "248"
                } ));
                t.getFixture().toUpperWorks();
            },
            isDigitWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsDigitWorks()",
                    line: "256"
                } ));
                t.getFixture().isDigitWorks();
            },
            isWhiteSpaceWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsWhiteSpaceWorks()",
                    line: "264"
                } ));
                t.getFixture().isWhiteSpaceWorks();
            },
            isDigitWithStringAndIndexWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsDigitWithStringAndIndexWorks()",
                    line: "272"
                } ));
                t.getFixture().isDigitWithStringAndIndexWorks();
            },
            isWhiteSpaceWithStringAndIndexWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.CharTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_CharTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsWhiteSpaceWithStringAndIndexWorks()",
                    line: "284"
                } ));
                t.getFixture().isWhiteSpaceWithStringAndIndexWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.SimpleTypes.CharTests",
                    file: "Batch4\\SimpleTypes\\CharTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests)],
        statics: {
            typePropertiesAreCorrect_SPI_1608_1609: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect_SPI_1608_1609()",
                    line: "9"
                } ));
                t.getFixture().typePropertiesAreCorrect_SPI_1608_1609();
            },
            defaultConstructorReturnsTodaysDate: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorReturnsTodaysDate()",
                    line: "27"
                } ));
                t.getFixture().defaultConstructorReturnsTodaysDate();
            },
            creatingInstanceReturnsTodaysDate_SPI_1604: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreatingInstanceReturnsTodaysDate_SPI_1604()",
                    line: "34"
                } ));
                t.getFixture().creatingInstanceReturnsTodaysDate_SPI_1604();
            },
            millisecondSinceEpochConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MillisecondSinceEpochConstructorWorks()",
                    line: "41"
                } ));
                t.getFixture().millisecondSinceEpochConstructorWorks();
            },
            stringConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "StringConstructorWorks()",
                    line: "48"
                } ));
                t.getFixture().stringConstructorWorks();
            },
            yMDConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "YMDConstructorWorks()",
                    line: "57"
                } ));
                t.getFixture().yMDConstructorWorks();
            },
            yMDHConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "YMDHConstructorWorks()",
                    line: "66"
                } ));
                t.getFixture().yMDHConstructorWorks();
            },
            yMDHNConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "YMDHNConstructorWorks()",
                    line: "76"
                } ));
                t.getFixture().yMDHNConstructorWorks();
            },
            yMDHNSConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "YMDHNSConstructorWorks()",
                    line: "87"
                } ));
                t.getFixture().yMDHNSConstructorWorks();
            },
            yMDHNSUConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "YMDHNSUConstructorWorks()",
                    line: "99"
                } ));
                t.getFixture().yMDHNSUConstructorWorks();
            },
            getFullYearWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetFullYearWorks()",
                    line: "212"
                } ));
                t.getFixture().getFullYearWorks();
            },
            getMonthWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetMonthWorks()",
                    line: "219"
                } ));
                t.getFixture().getMonthWorks();
            },
            getDateWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetDateWorks()",
                    line: "226"
                } ));
                t.getFixture().getDateWorks();
            },
            getHoursWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetHoursWorks()",
                    line: "233"
                } ));
                t.getFixture().getHoursWorks();
            },
            getMinutesWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetMinutesWorks()",
                    line: "240"
                } ));
                t.getFixture().getMinutesWorks();
            },
            getSecondsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetSecondsWorks()",
                    line: "247"
                } ));
                t.getFixture().getSecondsWorks();
            },
            getMillisecondsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetMillisecondsWorks()",
                    line: "254"
                } ));
                t.getFixture().getMillisecondsWorks();
            },
            getDayWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetDayWorks()",
                    line: "261"
                } ));
                t.getFixture().getDayWorks();
            },
            getTimeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetTimeWorks()",
                    line: "268"
                } ));
                t.getFixture().getTimeWorks();
            },
            valueOfWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ValueOfWorks()",
                    line: "276"
                } ));
                t.getFixture().valueOfWorks();
            },
            getTimezoneOffsetWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetTimezoneOffsetWorks()",
                    line: "284"
                } ));
                t.getFixture().getTimezoneOffsetWorks();
            },
            getUtcFullYearWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetUtcFullYearWorks()",
                    line: "291"
                } ));
                t.getFixture().getUtcFullYearWorks();
            },
            getUtcMonthWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetUtcMonthWorks()",
                    line: "298"
                } ));
                t.getFixture().getUtcMonthWorks();
            },
            getUtcDateWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetUtcDateWorks()",
                    line: "305"
                } ));
                t.getFixture().getUtcDateWorks();
            },
            getUtcHoursWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetUtcHoursWorks()",
                    line: "312"
                } ));
                t.getFixture().getUtcHoursWorks();
            },
            getUtcMinutesWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetUtcMinutesWorks()",
                    line: "320"
                } ));
                t.getFixture().getUtcMinutesWorks();
            },
            getUtcSecondsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetUtcSecondsWorks()",
                    line: "327"
                } ));
                t.getFixture().getUtcSecondsWorks();
            },
            getUtcMillisecondsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetUtcMillisecondsWorks()",
                    line: "334"
                } ));
                t.getFixture().getUtcMillisecondsWorks();
            },
            getUtcDayWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetUtcDayWorks()",
                    line: "341"
                } ));
                t.getFixture().getUtcDayWorks();
            },
            toDateStringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToDateStringWorks()",
                    line: "399"
                } ));
                t.getFixture().toDateStringWorks();
            },
            toTimeStringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToTimeStringWorks()",
                    line: "407"
                } ));
                t.getFixture().toTimeStringWorks();
            },
            toUtcStringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToUtcStringWorks()",
                    line: "415"
                } ));
                t.getFixture().toUtcStringWorks();
            },
            toLocaleDateStringWorks_SPI_1624: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToLocaleDateStringWorks_SPI_1624()",
                    line: "423"
                } ));
                t.getFixture().toLocaleDateStringWorks_SPI_1624();
            },
            toLocaleTimeStringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToLocaleTimeStringWorks()",
                    line: "432"
                } ));
                t.getFixture().toLocaleTimeStringWorks();
            },
            subtractingDatesWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SubtractingDatesWorks()",
                    line: "486"
                } ));
                t.getFixture().subtractingDatesWorks();
            },
            dateEqualityWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DateEqualityWorks()",
                    line: "500"
                } ));
                t.getFixture().dateEqualityWorks();
            },
            dateInequalityWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DateInequalityWorks()",
                    line: "510"
                } ));
                t.getFixture().dateInequalityWorks();
            },
            dateLessThanWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DateLessThanWorks()",
                    line: "520"
                } ));
                t.getFixture().dateLessThanWorks();
            },
            dateLessEqualWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DateLessEqualWorks()",
                    line: "528"
                } ));
                t.getFixture().dateLessEqualWorks();
            },
            dateGreaterThanWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DateGreaterThanWorks()",
                    line: "536"
                } ));
                t.getFixture().dateGreaterThanWorks();
            },
            dateGreaterEqualWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DateGreaterEqualWorks()",
                    line: "544"
                } ));
                t.getFixture().dateGreaterEqualWorks();
            },
            setFullYearWithOneParameterWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetFullYearWithOneParameterWorks()",
                    line: "552"
                } ));
                t.getFixture().setFullYearWithOneParameterWorks();
            },
            setFullYearWithTwoParametersWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetFullYearWithTwoParametersWorks()",
                    line: "560"
                } ));
                t.getFixture().setFullYearWithTwoParametersWorks();
            },
            setFullYearWithThreeParametersWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetFullYearWithThreeParametersWorks()",
                    line: "569"
                } ));
                t.getFixture().setFullYearWithThreeParametersWorks();
            },
            setMonthWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetMonthWorks()",
                    line: "579"
                } ));
                t.getFixture().setMonthWorks();
            },
            setDateWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetDateWorks()",
                    line: "587"
                } ));
                t.getFixture().setDateWorks();
            },
            setHoursWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetHoursWorks()",
                    line: "595"
                } ));
                t.getFixture().setHoursWorks();
            },
            setMinutesWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetMinutesWorks()",
                    line: "603"
                } ));
                t.getFixture().setMinutesWorks();
            },
            setSecondsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetSecondsWorks()",
                    line: "611"
                } ));
                t.getFixture().setSecondsWorks();
            },
            setMillisecondsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetMillisecondsWorks()",
                    line: "619"
                } ));
                t.getFixture().setMillisecondsWorks();
            },
            setTimeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetTimeWorks()",
                    line: "627"
                } ));
                t.getFixture().setTimeWorks();
            },
            setTimeAsDoubleWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetTimeAsDoubleWorks()",
                    line: "635"
                } ));
                t.getFixture().setTimeAsDoubleWorks();
            },
            setUtcFullYearWithOneParameterWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetUtcFullYearWithOneParameterWorks()",
                    line: "643"
                } ));
                t.getFixture().setUtcFullYearWithOneParameterWorks();
            },
            setUtcFullYearWithTwoParametersWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetUtcFullYearWithTwoParametersWorks()",
                    line: "651"
                } ));
                t.getFixture().setUtcFullYearWithTwoParametersWorks();
            },
            setUtcFullYearWithThreeParametersWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetUtcFullYearWithThreeParametersWorks()",
                    line: "660"
                } ));
                t.getFixture().setUtcFullYearWithThreeParametersWorks();
            },
            setUtcMonthWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetUtcMonthWorks()",
                    line: "670"
                } ));
                t.getFixture().setUtcMonthWorks();
            },
            setUtcDateWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetUtcDateWorks()",
                    line: "680"
                } ));
                t.getFixture().setUtcDateWorks();
            },
            setUtcHoursWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetUtcHoursWorks()",
                    line: "688"
                } ));
                t.getFixture().setUtcHoursWorks();
            },
            setUtcMinutesWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetUtcMinutesWorks()",
                    line: "696"
                } ));
                t.getFixture().setUtcMinutesWorks();
            },
            setUtcSecondsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetUtcSecondsWorks()",
                    line: "704"
                } ));
                t.getFixture().setUtcSecondsWorks();
            },
            setUtcMillisecondsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetUtcMillisecondsWorks()",
                    line: "712"
                } ));
                t.getFixture().setUtcMillisecondsWorks();
            },
            getHashCodeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetHashCodeWorks()",
                    line: "720"
                } ));
                t.getFixture().getHashCodeWorks();
            },
            equalsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "EqualsWorks()",
                    line: "729"
                } ));
                t.getFixture().equalsWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.SimpleTypes.DateTests",
                    file: "Batch4\\SimpleTypes\\JsDateTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests)],
        statics: {
            typePropertiesAreCorrect_SPI_1607_1608_1609: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect_SPI_1607_1608_1609()",
                    line: "10"
                } ));
                t.getFixture().typePropertiesAreCorrect_SPI_1607_1608_1609();
            },
            defaultConstructorWorks_SPI_1606: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorWorks_SPI_1606()",
                    line: "36"
                } ));
                t.getFixture().defaultConstructorWorks_SPI_1606();
            },
            defaultValueWorks_SPI_1606: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultValueWorks_SPI_1606()",
                    line: "44"
                } ));
                t.getFixture().defaultValueWorks_SPI_1606();
            },
            creatingInstanceReturnsDateWithZeroValue_SPI_1606: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreatingInstanceReturnsDateWithZeroValue_SPI_1606()",
                    line: "52"
                } ));
                t.getFixture().creatingInstanceReturnsDateWithZeroValue_SPI_1606();
            },
            millisecondSinceEpochConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MillisecondSinceEpochConstructorWorks()",
                    line: "60"
                } ));
                t.getFixture().millisecondSinceEpochConstructorWorks();
            },
            stringConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "StringConstructorWorks()",
                    line: "67"
                } ));
                t.getFixture().stringConstructorWorks();
            },
            yMDConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "YMDConstructorWorks()",
                    line: "76"
                } ));
                t.getFixture().yMDConstructorWorks();
            },
            yMDHConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "YMDHConstructorWorks()",
                    line: "85"
                } ));
                t.getFixture().yMDHConstructorWorks();
            },
            yMDHNConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "YMDHNConstructorWorks()",
                    line: "95"
                } ));
                t.getFixture().yMDHNConstructorWorks();
            },
            yMDHNSConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "YMDHNSConstructorWorks()",
                    line: "106"
                } ));
                t.getFixture().yMDHNSConstructorWorks();
            },
            yMDHNSUConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "YMDHNSUConstructorWorks()",
                    line: "118"
                } ));
                t.getFixture().yMDHNSUConstructorWorks();
            },
            nowWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NowWorks()",
                    line: "131"
                } ));
                t.getFixture().nowWorks();
            },
            utcNowWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "UtcNowWorks()",
                    line: "138"
                } ));
                t.getFixture().utcNowWorks();
            },
            toUniversalWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToUniversalWorks()",
                    line: "148"
                } ));
                t.getFixture().toUniversalWorks();
            },
            toLocalWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToLocalWorks()",
                    line: "162"
                } ));
                t.getFixture().toLocalWorks();
            },
            todayWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TodayWorks()",
                    line: "176"
                } ));
                t.getFixture().todayWorks();
            },
            formatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "FormatWorks()",
                    line: "187"
                } ));
                t.getFixture().formatWorks();
            },
            toStringWithFormatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithFormatWorks()",
                    line: "194"
                } ));
                t.getFixture().toStringWithFormatWorks();
            },
            toStringWithFormatAndProviderWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithFormatAndProviderWorks()",
                    line: "201"
                } ));
                t.getFixture().toStringWithFormatAndProviderWorks();
            },
            iFormattableToStringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IFormattableToStringWorks()",
                    line: "208"
                } ));
                t.getFixture().iFormattableToStringWorks();
            },
            getFullYearWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetFullYearWorks()",
                    line: "223"
                } ));
                t.getFixture().getFullYearWorks();
            },
            getMonthWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetMonthWorks()",
                    line: "230"
                } ));
                t.getFixture().getMonthWorks();
            },
            getDateWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetDateWorks()",
                    line: "237"
                } ));
                t.getFixture().getDateWorks();
            },
            getHoursWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetHoursWorks()",
                    line: "244"
                } ));
                t.getFixture().getHoursWorks();
            },
            getMinutesWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetMinutesWorks()",
                    line: "251"
                } ));
                t.getFixture().getMinutesWorks();
            },
            getSecondsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetSecondsWorks()",
                    line: "258"
                } ));
                t.getFixture().getSecondsWorks();
            },
            getMillisecondsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetMillisecondsWorks()",
                    line: "265"
                } ));
                t.getFixture().getMillisecondsWorks();
            },
            getDayWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetDayWorks()",
                    line: "272"
                } ));
                t.getFixture().getDayWorks();
            },
            getTimeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetTimeWorks()",
                    line: "279"
                } ));
                t.getFixture().getTimeWorks();
            },
            valueOfWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ValueOfWorks()",
                    line: "286"
                } ));
                t.getFixture().valueOfWorks();
            },
            getUtcFullYearWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetUtcFullYearWorks()",
                    line: "301"
                } ));
                t.getFixture().getUtcFullYearWorks();
            },
            getUtcMonthWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetUtcMonthWorks()",
                    line: "308"
                } ));
                t.getFixture().getUtcMonthWorks();
            },
            getUtcDateWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetUtcDateWorks()",
                    line: "315"
                } ));
                t.getFixture().getUtcDateWorks();
            },
            getUtcHoursWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetUtcHoursWorks()",
                    line: "322"
                } ));
                t.getFixture().getUtcHoursWorks();
            },
            getUtcMinutesWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetUtcMinutesWorks()",
                    line: "329"
                } ));
                t.getFixture().getUtcMinutesWorks();
            },
            getUtcSecondsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetUtcSecondsWorks()",
                    line: "336"
                } ));
                t.getFixture().getUtcSecondsWorks();
            },
            getUtcMillisecondsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetUtcMillisecondsWorks()",
                    line: "343"
                } ));
                t.getFixture().getUtcMillisecondsWorks();
            },
            getUtcDayWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetUtcDayWorks()",
                    line: "350"
                } ));
                t.getFixture().getUtcDayWorks();
            },
            parseWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ParseWorks()",
                    line: "357"
                } ));
                t.getFixture().parseWorks();
            },
            parseExactWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ParseExactWorks()",
                    line: "366"
                } ));
                t.getFixture().parseExactWorks();
            },
            parseExactReturnsNullIfTheInputIsInvalid: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ParseExactReturnsNullIfTheInputIsInvalid()",
                    line: "377"
                } ));
                t.getFixture().parseExactReturnsNullIfTheInputIsInvalid();
            },
            parseExactWithCultureWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ParseExactWithCultureWorks()",
                    line: "383"
                } ));
                t.getFixture().parseExactWithCultureWorks();
            },
            parseExactWithCultureReturnsNullIfTheInputIsInvalid: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ParseExactWithCultureReturnsNullIfTheInputIsInvalid()",
                    line: "394"
                } ));
                t.getFixture().parseExactWithCultureReturnsNullIfTheInputIsInvalid();
            },
            parseExactUtcWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ParseExactUtcWorks()",
                    line: "400"
                } ));
                t.getFixture().parseExactUtcWorks();
            },
            parseExactUtcReturnsNullIfTheInputIsInvalid: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ParseExactUtcReturnsNullIfTheInputIsInvalid()",
                    line: "411"
                } ));
                t.getFixture().parseExactUtcReturnsNullIfTheInputIsInvalid();
            },
            parseExactUtcWithCultureWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ParseExactUtcWithCultureWorks()",
                    line: "417"
                } ));
                t.getFixture().parseExactUtcWithCultureWorks();
            },
            parseExactUtcWithCultureReturnsNullIfTheInputIsInvalid: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ParseExactUtcWithCultureReturnsNullIfTheInputIsInvalid()",
                    line: "428"
                } ));
                t.getFixture().parseExactUtcWithCultureReturnsNullIfTheInputIsInvalid();
            },
            toDateStringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToDateStringWorks()",
                    line: "434"
                } ));
                t.getFixture().toDateStringWorks();
            },
            toTimeStringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToTimeStringWorks()",
                    line: "442"
                } ));
                t.getFixture().toTimeStringWorks();
            },
            toUtcStringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToUtcStringWorks()",
                    line: "450"
                } ));
                t.getFixture().toUtcStringWorks();
            },
            toLocaleDateStringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToLocaleDateStringWorks()",
                    line: "458"
                } ));
                t.getFixture().toLocaleDateStringWorks();
            },
            toLocaleTimeStringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToLocaleTimeStringWorks()",
                    line: "466"
                } ));
                t.getFixture().toLocaleTimeStringWorks();
            },
            utcYMDWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "UtcYMDWorks()",
                    line: "520"
                } ));
                t.getFixture().utcYMDWorks();
            },
            utcYMDHWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "UtcYMDHWorks()",
                    line: "526"
                } ));
                t.getFixture().utcYMDHWorks();
            },
            utcYMDHNWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "UtcYMDHNWorks()",
                    line: "532"
                } ));
                t.getFixture().utcYMDHNWorks();
            },
            utcYMDHNSWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "UtcYMDHNSWorks()",
                    line: "538"
                } ));
                t.getFixture().utcYMDHNSWorks();
            },
            utcYMDHNSUWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "UtcYMDHNSUWorks()",
                    line: "544"
                } ));
                t.getFixture().utcYMDHNSUWorks();
            },
            subtractingDatesWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SubtractingDatesWorks()",
                    line: "550"
                } ));
                t.getFixture().subtractingDatesWorks();
            },
            subtractMethodReturningTimeSpanWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SubtractMethodReturningTimeSpanWorks()",
                    line: "556"
                } ));
                t.getFixture().subtractMethodReturningTimeSpanWorks();
            },
            dateEqualityWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DateEqualityWorks()",
                    line: "585"
                } ));
                t.getFixture().dateEqualityWorks();
            },
            dateInequalityWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DateInequalityWorks()",
                    line: "595"
                } ));
                t.getFixture().dateInequalityWorks();
            },
            dateLessThanWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DateLessThanWorks()",
                    line: "605"
                } ));
                t.getFixture().dateLessThanWorks();
            },
            dateLessEqualWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DateLessEqualWorks()",
                    line: "613"
                } ));
                t.getFixture().dateLessEqualWorks();
            },
            dateGreaterThanWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DateGreaterThanWorks()",
                    line: "621"
                } ));
                t.getFixture().dateGreaterThanWorks();
            },
            dateGreaterEqualWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DateGreaterEqualWorks()",
                    line: "629"
                } ));
                t.getFixture().dateGreaterEqualWorks();
            },
            convertingDateToMutableDateReturnsANewButEqualInstance: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConvertingDateToMutableDateReturnsANewButEqualInstance()",
                    line: "637"
                } ));
                t.getFixture().convertingDateToMutableDateReturnsANewButEqualInstance();
            },
            convertingMutableDateToDateReturnsANewButEqualInstance: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConvertingMutableDateToDateReturnsANewButEqualInstance()",
                    line: "648"
                } ));
                t.getFixture().convertingMutableDateToDateReturnsANewButEqualInstance();
            },
            getHashCodeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetHashCodeWorks()",
                    line: "659"
                } ));
                t.getFixture().getHashCodeWorks();
            },
            equalsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "EqualsWorks()",
                    line: "668"
                } ));
                t.getFixture().equalsWorks();
            },
            iEquatableEqualsWorks_SPI_1608: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IEquatableEqualsWorks_SPI_1608()",
                    line: "677"
                } ));
                t.getFixture().iEquatableEqualsWorks_SPI_1608();
            },
            staticEqualsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "StaticEqualsWorks()",
                    line: "691"
                } ));
                t.getFixture().staticEqualsWorks();
            },
            compareToWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CompareToWorks()",
                    line: "700"
                } ));
                t.getFixture().compareToWorks();
            },
            staticCompareWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "StaticCompareWorks()",
                    line: "708"
                } ));
                t.getFixture().staticCompareWorks();
            },
            iComparableCompareToWorks_SPI_1609: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IComparableCompareToWorks_SPI_1609()",
                    line: "716"
                } ));
                t.getFixture().iComparableCompareToWorks_SPI_1609();
            },
            datePropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DatePropertyWorks()",
                    line: "725"
                } ));
                t.getFixture().datePropertyWorks();
            },
            dayPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DayPropertyWorks()",
                    line: "732"
                } ));
                t.getFixture().dayPropertyWorks();
            },
            dayOfWeekPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DayOfWeekPropertyWorks()",
                    line: "739"
                } ));
                t.getFixture().dayOfWeekPropertyWorks();
            },
            dayOfYearPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DayOfYearPropertyWorks()",
                    line: "746"
                } ));
                t.getFixture().dayOfYearPropertyWorks();
            },
            hourPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "HourPropertyWorks()",
                    line: "753"
                } ));
                t.getFixture().hourPropertyWorks();
            },
            millisecondPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MillisecondPropertyWorks()",
                    line: "760"
                } ));
                t.getFixture().millisecondPropertyWorks();
            },
            minutePropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MinutePropertyWorks()",
                    line: "767"
                } ));
                t.getFixture().minutePropertyWorks();
            },
            monthPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MonthPropertyWorks()",
                    line: "774"
                } ));
                t.getFixture().monthPropertyWorks();
            },
            secondPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SecondPropertyWorks()",
                    line: "781"
                } ));
                t.getFixture().secondPropertyWorks();
            },
            yearPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "YearPropertyWorks()",
                    line: "788"
                } ));
                t.getFixture().yearPropertyWorks();
            },
            addDaysWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AddDaysWorks()",
                    line: "795"
                } ));
                t.getFixture().addDaysWorks();
            },
            addHoursWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AddHoursWorks()",
                    line: "804"
                } ));
                t.getFixture().addHoursWorks();
            },
            addMillisecondsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AddMillisecondsWorks()",
                    line: "813"
                } ));
                t.getFixture().addMillisecondsWorks();
            },
            addMinutesWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AddMinutesWorks()",
                    line: "822"
                } ));
                t.getFixture().addMinutesWorks();
            },
            addMonthsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AddMonthsWorks()",
                    line: "831"
                } ));
                t.getFixture().addMonthsWorks();
            },
            addSecondsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AddSecondsWorks()",
                    line: "840"
                } ));
                t.getFixture().addSecondsWorks();
            },
            addYearsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AddYearsWorks()",
                    line: "849"
                } ));
                t.getFixture().addYearsWorks();
            },
            daysInMonthWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DaysInMonthWorks()",
                    line: "858"
                } ));
                t.getFixture().daysInMonthWorks();
            },
            isLeapYearWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DateTimeTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsLeapYearWorks()",
                    line: "877"
                } ));
                t.getFixture().isLeapYearWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.SimpleTypes.DateTimeTests",
                    file: "Batch4\\SimpleTypes\\DateTimeTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests)],
        statics: {
            typePropertiesAreCorrect_SPI_1717: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect_SPI_1717()",
                    line: "10"
                } ));
                t.getFixture().typePropertiesAreCorrect_SPI_1717();
            },
            defaultValueIsDecimal0: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultValueIsDecimal0()",
                    line: "49"
                } ));
                t.getFixture().defaultValueIsDecimal0();
            },
            creatingInstanceReturnsZero: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreatingInstanceReturnsZero()",
                    line: "55"
                } ));
                t.getFixture().creatingInstanceReturnsZero();
            },
            literalDecimalsWork_SPI_1590: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LiteralDecimalsWork_SPI_1590()",
                    line: "61"
                } ));
                t.getFixture().literalDecimalsWork_SPI_1590();
            },
            constantsWork_SPI_1590: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstantsWork_SPI_1590()",
                    line: "72"
                } ));
                t.getFixture().constantsWork_SPI_1590();
            },
            defaultConstructorReturnsZero: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorReturnsZero()",
                    line: "83"
                } ));
                t.getFixture().defaultConstructorReturnsZero();
            },
            convertingConstructorsWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConvertingConstructorsWork()",
                    line: "89"
                } ));
                t.getFixture().convertingConstructorsWork();
            },
            formatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "FormatWorks()",
                    line: "100"
                } ));
                t.getFixture().formatWorks();
            },
            toStringWithFormatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithFormatWorks()",
                    line: "106"
                } ));
                t.getFixture().toStringWithFormatWorks();
            },
            toStringWithFormatAndProviderWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithFormatAndProviderWorks()",
                    line: "112"
                } ));
                t.getFixture().toStringWithFormatAndProviderWorks();
            },
            iFormattableToStringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IFormattableToStringWorks()",
                    line: "118"
                } ));
                t.getFixture().iFormattableToStringWorks();
            },
            toStringWithoutRadixWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithoutRadixWorks()",
                    line: "131"
                } ));
                t.getFixture().toStringWithoutRadixWorks();
            },
            conversionsToDecimalWork_SPI_1580: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConversionsToDecimalWork_SPI_1580()",
                    line: "137"
                } ));
                t.getFixture().conversionsToDecimalWork_SPI_1580();
            },
            nullableConversionsToDecimalWork_SPI_1580_1581_1587: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NullableConversionsToDecimalWork_SPI_1580_1581_1587()",
                    line: "172"
                } ));
                t.getFixture().nullableConversionsToDecimalWork_SPI_1580_1581_1587();
            },
            decimalToSByte_SPI_1580: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DecimalToSByte_SPI_1580()",
                    line: "266"
                } ));
                t.getFixture().decimalToSByte_SPI_1580();
            },
            decimalToByte_SPI_1580: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DecimalToByte_SPI_1580()",
                    line: "295"
                } ));
                t.getFixture().decimalToByte_SPI_1580();
            },
            decimalToShort_SPI_1580: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DecimalToShort_SPI_1580()",
                    line: "324"
                } ));
                t.getFixture().decimalToShort_SPI_1580();
            },
            decimalToUShort_SPI_1580: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DecimalToUShort_SPI_1580()",
                    line: "353"
                } ));
                t.getFixture().decimalToUShort_SPI_1580();
            },
            decimalToChar: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DecimalToChar()",
                    line: "382"
                } ));
                t.getFixture().decimalToChar();
            },
            decimalToInt_SPI_1580: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DecimalToInt_SPI_1580()",
                    line: "398"
                } ));
                t.getFixture().decimalToInt_SPI_1580();
            },
            decimalToUInt_SPI_1580: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DecimalToUInt_SPI_1580()",
                    line: "427"
                } ));
                t.getFixture().decimalToUInt_SPI_1580();
            },
            decimalToLong_SPI_1578: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DecimalToLong_SPI_1578()",
                    line: "456"
                } ));
                t.getFixture().decimalToLong_SPI_1578();
            },
            decimalToULong_SPI_1584_1585: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DecimalToULong_SPI_1584_1585()",
                    line: "468"
                } ));
                t.getFixture().decimalToULong_SPI_1584_1585();
            },
            decimalToFloat: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DecimalToFloat()",
                    line: "502"
                } ));
                t.getFixture().decimalToFloat();
            },
            decimalToDouble: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DecimalToDouble()",
                    line: "510"
                } ));
                t.getFixture().decimalToDouble();
            },
            nullableDecimalToSByte: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NullableDecimalToSByte()",
                    line: "518"
                } ));
                t.getFixture().nullableDecimalToSByte();
            },
            nullableDecimalToByte: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NullableDecimalToByte()",
                    line: "549"
                } ));
                t.getFixture().nullableDecimalToByte();
            },
            nullableDecimalToShort: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NullableDecimalToShort()",
                    line: "580"
                } ));
                t.getFixture().nullableDecimalToShort();
            },
            nullableDecimalToUShort: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NullableDecimalToUShort()",
                    line: "611"
                } ));
                t.getFixture().nullableDecimalToUShort();
            },
            nullableDecimalToChar: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NullableDecimalToChar()",
                    line: "642"
                } ));
                t.getFixture().nullableDecimalToChar();
            },
            nullableDecimalToInt: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NullableDecimalToInt()",
                    line: "673"
                } ));
                t.getFixture().nullableDecimalToInt();
            },
            nullableDecimalToUInt: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NullableDecimalToUInt()",
                    line: "704"
                } ));
                t.getFixture().nullableDecimalToUInt();
            },
            nullableDecimalToLong_SPI_1582: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NullableDecimalToLong_SPI_1582()",
                    line: "735"
                } ));
                t.getFixture().nullableDecimalToLong_SPI_1582();
            },
            nullableDecimalToULong_SPI_1582: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NullableDecimalToULong_SPI_1582()",
                    line: "752"
                } ));
                t.getFixture().nullableDecimalToULong_SPI_1582();
            },
            nullableDecimalToFloat_SPI_1579: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NullableDecimalToFloat_SPI_1579()",
                    line: "777"
                } ));
                t.getFixture().nullableDecimalToFloat_SPI_1579();
            },
            nullableDecimalToDouble_SPI_1579: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NullableDecimalToDouble_SPI_1579()",
                    line: "800"
                } ));
                t.getFixture().nullableDecimalToDouble_SPI_1579();
            },
            operatorsWork_SPI_1583: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "OperatorsWork_SPI_1583()",
                    line: "821"
                } ));
                t.getFixture().operatorsWork_SPI_1583();
            },
            liftedOperatorsWork_SPI_1583: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LiftedOperatorsWork_SPI_1583()",
                    line: "867"
                } ));
                t.getFixture().liftedOperatorsWork_SPI_1583();
            },
            addWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AddWorks()",
                    line: "959"
                } ));
                t.getFixture().addWorks();
            },
            ceilingWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CeilingWorks()",
                    line: "965"
                } ));
                t.getFixture().ceilingWorks();
            },
            divideWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DivideWorks()",
                    line: "973"
                } ));
                t.getFixture().divideWorks();
            },
            floorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "FloorWorks()",
                    line: "979"
                } ));
                t.getFixture().floorWorks();
            },
            remainderWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RemainderWorks()",
                    line: "987"
                } ));
                t.getFixture().remainderWorks();
            },
            multiplyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MultiplyWorks()",
                    line: "993"
                } ));
                t.getFixture().multiplyWorks();
            },
            negateWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NegateWorks()",
                    line: "999"
                } ));
                t.getFixture().negateWorks();
            },
            parseWorks_SPI_1586: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ParseWorks_SPI_1586()",
                    line: "1005"
                } ));
                t.getFixture().parseWorks_SPI_1586();
            },
            tryParseWorks_SPI_1586: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TryParseWorks_SPI_1586()",
                    line: "1029"
                } ));
                t.getFixture().tryParseWorks_SPI_1586();
            },
            roundWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RoundWorks()",
                    line: "1080"
                } ));
                t.getFixture().roundWorks();
            },
            roundWithDecimalsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RoundWithDecimalsWorks()",
                    line: "1087"
                } ));
                t.getFixture().roundWithDecimalsWorks();
            },
            roundWithMidpointRoundingWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RoundWithMidpointRoundingWorks()",
                    line: "1095"
                } ));
                t.getFixture().roundWithMidpointRoundingWorks();
            },
            roundWithDecimalsAndMidpointRoundingWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RoundWithDecimalsAndMidpointRoundingWorks()",
                    line: "1104"
                } ));
                t.getFixture().roundWithDecimalsAndMidpointRoundingWorks();
            },
            truncateWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TruncateWorks()",
                    line: "1117"
                } ));
                t.getFixture().truncateWorks();
            },
            subtractWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SubtractWorks()",
                    line: "1125"
                } ));
                t.getFixture().subtractWorks();
            },
            getHashCodeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetHashCodeWorks()",
                    line: "1131"
                } ));
                t.getFixture().getHashCodeWorks();
            },
            equalsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "EqualsWorks()",
                    line: "1140"
                } ));
                t.getFixture().equalsWorks();
            },
            staticEqualsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "StaticEqualsWorks()",
                    line: "1149"
                } ));
                t.getFixture().staticEqualsWorks();
            },
            iEquatableEqualsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IEquatableEqualsWorks()",
                    line: "1158"
                } ));
                t.getFixture().iEquatableEqualsWorks();
            },
            compareToWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CompareToWorks()",
                    line: "1172"
                } ));
                t.getFixture().compareToWorks();
            },
            staticCompareWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "StaticCompareWorks()",
                    line: "1181"
                } ));
                t.getFixture().staticCompareWorks();
            },
            iComparableCompareToWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IComparableCompareToWorks()",
                    line: "1190"
                } ));
                t.getFixture().iComparableCompareToWorks();
            },
            implementationTests_SPI_1588_1590_1650: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DecimalTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ImplementationTests_SPI_1588_1590_1650()",
                    line: "1199"
                } ));
                t.getFixture().implementationTests_SPI_1588_1590_1650();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.SimpleTypes.DecimalTests",
                    file: "Batch4\\SimpleTypes\\DecimalTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests)],
        statics: {
            typePropertiesAreCorrect_SPI_1717: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect_SPI_1717()",
                    line: "10"
                } ));
                t.getFixture().typePropertiesAreCorrect_SPI_1717();
            },
            defaultValueIs0: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultValueIs0()",
                    line: "37"
                } ));
                t.getFixture().defaultValueIs0();
            },
            creatingInstanceReturnsZero: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreatingInstanceReturnsZero()",
                    line: "43"
                } ));
                t.getFixture().creatingInstanceReturnsZero();
            },
            constantsWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstantsWork()",
                    line: "49"
                } ));
                t.getFixture().constantsWork();
            },
            defaultConstructorReturnsZero: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorReturnsZero()",
                    line: "63"
                } ));
                t.getFixture().defaultConstructorReturnsZero();
            },
            formatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "FormatWorks()",
                    line: "69"
                } ));
                t.getFixture().formatWorks();
            },
            toStringWithFormatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithFormatWorks()",
                    line: "75"
                } ));
                t.getFixture().toStringWithFormatWorks();
            },
            toStringWithFormatAndProviderWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithFormatAndProviderWorks()",
                    line: "81"
                } ));
                t.getFixture().toStringWithFormatAndProviderWorks();
            },
            iFormattableToStringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IFormattableToStringWorks()",
                    line: "87"
                } ));
                t.getFixture().iFormattableToStringWorks();
            },
            toStringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWorks()",
                    line: "100"
                } ));
                t.getFixture().toStringWorks();
            },
            toExponentialWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToExponentialWorks()",
                    line: "106"
                } ));
                t.getFixture().toExponentialWorks();
            },
            toExponentialWithFractionalDigitsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToExponentialWithFractionalDigitsWorks()",
                    line: "112"
                } ));
                t.getFixture().toExponentialWithFractionalDigitsWorks();
            },
            toFixed: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToFixed()",
                    line: "118"
                } ));
                t.getFixture().toFixed();
            },
            toFixedWithFractionalDigitsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToFixedWithFractionalDigitsWorks()",
                    line: "124"
                } ));
                t.getFixture().toFixedWithFractionalDigitsWorks();
            },
            toPrecisionWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToPrecisionWorks()",
                    line: "130"
                } ));
                t.getFixture().toPrecisionWorks();
            },
            toPrecisionWithPrecisionWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToPrecisionWithPrecisionWorks()",
                    line: "136"
                } ));
                t.getFixture().toPrecisionWithPrecisionWorks();
            },
            isPositiveInfinityWorks_SPI_1600: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsPositiveInfinityWorks_SPI_1600()",
                    line: "142"
                } ));
                t.getFixture().isPositiveInfinityWorks_SPI_1600();
            },
            isNegativeInfinityWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsNegativeInfinityWorks()",
                    line: "154"
                } ));
                t.getFixture().isNegativeInfinityWorks();
            },
            isInfinityWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsInfinityWorks()",
                    line: "164"
                } ));
                t.getFixture().isInfinityWorks();
            },
            isFiniteWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsFiniteWorks()",
                    line: "174"
                } ));
                t.getFixture().isFiniteWorks();
            },
            isNaNWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsNaNWorks()",
                    line: "183"
                } ));
                t.getFixture().isNaNWorks();
            },
            getHashCodeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetHashCodeWorks()",
                    line: "192"
                } ));
                t.getFixture().getHashCodeWorks();
            },
            equalsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "EqualsWorks()",
                    line: "201"
                } ));
                t.getFixture().equalsWorks();
            },
            iEquatableEqualsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IEquatableEqualsWorks()",
                    line: "210"
                } ));
                t.getFixture().iEquatableEqualsWorks();
            },
            compareToWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CompareToWorks()",
                    line: "224"
                } ));
                t.getFixture().compareToWorks();
            },
            iComparableCompareToWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_DoubleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IComparableCompareToWorks()",
                    line: "233"
                } ));
                t.getFixture().iComparableCompareToWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.SimpleTypes.DoubleTests",
                    file: "Batch4\\SimpleTypes\\DoubleTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_EnumTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_EnumTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "29"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            defaultValueOfEnumClassIsNull: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_EnumTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultValueOfEnumClassIsNull()",
                    line: "49"
                } ));
                t.getFixture().defaultValueOfEnumClassIsNull();
            },
            defaultValueOfEnumTypeIsZero_SPI_1595: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_EnumTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultValueOfEnumTypeIsZero_SPI_1595()",
                    line: "55"
                } ));
                t.getFixture().defaultValueOfEnumTypeIsZero_SPI_1595();
            },
            defaultConstructorOfEnumTypeReturnsZero_SPI_1595: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_EnumTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorOfEnumTypeReturnsZero_SPI_1595()",
                    line: "62"
                } ));
                t.getFixture().defaultConstructorOfEnumTypeReturnsZero_SPI_1595();
            },
            creatingInstanceOfEnumTypeReturnsZero_SPI_1595: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_EnumTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreatingInstanceOfEnumTypeReturnsZero_SPI_1595()",
                    line: "69"
                } ));
                t.getFixture().creatingInstanceOfEnumTypeReturnsZero_SPI_1595();
            },
            defaultExpressionWithEnumReturnsZero_SPI_1595: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_EnumTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultExpressionWithEnumReturnsZero_SPI_1595()",
                    line: "76"
                } ));
                t.getFixture().defaultExpressionWithEnumReturnsZero_SPI_1595();
            },
            parseWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_EnumTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ParseWorks()",
                    line: "83"
                } ));
                t.getFixture().parseWorks();
            },
            staticToStringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_EnumTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "StaticToStringWorks()",
                    line: "90"
                } ));
                t.getFixture().staticToStringWorks();
            },
            getHashCodeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_EnumTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetHashCodeWorks()",
                    line: "97"
                } ));
                t.getFixture().getHashCodeWorks();
            },
            equalsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_EnumTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "EqualsWorks()",
                    line: "104"
                } ));
                t.getFixture().equalsWorks();
            },
            conversionsToEnumAreTreatedAsConversionsToTheUnderlyingType_SPI_1596: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_EnumTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConversionsToEnumAreTreatedAsConversionsToTheUnderlyingType_SPI_1596()",
                    line: "111"
                } ));
                t.getFixture().conversionsToEnumAreTreatedAsConversionsToTheUnderlyingType_SPI_1596();
            },
            getValuesWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.EnumTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_EnumTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetValuesWorks()",
                    line: "122"
                } ));
                t.getFixture().getValuesWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.SimpleTypes.EnumTests",
                    file: "Batch4\\SimpleTypes\\EnumTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests)],
        statics: {
            typePropertiesAreCorrect_SPI_1717: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect_SPI_1717()",
                    line: "10"
                } ));
                t.getFixture().typePropertiesAreCorrect_SPI_1717();
            },
            castsWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CastsWork()",
                    line: "35"
                } ));
                t.getFixture().castsWork();
            },
            defaultValueIs0: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultValueIs0()",
                    line: "91"
                } ));
                t.getFixture().defaultValueIs0();
            },
            defaultConstructorReturnsZero: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorReturnsZero()",
                    line: "97"
                } ));
                t.getFixture().defaultConstructorReturnsZero();
            },
            creatingInstanceReturnsZero: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreatingInstanceReturnsZero()",
                    line: "103"
                } ));
                t.getFixture().creatingInstanceReturnsZero();
            },
            constantsWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstantsWork()",
                    line: "109"
                } ));
                t.getFixture().constantsWork();
            },
            formatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "FormatWorks()",
                    line: "116"
                } ));
                t.getFixture().formatWorks();
            },
            toStringWithFormatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithFormatWorks()",
                    line: "122"
                } ));
                t.getFixture().toStringWithFormatWorks();
            },
            toStringWithFormatAndProviderWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithFormatAndProviderWorks()",
                    line: "128"
                } ));
                t.getFixture().toStringWithFormatAndProviderWorks();
            },
            iFormattableToStringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IFormattableToStringWorks()",
                    line: "134"
                } ));
                t.getFixture().iFormattableToStringWorks();
            },
            tryParseWorks_SPI_1592: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TryParseWorks_SPI_1592()",
                    line: "147"
                } ));
                t.getFixture().tryParseWorks_SPI_1592();
            },
            parseWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ParseWorks()",
                    line: "182"
                } ));
                t.getFixture().parseWorks();
            },
            toStringWithoutRadixWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithoutRadixWorks()",
                    line: "194"
                } ));
                t.getFixture().toStringWithoutRadixWorks();
            },
            toStringWithRadixWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithRadixWorks()",
                    line: "200"
                } ));
                t.getFixture().toStringWithRadixWorks();
            },
            getHashCodeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetHashCodeWorks()",
                    line: "207"
                } ));
                t.getFixture().getHashCodeWorks();
            },
            equalsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "EqualsWorks()",
                    line: "215"
                } ));
                t.getFixture().equalsWorks();
            },
            iEquatableEqualsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IEquatableEqualsWorks()",
                    line: "224"
                } ));
                t.getFixture().iEquatableEqualsWorks();
            },
            compareToWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CompareToWorks()",
                    line: "238"
                } ));
                t.getFixture().compareToWorks();
            },
            iComparableCompareToWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IComparableCompareToWorks()",
                    line: "246"
                } ));
                t.getFixture().iComparableCompareToWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.SimpleTypes.Int16Tests",
                    file: "Batch4\\SimpleTypes\\Int16Tests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests)],
        statics: {
            typePropertiesAreCorrect_SPI_1717: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect_SPI_1717()",
                    line: "12"
                } ));
                t.getFixture().typePropertiesAreCorrect_SPI_1717();
            },
            castsWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CastsWork()",
                    line: "37"
                } ));
                t.getFixture().castsWork();
            },
            typeIsWorksForInt32: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypeIsWorksForInt32()",
                    line: "88"
                } ));
                t.getFixture().typeIsWorksForInt32();
            },
            typeAsWorksForInt32: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypeAsWorksForInt32()",
                    line: "97"
                } ));
                t.getFixture().typeAsWorksForInt32();
            },
            unboxingWorksForInt32: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "UnboxingWorksForInt32()",
                    line: "106"
                } ));
                t.getFixture().unboxingWorksForInt32();
            },
            defaultValueIs0: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultValueIs0()",
                    line: "130"
                } ));
                t.getFixture().defaultValueIs0();
            },
            defaultConstructorReturnsZero: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorReturnsZero()",
                    line: "136"
                } ));
                t.getFixture().defaultConstructorReturnsZero();
            },
            creatingInstanceReturnsZero: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreatingInstanceReturnsZero()",
                    line: "142"
                } ));
                t.getFixture().creatingInstanceReturnsZero();
            },
            constantsWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstantsWork()",
                    line: "148"
                } ));
                t.getFixture().constantsWork();
            },
            formatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "FormatWorks()",
                    line: "155"
                } ));
                t.getFixture().formatWorks();
            },
            toStringWithFormatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithFormatWorks()",
                    line: "161"
                } ));
                t.getFixture().toStringWithFormatWorks();
            },
            toStringWithFormatAndProviderWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithFormatAndProviderWorks()",
                    line: "167"
                } ));
                t.getFixture().toStringWithFormatAndProviderWorks();
            },
            iFormattableToStringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IFormattableToStringWorks()",
                    line: "173"
                } ));
                t.getFixture().iFormattableToStringWorks();
            },
            tryParseWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TryParseWorks()",
                    line: "186"
                } ));
                t.getFixture().tryParseWorks();
            },
            parseWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ParseWorks()",
                    line: "215"
                } ));
                t.getFixture().parseWorks();
            },
            toStringWithoutRadixWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithoutRadixWorks()",
                    line: "229"
                } ));
                t.getFixture().toStringWithoutRadixWorks();
            },
            toStringWithRadixWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithRadixWorks()",
                    line: "235"
                } ));
                t.getFixture().toStringWithRadixWorks();
            },
            getHashCodeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetHashCodeWorks()",
                    line: "242"
                } ));
                t.getFixture().getHashCodeWorks();
            },
            equalsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "EqualsWorks()",
                    line: "250"
                } ));
                t.getFixture().equalsWorks();
            },
            iEquatableEqualsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IEquatableEqualsWorks()",
                    line: "259"
                } ));
                t.getFixture().iEquatableEqualsWorks();
            },
            compareToWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CompareToWorks()",
                    line: "273"
                } ));
                t.getFixture().compareToWorks();
            },
            iComparableCompareToWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IComparableCompareToWorks()",
                    line: "281"
                } ));
                t.getFixture().iComparableCompareToWorks();
            },
            integerDivisionWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IntegerDivisionWorks()",
                    line: "289"
                } ));
                t.getFixture().integerDivisionWorks();
            },
            integerModuloWorks_SPI_1602: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IntegerModuloWorks_SPI_1602()",
                    line: "303"
                } ));
                t.getFixture().integerModuloWorks_SPI_1602();
            },
            integerDivisionByZeroThrowsDivideByZeroException: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IntegerDivisionByZeroThrowsDivideByZeroException()",
                    line: "318"
                } ));
                t.getFixture().integerDivisionByZeroThrowsDivideByZeroException();
            },
            doublesAreTruncatedWhenConvertedToIntegers: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DoublesAreTruncatedWhenConvertedToIntegers()",
                    line: "328"
                } ));
                t.getFixture().doublesAreTruncatedWhenConvertedToIntegers();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.SimpleTypes.Int32Tests",
                    file: "Batch4\\SimpleTypes\\Int32Tests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests)],
        statics: {
            typePropertiesAreCorrect_SPI_1717: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect_SPI_1717()",
                    line: "10"
                } ));
                t.getFixture().typePropertiesAreCorrect_SPI_1717();
            },
            castsWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CastsWork()",
                    line: "34"
                } ));
                t.getFixture().castsWork();
            },
            defaultValueIs0: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultValueIs0()",
                    line: "76"
                } ));
                t.getFixture().defaultValueIs0();
            },
            defaultConstructorReturnsZero: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorReturnsZero()",
                    line: "82"
                } ));
                t.getFixture().defaultConstructorReturnsZero();
            },
            creatingInstanceReturnsZero: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreatingInstanceReturnsZero()",
                    line: "88"
                } ));
                t.getFixture().creatingInstanceReturnsZero();
            },
            formatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "FormatWorks()",
                    line: "94"
                } ));
                t.getFixture().formatWorks();
            },
            toStringWithFormatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithFormatWorks()",
                    line: "100"
                } ));
                t.getFixture().toStringWithFormatWorks();
            },
            toStringWithFormatAndProviderWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithFormatAndProviderWorks()",
                    line: "106"
                } ));
                t.getFixture().toStringWithFormatAndProviderWorks();
            },
            iFormattableToStringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IFormattableToStringWorks()",
                    line: "112"
                } ));
                t.getFixture().iFormattableToStringWorks();
            },
            tryParseWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TryParseWorks()",
                    line: "125"
                } ));
                t.getFixture().tryParseWorks();
            },
            parseWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ParseWorks()",
                    line: "162"
                } ));
                t.getFixture().parseWorks();
            },
            castingOfLargeDoublesToInt64Works: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CastingOfLargeDoublesToInt64Works()",
                    line: "175"
                } ));
                t.getFixture().castingOfLargeDoublesToInt64Works();
            },
            divisionOfLargeInt64Works: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DivisionOfLargeInt64Works()",
                    line: "183"
                } ));
                t.getFixture().divisionOfLargeInt64Works();
            },
            toStringWithoutRadixWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithoutRadixWorks()",
                    line: "191"
                } ));
                t.getFixture().toStringWithoutRadixWorks();
            },
            toStringWithRadixWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithRadixWorks()",
                    line: "197"
                } ));
                t.getFixture().toStringWithRadixWorks();
            },
            getHashCodeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetHashCodeWorks()",
                    line: "204"
                } ));
                t.getFixture().getHashCodeWorks();
            },
            equalsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "EqualsWorks()",
                    line: "213"
                } ));
                t.getFixture().equalsWorks();
            },
            iEquatableEqualsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IEquatableEqualsWorks()",
                    line: "222"
                } ));
                t.getFixture().iEquatableEqualsWorks();
            },
            compareToWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CompareToWorks()",
                    line: "236"
                } ));
                t.getFixture().compareToWorks();
            },
            iComparableCompareToWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_Int64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IComparableCompareToWorks()",
                    line: "244"
                } ));
                t.getFixture().iComparableCompareToWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.SimpleTypes.Int64Tests",
                    file: "Batch4\\SimpleTypes\\Int64Tests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ObjectTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ObjectTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ObjectTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ObjectTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "20"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            canGetHashCodeForObject: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ObjectTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ObjectTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CanGetHashCodeForObject()",
                    line: "28"
                } ));
                t.getFixture().canGetHashCodeForObject();
            },
            repeatedCallsToGetHashCodeReturnsSameValue: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ObjectTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ObjectTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RepeatedCallsToGetHashCodeReturnsSameValue()",
                    line: "36"
                } ));
                t.getFixture().repeatedCallsToGetHashCodeReturnsSameValue();
            },
            objectIsEqualToItself: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ObjectTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ObjectTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ObjectIsEqualToItself()",
                    line: "43"
                } ));
                t.getFixture().objectIsEqualToItself();
            },
            objectIsNotEqualToOtherObject: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ObjectTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ObjectTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ObjectIsNotEqualToOtherObject()",
                    line: "50"
                } ));
                t.getFixture().objectIsNotEqualToOtherObject();
            },
            staticEqualsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ObjectTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ObjectTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "StaticEqualsWorks()",
                    line: "56"
                } ));
                t.getFixture().staticEqualsWorks();
            },
            referenceEqualsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ObjectTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ObjectTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ReferenceEqualsWorks()",
                    line: "67"
                } ));
                t.getFixture().referenceEqualsWorks();
            },
            toStringOverride: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.ObjectTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_ObjectTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringOverride()",
                    line: "79"
                } ));
                t.getFixture().toStringOverride();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.SimpleTypes.ObjectTests",
                    file: "Batch4\\SimpleTypes\\ObjectTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests)],
        statics: {
            typePropertiesAreCorrect_SPI_1717: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect_SPI_1717()",
                    line: "10"
                } ));
                t.getFixture().typePropertiesAreCorrect_SPI_1717();
            },
            castsWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CastsWork()",
                    line: "35"
                } ));
                t.getFixture().castsWork();
            },
            defaultValueIs0: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultValueIs0()",
                    line: "91"
                } ));
                t.getFixture().defaultValueIs0();
            },
            defaultConstructorReturnsZero: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorReturnsZero()",
                    line: "97"
                } ));
                t.getFixture().defaultConstructorReturnsZero();
            },
            creatingInstanceReturnsZero: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreatingInstanceReturnsZero()",
                    line: "103"
                } ));
                t.getFixture().creatingInstanceReturnsZero();
            },
            constantsWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstantsWork()",
                    line: "109"
                } ));
                t.getFixture().constantsWork();
            },
            formatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "FormatWorks()",
                    line: "116"
                } ));
                t.getFixture().formatWorks();
            },
            toStringWithFormatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithFormatWorks()",
                    line: "122"
                } ));
                t.getFixture().toStringWithFormatWorks();
            },
            toStringWithFormatAndProviderWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithFormatAndProviderWorks()",
                    line: "128"
                } ));
                t.getFixture().toStringWithFormatAndProviderWorks();
            },
            iFormattableToStringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IFormattableToStringWorks()",
                    line: "134"
                } ));
                t.getFixture().iFormattableToStringWorks();
            },
            tryParseWorks_SPI_1592: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TryParseWorks_SPI_1592()",
                    line: "147"
                } ));
                t.getFixture().tryParseWorks_SPI_1592();
            },
            parseWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ParseWorks()",
                    line: "181"
                } ));
                t.getFixture().parseWorks();
            },
            toStringWithoutRadixWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithoutRadixWorks()",
                    line: "193"
                } ));
                t.getFixture().toStringWithoutRadixWorks();
            },
            toStringWithRadixWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithRadixWorks()",
                    line: "199"
                } ));
                t.getFixture().toStringWithRadixWorks();
            },
            getHashCodeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetHashCodeWorks()",
                    line: "206"
                } ));
                t.getFixture().getHashCodeWorks();
            },
            equalsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "EqualsWorks()",
                    line: "214"
                } ));
                t.getFixture().equalsWorks();
            },
            iEquatableEqualsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IEquatableEqualsWorks()",
                    line: "223"
                } ));
                t.getFixture().iEquatableEqualsWorks();
            },
            compareToWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CompareToWorks()",
                    line: "237"
                } ));
                t.getFixture().compareToWorks();
            },
            iComparableCompareToWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SByteTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SByteTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IComparableCompareToWorks()",
                    line: "245"
                } ));
                t.getFixture().iComparableCompareToWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.SimpleTypes.SByteTests",
                    file: "Batch4\\SimpleTypes\\SByteTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests)],
        statics: {
            typePropertiesAreCorrect_SPI_1717: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect_SPI_1717()",
                    line: "10"
                } ));
                t.getFixture().typePropertiesAreCorrect_SPI_1717();
            },
            defaultValueIs0: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultValueIs0()",
                    line: "37"
                } ));
                t.getFixture().defaultValueIs0();
            },
            creatingInstanceReturnsZero: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreatingInstanceReturnsZero()",
                    line: "43"
                } ));
                t.getFixture().creatingInstanceReturnsZero();
            },
            constantsWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstantsWork()",
                    line: "49"
                } ));
                t.getFixture().constantsWork();
            },
            defaultConstructorReturnsZero: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorReturnsZero()",
                    line: "61"
                } ));
                t.getFixture().defaultConstructorReturnsZero();
            },
            formatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "FormatWorks()",
                    line: "67"
                } ));
                t.getFixture().formatWorks();
            },
            toStringWithFormatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithFormatWorks()",
                    line: "73"
                } ));
                t.getFixture().toStringWithFormatWorks();
            },
            toStringWithFormatAndProviderWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithFormatAndProviderWorks()",
                    line: "79"
                } ));
                t.getFixture().toStringWithFormatAndProviderWorks();
            },
            iFormattableToStringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IFormattableToStringWorks()",
                    line: "85"
                } ));
                t.getFixture().iFormattableToStringWorks();
            },
            toStringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWorks()",
                    line: "98"
                } ));
                t.getFixture().toStringWorks();
            },
            toExponentialWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToExponentialWorks()",
                    line: "104"
                } ));
                t.getFixture().toExponentialWorks();
            },
            toExponentialWithFractionalDigitsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToExponentialWithFractionalDigitsWorks()",
                    line: "110"
                } ));
                t.getFixture().toExponentialWithFractionalDigitsWorks();
            },
            toFixed: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToFixed()",
                    line: "116"
                } ));
                t.getFixture().toFixed();
            },
            toFixedWithFractionalDigitsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToFixedWithFractionalDigitsWorks()",
                    line: "122"
                } ));
                t.getFixture().toFixedWithFractionalDigitsWorks();
            },
            toPrecisionWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToPrecisionWorks()",
                    line: "128"
                } ));
                t.getFixture().toPrecisionWorks();
            },
            toPrecisionWithPrecisionWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToPrecisionWithPrecisionWorks()",
                    line: "134"
                } ));
                t.getFixture().toPrecisionWithPrecisionWorks();
            },
            isPositiveInfinityWorks_SPI_1600: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsPositiveInfinityWorks_SPI_1600()",
                    line: "140"
                } ));
                t.getFixture().isPositiveInfinityWorks_SPI_1600();
            },
            isNegativeInfinityWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsNegativeInfinityWorks()",
                    line: "152"
                } ));
                t.getFixture().isNegativeInfinityWorks();
            },
            isInfinityWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsInfinityWorks()",
                    line: "162"
                } ));
                t.getFixture().isInfinityWorks();
            },
            isFiniteWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsFiniteWorks()",
                    line: "172"
                } ));
                t.getFixture().isFiniteWorks();
            },
            isNaNWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsNaNWorks()",
                    line: "181"
                } ));
                t.getFixture().isNaNWorks();
            },
            getHashCodeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetHashCodeWorks()",
                    line: "190"
                } ));
                t.getFixture().getHashCodeWorks();
            },
            equalsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "EqualsWorks()",
                    line: "199"
                } ));
                t.getFixture().equalsWorks();
            },
            iEquatableEqualsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IEquatableEqualsWorks()",
                    line: "208"
                } ));
                t.getFixture().iEquatableEqualsWorks();
            },
            compareToWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CompareToWorks()",
                    line: "222"
                } ));
                t.getFixture().compareToWorks();
            },
            iComparableCompareToWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.SingleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_SingleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IComparableCompareToWorks()",
                    line: "231"
                } ));
                t.getFixture().iComparableCompareToWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.SimpleTypes.SingleTests",
                    file: "Batch4\\SimpleTypes\\SingleTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests)],
        statics: {
            typePropertiesAreCorrect_SPI_1597: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect_SPI_1597()",
                    line: "49"
                } ));
                t.getFixture().typePropertiesAreCorrect_SPI_1597();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "68"
                } ));
                t.getFixture().defaultConstructorWorks();
            },
            charAndCountConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CharAndCountConstructorWorks()",
                    line: "74"
                } ));
                t.getFixture().charAndCountConstructorWorks();
            },
            charArrayConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CharArrayConstructorWorks()",
                    line: "80"
                } ));
                t.getFixture().charArrayConstructorWorks();
            },
            charArrayWithStartIndexAndLengthConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CharArrayWithStartIndexAndLengthConstructorWorks()",
                    line: "86"
                } ));
                t.getFixture().charArrayWithStartIndexAndLengthConstructorWorks();
            },
            emptyFieldWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "EmptyFieldWorks()",
                    line: "92"
                } ));
                t.getFixture().emptyFieldWorks();
            },
            lengthPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LengthPropertyWorks()",
                    line: "98"
                } ));
                t.getFixture().lengthPropertyWorks();
            },
            charAtWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CharAtWorks()",
                    line: "104"
                } ));
                t.getFixture().charAtWorks();
            },
            charCodeAtWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CharCodeAtWorks()",
                    line: "117"
                } ));
                t.getFixture().charCodeAtWorks();
            },
            compareToWithIgnoreCaseArgWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CompareToWithIgnoreCaseArgWorks()",
                    line: "123"
                } ));
                t.getFixture().compareToWithIgnoreCaseArgWorks();
            },
            compareWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CompareWorks()",
                    line: "136"
                } ));
                t.getFixture().compareWorks();
            },
            compareWithIgnoreCaseArgWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CompareWithIgnoreCaseArgWorks()",
                    line: "148"
                } ));
                t.getFixture().compareWithIgnoreCaseArgWorks();
            },
            concatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConcatWorks()",
                    line: "163"
                } ));
                t.getFixture().concatWorks();
            },
            concatWithObjectsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConcatWithObjectsWorks()",
                    line: "176"
                } ));
                t.getFixture().concatWithObjectsWorks();
            },
            endsWithStringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "EndsWithStringWorks()",
                    line: "226"
                } ));
                t.getFixture().endsWithStringWorks();
            },
            staticEqualsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "StaticEqualsWorks()",
                    line: "233"
                } ));
                t.getFixture().staticEqualsWorks();
            },
            formatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "FormatWorks()",
                    line: "274"
                } ));
                t.getFixture().formatWorks();
            },
            formatWorksWithIFormattable_SPI_1598: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "FormatWorksWithIFormattable_SPI_1598()",
                    line: "293"
                } ));
                t.getFixture().formatWorksWithIFormattable_SPI_1598();
            },
            formatWorksWithIFormattableAndFormatProvider_SPI_1598: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "FormatWorksWithIFormattableAndFormatProvider_SPI_1598()",
                    line: "301"
                } ));
                t.getFixture().formatWorksWithIFormattableAndFormatProvider_SPI_1598();
            },
            formatCanUseEscapedBraces: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "FormatCanUseEscapedBraces()",
                    line: "309"
                } ));
                t.getFixture().formatCanUseEscapedBraces();
            },
            fromCharCodeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "FromCharCodeWorks()",
                    line: "315"
                } ));
                t.getFixture().fromCharCodeWorks();
            },
            indexOfCharWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexOfCharWorks()",
                    line: "341"
                } ));
                t.getFixture().indexOfCharWorks();
            },
            indexOfStringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexOfStringWorks()",
                    line: "348"
                } ));
                t.getFixture().indexOfStringWorks();
            },
            indexOfCharWithStartIndexWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexOfCharWithStartIndexWorks()",
                    line: "355"
                } ));
                t.getFixture().indexOfCharWithStartIndexWorks();
            },
            indexOfCharWithStartIndexAndCountWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexOfCharWithStartIndexAndCountWorks()",
                    line: "362"
                } ));
                t.getFixture().indexOfCharWithStartIndexAndCountWorks();
            },
            indexOfStringWithStartIndexWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexOfStringWithStartIndexWorks()",
                    line: "370"
                } ));
                t.getFixture().indexOfStringWithStartIndexWorks();
            },
            indexOfStringWithStartIndexAndCountWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexOfStringWithStartIndexAndCountWorks()",
                    line: "377"
                } ));
                t.getFixture().indexOfStringWithStartIndexAndCountWorks();
            },
            indexOfAnyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexOfAnyWorks()",
                    line: "385"
                } ));
                t.getFixture().indexOfAnyWorks();
            },
            indexOfAnyWithStartIndexWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexOfAnyWithStartIndexWorks()",
                    line: "394"
                } ));
                t.getFixture().indexOfAnyWithStartIndexWorks();
            },
            indexOfAnyWithStartIndexAndCountWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IndexOfAnyWithStartIndexAndCountWorks()",
                    line: "403"
                } ));
                t.getFixture().indexOfAnyWithStartIndexAndCountWorks();
            },
            insertWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "InsertWorks()",
                    line: "413"
                } ));
                t.getFixture().insertWorks();
            },
            isNullOrEmptyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsNullOrEmptyWorks()",
                    line: "419"
                } ));
                t.getFixture().isNullOrEmptyWorks();
            },
            lastIndexOfCharWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LastIndexOfCharWorks()",
                    line: "428"
                } ));
                t.getFixture().lastIndexOfCharWorks();
            },
            lastIndexOfStringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LastIndexOfStringWorks()",
                    line: "435"
                } ));
                t.getFixture().lastIndexOfStringWorks();
            },
            lastIndexOfCharWithStartIndexWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LastIndexOfCharWithStartIndexWorks()",
                    line: "442"
                } ));
                t.getFixture().lastIndexOfCharWithStartIndexWorks();
            },
            lastIndexOfStringWithStartIndexWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LastIndexOfStringWithStartIndexWorks()",
                    line: "449"
                } ));
                t.getFixture().lastIndexOfStringWithStartIndexWorks();
            },
            lastIndexOfCharWithStartIndexAndCountWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LastIndexOfCharWithStartIndexAndCountWorks()",
                    line: "456"
                } ));
                t.getFixture().lastIndexOfCharWithStartIndexAndCountWorks();
            },
            lastIndexOfStringWithStartIndexAndCountWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LastIndexOfStringWithStartIndexAndCountWorks()",
                    line: "464"
                } ));
                t.getFixture().lastIndexOfStringWithStartIndexAndCountWorks();
            },
            lastIndexOfAnyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LastIndexOfAnyWorks()",
                    line: "472"
                } ));
                t.getFixture().lastIndexOfAnyWorks();
            },
            lastIndexOfAnyWithStartIndexWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LastIndexOfAnyWithStartIndexWorks()",
                    line: "481"
                } ));
                t.getFixture().lastIndexOfAnyWithStartIndexWorks();
            },
            lastIndexOfAnyWithStartIndexAndCountWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LastIndexOfAnyWithStartIndexAndCountWorks()",
                    line: "490"
                } ));
                t.getFixture().lastIndexOfAnyWithStartIndexAndCountWorks();
            },
            localeCompareWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LocaleCompareWorks()",
                    line: "500"
                } ));
                t.getFixture().localeCompareWorks();
            },
            padLeftWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "PadLeftWorks()",
                    line: "527"
                } ));
                t.getFixture().padLeftWorks();
            },
            padLeftWithCharWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "PadLeftWithCharWorks()",
                    line: "533"
                } ));
                t.getFixture().padLeftWithCharWorks();
            },
            padRightWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "PadRightWorks()",
                    line: "539"
                } ));
                t.getFixture().padRightWorks();
            },
            padRightWithCharWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "PadRightWithCharWorks()",
                    line: "545"
                } ));
                t.getFixture().padRightWithCharWorks();
            },
            removeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RemoveWorks()",
                    line: "551"
                } ));
                t.getFixture().removeWorks();
            },
            removeWithCountWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RemoveWithCountWorks()",
                    line: "557"
                } ));
                t.getFixture().removeWithCountWorks();
            },
            replaceWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ReplaceWorks()",
                    line: "563"
                } ));
                t.getFixture().replaceWorks();
            },
            replaceCharWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ReplaceCharWorks()",
                    line: "570"
                } ));
                t.getFixture().replaceCharWorks();
            },
            replaceRegexWithReplaceTextWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ReplaceRegexWithReplaceTextWorks()",
                    line: "583"
                } ));
                t.getFixture().replaceRegexWithReplaceTextWorks();
            },
            replaceRegexWithReplaceCallbackWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ReplaceRegexWithReplaceCallbackWorks()",
                    line: "589"
                } ));
                t.getFixture().replaceRegexWithReplaceCallbackWorks();
            },
            searchWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SearchWorks()",
                    line: "595"
                } ));
                t.getFixture().searchWorks();
            },
            splitWithStringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SplitWithStringWorks()",
                    line: "602"
                } ));
                t.getFixture().splitWithStringWorks();
            },
            splitWithCharWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SplitWithCharWorks()",
                    line: "608"
                } ));
                t.getFixture().splitWithCharWorks();
            },
            splitWithCharsAndLimitWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SplitWithCharsAndLimitWorks()",
                    line: "628"
                } ));
                t.getFixture().splitWithCharsAndLimitWorks();
            },
            splitWithCharsAndStringSplitOptionsAndLimitWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SplitWithCharsAndStringSplitOptionsAndLimitWorks()",
                    line: "634"
                } ));
                t.getFixture().splitWithCharsAndStringSplitOptionsAndLimitWorks();
            },
            splitWithRegexWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SplitWithRegexWorks()",
                    line: "640"
                } ));
                t.getFixture().splitWithRegexWorks();
            },
            someNetSplitTests: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SomeNetSplitTests()",
                    line: "653"
                } ));
                t.getFixture().someNetSplitTests();
            },
            splitWithCharsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SplitWithCharsWorks()",
                    line: "685"
                } ));
                t.getFixture().splitWithCharsWorks();
            },
            splitWithStringsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SplitWithStringsWorks()",
                    line: "693"
                } ));
                t.getFixture().splitWithStringsWorks();
            },
            splitWithStringsAndLimitWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SplitWithStringsAndLimitWorks()",
                    line: "700"
                } ));
                t.getFixture().splitWithStringsAndLimitWorks();
            },
            startsWithStringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "StartsWithStringWorks()",
                    line: "714"
                } ));
                t.getFixture().startsWithStringWorks();
            },
            substrWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SubstrWorks()",
                    line: "721"
                } ));
                t.getFixture().substrWorks();
            },
            substrWithLengthWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SubstrWithLengthWorks()",
                    line: "727"
                } ));
                t.getFixture().substrWithLengthWorks();
            },
            substringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SubstringWorks()",
                    line: "733"
                } ));
                t.getFixture().substringWorks();
            },
            substringWithLengthWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SubstringWithLengthWorks()",
                    line: "739"
                } ));
                t.getFixture().substringWithLengthWorks();
            },
            jsSubstringWithEndIndexWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "JsSubstringWithEndIndexWorks()",
                    line: "745"
                } ));
                t.getFixture().jsSubstringWithEndIndexWorks();
            },
            toLowerWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToLowerWorks()",
                    line: "779"
                } ));
                t.getFixture().toLowerWorks();
            },
            toUpperWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToUpperWorks()",
                    line: "785"
                } ));
                t.getFixture().toUpperWorks();
            },
            trimWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TrimWorks()",
                    line: "791"
                } ));
                t.getFixture().trimWorks();
            },
            trimCharsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TrimCharsWorks()",
                    line: "797"
                } ));
                t.getFixture().trimCharsWorks();
            },
            trimStartCharsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TrimStartCharsWorks()",
                    line: "803"
                } ));
                t.getFixture().trimStartCharsWorks();
            },
            trimEndCharsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TrimEndCharsWorks()",
                    line: "809"
                } ));
                t.getFixture().trimEndCharsWorks();
            },
            trimStartWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TrimStartWorks()",
                    line: "815"
                } ));
                t.getFixture().trimStartWorks();
            },
            trimEndWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TrimEndWorks()",
                    line: "821"
                } ));
                t.getFixture().trimEndWorks();
            },
            stringEqualityWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "StringEqualityWorks()",
                    line: "827"
                } ));
                t.getFixture().stringEqualityWorks();
            },
            stringInequalityWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "StringInequalityWorks()",
                    line: "837"
                } ));
                t.getFixture().stringInequalityWorks();
            },
            stringIndexingWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "StringIndexingWorks()",
                    line: "847"
                } ));
                t.getFixture().stringIndexingWorks();
            },
            getHashCodeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetHashCodeWorks()",
                    line: "857"
                } ));
                t.getFixture().getHashCodeWorks();
            },
            instanceEqualsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "InstanceEqualsWorks()",
                    line: "867"
                } ));
                t.getFixture().instanceEqualsWorks();
            },
            iEquatableEqualsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IEquatableEqualsWorks()",
                    line: "878"
                } ));
                t.getFixture().iEquatableEqualsWorks();
            },
            compareToWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CompareToWorks()",
                    line: "896"
                } ));
                t.getFixture().compareToWorks();
            },
            iComparableCompareToWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IComparableCompareToWorks()",
                    line: "907"
                } ));
                t.getFixture().iComparableCompareToWorks();
            },
            joinWorks_SPI_1599: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "JoinWorks_SPI_1599()",
                    line: "918"
                } ));
                t.getFixture().joinWorks_SPI_1599();
            },
            containsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ContainsWorks()",
                    line: "935"
                } ));
                t.getFixture().containsWorks();
            },
            toCharArrayWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.StringTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_StringTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToCharArrayWorks()",
                    line: "944"
                } ));
                t.getFixture().toCharArrayWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.SimpleTypes.StringTests",
                    file: "Batch4\\SimpleTypes\\StringTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests)],
        statics: {
            typePropertiesAreCorrect_SPI_1717: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect_SPI_1717()",
                    line: "9"
                } ));
                t.getFixture().typePropertiesAreCorrect_SPI_1717();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "27"
                } ));
                t.getFixture().defaultConstructorWorks();
            },
            defaultValueWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultValueWorks()",
                    line: "34"
                } ));
                t.getFixture().defaultValueWorks();
            },
            zeroWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ZeroWorks()",
                    line: "41"
                } ));
                t.getFixture().zeroWorks();
            },
            creatingInstanceReturnsTimeSpanWithZeroValue: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreatingInstanceReturnsTimeSpanWithZeroValue()",
                    line: "48"
                } ));
                t.getFixture().creatingInstanceReturnsTimeSpanWithZeroValue();
            },
            parameterConstructorsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ParameterConstructorsWorks()",
                    line: "55"
                } ));
                t.getFixture().parameterConstructorsWorks();
            },
            factoryMethodsWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "FactoryMethodsWork()",
                    line: "75"
                } ));
                t.getFixture().factoryMethodsWork();
            },
            propertiesWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "PropertiesWork()",
                    line: "103"
                } ));
                t.getFixture().propertiesWork();
            },
            compareToWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CompareToWorks()",
                    line: "120"
                } ));
                t.getFixture().compareToWorks();
            },
            compareWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CompareWorks()",
                    line: "133"
                } ));
                t.getFixture().compareWorks();
            },
            staticEqualsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "StaticEqualsWorks()",
                    line: "146"
                } ));
                t.getFixture().staticEqualsWorks();
            },
            equalsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "EqualsWorks()",
                    line: "157"
                } ));
                t.getFixture().equalsWorks();
            },
            iEquatableEqualsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IEquatableEqualsWorks()",
                    line: "168"
                } ));
                t.getFixture().iEquatableEqualsWorks();
            },
            toStringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWorks()",
                    line: "179"
                } ));
                t.getFixture().toStringWorks();
            },
            addWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AddWorks()",
                    line: "192"
                } ));
                t.getFixture().addWorks();
            },
            subtractWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SubtractWorks()",
                    line: "202"
                } ));
                t.getFixture().subtractWorks();
            },
            durationWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DurationWorks()",
                    line: "212"
                } ));
                t.getFixture().durationWorks();
            },
            negateWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NegateWorks()",
                    line: "224"
                } ));
                t.getFixture().negateWorks();
            },
            comparisonOperatorsWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ComparisonOperatorsWork()",
                    line: "241"
                } ));
                t.getFixture().comparisonOperatorsWork();
            },
            additionOperatorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AdditionOperatorWorks()",
                    line: "278"
                } ));
                t.getFixture().additionOperatorWorks();
            },
            subtractionOperatorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SubtractionOperatorWorks()",
                    line: "288"
                } ));
                t.getFixture().subtractionOperatorWorks();
            },
            unaryPlusWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "UnaryPlusWorks()",
                    line: "298"
                } ));
                t.getFixture().unaryPlusWorks();
            },
            unaryMinusWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "UnaryMinusWorks()",
                    line: "307"
                } ));
                t.getFixture().unaryMinusWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.SimpleTypes.TimeSpanTests",
                    file: "Batch4\\SimpleTypes\\TimeSpanTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TupleTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TupleTests)],
        statics: {
            tuple1Works: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TupleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TupleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "Tuple1Works()",
                    line: "9"
                } ));
                t.getFixture().tuple1Works();
            },
            tuple2Works: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TupleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TupleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "Tuple2Works()",
                    line: "19"
                } ));
                t.getFixture().tuple2Works();
            },
            tuple3Works: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TupleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TupleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "Tuple3Works()",
                    line: "30"
                } ));
                t.getFixture().tuple3Works();
            },
            tuple4Works: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TupleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TupleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "Tuple4Works()",
                    line: "42"
                } ));
                t.getFixture().tuple4Works();
            },
            tuple5Works: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TupleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TupleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "Tuple5Works()",
                    line: "55"
                } ));
                t.getFixture().tuple5Works();
            },
            tuple6Works: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TupleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TupleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "Tuple6Works()",
                    line: "69"
                } ));
                t.getFixture().tuple6Works();
            },
            tuple7Works: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TupleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TupleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "Tuple7Works()",
                    line: "84"
                } ));
                t.getFixture().tuple7Works();
            },
            tuple8Works: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.TupleTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_TupleTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "Tuple8Works()",
                    line: "100"
                } ));
                t.getFixture().tuple8Works();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.SimpleTypes.TupleTests",
                    file: "Batch4\\SimpleTypes\\TupleTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests)],
        statics: {
            typePropertiesAreCorrect_SPI_1717: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect_SPI_1717()",
                    line: "10"
                } ));
                t.getFixture().typePropertiesAreCorrect_SPI_1717();
            },
            castsWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CastsWork()",
                    line: "35"
                } ));
                t.getFixture().castsWork();
            },
            defaultValueIs0: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultValueIs0()",
                    line: "91"
                } ));
                t.getFixture().defaultValueIs0();
            },
            defaultConstructorReturnsZero: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorReturnsZero()",
                    line: "97"
                } ));
                t.getFixture().defaultConstructorReturnsZero();
            },
            creatingInstanceReturnsZero: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreatingInstanceReturnsZero()",
                    line: "103"
                } ));
                t.getFixture().creatingInstanceReturnsZero();
            },
            constantsWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstantsWork()",
                    line: "109"
                } ));
                t.getFixture().constantsWork();
            },
            formatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "FormatWorks()",
                    line: "116"
                } ));
                t.getFixture().formatWorks();
            },
            toStringWithFormatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithFormatWorks()",
                    line: "122"
                } ));
                t.getFixture().toStringWithFormatWorks();
            },
            toStringWithFormatAndProviderWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithFormatAndProviderWorks()",
                    line: "128"
                } ));
                t.getFixture().toStringWithFormatAndProviderWorks();
            },
            iFormattableToStringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IFormattableToStringWorks()",
                    line: "134"
                } ));
                t.getFixture().iFormattableToStringWorks();
            },
            tryParseWorks_SPI_1592: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TryParseWorks_SPI_1592()",
                    line: "147"
                } ));
                t.getFixture().tryParseWorks_SPI_1592();
            },
            parseWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ParseWorks()",
                    line: "181"
                } ));
                t.getFixture().parseWorks();
            },
            toStringWithoutRadixWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithoutRadixWorks()",
                    line: "193"
                } ));
                t.getFixture().toStringWithoutRadixWorks();
            },
            toStringWithRadixWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithRadixWorks()",
                    line: "199"
                } ));
                t.getFixture().toStringWithRadixWorks();
            },
            getHashCodeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetHashCodeWorks()",
                    line: "206"
                } ));
                t.getFixture().getHashCodeWorks();
            },
            equalsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "EqualsWorks()",
                    line: "214"
                } ));
                t.getFixture().equalsWorks();
            },
            iEquatableEqualsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IEquatableEqualsWorks()",
                    line: "223"
                } ));
                t.getFixture().iEquatableEqualsWorks();
            },
            compareToWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CompareToWorks()",
                    line: "237"
                } ));
                t.getFixture().compareToWorks();
            },
            iComparableCompareToWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt16Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IComparableCompareToWorks()",
                    line: "245"
                } ));
                t.getFixture().iComparableCompareToWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.SimpleTypes.UInt16Tests",
                    file: "Batch4\\SimpleTypes\\UInt16Tests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests)],
        statics: {
            typePropertiesAreCorrect_SPI_1717: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect_SPI_1717()",
                    line: "10"
                } ));
                t.getFixture().typePropertiesAreCorrect_SPI_1717();
            },
            castsWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CastsWork()",
                    line: "35"
                } ));
                t.getFixture().castsWork();
            },
            defaultValueIs0: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultValueIs0()",
                    line: "91"
                } ));
                t.getFixture().defaultValueIs0();
            },
            defaultConstructorReturnsZero: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorReturnsZero()",
                    line: "97"
                } ));
                t.getFixture().defaultConstructorReturnsZero();
            },
            creatingInstanceReturnsZero: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreatingInstanceReturnsZero()",
                    line: "103"
                } ));
                t.getFixture().creatingInstanceReturnsZero();
            },
            constantsWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstantsWork()",
                    line: "109"
                } ));
                t.getFixture().constantsWork();
            },
            formatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "FormatWorks()",
                    line: "116"
                } ));
                t.getFixture().formatWorks();
            },
            toStringWithFormatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithFormatWorks()",
                    line: "122"
                } ));
                t.getFixture().toStringWithFormatWorks();
            },
            toStringWithFormatAndProviderWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithFormatAndProviderWorks()",
                    line: "128"
                } ));
                t.getFixture().toStringWithFormatAndProviderWorks();
            },
            iFormattableToStringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IFormattableToStringWorks()",
                    line: "134"
                } ));
                t.getFixture().iFormattableToStringWorks();
            },
            tryParseWorks_SPI_1592: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TryParseWorks_SPI_1592()",
                    line: "147"
                } ));
                t.getFixture().tryParseWorks_SPI_1592();
            },
            parseWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ParseWorks()",
                    line: "177"
                } ));
                t.getFixture().parseWorks();
            },
            toStringWithoutRadixWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithoutRadixWorks()",
                    line: "189"
                } ));
                t.getFixture().toStringWithoutRadixWorks();
            },
            toStringWithRadixWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithRadixWorks()",
                    line: "195"
                } ));
                t.getFixture().toStringWithRadixWorks();
            },
            getHashCodeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetHashCodeWorks()",
                    line: "202"
                } ));
                t.getFixture().getHashCodeWorks();
            },
            equalsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "EqualsWorks()",
                    line: "210"
                } ));
                t.getFixture().equalsWorks();
            },
            iEquatableEqualsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IEquatableEqualsWorks()",
                    line: "219"
                } ));
                t.getFixture().iEquatableEqualsWorks();
            },
            compareToWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CompareToWorks()",
                    line: "233"
                } ));
                t.getFixture().compareToWorks();
            },
            iComparableCompareToWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt32Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IComparableCompareToWorks()",
                    line: "241"
                } ));
                t.getFixture().iComparableCompareToWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.SimpleTypes.UInt32Tests",
                    file: "Batch4\\SimpleTypes\\UInt32Tests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests)],
        statics: {
            typePropertiesAreCorrect_SPI_1717: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect_SPI_1717()",
                    line: "10"
                } ));
                t.getFixture().typePropertiesAreCorrect_SPI_1717();
            },
            castsWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CastsWork()",
                    line: "33"
                } ));
                t.getFixture().castsWork();
            },
            defaultValueIs0: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultValueIs0()",
                    line: "79"
                } ));
                t.getFixture().defaultValueIs0();
            },
            defaultConstructorReturnsZero: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorReturnsZero()",
                    line: "85"
                } ));
                t.getFixture().defaultConstructorReturnsZero();
            },
            creatingInstanceReturnsZero: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreatingInstanceReturnsZero()",
                    line: "91"
                } ));
                t.getFixture().creatingInstanceReturnsZero();
            },
            constantsWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstantsWork()",
                    line: "97"
                } ));
                t.getFixture().constantsWork();
            },
            formatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "FormatWorks()",
                    line: "103"
                } ));
                t.getFixture().formatWorks();
            },
            toStringWithFormatWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithFormatWorks()",
                    line: "109"
                } ));
                t.getFixture().toStringWithFormatWorks();
            },
            toStringWithFormatAndProviderWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithFormatAndProviderWorks()",
                    line: "115"
                } ));
                t.getFixture().toStringWithFormatAndProviderWorks();
            },
            iFormattableToStringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IFormattableToStringWorks()",
                    line: "121"
                } ));
                t.getFixture().iFormattableToStringWorks();
            },
            castingOfLargeValuesToUInt64Works_SPI_1591: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CastingOfLargeValuesToUInt64Works_SPI_1591()",
                    line: "134"
                } ));
                t.getFixture().castingOfLargeValuesToUInt64Works_SPI_1591();
            },
            divisionOfLargeUInt64Works: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DivisionOfLargeUInt64Works()",
                    line: "143"
                } ));
                t.getFixture().divisionOfLargeUInt64Works();
            },
            tryParseWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TryParseWorks()",
                    line: "150"
                } ));
                t.getFixture().tryParseWorks();
            },
            parseWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ParseWorks()",
                    line: "183"
                } ));
                t.getFixture().parseWorks();
            },
            toStringWithoutRadixWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithoutRadixWorks()",
                    line: "195"
                } ));
                t.getFixture().toStringWithoutRadixWorks();
            },
            toStringWithRadixWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWithRadixWorks()",
                    line: "201"
                } ));
                t.getFixture().toStringWithRadixWorks();
            },
            getHashCodeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetHashCodeWorks()",
                    line: "208"
                } ));
                t.getFixture().getHashCodeWorks();
            },
            equalsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "EqualsWorks()",
                    line: "216"
                } ));
                t.getFixture().equalsWorks();
            },
            iEquatableEqualsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IEquatableEqualsWorks()",
                    line: "225"
                } ));
                t.getFixture().iEquatableEqualsWorks();
            },
            compareToWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CompareToWorks()",
                    line: "239"
                } ));
                t.getFixture().compareToWorks();
            },
            iComparableCompareToWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_SimpleTypes_UInt64Tests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IComparableCompareToWorks()",
                    line: "247"
                } ));
                t.getFixture().iComparableCompareToWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.SimpleTypes.UInt64Tests",
                    file: "Batch4\\SimpleTypes\\UInt64Tests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_StopwatchTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.StopwatchTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.StopwatchTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_StopwatchTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "10"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.StopwatchTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_StopwatchTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "21"
                } ));
                t.getFixture().defaultConstructorWorks();
            },
            constantsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.StopwatchTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_StopwatchTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstantsWorks()",
                    line: "29"
                } ));
                t.getFixture().constantsWorks();
            },
            startNewWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.StopwatchTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_StopwatchTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "StartNewWorks()",
                    line: "36"
                } ));
                t.getFixture().startNewWorks();
            },
            startAndStopWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.StopwatchTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_StopwatchTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "StartAndStopWork()",
                    line: "44"
                } ));
                t.getFixture().startAndStopWork();
            },
            elapsedWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.StopwatchTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_StopwatchTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ElapsedWorks()",
                    line: "55"
                } ));
                t.getFixture().elapsedWorks();
            },
            getTimestampWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.StopwatchTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_StopwatchTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GetTimestampWorks()",
                    line: "80"
                } ));
                t.getFixture().getTimestampWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.StopwatchTests",
                    file: "Batch4\\StopwatchTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_RegularExpressions_RegexTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Text.RegularExpressions.RegexTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Text.RegularExpressions.RegexTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_RegularExpressions_RegexTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "9"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            stringOnlyConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Text.RegularExpressions.RegexTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_RegularExpressions_RegexTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "StringOnlyConstructorWorks()",
                    line: "18"
                } ));
                t.getFixture().stringOnlyConstructorWorks();
            },
            constructorWithFlagsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Text.RegularExpressions.RegexTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_RegularExpressions_RegexTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithFlagsWorks()",
                    line: "26"
                } ));
                t.getFixture().constructorWithFlagsWorks();
            },
            globalFlagWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Text.RegularExpressions.RegexTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_RegularExpressions_RegexTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GlobalFlagWorks()",
                    line: "34"
                } ));
                t.getFixture().globalFlagWorks();
            },
            ignoreCaseFlagWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Text.RegularExpressions.RegexTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_RegularExpressions_RegexTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IgnoreCaseFlagWorks()",
                    line: "41"
                } ));
                t.getFixture().ignoreCaseFlagWorks();
            },
            multilineFlagWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Text.RegularExpressions.RegexTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_RegularExpressions_RegexTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "MultilineFlagWorks()",
                    line: "48"
                } ));
                t.getFixture().multilineFlagWorks();
            },
            patternPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Text.RegularExpressions.RegexTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_RegularExpressions_RegexTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "PatternPropertyWorks()",
                    line: "55"
                } ));
                t.getFixture().patternPropertyWorks();
            },
            sourcePropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Text.RegularExpressions.RegexTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_RegularExpressions_RegexTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SourcePropertyWorks()",
                    line: "61"
                } ));
                t.getFixture().sourcePropertyWorks();
            },
            execWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Text.RegularExpressions.RegexTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_RegularExpressions_RegexTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ExecWorks()",
                    line: "67"
                } ));
                t.getFixture().execWorks();
            },
            lastIndexWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Text.RegularExpressions.RegexTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_RegularExpressions_RegexTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LastIndexWorks()",
                    line: "77"
                } ));
                t.getFixture().lastIndexWorks();
            },
            testWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Text.RegularExpressions.RegexTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_RegularExpressions_RegexTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TestWorks()",
                    line: "85"
                } ));
                t.getFixture().testWorks();
            },
            escapeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Text.RegularExpressions.RegexTests).beforeTest(false, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_RegularExpressions_RegexTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "EscapeWorks()",
                    line: "92"
                } ));
                Bridge.ClientTest.Batch4.Text.RegularExpressions.RegexTests.escapeWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Text.RegularExpressions.RegexTests",
                    file: "Batch4\\Text\\RegularExpressions\\RegexTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Text.StringBuilderTests)],
        statics: {
            typePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesAreCorrect()",
                    line: "17"
                } ));
                t.getFixture().typePropertiesAreCorrect();
            },
            defaultConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorWorks()",
                    line: "26"
                } ));
                t.getFixture().defaultConstructorWorks();
            },
            constructorWithCapacityWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithCapacityWorks()",
                    line: "34"
                } ));
                t.getFixture().constructorWithCapacityWorks();
            },
            initialTextConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "InitialTextConstructorWorks()",
                    line: "42"
                } ));
                t.getFixture().initialTextConstructorWorks();
            },
            initialTextConstructorWithCapacityWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "InitialTextConstructorWithCapacityWorks()",
                    line: "50"
                } ));
                t.getFixture().initialTextConstructorWithCapacityWorks();
            },
            appendBoolWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AppendBoolWorks()",
                    line: "68"
                } ));
                t.getFixture().appendBoolWorks();
            },
            appendCharWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AppendCharWorks()",
                    line: "77"
                } ));
                t.getFixture().appendCharWorks();
            },
            appendIntWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AppendIntWorks()",
                    line: "86"
                } ));
                t.getFixture().appendIntWorks();
            },
            appendDoubleWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AppendDoubleWorks()",
                    line: "95"
                } ));
                t.getFixture().appendDoubleWorks();
            },
            appendObjectWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AppendObjectWorks()",
                    line: "104"
                } ));
                t.getFixture().appendObjectWorks();
            },
            appendStringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AppendStringWorks()",
                    line: "113"
                } ));
                t.getFixture().appendStringWorks();
            },
            appendLineWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AppendLineWorks()",
                    line: "122"
                } ));
                t.getFixture().appendLineWorks();
            },
            appendLineBoolWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AppendLineBoolWorks()",
                    line: "131"
                } ));
                t.getFixture().appendLineBoolWorks();
            },
            appendLineCharWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AppendLineCharWorks()",
                    line: "140"
                } ));
                t.getFixture().appendLineCharWorks();
            },
            appendLineIntWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AppendLineIntWorks()",
                    line: "149"
                } ));
                t.getFixture().appendLineIntWorks();
            },
            appendLineDoubleWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AppendLineDoubleWorks()",
                    line: "158"
                } ));
                t.getFixture().appendLineDoubleWorks();
            },
            appendLineObjectWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AppendLineObjectWorks()",
                    line: "167"
                } ));
                t.getFixture().appendLineObjectWorks();
            },
            appendLineStringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AppendLineStringWorks()",
                    line: "176"
                } ));
                t.getFixture().appendLineStringWorks();
            },
            clearWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ClearWorks()",
                    line: "185"
                } ));
                t.getFixture().clearWorks();
            },
            toStringWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ToStringWorks()",
                    line: "194"
                } ));
                t.getFixture().toStringWorks();
            },
            lengthPropertyWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Text.StringBuilderTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Text_StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LengthPropertyWorks()",
                    line: "202"
                } ));
                t.getFixture().lengthPropertyWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Text.StringBuilderTests",
                    file: "Batch4\\Text\\StringBuilderTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_AsyncTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.AsyncTests)],
        statics: {
            asyncVoid: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.AsyncTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_AsyncTests, 3, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AsyncVoid()",
                    line: "11"
                } ));
                t.getFixture().asyncVoid();
            },
            asyncTask: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.AsyncTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_AsyncTests, 7, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AsyncTask()",
                    line: "42"
                } ));
                t.getFixture().asyncTask();
            },
            asyncTaskBodyThrowsException: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.AsyncTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_AsyncTests, 8, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AsyncTaskBodyThrowsException()",
                    line: "78"
                } ));
                t.getFixture().asyncTaskBodyThrowsException();
            },
            awaitTaskThatFaults: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.AsyncTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_AsyncTests, 8, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AwaitTaskThatFaults()",
                    line: "117"
                } ));
                t.getFixture().awaitTaskThatFaults();
            },
            aggregateExceptionsAreUnwrappedWhenAwaitingTask: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.AsyncTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_AsyncTests, 2, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AggregateExceptionsAreUnwrappedWhenAwaitingTask()",
                    line: "155"
                } ));
                t.getFixture().aggregateExceptionsAreUnwrappedWhenAwaitingTask();
            },
            asyncTaskThatReturnsValue: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.AsyncTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_AsyncTests, 8, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AsyncTaskThatReturnsValue()",
                    line: "191"
                } ));
                t.getFixture().asyncTaskThatReturnsValue();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Threading.AsyncTests",
                    file: "Batch4\\Threading\\Tasks\\AsyncTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests)],
        statics: {
            typePropertiesForCancellationTokenSourceAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesForCancellationTokenSourceAreCorrect()",
                    line: "14"
                } ));
                t.getFixture().typePropertiesForCancellationTokenSourceAreCorrect();
            },
            typePropertiesForCancellationTokenAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesForCancellationTokenAreCorrect()",
                    line: "23"
                } ));
                t.getFixture().typePropertiesForCancellationTokenAreCorrect();
            },
            typePropertiesForCancellationTokenRegistrationAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TypePropertiesForCancellationTokenRegistrationAreCorrect()",
                    line: "33"
                } ));
                t.getFixture().typePropertiesForCancellationTokenRegistrationAreCorrect();
            },
            cancellationTokenCreatedWithDefaultConstructorIsNotCanceledAndCannotBe: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CancellationTokenCreatedWithDefaultConstructorIsNotCanceledAndCannotBe()",
                    line: "44"
                } ));
                t.getFixture().cancellationTokenCreatedWithDefaultConstructorIsNotCanceledAndCannotBe();
            },
            cancellationTokenCreatedWithFalseArgumentToConstructorIsNotCanceledAndCannotBe: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CancellationTokenCreatedWithFalseArgumentToConstructorIsNotCanceledAndCannotBe()",
                    line: "53"
                } ));
                t.getFixture().cancellationTokenCreatedWithFalseArgumentToConstructorIsNotCanceledAndCannotBe();
            },
            cancellationTokenCreatedWithTrueArgumentToConstructorIsCanceled: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CancellationTokenCreatedWithTrueArgumentToConstructorIsCanceled()",
                    line: "62"
                } ));
                t.getFixture().cancellationTokenCreatedWithTrueArgumentToConstructorIsCanceled();
            },
            cancellationTokenNoneIsNotCancelledAndCannotBe: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CancellationTokenNoneIsNotCancelledAndCannotBe()",
                    line: "71"
                } ));
                t.getFixture().cancellationTokenNoneIsNotCancelledAndCannotBe();
            },
            creatingADefaultCancellationTokenReturnsACancellationTokenThatIsNotCancelled: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreatingADefaultCancellationTokenReturnsACancellationTokenThatIsNotCancelled()",
                    line: "79"
                } ));
                t.getFixture().creatingADefaultCancellationTokenReturnsACancellationTokenThatIsNotCancelled();
            },
            activatorCreateForCancellationTokenReturnsACancellationTokenThatIsNotCancelled: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ActivatorCreateForCancellationTokenReturnsACancellationTokenThatIsNotCancelled()",
                    line: "88"
                } ));
                t.getFixture().activatorCreateForCancellationTokenReturnsACancellationTokenThatIsNotCancelled();
            },
            canBeCanceledIsTrueForTokenCreatedForCancellationTokenSource: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CanBeCanceledIsTrueForTokenCreatedForCancellationTokenSource()",
                    line: "97"
                } ));
                t.getFixture().canBeCanceledIsTrueForTokenCreatedForCancellationTokenSource();
            },
            isCancellationRequestedForTokenCreatedForCancellationTokenSourceIsSetByTheCancelMethod: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsCancellationRequestedForTokenCreatedForCancellationTokenSourceIsSetByTheCancelMethod()",
                    line: "104"
                } ));
                t.getFixture().isCancellationRequestedForTokenCreatedForCancellationTokenSourceIsSetByTheCancelMethod();
            },
            throwIfCancellationRequestedForTokenCreatedForCancellationTokenSourceThrowsAfterTheCancelMethodIsCalled: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ThrowIfCancellationRequestedForTokenCreatedForCancellationTokenSourceThrowsAfterTheCancelMethodIsCalled()",
                    line: "115"
                } ));
                t.getFixture().throwIfCancellationRequestedForTokenCreatedForCancellationTokenSourceThrowsAfterTheCancelMethodIsCalled();
            },
            cancelWithoutArgumentsWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CancelWithoutArgumentsWorks()",
                    line: "124"
                } ));
                t.getFixture().cancelWithoutArgumentsWorks();
            },
            cancelWorksWhenThrowOnFirstExceptionIsFalse: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CancelWorksWhenThrowOnFirstExceptionIsFalse()",
                    line: "169"
                } ));
                t.getFixture().cancelWorksWhenThrowOnFirstExceptionIsFalse();
            },
            cancelWorksWhenThrowOnFirstExceptionIsTrue: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CancelWorksWhenThrowOnFirstExceptionIsTrue()",
                    line: "215"
                } ));
                t.getFixture().cancelWorksWhenThrowOnFirstExceptionIsTrue();
            },
            registerOnACancelledSourceWithoutContextInvokesTheCallback: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RegisterOnACancelledSourceWithoutContextInvokesTheCallback()",
                    line: "259"
                } ));
                t.getFixture().registerOnACancelledSourceWithoutContextInvokesTheCallback();
            },
            registerWithArgumentOnACancelledSourceInvokesTheCallback: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RegisterWithArgumentOnACancelledSourceInvokesTheCallback()",
                    line: "269"
                } ));
                t.getFixture().registerWithArgumentOnACancelledSourceInvokesTheCallback();
            },
            registerOnACancelledSourceWithoutContextRethrowsAThrownException: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RegisterOnACancelledSourceWithoutContextRethrowsAThrownException()",
                    line: "284"
                } ));
                t.getFixture().registerOnACancelledSourceWithoutContextRethrowsAThrownException();
            },
            registerOnACancelledSourceWithContextRethrowsAThrownException: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RegisterOnACancelledSourceWithContextRethrowsAThrownException()",
                    line: "304"
                } ));
                t.getFixture().registerOnACancelledSourceWithContextRethrowsAThrownException();
            },
            registerOverloadsWithUseSynchronizationContextWork: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RegisterOverloadsWithUseSynchronizationContextWork()",
                    line: "326"
                } ));
                t.getFixture().registerOverloadsWithUseSynchronizationContextWork();
            },
            registerOnCancellationTokenCreatedNonCancelledDoesNothing: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RegisterOnCancellationTokenCreatedNonCancelledDoesNothing()",
                    line: "356"
                } ));
                t.getFixture().registerOnCancellationTokenCreatedNonCancelledDoesNothing();
            },
            registerOnCancellationTokenCreatedCancelledInvokesTheActionImmediately: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RegisterOnCancellationTokenCreatedCancelledInvokesTheActionImmediately()",
                    line: "367"
                } ));
                t.getFixture().registerOnCancellationTokenCreatedCancelledInvokesTheActionImmediately();
            },
            duplicateCancelDoesNotCauseCallbacksToBeCalledTwice: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DuplicateCancelDoesNotCauseCallbacksToBeCalledTwice()",
                    line: "384"
                } ));
                t.getFixture().duplicateCancelDoesNotCauseCallbacksToBeCalledTwice();
            },
            registrationsCanBeCompared: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RegistrationsCanBeCompared()",
                    line: "396"
                } ));
                t.getFixture().registrationsCanBeCompared();
            },
            registrationsCanBeUnregistered: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RegistrationsCanBeUnregistered()",
                    line: "418"
                } ));
                t.getFixture().registrationsCanBeUnregistered();
            },
            creatingADefaultCancellationTokenRegistrationReturnsARegistrationThatCanBeDisposedWithoutHarm: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CreatingADefaultCancellationTokenRegistrationReturnsARegistrationThatCanBeDisposedWithoutHarm()",
                    line: "446"
                } ));
                t.getFixture().creatingADefaultCancellationTokenRegistrationReturnsARegistrationThatCanBeDisposedWithoutHarm();
            },
            linkedSourceWithTwoTokensWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LinkedSourceWithTwoTokensWorks()",
                    line: "455"
                } ));
                t.getFixture().linkedSourceWithTwoTokensWorks();
            },
            linkedSourceWithThreeTokensWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.CancellationTokenTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "LinkedSourceWithThreeTokensWorks()",
                    line: "479"
                } ));
                t.getFixture().linkedSourceWithThreeTokensWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Threading.CancellationTokenTests",
                    file: "Batch4\\Threading\\CancellationTokenTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_PromiseTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.PromiseTests)],
        statics: {
            taskFromPromiseWithoutResultFactoryWorksWhenPromiseCompletes: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.PromiseTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_PromiseTests, 7, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TaskFromPromiseWithoutResultFactoryWorksWhenPromiseCompletes()",
                    line: "156"
                } ));
                t.getFixture().taskFromPromiseWithoutResultFactoryWorksWhenPromiseCompletes();
            },
            taskFromPromiseWithResultFactoryWorksWhenPromiseCompletes: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.PromiseTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_PromiseTests, 7, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TaskFromPromiseWithResultFactoryWorksWhenPromiseCompletes()",
                    line: "188"
                } ));
                t.getFixture().taskFromPromiseWithResultFactoryWorksWhenPromiseCompletes();
            },
            taskFromPromiseWorksWhenPromiseFails: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.PromiseTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_PromiseTests, 10, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TaskFromPromiseWorksWhenPromiseFails()",
                    line: "227"
                } ));
                t.getFixture().taskFromPromiseWorksWhenPromiseFails();
            },
            completingPromiseCanBeAwaited: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.PromiseTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_PromiseTests, 3, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CompletingPromiseCanBeAwaited()",
                    line: "262"
                } ));
                t.getFixture().completingPromiseCanBeAwaited();
            },
            failingPromiseCanBeAwaited: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.PromiseTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_PromiseTests, 4, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "FailingPromiseCanBeAwaited()",
                    line: "284"
                } ));
                t.getFixture().failingPromiseCanBeAwaited();
            },
            taskFromPromiseWithProgressWithoutResultFactoryWorksWhenPromiseProgressesAndCompletes: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.PromiseTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_PromiseTests, 9, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TaskFromPromiseWithProgressWithoutResultFactoryWorksWhenPromiseProgressesAndCompletes()",
                    line: "332"
                } ));
                t.getFixture().taskFromPromiseWithProgressWithoutResultFactoryWorksWhenPromiseProgressesAndCompletes();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Threading.PromiseTests",
                    file: "Batch4\\Threading\\Tasks\\PromiseTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests)],
        statics: {
            taskCompletionSourceTypePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 2, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TaskCompletionSourceTypePropertiesAreCorrect()",
                    line: "18"
                } ));
                t.getFixture().taskCompletionSourceTypePropertiesAreCorrect();
            },
            taskTypePropertiesAreCorrect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 5, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TaskTypePropertiesAreCorrect()",
                    line: "26"
                } ));
                t.getFixture().taskTypePropertiesAreCorrect();
            },
            taskCompletionSourceWorksWhenSettingResult: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 10, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TaskCompletionSourceWorksWhenSettingResult()",
                    line: "40"
                } ));
                t.getFixture().taskCompletionSourceWorksWhenSettingResult();
            },
            taskCompletionSourceWorksWhenSettingASingleException: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 12, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TaskCompletionSourceWorksWhenSettingASingleException()",
                    line: "77"
                } ));
                t.getFixture().taskCompletionSourceWorksWhenSettingASingleException();
            },
            taskCompletionSourceWorksWhenSettingTwoExceptions: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 14, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TaskCompletionSourceWorksWhenSettingTwoExceptions()",
                    line: "124"
                } ));
                t.getFixture().taskCompletionSourceWorksWhenSettingTwoExceptions();
            },
            taskCompletionSourceWorksWhenCancelling: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 10, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TaskCompletionSourceWorksWhenCancelling()",
                    line: "172"
                } ));
                t.getFixture().taskCompletionSourceWorksWhenCancelling();
            },
            cancelledTaskThrowsTaskCanceledExceptionWhenAwaited: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 2, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CancelledTaskThrowsTaskCanceledExceptionWhenAwaited()",
                    line: "214"
                } ));
                t.getFixture().cancelledTaskThrowsTaskCanceledExceptionWhenAwaited();
            },
            cancelledTaskThrowsAggregateExceptionWithTaskCanceledExceptionWhenResultIsAccessed: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 3, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CancelledTaskThrowsAggregateExceptionWithTaskCanceledExceptionWhenResultIsAccessed()",
                    line: "249"
                } ));
                t.getFixture().cancelledTaskThrowsAggregateExceptionWithTaskCanceledExceptionWhenResultIsAccessed();
            },
            setResultFailsWhenTheTaskIsCompleted: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 1, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetResultFailsWhenTheTaskIsCompleted()",
                    line: "270"
                } ));
                t.getFixture().setResultFailsWhenTheTaskIsCompleted();
            },
            setCanceledFailsWhenTheTaskIsCompleted: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 1, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetCanceledFailsWhenTheTaskIsCompleted()",
                    line: "278"
                } ));
                t.getFixture().setCanceledFailsWhenTheTaskIsCompleted();
            },
            setExceptionFailsWhenTheTaskIsCompleted: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 1, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "SetExceptionFailsWhenTheTaskIsCompleted()",
                    line: "286"
                } ));
                t.getFixture().setExceptionFailsWhenTheTaskIsCompleted();
            },
            completedTaskHasCorrectIsXProperties: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 3, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CompletedTaskHasCorrectIsXProperties()",
                    line: "295"
                } ));
                t.getFixture().completedTaskHasCorrectIsXProperties();
            },
            cancelledTaskHasCorrectIsXProperties: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 3, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CancelledTaskHasCorrectIsXProperties()",
                    line: "305"
                } ));
                t.getFixture().cancelledTaskHasCorrectIsXProperties();
            },
            faultedTaskHasCorrectIsXProperties: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 3, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "FaultedTaskHasCorrectIsXProperties()",
                    line: "315"
                } ));
                t.getFixture().faultedTaskHasCorrectIsXProperties();
            },
            trySetResultReturnsFalseWhenTheTaskIsCompleted: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 2, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TrySetResultReturnsFalseWhenTheTaskIsCompleted()",
                    line: "325"
                } ));
                t.getFixture().trySetResultReturnsFalseWhenTheTaskIsCompleted();
            },
            trySetCanceledReturnsFalseWhenTheTaskIsCompleted: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 2, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TrySetCanceledReturnsFalseWhenTheTaskIsCompleted()",
                    line: "333"
                } ));
                t.getFixture().trySetCanceledReturnsFalseWhenTheTaskIsCompleted();
            },
            trySetExceptionReturnsFalseWhenTheTaskIsCompleted: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 2, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "TrySetExceptionReturnsFalseWhenTheTaskIsCompleted()",
                    line: "341"
                } ));
                t.getFixture().trySetExceptionReturnsFalseWhenTheTaskIsCompleted();
            },
            continueWithForNonGenericTaskWorkWithNoResultAndNoException: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 10, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ContinueWithForNonGenericTaskWorkWithNoResultAndNoException()",
                    line: "350"
                } ));
                t.getFixture().continueWithForNonGenericTaskWorkWithNoResultAndNoException();
            },
            continueWithWhenCallbackThrowsAnException: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 6, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ContinueWithWhenCallbackThrowsAnException()",
                    line: "392"
                } ));
                t.getFixture().continueWithWhenCallbackThrowsAnException();
            },
            exceptionInTaskBodyAppearsInTheExceptionMemberForNonGenericTask: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 8, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ExceptionInTaskBodyAppearsInTheExceptionMemberForNonGenericTask()",
                    line: "430"
                } ));
                t.getFixture().exceptionInTaskBodyAppearsInTheExceptionMemberForNonGenericTask();
            },
            continueWithForNonGenericTaskCanReturnAValue: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 11, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ContinueWithForNonGenericTaskCanReturnAValue()",
                    line: "471"
                } ));
                t.getFixture().continueWithForNonGenericTaskCanReturnAValue();
            },
            continueWithWithNoReturnValueForGenericTaskWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 10, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ContinueWithWithNoReturnValueForGenericTaskWorks()",
                    line: "516"
                } ));
                t.getFixture().continueWithWithNoReturnValueForGenericTaskWorks();
            },
            continueWithForGenericTaskCanReturnAValue: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 11, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ContinueWithForGenericTaskCanReturnAValue()",
                    line: "558"
                } ));
                t.getFixture().continueWithForGenericTaskCanReturnAValue();
            },
            delayWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 6, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DelayWorks()",
                    line: "603"
                } ));
                t.getFixture().delayWorks();
            },
            fromResultWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 3, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "FromResultWorks()",
                    line: "636"
                } ));
                t.getFixture().fromResultWorks();
            },
            runWithoutResultWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 6, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RunWithoutResultWorks()",
                    line: "645"
                } ));
                t.getFixture().runWithoutResultWorks();
            },
            runWithResultWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 7, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RunWithResultWorks()",
                    line: "676"
                } ));
                t.getFixture().runWithResultWorks();
            },
            runWorksWhenBodyThrows: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 7, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "RunWorksWhenBodyThrows()",
                    line: "709"
                } ));
                t.getFixture().runWorksWhenBodyThrows();
            },
            whenAllParamArrayWithResultWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 13, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "WhenAllParamArrayWithResultWorks()",
                    line: "742"
                } ));
                t.getFixture().whenAllParamArrayWithResultWorks();
            },
            whenAllEnumerableWithResultWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 13, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "WhenAllEnumerableWithResultWorks()",
                    line: "799"
                } ));
                t.getFixture().whenAllEnumerableWithResultWorks();
            },
            whenAllParamArrayWithoutResultWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 12, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "WhenAllParamArrayWithoutResultWorks()",
                    line: "856"
                } ));
                t.getFixture().whenAllParamArrayWithoutResultWorks();
            },
            whenAllEnumerableWithoutResultWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 12, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "WhenAllEnumerableWithoutResultWorks()",
                    line: "912"
                } ));
                t.getFixture().whenAllEnumerableWithoutResultWorks();
            },
            whenAllShouldHaveAnErrorIfAnyIncludedTaskFaulted: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 17, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "WhenAllShouldHaveAnErrorIfAnyIncludedTaskFaulted()",
                    line: "968"
                } ));
                t.getFixture().whenAllShouldHaveAnErrorIfAnyIncludedTaskFaulted();
            },
            whenAllShouldBeCancelledIfNoTaskWasFaultedButSomeWasCancelled: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 12, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "WhenAllShouldBeCancelledIfNoTaskWasFaultedButSomeWasCancelled()",
                    line: "1038"
                } ));
                t.getFixture().whenAllShouldBeCancelledIfNoTaskWasFaultedButSomeWasCancelled();
            },
            whenAnyParamArrayWithResultWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 10, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "WhenAnyParamArrayWithResultWorks()",
                    line: "1093"
                } ));
                t.getFixture().whenAnyParamArrayWithResultWorks();
            },
            whenAnyEnumerableWithResultWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 10, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "WhenAnyEnumerableWithResultWorks()",
                    line: "1141"
                } ));
                t.getFixture().whenAnyEnumerableWithResultWorks();
            },
            whenAnyParamArrayWithoutResultWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 9, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "WhenAnyParamArrayWithoutResultWorks()",
                    line: "1188"
                } ));
                t.getFixture().whenAnyParamArrayWithoutResultWorks();
            },
            whenAnyEnumerableWithoutResultWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 9, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "WhenAnyEnumerableWithoutResultWorks()",
                    line: "1235"
                } ));
                t.getFixture().whenAnyEnumerableWithoutResultWorks();
            },
            whenAnyFaultsIfTheFirstTaskFaulted: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 9, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "WhenAnyFaultsIfTheFirstTaskFaulted()",
                    line: "1282"
                } ));
                t.getFixture().whenAnyFaultsIfTheFirstTaskFaulted();
            },
            whenAnyIsCancelledIfTheFirstTaskWasCancelled: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 8, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "WhenAnyIsCancelledIfTheFirstTaskWasCancelled()",
                    line: "1330"
                } ));
                t.getFixture().whenAnyIsCancelledIfTheFirstTaskWasCancelled();
            },
            constructorWithOnlyActionWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 7, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithOnlyActionWorks()",
                    line: "1375"
                } ));
                t.getFixture().constructorWithOnlyActionWorks();
            },
            constructorWithActionAndStateWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 8, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithActionAndStateWorks()",
                    line: "1414"
                } ));
                t.getFixture().constructorWithActionAndStateWorks();
            },
            exceptionInManuallyCreatedTaskIsStoredOnTheTask: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 8, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ExceptionInManuallyCreatedTaskIsStoredOnTheTask()",
                    line: "1456"
                } ));
                t.getFixture().exceptionInManuallyCreatedTaskIsStoredOnTheTask();
            },
            constructorWithOnlyFunctionWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 8, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithOnlyFunctionWorks()",
                    line: "1498"
                } ));
                t.getFixture().constructorWithOnlyFunctionWorks();
            },
            constructorWithFunctionAndStateWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.Threading.TaskTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_Threading_TaskTests, 9, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ConstructorWithFunctionAndStateWorks()",
                    line: "1540"
                } ));
                t.getFixture().constructorWithFunctionAndStateWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.Threading.TaskTests",
                    file: "Batch4\\Threading\\Tasks\\TaskTests.cs"
                } );
            }
            return this.context;
        }
    });

    Bridge.define("Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests", {
        inherits: [Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.UserDefinedStructTests)],
        statics: {
            isClassIsFalse: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.UserDefinedStructTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "IsClassIsFalse()",
                    line: "187"
                } ));
                t.getFixture().isClassIsFalse();
            },
            userDefinedStructCanBeUsed: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.UserDefinedStructTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "UserDefinedStructCanBeUsed()",
                    line: "194"
                } ));
                t.getFixture().userDefinedStructCanBeUsed();
            },
            defaultConstructorOfStructReturnsInstanceWithAllMembersInitialized: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.UserDefinedStructTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorOfStructReturnsInstanceWithAllMembersInitialized()",
                    line: "201"
                } ));
                t.getFixture().defaultConstructorOfStructReturnsInstanceWithAllMembersInitialized();
            },
            defaultConstructorOfStructReturnsInstanceWithAllMembersInitializedGeneric: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.UserDefinedStructTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorOfStructReturnsInstanceWithAllMembersInitializedGeneric()",
                    line: "212"
                } ));
                t.getFixture().defaultConstructorOfStructReturnsInstanceWithAllMembersInitializedGeneric();
            },
            defaultValueOfStructIsInstanceWithAllMembersInitialized: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.UserDefinedStructTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultValueOfStructIsInstanceWithAllMembersInitialized()",
                    line: "223"
                } ));
                t.getFixture().defaultValueOfStructIsInstanceWithAllMembersInitialized();
            },
            defaultValueOfStructIsInstanceWithAllMembersInitializedGeneric: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.UserDefinedStructTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultValueOfStructIsInstanceWithAllMembersInitializedGeneric()",
                    line: "234"
                } ));
                t.getFixture().defaultValueOfStructIsInstanceWithAllMembersInitializedGeneric();
            },
            defaultValueOfStructIsInstanceWithAllMembersInitializedIndirect: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.UserDefinedStructTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultValueOfStructIsInstanceWithAllMembersInitializedIndirect()",
                    line: "245"
                } ));
                t.getFixture().defaultValueOfStructIsInstanceWithAllMembersInitializedIndirect();
            },
            defaultValueOfStructIsInstanceWithAllMembersInitializedIndirectGeneric: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.UserDefinedStructTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultValueOfStructIsInstanceWithAllMembersInitializedIndirectGeneric()",
                    line: "256"
                } ));
                t.getFixture().defaultValueOfStructIsInstanceWithAllMembersInitializedIndirectGeneric();
            },
            defaultValueOfStructWithInlineCodeDefaultConstructorWorks_SPI_1610: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.UserDefinedStructTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultValueOfStructWithInlineCodeDefaultConstructorWorks_SPI_1610()",
                    line: "267"
                } ));
                t.getFixture().defaultValueOfStructWithInlineCodeDefaultConstructorWorks_SPI_1610();
            },
            defaultValueOfStructWithInlineCodeDefaultConstructorWorksGeneric_SPI_1610: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.UserDefinedStructTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultValueOfStructWithInlineCodeDefaultConstructorWorksGeneric_SPI_1610()",
                    line: "277"
                } ));
                t.getFixture().defaultValueOfStructWithInlineCodeDefaultConstructorWorksGeneric_SPI_1610();
            },
            defaultConstructorOfStructWithInlineCodeDefaultConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.UserDefinedStructTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorOfStructWithInlineCodeDefaultConstructorWorks()",
                    line: "287"
                } ));
                t.getFixture().defaultConstructorOfStructWithInlineCodeDefaultConstructorWorks();
            },
            defaultConstructorOfStructWithInlineCodeDefaultConstructorWorksGeneric: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.UserDefinedStructTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultConstructorOfStructWithInlineCodeDefaultConstructorWorksGeneric()",
                    line: "294"
                } ));
                t.getFixture().defaultConstructorOfStructWithInlineCodeDefaultConstructorWorksGeneric();
            },
            defaultGetHashCodeGeneratesHashCodeBasedOnAllInstanceFields: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.UserDefinedStructTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultGetHashCodeGeneratesHashCodeBasedOnAllInstanceFields()",
                    line: "301"
                } ));
                t.getFixture().defaultGetHashCodeGeneratesHashCodeBasedOnAllInstanceFields();
            },
            defaultEqualsUsesValueEqualityForAllMembers: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.UserDefinedStructTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "DefaultEqualsUsesValueEqualityForAllMembers()",
                    line: "315"
                } ));
                t.getFixture().defaultEqualsUsesValueEqualityForAllMembers();
            },
            canOverrideGetHashCode: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.UserDefinedStructTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CanOverrideGetHashCode()",
                    line: "327"
                } ));
                t.getFixture().canOverrideGetHashCode();
            },
            canOverrideEquals: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.UserDefinedStructTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CanOverrideEquals()",
                    line: "334"
                } ));
                t.getFixture().canOverrideEquals();
            },
            canLiftUserDefinedBinaryOperator: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.UserDefinedStructTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CanLiftUserDefinedBinaryOperator()",
                    line: "344"
                } ));
                t.getFixture().canLiftUserDefinedBinaryOperator();
            },
            canLiftUserDefinedUnaryOperator_SPI_1634: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.UserDefinedStructTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CanLiftUserDefinedUnaryOperator_SPI_1634()",
                    line: "352"
                } ));
                t.getFixture().canLiftUserDefinedUnaryOperator_SPI_1634();
            },
            canLiftUserDefinedConversionOperator_SPI_1611: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.UserDefinedStructTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CanLiftUserDefinedConversionOperator_SPI_1611()",
                    line: "361"
                } ));
                t.getFixture().canLiftUserDefinedConversionOperator_SPI_1611();
            },
            clonedValueTypeIsCorrectType: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.UserDefinedStructTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "ClonedValueTypeIsCorrectType()",
                    line: "374"
                } ));
                t.getFixture().clonedValueTypeIsCorrectType();
            },
            fieldsAreClonedWhenValueTypeIsCopied: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.UserDefinedStructTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "FieldsAreClonedWhenValueTypeIsCopied()",
                    line: "385"
                } ));
                t.getFixture().fieldsAreClonedWhenValueTypeIsCopied();
            },
            autoPropertyBackingFieldsAreClonedWhenValueTypeIsCopied: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.UserDefinedStructTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AutoPropertyBackingFieldsAreClonedWhenValueTypeIsCopied()",
                    line: "399"
                } ));
                t.getFixture().autoPropertyBackingFieldsAreClonedWhenValueTypeIsCopied();
            },
            propertiesWithFieldImplementationAreClonedWhenValueTypeIsCopied: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.UserDefinedStructTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "PropertiesWithFieldImplementationAreClonedWhenValueTypeIsCopied()",
                    line: "413"
                } ));
                t.getFixture().propertiesWithFieldImplementationAreClonedWhenValueTypeIsCopied();
            },
            autoEventBackingFieldsAreClonedWhenValueTypeIsCopied_SPI_1612: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.UserDefinedStructTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "AutoEventBackingFieldsAreClonedWhenValueTypeIsCopied_SPI_1612()",
                    line: "427"
                } ));
                t.getFixture().autoEventBackingFieldsAreClonedWhenValueTypeIsCopied_SPI_1612();
            },
            nestedStructsAreClonedWhenValueTypeIsCopied_SPI_1613: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.UserDefinedStructTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "NestedStructsAreClonedWhenValueTypeIsCopied_SPI_1613()",
                    line: "445"
                } ));
                t.getFixture().nestedStructsAreClonedWhenValueTypeIsCopied_SPI_1613();
            },
            genericMutableValueTypeWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.UserDefinedStructTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "GenericMutableValueTypeWorks()",
                    line: "464"
                } ));
                t.getFixture().genericMutableValueTypeWorks();
            },
            cloningValueTypeWithNamedDefaultConstructorWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.UserDefinedStructTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CloningValueTypeWithNamedDefaultConstructorWorks()",
                    line: "479"
                } ));
                t.getFixture().cloningValueTypeWithNamedDefaultConstructorWorks();
            },
            cloningNullableValueTypesWorks: function (assert) {
                var t = Bridge.Test.QUnit.TestFixture$1(Bridge.ClientTest.Batch4.UserDefinedStructTests).beforeTest(true, assert, Bridge.Test.QUnit.Bridge_ClientTest_Batch4_Tests_Runner.Bridge_ClientTest_Batch4_UserDefinedStructTests, void 0, Bridge.merge(new Bridge.Test.QUnit.TestContext(), {
                    method: "CloningNullableValueTypesWorks()",
                    line: "492"
                } ));
                t.getFixture().cloningNullableValueTypesWorks();
            }
        },
        context: null,
        getContext: function () {
            if (this.context == null) {
                this.context = Bridge.merge(new Bridge.Test.QUnit.FixtureContext(), {
                    project: "Batch4",
                    className: "Bridge.ClientTest.Batch4.UserDefinedStructTests",
                    file: "Batch4\\UserDefinedStructTests.cs"
                } );
            }
            return this.context;
        }
    });

    var $m = Bridge.setMetadata,
        $n = [System,Bridge.ClientTest.Batch4,Bridge.ClientTest.Batch4.Reflection];
    $m($n[1].DelegateTests, function () { return {"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":1,"n":"<CreatingAndInvokingADelegateWorks>b__5_0","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"<CreatingAndInvokingADelegateWorks>b__5_0","rt":$n[0].Int32,"p":[$n[0].Int32]},{"a":1,"n":"A","t":8,"sn":"a","rt":Object},{"a":2,"n":"AddAssignWorks","t":8,"sn":"addAssignWorks","rt":Object},{"a":1,"n":"AddForCreateWorks","t":8,"pi":[{"n":"x","pt":$n[0].Int32,"ps":0}],"sn":"addForCreateWorks","rt":$n[0].Int32,"p":[$n[0].Int32]},{"a":2,"n":"AddWorks","t":8,"sn":"addWorks","rt":Object},{"a":2,"n":"Call","t":8,"pi":[{"n":"t","pt":Object,"ps":0},{"n":"d","pt":Function,"ps":1},{"n":"args","ip":true,"pt":Array,"ps":2}],"tpc":0,"def":function (t, d, args) { return d.apply(t, args); },"rt":Object,"p":[Object,Function,Array]},{"a":2,"n":"CloneWorks_SPI_1563","t":8,"sn":"cloneWorks_SPI_1563","rt":Object},{"a":2,"n":"CloningDelegateToADifferentTypeIsANoOp","t":8,"sn":"cloningDelegateToADifferentTypeIsANoOp","rt":Object},{"a":2,"n":"CloningDelegateToTheSameTypeCreatesANewClone_SPI_1563","t":8,"sn":"cloningDelegateToTheSameTypeCreatesANewClone_SPI_1563","rt":Object},{"a":2,"n":"CombineDoesAddsDuplicateDelegates","t":8,"sn":"combineDoesAddsDuplicateDelegates","rt":Object},{"a":2,"n":"CombineDoesNotAffectOriginal_SPI_1563","t":8,"sn":"combineDoesNotAffectOriginal_SPI_1563","rt":Object},{"a":2,"n":"CombineWorks","t":8,"sn":"combineWorks","rt":Object},{"a":2,"n":"CreateWorks","t":8,"sn":"createWorks","rt":Object},{"a":2,"n":"CreatingAndInvokingADelegateWorks","t":8,"sn":"creatingAndInvokingADelegateWorks","rt":Object},{"a":2,"n":"EqualityAndInequalityOperatorsAndEqualsMethod_SPI_1563","t":8,"sn":"equalityAndInequalityOperatorsAndEqualsMethod_SPI_1563","rt":Object},{"a":2,"n":"GetInvocationListWorksForImportedFunction_SPI_1563","t":8,"sn":"getInvocationListWorksForImportedFunction_SPI_1563","rt":Object},{"a":2,"n":"GetInvocationListWorksForMulticastDelegate","t":8,"sn":"getInvocationListWorksForMulticastDelegate","rt":Object},{"a":2,"n":"RemoveDoesNotAffectOriginal_SPI_1563","t":8,"sn":"removeDoesNotAffectOriginal_SPI_1563","rt":Object},{"a":2,"n":"RemoveWorks","t":8,"sn":"removeWorks","rt":Object},{"a":2,"n":"RemoveWorksWithMethodGroupConversion_SPI_1563","t":8,"sn":"removeWorksWithMethodGroupConversion_SPI_1563","rt":Object},{"a":2,"n":"SubtractAssignWorks","t":8,"sn":"subtractAssignWorks","rt":Object},{"a":2,"n":"SubtractWorks","t":8,"sn":"subtractWorks","rt":Object},{"a":2,"n":"SubtractingDelegateFromItselfReturnsNull","t":8,"sn":"subtractingDelegateFromItselfReturnsNull","rt":Object},{"a":2,"n":"TypePropertiesAreCorrect","t":8,"sn":"typePropertiesAreCorrect","rt":Object},{"a":1,"n":"testField","t":4,"rt":$n[0].Int32,"sn":"testField"}]}; });
    $m($n[2].ReflectionTests.C25, function () { return {"m":[{"a":2,"n":"B1","t":4,"rt":$n[0].Int32,"sn":"B1"},{"a":4,"n":"B2","t":4,"rt":$n[0].Int32,"sn":"B2"},{"a":3,"n":"B3","t":4,"rt":$n[0].Int32,"sn":"B3"},{"a":5,"n":"B4","t":4,"rt":$n[0].Int32,"sn":"B4"},{"a":1,"n":"B5","t":4,"rt":$n[0].Int32,"sn":"B5"},{"a":2,"n":"C1","t":4,"rt":$n[0].Int32,"sn":"C1"},{"a":4,"n":"C2","t":4,"rt":$n[0].Int32,"sn":"C2"},{"a":3,"n":"C3","t":4,"rt":$n[0].Int32,"sn":"C3"},{"a":5,"n":"C4","t":4,"rt":$n[0].Int32,"sn":"C4"},{"a":1,"n":"C5","t":4,"rt":$n[0].Int32,"sn":"C5"}]}; });
    $m($n[2].ReflectionTests.C26, function () { return {"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"A1","t":4,"rt":$n[0].Int32,"sn":"A1"},{"a":3,"n":"A3","t":4,"rt":$n[0].Int32,"sn":"A3"},{"a":5,"n":"A4","t":4,"rt":$n[0].Int32,"sn":"A4"},{"a":2,"n":"B1","t":4,"rt":$n[0].Int32,"sn":"B1"},{"a":4,"n":"B2","t":4,"rt":$n[0].Int32,"sn":"B2"},{"a":3,"n":"B3","t":4,"rt":$n[0].Int32,"sn":"B3"},{"a":5,"n":"B4","t":4,"rt":$n[0].Int32,"sn":"B4"},{"a":1,"n":"B5","t":4,"rt":$n[0].Int32,"sn":"B5"},{"a":2,"n":"C1","t":4,"rt":$n[0].Int32,"sn":"C1"},{"a":4,"n":"C2","t":4,"rt":$n[0].Int32,"sn":"C2"},{"a":3,"n":"C3","t":4,"rt":$n[0].Int32,"sn":"C3"},{"a":5,"n":"C4","t":4,"rt":$n[0].Int32,"sn":"C4"},{"a":1,"n":"C5","t":4,"rt":$n[0].Int32,"sn":"C5"}]}; });
    $m($n[2].ReflectionTests.C27, function () { return {"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"A1","t":4,"rt":$n[0].Int32,"sn":"A1"},{"a":4,"n":"A2","t":4,"rt":$n[0].Int32,"sn":"A2"},{"a":3,"n":"A3","t":4,"rt":$n[0].Int32,"sn":"A3"},{"a":5,"n":"A4","t":4,"rt":$n[0].Int32,"sn":"A4"},{"a":2,"n":"B1","t":4,"rt":$n[0].Int32,"sn":"B1"},{"a":4,"n":"B2","t":4,"rt":$n[0].Int32,"sn":"B2"},{"a":3,"n":"B3","t":4,"rt":$n[0].Int32,"sn":"B3"},{"a":5,"n":"B4","t":4,"rt":$n[0].Int32,"sn":"B4"},{"a":1,"n":"B5","t":4,"rt":$n[0].Int32,"sn":"B5"},{"a":2,"n":"C1","t":4,"rt":$n[0].Int32,"sn":"C1"},{"a":4,"n":"C2","t":4,"rt":$n[0].Int32,"sn":"C2"},{"a":3,"n":"C3","t":4,"rt":$n[0].Int32,"sn":"C3"},{"a":5,"n":"C4","t":4,"rt":$n[0].Int32,"sn":"C4"},{"a":1,"n":"C5","t":4,"rt":$n[0].Int32,"sn":"C5"}]}; });
    $m($n[2].ReflectionTests.C28, function () { return {"m":[{"a":2,"n":".ctor","t":1,"sn":"ctor"},{"a":2,"n":"A1","t":4,"rt":$n[0].Int32,"sn":"A1"},{"a":4,"n":"A2","t":4,"rt":$n[0].Int32,"sn":"A2"},{"a":3,"n":"A3","t":4,"rt":$n[0].Int32,"sn":"A3"},{"a":5,"n":"A4","t":4,"rt":$n[0].Int32,"sn":"A4"},{"a":1,"n":"A5","t":4,"rt":$n[0].Int32,"sn":"A5"},{"a":2,"n":"B1","t":4,"rt":$n[0].Int32,"sn":"B1"},{"a":4,"n":"B2","t":4,"rt":$n[0].Int32,"sn":"B2"},{"a":3,"n":"B3","t":4,"rt":$n[0].Int32,"sn":"B3"},{"a":5,"n":"B4","t":4,"rt":$n[0].Int32,"sn":"B4"},{"a":1,"n":"B5","t":4,"rt":$n[0].Int32,"sn":"B5"},{"a":2,"n":"C1","t":4,"rt":$n[0].Int32,"sn":"C1"},{"a":4,"n":"C2","t":4,"rt":$n[0].Int32,"sn":"C2"},{"a":3,"n":"C3","t":4,"rt":$n[0].Int32,"sn":"C3"},{"a":5,"n":"C4","t":4,"rt":$n[0].Int32,"sn":"C4"},{"a":1,"n":"C5","t":4,"rt":$n[0].Int32,"sn":"C5"}]}; });
});

/**
 * @compiler Bridge.NET 16.0.0
 */
Bridge.assembly("Bridge.Test.Bridge.ClientTest", function ($asm, globals) {
    

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner", {
        Main: function () {
            Bridge.Test.Runtime.ContextHelper.Init();
            QUnit.module("[ObjectLiteral]");
            QUnit.test("Methods and properties - TestObjectLiteral", Bridge.Test.Runtime.BridgeClientTestRunner.Bridge1529.TestObjectLiteral);
            QUnit.test("CreateAndInitializationModes - Test", Bridge.Test.Runtime.BridgeClientTestRunner.CreateAndInitializationModesTests.Test);
            QUnit.test("ObjectCreateMode - Test", Bridge.Test.Runtime.BridgeClientTestRunner.CreateModeTests.Test);
            QUnit.test("ObjectInitializationMode - Test", Bridge.Test.Runtime.BridgeClientTestRunner.InitializationModeTests.Test);
            QUnit.module("BitConverter");
            QUnit.test("BitConverter - ValueArgumentNull", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.ValueArgumentNull);
            QUnit.test("BitConverter - StartIndexBeyondLength", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.StartIndexBeyondLength);
            QUnit.test("BitConverter - StartIndexPlusNeededLengthTooLong", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.StartIndexPlusNeededLengthTooLong);
            QUnit.test("BitConverter - RoundtripDoubleToInt64Bits", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.RoundtripDoubleToInt64Bits);
            QUnit.test("BitConverter - Int64BitsToDouble", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.Int64BitsToDouble);
            QUnit.test("BitConverter - DoubleToInt64Bits", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.DoubleToInt64Bits);
            QUnit.test("BitConverter - RoundtripBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.RoundtripBoolean);
            QUnit.test("BitConverter - RoundtripChar", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.RoundtripChar);
            QUnit.test("BitConverter - RoundtripDouble", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.RoundtripDouble);
            QUnit.test("BitConverter - RoundtripSingle", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.RoundtripSingle);
            QUnit.test("BitConverter - RoundtripInt16", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.RoundtripInt16);
            QUnit.test("BitConverter - RoundtripInt32", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.RoundtripInt32);
            QUnit.test("BitConverter - RoundtripInt64", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.RoundtripInt64);
            QUnit.test("BitConverter - RoundtripUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.RoundtripUInt16);
            QUnit.test("BitConverter - RoundtripUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.RoundtripUInt32);
            QUnit.test("BitConverter - RoundtripUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.RoundtripUInt64);
            QUnit.test("BitConverter - RoundtripString", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.RoundtripString);
            QUnit.test("BitConverter - ToString_ByteArray_Long", Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests.ToString_ByteArray_Long);
            QUnit.module("Bridge Console");
            QUnit.test("TestLogMessageObject", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeConsoleTests.TestLogMessageObject);
            QUnit.test("TestLogMessageString", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeConsoleTests.TestLogMessageString);
            QUnit.test("TestDebugMessageString", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeConsoleTests.TestDebugMessageString);
            QUnit.test("TestErrorMessageString", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeConsoleTests.TestErrorMessageString);
            QUnit.test("TestToggling", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeConsoleTests.TestToggling);
            QUnit.module("C#");
            QUnit.test("Abstract types - TestB", Bridge.Test.Runtime.BridgeClientTestRunner.TestAbstractClass.TestB);
            QUnit.test("Abstract types - TestC", Bridge.Test.Runtime.BridgeClientTestRunner.TestAbstractClass.TestC);
            QUnit.test("Abstract types - TestBC", Bridge.Test.Runtime.BridgeClientTestRunner.TestAbstractClass.TestBC);
            QUnit.test("Enum - TestParse", Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum.TestParse);
            QUnit.test("Enum - TestParseIgnoreCase", Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum.TestParseIgnoreCase);
            QUnit.test("Enum - TestToString", Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum.TestToString);
            QUnit.test("Enum - TestGetValues", Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum.TestGetValues);
            QUnit.test("Enum - TestCompareTo", Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum.TestCompareTo);
            QUnit.test("Enum - TestFormat", Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum.TestFormat);
            QUnit.test("Enum - TestGetName", Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum.TestGetName);
            QUnit.test("Enum - TestGetNames", Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum.TestGetNames);
            QUnit.test("Enum - TestHasFlag", Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum.TestHasFlag);
            QUnit.test("Enum - TestIsDefined", Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum.TestIsDefined);
            QUnit.test("Enum - TestTryParse", Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum.TestTryParse);
            QUnit.test("Goto - TestGotoCase", Bridge.Test.Runtime.BridgeClientTestRunner.TestGoto.TestGotoCase);
            QUnit.test("Goto - TestGotoLabel", Bridge.Test.Runtime.BridgeClientTestRunner.TestGoto.TestGotoLabel);
            QUnit.test("Static overloads - TestA", Bridge.Test.Runtime.BridgeClientTestRunner.TestInheritance.TestA);
            QUnit.test("Static overloads - TestB", Bridge.Test.Runtime.BridgeClientTestRunner.TestInheritance.TestB);
            QUnit.test("Static overloads - TestAB", Bridge.Test.Runtime.BridgeClientTestRunner.TestInheritance.TestAB);
            QUnit.test("Interfaces - TestInterfaceMethodAndProperty", Bridge.Test.Runtime.BridgeClientTestRunner.TestInterfaces.TestInterfaceMethodAndProperty);
            QUnit.test("Interfaces - TestExplicitInterfaceMethodAndProperty", Bridge.Test.Runtime.BridgeClientTestRunner.TestInterfaces.TestExplicitInterfaceMethodAndProperty);
            QUnit.test("Interfaces - TestTwoInterfaces", Bridge.Test.Runtime.BridgeClientTestRunner.TestInterfaces.TestTwoInterfaces);
            QUnit.test("Method parameters - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestMethodParametersClass.Test);
            QUnit.test("Instance overloads - TestInstance", Bridge.Test.Runtime.BridgeClientTestRunner.TestOverloadInstanceMethods.TestInstance);
            QUnit.test("Static overloads - TestStatic", Bridge.Test.Runtime.BridgeClientTestRunner.TestOverloadStaticMethods.TestStatic);
            QUnit.test("Reference types - TestInstanceConstructorsAndMethods", Bridge.Test.Runtime.BridgeClientTestRunner.TestReferenceTypes.TestInstanceConstructorsAndMethods);
            QUnit.test("Reference types - TestStaticConstructorsAndMethods", Bridge.Test.Runtime.BridgeClientTestRunner.TestReferenceTypes.TestStaticConstructorsAndMethods);
            QUnit.test("Reference types - TestMethodParameters", Bridge.Test.Runtime.BridgeClientTestRunner.TestReferenceTypes.TestMethodParameters);
            QUnit.test("Try/Catch - SimpleTryCatch", Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchBlocks.SimpleTryCatch);
            QUnit.test("Try/Catch - CaughtExceptions", Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchBlocks.CaughtExceptions);
            QUnit.test("Try/Catch - ThrownExceptions", Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchBlocks.ThrownExceptions);
            QUnit.test("Try/Catch - Bridge320", Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchBlocks.Bridge320);
            QUnit.test("Try/Catch - Bridge343", Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchBlocks.Bridge343);
            QUnit.test("Try/Catch/Finally - SimpleTryCatchFinally", Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchFinallyBlocks.SimpleTryCatchFinally);
            QUnit.test("Try/Catch/Finally - CaughtExceptions", Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchFinallyBlocks.CaughtExceptions);
            QUnit.test("Try/Catch/Finally - ThrownExceptions", Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchFinallyBlocks.ThrownExceptions);
            QUnit.test("Value types - TestInstanceConstructorsAndMethods", Bridge.Test.Runtime.BridgeClientTestRunner.TestValueTypes.TestInstanceConstructorsAndMethods);
            QUnit.test("Value types - TestStaticConstructorsAndMethods", Bridge.Test.Runtime.BridgeClientTestRunner.TestValueTypes.TestStaticConstructorsAndMethods);
            QUnit.test("Virtual methods - TestB", Bridge.Test.Runtime.BridgeClientTestRunner.TestVirtualMethods.TestB);
            QUnit.test("Auto properties - TestBasic", Bridge.Test.Runtime.BridgeClientTestRunner.TestAutoProps.TestBasic);
            QUnit.test("Await in catch and finally - TestBasic", Bridge.Test.Runtime.BridgeClientTestRunner.TestAwaitInCatchFinally.TestBasic);
            QUnit.test("ConditionAccess - TestBasic", Bridge.Test.Runtime.BridgeClientTestRunner.TestConditionAccess.TestBasic);
            QUnit.test("Exception filter - TestFalseFilter", Bridge.Test.Runtime.BridgeClientTestRunner.TestExceptionFilter.TestFalseFilter);
            QUnit.test("Exception filter - TestTrueFilter", Bridge.Test.Runtime.BridgeClientTestRunner.TestExceptionFilter.TestTrueFilter);
            QUnit.test("Exception filter - TestMultipleCatchClauses_2223", Bridge.Test.Runtime.BridgeClientTestRunner.TestExceptionFilter.TestMultipleCatchClauses_2223);
            QUnit.test("Exception filter - TestFailedFilter_2223", Bridge.Test.Runtime.BridgeClientTestRunner.TestExceptionFilter.TestFailedFilter_2223);
            QUnit.test("Exception filter - TestFailedFilter2_2223", Bridge.Test.Runtime.BridgeClientTestRunner.TestExceptionFilter.TestFailedFilter2_2223);
            QUnit.test("Expression-bodied function members - TestBasic", Bridge.Test.Runtime.BridgeClientTestRunner.TestExpressionBodyFunction.TestBasic);
            QUnit.test("Index initializer - TestBasic", Bridge.Test.Runtime.BridgeClientTestRunner.TestIndexInitializer.TestBasic);
            QUnit.test("Interpolated Strings - TestBasic", Bridge.Test.Runtime.BridgeClientTestRunner.TestInterpolatedStrings.TestBasic);
            QUnit.test("NameOf - TestBasic", Bridge.Test.Runtime.BridgeClientTestRunner.TestNameOf.TestBasic);
            QUnit.test("Using static - TestBasic", Bridge.Test.Runtime.BridgeClientTestRunner.TestUsingStatic.TestBasic);
            QUnit.module("Checked/Unckecked");
            QUnit.test("CheckedInsideUnchecked - TestInt32", Bridge.Test.Runtime.BridgeClientTestRunner.CheckedInsideUncheckedTests.TestInt32);
            QUnit.test("CheckedInsideUnchecked - TestUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.CheckedInsideUncheckedTests.TestUInt32);
            QUnit.test("CheckedInsideUnchecked - TestLong", Bridge.Test.Runtime.BridgeClientTestRunner.CheckedInsideUncheckedTests.TestLong);
            QUnit.test("CheckedInsideUnchecked - TestULong", Bridge.Test.Runtime.BridgeClientTestRunner.CheckedInsideUncheckedTests.TestULong);
            QUnit.test("Checked - TestInt32", Bridge.Test.Runtime.BridgeClientTestRunner.CheckedTests.TestInt32);
            QUnit.test("Checked - TestUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.CheckedTests.TestUInt32);
            QUnit.test("Checked - TestLong", Bridge.Test.Runtime.BridgeClientTestRunner.CheckedTests.TestLong);
            QUnit.test("Checked - TestULong", Bridge.Test.Runtime.BridgeClientTestRunner.CheckedTests.TestULong);
            QUnit.test("UncheckedInsideChecked - TestInt32", Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedInsideCheckedTests.TestInt32);
            QUnit.test("UncheckedInsideChecked - TestUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedInsideCheckedTests.TestUInt32);
            QUnit.test("UncheckedInsideChecked - TestLong", Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedInsideCheckedTests.TestLong);
            QUnit.test("UncheckedInsideChecked - TestULong", Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedInsideCheckedTests.TestULong);
            QUnit.test("Unchecked - TestInt32", Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedTests.TestInt32);
            QUnit.test("Unchecked - TestUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedTests.TestUInt32);
            QUnit.test("Unchecked - TestLong", Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedTests.TestLong);
            QUnit.test("Unchecked - TestULong", Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedTests.TestULong);
            QUnit.test("WithNoUncheckedKeyword - TestInt32", Bridge.Test.Runtime.BridgeClientTestRunner.WithNoUncheckedKeywordTests.TestInt32);
            QUnit.test("WithNoUncheckedKeyword - TestUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.WithNoUncheckedKeywordTests.TestUInt32);
            QUnit.test("WithNoUncheckedKeyword - TestLong", Bridge.Test.Runtime.BridgeClientTestRunner.WithNoUncheckedKeywordTests.TestLong);
            QUnit.test("WithNoUncheckedKeyword - TestULong", Bridge.Test.Runtime.BridgeClientTestRunner.WithNoUncheckedKeywordTests.TestULong);
            QUnit.module("Collections");
            QUnit.test("Array - Set1 TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.TypePropertiesAreCorrect);
            QUnit.test("Array - Set1 CreateWithNegativeLenghtShouldThrow", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.CreateWithNegativeLenghtShouldThrow);
            QUnit.test("Array - Set1 LengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.LengthWorks);
            QUnit.test("Array - Set1 RankIsOne", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.RankIsOne);
            QUnit.test("Array - Set1 GetLengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.GetLengthWorks);
            QUnit.test("Array - Set1 GetLowerBound", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.GetLowerBound);
            QUnit.test("Array - Set1 GetUpperBoundWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.GetUpperBoundWorks);
            QUnit.test("Array - Set1 GettingValueByIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.GettingValueByIndexWorks);
            QUnit.test("Array - Set1 GetValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.GetValueWorks);
            QUnit.test("Array - Set1 SettingValueByIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.SettingValueByIndexWorks);
            QUnit.test("Array - Set1 SetValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.SetValueWorks);
            QUnit.test("Array - Set1 ForeachWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ForeachWorks);
            QUnit.test("Array - Set1 CloneWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.CloneWorks);
            QUnit.test("Array - Set1 ConcatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ConcatWorks);
            QUnit.test("Array - Set1 ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ContainsWorks);
            QUnit.test("Array - Set1 CopyToSameBoundWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.CopyToSameBoundWorks);
            QUnit.test("Array - Set1 CopyToOffsetBoundWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.CopyToOffsetBoundWorks);
            QUnit.test("Array - Set1 CopyToIllegalBoundWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.CopyToIllegalBoundWorks);
            QUnit.test("Array - Set1 ContainsUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ContainsUsesEqualsMethod);
            QUnit.test("Array - Set1 AllWithArrayItemFilterCallbackWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.AllWithArrayItemFilterCallbackWorks);
            QUnit.test("Array - Set1 SliceWithoutEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.SliceWithoutEndWorks);
            QUnit.test("Array - Set1 ForeachWithArrayItemCallbackWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ForeachWithArrayItemCallbackWorks);
            QUnit.test("Array - Set1 ForeachWithArrayCallbackWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ForeachWithArrayCallbackWorks);
            QUnit.test("Array - Set1 IndexOfWithoutStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.IndexOfWithoutStartIndexWorks);
            QUnit.test("Array - Set1 IndexOfWithoutStartIndexUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.IndexOfWithoutStartIndexUsesEqualsMethod);
            QUnit.test("Array - Set1 IndexOfWithStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.IndexOfWithStartIndexWorks);
            QUnit.test("Array - Set1 JoinWithoutDelimiterWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.JoinWithoutDelimiterWorks);
            QUnit.test("Array - Set1 ReverseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ReverseWorks);
            QUnit.test("Array - Set1 AnyWithArrayItemFilterCallbackWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.AnyWithArrayItemFilterCallbackWorks);
            QUnit.test("Array - Set1 BinarySearch1Works", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.BinarySearch1Works);
            QUnit.test("Array - Set1 BinarySearch2Works", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.BinarySearch2Works);
            QUnit.test("Array - Set1 BinarySearch3Works", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.BinarySearch3Works);
            QUnit.test("Array - Set1 BinarySearch4Works", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.BinarySearch4Works);
            QUnit.test("Array - Set1 BinarySearchExceptionsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.BinarySearchExceptionsWorks);
            QUnit.test("Array - Set1 SortWithDefaultCompareWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.SortWithDefaultCompareWorks);
            QUnit.test("Array - Set1 Sort1Works", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.Sort1Works);
            QUnit.test("Array - Set1 Sort2Works", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.Sort2Works);
            QUnit.test("Array - Set1 Sort3Works", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.Sort3Works);
            QUnit.test("Array - Set1 Sort4Works", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.Sort4Works);
            QUnit.test("Array - Set1 SortExceptionsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.SortExceptionsWorks);
            QUnit.test("Array - Set1 ForeachWhenCastToIListWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ForeachWhenCastToIListWorks);
            QUnit.test("Array - Set1 ICollectionCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ICollectionCountWorks);
            QUnit.test("Array - Set1 ICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ICollectionIsReadOnlyWorks);
            QUnit.test("Array - Set1 ICollectionAddWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ICollectionAddWorks);
            QUnit.test("Array - Set1 ICollectionClearWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ICollectionClearWorks);
            QUnit.test("Array - Set1 ICollectionContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ICollectionContainsWorks);
            QUnit.test("Array - Set1 ICollectionContainsUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ICollectionContainsUsesEqualsMethod);
            QUnit.test("Array - Set1 ICollectionCopyToSameBoundWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ICollectionCopyToSameBoundWorks);
            QUnit.test("Array - Set1 ICollectionCopyToOffsetBoundWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ICollectionCopyToOffsetBoundWorks);
            QUnit.test("Array - Set1 ICollectionCopyToIllegalBoundWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ICollectionCopyToIllegalBoundWorks);
            QUnit.test("Array - Set1 ICollectionRemoveWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.ICollectionRemoveWorks);
            QUnit.test("Array - Set1 IListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.IListIsReadOnlyWorks);
            QUnit.test("Array - Set1 IListIndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.IListIndexingWorks);
            QUnit.test("Array - Set1 IListIndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.IListIndexOfWorks);
            QUnit.test("Array - Set1 IListIndexOfUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.IListIndexOfUsesEqualsMethod);
            QUnit.test("Array - Set1 IListInsertWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.IListInsertWorks);
            QUnit.test("Array - Set1 IListRemoveAtWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1.IListRemoveAtWorks);
            QUnit.test("Array - Set2 TestArrayAsIListOfT", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestArrayAsIListOfT);
            QUnit.test("Array - Set2 TestTrivials", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestTrivials);
            QUnit.test("Array - Set2 TestGetAndSetValue", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestGetAndSetValue);
            QUnit.test("Array - Set2 TestClear", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestClear);
            QUnit.test("Array - Set2 TestCopy_GCRef", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestCopy_GCRef);
            QUnit.test("Array - Set2 TestCopy_VTToObj", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestCopy_VTToObj);
            QUnit.test("Array - Set2 TestCopy_VTWithGCRef", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestCopy_VTWithGCRef);
            QUnit.test("Array - Set2 TestCopy_VTNoGCRef", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestCopy_VTNoGCRef);
            QUnit.test("Array - Set2 TestFind", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestFind);
            QUnit.test("Array - Set2 TestForEach", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestForEach);
            QUnit.test("Array - Set2 TestGetEnumerator", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestGetEnumerator);
            QUnit.test("Array - Set2 TestIndexOf", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestIndexOf);
            QUnit.test("Array - Set2 TestLastIndexOf", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestLastIndexOf);
            QUnit.test("Array - Set2 TestResize", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestResize);
            QUnit.test("Array - Set2 TestReverse", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestReverse);
            QUnit.test("Array - Set2 TestSort", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestSort);
            QUnit.test("Array - Set2 TestTrueForAll", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestTrueForAll);
            QUnit.test("Array - Set2 TestSetValueCasting", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestSetValueCasting);
            QUnit.test("Array - Set2 TestValueTypeToReferenceCopy", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestValueTypeToReferenceCopy);
            QUnit.test("Array - Set2 TestReferenceToValueTypeCopy", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestReferenceToValueTypeCopy);
            QUnit.test("Array - Set2 TestArrayConstructionMultidimArrays", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2.TestArrayConstructionMultidimArrays);
            QUnit.test("GenericDictionary - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.TypePropertiesAreCorrect);
            QUnit.test("GenericDictionary - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.DefaultConstructorWorks);
            QUnit.test("GenericDictionary - CapacityConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.CapacityConstructorWorks);
            QUnit.test("GenericDictionary - CapacityAndEqualityComparerWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.CapacityAndEqualityComparerWorks);
            QUnit.test("GenericDictionary - EqualityComparerOnlyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.EqualityComparerOnlyConstructorWorks);
            QUnit.test("GenericDictionary - CountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.CountWorks);
            QUnit.test("GenericDictionary - KeysWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.KeysWorks);
            QUnit.test("GenericDictionary - ValuesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.ValuesWorks);
            QUnit.test("GenericDictionary - IndexerGetterWorksForExistingItems", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.IndexerGetterWorksForExistingItems);
            QUnit.test("GenericDictionary - IndexerSetterWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.IndexerSetterWorks);
            QUnit.test("GenericDictionary - IndexerGetterThrowsForNonExistingItems", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.IndexerGetterThrowsForNonExistingItems);
            QUnit.test("GenericDictionary - AddWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.AddWorks);
            QUnit.test("GenericDictionary - AddThrowsIfItemAlreadyExists", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.AddThrowsIfItemAlreadyExists);
            QUnit.test("GenericDictionary - ClearWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.ClearWorks);
            QUnit.test("GenericDictionary - ContainsKeyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.ContainsKeyWorks);
            QUnit.test("GenericDictionary - EnumeratingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.EnumeratingWorks);
            QUnit.test("GenericDictionary - RemoveWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.RemoveWorks);
            QUnit.test("GenericDictionary - TryGetValueWithIntKeysWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.TryGetValueWithIntKeysWorks);
            QUnit.test("GenericDictionary - TryGetValueWithObjectKeysWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.TryGetValueWithObjectKeysWorks);
            QUnit.test("GenericDictionary - CanUseCustomComparer", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.CanUseCustomComparer);
            QUnit.test("GenericDictionary - DictionaryAsIEnumerableWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.DictionaryAsIEnumerableWorks);
            QUnit.test("GenericDictionary - DictionaryAsICollectionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.DictionaryAsICollectionWorks);
            QUnit.test("GenericDictionary - DictionaryAsIDictionaryWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.DictionaryAsIDictionaryWorks);
            QUnit.test("GenericDictionary - DictionaryAsIReadOnlyDictionaryWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.DictionaryAsIReadOnlyDictionaryWorks);
            QUnit.test("GenericDictionary - DictionaryAsIReadOnlyCollectionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests.DictionaryAsIReadOnlyCollectionWorks);
            QUnit.test("ICollection - ArrayImplementsICollection", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.ArrayImplementsICollection);
            QUnit.test("ICollection - CustomClassThatShouldImplementICollectionDoesSo", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.CustomClassThatShouldImplementICollectionDoesSo);
            QUnit.test("ICollection - ArrayCastToICollectionCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.ArrayCastToICollectionCountWorks);
            QUnit.test("ICollection - ClassImplementingICollectionCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.ClassImplementingICollectionCountWorks);
            QUnit.test("ICollection - ClassImplementingICollectionCastToICollectionCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.ClassImplementingICollectionCastToICollectionCountWorks);
            QUnit.test("ICollection - ArrayCastToICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.ArrayCastToICollectionIsReadOnlyWorks);
            QUnit.test("ICollection - ClassImplementingICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.ClassImplementingICollectionIsReadOnlyWorks);
            QUnit.test("ICollection - ClassImplementingICollectionCastToICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.ClassImplementingICollectionCastToICollectionIsReadOnlyWorks);
            QUnit.test("ICollection - ClassImplementingICollectionAddWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.ClassImplementingICollectionAddWorks);
            QUnit.test("ICollection - ClassImplementingICollectionCastToICollectionAddWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.ClassImplementingICollectionCastToICollectionAddWorks);
            QUnit.test("ICollection - ClassImplementingICollectionClearWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.ClassImplementingICollectionClearWorks);
            QUnit.test("ICollection - ClassImplementingICollectionCastToICollectionClearWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.ClassImplementingICollectionCastToICollectionClearWorks);
            QUnit.test("ICollection - ArrayCastToICollectionContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.ArrayCastToICollectionContainsWorks);
            QUnit.test("ICollection - ClassImplementingICollectionContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.ClassImplementingICollectionContainsWorks);
            QUnit.test("ICollection - ClassImplementingICollectionCastToICollectionContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.ClassImplementingICollectionCastToICollectionContainsWorks);
            QUnit.test("ICollection - ClassImplementingICollectionRemoveWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.ClassImplementingICollectionRemoveWorks);
            QUnit.test("ICollection - ClassImplementingICollectionCastToICollectionRemoveWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.ClassImplementingICollectionCastToICollectionRemoveWorks);
            QUnit.test("ICollection - ClassImplementingICollectionCopyToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.ClassImplementingICollectionCopyToWorks);
            QUnit.test("ICollection - ClassImplementingICollectionCastToICollectionCopyToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests.ClassImplementingICollectionCastToICollectionCopyToWorks);
            QUnit.test("IDictionary - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests.TypePropertiesAreCorrect);
            QUnit.test("IDictionary - ClassImplementsInterfaces", Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests.ClassImplementsInterfaces);
            QUnit.test("IDictionary - CountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests.CountWorks);
            QUnit.test("IDictionary - KeysWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests.KeysWorks);
            QUnit.test("IDictionary - GetItemWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests.GetItemWorks);
            QUnit.test("IDictionary - ValuesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests.ValuesWorks);
            QUnit.test("IDictionary - ContainsKeyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests.ContainsKeyWorks);
            QUnit.test("IDictionary - TryGetValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests.TryGetValueWorks);
            QUnit.test("IDictionary - AddWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests.AddWorks);
            QUnit.test("IDictionary - ClearWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests.ClearWorks);
            QUnit.test("IDictionary - RemoveWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests.RemoveWorks);
            QUnit.test("IDictionary - SetItemWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests.SetItemWorks);
            QUnit.test("IEnumerable - ArrayImplementsIEnumerable", Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests.ArrayImplementsIEnumerable);
            QUnit.test("IEnumerable - CustomClassThatShouldImplementIEnumerableDoesSo", Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests.CustomClassThatShouldImplementIEnumerableDoesSo);
            QUnit.test("IEnumerable - ArrayGetEnumeratorMethodWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests.ArrayGetEnumeratorMethodWorks);
            QUnit.test("IEnumerable - ArrayCastToIEnumerableCanBeEnumerated", Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests.ArrayCastToIEnumerableCanBeEnumerated);
            QUnit.test("IEnumerable - ClassImplementingIEnumerableCanBeEnumerated", Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests.ClassImplementingIEnumerableCanBeEnumerated);
            QUnit.test("IEnumerable - ClassImplementingIEnumerableCastToIEnumerableCanBeEnumerated", Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests.ClassImplementingIEnumerableCastToIEnumerableCanBeEnumerated);
            QUnit.test("IList - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.TypePropertiesAreCorrect);
            QUnit.test("IList - ArrayImplementsIList", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ArrayImplementsIList);
            QUnit.test("IList - CustomClassThatShouldImplementIListDoesSo", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.CustomClassThatShouldImplementIListDoesSo);
            QUnit.test("IList - ArrayCastToIListGetItemWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ArrayCastToIListGetItemWorks);
            QUnit.test("IList - ArrayCastToIListSetItemWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ArrayCastToIListSetItemWorks);
            QUnit.test("IList - ClassImplementingIListGetItemWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ClassImplementingIListGetItemWorks);
            QUnit.test("IList - ClassImplementingIListCastToIListGetItemWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ClassImplementingIListCastToIListGetItemWorks);
            QUnit.test("IList - ClassImplementingIListSetItemWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ClassImplementingIListSetItemWorks);
            QUnit.test("IList - ClassImplementingIListCastToIListSetItemWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ClassImplementingIListCastToIListSetItemWorks);
            QUnit.test("IList - ArrayCastToIListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ArrayCastToIListIsReadOnlyWorks);
            QUnit.test("IList - ClassImplementingIListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ClassImplementingIListIsReadOnlyWorks);
            QUnit.test("IList - ClassImplementingIListCastToIListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ClassImplementingIListCastToIListIsReadOnlyWorks);
            QUnit.test("IList - ArrayCastToIListIndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ArrayCastToIListIndexOfWorks);
            QUnit.test("IList - ClassImplementingIListIndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ClassImplementingIListIndexOfWorks);
            QUnit.test("IList - ClassImplementingIListCastToIListIndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ClassImplementingIListCastToIListIndexOfWorks);
            QUnit.test("IList - ClassImplementingIListInsertWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ClassImplementingIListInsertWorks);
            QUnit.test("IList - ClassImplementingIListCastToIListInsertWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ClassImplementingIListCastToIListInsertWorks);
            QUnit.test("IList - ClassImplementingIListRemoveAtWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ClassImplementingIListRemoveAtWorks);
            QUnit.test("IList - ClassImplementingIListCastToIListRemoveAtWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ClassImplementingIListCastToIListRemoveAtWorks);
            QUnit.test("IList - ClassImplementingIListCopyToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ClassImplementingIListCopyToWorks);
            QUnit.test("IList - ClassImplementingIListCastToIListCopyToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IListTests.ClassImplementingIListCastToIListCopyToWorks);
            QUnit.test("IReadOnlyCollection - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyCollectionTests.TypePropertiesAreCorrect);
            QUnit.test("IReadOnlyCollection - ArrayImplementsIReadOnlyCollection", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyCollectionTests.ArrayImplementsIReadOnlyCollection);
            QUnit.test("IReadOnlyCollection - CustomClassThatShouldImplementIReadOnlyCollectionDoesSo", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyCollectionTests.CustomClassThatShouldImplementIReadOnlyCollectionDoesSo);
            QUnit.test("IReadOnlyCollection - ArrayCastToIReadOnlyCollectionCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyCollectionTests.ArrayCastToIReadOnlyCollectionCountWorks);
            QUnit.test("IReadOnlyCollection - ClassImplementingICollectionCastToIReadOnlyCollectionCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyCollectionTests.ClassImplementingICollectionCastToIReadOnlyCollectionCountWorks);
            QUnit.test("IReadOnlyCollection - ArrayCastToIReadOnlyCollectionContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyCollectionTests.ArrayCastToIReadOnlyCollectionContainsWorks);
            QUnit.test("IReadOnlyCollection - ClassImplementingICollectionCastToIReadOnlyCollectionContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyCollectionTests.ClassImplementingICollectionCastToIReadOnlyCollectionContainsWorks);
            QUnit.test("IReadOnlyDictionary - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests.TypePropertiesAreCorrect);
            QUnit.test("IReadOnlyDictionary - ClassImplementsInterfaces", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests.ClassImplementsInterfaces);
            QUnit.test("IReadOnlyDictionary - CountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests.CountWorks);
            QUnit.test("IReadOnlyDictionary - KeysWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests.KeysWorks);
            QUnit.test("IReadOnlyDictionary - GetItemWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests.GetItemWorks);
            QUnit.test("IReadOnlyDictionary - ValuesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests.ValuesWorks);
            QUnit.test("IReadOnlyDictionary - ContainsKeyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests.ContainsKeyWorks);
            QUnit.test("IReadOnlyDictionary - TryGetValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests.TryGetValueWorks);
            QUnit.test("IReadOnlyDictionary - UsersTestCase_1626_Works", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests.UsersTestCase_1626_Works);
            QUnit.test("IReadOnlyList - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyListTests.TypePropertiesAreCorrect);
            QUnit.test("IReadOnlyList - CustomClassThatShouldImplementIReadOnlyListDoesSo", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyListTests.CustomClassThatShouldImplementIReadOnlyListDoesSo);
            QUnit.test("IReadOnlyList - ArrayImplementsIReadOnlyList", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyListTests.ArrayImplementsIReadOnlyList);
            QUnit.test("IReadOnlyList - ArrayCastToIReadOnlyListGetItemWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyListTests.ArrayCastToIReadOnlyListGetItemWorks);
            QUnit.test("IReadOnlyList - ClassImplementingIReadOnlyListGetItemWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyListTests.ClassImplementingIReadOnlyListGetItemWorks);
            QUnit.test("IReadOnlyList - ClassImplementingIReadOnlyListCastToIReadOnlyListGetItemWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyListTests.ClassImplementingIReadOnlyListCastToIReadOnlyListGetItemWorks);
            QUnit.test("IteratorBlock - TypeReturnedByIteratorBlockReturningIEnumeratorImplementsThatInterfaceAndIDisposable", Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests.TypeReturnedByIteratorBlockReturningIEnumeratorImplementsThatInterfaceAndIDisposable);
            QUnit.test("IteratorBlock - EnumeratingIEnumeratorIteratorToEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests.EnumeratingIEnumeratorIteratorToEndWorks);
            QUnit.test("IteratorBlock - PrematureDisposalOfIEnumeratorIteratorExecutesFinallyBlocks", Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests.PrematureDisposalOfIEnumeratorIteratorExecutesFinallyBlocks);
            QUnit.test("IteratorBlock - ExceptionInIEnumeratorIteratorBodyExecutesFinallyBlocks Exception thrown not caught", Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests.ExceptionInIEnumeratorIteratorBodyExecutesFinallyBlocks);
            QUnit.test("IteratorBlock - TypeReturnedByIteratorBlockReturningIEnumerableImplementsThatInterface", Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests.TypeReturnedByIteratorBlockReturningIEnumerableImplementsThatInterface);
            QUnit.test("IteratorBlock - EnumeratingIEnumerableIteratorToEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests.EnumeratingIEnumerableIteratorToEndWorks);
            QUnit.test("IteratorBlock - PrematureDisposalOfIEnumerableIteratorExecutesFinallyBlocks", Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests.PrematureDisposalOfIEnumerableIteratorExecutesFinallyBlocks);
            QUnit.test("IteratorBlock - ExceptionInIEnumerableIteratorBodyExecutesFinallyBlocks exception thrown not caught", Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests.ExceptionInIEnumerableIteratorBodyExecutesFinallyBlocks);
            QUnit.test("IteratorBlock - EnumeratingAnIteratorBlockReturningIEnumerableMultipleTimesUsesTheInitialValuesForParameters", Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests.EnumeratingAnIteratorBlockReturningIEnumerableMultipleTimesUsesTheInitialValuesForParameters);
            QUnit.test("IteratorBlock - DifferentGetEnumeratorCallsOnIteratorBlockReturningIEnumerableGetOwnCopiesOfLocals", Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests.DifferentGetEnumeratorCallsOnIteratorBlockReturningIEnumerableGetOwnCopiesOfLocals);
            QUnit.test("List - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.TypePropertiesAreCorrect);
            QUnit.test("List - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.DefaultConstructorWorks);
            QUnit.test("List - ConstructorWithCapacityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ConstructorWithCapacityWorks);
            QUnit.test("List - ConstructingFromArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ConstructingFromArrayWorks);
            QUnit.test("List - ConstructingFromListWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ConstructingFromListWorks);
            QUnit.test("List - ConstructingFromIEnumerableWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ConstructingFromIEnumerableWorks);
            QUnit.test("List - CountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.CountWorks);
            QUnit.test("List - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.IndexingWorks);
            QUnit.test("List - ForeachWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ForeachWorks);
            QUnit.test("List - GetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.GetEnumeratorWorks);
            QUnit.test("List - AddWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.AddWorks);
            QUnit.test("List - AddRangeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.AddRangeWorks);
            QUnit.test("List - BinarySearch1Works", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.BinarySearch1Works);
            QUnit.test("List - BinarySearch2Works", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.BinarySearch2Works);
            QUnit.test("List - BinarySearch3Works", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.BinarySearch3Works);
            QUnit.test("List - BinarySearch4Works", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.BinarySearch4Works);
            QUnit.test("List - ClearWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ClearWorks);
            QUnit.test("List - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ContainsWorks);
            QUnit.test("List - ContainsUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ContainsUsesEqualsMethod);
            QUnit.test("List - CopyToMethodSameBound", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.CopyToMethodSameBound);
            QUnit.test("List - CopyToMethodOffsetBound", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.CopyToMethodOffsetBound);
            QUnit.test("List - CopyToMethodIllegalBound", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.CopyToMethodIllegalBound);
            QUnit.test("List - SliceWithoutEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.SliceWithoutEndWorks);
            QUnit.test("List - SliceWithEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.SliceWithEndWorks);
            QUnit.test("List - ForeachWithListItemCallbackWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ForeachWithListItemCallbackWorks);
            QUnit.test("List - ForeachWithListCallbackWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ForeachWithListCallbackWorks);
            QUnit.test("List - IndexOfWithoutStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.IndexOfWithoutStartIndexWorks);
            QUnit.test("List - IndexOfWithoutStartIndexUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.IndexOfWithoutStartIndexUsesEqualsMethod);
            QUnit.test("List - IndexOfWithStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.IndexOfWithStartIndexWorks);
            QUnit.test("List - IndexOfWithStartIndexUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.IndexOfWithStartIndexUsesEqualsMethod);
            QUnit.test("List - InsertWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.InsertWorks);
            QUnit.test("List - InsertRangeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.InsertRangeWorks);
            QUnit.test("List - JoinWithoutDelimiterWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.JoinWithoutDelimiterWorks);
            QUnit.test("List - JoinWithDelimiterWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.JoinWithDelimiterWorks);
            QUnit.test("List - RemoveWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.RemoveWorks);
            QUnit.test("List - RemoveReturnsFalseIfTheElementWasNotFound", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.RemoveReturnsFalseIfTheElementWasNotFound);
            QUnit.test("List - RemoveCanRemoveNullItem", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.RemoveCanRemoveNullItem);
            QUnit.test("List - RemoveUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.RemoveUsesEqualsMethod);
            QUnit.test("List - RemoveAtWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.RemoveAtWorks);
            QUnit.test("List - RemoveRangeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.RemoveRangeWorks);
            QUnit.test("List - ReverseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ReverseWorks);
            QUnit.test("List - SortWithDefaultCompareWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.SortWithDefaultCompareWorks);
            QUnit.test("List - SortWithCompareCallbackWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.SortWithCompareCallbackWorks);
            QUnit.test("List - SortWithIComparerWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.SortWithIComparerWorks);
            QUnit.test("List - ForeachWhenCastToIEnumerableWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ForeachWhenCastToIEnumerableWorks);
            QUnit.test("List - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.IEnumerableGetEnumeratorWorks);
            QUnit.test("List - ICollectionCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ICollectionCountWorks);
            QUnit.test("List - ICollectionAddWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ICollectionAddWorks);
            QUnit.test("List - ICollectionClearWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ICollectionClearWorks);
            QUnit.test("List - ICollectionContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ICollectionContainsWorks);
            QUnit.test("List - ICollectionContainsUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ICollectionContainsUsesEqualsMethod);
            QUnit.test("List - ICollectionRemoveWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ICollectionRemoveWorks);
            QUnit.test("List - ICollectionRemoveCanRemoveNullItem", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ICollectionRemoveCanRemoveNullItem);
            QUnit.test("List - ICollectionRemoveUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ICollectionRemoveUsesEqualsMethod);
            QUnit.test("List - IListIndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.IListIndexingWorks);
            QUnit.test("List - IListIndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.IListIndexOfWorks);
            QUnit.test("List - IListIndexOfUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.IListIndexOfUsesEqualsMethod);
            QUnit.test("List - IListInsertWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.IListInsertWorks);
            QUnit.test("List - IListRemoveAtWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.IListRemoveAtWorks);
            QUnit.test("List - ToArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.ToArrayWorks);
            QUnit.test("List - IReadOnlyCollectionCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.IReadOnlyCollectionCountWorks);
            QUnit.test("List - IReadOnlyCollectionGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.IReadOnlyCollectionGetEnumeratorWorks);
            QUnit.test("List - IReadOnlyListIndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.IReadOnlyListIndexingWorks);
            QUnit.test("List - IReadOnlyListCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.IReadOnlyListCountWorks);
            QUnit.test("List - IReadOnlyListGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ListTests.IReadOnlyListGetEnumeratorWorks);
            QUnit.test("ReadOnlyCollection - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.TypePropertiesAreCorrect);
            QUnit.test("ReadOnlyCollection - ConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.ConstructorWorks);
            QUnit.test("ReadOnlyCollection - CountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.CountWorks);
            QUnit.test("ReadOnlyCollection - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.IndexingWorks);
            QUnit.test("ReadOnlyCollection - ForeachWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.ForeachWorks);
            QUnit.test("ReadOnlyCollection - GetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.GetEnumeratorWorks);
            QUnit.test("ReadOnlyCollection - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.ContainsWorks);
            QUnit.test("ReadOnlyCollection - ContainsUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.ContainsUsesEqualsMethod);
            QUnit.test("ReadOnlyCollection - CopyToMethodSameBound", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.CopyToMethodSameBound);
            QUnit.test("ReadOnlyCollection - CopyToMethodOffsetBound", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.CopyToMethodOffsetBound);
            QUnit.test("ReadOnlyCollection - CopyToMethodIllegalBound", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.CopyToMethodIllegalBound);
            QUnit.test("ReadOnlyCollection - CopyToMethodWhenCastToIListSameBound", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.CopyToMethodWhenCastToIListSameBound);
            QUnit.test("ReadOnlyCollection - CopyToMethodWhenCastToIListOffsetBound", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.CopyToMethodWhenCastToIListOffsetBound);
            QUnit.test("ReadOnlyCollection - CopyToMethodWhenCastToIListIllegalBound", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.CopyToMethodWhenCastToIListIllegalBound);
            QUnit.test("ReadOnlyCollection - CopyToMethodWhenCastToICollectionSameBound", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.CopyToMethodWhenCastToICollectionSameBound);
            QUnit.test("ReadOnlyCollection - CopyToMethodWhenCastToICollectionOffsetBound", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.CopyToMethodWhenCastToICollectionOffsetBound);
            QUnit.test("ReadOnlyCollection - CopyToMethodWhenCastToICollectionIllegalBound", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.CopyToMethodWhenCastToICollectionIllegalBound);
            QUnit.test("ReadOnlyCollection - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.IndexOfWorks);
            QUnit.test("ReadOnlyCollection - ForeachWhenCastToIEnumerableWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.ForeachWhenCastToIEnumerableWorks);
            QUnit.test("ReadOnlyCollection - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.IEnumerableGetEnumeratorWorks);
            QUnit.test("ReadOnlyCollection - ICollectionCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.ICollectionCountWorks);
            QUnit.test("ReadOnlyCollection - ICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.ICollectionIsReadOnlyWorks);
            QUnit.test("ReadOnlyCollection - ICollectionContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.ICollectionContainsWorks);
            QUnit.test("ReadOnlyCollection - ICollectionContainsUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.ICollectionContainsUsesEqualsMethod);
            QUnit.test("ReadOnlyCollection - IListIndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.IListIndexingWorks);
            QUnit.test("ReadOnlyCollection - IListIndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.IListIndexOfWorks);
            QUnit.test("ReadOnlyCollection - IListIndexOfUsesEqualsMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.IListIndexOfUsesEqualsMethod);
            QUnit.test("ReadOnlyCollection - IListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.IListIsReadOnlyWorks);
            QUnit.test("ReadOnlyCollection - IReadOnlyCollectionCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.IReadOnlyCollectionCountWorks);
            QUnit.test("ReadOnlyCollection - IReadOnlyCollectionGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.IReadOnlyCollectionGetEnumeratorWorks);
            QUnit.test("ReadOnlyCollection - IReadOnlyListIndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.IReadOnlyListIndexingWorks);
            QUnit.test("ReadOnlyCollection - IReadOnlyListCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.IReadOnlyListCountWorks);
            QUnit.test("ReadOnlyCollection - IReadOnlyListGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests.IReadOnlyListGetEnumeratorWorks);
            QUnit.test("WeakMap - GettingSettingAndDeletingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.WeakMapTests.GettingSettingAndDeletingWorks);
            QUnit.test("MultidimArray - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.TypePropertiesAreCorrect);
            QUnit.test("MultidimArray - LengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.LengthWorks);
            QUnit.test("MultidimArray - GetValueWorksForUninitializedElement", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.GetValueWorksForUninitializedElement);
            QUnit.test("MultidimArray - GetValueByIndexWorksForUninitializedElement", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.GetValueByIndexWorksForUninitializedElement);
            QUnit.test("MultidimArray - SettingValueByIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.SettingValueByIndexWorks);
            QUnit.test("MultidimArray - SetValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.SetValueWorks);
            QUnit.test("MultidimArray - GetValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.GetValueWorks);
            QUnit.test("MultidimArray - GettingValueByIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.GettingValueByIndexWorks);
            QUnit.test("MultidimArray - GetLengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.GetLengthWorks);
            QUnit.test("MultidimArray - GetLowerBoundWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.GetLowerBoundWorks);
            QUnit.test("MultidimArray - GetUpperBoundWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.GetUpperBoundWorks);
            QUnit.test("MultidimArray - ForeachWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.ForeachWorks);
            QUnit.test("MultidimArray - RankWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.RankWorks);
            QUnit.test("MultidimArray - GetValueWithIndexOutOfRangeThrowsAnException", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.GetValueWithIndexOutOfRangeThrowsAnException);
            QUnit.test("MultidimArray - SetValueWithIndexOutOfRangeThrowsAnException", Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests.SetValueWithIndexOutOfRangeThrowsAnException);
            QUnit.module("Comparer");
            QUnit.test("TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ComparerTests.TypePropertiesAreCorrect);
            QUnit.test("DefaultComparerCanOrderNumbers", Bridge.Test.Runtime.BridgeClientTestRunner.ComparerTests.DefaultComparerCanOrderNumbers);
            QUnit.test("DefaultComparerCanOrderNullValues", Bridge.Test.Runtime.BridgeClientTestRunner.ComparerTests.DefaultComparerCanOrderNullValues);
            QUnit.test("DefaultComparerUsesCompareMethodIfClassImplementsIComparable", Bridge.Test.Runtime.BridgeClientTestRunner.ComparerTests.DefaultComparerUsesCompareMethodIfClassImplementsIComparable);
            QUnit.test("CreateWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ComparerTests.CreateWorks);
            QUnit.module("Convention");
            QUnit.test("Convention.AssemblyAttribute - NotationTypeTest", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyAttributeTests.NotationTypeTest);
            QUnit.test("Convention.AssemblyAttribute - NotationTypeClassOverrideTest", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyAttributeTests.NotationTypeClassOverrideTest);
            QUnit.test("Convention.AssemblyAttribute - NotationTypeMemberOverrideTest", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyAttributeTests.NotationTypeMemberOverrideTest);
            QUnit.test("Convention.AssemblyAttribute - NotationAccessibilityTest", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyAttributeTests.NotationAccessibilityTest);
            QUnit.test("Convention.ClassAttribute - AllTest", Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests.AllTest);
            QUnit.test("Convention.ClassAttribute - MembersTest", Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests.MembersTest);
            QUnit.test("Convention.ClassAttribute - ObjectLiteralTest", Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests.ObjectLiteralTest);
            QUnit.test("Convention.ClassAttribute - InterfaceMemberTest", Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests.InterfaceMemberTest);
            QUnit.test("Convention.ClassAttribute - InnerClassMemberTest", Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests.InnerClassMemberTest);
            QUnit.test("Convention.ClassAttribute - ClassAttributeInheritanceTest", Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests.ClassAttributeInheritanceTest);
            QUnit.test("Convention.ClassAttribute - OverrideMemberTest", Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests.OverrideMemberTest);
            QUnit.test("Convention.ClassAttribute - NestedClassTest", Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests.NestedClassTest);
            QUnit.test("Convention.ClassAttribute - AccessibilityTest", Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests.AccessibilityTest);
            QUnit.test("Convention.ClassAttribute - ConstMemberTest", Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests.ConstMemberTest);
            QUnit.test("Convention.ClassAttribute - EventMemberTest", Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests.EventMemberTest);
            QUnit.test("Convention.ClassAttribute - EnumItemMemberTest", Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests.EnumItemMemberTest);
            QUnit.test("Convention.ClassAttribute - EnumTargetTest", Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests.EnumTargetTest);
            QUnit.test("Convention.ClassAttribute - ExternalTargetTest", Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests.ExternalTargetTest);
            QUnit.module("Convert");
            QUnit.test("Convert.FromBase64 - Roundtrip1", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.Roundtrip1);
            QUnit.test("Convert.FromBase64 - Roundtrip2", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.Roundtrip2);
            QUnit.test("Convert.FromBase64 - Roundtrip3", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.Roundtrip3);
            QUnit.test("Convert.FromBase64 - EmptyString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.EmptyString);
            QUnit.test("Convert.FromBase64 - ZeroLengthArray", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.ZeroLengthArray);
            QUnit.test("Convert.FromBase64 - RoundtripWithPadding1", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.RoundtripWithPadding1);
            QUnit.test("Convert.FromBase64 - RoundtripWithPadding2", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.RoundtripWithPadding2);
            QUnit.test("Convert.FromBase64 - PartialRoundtripWithPadding1", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.PartialRoundtripWithPadding1);
            QUnit.test("Convert.FromBase64 - PartialRoundtripWithPadding2", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.PartialRoundtripWithPadding2);
            QUnit.test("Convert.FromBase64 - ParseWithWhitespace", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.ParseWithWhitespace);
            QUnit.test("Convert.FromBase64 - RoundtripWithWhitespace2", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.RoundtripWithWhitespace2);
            QUnit.test("Convert.FromBase64 - RoundtripWithWhitespace3", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.RoundtripWithWhitespace3);
            QUnit.test("Convert.FromBase64 - RoundtripWithWhitespace4", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.RoundtripWithWhitespace4);
            QUnit.test("Convert.FromBase64 - RoundtripWithWhitespace5", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.RoundtripWithWhitespace5);
            QUnit.test("Convert.FromBase64 - RoundtripWithWhitespace6", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.RoundtripWithWhitespace6);
            QUnit.test("Convert.FromBase64 - RoundtripWithWhitespace7", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.RoundtripWithWhitespace7);
            QUnit.test("Convert.FromBase64 - RoundtripLargeString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.RoundtripLargeString);
            QUnit.test("Convert.FromBase64 - InvalidOffset", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.InvalidOffset);
            QUnit.test("Convert.FromBase64 - InvalidLength", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.InvalidLength);
            QUnit.test("Convert.FromBase64 - InvalidInput", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.InvalidInput);
            QUnit.test("Convert.FromBase64 - InvalidCharactersInInput", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests.InvalidCharactersInInput);
            QUnit.test("Convert.ToBase64CharArray - ValidOffsetIn", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests.ValidOffsetIn);
            QUnit.test("Convert.ToBase64CharArray - ShortInputArray", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests.ShortInputArray);
            QUnit.test("Convert.ToBase64CharArray - ValidOffsetOut", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests.ValidOffsetOut);
            QUnit.test("Convert.ToBase64CharArray - InvalidInputBuffer", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests.InvalidInputBuffer);
            QUnit.test("Convert.ToBase64CharArray - InvalidOutputBuffer", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests.InvalidOutputBuffer);
            QUnit.test("Convert.ToBase64CharArray - InvalidOffsetIn", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests.InvalidOffsetIn);
            QUnit.test("Convert.ToBase64CharArray - InvalidOffsetOut", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests.InvalidOffsetOut);
            QUnit.test("Convert.ToBase64CharArray - InvalidInputLength", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests.InvalidInputLength);
            QUnit.test("Convert.ToBase64String - KnownByteSequence", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests.KnownByteSequence);
            QUnit.test("Convert.ToBase64String - ZeroLength", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests.ZeroLength);
            QUnit.test("Convert.ToBase64String - InvalidInputBuffer", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests.InvalidInputBuffer);
            QUnit.test("Convert.ToBase64String - InvalidOffset", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests.InvalidOffset);
            QUnit.test("Convert.ToBase64String - InvalidLength", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests.InvalidLength);
            QUnit.test("Convert.ToString - FromBoxedObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromBoxedObject);
            QUnit.test("Convert.ToString - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromObject);
            QUnit.test("Convert.ToString - FromDateTime", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromDateTime);
            QUnit.test("Convert.ToString - FromChar", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromChar);
            QUnit.test("Convert.ToString - FromByteBase2", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromByteBase2);
            QUnit.test("Convert.ToString - FromByteBase8", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromByteBase8);
            QUnit.test("Convert.ToString - FromByteBase10", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromByteBase10);
            QUnit.test("Convert.ToString - FromByteBase16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromByteBase16);
            QUnit.test("Convert.ToString - FromByteInvalidBase", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromByteInvalidBase);
            QUnit.test("Convert.ToString - FromInt16Base2", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromInt16Base2);
            QUnit.test("Convert.ToString - FromInt16Base8", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromInt16Base8);
            QUnit.test("Convert.ToString - FromInt16Base10", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromInt16Base10);
            QUnit.test("Convert.ToString - FromInt16Base16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromInt16Base16);
            QUnit.test("Convert.ToString - FromInt16InvalidBase", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromInt16InvalidBase);
            QUnit.test("Convert.ToString - FromInt32Base2", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromInt32Base2);
            QUnit.test("Convert.ToString - FromInt32Base8", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromInt32Base8);
            QUnit.test("Convert.ToString - FromInt32Base10", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromInt32Base10);
            QUnit.test("Convert.ToString - FromInt32Base16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromInt32Base16);
            QUnit.test("Convert.ToString - FromInt32InvalidBase", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromInt32InvalidBase);
            QUnit.test("Convert.ToString - FromInt64Base2", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromInt64Base2);
            QUnit.test("Convert.ToString - FromInt64Base8", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromInt64Base8);
            QUnit.test("Convert.ToString - FromInt64Base10", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromInt64Base10);
            QUnit.test("Convert.ToString - FromInt64Base16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromInt64Base16);
            QUnit.test("Convert.ToString - FromInt64InvalidBase", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromInt64InvalidBase);
            QUnit.test("Convert.ToString - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromBoolean);
            QUnit.test("Convert.ToString - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromSByte);
            QUnit.test("Convert.ToString - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromByte);
            QUnit.test("Convert.ToString - FromInt16Array", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromInt16Array);
            QUnit.test("Convert.ToString - FromUInt16Array", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromUInt16Array);
            QUnit.test("Convert.ToString - FromInt32Array", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromInt32Array);
            QUnit.test("Convert.ToString - FromUInt32Array", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromUInt32Array);
            QUnit.test("Convert.ToString - FromInt64Array", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromInt64Array);
            QUnit.test("Convert.ToString - FromUInt64Array", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromUInt64Array);
            QUnit.test("Convert.ToString - FromSingleArray", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromSingleArray);
            QUnit.test("Convert.ToString - FromDoubleArray", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromDoubleArray);
            QUnit.test("Convert.ToString - FromDecimalArray", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromDecimalArray);
            QUnit.test("Convert.ToString - FromDateTimeArray", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromDateTimeArray);
            QUnit.test("Convert.ToString - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromString);
            QUnit.test("Convert.ToString - FromIFormattable", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromIFormattable);
            QUnit.test("Convert.ToString - FromNonIConvertible", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests.FromNonIConvertible);
            QUnit.test("Convert.ToBoolean - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.FromBoolean);
            QUnit.test("Convert.ToBoolean - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.FromByte);
            QUnit.test("Convert.ToBoolean - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.FromDecimal);
            QUnit.test("Convert.ToBoolean - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.FromDouble);
            QUnit.test("Convert.ToBoolean - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.FromInt16);
            QUnit.test("Convert.ToBoolean - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.FromInt32);
            QUnit.test("Convert.ToBoolean - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.FromInt64);
            QUnit.test("Convert.ToBoolean - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.FromString);
            QUnit.test("Convert.ToBoolean - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.FromObject);
            QUnit.test("Convert.ToBoolean - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.FromSByte);
            QUnit.test("Convert.ToBoolean - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.FromSingle);
            QUnit.test("Convert.ToBoolean - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.FromUInt16);
            QUnit.test("Convert.ToBoolean - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.FromUInt32);
            QUnit.test("Convert.ToBoolean - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests.FromUInt64);
            QUnit.test("Convert.ToByte - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.FromBoolean);
            QUnit.test("Convert.ToByte - FromChar", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.FromChar);
            QUnit.test("Convert.ToByte - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.FromDecimal);
            QUnit.test("Convert.ToByte - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.FromDouble);
            QUnit.test("Convert.ToByte - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.FromInt16);
            QUnit.test("Convert.ToByte - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.FromInt32);
            QUnit.test("Convert.ToByte - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.FromInt64);
            QUnit.test("Convert.ToByte - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.FromObject);
            QUnit.test("Convert.ToByte - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.FromSByte);
            QUnit.test("Convert.ToByte - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.FromSingle);
            QUnit.test("Convert.ToByte - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.FromString);
            QUnit.test("Convert.ToByte - FromStringWithBase", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.FromStringWithBase);
            QUnit.test("Convert.ToByte - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.FromUInt16);
            QUnit.test("Convert.ToByte - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.FromUInt32);
            QUnit.test("Convert.ToByte - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests.FromUInt64);
            QUnit.test("Convert.ToChar - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.FromByte);
            QUnit.test("Convert.ToChar - FromChar", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.FromChar);
            QUnit.test("Convert.ToChar - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.FromDecimal);
            QUnit.test("Convert.ToChar - FromDecimalViaObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.FromDecimalViaObject);
            QUnit.test("Convert.ToChar - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.FromDouble);
            QUnit.test("Convert.ToChar - FromDoubleViaObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.FromDoubleViaObject);
            QUnit.test("Convert.ToChar - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.FromInt16);
            QUnit.test("Convert.ToChar - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.FromInt32);
            QUnit.test("Convert.ToChar - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.FromInt64);
            QUnit.test("Convert.ToChar - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.FromObject);
            QUnit.test("Convert.ToChar - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.FromSByte);
            QUnit.test("Convert.ToChar - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.FromSingle);
            QUnit.test("Convert.ToChar - FromSingleViaObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.FromSingleViaObject);
            QUnit.test("Convert.ToChar - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.FromString);
            QUnit.test("Convert.ToChar - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.FromUInt16);
            QUnit.test("Convert.ToChar - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.FromUInt32);
            QUnit.test("Convert.ToChar - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests.FromUInt64);
            QUnit.test("Convert.ToDateTime - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.FromString);
            QUnit.test("Convert.ToDateTime - FromStringWithCustomFormatProvider", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.FromStringWithCustomFormatProvider);
            QUnit.test("Convert.ToDateTime - FromDateTime", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.FromDateTime);
            QUnit.test("Convert.ToDateTime - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.FromObject);
            QUnit.test("Convert.ToDateTime - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.FromBoolean);
            QUnit.test("Convert.ToDateTime - FromChar", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.FromChar);
            QUnit.test("Convert.ToDateTime - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.FromInt16);
            QUnit.test("Convert.ToDateTime - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.FromInt32);
            QUnit.test("Convert.ToDateTime - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.FromInt64);
            QUnit.test("Convert.ToDateTime - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.FromUInt16);
            QUnit.test("Convert.ToDateTime - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.FromUInt32);
            QUnit.test("Convert.ToDateTime - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.FromUInt64);
            QUnit.test("Convert.ToDateTime - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.FromSingle);
            QUnit.test("Convert.ToDateTime - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.FromDouble);
            QUnit.test("Convert.ToDateTime - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests.FromDecimal);
            QUnit.test("Convert.ToDecimal - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.FromBoolean);
            QUnit.test("Convert.ToDecimal - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.FromByte);
            QUnit.test("Convert.ToDecimal - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.FromDecimal);
            QUnit.test("Convert.ToDecimal - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.FromDouble);
            QUnit.test("Convert.ToDecimal - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.FromInt16);
            QUnit.test("Convert.ToDecimal - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.FromInt32);
            QUnit.test("Convert.ToDecimal - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.FromInt64);
            QUnit.test("Convert.ToDecimal - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.FromObject);
            QUnit.test("Convert.ToDecimal - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.FromSByte);
            QUnit.test("Convert.ToDecimal - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.FromSingle);
            QUnit.test("Convert.ToDecimal - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.FromString);
            QUnit.test("Convert.ToDecimal - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.FromUInt16);
            QUnit.test("Convert.ToDecimal - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.FromUInt32);
            QUnit.test("Convert.ToDecimal - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests.FromUInt64);
            QUnit.test("Convert.ToDouble - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.FromBoolean);
            QUnit.test("Convert.ToDouble - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.FromByte);
            QUnit.test("Convert.ToDouble - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.FromDecimal);
            QUnit.test("Convert.ToDouble - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.FromDouble);
            QUnit.test("Convert.ToDouble - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.FromInt16);
            QUnit.test("Convert.ToDouble - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.FromInt32);
            QUnit.test("Convert.ToDouble - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.FromInt64);
            QUnit.test("Convert.ToDouble - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.FromObject);
            QUnit.test("Convert.ToDouble - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.FromSByte);
            QUnit.test("Convert.ToDouble - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.FromSingle);
            QUnit.test("Convert.ToDouble - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.FromString);
            QUnit.test("Convert.ToDouble - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.FromUInt16);
            QUnit.test("Convert.ToDouble - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.FromUInt32);
            QUnit.test("Convert.ToDouble - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests.FromUInt64);
            QUnit.test("Convert.ToInt16 - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.FromBoolean);
            QUnit.test("Convert.ToInt16 - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.FromByte);
            QUnit.test("Convert.ToInt16 - FromChar", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.FromChar);
            QUnit.test("Convert.ToInt16 - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.FromDecimal);
            QUnit.test("Convert.ToInt16 - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.FromDouble);
            QUnit.test("Convert.ToInt16 - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.FromInt16);
            QUnit.test("Convert.ToInt16 - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.FromInt32);
            QUnit.test("Convert.ToInt16 - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.FromInt64);
            QUnit.test("Convert.ToInt16 - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.FromObject);
            QUnit.test("Convert.ToInt16 - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.FromSByte);
            QUnit.test("Convert.ToInt16 - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.FromSingle);
            QUnit.test("Convert.ToInt16 - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.FromString);
            QUnit.test("Convert.ToInt16 - FromStringWithBase", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.FromStringWithBase);
            QUnit.test("Convert.ToInt16 - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.FromUInt16);
            QUnit.test("Convert.ToInt16 - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.FromUInt32);
            QUnit.test("Convert.ToInt16 - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests.FromUInt64);
            QUnit.test("Convert.ToInt32 - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.FromBoolean);
            QUnit.test("Convert.ToInt32 - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.FromByte);
            QUnit.test("Convert.ToInt32 - FromChar", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.FromChar);
            QUnit.test("Convert.ToInt32 - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.FromDecimal);
            QUnit.test("Convert.ToInt32 - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.FromDouble);
            QUnit.test("Convert.ToInt32 - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.FromInt16);
            QUnit.test("Convert.ToInt32 - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.FromInt32);
            QUnit.test("Convert.ToInt32 - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.FromInt64);
            QUnit.test("Convert.ToInt32 - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.FromObject);
            QUnit.test("Convert.ToInt32 - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.FromSByte);
            QUnit.test("Convert.ToInt32 - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.FromSingle);
            QUnit.test("Convert.ToInt32 - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.FromString);
            QUnit.test("Convert.ToInt32 - FromStringWithBase", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.FromStringWithBase);
            QUnit.test("Convert.ToInt32 - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.FromUInt16);
            QUnit.test("Convert.ToInt32 - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.FromUInt32);
            QUnit.test("Convert.ToInt32 - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests.FromUInt64);
            QUnit.test("Convert.ToInt64 - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.FromBoolean);
            QUnit.test("Convert.ToInt64 - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.FromByte);
            QUnit.test("Convert.ToInt64 - FromChar", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.FromChar);
            QUnit.test("Convert.ToInt64 - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.FromDecimal);
            QUnit.test("Convert.ToInt64 - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.FromDouble);
            QUnit.test("Convert.ToInt64 - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.FromInt16);
            QUnit.test("Convert.ToInt64 - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.FromInt32);
            QUnit.test("Convert.ToInt64 - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.FromInt64);
            QUnit.test("Convert.ToInt64 - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.FromObject);
            QUnit.test("Convert.ToInt64 - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.FromSByte);
            QUnit.test("Convert.ToInt64 - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.FromSingle);
            QUnit.test("Convert.ToInt64 - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.FromString);
            QUnit.test("Convert.ToInt64 - FromStringWithBase", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.FromStringWithBase);
            QUnit.test("Convert.ToInt64 - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.FromUInt16);
            QUnit.test("Convert.ToInt64 - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.FromUInt32);
            QUnit.test("Convert.ToInt64 - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests.FromUInt64);
            QUnit.test("Convert.ToSByte - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.FromBoolean);
            QUnit.test("Convert.ToSByte - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.FromByte);
            QUnit.test("Convert.ToSByte - FromChar", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.FromChar);
            QUnit.test("Convert.ToSByte - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.FromDecimal);
            QUnit.test("Convert.ToSByte - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.FromDouble);
            QUnit.test("Convert.ToSByte - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.FromInt16);
            QUnit.test("Convert.ToSByte - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.FromInt32);
            QUnit.test("Convert.ToSByte - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.FromInt64);
            QUnit.test("Convert.ToSByte - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.FromObject);
            QUnit.test("Convert.ToSByte - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.FromSByte);
            QUnit.test("Convert.ToSByte - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.FromSingle);
            QUnit.test("Convert.ToSByte - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.FromString);
            QUnit.test("Convert.ToSByte - FromStringWithBase", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.FromStringWithBase);
            QUnit.test("Convert.ToSByte - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.FromUInt16);
            QUnit.test("Convert.ToSByte - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.FromUInt32);
            QUnit.test("Convert.ToSByte - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests.FromUInt64);
            QUnit.test("Convert.ToSingle - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.FromBoolean);
            QUnit.test("Convert.ToSingle - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.FromByte);
            QUnit.test("Convert.ToSingle - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.FromDecimal);
            QUnit.test("Convert.ToSingle - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.FromDouble);
            QUnit.test("Convert.ToSingle - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.FromInt16);
            QUnit.test("Convert.ToSingle - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.FromInt32);
            QUnit.test("Convert.ToSingle - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.FromInt64);
            QUnit.test("Convert.ToSingle - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.FromObject);
            QUnit.test("Convert.ToSingle - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.FromSByte);
            QUnit.test("Convert.ToSingle - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.FromSingle);
            QUnit.test("Convert.ToSingle - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.FromString);
            QUnit.test("Convert.ToSingle - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.FromUInt16);
            QUnit.test("Convert.ToSingle - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.FromUInt32);
            QUnit.test("Convert.ToSingle - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests.FromUInt64);
            QUnit.test("Convert.ToUInt16 - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.FromBoolean);
            QUnit.test("Convert.ToUInt16 - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.FromByte);
            QUnit.test("Convert.ToUInt16 - FromChar", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.FromChar);
            QUnit.test("Convert.ToUInt16 - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.FromDecimal);
            QUnit.test("Convert.ToUInt16 - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.FromDouble);
            QUnit.test("Convert.ToUInt16 - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.FromInt16);
            QUnit.test("Convert.ToUInt16 - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.FromInt32);
            QUnit.test("Convert.ToUInt16 - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.FromInt64);
            QUnit.test("Convert.ToUInt16 - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.FromObject);
            QUnit.test("Convert.ToUInt16 - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.FromSByte);
            QUnit.test("Convert.ToUInt16 - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.FromSingle);
            QUnit.test("Convert.ToUInt16 - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.FromString);
            QUnit.test("Convert.ToUInt16 - FromStringWithBase", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.FromStringWithBase);
            QUnit.test("Convert.ToUInt16 - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.FromUInt16);
            QUnit.test("Convert.ToUInt16 - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.FromUInt32);
            QUnit.test("Convert.ToUInt16 - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests.FromUInt64);
            QUnit.test("Convert.ToUInt32 - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.FromBoolean);
            QUnit.test("Convert.ToUInt32 - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.FromByte);
            QUnit.test("Convert.ToUInt32 - FromChar", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.FromChar);
            QUnit.test("Convert.ToUInt32 - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.FromDecimal);
            QUnit.test("Convert.ToUInt32 - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.FromDouble);
            QUnit.test("Convert.ToUInt32 - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.FromInt16);
            QUnit.test("Convert.ToUInt32 - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.FromInt32);
            QUnit.test("Convert.ToUInt32 - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.FromInt64);
            QUnit.test("Convert.ToUInt32 - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.FromObject);
            QUnit.test("Convert.ToUInt32 - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.FromSByte);
            QUnit.test("Convert.ToUInt32 - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.FromSingle);
            QUnit.test("Convert.ToUInt32 - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.FromString);
            QUnit.test("Convert.ToUInt32 - FromStringWithBase", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.FromStringWithBase);
            QUnit.test("Convert.ToUInt32 - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.FromUInt16);
            QUnit.test("Convert.ToUInt32 - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.FromUInt32);
            QUnit.test("Convert.ToUInt32 - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests.FromUInt64);
            QUnit.test("Convert.ToUInt64 - FromBoolean", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.FromBoolean);
            QUnit.test("Convert.ToUInt64 - FromByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.FromByte);
            QUnit.test("Convert.ToUInt64 - FromChar", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.FromChar);
            QUnit.test("Convert.ToUInt64 - FromDecimal", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.FromDecimal);
            QUnit.test("Convert.ToUInt64 - FromDouble", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.FromDouble);
            QUnit.test("Convert.ToUInt64 - FromInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.FromInt16);
            QUnit.test("Convert.ToUInt64 - FromInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.FromInt32);
            QUnit.test("Convert.ToUInt64 - FromInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.FromInt64);
            QUnit.test("Convert.ToUInt64 - FromObject", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.FromObject);
            QUnit.test("Convert.ToUInt64 - FromSByte", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.FromSByte);
            QUnit.test("Convert.ToUInt64 - FromSingle", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.FromSingle);
            QUnit.test("Convert.ToUInt64 - FromString", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.FromString);
            QUnit.test("Convert.ToUInt64 - FromStringWithBase", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.FromStringWithBase);
            QUnit.test("Convert.ToUInt64 - FromUInt16", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.FromUInt16);
            QUnit.test("Convert.ToUInt64 - FromUInt32", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.FromUInt32);
            QUnit.test("Convert.ToUInt64 - FromUInt64", Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests.FromUInt64);
            QUnit.module("Date and time");
            QUnit.test("DateTimeFormatInfo - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.DateTimeFormatInfoTests.TypePropertiesAreCorrect);
            QUnit.test("DateTimeFormatInfo - GetFormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTimeFormatInfoTests.GetFormatWorks);
            QUnit.test("DateTimeFormatInfo - InvariantWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DateTimeFormatInfoTests.InvariantWorks);
            QUnit.test("DateTime - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.TypePropertiesAreCorrect);
            QUnit.test("DateTime - DefaultConstructorWorks_SPI_1606", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.DefaultConstructorWorks_SPI_1606);
            QUnit.test("DateTime - DefaultValueWorks_SPI_1606", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.DefaultValueWorks_SPI_1606);
            QUnit.test("DateTime - CreatingInstanceReturnsDateWithZeroValue_SPI_1606", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.CreatingInstanceReturnsDateWithZeroValue_SPI_1606);
            QUnit.test("DateTime - LongConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.LongConstructorWorks);
            QUnit.test("DateTime - StringConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.StringConstructorWorks);
            QUnit.test("DateTime - YMDConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.YMDConstructorWorks);
            QUnit.test("DateTime - YMDHConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.YMDHConstructorWorks);
            QUnit.test("DateTime - YMDHNConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.YMDHNConstructorWorks);
            QUnit.test("DateTime - YMDHNSConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.YMDHNSConstructorWorks);
            QUnit.test("DateTime - YMDHNSUConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.YMDHNSUConstructorWorks);
            QUnit.test("DateTime - MinWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.MinWorks);
            QUnit.test("DateTime - MaxWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.MaxWorks);
            QUnit.test("DateTime - NowWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.NowWorks);
            QUnit.test("DateTime - UTCNowWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.UTCNowWorks);
            QUnit.test("DateTime - ToUniversalWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.ToUniversalWorks);
            QUnit.test("DateTime - ToLocalWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.ToLocalWorks);
            QUnit.test("DateTime - TodayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.TodayWorks);
            QUnit.test("DateTime - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.FormatWorks);
            QUnit.test("DateTime - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.IFormattableToStringWorks);
            QUnit.test("DateTime - LocaleFormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.LocaleFormatWorks);
            QUnit.test("DateTime - GetFullYearWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.GetFullYearWorks);
            QUnit.test("DateTime - GetMonthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.GetMonthWorks);
            QUnit.test("DateTime - GetDateWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.GetDateWorks);
            QUnit.test("DateTime - GetHoursWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.GetHoursWorks);
            QUnit.test("DateTime - GetMinutesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.GetMinutesWorks);
            QUnit.test("DateTime - GetSecondsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.GetSecondsWorks);
            QUnit.test("DateTime - GetMillisecondsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.GetMillisecondsWorks);
            QUnit.test("DateTime - GetDayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.GetDayWorks);
            QUnit.test("DateTime - GetTimeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.GetTimeWorks);
            QUnit.test("DateTime - ValueOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.ValueOfWorks);
            QUnit.test("DateTime - TicksWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.TicksWorks);
            QUnit.test("DateTime - GetUTCFullYearWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.GetUTCFullYearWorks);
            QUnit.test("DateTime - GetUtcMonthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.GetUtcMonthWorks);
            QUnit.test("DateTime - GetUTCDateWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.GetUTCDateWorks);
            QUnit.test("DateTime - GetUTCHoursWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.GetUTCHoursWorks);
            QUnit.test("DateTime - GetUTCMinutesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.GetUTCMinutesWorks);
            QUnit.test("DateTime - GetUTCSecondsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.GetUTCSecondsWorks);
            QUnit.test("DateTime - GetUTCMillisecondsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.GetUTCMillisecondsWorks);
            QUnit.test("DateTime - GetUTCDayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.GetUTCDayWorks);
            QUnit.test("DateTime - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.ParseWorks);
            QUnit.test("DateTime - ParseExactWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.ParseExactWorks);
            QUnit.test("DateTime - ParseExactWithCultureWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.ParseExactWithCultureWorks);
            QUnit.test("DateTime - ParseExactUTCWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.ParseExactUTCWorks);
            QUnit.test("DateTime - ParseExactUTCWithCultureWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.ParseExactUTCWithCultureWorks);
            QUnit.test("DateTime - ToDateStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.ToDateStringWorks);
            QUnit.test("DateTime - ToTimeStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.ToTimeStringWorks);
            QUnit.test("DateTime - ToUTCStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.ToUTCStringWorks);
            QUnit.test("DateTime - ToLocaleDateStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.ToLocaleDateStringWorks);
            QUnit.test("DateTime - ToLocaleTimeStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.ToLocaleTimeStringWorks);
            QUnit.test("DateTime - SubtractingDatesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.SubtractingDatesWorks);
            QUnit.test("DateTime - SubtractMethodReturningTimeSpanWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.SubtractMethodReturningTimeSpanWorks);
            QUnit.test("DateTime - DateEqualityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.DateEqualityWorks);
            QUnit.test("DateTime - DateInequalityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.DateInequalityWorks);
            QUnit.test("DateTime - DateLessThanWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.DateLessThanWorks);
            QUnit.test("DateTime - DateLessEqualWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.DateLessEqualWorks);
            QUnit.test("DateTime - DateGreaterThanWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.DateGreaterThanWorks);
            QUnit.test("DateTime - DateGreaterEqualWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.DateGreaterEqualWorks);
            QUnit.test("DateTime - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.GetHashCodeWorks);
            QUnit.test("DateTime - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.EqualsWorks);
            QUnit.test("DateTime - DateTimeEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.DateTimeEqualsWorks);
            QUnit.test("DateTime - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.CompareToWorks);
            QUnit.test("DateTime - DateTimes", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.DateTimes);
            QUnit.test("DateTime - CreateUnixTimestampAndConvertBackToDateTime", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.CreateUnixTimestampAndConvertBackToDateTime);
            QUnit.test("#2149 - ToShortDateStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.ToShortDateStringWorks);
            QUnit.test("#2149 - ToShortTimeStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests.ToShortTimeStringWorks);
            QUnit.test("TimeSpan - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.TypePropertiesAreCorrect);
            QUnit.test("TimeSpan - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.DefaultConstructorWorks);
            QUnit.test("TimeSpan - DefaultValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.DefaultValueWorks);
            QUnit.test("TimeSpan - ZeroWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.ZeroWorks);
            QUnit.test("TimeSpan - CreatingInstanceReturnsTimeSpanWithZeroValue", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.CreatingInstanceReturnsTimeSpanWithZeroValue);
            QUnit.test("TimeSpan - ParameterConstructorsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.ParameterConstructorsWorks);
            QUnit.test("TimeSpan - FactoryMethodsWork", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.FactoryMethodsWork);
            QUnit.test("TimeSpan - PropertiesWork", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.PropertiesWork);
            QUnit.test("TimeSpan - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.CompareToWorks);
            QUnit.test("TimeSpan - CompareWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.CompareWorks);
            QUnit.test("TimeSpan - StaticEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.StaticEqualsWorks);
            QUnit.test("TimeSpan - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.EqualsWorks);
            QUnit.test("TimeSpan - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.IEquatableEqualsWorks);
            QUnit.test("TimeSpan - ToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.ToStringWorks);
            QUnit.test("TimeSpan - AddWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.AddWorks);
            QUnit.test("TimeSpan - SubtractWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.SubtractWorks);
            QUnit.test("TimeSpan - DurationWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.DurationWorks);
            QUnit.test("TimeSpan - NegateWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.NegateWorks);
            QUnit.test("TimeSpan - ComparisonOperatorsWork", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.ComparisonOperatorsWork);
            QUnit.test("TimeSpan - AdditionOperatorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.AdditionOperatorWorks);
            QUnit.test("TimeSpan - SubtractionOperatorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.SubtractionOperatorWorks);
            QUnit.test("TimeSpan - UnaryPlusWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.UnaryPlusWorks);
            QUnit.test("TimeSpan - UnaryMinusWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests.UnaryMinusWorks);
            QUnit.module("Decimal Math");
            QUnit.test("TestSubtractOperator", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests.TestSubtractOperator);
            QUnit.test("TestRemainderOperator", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests.TestRemainderOperator);
            QUnit.test("TestMultiplyOperator", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests.TestMultiplyOperator);
            QUnit.test("TestDivideOperator", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests.TestDivideOperator);
            QUnit.test("TestAddOperator", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests.TestAddOperator);
            QUnit.test("TestAddMethod", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests.TestAddMethod);
            QUnit.test("TestDivideMethod", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests.TestDivideMethod);
            QUnit.test("TestMultiplyMethod", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests.TestMultiplyMethod);
            QUnit.test("TestRemainderMethod", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests.TestRemainderMethod);
            QUnit.test("TestSubtractMethod", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests.TestSubtractMethod);
            QUnit.test("TestCeilingMethod", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests.TestCeilingMethod);
            QUnit.test("TestFloorMethod", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests.TestFloorMethod);
            QUnit.module("Diagnostics");
            QUnit.test("Contract - Assume", Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests.Assume);
            QUnit.test("Contract - AssumeWithUserMessage", Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests.AssumeWithUserMessage);
            QUnit.test("Contract - _Assert", Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests._Assert);
            QUnit.test("Contract - AssertWithUserMessage", Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests.AssertWithUserMessage);
            QUnit.test("Contract - Requires", Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests.Requires);
            QUnit.test("Contract - RequiresWithUserMessage", Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests.RequiresWithUserMessage);
            QUnit.test("Contract - RequiresWithTypeException", Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests.RequiresWithTypeException);
            QUnit.test("Contract - RequiredWithTypeExceptionAndUserMessage", Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests.RequiredWithTypeExceptionAndUserMessage);
            QUnit.test("Contract - ForAll", Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests.ForAll);
            QUnit.test("Contract - ForAllWithCollection", Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests.ForAllWithCollection);
            QUnit.test("Contract - Exists", Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests.Exists);
            QUnit.test("Contract - ExistsWithCollection", Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests.ExistsWithCollection);
            QUnit.test("Stopwatch - GetTimestamp", Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests.GetTimestamp);
            QUnit.test("Stopwatch - ConstructStartAndStop", Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests.ConstructStartAndStop);
            QUnit.test("Stopwatch - StartNewAndReset", Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests.StartNewAndReset);
            QUnit.test("Stopwatch - StartNewAndRestart", Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests.StartNewAndRestart);
            QUnit.test("Stopwatch - StopShouldContinue", Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests.StopShouldContinue);
            QUnit.test("Stopwatch - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests.DefaultConstructorWorks);
            QUnit.test("Stopwatch - ConstantsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests.ConstantsWorks);
            QUnit.test("Stopwatch - StartNewWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests.StartNewWorks);
            QUnit.test("Stopwatch - StartAndStopWork", Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests.StartAndStopWork);
            QUnit.test("Stopwatch - ElapsedWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests.ElapsedWorks);
            QUnit.test("Stopwatch - GetTimestampWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests.GetTimestampWorks);
            QUnit.module("Enum");
            QUnit.test("Enum - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.TypePropertiesAreCorrect);
            QUnit.test("Enum - DefaultValueOfEnumClassIsNull", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.DefaultValueOfEnumClassIsNull);
            QUnit.test("Enum - DefaultValueOfEnumTypeIsFirstValue", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.DefaultValueOfEnumTypeIsFirstValue);
            QUnit.test("Enum - DefaultConstructorOfEnumTypeReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.DefaultConstructorOfEnumTypeReturnsZero);
            QUnit.test("Enum - FirstValueOfEnumIsZero", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.FirstValueOfEnumIsZero);
            QUnit.test("Enum - CreatingInstanceOfEnumTypeReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.CreatingInstanceOfEnumTypeReturnsZero);
            QUnit.test("Enum - DefaultExpressionWithEnumReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.DefaultExpressionWithEnumReturnsZero);
            QUnit.test("Enum - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.GetHashCodeWorks);
            QUnit.test("Enum - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.EqualsWorks);
            QUnit.test("Enum - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.ParseWorks);
            QUnit.test("Enum - StaticToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.StaticToStringWorks);
            QUnit.test("Enum - ConversionsToEnumAreTreatedAsConversionsToTheUnderlyingType", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.ConversionsToEnumAreTreatedAsConversionsToTheUnderlyingType);
            QUnit.test("Enum - GetValuesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests.GetValuesWorks);
            QUnit.module("EqualityComparer");
            QUnit.test("TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests.TypePropertiesAreCorrect);
            QUnit.test("DefaultComparerCanGetHashCodeOfNumber", Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests.DefaultComparerCanGetHashCodeOfNumber);
            QUnit.test("DefaultComparerReturnsZeroAsHashCodeForNullAndUndefined", Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests.DefaultComparerReturnsZeroAsHashCodeForNullAndUndefined);
            QUnit.test("DefaultComparerCanDetermineEquality", Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests.DefaultComparerCanDetermineEquality);
            QUnit.test("DefaultComparerInvokesOverriddenGetHashCode", Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests.DefaultComparerInvokesOverriddenGetHashCode);
            QUnit.test("DefaultComparerInvokesOverriddenEquals", Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests.DefaultComparerInvokesOverriddenEquals);
            QUnit.module("Exceptions");
            QUnit.test("AggregateException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("AggregateException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests.DefaultConstructorWorks);
            QUnit.test("AggregateException - ConstructorWithIEnumerableInnerExceptionsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests.ConstructorWithIEnumerableInnerExceptionsWorks);
            QUnit.test("AggregateException - ConstructorWithInnerExceptionArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests.ConstructorWithInnerExceptionArrayWorks);
            QUnit.test("AggregateException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("AggregateException - ConstructorWithMessageAndIEnumerableInnerExceptionsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests.ConstructorWithMessageAndIEnumerableInnerExceptionsWorks);
            QUnit.test("AggregateException - ConstructorWithMessageAndInnerExceptionArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests.ConstructorWithMessageAndInnerExceptionArrayWorks);
            QUnit.test("AggregateException - FlattenWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests.FlattenWorks);
            QUnit.test("AmbiguousMatchException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.AmbiguousMatchExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("AmbiguousMatchException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AmbiguousMatchExceptionTests.DefaultConstructorWorks);
            QUnit.test("AmbiguousMatchException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AmbiguousMatchExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("AmbiguousMatchException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AmbiguousMatchExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("ArgumentException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("ArgumentException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests.DefaultConstructorWorks);
            QUnit.test("ArgumentException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("ArgumentException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("ArgumentException - ConstructorWithMessageAndParamNameWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests.ConstructorWithMessageAndParamNameWorks);
            QUnit.test("ArgumentException - ConstructorWithMessageAndParamNameAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests.ConstructorWithMessageAndParamNameAndInnerExceptionWorks);
            QUnit.test("ArgumentNullException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentNullExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("ArgumentNullException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentNullExceptionTests.DefaultConstructorWorks);
            QUnit.test("ArgumentNullException - ConstructorWithParamNameWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentNullExceptionTests.ConstructorWithParamNameWorks);
            QUnit.test("ArgumentNullException - ConstructorWithParamNameAndMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentNullExceptionTests.ConstructorWithParamNameAndMessageWorks);
            QUnit.test("ArgumentNullException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentNullExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("ArgumentOutOfRangeException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("ArgumentOutOfRangeException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests.DefaultConstructorWorks);
            QUnit.test("ArgumentOutOfRangeException - ConstructorWithParamNameWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests.ConstructorWithParamNameWorks);
            QUnit.test("ArgumentOutOfRangeException - ConstructorWithParamNameAndMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests.ConstructorWithParamNameAndMessageWorks);
            QUnit.test("ArgumentOutOfRangeException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("ArgumentOutOfRangeException - ConstructorWithParamNameAndActualValueAndMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests.ConstructorWithParamNameAndActualValueAndMessageWorks);
            QUnit.test("ArithmeticException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ArithmeticExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("ArithmeticException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArithmeticExceptionTests.DefaultConstructorWorks);
            QUnit.test("ArithmeticException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArithmeticExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("ArithmeticException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArithmeticExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("Try/Catch/Finally - ThrowingAndCatchingExceptionsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CommonExceptionTests.ThrowingAndCatchingExceptionsWorks);
            QUnit.test("Try/Catch/Finally - ExceptionOfWrongTypeIsNotCaught", Bridge.Test.Runtime.BridgeClientTestRunner.CommonExceptionTests.ExceptionOfWrongTypeIsNotCaught);
            QUnit.test("Try/Catch/Finally - CanCatchExceptionAsBaseType", Bridge.Test.Runtime.BridgeClientTestRunner.CommonExceptionTests.CanCatchExceptionAsBaseType);
            QUnit.test("Try/Catch/Finally - CanCatchStringAsException", Bridge.Test.Runtime.BridgeClientTestRunner.CommonExceptionTests.CanCatchStringAsException);
            QUnit.test("Exception - CanCatchStringAsCatchAll", Bridge.Test.Runtime.BridgeClientTestRunner.CommonExceptionTests.CanCatchStringAsCatchAll);
            QUnit.test("CultureNotFoundException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("CultureNotFoundException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests.DefaultConstructorWorks);
            QUnit.test("CultureNotFoundException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("CultureNotFoundException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("CultureNotFoundException - ConstructorWithMessageAndParamNameWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests.ConstructorWithMessageAndParamNameWorks);
            QUnit.test("CultureNotFoundException - ConstructorWithMessageAndCultureNameAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests.ConstructorWithMessageAndCultureNameAndInnerExceptionWorks);
            QUnit.test("CultureNotFoundException - ConstructorWithParamNameAndCultureNameAndMessage", Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests.ConstructorWithParamNameAndCultureNameAndMessage);
            QUnit.test("CultureNotFoundException - ConstructorWithMessageAndCultureIdAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests.ConstructorWithMessageAndCultureIdAndInnerExceptionWorks);
            QUnit.test("CultureNotFoundException - ConstructorWithParamNameAndCultureIdAndMessage", Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests.ConstructorWithParamNameAndCultureIdAndMessage);
            QUnit.test("DivideByZeroException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.DivideByZeroExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("DivideByZeroException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DivideByZeroExceptionTests.DefaultConstructorWorks);
            QUnit.test("DivideByZeroException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DivideByZeroExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("DivideByZeroException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DivideByZeroExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("Exception - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("Exception - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests.DefaultConstructorWorks);
            QUnit.test("Exception - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("Exception - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("Exception - MessagePropertyCanBeOverridden", Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests.MessagePropertyCanBeOverridden);
            QUnit.test("Exception - InnerExceptionPropertyCanBeOverridden", Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests.InnerExceptionPropertyCanBeOverridden);
            QUnit.test("FormatException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.FormatExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("FormatException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.FormatExceptionTests.DefaultConstructorWorks);
            QUnit.test("FormatException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.FormatExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("FormatException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.FormatExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("IndexOutOfRangeException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.IndexOutOfRangeExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("IndexOutOfRangeException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IndexOutOfRangeExceptionTests.DefaultConstructorWorks);
            QUnit.test("IndexOutOfRangeException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IndexOutOfRangeExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("IndexOutOfRangeException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.IndexOutOfRangeExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("InvalidCastException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.InvalidCastExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("InvalidCastException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.InvalidCastExceptionTests.DefaultConstructorWorks);
            QUnit.test("InvalidCastException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.InvalidCastExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("InvalidCastException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.InvalidCastExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("InvalidOperationException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.InvalidOperationExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("InvalidOperationException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.InvalidOperationExceptionTests.DefaultConstructorWorks);
            QUnit.test("InvalidOperationException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.InvalidOperationExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("InvalidOperationException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.InvalidOperationExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("KeyNotFoundException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.KeyNotFoundExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("KeyNotFoundException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.KeyNotFoundExceptionTests.DefaultConstructorWorks);
            QUnit.test("KeyNotFoundException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.KeyNotFoundExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("KeyNotFoundException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.KeyNotFoundExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("NotImplementedException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.NotImplementedExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("NotImplementedException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NotImplementedExceptionTests.DefaultConstructorWorks);
            QUnit.test("NotImplementedException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NotImplementedExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("NotImplementedException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NotImplementedExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("NotSupportedException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.NotSupportedExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("NotSupportedException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NotSupportedExceptionTests.DefaultConstructorWorks);
            QUnit.test("NotSupportedException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NotSupportedExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("NotSupportedException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NotSupportedExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("NullReferenceException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.NullReferenceExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("NullReferenceException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullReferenceExceptionTests.DefaultConstructorWorks);
            QUnit.test("NullReferenceException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullReferenceExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("NullReferenceException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullReferenceExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("NullReferenceException - AccessingAFieldOnANullObjectCausesANullReferenceException", Bridge.Test.Runtime.BridgeClientTestRunner.NullReferenceExceptionTests.AccessingAFieldOnANullObjectCausesANullReferenceException);
            QUnit.test("OperationCanceledException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("OperationCanceledException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests.DefaultConstructorWorks);
            QUnit.test("OperationCanceledException - CancellationTokenOnlyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests.CancellationTokenOnlyConstructorWorks);
            QUnit.test("OperationCanceledException - MessageOnlyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests.MessageOnlyConstructorWorks);
            QUnit.test("OperationCanceledException - MessageAndInnerExceptionConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests.MessageAndInnerExceptionConstructorWorks);
            QUnit.test("OperationCanceledException - MessageAndCancellationTokenConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests.MessageAndCancellationTokenConstructorWorks);
            QUnit.test("OperationCanceledException - MessageAndInnerExceptionAndCancellationTokenConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests.MessageAndInnerExceptionAndCancellationTokenConstructorWorks);
            QUnit.test("OutOfMemoryException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.OutOfMemoryExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("OutOfMemoryException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.OutOfMemoryExceptionTests.DefaultConstructorWorks);
            QUnit.test("OutOfMemoryException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.OutOfMemoryExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("OutOfMemoryException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.OutOfMemoryExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("OverflowException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.OverflowExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("OverflowException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.OverflowExceptionTests.DefaultConstructorWorks);
            QUnit.test("OverflowException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.OverflowExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("OverflowException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.OverflowExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("PromiseException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.PromiseExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("PromiseException - ArgumentsOnlyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.PromiseExceptionTests.ArgumentsOnlyConstructorWorks);
            QUnit.test("PromiseException - ArgumentsAndMessageConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.PromiseExceptionTests.ArgumentsAndMessageConstructorWorks);
            QUnit.test("PromiseException - ArgumentsAndMessageAndInnerExceptionConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.PromiseExceptionTests.ArgumentsAndMessageAndInnerExceptionConstructorWorks);
            QUnit.test("RankException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.RankExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("RankException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.RankExceptionTests.DefaultConstructorWorks);
            QUnit.test("RankException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.RankExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("RegexMatchTimeoutException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTimeoutExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("RegexMatchTimeoutException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTimeoutExceptionTests.DefaultConstructorWorks);
            QUnit.test("RegexMatchTimeoutException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTimeoutExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("RegexMatchTimeoutException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTimeoutExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("RegexMatchTimeoutException - ConstructorWithExceptionDetailsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTimeoutExceptionTests.ConstructorWithExceptionDetailsWorks);
            QUnit.test("SystemException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.SystemExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("SystemException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SystemExceptionTests.DefaultConstructorWorks);
            QUnit.test("SystemException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SystemExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("SystemException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SystemExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.test("TaskCanceledException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.TaskCanceledExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("TaskCanceledException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskCanceledExceptionTests.DefaultConstructorWorks);
            QUnit.test("TaskCanceledException - MessageOnlyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskCanceledExceptionTests.MessageOnlyConstructorWorks);
            QUnit.test("TaskCanceledException - TaskOnlyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskCanceledExceptionTests.TaskOnlyConstructorWorks);
            QUnit.test("TaskCanceledException - MessageAndInnerExceptionConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskCanceledExceptionTests.MessageAndInnerExceptionConstructorWorks);
            QUnit.test("TimeoutException - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutExceptionTests.TypePropertiesAreCorrect);
            QUnit.test("TimeoutException - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutExceptionTests.DefaultConstructorWorks);
            QUnit.test("TimeoutException - ConstructorWithMessageWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutExceptionTests.ConstructorWithMessageWorks);
            QUnit.test("TimeoutException - ConstructorWithMessageAndInnerExceptionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutExceptionTests.ConstructorWithMessageAndInnerExceptionWorks);
            QUnit.module("Functions");
            QUnit.test("Arguments - LengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentsTests.LengthWorks);
            QUnit.test("Arguments - GetArgumentWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentsTests.GetArgumentWorks);
            QUnit.test("Arguments - ToArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentsTests.ToArrayWorks);
            QUnit.test("Arguments - ToArrayOfTWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentsTests.ToArrayOfTWorks);
            QUnit.test("Function - TestConstructorArgumentsBodyInOneParameter", Bridge.Test.Runtime.BridgeClientTestRunner.FunctionTests.TestConstructorArgumentsBodyInOneParameter);
            QUnit.test("Function - TestConstructorArgumentsBodyInTwoParameters", Bridge.Test.Runtime.BridgeClientTestRunner.FunctionTests.TestConstructorArgumentsBodyInTwoParameters);
            QUnit.test("Function - TestConstructorArgumentsInArray", Bridge.Test.Runtime.BridgeClientTestRunner.FunctionTests.TestConstructorArgumentsInArray);
            QUnit.test("Mixin - TestGlobalMethods", Bridge.Test.Runtime.BridgeClientTestRunner.MixinTests.TestGlobalMethods);
            QUnit.test("Mixin - TestMixin", Bridge.Test.Runtime.BridgeClientTestRunner.MixinTests.TestMixin);
            QUnit.module("Guid");
            QUnit.test("Guid - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.TypePropertiesAreCorrect);
            QUnit.test("Guid - DefaultValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.DefaultValueWorks);
            QUnit.test("Guid - CreateInstanceWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.CreateInstanceWorks);
            QUnit.test("Guid - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.DefaultConstructorWorks);
            QUnit.test("Guid - EmptyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.EmptyWorks);
            QUnit.test("Guid - ToStringWithoutArgumentsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.ToStringWithoutArgumentsWorks);
            QUnit.test("Guid - ByteArrayConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.ByteArrayConstructorWorks);
            QUnit.test("Guid - Int32Int16Int16ByteArrayConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.Int32Int16Int16ByteArrayConstructorWorks);
            QUnit.test("Guid - Int32Int16Int16BytesConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.Int32Int16Int16BytesConstructorWorks);
            QUnit.test("Guid - UInt32UInt16UInt16BytesConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.UInt32UInt16UInt16BytesConstructorWorks);
            QUnit.test("Guid - StringConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.StringConstructorWorks);
            QUnit.test("Guid - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.ParseWorks);
            QUnit.test("Guid - ParseExactWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.ParseExactWorks);
            QUnit.test("Guid - TryParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.TryParseWorks);
            QUnit.test("Guid - TryParseExactWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.TryParseExactWorks);
            QUnit.test("Guid - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.CompareToWorks);
            QUnit.test("Guid - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.IComparableCompareToWorks);
            QUnit.test("Guid - EqualsObjectWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.EqualsObjectWorks);
            QUnit.test("Guid - EqualsGuidWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.EqualsGuidWorks);
            QUnit.test("Guid - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.IEquatableEqualsWorks);
            QUnit.test("Guid - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.GetHashCodeWorks);
            QUnit.test("Guid - EqualityOperatorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.EqualityOperatorWorks);
            QUnit.test("Guid - InequalityOperatorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.InequalityOperatorWorks);
            QUnit.test("Guid - ToStringWithFormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.ToStringWithFormatWorks);
            QUnit.test("Guid - NewGuidWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.NewGuidWorks);
            QUnit.test("Guid - ToByteArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests.ToByteArrayWorks);
            QUnit.module("HTML5");
            QUnit.test("DOMParser #1728 - ConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DOMParserTests.ConstructorWorks);
            QUnit.test("DOMParser #1728 - XmlParsingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DOMParserTests.XmlParsingWorks);
            QUnit.test("DOMParser #1728 - XmlParsingShouldThrow", Bridge.Test.Runtime.BridgeClientTestRunner.DOMParserTests.XmlParsingShouldThrow);
            QUnit.test("MutationObserver - TestNewlyAttachedElements", Bridge.Test.Runtime.BridgeClientTestRunner.MutationObserverTests.TestNewlyAttachedElements);
            QUnit.module("LINQ");
            QUnit.test("Aggregate - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqAggregateOperators.Test);
            QUnit.test("Aggregate - Bridge315", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqAggregateOperators.Bridge315);
            QUnit.test("Conversion - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqConversionOperators.Test);
            QUnit.test("Element - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqElementOperators.Test);
            QUnit.test("Generation - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqGenerationOperators.Test);
            QUnit.test("Grouping - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqGroupingOperators.Test);
            QUnit.test("Grouping - TestComplexGrouping", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqGroupingOperators.TestComplexGrouping);
            QUnit.test("Grouping - TestAnagrams", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqGroupingOperators.TestAnagrams);
            QUnit.test("Join - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqJoinOperators.Test);
            QUnit.test("Misc - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqMiscellaneousOperators.Test);
            QUnit.test("Ordering - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqOrderingOperators.Test);
            QUnit.test("Partitioning - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqPartitioningOperators.Test);
            QUnit.test("Projection - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqProjectionOperators.Test);
            QUnit.test("Quantifiers - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqQuantifiers.Test);
            QUnit.test("Query - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqQueryExecution.Test);
            QUnit.test("Restriction- Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqRestrictionOperators.Test);
            QUnit.test("Set - Test", Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqSetOperators.Test);
            QUnit.module("LINQ Expressions");
            QUnit.test("LINQ Expressions - ExpressionProtectedConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.ExpressionProtectedConstructorWorks);
            QUnit.test("LINQ Expressions - SimpleExpressionTreeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.SimpleExpressionTreeWorks);
            QUnit.test("LINQ Expressions - LambdaWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.LambdaWorks);
            QUnit.test("LINQ Expressions - ParameterAndVariableWork", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.ParameterAndVariableWork);
            QUnit.test("LINQ Expressions - ConstantWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.ConstantWorks);
            QUnit.test("LINQ Expressions - BinaryExpressionsWork", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.BinaryExpressionsWork);
            QUnit.test("LINQ Expressions - UnaryExpressionsWork", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.UnaryExpressionsWork);
            QUnit.test("LINQ Expressions - ArrayLengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.ArrayLengthWorks);
            QUnit.test("LINQ Expressions - ConversionsWork", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.ConversionsWork);
            QUnit.test("LINQ Expressions - ArrayIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.ArrayIndexWorks);
            QUnit.test("LINQ Expressions - MultiDimensionalArrayIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.MultiDimensionalArrayIndexWorks);
            QUnit.test("LINQ Expressions - ConditionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.ConditionWorks);
            QUnit.test("LINQ Expressions - CallWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.CallWorks);
            QUnit.test("LINQ Expressions - MethodGroupConversionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.MethodGroupConversionWorks);
            QUnit.test("LINQ Expressions - InvokeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.InvokeWorks);
            QUnit.test("LINQ Expressions - ArrayCreationWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.ArrayCreationWorks);
            QUnit.test("LINQ Expressions - PropertiesAndFieldsWork", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.PropertiesAndFieldsWork);
            QUnit.test("LINQ Expressions - IndexersWork", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.IndexersWork);
            QUnit.test("LINQ Expressions - IndexExpressionsWork", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.IndexExpressionsWork);
            QUnit.test("LINQ Expressions - ObjectConstructionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.ObjectConstructionWorks);
            QUnit.test("LINQ Expressions - AnonymousTypeConstructionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.AnonymousTypeConstructionWorks);
            QUnit.test("LINQ Expressions - TransparentIdentifiersWork", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.TransparentIdentifiersWork);
            QUnit.test("LINQ Expressions - NewExpressionWithMembersWork", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.NewExpressionWithMembersWork);
            QUnit.test("LINQ Expressions - BindWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.BindWorks);
            QUnit.test("LINQ Expressions - ElementInitWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.ElementInitWorks);
            QUnit.test("LINQ Expressions - ListBindWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.ListBindWorks);
            QUnit.test("LINQ Expressions - MemberBindWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.MemberBindWorks);
            QUnit.test("LINQ Expressions - MemberInitWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.MemberInitWorks);
            QUnit.test("LINQ Expressions - ListInitWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.ListInitWorks);
            QUnit.test("LINQ Expressions - TypeIsAndTypeEqualWork", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.TypeIsAndTypeEqualWork);
            QUnit.test("LINQ Expressions - QuoteWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.QuoteWorks);
            QUnit.test("LINQ Expressions - LocalVariableReferenceWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.LocalVariableReferenceWorks);
            QUnit.test("LINQ Expressions - ThrowAndRethrowWork", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.ThrowAndRethrowWork);
            QUnit.test("LINQ Expressions - DefaultAndEmptyWork", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.DefaultAndEmptyWork);
            QUnit.test("LINQ Expressions - BlockWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.BlockWorks);
            QUnit.test("LINQ Expressions - IfThenWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.IfThenWorks);
            QUnit.test("LINQ Expressions - LabelTargetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.LabelTargetWorks);
            QUnit.test("LINQ Expressions - GotoWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.GotoWorks);
            QUnit.test("LINQ Expressions - LabelExpressionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.LabelExpressionWorks);
            QUnit.test("LINQ Expressions - LoopWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.LoopWorks);
            QUnit.test("LINQ Expressions - SwitchCaseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.SwitchCaseWorks);
            QUnit.test("LINQ Expressions - SwitchWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.SwitchWorks);
            QUnit.test("LINQ Expressions - CatchBlockWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.CatchBlockWorks);
            QUnit.test("LINQ Expressions - TryWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.TryWorks);
            QUnit.test("LINQ Expressions - DynamicWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests.DynamicWorks);
            QUnit.module("Math");
            QUnit.test("Math - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.ConstantsWork);
            QUnit.test("Math - ConstantsWork_N2473", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.ConstantsWork_N2473);
            QUnit.test("Math - AbsOfDoubleWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.AbsOfDoubleWorks);
            QUnit.test("Math - AbsOfIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.AbsOfIntWorks);
            QUnit.test("Math - AbsOfLongWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.AbsOfLongWorks);
            QUnit.test("Math - AbsOfSbyteWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.AbsOfSbyteWorks);
            QUnit.test("Math - AbsOfShortWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.AbsOfShortWorks);
            QUnit.test("Math - AbsOfFloatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.AbsOfFloatWorks);
            QUnit.test("Math - AbsOfDecimalWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.AbsOfDecimalWorks);
            QUnit.test("Math - AcosWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.AcosWorks);
            QUnit.test("Math - AsinWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.AsinWorks);
            QUnit.test("Math - AtanWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.AtanWorks);
            QUnit.test("Math - Atan2Works", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.Atan2Works);
            QUnit.test("Math - CosWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.CosWorks);
            QUnit.test("Math - DivRemWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.DivRemWorks);
            QUnit.test("Math - ExpWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.ExpWorks);
            QUnit.test("Math - FloorOfDoubleWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.FloorOfDoubleWorks);
            QUnit.test("Math - FloorOfDecimalWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.FloorOfDecimalWorks);
            QUnit.test("Math - LogWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.LogWorks);
            QUnit.test("Math - MaxOfByteWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MaxOfByteWorks);
            QUnit.test("Math - MaxOfDecimalWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MaxOfDecimalWorks);
            QUnit.test("Math - MaxOfDoubleWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MaxOfDoubleWorks);
            QUnit.test("Math - MaxOfShortWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MaxOfShortWorks);
            QUnit.test("Math - MaxOfIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MaxOfIntWorks);
            QUnit.test("Math - MaxOfLongWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MaxOfLongWorks);
            QUnit.test("Math - MaxOfSByteWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MaxOfSByteWorks);
            QUnit.test("Math - MaxOfFloatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MaxOfFloatWorks);
            QUnit.test("Math - MaxOfUShortWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MaxOfUShortWorks);
            QUnit.test("Math - MaxOfUIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MaxOfUIntWorks);
            QUnit.test("Math - MaxOfULongWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MaxOfULongWorks);
            QUnit.test("Math - MinOfByteWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MinOfByteWorks);
            QUnit.test("Math - MinOfDecimalWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MinOfDecimalWorks);
            QUnit.test("Math - MinOfDoubleWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MinOfDoubleWorks);
            QUnit.test("Math - MinOfShortWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MinOfShortWorks);
            QUnit.test("Math - MinOfIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MinOfIntWorks);
            QUnit.test("Math - MinOfLongWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MinOfLongWorks);
            QUnit.test("Math - MinOfSByteWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MinOfSByteWorks);
            QUnit.test("Math - MinOfFloatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MinOfFloatWorks);
            QUnit.test("Math - MinOfUShortWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MinOfUShortWorks);
            QUnit.test("Math - MinOfUIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MinOfUIntWorks);
            QUnit.test("Math - MinOfULongWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.MinOfULongWorks);
            QUnit.test("Math - PowWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.PowWorks);
            QUnit.test("Math - RandomWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.RandomWorks);
            QUnit.test("Math - RoundOfDoubleWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.RoundOfDoubleWorks);
            QUnit.test("Math - RoundDecimalWithModeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.RoundDecimalWithModeWorks);
            QUnit.test("Math - RoundDecimalWithPrecisionAndModeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.RoundDecimalWithPrecisionAndModeWorks);
            QUnit.test("Math - RoundDoubleWithModeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.RoundDoubleWithModeWorks);
            QUnit.test("Math - RoundDoubleWithPrecisionAndModeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.RoundDoubleWithPrecisionAndModeWorks);
            QUnit.test("Math - JsRoundWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.JsRoundWorks);
            QUnit.test("Math - IEEERemainderWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.IEEERemainderWorks);
            QUnit.test("Math - SinWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.SinWorks);
            QUnit.test("Math - SqrtWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.SqrtWorks);
            QUnit.test("Math - TanWorks", Bridge.Test.Runtime.BridgeClientTestRunner.MathTests.TanWorks);
            QUnit.module("Nullable");
            QUnit.test("Nullable - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.TypePropertiesAreCorrect);
            QUnit.test("Nullable - ConvertingToNullableWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.ConvertingToNullableWorks);
            QUnit.test("Nullable - HasValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.HasValueWorks);
            QUnit.test("Nullable - BoxingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.BoxingWorks);
            QUnit.test("Nullable - UnboxingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.UnboxingWorks);
            QUnit.test("Nullable - ValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.ValueWorks);
            QUnit.test("Nullable - UnboxingValueOfWrongTypeThrowsAnException", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.UnboxingValueOfWrongTypeThrowsAnException);
            QUnit.test("Nullable - GetValueOrDefaultWithArgWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.GetValueOrDefaultWithArgWorks);
            QUnit.test("Nullable - LiftedEqualityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedEqualityWorks);
            QUnit.test("Nullable - LiftedInequalityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedInequalityWorks);
            QUnit.test("Nullable - LiftedLessThanWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedLessThanWorks);
            QUnit.test("Nullable - LiftedGreaterThanWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedGreaterThanWorks);
            QUnit.test("Nullable - LiftedLessThanOrEqualWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedLessThanOrEqualWorks);
            QUnit.test("Nullable - LiftedGreaterThanOrEqualWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedGreaterThanOrEqualWorks);
            QUnit.test("Nullable - LiftedSubtractionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedSubtractionWorks);
            QUnit.test("Nullable - LiftedAdditionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedAdditionWorks);
            QUnit.test("Nullable - LiftedModWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedModWorks);
            QUnit.test("Nullable - LiftedFloatingPointDivisionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedFloatingPointDivisionWorks);
            QUnit.test("Nullable - LiftedIntegerDivisionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedIntegerDivisionWorks);
            QUnit.test("Nullable - LiftedMultiplicationWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedMultiplicationWorks);
            QUnit.test("Nullable - LiftedBitwiseAndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedBitwiseAndWorks);
            QUnit.test("Nullable - LiftedBitwiseOrWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedBitwiseOrWorks);
            QUnit.test("Nullable - LiftedBitwiseXorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedBitwiseXorWorks);
            QUnit.test("Nullable - LiftedLeftShiftWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedLeftShiftWorks);
            QUnit.test("Nullable - LiftedSignedRightShiftWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedSignedRightShiftWorks);
            QUnit.test("Nullable - LiftedUnsignedRightShiftWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedUnsignedRightShiftWorks);
            QUnit.test("LiftedBooleanAndWorks #314", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedBooleanAndWorks);
            QUnit.test("LiftedBooleanOrWorks #314", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedBooleanOrWorks);
            QUnit.test("Nullable - LiftedBooleanNotWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedBooleanNotWorks);
            QUnit.test("Nullable - LiftedNegationWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedNegationWorks);
            QUnit.test("Nullable - LiftedUnaryPlusWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedUnaryPlusWorks);
            QUnit.test("Nullable - LiftedOnesComplementWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.LiftedOnesComplementWorks);
            QUnit.test("CoalesceWorks #314", Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests.CoalesceWorks);
            QUnit.module("NumberFormatInfo");
            QUnit.test("NumberFormatInfoTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatInfoTests.TypePropertiesAreCorrect);
            QUnit.test("NumberFormatInfoTests - GetFormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatInfoTests.GetFormatWorks);
            QUnit.test("NumberFormatInfoTests - InvariantWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatInfoTests.InvariantWorks);
            QUnit.test("NumberFormatSpecifiersTests - CurrencyFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.CurrencyFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - DecimalFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.DecimalFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - ExponentialFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.ExponentialFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - FixedPointFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.FixedPointFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - GeneralFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.GeneralFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - NumericFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.NumericFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - PercentFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.PercentFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - RoundTripFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.RoundTripFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - HexadecimalFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.HexadecimalFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - CustomZeroFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.CustomZeroFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - CustomHashFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.CustomHashFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - CustomDotFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.CustomDotFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - CustomCommaFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.CustomCommaFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - CustomPercentFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.CustomPercentFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - CustomPerMileFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.CustomPerMileFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - CustomEscapeFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.CustomEscapeFormatSpecifierWorks);
            QUnit.test("NumberFormatSpecifiersTests - CustomSemicolonFormatSpecifierWorks", Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests.CustomSemicolonFormatSpecifierWorks);
            QUnit.module("Property accessor");
            QUnit.test("AccessorsCanBeInvokedInstance", Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests.AccessorsCanBeInvokedInstance);
            QUnit.test("AccessorsCanBeInvokedStatic", Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests.AccessorsCanBeInvokedStatic);
            QUnit.test("AccessorsCanBeInvokedGeneric", Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests.AccessorsCanBeInvokedGeneric);
            QUnit.test("AccessorsCanBeInvokedGenericStatic", Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests.AccessorsCanBeInvokedGenericStatic);
            QUnit.test("BaseAccessorsCanBeInvoked", Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests.BaseAccessorsCanBeInvoked);
            QUnit.test("BaseAccessorsCanBeInvokedGeneric", Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests.BaseAccessorsCanBeInvokedGeneric);
            QUnit.module("Random");
            QUnit.test("Random - Unseeded", Bridge.Test.Runtime.BridgeClientTestRunner.RandomTests.Unseeded);
            QUnit.test("Random - Seeded", Bridge.Test.Runtime.BridgeClientTestRunner.RandomTests.Seeded);
            QUnit.test("Random - Sample", Bridge.Test.Runtime.BridgeClientTestRunner.RandomTests.Sample);
            QUnit.module("Reflection");
            QUnit.test("Reflection - Assembly GetExecutingAssemblyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.GetExecutingAssemblyWorks);
            QUnit.test("Reflection - Assembly GetAssemblyForTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.GetAssemblyForTypeWorks);
            QUnit.test("Reflection - Assembly FullNameWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.FullNameWorks);
            QUnit.test("Reflection - Assembly ToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.ToStringWorks);
            QUnit.test("Reflection - Assembly GetTypesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.GetTypesWorks);
            QUnit.test("Reflection - Assembly GetTypesWithImportedModuleWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.GetTypesWithImportedModuleWorks);
            QUnit.test("Reflection - Assembly GetTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.GetTypeWorks);
            QUnit.test("Reflection - Assembly GetTypeWorksWithGenerics", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.GetTypeWorksWithGenerics);
            QUnit.test("Reflection - Assembly GetTypeWithImportedModuleWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.GetTypeWithImportedModuleWorks);
            QUnit.test("Reflection - Assembly AssemblyOfBuiltInTypes", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.AssemblyOfBuiltInTypes);
            QUnit.test("Reflection - Assembly CreateInstanceWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.CreateInstanceWorks);
            QUnit.test("Reflection - Assembly GetCustomAttributesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.GetCustomAttributesWorks);
            QUnit.test("Reflection - Assembly LoadCanReturnReferenceToLoadedAssembly", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.LoadCanReturnReferenceToLoadedAssembly);
            QUnit.test("Reflection - Assembly GetManifestResourceNamesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.GetManifestResourceNamesWorks);
            QUnit.test("Reflection - Assembly GetManifestResourceDataAsBase64WithoutTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.GetManifestResourceDataAsBase64WithoutTypeWorks);
            QUnit.test("Reflection - Assembly GetManifestResourceDataAsBase64WithTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.GetManifestResourceDataAsBase64WithTypeWorks);
            QUnit.test("Reflection - Assembly GetManifestResourceDataWithoutTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.GetManifestResourceDataWithoutTypeWorks);
            QUnit.test("Reflection - Assembly GetManifestResourceDataWithTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests.GetManifestResourceDataWithTypeWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForAssemblyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.GetCustomAttributesForAssemblyWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForMemberInfoWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.GetCustomAttributesForMemberInfoWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForMemberInfoInheritTrueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.GetCustomAttributesForMemberInfoInheritTrueWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForMemberInfoInheritFalseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.GetCustomAttributesForMemberInfoInheritFalseWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForMemberInfoTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.GetCustomAttributesForMemberInfoTypeWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForMemberInfoTypeInheritFalseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.GetCustomAttributesForMemberInfoTypeInheritFalseWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForMemberInfoTypeInheritTrueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.GetCustomAttributesForMemberInfoTypeInheritTrueWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForParameterInfoWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.GetCustomAttributesForParameterInfoWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForParameterInfoInheritTrueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.GetCustomAttributesForParameterInfoInheritTrueWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForParameterInfoInheritFalseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.GetCustomAttributesForParameterInfoInheritFalseWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForParameterInfoTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.GetCustomAttributesForParameterInfoTypeWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForParameterInfoTypeInheritFalseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.GetCustomAttributesForParameterInfoTypeInheritFalseWorks);
            QUnit.test("Reflection - Attribute GetCustomAttributesForParameterInfoTypeInheritTrueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests.GetCustomAttributesForParameterInfoTypeInheritTrueWorks);
            QUnit.test("Reflection - GetMembers GetMembersWithoutBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetMembersWithoutBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetMembersWorksForInterface", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetMembersWorksForInterface);
            QUnit.test("Reflection - GetMembers GetMembersWithBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetMembersWithBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetMemberWithNameWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetMemberWithNameWorks);
            QUnit.test("Reflection - GetMembers GetMemberWithNameAndBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetMemberWithNameAndBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetConstructorsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetConstructorsWorks);
            QUnit.test("Reflection - GetMembers GetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetConstructorWorks);
            QUnit.test("Reflection - GetMembers GetMethodsWithoutBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetMethodsWithoutBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetMethodsWithBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetMethodsWithBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetMethodWithNameWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetMethodWithNameWorks);
            QUnit.test("Reflection - GetMembers GetMethodWithNameAndBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetMethodWithNameAndBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetMethodWithNameAndArgumentTypesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetMethodWithNameAndArgumentTypesWorks);
            QUnit.test("Reflection - GetMembers GetMethodWithNameAndArgumentTypesAndBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetMethodWithNameAndArgumentTypesAndBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetPropertiesWithoutBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetPropertiesWithoutBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetPropertiesWithBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetPropertiesWithBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetPropertyWithNameWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetPropertyWithNameWorks);
            QUnit.test("Reflection - GetMembers GetPropertyWithNameAndBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetPropertyWithNameAndBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetPropertyWithNameAndArgumentTypesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetPropertyWithNameAndArgumentTypesWorks);
            QUnit.test("Reflection - GetMembers GetPropertyWithNameAndArgumentTypesAndBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetPropertyWithNameAndArgumentTypesAndBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetFieldsWithoutBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetFieldsWithoutBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetFieldsWithBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetFieldsWithBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetFieldWithNameWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetFieldWithNameWorks);
            QUnit.test("Reflection - GetMembers GetFieldWithNameAndBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetFieldWithNameAndBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetEventsWithoutBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetEventsWithoutBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetEventsWithBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetEventsWithBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers GetEventWithNameWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetEventWithNameWorks);
            QUnit.test("Reflection - GetMembers GetEventWithNameAndBindingFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.GetEventWithNameAndBindingFlagsWorks);
            QUnit.test("Reflection - GetMembers IsOperatorForMemberInfoWorks", Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests.IsOperatorForMemberInfoWorks);
            QUnit.test("Reflection - Reflection GetMembersReturnsMethodsWithAnyScriptableAttributeOrReflectableAttribute", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.GetMembersReturnsMethodsWithAnyScriptableAttributeOrReflectableAttribute);
            QUnit.test("Reflection - Reflection StructMemberReflectionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.StructMemberReflectionWorks);
            QUnit.test("Reflection - Reflection IsStaticFlagWorksForMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.IsStaticFlagWorksForMethod);
            QUnit.test("Reflection - Reflection MemberTypeIsMethodForMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.MemberTypeIsMethodForMethod);
            QUnit.test("Reflection - Reflection IsConstructorIsFalseForMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.IsConstructorIsFalseForMethod);
            QUnit.test("Reflection - Reflection IsConstructorIsTrueForAllKindsOfConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.IsConstructorIsTrueForAllKindsOfConstructors);
            QUnit.test("Reflection - Reflection IsStaticIsFalseForAllKindsOfConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.IsStaticIsFalseForAllKindsOfConstructors);
            QUnit.test("Reflection - Reflection MemberTypeIsConstructorForAllKindsOfConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.MemberTypeIsConstructorForAllKindsOfConstructors);
            QUnit.test("Reflection - Reflection NameIsCtorForAllKindsOfConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.NameIsCtorForAllKindsOfConstructors);
            QUnit.test("Reflection - Reflection DeclaringTypeIsCorrectForAllKindsOfConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.DeclaringTypeIsCorrectForAllKindsOfConstructors);
            QUnit.test("Reflection - Reflection ScriptNameIsCorrectForAllKindsOfConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.ScriptNameIsCorrectForAllKindsOfConstructors);
            QUnit.test("Reflection - Reflection IsStaticMethodIsTrueOnlyForStaticMethodConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.IsStaticMethodIsTrueOnlyForStaticMethodConstructors);
            QUnit.test("Reflection - Reflection IsExpandParamsIsCorrectForConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.IsExpandParamsIsCorrectForConstructors);
            QUnit.test("Reflection - Reflection SpecialImplementationExistsOnlyForObjectLiteralAndInlineCodeConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.SpecialImplementationExistsOnlyForObjectLiteralAndInlineCodeConstructors);
            QUnit.test("Reflection - Reflection DeclaringTypeShouldBeCorrectForMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.DeclaringTypeShouldBeCorrectForMethods);
            QUnit.test("Reflection - Reflection ReturnTypeAndParameterTypesAreCorrectForMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.ReturnTypeAndParameterTypesAreCorrectForMethods);
            QUnit.test("Reflection - Reflection ParameterTypesShouldBeCorrectForConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.ParameterTypesShouldBeCorrectForConstructors);
            QUnit.test("Reflection - Reflection VoidIsConsideredObjectAsReturnType", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.VoidIsConsideredObjectAsReturnType);
            QUnit.test("Reflection - Reflection MethodNameIsTheCSharpName", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.MethodNameIsTheCSharpName);
            QUnit.test("Reflection - Reflection TypeParametersAreReplacedWithObjectForReturnAndParameterTypesForOpenGenericTypes", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.TypeParametersAreReplacedWithObjectForReturnAndParameterTypesForOpenGenericTypes);
            QUnit.test("Reflection - Reflection TypeParametersAreCorrectForReturnAndParameterTypesForConstructedGenericTypes", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.TypeParametersAreCorrectForReturnAndParameterTypesForConstructedGenericTypes);
            QUnit.test("Reflection - Reflection MethodTypeParametersAreReplacedWithObjectForReturnAndParameterTypes", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.MethodTypeParametersAreReplacedWithObjectForReturnAndParameterTypes);
            QUnit.test("Reflection - Reflection IsGenericMethodDefinitionAndTypeParameterCountWork", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.IsGenericMethodDefinitionAndTypeParameterCountWork);
            QUnit.test("Reflection - Reflection ScriptNameWorksForAllKindsOfMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.ScriptNameWorksForAllKindsOfMethods);
            QUnit.test("Reflection - Reflection SpecialImplementationExistsOnlyForMethodsImplementedAsInlineCode", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.SpecialImplementationExistsOnlyForMethodsImplementedAsInlineCode);
            QUnit.test("Reflection - Reflection IsExpandParamsIsCorrectForMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.IsExpandParamsIsCorrectForMethods);
            QUnit.test("Reflection - Reflection CreateDelegateWorksForNonGenericInstanceMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.CreateDelegateWorksForNonGenericInstanceMethods);
            QUnit.test("Reflection - Reflection DelegateCreateDelegateWorksForNonGenericInstanceMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.DelegateCreateDelegateWorksForNonGenericInstanceMethods);
            QUnit.test("Reflection - Reflection CreateDelegateWorksNonGenericStaticMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.CreateDelegateWorksNonGenericStaticMethods);
            QUnit.test("Reflection - Reflection CreateDelegateWorksNonGenericStaticMethodOfGenericType", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.CreateDelegateWorksNonGenericStaticMethodOfGenericType);
            QUnit.test("Reflection - Reflection CreateDelegateWorksForGenericInstanceMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.CreateDelegateWorksForGenericInstanceMethods);
            QUnit.test("Reflection - Reflection CreateDelegateWorksForGenericStaticMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.CreateDelegateWorksForGenericStaticMethods);
            QUnit.test("Reflection - Reflection InvokeWorksForNonGenericInstanceMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.InvokeWorksForNonGenericInstanceMethods);
            QUnit.test("Reflection - Reflection InvokeWorksForNonGenericStaticMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.InvokeWorksForNonGenericStaticMethods);
            QUnit.test("Reflection - Reflection InvokeWorksForNonGenericInstanceMethodsOnSerializableTypes", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.InvokeWorksForNonGenericInstanceMethodsOnSerializableTypes);
            QUnit.test("Reflection - Reflection InvokeWorksForNonGenericInlineCodeMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.InvokeWorksForNonGenericInlineCodeMethods);
            QUnit.test("Reflection - Reflection InvokeWorksForGenericInlineCodeMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.InvokeWorksForGenericInlineCodeMethods);
            QUnit.test("Reflection - Reflection InvokeWorksForGenericInstanceMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.InvokeWorksForGenericInstanceMethod);
            QUnit.test("Reflection - Reflection InvokeWorksForGenericStaticMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.InvokeWorksForGenericStaticMethod);
            QUnit.test("Reflection - Reflection InvokeWorksForGenericInstanceMethodsOnSerializableTypes", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.InvokeWorksForGenericInstanceMethodsOnSerializableTypes);
            QUnit.test("Reflection - Reflection InvokeWorksForExpandParamsMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.InvokeWorksForExpandParamsMethods);
            QUnit.test("Reflection - Reflection InvokeWorksForAllKindsOfConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.InvokeWorksForAllKindsOfConstructors);
            QUnit.test("Reflection - Reflection InvokeWorksForExpandParamsConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.InvokeWorksForExpandParamsConstructors);
            QUnit.test("Reflection - Reflection MemberTypeIsFieldForField", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.MemberTypeIsFieldForField);
            QUnit.test("Reflection - Reflection DeclaringTypeIsCorrectForField", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.DeclaringTypeIsCorrectForField);
            QUnit.test("Reflection - Reflection NameIsCorrectForField", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.NameIsCorrectForField);
            QUnit.test("Reflection - Reflection IsStaticIsCorrectForField", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.IsStaticIsCorrectForField);
            QUnit.test("Reflection - Reflection FieldTypeIsCorrectForField", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.FieldTypeIsCorrectForField);
            QUnit.test("Reflection - Reflection ScriptNameIsCorrectForField", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.ScriptNameIsCorrectForField);
            QUnit.test("Reflection - Reflection GetValueWorksForInstanceField", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.GetValueWorksForInstanceField);
            QUnit.test("Reflection - Reflection GetValueWorksForStaticField", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.GetValueWorksForStaticField);
            QUnit.test("Reflection - Reflection SetValueWorksForInstanceField", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.SetValueWorksForInstanceField);
            QUnit.test("Reflection - Reflection SetValueWorksForStaticField", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.SetValueWorksForStaticField);
            QUnit.test("Reflection - Reflection MemberTypeIsEventForEvent", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.MemberTypeIsEventForEvent);
            QUnit.test("Reflection - Reflection DeclaringTypeIsCorrectForEvent", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.DeclaringTypeIsCorrectForEvent);
            QUnit.test("Reflection - Reflection NameIsCorrectForEvent", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.NameIsCorrectForEvent);
            QUnit.test("Reflection - Reflection IsStaticIsCorrectForEvent", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.IsStaticIsCorrectForEvent);
            QUnit.test("Reflection - Reflection AddEventHandlerMethodWorksForInstanceEvent", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.AddEventHandlerMethodWorksForInstanceEvent);
            QUnit.test("Reflection - Reflection AddEventHandlerMethodWorksForInstanceEventWithInlineCodeAddMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.AddEventHandlerMethodWorksForInstanceEventWithInlineCodeAddMethod);
            QUnit.test("Reflection - Reflection AddEventHandlerMethodWorksForStaticEvent", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.AddEventHandlerMethodWorksForStaticEvent);
            QUnit.test("Reflection - Reflection AddEventHandlerMethodWorksForStaticEventWithInlineCodeAddMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.AddEventHandlerMethodWorksForStaticEventWithInlineCodeAddMethod);
            QUnit.test("Reflection - Reflection RemoveEventHandlerMethodWorksForInstanceEvent", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.RemoveEventHandlerMethodWorksForInstanceEvent);
            QUnit.test("Reflection - Reflection RemoveEventHandlerMethodWorksForInstanceEventWithInlineCodeRemoveMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.RemoveEventHandlerMethodWorksForInstanceEventWithInlineCodeRemoveMethod);
            QUnit.test("Reflection - Reflection RemoveEventHandlerMethodWorksForStaticEvent", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.RemoveEventHandlerMethodWorksForStaticEvent);
            QUnit.test("Reflection - Reflection RemoveEventHandlerMethodWorksForStaticEventWithInlineCodeRemoveMethod", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.RemoveEventHandlerMethodWorksForStaticEventWithInlineCodeRemoveMethod);
            QUnit.test("Reflection - Reflection PropertiesForAddMethodAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.PropertiesForAddMethodAreCorrect);
            QUnit.test("Reflection - Reflection PropertiesForRemoveMethodAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.PropertiesForRemoveMethodAreCorrect);
            QUnit.test("Reflection - Reflection MemberTypeIsPropertyForProperty", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.MemberTypeIsPropertyForProperty);
            QUnit.test("Reflection - Reflection ScriptFieldNameIsCorrectForPropertiesImplementedAsFieldAndNullForOtherProperties", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.ScriptFieldNameIsCorrectForPropertiesImplementedAsFieldAndNullForOtherProperties);
            QUnit.test("Reflection - Reflection MemberTypeIsPropertyForIndexer", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.MemberTypeIsPropertyForIndexer);
            QUnit.test("Reflection - Reflection DeclaringTypeIsCorrectForProperty", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.DeclaringTypeIsCorrectForProperty);
            QUnit.test("Reflection - Reflection DeclaringTypeIsCorrectForIndexer", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.DeclaringTypeIsCorrectForIndexer);
            QUnit.test("Reflection - Reflection NameIsCorrectForProperty", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.NameIsCorrectForProperty);
            QUnit.test("Reflection - Reflection NameIsCorrectForIndexer", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.NameIsCorrectForIndexer);
            QUnit.test("Reflection - Reflection IsStaticIsCorrectForProperty", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.IsStaticIsCorrectForProperty);
            QUnit.test("Reflection - Reflection IsStaticIsFalseForIndexer", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.IsStaticIsFalseForIndexer);
            QUnit.test("Reflection - Reflection PropertyTypeIsCorrectForProperty", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.PropertyTypeIsCorrectForProperty);
            QUnit.test("Reflection - Reflection PropertyTypeIsCorrectForIndexer", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.PropertyTypeIsCorrectForIndexer);
            QUnit.test("Reflection - Reflection IndexParameterTypesAreEmptyForProperty", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.IndexParameterTypesAreEmptyForProperty);
            QUnit.test("Reflection - Reflection IndexParameterTypesAreCorrectForIndexer", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.IndexParameterTypesAreCorrectForIndexer);
            QUnit.test("Reflection - Reflection PropertiesForGetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.PropertiesForGetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods);
            QUnit.test("Reflection - Reflection PropertiesForSetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.PropertiesForSetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods);
            QUnit.test("Reflection - Reflection PropertiesForGetMethodAreCorrectForPropertyImplementedAsFields", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.PropertiesForGetMethodAreCorrectForPropertyImplementedAsFields);
            QUnit.test("Reflection - Reflection PropertiesForSetMethodAreCorrectForPropertyImplementedAsFields", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.PropertiesForSetMethodAreCorrectForPropertyImplementedAsFields);
            QUnit.test("Reflection - Reflection PropertiesForGetMethodAreCorrectForIndexer", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.PropertiesForGetMethodAreCorrectForIndexer);
            QUnit.test("Reflection - Reflection PropertiesForSetMethodAreCorrectForIndexer", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.PropertiesForSetMethodAreCorrectForIndexer);
            QUnit.test("Reflection - Reflection CanReadAndWriteAndPropertiesWithOnlyOneAccessor", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.CanReadAndWriteAndPropertiesWithOnlyOneAccessor);
            QUnit.test("Reflection - Reflection CanReadAndWriteAndIndexersWithOnlyOneAccessor", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.CanReadAndWriteAndIndexersWithOnlyOneAccessor);
            QUnit.test("Reflection - Reflection PropertyInfoGetValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.PropertyInfoGetValueWorks);
            QUnit.test("Reflection - Reflection PropertyInfoSetValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.PropertyInfoSetValueWorks);
            QUnit.test("Reflection - Reflection MemberAttributesWork", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.MemberAttributesWork);
            QUnit.test("Reflection - Reflection MembersReflectableAttributeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests.MembersReflectableAttributeWorks);
            QUnit.test("Reflection - Type attributes CanGetCustomTypeAttributesForTypeWithNoAttributes", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.CanGetCustomTypeAttributesForTypeWithNoAttributes);
            QUnit.test("Reflection - Type attributes CanGetCustomTypeAttributesForClassWithAttributes", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.CanGetCustomTypeAttributesForClassWithAttributes);
            QUnit.test("Reflection - Type attributes NonScriptableAttributesAreNotIncluded", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.NonScriptableAttributesAreNotIncluded);
            QUnit.test("Reflection - Type attributes CanGetCustomTypeAttributesForInterfaceWithAttributes", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.CanGetCustomTypeAttributesForInterfaceWithAttributes);
            QUnit.test("Reflection - Type attributes CanGetCustomTypeAttributesForEnumWithAttributes", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.CanGetCustomTypeAttributesForEnumWithAttributes);
            QUnit.test("Reflection - Type attributes InheritedFlagToGetCustomAttributesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.InheritedFlagToGetCustomAttributesWorks);
            QUnit.test("Reflection - Type attributes DeepInheritanceWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.DeepInheritanceWorks);
            QUnit.test("Reflection - Type attributes OverridingSingleUseAttributeReplacesTheAttributeOnTheBaseClass", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.OverridingSingleUseAttributeReplacesTheAttributeOnTheBaseClass);
            QUnit.test("Reflection - Type attributes ApplyingNewInstanceOfMultipleUseAttributeAddsTheAttribute", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.ApplyingNewInstanceOfMultipleUseAttributeAddsTheAttribute);
            QUnit.test("Reflection - Type attributes NonInheritedAttributeIsNotInherited", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.NonInheritedAttributeIsNotInherited);
            QUnit.test("Reflection - Type attributes GetCustomAttributesTypeFilterWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.GetCustomAttributesTypeFilterWorks);
            QUnit.test("Reflection - Type attributes GetCustomAttributesWorksForOpenGenericClass", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.GetCustomAttributesWorksForOpenGenericClass);
            QUnit.test("Reflection - Type attributes GetCustomAttributesWorksForConstructedGenericClass", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.GetCustomAttributesWorksForConstructedGenericClass);
            QUnit.test("Reflection - Type attributes GetCustomAttributesWorksForOpenGenericInterface", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.GetCustomAttributesWorksForOpenGenericInterface);
            QUnit.test("Reflection - Type attributes GetCustomAttributesWorksForConstructedGenericInterface", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.GetCustomAttributesWorksForConstructedGenericInterface);
            QUnit.test("Reflection - Type attributes AllSupportedScalarTypesCanBeUsedAsAttributeArguments", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.AllSupportedScalarTypesCanBeUsedAsAttributeArguments);
            QUnit.test("Reflection - Type attributes ArraysCanBeUsedAsAttributeArguments", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.ArraysCanBeUsedAsAttributeArguments);
            QUnit.test("Reflection - Type attributes NamedValuesEnumCanBeUsedAsAttributeArgument", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.NamedValuesEnumCanBeUsedAsAttributeArgument);
            QUnit.test("Reflection - Type attributes PropertiesWithSetMethodsImplementedAsNormalMethodsCanBeSetInAttributeDeclaration", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.PropertiesWithSetMethodsImplementedAsNormalMethodsCanBeSetInAttributeDeclaration);
            QUnit.test("Reflection - Type attributes PropertiesWithSetMethodsImplementedAsInlineCodeCanBeSetInAttributeDeclaration", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.PropertiesWithSetMethodsImplementedAsInlineCodeCanBeSetInAttributeDeclaration);
            QUnit.test("Reflection - Type attributes PropertiesImplementedAsFieldsCanBeAssignedInAttributeDeclaration", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.PropertiesImplementedAsFieldsCanBeAssignedInAttributeDeclaration);
            QUnit.test("Reflection - Type attributes FieldsCanBeAssignedInAttributeDeclaration", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.FieldsCanBeAssignedInAttributeDeclaration);
            QUnit.test("Reflection - Type attributes CreatingAttributeWithNamedConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.CreatingAttributeWithNamedConstructorWorks);
            QUnit.test("Reflection - Type attributes CreatingAttributeWithInlineCodeConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.CreatingAttributeWithInlineCodeConstructorWorks);
            QUnit.test("Reflection - Type attributes ConditionalAttributesWhoseSymbolsAreNotDefinedAreRemoved", Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests.ConditionalAttributesWhoseSymbolsAreNotDefinedAreRemoved);
            QUnit.test("Reflection - TypeSystemLanguageSupport TypeIsWorksForReferenceTypes", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests.TypeIsWorksForReferenceTypes);
            QUnit.test("Reflection - TypeSystemLanguageSupport TypeAsWorksForReferenceTypes", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests.TypeAsWorksForReferenceTypes);
            QUnit.test("Reflection - TypeSystemLanguageSupport CastWorksForReferenceTypes", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests.CastWorksForReferenceTypes);
            QUnit.test("Reflection - TypeSystemLanguageSupport GetTypeWorksOnObjects", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests.GetTypeWorksOnObjects);
            QUnit.test("Reflection - TypeSystemLanguageSupport GetTypeOnNullInstanceThrowsException", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests.GetTypeOnNullInstanceThrowsException);
            QUnit.test("Reflection - TypeSystemLanguageSupport CastOperatorForSerializableTypeWithoutTypeCheckCodeAlwaysSucceedsGeneric", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests.CastOperatorForSerializableTypeWithoutTypeCheckCodeAlwaysSucceedsGeneric);
            QUnit.test("Reflection - TypeSystemLanguageSupport TypeCheckForSubTypeOfGenericType", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests.TypeCheckForSubTypeOfGenericType);
            QUnit.test("Reflection - TypeSystem FullNamePropertyReturnsTheNameWithTheNamespace", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.FullNamePropertyReturnsTheNameWithTheNamespace);
            QUnit.test("Reflection - TypeSystem AssemblyQualifiedNameReturnsTheNameWithTheNamespaceAndAssemblyName", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.AssemblyQualifiedNameReturnsTheNameWithTheNamespaceAndAssemblyName);
            QUnit.test("Reflection - TypeSystem AssemblyPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.AssemblyPropertyWorks);
            QUnit.test("Reflection - TypeSystem NamespacePropertyReturnsTheNamespaceWithoutTheName", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.NamespacePropertyReturnsTheNamespaceWithoutTheName);
            QUnit.test("Reflection - TypeSystem InstantiatingClassWithConstructorThatNeedsToBeAppliedWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.InstantiatingClassWithConstructorThatNeedsToBeAppliedWorks);
            QUnit.test("Reflection - TypeSystem NamePropertyRemovesTheNamespace", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.NamePropertyRemovesTheNamespace);
            QUnit.test("Reflection - TypeSystem GettingBaseTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.GettingBaseTypeWorks);
            QUnit.test("Reflection - TypeSystem GettingImplementedInterfacesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.GettingImplementedInterfacesWorks);
            QUnit.test("Reflection - TypeSystem TypeOfAnOpenGenericClassWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.TypeOfAnOpenGenericClassWorks);
            QUnit.test("Reflection - TypeSystem TypeOfAnOpenGenericInterfaceWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.TypeOfAnOpenGenericInterfaceWorks);
            QUnit.test("Reflection - TypeSystem TypeOfInstantiatedGenericClassWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.TypeOfInstantiatedGenericClassWorks);
            QUnit.test("Reflection - TypeSystem TypeOfInstantiatedGenericInterfaceWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.TypeOfInstantiatedGenericInterfaceWorks);
            QUnit.test("Reflection - TypeSystem ConstructingAGenericTypeTwiceWithTheSameArgumentsReturnsTheSameInstance", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.ConstructingAGenericTypeTwiceWithTheSameArgumentsReturnsTheSameInstance);
            QUnit.test("Reflection - TypeSystem AccessingAStaticMemberInAGenericClassWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.AccessingAStaticMemberInAGenericClassWorks);
            QUnit.test("Reflection - TypeSystem TypeOfNestedGenericClassWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.TypeOfNestedGenericClassWorks);
            QUnit.test("Reflection - TypeSystem BaseTypeAndImplementedInterfacesForGenericTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.BaseTypeAndImplementedInterfacesForGenericTypeWorks);
            QUnit.test("Reflection - TypeSystem IsAbstractWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsAbstractWorks);
            QUnit.test("Reflection - TypeSystem IsGenericTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsGenericTypeWorks);
            QUnit.test("Reflection - TypeSystem IsNestedWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsNestedWorks);
            QUnit.test("Reflection - TypeSystem IsPublicWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsPublicWorks);
            QUnit.test("Reflection - TypeSystem IsNestedPublicWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsNestedPublicWorks);
            QUnit.test("Reflection - TypeSystem IsNestedPrivateWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsNestedPrivateWorks);
            QUnit.test("Reflection - TypeSystem IsNestedFamilyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsNestedFamilyWorks);
            QUnit.test("Reflection - TypeSystem IsNestedAssemblyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsNestedAssemblyWorks);
            QUnit.test("Reflection - TypeSystem IsNotPublicWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsNotPublicWorks);
            QUnit.test("Reflection - TypeSystem IsSealedWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsSealedWorks);
            QUnit.test("Reflection - TypeSystem AttributesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.AttributesWorks);
            QUnit.test("Reflection - TypeSystem ContainsGenericParametersWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.ContainsGenericParametersWorks);
            QUnit.test("Reflection - TypeSystem DeclaringTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.DeclaringTypeWorks);
            QUnit.test("Reflection - TypeSystem IsGenericParameterWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsGenericParameterWorks);
            QUnit.test("Reflection - TypeSystem GetEnumNamesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.GetEnumNamesWorks);
            QUnit.test("Reflection - TypeSystem GetEnumNameWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.GetEnumNameWorks);
            QUnit.test("Reflection - TypeSystem GetEnumValuesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.GetEnumValuesWorks);
            QUnit.test("Reflection - TypeSystem GetEnumUnderlyingTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.GetEnumUnderlyingTypeWorks);
            QUnit.test("Reflection - TypeSystem IsGenericTypeDefinitionWorksAsExpected", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsGenericTypeDefinitionWorksAsExpected);
            QUnit.test("Reflection - TypeSystem GenericParameterCountReturnsZeroForConstructedTypesAndNonZeroForOpenOnes", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.GenericParameterCountReturnsZeroForConstructedTypesAndNonZeroForOpenOnes);
            QUnit.test("Reflection - TypeSystem GetGenericArgumentsReturnsTheCorrectTypesForConstructedTypesOtherwiseNull", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.GetGenericArgumentsReturnsTheCorrectTypesForConstructedTypesOtherwiseNull);
            QUnit.test("Reflection - TypeSystem GetGenericTypeDefinitionReturnsTheGenericTypeDefinitionForConstructedTypeOtherwiseNull", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.GetGenericTypeDefinitionReturnsTheGenericTypeDefinitionForConstructedTypeOtherwiseNull);
            QUnit.test("Reflection - TypeSystem IsAssignableFromWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsAssignableFromWorks);
            QUnit.test("Reflection - TypeSystem IsSubclassOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsSubclassOfWorks);
            QUnit.test("Reflection - TypeSystem IsClassWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsClassWorks);
            QUnit.test("Reflection - TypeSystem IsEnumWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsEnumWorks);
            QUnit.test("Reflection - TypeSystem IsArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsArrayWorks);
            QUnit.test("Reflection - TypeSystem IsFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsFlagsWorks);
            QUnit.test("Reflection - TypeSystem IsInterfaceWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsInterfaceWorks);
            QUnit.test("Reflection - TypeSystem IsInstanceOfTypeWorksForReferenceTypes", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.IsInstanceOfTypeWorksForReferenceTypes);
            QUnit.test("Reflection - TypeSystem InvokingBaseUnnamedConstructorWithoutArgumentsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.InvokingBaseUnnamedConstructorWithoutArgumentsWorks);
            QUnit.test("Reflection - TypeSystem InvokingBaseUnnamedConstructorWithArgumentsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.InvokingBaseUnnamedConstructorWithArgumentsWorks);
            QUnit.test("Reflection - TypeSystem InvokingBaseNamedConstructorWithoutArgumentsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.InvokingBaseNamedConstructorWithoutArgumentsWorks);
            QUnit.test("Reflection - TypeSystem InvokingBaseNamedConstructorWithArgumentsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.InvokingBaseNamedConstructorWithArgumentsWorks);
            QUnit.test("Reflection - TypeSystem ConstructingInstanceWithNamedConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.ConstructingInstanceWithNamedConstructorWorks);
            QUnit.test("Reflection - TypeSystem ConstructingInstanceWithNamedConstructorWorks2", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.ConstructingInstanceWithNamedConstructorWorks2);
            QUnit.test("Reflection - TypeSystem InvokingBaseMethodWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.InvokingBaseMethodWorks);
            QUnit.test("Reflection - TypeSystem InvokingGenericBaseMethodWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.InvokingGenericBaseMethodWorks);
            QUnit.test("Reflection - TypeSystem MethodGroupConversionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.MethodGroupConversionWorks);
            QUnit.test("Reflection - TypeSystem MethodGroupConversionOnGenericMethodWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.MethodGroupConversionOnGenericMethodWorks);
            QUnit.test("Reflection - TypeSystem MethodGroupConversionOnBaseMethodWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.MethodGroupConversionOnBaseMethodWorks);
            QUnit.test("Reflection - TypeSystem MethodGroupConversionOnGenericBaseMethodWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.MethodGroupConversionOnGenericBaseMethodWorks);
            QUnit.test("Reflection - TypeSystem ImportedInterfaceAppearsAsObjectWhenUsedAsGenericArgument", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.ImportedInterfaceAppearsAsObjectWhenUsedAsGenericArgument);
            QUnit.test("Reflection - TypeSystem FalseIsFunctionShouldReturnFalse", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.FalseIsFunctionShouldReturnFalse);
            QUnit.test("Reflection - TypeSystem CastingUndefinedToOtherTypeShouldReturnUndefined", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.CastingUndefinedToOtherTypeShouldReturnUndefined);
            QUnit.test("Reflection - TypeSystem NonSerializableTypeCanInheritFromSerializableType", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.NonSerializableTypeCanInheritFromSerializableType);
            QUnit.test("Reflection - TypeSystem InheritingFromRecordWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.InheritingFromRecordWorks);
            QUnit.test("Reflection - TypeSystem InstanceOfWorksForSerializableTypesWithCustomTypeCheckCode", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.InstanceOfWorksForSerializableTypesWithCustomTypeCheckCode);
            QUnit.test("Reflection - TypeSystem StaticGetTypeMethodWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.StaticGetTypeMethodWorks);
            QUnit.test("Reflection - TypeSystem StaticGetTypeMethodWithGenericsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.StaticGetTypeMethodWithGenericsWorks);
            QUnit.test("Reflection - TypeSystem CastingToNamedValuesEnumCastsToString", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.CastingToNamedValuesEnumCastsToString);
            QUnit.test("Reflection - TypeSystem CastingToImportedNamedValuesEnumCastsToString", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.CastingToImportedNamedValuesEnumCastsToString);
            QUnit.test("Reflection - TypeSystem DefaultValueOfNamedValuesEnumIsNull", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.DefaultValueOfNamedValuesEnumIsNull);
            QUnit.test("Reflection - TypeSystem DefaultValueOfImportedNamedValuesEnumIsNull", Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests.DefaultValueOfImportedNamedValuesEnumIsNull);
            QUnit.module("Regex");
            QUnit.test("Regex.IsMatch - IsMatchTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexIsMatchTests.IsMatchTest);
            QUnit.test("Regex.IsMatch - IsMatchWithOffsetTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexIsMatchTests.IsMatchWithOffsetTest);
            QUnit.test("Regex.IsMatch - IsMatchStaticTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexIsMatchTests.IsMatchStaticTest);
            QUnit.test("Regex.IsMatch - IsMatchStaticWithOptionsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexIsMatchTests.IsMatchStaticWithOptionsTest);
            QUnit.test("Regex.IsMatch - IsMatchStaticWithOptionsAndTimeoutTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexIsMatchTests.IsMatchStaticWithOptionsAndTimeoutTest);
            QUnit.test("Regex.Replace - ReplaceTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.ReplaceTest1);
            QUnit.test("Regex.Replace - ReplaceAtPositionTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.ReplaceAtPositionTest);
            QUnit.test("Regex.Replace - ReplaceAtPositionAndLengthTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.ReplaceAtPositionAndLengthTest);
            QUnit.test("Regex.Replace - ReplaceWithEvaluatorTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.ReplaceWithEvaluatorTest);
            QUnit.test("Regex.Replace - ReplaceWithEvaluatorAndCountTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.ReplaceWithEvaluatorAndCountTest);
            QUnit.test("Regex.Replace - ReplaceWithEvaluatorAndCountAtPostitionTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.ReplaceWithEvaluatorAndCountAtPostitionTest);
            QUnit.test("Regex.Replace - ReplaceStaticTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.ReplaceStaticTest1);
            QUnit.test("Regex.Replace - ReplaceStaticTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.ReplaceStaticTest2);
            QUnit.test("Regex.Replace - ReplaceStaticWithOptionsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.ReplaceStaticWithOptionsTest);
            QUnit.test("Regex.Replace - ReplaceStaticWithOptionsAndTimeoutTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.ReplaceStaticWithOptionsAndTimeoutTest);
            QUnit.test("Regex.Replace - ReplaceStaticWithEvaluatorTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.ReplaceStaticWithEvaluatorTest);
            QUnit.test("Regex.Replace - ReplaceStaticWithEvaluatorAndOptionsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.ReplaceStaticWithEvaluatorAndOptionsTest);
            QUnit.test("Regex.Replace - ReplaceStaticWithEvaluatorAndOptionsAndTimoutTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests.ReplaceStaticWithEvaluatorAndOptionsAndTimoutTest);
            QUnit.test("Regex.Split - SplitTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitTest1);
            QUnit.test("Regex.Split - SplitTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitTest2);
            QUnit.test("Regex.Split - SplitTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitTest3);
            QUnit.test("Regex.Split - SplitTest4", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitTest4);
            QUnit.test("Regex.Split - SplitTest5", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitTest5);
            QUnit.test("Regex.Split - SplitWithCountTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitWithCountTest1);
            QUnit.test("Regex.Split - SplitWithCountTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitWithCountTest2);
            QUnit.test("Regex.Split - SplitWithCountTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitWithCountTest3);
            QUnit.test("Regex.Split - SplitWithCountTest4", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitWithCountTest4);
            QUnit.test("Regex.Split - SplitWithCountAndStartAtTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitWithCountAndStartAtTest1);
            QUnit.test("Regex.Split - SplitWithCountAndStartAtTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitWithCountAndStartAtTest2);
            QUnit.test("Regex.Split - SplitWithCountAndStartAtTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitWithCountAndStartAtTest3);
            QUnit.test("Regex.Split - SplitWithCountAndStartAtTest4", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitWithCountAndStartAtTest4);
            QUnit.test("Regex.Split - SplitStaticTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitStaticTest1);
            QUnit.test("Regex.Split - SplitStaticTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitStaticTest2);
            QUnit.test("Regex.Split - SplitStaticTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitStaticTest3);
            QUnit.test("Regex.Split - SplitStaticTest4", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitStaticTest4);
            QUnit.test("Regex.Split - SplitStaticTest5", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitStaticTest5);
            QUnit.test("Regex.Split - SplitStaticWithOptionsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitStaticWithOptionsTest);
            QUnit.test("Regex.Split - SplitStaticWithOptionsAndTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests.SplitStaticWithOptionsAndTimeout);
            QUnit.test("RegexCaptureCollection Entity - CaseDataTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCaptureCollectionTests.CaseDataTest);
            QUnit.test("RegexCaptureCollection Entity - CaptureCollectionFieldsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCaptureCollectionTests.CaptureCollectionFieldsTest);
            QUnit.test("RegexCaptureCollection Entity - CaptureCollectionForeachTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCaptureCollectionTests.CaptureCollectionForeachTest);
            QUnit.test("RegexCaptureCollection Entity - CaptureCollectionEnumeratorTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCaptureCollectionTests.CaptureCollectionEnumeratorTest);
            QUnit.test("RegexCaptureCollection Entity - CaptureCollectionCopyToTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCaptureCollectionTests.CaptureCollectionCopyToTest);
            QUnit.test("Regex Entity - CaseDataTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.CaseDataTest);
            QUnit.test("Regex Entity - GetGroupNamesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.GetGroupNamesTest);
            QUnit.test("Regex Entity - GetGroupNumbersTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.GetGroupNumbersTest);
            QUnit.test("Regex Entity - GroupNameFromNumberTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.GroupNameFromNumberTest);
            QUnit.test("Regex Entity - GroupNumberFromNameTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.GroupNumberFromNameTest);
            QUnit.test("Regex Entity - SupportedOptionsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.SupportedOptionsTest);
            QUnit.test("Regex Entity - MatchNamedGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.MatchNamedGroupTest);
            QUnit.test("Regex Entity - MatchInnerNamedGroupTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.MatchInnerNamedGroupTest1);
            QUnit.test("Regex Entity - MatchInnerNamedGroupTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.MatchInnerNamedGroupTest2);
            QUnit.test("Regex Entity - GroupOrderingTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.GroupOrderingTest);
            QUnit.test("Regex Entity - RepeatingGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.RepeatingGroupTest);
            QUnit.test("Regex Entity - ZeroResultTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.ZeroResultTest);
            QUnit.test("Regex Entity - NonCapturingGroupsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests.NonCapturingGroupsTest);
            QUnit.test("RegexGroupCollection Entity - CaseDataTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexGroupCollectionTests.CaseDataTest);
            QUnit.test("RegexGroupCollection Entity - GroupCollectionFieldsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexGroupCollectionTests.GroupCollectionFieldsTest);
            QUnit.test("RegexGroupCollection Entity - GroupCollectionForeachTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexGroupCollectionTests.GroupCollectionForeachTest);
            QUnit.test("RegexGroupCollection Entity - GroupCollectionEnumeratorTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexGroupCollectionTests.GroupCollectionEnumeratorTest);
            QUnit.test("RegexGroupCollection Entity - GroupCollectionCopyToTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexGroupCollectionTests.GroupCollectionCopyToTest);
            QUnit.test("RegexMatchCollection Entity - CaseDataTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests.CaseDataTest);
            QUnit.test("RegexMatchCollection Entity - MatchCollectionFieldsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests.MatchCollectionFieldsTest);
            QUnit.test("RegexMatchCollection Entity - MatchCollectionItemsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests.MatchCollectionItemsTest);
            QUnit.test("RegexMatchCollection Entity - MatchCollectionForeachTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests.MatchCollectionForeachTest);
            QUnit.test("RegexMatchCollection Entity - MatchCollectionEnumeratorTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests.MatchCollectionEnumeratorTest);
            QUnit.test("RegexMatchCollection Entity - MatchCollectionCopyToTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests.MatchCollectionCopyToTest);
            QUnit.test("RegexMatchCollection Entity - MatchCollectionWithEmptyPatternTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests.MatchCollectionWithEmptyPatternTest);
            QUnit.test("Match Entity - CaseDataTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests.CaseDataTest);
            QUnit.test("Match Entity - MatchEmptyPatternTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests.MatchEmptyPatternTest);
            QUnit.test("Match Entity - MatchEmptyFieldsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests.MatchEmptyFieldsTest);
            QUnit.test("Match Entity - MatchNextMatchTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests.MatchNextMatchTest);
            QUnit.test("Match Entity - MatchNextMatchWithEmptyPatternTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests.MatchNextMatchWithEmptyPatternTest);
            QUnit.test("Match Entity - MatchResultTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests.MatchResultTest);
            QUnit.test("Match Entity - MatchSearchGroupByNameTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests.MatchSearchGroupByNameTest);
            QUnit.test("MatchSparse Entity - GroupOrderingTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchSparseTests.GroupOrderingTest1);
            QUnit.test("MatchSparse Entity - GroupOrderingTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchSparseTests.GroupOrderingTest2);
            QUnit.test("MatchSparse Entity - GroupOrderingTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchSparseTests.GroupOrderingTest3);
            QUnit.test("MatchSparse Entity - SparseOrderingTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchSparseTests.SparseOrderingTest);
            QUnit.test("MatchSparse Entity - GroupCapturesMergeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchSparseTests.GroupCapturesMergeTest);
            QUnit.test("Regex.Escape - MsdnEscapeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapeTests.MsdnEscapeTest);
            QUnit.test("Regex.Escape - MsdnUnescapeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapeTests.MsdnUnescapeTest);
            QUnit.test("Regex.Escape - EscapeCharSetTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapeTests.EscapeCharSetTest);
            QUnit.test("Regex.Escape - NonEscapeCharSetTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapeTests.NonEscapeCharSetTest);
            QUnit.test("Regex.Matches - MatchesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchesTests.MatchesTest);
            QUnit.test("Regex.Matches - MatchesAtPositionTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchesTests.MatchesAtPositionTest);
            QUnit.test("Regex.Matches - MatchesStaticTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchesTests.MatchesStaticTest);
            QUnit.test("Regex.Matches - MatchesStaticWithOptionsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchesTests.MatchesStaticWithOptionsTest);
            QUnit.test("Regex.Matches - MatchesStaticWithOptionsAndTimeoutTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchesTests.MatchesStaticWithOptionsAndTimeoutTest);
            QUnit.test("Regex.Match - MatchTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests.MatchTest);
            QUnit.test("Regex.Match - MatchAtPositionTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests.MatchAtPositionTest);
            QUnit.test("Regex.Match - MatchAtPositionAndLengthTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests.MatchAtPositionAndLengthTest);
            QUnit.test("Regex.Match - MatchStaticTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests.MatchStaticTest);
            QUnit.test("Regex.Match - MatchStaticWithOptionsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests.MatchStaticWithOptionsTest);
            QUnit.test("Regex.Match - MatchStaticWithOptionsAndTimeoutTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests.MatchStaticWithOptionsAndTimeoutTest);
            QUnit.test("Regex: Alternations - MsdnSimpleAlternationTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.MsdnSimpleAlternationTest1);
            QUnit.test("Regex: Alternations - MsdnSimpleAlternationTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.MsdnSimpleAlternationTest2);
            QUnit.test("Regex: Alternations - MsdnSimpleAlternationTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.MsdnSimpleAlternationTest3);
            QUnit.test("Regex: Alternations - MsdnAlternationExprTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.MsdnAlternationExprTest1);
            QUnit.test("Regex: Alternations - MsdnAlternationExprTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.MsdnAlternationExprTest2);
            QUnit.test("Regex: Alternations - MsdnAlternationGroupNameExprTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.MsdnAlternationGroupNameExprTest1);
            QUnit.test("Regex: Alternations - MsdnAlternationGroupNameExprTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.MsdnAlternationGroupNameExprTest2);
            QUnit.test("Regex: Alternations - MsdnAlternationGroupNumberExprTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.MsdnAlternationGroupNumberExprTest);
            QUnit.test("Regex: Alternations - SimpleAlternationTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.SimpleAlternationTest);
            QUnit.test("Regex: Alternations - SimpleAlternationTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.SimpleAlternationTest2);
            QUnit.test("Regex: Alternations - SimpleAlternationTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.SimpleAlternationTest3);
            QUnit.test("Regex: Alternations - AlternationWithGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationWithGroupTest);
            QUnit.test("Regex: Alternations - AlternationGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupTest);
            QUnit.test("Regex: Alternations - AlternationGroupNonCapturingTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupNonCapturingTest);
            QUnit.test("Regex: Alternations - AlternationGroupPositiveLookaheadTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupPositiveLookaheadTest);
            QUnit.test("Regex: Alternations - AlternationGroupNegativeLookaheadTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupNegativeLookaheadTest1);
            QUnit.test("Regex: Alternations - AlternationGroupNegativeLookaheadTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupNegativeLookaheadTest2);
            QUnit.test("Regex: Alternations - AlternationGroupPositiveLookbehindTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupPositiveLookbehindTest);
            QUnit.test("Regex: Alternations - AlternationGroupNegativeLookbehindTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupNegativeLookbehindTest1);
            QUnit.test("Regex: Alternations - AlternationGroupNegativeLookbehindTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupNegativeLookbehindTest2);
            QUnit.test("Regex: Alternations - AlternationGroupNonBacktrackingTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupNonBacktrackingTest);
            QUnit.test("Regex: Alternations - AlternationGroupCommentTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupCommentTest);
            QUnit.test("Regex: Alternations - AlternationGroupWithNameInConditionTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupWithNameInConditionTest);
            QUnit.test("Regex: Alternations - AlternationGroupWithIncorrectRefTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupWithIncorrectRefTest1);
            QUnit.test("Regex: Alternations - AlternationGroupWithIncorrectRefTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupWithIncorrectRefTest2);
            QUnit.test("Regex: Alternations - AlternationGroupWithImnsxTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupWithImnsxTest1);
            QUnit.test("Regex: Alternations - AlternationGroupWithImnsxTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupWithImnsxTest2);
            QUnit.test("Regex: Alternations - AlternationGroupWithImnsxTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupWithImnsxTest3);
            QUnit.test("Regex: Alternations - AlternationConditionWithGroupTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationConditionWithGroupTest1);
            QUnit.test("Regex: Alternations - AlternationConditionWithGroupTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationConditionWithGroupTest2);
            QUnit.test("Regex: Alternations - AlternationConditionWithGroupTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationConditionWithGroupTest3);
            QUnit.test("Regex: Alternations - AlternationConditionWithGroupTest4", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationConditionWithGroupTest4);
            QUnit.test("Regex: Alternations - AlternationConditionWithGroupTest5", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationConditionWithGroupTest5);
            QUnit.test("Regex: Alternations - AlternationGroupNonCapturingWithGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupNonCapturingWithGroupTest);
            QUnit.test("Regex: Alternations - AlternationGroupPositiveLookaheadWithGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupPositiveLookaheadWithGroupTest);
            QUnit.test("Regex: Alternations - AlternationGroupNegativeLookaheadWithGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupNegativeLookaheadWithGroupTest);
            QUnit.test("Regex: Alternations - AlternationGroupPositiveLookbehindWithGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupPositiveLookbehindWithGroupTest);
            QUnit.test("Regex: Alternations - AlternationGroupNegativeLookbehindWithGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupNegativeLookbehindWithGroupTest);
            QUnit.test("Regex: Alternations - AlternationGroupNonBacktrackingWithGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupNonBacktrackingWithGroupTest);
            QUnit.test("Regex: Alternations - AlternationGroupWithImnsxAndGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupWithImnsxAndGroupTest);
            QUnit.test("Regex: Alternations - AlternationGroupWithoutAlternativeBranchTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupWithoutAlternativeBranchTest1);
            QUnit.test("Regex: Alternations - AlternationGroupWithoutAlternativeBranchTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupWithoutAlternativeBranchTest2);
            QUnit.test("Regex: Alternations - AlternationGroupWithoutAlternativeBranchExceptionTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests.AlternationGroupWithoutAlternativeBranchExceptionTest);
            QUnit.test("Regex: Anchors - MsdnStartOfStringOrLineTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.MsdnStartOfStringOrLineTest);
            QUnit.test("Regex: Anchors - MsdnStartOfStringOrLineMultilineModeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.MsdnStartOfStringOrLineMultilineModeTest);
            QUnit.test("Regex: Anchors - MsdnEndOfStringOrLineTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.MsdnEndOfStringOrLineTest1);
            QUnit.test("Regex: Anchors - MsdnEndOfStringOrLineTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.MsdnEndOfStringOrLineTest2);
            QUnit.test("Regex: Anchors - MsdnEndOfStringOrLineTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.MsdnEndOfStringOrLineTest3);
            QUnit.test("Regex: Anchors - MsdnEndOfStringOrLineTest4", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.MsdnEndOfStringOrLineTest4);
            QUnit.test("Regex: Anchors - MsdnStartOfStringOnlyTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.MsdnStartOfStringOnlyTest);
            QUnit.test("Regex: Anchors - MsdnEndOfStringOrNewlineTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.MsdnEndOfStringOrNewlineTest);
            QUnit.test("Regex: Anchors - MsdnEndOfStringOnlyTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.MsdnEndOfStringOnlyTest);
            QUnit.test("Regex: Anchors - MsdnContiguousMatchesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.MsdnContiguousMatchesTest);
            QUnit.test("Regex: Anchors - MsdnWordBoundaryTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.MsdnWordBoundaryTest);
            QUnit.test("Regex: Anchors - MsdnNonWordBoundaryTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.MsdnNonWordBoundaryTest);
            QUnit.test("Regex: Anchors - StartAndEndOfStringCustomTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.StartAndEndOfStringCustomTest1);
            QUnit.test("Regex: Anchors - StartAndEndOfStringCustomTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.StartAndEndOfStringCustomTest2);
            QUnit.test("Regex: Anchors - EndOfStringOrNewlineCustomTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.EndOfStringOrNewlineCustomTest1);
            QUnit.test("Regex: Anchors - EndOfStringOrNewlineCustomTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.EndOfStringOrNewlineCustomTest2);
            QUnit.test("Regex: Anchors - EndOfStringOnlyCustomTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.EndOfStringOnlyCustomTest1);
            QUnit.test("Regex: Anchors - EndOfStringOnlyCustomTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.EndOfStringOnlyCustomTest2);
            QUnit.test("Regex: Anchors - EndOfStringOnlyCustomTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.EndOfStringOnlyCustomTest3);
            QUnit.test("Regex: Anchors - ContiguousMatchesCustomTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.ContiguousMatchesCustomTest1);
            QUnit.test("Regex: Anchors - ContiguousMatchesCustomTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests.ContiguousMatchesCustomTest2);
            QUnit.test("Regex: Backreferences - MsdnNumberedBackrefTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.MsdnNumberedBackrefTest);
            QUnit.test("Regex: Backreferences - MsdnNamedBackrefTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.MsdnNamedBackrefTest);
            QUnit.test("Regex: Backreferences - MsdnNamedBackrefWithNumberAsNameTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.MsdnNamedBackrefWithNumberAsNameTest);
            QUnit.test("Regex: Backreferences - MsdnNamedBackrefWithRedefinedGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.MsdnNamedBackrefWithRedefinedGroupTest);
            QUnit.test("Regex: Backreferences - MsdnNamedBackrefWithEmptyCaptureTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.MsdnNamedBackrefWithEmptyCaptureTest1);
            QUnit.test("Regex: Backreferences - MsdnNamedBackrefWithEmptyCaptureTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.MsdnNamedBackrefWithEmptyCaptureTest2);
            QUnit.test("Regex: Backreferences - NamedBackrefToUnreachableGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.NamedBackrefToUnreachableGroupTest);
            QUnit.test("Regex: Backreferences - NamedBackrefToSelfGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.NamedBackrefToSelfGroupTest);
            QUnit.test("Regex: Backreferences - NamedBackrefToParentGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.NamedBackrefToParentGroupTest);
            QUnit.test("Regex: Backreferences - NumberedBackrefTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.NumberedBackrefTest);
            QUnit.test("Regex: Backreferences - NumberedBackrefInGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.NumberedBackrefInGroupTest);
            QUnit.test("Regex: Backreferences - NamedBackrefInGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.NamedBackrefInGroupTest);
            QUnit.test("Regex: Backreferences - NumberedBackrefRecursiveGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.NumberedBackrefRecursiveGroupTest);
            QUnit.test("Regex: Backreferences - NamedBackrefRecursiveGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.NamedBackrefRecursiveGroupTest);
            QUnit.test("Regex: Backreferences - ComplexBackrefTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests.ComplexBackrefTest1);
            QUnit.test("Regex: BalancingGroups - MsdnBalancingGroupTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests.MsdnBalancingGroupTest1);
            QUnit.test("Regex: BalancingGroups - MsdnBalancingGroupTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests.MsdnBalancingGroupTest2);
            QUnit.test("Regex: BalancingGroups - BalancingGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests.BalancingGroupTest);
            QUnit.test("Regex: BalancingGroups - BalancingGroupWithoutName1Test", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests.BalancingGroupWithoutName1Test);
            QUnit.test("Regex: BalancingGroups - BalancingGroupWithQuantifierTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests.BalancingGroupWithQuantifierTest);
            QUnit.test("Regex: BalancingGroups - BalancingGroupWithEmptyIntervalTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests.BalancingGroupWithEmptyIntervalTest);
            QUnit.test("Regex: BalancingGroups - BalancingGroupStackApproachTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests.BalancingGroupStackApproachTest);
            QUnit.test("Regex: BalancingGroups - BalancingGroupWithNumberReferenceTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests.BalancingGroupWithNumberReferenceTest1);
            QUnit.test("Regex: BalancingGroups - BalancingGroupWithNumberReferenceTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests.BalancingGroupWithNumberReferenceTest2);
            QUnit.test("Regex: BalancingGroups - BalancingGroupIncorrectReferenceTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests.BalancingGroupIncorrectReferenceTest1);
            QUnit.test("Regex: BalancingGroups - BalancingGroupIncorrectReferenceTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests.BalancingGroupIncorrectReferenceTest2);
            QUnit.test("Regex: Char Classes - MsdnCharGroupTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnCharGroupTest1);
            QUnit.test("Regex: Char Classes - MsdnCharGroupTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnCharGroupTest3);
            QUnit.test("Regex: Char Classes - MsdnNegativeCharGroupTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnNegativeCharGroupTest1);
            QUnit.test("Regex: Char Classes - MsdnNegativeCharGroupTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnNegativeCharGroupTest2);
            QUnit.test("Regex: Char Classes - MsdnDotCharTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnDotCharTest1);
            QUnit.test("Regex: Char Classes - MsdnDotCharTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnDotCharTest2);
            QUnit.test("Regex: Char Classes - MsdnDotCharTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnDotCharTest3);
            QUnit.test("Regex: Char Classes - MsdnCharRangeInGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnCharRangeInGroupTest);
            QUnit.test("Regex: Char Classes - MsdnWordCharTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnWordCharTest1);
            QUnit.test("Regex: Char Classes - MsdnWordCharTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnWordCharTest2);
            QUnit.test("Regex: Char Classes - MsdnNonWordCharTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnNonWordCharTest1);
            QUnit.test("Regex: Char Classes - MsdnNonWordCharTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnNonWordCharTest2);
            QUnit.test("Regex: Char Classes - MsdnSpaceCharTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnSpaceCharTest1);
            QUnit.test("Regex: Char Classes - MsdnSpaceCharTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnSpaceCharTest2);
            QUnit.test("Regex: Char Classes - MsdnNonSpaceCharTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnNonSpaceCharTest1);
            QUnit.test("Regex: Char Classes - MsdnNonSpaceCharTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnNonSpaceCharTest2);
            QUnit.test("Regex: Char Classes - MsdnDigitCharTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnDigitCharTest1);
            QUnit.test("Regex: Char Classes - MsdnDigitCharTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnDigitCharTest2);
            QUnit.test("Regex: Char Classes - MsdnDigitCharTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnDigitCharTest3);
            QUnit.test("Regex: Char Classes - MsdnNonDigitCharTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnNonDigitCharTest1);
            QUnit.test("Regex: Char Classes - MsdnNonDigitCharTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnNonDigitCharTest2);
            QUnit.test("Regex: Char Classes - MsdnNonDigitCharTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnNonDigitCharTest3);
            QUnit.test("Regex: Char Classes - MsdnSubstactGroupTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnSubstactGroupTest1);
            QUnit.test("Regex: Char Classes - MsdnSubstactGroupTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnSubstactGroupTest2);
            QUnit.test("Regex: Char Classes - MsdnSubstactGroupTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnSubstactGroupTest3);
            QUnit.test("Regex: Char Classes - MsdnSubstactGroupTest4", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.MsdnSubstactGroupTest4);
            QUnit.test("Regex: Char Classes - CharClassesInCharGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.CharClassesInCharGroupTest);
            QUnit.test("Regex: Char Classes - CaretSymbolInCharGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.CaretSymbolInCharGroupTest);
            QUnit.test("Regex: Char Classes - NegativeCharGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.NegativeCharGroupTest);
            QUnit.test("Regex: Char Classes - CombiningCharRangesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.CombiningCharRangesTest);
            QUnit.test("Regex: Char Classes - SubstractGroupTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.SubstractGroupTest1);
            QUnit.test("Regex: Char Classes - SubstractGroupTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.SubstractGroupTest2);
            QUnit.test("Regex: Char Classes - SubstractGroupTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.SubstractGroupTest3);
            QUnit.test("Regex: Char Classes - SubstractNegativeGroupTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.SubstractNegativeGroupTest1);
            QUnit.test("Regex: Char Classes - SubstractNegativeGroupTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.SubstractNegativeGroupTest2);
            QUnit.test("Regex: Char Classes - SubstractNegativeGroupTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.SubstractNegativeGroupTest3);
            QUnit.test("Regex: Char Classes - SubstractNestedGroupsTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.SubstractNestedGroupsTest1);
            QUnit.test("Regex: Char Classes - SubstractNestedGroupsTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.SubstractNestedGroupsTest2);
            QUnit.test("Regex: Char Classes - SubstractGroupIsNotLastTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.SubstractGroupIsNotLastTest);
            QUnit.test("Regex: Char Classes - CharClassWithEscapedBracketInGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.CharClassWithEscapedBracketInGroupTest);
            QUnit.test("Regex: Char Classes - CharClassWithEscapedSquareBracketInGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.CharClassWithEscapedSquareBracketInGroupTest);
            QUnit.test("Regex: Char Classes - CharClassWithUnescapedBracketInGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.CharClassWithUnescapedBracketInGroupTest);
            QUnit.test("Regex: Char Classes - CharClassWithUnescapedSquareBracketInGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.CharClassWithUnescapedSquareBracketInGroupTest);
            QUnit.test("Regex: Char Classes - EmptyRangeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.EmptyRangeTest);
            QUnit.test("Regex: Char Classes - ClosingSquareBracketTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.ClosingSquareBracketTest1);
            QUnit.test("Regex: Char Classes - ClosingSquareBracketTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.ClosingSquareBracketTest2);
            QUnit.test("Regex: Char Classes - OpeningSquareBracketTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.OpeningSquareBracketTest1);
            QUnit.test("Regex: Char Classes - OpeningSquareBracketTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests.OpeningSquareBracketTest2);
            QUnit.test("Regex: Escapes - MsdnBellCharTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.MsdnBellCharTest);
            QUnit.test("Regex: Escapes - MsdnBackspaceCharTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.MsdnBackspaceCharTest);
            QUnit.test("Regex: Escapes - MsdnTabCharTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.MsdnTabCharTest);
            QUnit.test("Regex: Escapes - MsdnCarriageRetCharTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.MsdnCarriageRetCharTest);
            QUnit.test("Regex: Escapes - MsdnVerticalTabCharTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.MsdnVerticalTabCharTest);
            QUnit.test("Regex: Escapes - MsdnFormFeedCharTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.MsdnFormFeedCharTest);
            QUnit.test("Regex: Escapes - MsdnNewLineCharTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.MsdnNewLineCharTest);
            QUnit.test("Regex: Escapes - MsdnEscapeCharTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.MsdnEscapeCharTest);
            QUnit.test("Regex: Escapes - MsdnOctalEscapeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.MsdnOctalEscapeTest);
            QUnit.test("Regex: Escapes - MsdnHexEscapeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.MsdnHexEscapeTest);
            QUnit.test("Regex: Escapes - MsdnAsciiEscapeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.MsdnAsciiEscapeTest);
            QUnit.test("Regex: Escapes - MsdnUnicodeEscapeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.MsdnUnicodeEscapeTest);
            QUnit.test("Regex: Escapes - MsdnSpecialEscapesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.MsdnSpecialEscapesTest);
            QUnit.test("Regex: Escapes - MsdnCharEscapesExampleTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.MsdnCharEscapesExampleTest);
            QUnit.test("Regex: Escapes - CharEscapesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.CharEscapesTest);
            QUnit.test("Regex: Escapes - RangeWithCharEscapesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.RangeWithCharEscapesTest);
            QUnit.test("Regex: Escapes - ControlCharsTestUpperTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.ControlCharsTestUpperTest);
            QUnit.test("Regex: Escapes - ControlCharsTestLowerTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.ControlCharsTestLowerTest);
            QUnit.test("Regex: Escapes - BasicLatinEscapeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.BasicLatinEscapeTest);
            QUnit.test("Regex: Escapes - OctalEscapeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests.OctalEscapeTest);
            QUnit.test("Regex: Examples - EmailParseTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests.EmailParseTest);
            QUnit.test("Regex: Examples - PhoneParseTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests.PhoneParseTest);
            QUnit.test("Regex: Examples - PasswordValidationTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests.PasswordValidationTest);
            QUnit.test("Regex: Examples - WordSlplittingTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests.WordSlplittingTest);
            QUnit.test("Regex: Examples - IpAddressValidationTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests.IpAddressValidationTest);
            QUnit.test("Regex: Examples - EscapeQuotedWordsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests.EscapeQuotedWordsTest);
            QUnit.test("Regex: Examples - CreditCardExpirationParsingTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests.CreditCardExpirationParsingTest);
            QUnit.test("Regex: Examples - UrlParsingTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests.UrlParsingTest);
            QUnit.test("Regex IMNSX - MsdnInlineOptionsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.MsdnInlineOptionsTest);
            QUnit.test("Regex IMNSX - MsdnIgnoreCaseTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.MsdnIgnoreCaseTest);
            QUnit.test("Regex IMNSX - MsdnMultilineInlineOptionTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.MsdnMultilineInlineOptionTest);
            QUnit.test("Regex IMNSX - MsdnSinglelineInlineOptionTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.MsdnSinglelineInlineOptionTest);
            QUnit.test("Regex IMNSX - MsdnIngoreWhitespaceInlineOptionTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.MsdnIngoreWhitespaceInlineOptionTest1);
            QUnit.test("Regex IMNSX - MsdnIngoreWhitespaceInlineOptionTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.MsdnIngoreWhitespaceInlineOptionTest2);
            QUnit.test("Regex IMNSX - MsdnIngoreWhitespaceInlineOptionTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.MsdnIngoreWhitespaceInlineOptionTest3);
            QUnit.test("Regex IMNSX - MsdnExplicitCaptureInlineOptionTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.MsdnExplicitCaptureInlineOptionTest1);
            QUnit.test("Regex IMNSX - MsdnExplicitCaptureInlineOptionTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.MsdnExplicitCaptureInlineOptionTest2);
            QUnit.test("Regex IMNSX - IgnoreCaseInlineOptionTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.IgnoreCaseInlineOptionTest1);
            QUnit.test("Regex IMNSX - IgnoreCaseInlineOptionTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.IgnoreCaseInlineOptionTest2);
            QUnit.test("Regex IMNSX - IgnoreCaseInlineOptionTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.IgnoreCaseInlineOptionTest3);
            QUnit.test("Regex IMNSX - IgnoreCaseInlineOptionTest4", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.IgnoreCaseInlineOptionTest4);
            QUnit.test("Regex IMNSX - IgnoreCaseInlineOptionTest5", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.IgnoreCaseInlineOptionTest5);
            QUnit.test("Regex IMNSX - MultilineInlineOptionTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.MultilineInlineOptionTest1);
            QUnit.test("Regex IMNSX - MultilineInlineOptionTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.MultilineInlineOptionTest2);
            QUnit.test("Regex IMNSX - MultilineInlineOptionTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.MultilineInlineOptionTest3);
            QUnit.test("Regex IMNSX - MultilineInlineOptionTest4", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.MultilineInlineOptionTest4);
            QUnit.test("Regex IMNSX - MultilineInlineOptionTest5", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.MultilineInlineOptionTest5);
            QUnit.test("Regex IMNSX - MultilineInlineOptionTest6", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.MultilineInlineOptionTest6);
            QUnit.test("Regex IMNSX - MultilineInlineOptionTest7", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.MultilineInlineOptionTest7);
            QUnit.test("Regex IMNSX - SinglelineInlineOptionTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.SinglelineInlineOptionTest1);
            QUnit.test("Regex IMNSX - SinglelineInlineOptionTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.SinglelineInlineOptionTest2);
            QUnit.test("Regex IMNSX - SinglelineInlineOptionTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.SinglelineInlineOptionTest3);
            QUnit.test("Regex IMNSX - IngoreWhitespaceInlineOptionTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.IngoreWhitespaceInlineOptionTest1);
            QUnit.test("Regex IMNSX - IngoreWhitespaceInlineOptionTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.IngoreWhitespaceInlineOptionTest2);
            QUnit.test("Regex IMNSX - IngoreWhitespaceInlineOptionTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.IngoreWhitespaceInlineOptionTest3);
            QUnit.test("Regex IMNSX - IngoreWhitespaceInlineOptionTest4", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.IngoreWhitespaceInlineOptionTest4);
            QUnit.test("Regex IMNSX - IngoreWhitespaceInlineOptionTest5", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.IngoreWhitespaceInlineOptionTest5);
            QUnit.test("Regex IMNSX - IngoreWhitespaceInlineOptionTest6", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.IngoreWhitespaceInlineOptionTest6);
            QUnit.test("Regex IMNSX - IngoreWhitespaceInlineOptionTest7", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.IngoreWhitespaceInlineOptionTest7);
            QUnit.test("Regex IMNSX - IngoreWhitespaceInlineOptionTest8", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.IngoreWhitespaceInlineOptionTest8);
            QUnit.test("Regex IMNSX - IngoreWhitespaceInlineOptionTest9", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.IngoreWhitespaceInlineOptionTest9);
            QUnit.test("Regex IMNSX - InlineCommentTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.InlineCommentTest1);
            QUnit.test("Regex IMNSX - ExplicitCaptureInlineOptionTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.ExplicitCaptureInlineOptionTest1);
            QUnit.test("Regex IMNSX - ExplicitCaptureInlineOptionTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.ExplicitCaptureInlineOptionTest2);
            QUnit.test("Regex IMNSX - ExplicitCaptureInlineOptionTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.ExplicitCaptureInlineOptionTest3);
            QUnit.test("Regex IMNSX - ExplicitCaptureInlineOptionTest4", Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests.ExplicitCaptureInlineOptionTest4);
            QUnit.test("Regex: Lookahead - MsdnPositiveLookaheadTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests.MsdnPositiveLookaheadTest);
            QUnit.test("Regex: Lookahead - MsdnNegativeLookaheadTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests.MsdnNegativeLookaheadTest);
            QUnit.test("Regex: Lookahead - PositiveLookaheadTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests.PositiveLookaheadTest1);
            QUnit.test("Regex: Lookahead - PositiveLookaheadTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests.PositiveLookaheadTest2);
            QUnit.test("Regex: Lookahead - NegativeLookaheadTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests.NegativeLookaheadTest1);
            QUnit.test("Regex: Lookahead - NegativeLookaheadTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests.NegativeLookaheadTest2);
            QUnit.test("Regex: Lookahead - PositiveLookaheadWithGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests.PositiveLookaheadWithGroupTest);
            QUnit.test("Regex: Lookahead - NegativeLookaheadWithGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests.NegativeLookaheadWithGroupTest);
            QUnit.test("Regex: Lookahead - PositiveLookaheadWithOffsetTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests.PositiveLookaheadWithOffsetTest);
            QUnit.test("Regex: Lookahead - NegativeLookaheadWithOffsetTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests.NegativeLookaheadWithOffsetTest);
            QUnit.test("Regex: Lookahead - PositiveLookaheadGroupCombineTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests.PositiveLookaheadGroupCombineTest);
            QUnit.test("Regex: Lookbehind - MsdnPositiveLookbehindTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests.MsdnPositiveLookbehindTest);
            QUnit.test("Regex: Lookbehind - MsdnNegativeLookbehindTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests.MsdnNegativeLookbehindTest);
            QUnit.test("Regex: Lookbehind - PositiveLookbehindTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests.PositiveLookbehindTest1);
            QUnit.test("Regex: Lookbehind - PositiveLookbehindTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests.PositiveLookbehindTest2);
            QUnit.test("Regex: Lookbehind - PositiveLookbehindTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests.PositiveLookbehindTest3);
            QUnit.test("Regex: Lookbehind - PositiveLookbehindWithMatchOffsetTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests.PositiveLookbehindWithMatchOffsetTest);
            QUnit.test("Regex: Lookbehind - NegativeLookbehindTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests.NegativeLookbehindTest1);
            QUnit.test("Regex: Lookbehind - NegativeLookbehindTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests.NegativeLookbehindTest2);
            QUnit.test("Regex: Lookbehind - PositiveLookbehindWithGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests.PositiveLookbehindWithGroupTest);
            QUnit.test("Regex: Lookbehind - NegativeLookbehindWithGroupTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests.NegativeLookbehindWithGroupTest);
            QUnit.test("Regex: Lookbehind - PositiveLookbehindWithOffsetTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests.PositiveLookbehindWithOffsetTest);
            QUnit.test("Regex: Lookbehind - NegativeLookbehindWithOffsetTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests.NegativeLookbehindWithOffsetTest);
            QUnit.test("Regex: Nonbacktracking - MsdnNonBacktrackingTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests.MsdnNonBacktrackingTest1);
            QUnit.test("Regex: Nonbacktracking - MsdnNonBacktrackingTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests.MsdnNonBacktrackingTest2);
            QUnit.test("Regex: Nonbacktracking - NonBacktrackingTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests.NonBacktrackingTest1);
            QUnit.test("Regex: Nonbacktracking - NonBacktrackingTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests.NonBacktrackingTest2);
            QUnit.test("Regex: Nonbacktracking - NonBacktrackingTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests.NonBacktrackingTest3);
            QUnit.test("Regex: Nonbacktracking - NonBacktrackingTest4", Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests.NonBacktrackingTest4);
            QUnit.test("Regex: Nonbacktracking - NonBacktrackingTest5", Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests.NonBacktrackingTest5);
            QUnit.test("Regex: Nonbacktracking - NonBacktrackingWithOffsetTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests.NonBacktrackingWithOffsetTest);
            QUnit.test("RegexOptions - MsdnIgnoreCaseOptionTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.MsdnIgnoreCaseOptionTest);
            QUnit.test("RegexOptions - MsdnMultilineOptionTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.MsdnMultilineOptionTest1);
            QUnit.test("RegexOptions - MsdnMultilineOptionTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.MsdnMultilineOptionTest2);
            QUnit.test("RegexOptions - MsdnSinglelineOptionTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.MsdnSinglelineOptionTest);
            QUnit.test("RegexOptions - MsdnIgnoreWhitespaceOptionTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.MsdnIgnoreWhitespaceOptionTest);
            QUnit.test("RegexOptions - MsdnExplicitCaptureOptionTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.MsdnExplicitCaptureOptionTest1);
            QUnit.test("RegexOptions - MsdnExplicitCaptureOptionTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.MsdnExplicitCaptureOptionTest2);
            QUnit.test("RegexOptions - IgnoreCaseOptionTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.IgnoreCaseOptionTest1);
            QUnit.test("RegexOptions - IgnoreCaseOptionTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.IgnoreCaseOptionTest2);
            QUnit.test("RegexOptions - IgnoreCaseOptionTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.IgnoreCaseOptionTest3);
            QUnit.test("RegexOptions - DefaultLineOptionsTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.DefaultLineOptionsTest1);
            QUnit.test("RegexOptions - DefaultLineOptionsTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.DefaultLineOptionsTest2);
            QUnit.test("RegexOptions - MultilineOptionTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.MultilineOptionTest1);
            QUnit.test("RegexOptions - MultilineOptionTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.MultilineOptionTest2);
            QUnit.test("RegexOptions - SinglelineOptionTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.SinglelineOptionTest);
            QUnit.test("RegexOptions - SinglelineDotCharTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.SinglelineDotCharTest);
            QUnit.test("RegexOptions - MultilineAndSinglelineOptionsTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests.MultilineAndSinglelineOptionsTest);
            QUnit.test("Regex: Quantifiers - MsdnZeroOrMoreTimesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.MsdnZeroOrMoreTimesTest);
            QUnit.test("Regex: Quantifiers - MsdnOneOrMoreTimesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.MsdnOneOrMoreTimesTest);
            QUnit.test("Regex: Quantifiers - MsdnZeroOrOneTimeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.MsdnZeroOrOneTimeTest);
            QUnit.test("Regex: Quantifiers - MsdnNTimesTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.MsdnNTimesTest1);
            QUnit.test("Regex: Quantifiers - MsdnNTimesTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.MsdnNTimesTest2);
            QUnit.test("Regex: Quantifiers - MsdnNOrMoreTimesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.MsdnNOrMoreTimesTest);
            QUnit.test("Regex: Quantifiers - MsdnNToMTimesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.MsdnNToMTimesTest);
            QUnit.test("Regex: Quantifiers - MsdnLazyZeroOrMoreTimesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.MsdnLazyZeroOrMoreTimesTest);
            QUnit.test("Regex: Quantifiers - MsdnLazyOneOrMoreTimesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.MsdnLazyOneOrMoreTimesTest);
            QUnit.test("Regex: Quantifiers - MsdnLazyZeroOrOneTimeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.MsdnLazyZeroOrOneTimeTest);
            QUnit.test("Regex: Quantifiers - MsdnLazyNTimesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.MsdnLazyNTimesTest);
            QUnit.test("Regex: Quantifiers - MsdnLazyNOrMoreTimesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.MsdnLazyNOrMoreTimesTest);
            QUnit.test("Regex: Quantifiers - MsdnLazyNToMTimesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.MsdnLazyNToMTimesTest);
            QUnit.test("Regex: Quantifiers - ZeroOrMoreTimesTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.ZeroOrMoreTimesTest);
            QUnit.test("Regex: Quantifiers - OneOrMoreTimesTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.OneOrMoreTimesTest1);
            QUnit.test("Regex: Quantifiers - OneOrMoreTimesTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.OneOrMoreTimesTest2);
            QUnit.test("Regex: Quantifiers - OneOrMoreTimesTest3", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.OneOrMoreTimesTest3);
            QUnit.test("Regex: Quantifiers - ZeroOrOneTimeTest", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.ZeroOrOneTimeTest);
            QUnit.test("Regex: Quantifiers - LazyZeroOrMoreTimesTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.LazyZeroOrMoreTimesTest1);
            QUnit.test("Regex: Quantifiers - LazyZeroOrMoreTimesTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.LazyZeroOrMoreTimesTest2);
            QUnit.test("Regex: Quantifiers - LazyOneOrMoreTimesTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.LazyOneOrMoreTimesTest1);
            QUnit.test("Regex: Quantifiers - LazyOneOrMoreTimesTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.LazyOneOrMoreTimesTest2);
            QUnit.test("Regex: Quantifiers - LazyZeroOrOneTimeTest1", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.LazyZeroOrOneTimeTest1);
            QUnit.test("Regex: Quantifiers - LazyZeroOrOneTimeTest2", Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests.LazyZeroOrOneTimeTest2);
            QUnit.test("Regex Timeouts - RegexTimeoutValidationWorks", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.RegexTimeoutValidationWorks);
            QUnit.test("Regex Timeouts - RegexIsMatchWorksWithShortTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.RegexIsMatchWorksWithShortTimeout);
            QUnit.test("Regex Timeouts - RegexIsMatchWorksWithLongTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.RegexIsMatchWorksWithLongTimeout);
            QUnit.test("Regex Timeouts - RegexMatchWorksWithShortTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.RegexMatchWorksWithShortTimeout);
            QUnit.test("Regex Timeouts - RegexMatchWorksWithLongTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.RegexMatchWorksWithLongTimeout);
            QUnit.test("Regex Timeouts - RegexNextMatchWorksWithShortTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.RegexNextMatchWorksWithShortTimeout);
            QUnit.test("Regex Timeouts - RegexNextMatchWorksWithLongTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.RegexNextMatchWorksWithLongTimeout);
            QUnit.test("Regex Timeouts - RegexReplaceWorksWithShortTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.RegexReplaceWorksWithShortTimeout);
            QUnit.test("Regex Timeouts - RegexReplaceWorksWithLongTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.RegexReplaceWorksWithLongTimeout);
            QUnit.test("Regex Timeouts - RegexReplaceEvaluatorWorksWithShortTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.RegexReplaceEvaluatorWorksWithShortTimeout);
            QUnit.test("Regex Timeouts - RegexReplaceEvaluatorWorksWithLongTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.RegexReplaceEvaluatorWorksWithLongTimeout);
            QUnit.test("Regex Timeouts - RegexSplitWorksWithShortTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.RegexSplitWorksWithShortTimeout);
            QUnit.test("Regex Timeouts - RegexSplitWorksWithLongTimeout", Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests.RegexSplitWorksWithLongTimeout);
            QUnit.module("RegexJS");
            QUnit.test("TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests.TypePropertiesAreCorrect);
            QUnit.test("StringOnlyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests.StringOnlyConstructorWorks);
            QUnit.test("ConstructorWithFlagsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests.ConstructorWithFlagsWorks);
            QUnit.test("GlobalFlagWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests.GlobalFlagWorks);
            QUnit.test("IgnoreCaseFlagWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests.IgnoreCaseFlagWorks);
            QUnit.test("MultilineFlagWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests.MultilineFlagWorks);
            QUnit.test("PatternPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests.PatternPropertyWorks);
            QUnit.test("SourcePropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests.SourcePropertyWorks);
            QUnit.test("ExecWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests.ExecWorks);
            QUnit.test("LastIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests.LastIndexWorks);
            QUnit.test("TestWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests.TestWorks);
            QUnit.module("Serialization");
            QUnit.test("ByteArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.ByteArrayWorks);
            QUnit.test("GuidWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.GuidWorks);
            QUnit.test("TypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.TypeWorks);
            QUnit.test("CharWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.CharWorks);
            QUnit.test("Int64Works", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.Int64Works);
            QUnit.test("UInt64Works", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.UInt64Works);
            QUnit.test("DecimalWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.DecimalWorks);
            QUnit.test("DateTimeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.DateTimeWorks);
            QUnit.test("ArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.ArrayWorks);
            QUnit.test("ComplexArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.ComplexArrayWorks);
            QUnit.test("EnumWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.EnumWorks);
            QUnit.test("IListWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.IListWorks);
            QUnit.test("IDictionaryWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.IDictionaryWorks);
            QUnit.test("TypeWithFieldWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.TypeWithFieldWorks);
            QUnit.test("ComplexPropertiesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.ComplexPropertiesWorks);
            QUnit.test("CamelCaseSettingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.CamelCaseSettingWorks);
            QUnit.test("IgnoreNullValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.IgnoreNullValueWorks);
            QUnit.test("AnonymousTypesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.AnonymousTypesWorks);
            QUnit.test("TypeNameHandlingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests.TypeNameHandlingWorks);
            QUnit.test("NonGenericParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.NonGenericParseWorks);
            QUnit.test("GenericParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.GenericParseWorks);
            QUnit.test("NonGenericParseWithCallbackWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.NonGenericParseWithCallbackWorks);
            QUnit.test("GenericParseWithCallbackWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.GenericParseWithCallbackWorks);
            QUnit.test("NonGenericParseWorks3", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.NonGenericParseWorks3);
            QUnit.test("GenericParseWorks3", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.GenericParseWorks3);
            QUnit.test("NonGenericParseWithCallbackWorks3", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.NonGenericParseWithCallbackWorks3);
            QUnit.test("GenericParseWithCallbackWorks3", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.GenericParseWithCallbackWorks3);
            QUnit.test("NonGenericParseWorks4", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.NonGenericParseWorks4);
            QUnit.test("GenericParseWorks4", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.GenericParseWorks4);
            QUnit.test("NonGenericParseWithCallbackWorks4", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.NonGenericParseWithCallbackWorks4);
            QUnit.test("GenericParseWithCallbackWorks4", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.GenericParseWithCallbackWorks4);
            QUnit.test("StringifyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWorks);
            QUnit.test("StringifyWithSerializableMembersArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWithSerializableMembersArrayWorks);
            QUnit.test("StringifyWithSerializableMembersArrayAndIntentCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWithSerializableMembersArrayAndIntentCountWorks);
            QUnit.test("StringifyWithSerializableMembersArrayAndIntentTextWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWithSerializableMembersArrayAndIntentTextWorks);
            QUnit.test("StringifyWithCallbackWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWithCallbackWorks);
            QUnit.test("StringifyWithCallbackAndIndentCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWithCallbackAndIndentCountWorks);
            QUnit.test("StringifyWithCallbackAndIndentTextWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWithCallbackAndIndentTextWorks);
            QUnit.test("StringifyWithSerializableMembersArrayWorks3", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWithSerializableMembersArrayWorks3);
            QUnit.test("StringifyWithSerializableMembersArrayAndIntentCountWorks3", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWithSerializableMembersArrayAndIntentCountWorks3);
            QUnit.test("StringifyWithSerializableMembersArrayAndIntentTextWorks3", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWithSerializableMembersArrayAndIntentTextWorks3);
            QUnit.test("StringifyWithCallbackWorks3", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWithCallbackWorks3);
            QUnit.test("StringifyWithCallbackAndIndentCountWorks3", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWithCallbackAndIndentCountWorks3);
            QUnit.test("StringifyWithCallbackAndIndentTextWorks3", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWithCallbackAndIndentTextWorks3);
            QUnit.test("StringifyWithSerializableMembersArrayWorks4", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWithSerializableMembersArrayWorks4);
            QUnit.test("StringifyWithSerializableMembersArrayAndIntentCountWorks4", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWithSerializableMembersArrayAndIntentCountWorks4);
            QUnit.test("StringifyWithSerializableMembersArrayAndIntentTextWorks4", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWithSerializableMembersArrayAndIntentTextWorks4);
            QUnit.test("StringifyWithCallbackWorks4", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWithCallbackWorks4);
            QUnit.test("StringifyWithCallbackAndIndentCountWorks4", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWithCallbackAndIndentCountWorks4);
            QUnit.test("StringifyWithCallbackAndIndentTextWorks4", Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests.StringifyWithCallbackAndIndentTextWorks4);
            QUnit.test("ByteArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests.ByteArrayWorks);
            QUnit.test("GuidWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests.GuidWorks);
            QUnit.test("TypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests.TypeWorks);
            QUnit.test("CharWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests.CharWorks);
            QUnit.test("Int64Works", Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests.Int64Works);
            QUnit.test("UInt64Works", Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests.UInt64Works);
            QUnit.test("DecimalWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests.DecimalWorks);
            QUnit.test("DateTimeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests.DateTimeWorks);
            QUnit.test("ArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests.ArrayWorks);
            QUnit.test("EnumWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests.EnumWorks);
            QUnit.test("IListWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests.IListWorks);
            QUnit.test("IDictionaryWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests.IDictionaryWorks);
            QUnit.test("TypeWithFieldWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests.TypeWithFieldWorks);
            QUnit.test("ComplexPropertiesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests.ComplexPropertiesWorks);
            QUnit.test("CamelCaseSettingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests.CamelCaseSettingWorks);
            QUnit.test("IgnoreNullValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests.IgnoreNullValueWorks);
            QUnit.test("TypeNameHandlingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests.TypeNameHandlingWorks);
            QUnit.test("AnonymousTypesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests.AnonymousTypesWorks);
            QUnit.module("Simple types");
            QUnit.test("Boolean - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.TypePropertiesAreCorrect);
            QUnit.test("Boolean - DefaultValueIsFalse", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.DefaultValueIsFalse);
            QUnit.test("Boolean - CreatingInstanceReturnsFalse", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.CreatingInstanceReturnsFalse);
            QUnit.test("Boolean - DefaultConstructorReturnsFalse", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.DefaultConstructorReturnsFalse);
            QUnit.test("Boolean - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.GetHashCodeWorks);
            QUnit.test("Boolean - ObjectEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.ObjectEqualsWorks);
            QUnit.test("Boolean - BoolEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.BoolEqualsWorks);
            QUnit.test("Boolean - LogicalExclusiveOrWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.LogicalExclusiveOrWorks);
            QUnit.test("Boolean - LogicalAndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.LogicalAndWorks);
            QUnit.test("Boolean - LogicalNegationWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.LogicalNegationWorks);
            QUnit.test("Boolean - ConditionalOperatorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.ConditionalOperatorWorks);
            QUnit.test("Boolean - ConditionalAndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.ConditionalAndWorks);
            QUnit.test("Boolean - ConditionalOrWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.ConditionalOrWorks);
            QUnit.test("Boolean - EqualityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.EqualityWorks);
            QUnit.test("Boolean - InequalityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.InequalityWorks);
            QUnit.test("Boolean - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.CompareToWorks);
            QUnit.test("Boolean - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.IComparableCompareToWorks);
            QUnit.test("Boolean - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.ParseWorks);
            QUnit.test("Boolean - TryParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.TryParseWorks);
            QUnit.test("Boolean - BoolStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests.BoolStringWorks);
            QUnit.test("Byte - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.TypePropertiesAreCorrect);
            QUnit.test("Byte - CastsWork", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.CastsWork);
            QUnit.test("Byte - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.DefaultValueIs0);
            QUnit.test("Byte - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.DefaultConstructorReturnsZero);
            QUnit.test("Byte - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.CreatingInstanceReturnsZero);
            QUnit.test("Byte - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.ConstantsWork);
            QUnit.test("Byte - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.FormatWorks);
            QUnit.test("Byte - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.IFormattableToStringWorks);
            QUnit.test("Byte - TryParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.TryParseWorks);
            QUnit.test("Byte - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.ParseWorks);
            QUnit.test("Byte - ToStringWithoutRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.ToStringWithoutRadixWorks);
            QUnit.test("Byte - ToStringWithRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.ToStringWithRadixWorks);
            QUnit.test("Byte - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.GetHashCodeWorks);
            QUnit.test("Byte - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.EqualsWorks);
            QUnit.test("Byte - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.IEquatableEqualsWorks);
            QUnit.test("Byte - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.CompareToWorks);
            QUnit.test("Byte - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests.IComparableCompareToWorks);
            QUnit.test("Char - TypePropertiesAreInt32", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.TypePropertiesAreInt32);
            QUnit.test("Char - CastsWork", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.CastsWork);
            QUnit.test("Char - DefaultValueWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.DefaultValueWorks);
            QUnit.test("Char - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.DefaultConstructorReturnsZero);
            QUnit.test("Char - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.CreatingInstanceReturnsZero);
            QUnit.test("Char - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.ConstantsWork);
            QUnit.test("Char - CharComparisonWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.CharComparisonWorks);
            QUnit.test("Char - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.ParseWorks);
            QUnit.test("Char - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.FormatWorks);
            QUnit.test("Char - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.IFormattableToStringWorks);
            QUnit.test("Char - ToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.ToStringWorks);
            QUnit.test("Char - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.GetHashCodeWorks);
            QUnit.test("Char - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.EqualsWorks);
            QUnit.test("Char - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.IEquatableEqualsWorks);
            QUnit.test("Char - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.CompareToWorks);
            QUnit.test("Char - IsLowerWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.IsLowerWorks);
            QUnit.test("Char - IsUpperWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.IsUpperWorks);
            QUnit.test("Char - ToLowerWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.ToLowerWorks);
            QUnit.test("Char - ToUpperWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.ToUpperWorks);
            QUnit.test("Char - IsDigitWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.IsDigitWorks);
            QUnit.test("Char - IsWhiteSpaceWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.IsWhiteSpaceWorks);
            QUnit.test("Char - IsDigitWithStringAndIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.IsDigitWithStringAndIndexWorks);
            QUnit.test("Char - IsWhiteSpaceWithStringAndIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CharTests.IsWhiteSpaceWithStringAndIndexWorks);
            QUnit.test("Decimal - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.TypePropertiesAreCorrect);
            QUnit.test("Decimal - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.DefaultValueIs0);
            QUnit.test("Decimal - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.CreatingInstanceReturnsZero);
            QUnit.test("Decimal - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.ConstantsWork);
            QUnit.test("Decimal - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.DefaultConstructorReturnsZero);
            QUnit.test("Decimal - ConvertingConstructorsWork", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.ConvertingConstructorsWork);
            QUnit.test("Decimal - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.FormatWorks);
            QUnit.test("Decimal - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.IFormattableToStringWorks);
            QUnit.test("Decimal - ToStringWithoutRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.ToStringWithoutRadixWorks);
            QUnit.test("Decimal - AddWithStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.AddWithStringWorks);
            QUnit.test("Decimal - ConversionsToDecimalWork", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.ConversionsToDecimalWork);
            QUnit.test("Decimal - ConversionsFromDecimalWork", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.ConversionsFromDecimalWork);
            QUnit.test("Decimal - OperatorsWork", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.OperatorsWork);
            QUnit.test("Decimal - AddWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.AddWorks);
            QUnit.test("Decimal - CeilingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.CeilingWorks);
            QUnit.test("Decimal - DivideWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.DivideWorks);
            QUnit.test("Decimal - FloorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.FloorWorks);
            QUnit.test("Decimal - RemainderWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.RemainderWorks);
            QUnit.test("Decimal - MultiplyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.MultiplyWorks);
            QUnit.test("Decimal - NegateWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.NegateWorks);
            QUnit.test("Decimal - RoundWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.RoundWorks);
            QUnit.test("Decimal - RoundWithModeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.RoundWithModeWorks);
            QUnit.test("Decimal - SubtractWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.SubtractWorks);
            QUnit.test("Decimal - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.GetHashCodeWorks);
            QUnit.test("Decimal - ObjectEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.ObjectEqualsWorks);
            QUnit.test("Decimal - DecimalEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.DecimalEqualsWorks);
            QUnit.test("Decimal - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.CompareToWorks);
            QUnit.test("Decimal - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.IComparableCompareToWorks);
            QUnit.test("Decimal - FullCoalesceWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.FullCoalesceWorks);
            QUnit.test("Decimal - ShortCoalesceWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests.ShortCoalesceWorks);
            QUnit.test("Double - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.TypePropertiesAreCorrect);
            QUnit.test("Double - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.DefaultValueIs0);
            QUnit.test("Double - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.CreatingInstanceReturnsZero);
            QUnit.test("Double - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.ConstantsWork);
            QUnit.test("Double - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.DefaultConstructorReturnsZero);
            QUnit.test("Double - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.FormatWorks);
            QUnit.test("Double - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.IFormattableToStringWorks);
            QUnit.test("Double - ToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.ToStringWorks);
            QUnit.test("Double - ToExponentialWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.ToExponentialWorks);
            QUnit.test("Double - ToExponentialWithFractionalDigitsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.ToExponentialWithFractionalDigitsWorks);
            QUnit.test("Double - ToFixed", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.ToFixed);
            QUnit.test("Double - ToFixedWithFractionalDigitsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.ToFixedWithFractionalDigitsWorks);
            QUnit.test("Double - ToPrecisionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.ToPrecisionWorks);
            QUnit.test("Double - ToPrecisionWithPrecisionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.ToPrecisionWithPrecisionWorks);
            QUnit.test("Double - IsPositiveInfinityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.IsPositiveInfinityWorks);
            QUnit.test("Double - IsNegativeInfinityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.IsNegativeInfinityWorks);
            QUnit.test("Double - IsInfinityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.IsInfinityWorks);
            QUnit.test("Double - IsFiniteWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.IsFiniteWorks);
            QUnit.test("Double - IsNaNWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.IsNaNWorks);
            QUnit.test("Double - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.GetHashCodeWorks);
            QUnit.test("Double - ObjectEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.ObjectEqualsWorks);
            QUnit.test("Double - DoubleEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.DoubleEqualsWorks);
            QUnit.test("Double - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.CompareToWorks);
            QUnit.test("Double - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.IComparableCompareToWorks);
            QUnit.test("Double - ParseCurrentCultureWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.ParseCurrentCultureWorks);
            QUnit.test("Double - ParseCurrentCultureThrows", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.ParseCurrentCultureThrows);
            QUnit.test("Double - ParseRuCultureWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.ParseRuCultureWorks);
            QUnit.test("Double - ParseRuCultureThrows", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.ParseRuCultureThrows);
            QUnit.test("Double - TryParseCurrentCultureWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.TryParseCurrentCultureWorks);
            QUnit.test("Double - TryParseRuCultureWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests.TryParseRuCultureWorks);
            QUnit.test("Int16 - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.TypePropertiesAreCorrect);
            QUnit.test("Int16 - CastsWork", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.CastsWork);
            QUnit.test("Int16 - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.DefaultValueIs0);
            QUnit.test("Int16 - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.DefaultConstructorReturnsZero);
            QUnit.test("Int16 - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.CreatingInstanceReturnsZero);
            QUnit.test("Int16 - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.ConstantsWork);
            QUnit.test("Int16 - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.FormatWorks);
            QUnit.test("Int16 - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.IFormattableToStringWorks);
            QUnit.test("Int16 - TryParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.TryParseWorks);
            QUnit.test("Int16 - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.ParseWorks);
            QUnit.test("Int16 - ToStringWithoutRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.ToStringWithoutRadixWorks);
            QUnit.test("Int16 - ToStringWithRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.ToStringWithRadixWorks);
            QUnit.test("Int16 - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.GetHashCodeWorks);
            QUnit.test("Int16 - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.EqualsWorks);
            QUnit.test("Int16 - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.IEquatableEqualsWorks);
            QUnit.test("Int16 - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.CompareToWorks);
            QUnit.test("Int16 - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests.IComparableCompareToWorks);
            QUnit.test("Int32 - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.TypePropertiesAreCorrect);
            QUnit.test("Int32 - CastsWork", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.CastsWork);
            QUnit.test("Int32 - TypeIsWorksForInt32", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.TypeIsWorksForInt32);
            QUnit.test("Int32 - TypeAsWorksForInt32", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.TypeAsWorksForInt32);
            QUnit.test("Int32 - UnboxingWorksForInt32", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.UnboxingWorksForInt32);
            QUnit.test("Int32 - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.DefaultValueIs0);
            QUnit.test("Int32 - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.DefaultConstructorReturnsZero);
            QUnit.test("Int32 - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.CreatingInstanceReturnsZero);
            QUnit.test("Int32 - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.ConstantsWork);
            QUnit.test("Int32 - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.FormatWorks);
            QUnit.test("Int32 - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.IFormattableToStringWorks);
            QUnit.test("Int32 - TryParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.TryParseWorks);
            QUnit.test("Int32 - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.ParseWorks);
            QUnit.test("Int32 - ToStringWithoutRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.ToStringWithoutRadixWorks);
            QUnit.test("Int32 - ToStringWithRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.ToStringWithRadixWorks);
            QUnit.test("Int32 - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.GetHashCodeWorks);
            QUnit.test("Int32 - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.EqualsWorks);
            QUnit.test("Int32 - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.IEquatableEqualsWorks);
            QUnit.test("Int32 - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.CompareToWorks);
            QUnit.test("Int32 - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.IComparableCompareToWorks);
            QUnit.test("Int32 - IntegerDivisionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.IntegerDivisionWorks);
            QUnit.test("Int32 - IntegerModuloWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.IntegerModuloWorks);
            QUnit.test("Int32 - IntegerDivisionByZeroThrowsDivideByZeroException", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.IntegerDivisionByZeroThrowsDivideByZeroException);
            QUnit.test("Int32 - DoublesAreTruncatedWhenConvertedToIntegers", Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests.DoublesAreTruncatedWhenConvertedToIntegers);
            QUnit.test("Int64 - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.TypePropertiesAreCorrect);
            QUnit.test("Int64 - MinMaxValuesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.MinMaxValuesAreCorrect);
            QUnit.test("Int64 - CastsWork", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.CastsWork);
            QUnit.test("Int64 - OverflowWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.OverflowWorks);
            QUnit.test("Int64 - CombinedTypesOperationsWork", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.CombinedTypesOperationsWork);
            QUnit.test("Int64 - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.DefaultValueIs0);
            QUnit.test("Int64 - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.DefaultConstructorReturnsZero);
            QUnit.test("Int64 - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.CreatingInstanceReturnsZero);
            QUnit.test("Int64 - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.FormatWorks);
            QUnit.test("Int64 - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.IFormattableToStringWorks);
            QUnit.test("Int64 - TryParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.TryParseWorks);
            QUnit.test("Int64 - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.ParseWorks);
            QUnit.test("Int64 - CastingOfLargeDoublesToInt64Works", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.CastingOfLargeDoublesToInt64Works);
            QUnit.test("Int64 - DivisionOfLargeInt64Works", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.DivisionOfLargeInt64Works);
            QUnit.test("Int64 - ToStringWithoutRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.ToStringWithoutRadixWorks);
            QUnit.test("Int64 - ToStringWithRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.ToStringWithRadixWorks);
            QUnit.test("Int64 - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.GetHashCodeWorks);
            QUnit.test("Int64 - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.EqualsWorks);
            QUnit.test("Int64 - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.IEquatableEqualsWorks);
            QUnit.test("Int64 - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.CompareToWorks);
            QUnit.test("Int64 - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.IComparableCompareToWorks);
            QUnit.test("Int64 - ShiftWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests.ShiftWorks);
            QUnit.test("Object - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests.TypePropertiesAreCorrect);
            QUnit.test("Object - CanGetHashCodeForObject", Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests.CanGetHashCodeForObject);
            QUnit.test("Object - RepeatedCallsToGetHashCodeReturnsSameValue", Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests.RepeatedCallsToGetHashCodeReturnsSameValue);
            QUnit.test("Object - ObjectIsEqualToItself", Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests.ObjectIsEqualToItself);
            QUnit.test("Object - ObjectIsNotEqualToOtherObject", Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests.ObjectIsNotEqualToOtherObject);
            QUnit.test("Object - StaticEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests.StaticEqualsWorks);
            QUnit.test("Object - ReferenceEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests.ReferenceEqualsWorks);
            QUnit.test("Object - ToStringOverride", Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests.ToStringOverride);
            QUnit.test("SByte - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.TypePropertiesAreCorrect);
            QUnit.test("SByte - CastsWork", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.CastsWork);
            QUnit.test("SByte - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.DefaultValueIs0);
            QUnit.test("SByte - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.DefaultConstructorReturnsZero);
            QUnit.test("SByte - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.CreatingInstanceReturnsZero);
            QUnit.test("SByte - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.ConstantsWork);
            QUnit.test("SByte - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.FormatWorks);
            QUnit.test("SByte - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.IFormattableToStringWorks);
            QUnit.test("SByte - TryParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.TryParseWorks);
            QUnit.test("SByte - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.ParseWorks);
            QUnit.test("SByte - ToStringWithoutRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.ToStringWithoutRadixWorks);
            QUnit.test("SByte - ToStringWithRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.ToStringWithRadixWorks);
            QUnit.test("SByte - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.GetHashCodeWorks);
            QUnit.test("SByte - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.EqualsWorks);
            QUnit.test("SByte - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.IEquatableEqualsWorks);
            QUnit.test("SByte - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.CompareToWorks);
            QUnit.test("SByte - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests.IComparableCompareToWorks);
            QUnit.test("Float - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.TypePropertiesAreCorrect);
            QUnit.test("Float - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.DefaultValueIs0);
            QUnit.test("Float - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.CreatingInstanceReturnsZero);
            QUnit.test("Float - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.ConstantsWork);
            QUnit.test("Float - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.DefaultConstructorReturnsZero);
            QUnit.test("Float - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.FormatWorks);
            QUnit.test("Float - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.IFormattableToStringWorks);
            QUnit.test("Float - ToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.ToStringWorks);
            QUnit.test("Float - ToExponentialWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.ToExponentialWorks);
            QUnit.test("Float - ToExponentialWithFractionalDigitsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.ToExponentialWithFractionalDigitsWorks);
            QUnit.test("Float - ToFixed", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.ToFixed);
            QUnit.test("Float - ToFixedWithFractionalDigitsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.ToFixedWithFractionalDigitsWorks);
            QUnit.test("Float - ToPrecisionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.ToPrecisionWorks);
            QUnit.test("Float - ToPrecisionWithPrecisionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.ToPrecisionWithPrecisionWorks);
            QUnit.test("Float - IsPositiveInfinityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.IsPositiveInfinityWorks);
            QUnit.test("Float - IsNegativeInfinityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.IsNegativeInfinityWorks);
            QUnit.test("Float - IsInfinityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.IsInfinityWorks);
            QUnit.test("Float - IsFiniteWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.IsFiniteWorks);
            QUnit.test("Float - IsNaNWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.IsNaNWorks);
            QUnit.test("Float - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.GetHashCodeWorks);
            QUnit.test("Float - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.EqualsWorks);
            QUnit.test("Float - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.IEquatableEqualsWorks);
            QUnit.test("Float - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.CompareToWorks);
            QUnit.test("Float - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests.IComparableCompareToWorks);
            QUnit.test("Version - TestConstructors", Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion.TestConstructors);
            QUnit.test("Version - TestCloneCompare", Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion.TestCloneCompare);
            QUnit.test("Version - TestEqualsGetHashCode", Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion.TestEqualsGetHashCode);
            QUnit.test("Version - TestToString", Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion.TestToString);
            QUnit.test("Version - TestParse", Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion.TestParse);
            QUnit.test("Version - TestOperators", Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion.TestOperators);
            QUnit.test("Tuple - Tuple1Works", Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests.Tuple1Works);
            QUnit.test("Tuple - Tuple2Works", Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests.Tuple2Works);
            QUnit.test("Tuple - Tuple3Works", Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests.Tuple3Works);
            QUnit.test("Tuple - Tuple4Works", Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests.Tuple4Works);
            QUnit.test("Tuple - Tuple5Works", Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests.Tuple5Works);
            QUnit.test("Tuple - Tuple6Works", Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests.Tuple6Works);
            QUnit.test("Tuple - Tuple7Works", Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests.Tuple7Works);
            QUnit.test("Tuple - Tuple8Works", Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests.Tuple8Works);
            QUnit.test("UInt16 - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.TypePropertiesAreCorrect);
            QUnit.test("UInt16 - CastsWork", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.CastsWork);
            QUnit.test("UInt16 - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.DefaultValueIs0);
            QUnit.test("UInt16 - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.DefaultConstructorReturnsZero);
            QUnit.test("UInt16 - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.CreatingInstanceReturnsZero);
            QUnit.test("UInt16 - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.ConstantsWork);
            QUnit.test("UInt16 - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.FormatWorks);
            QUnit.test("UInt16 - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.IFormattableToStringWorks);
            QUnit.test("UInt16 - TryParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.TryParseWorks);
            QUnit.test("UInt16 - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.ParseWorks);
            QUnit.test("UInt16 - ToStringWithoutRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.ToStringWithoutRadixWorks);
            QUnit.test("UInt16 - ToStringWithRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.ToStringWithRadixWorks);
            QUnit.test("UInt16 - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.GetHashCodeWorks);
            QUnit.test("UInt16 - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.EqualsWorks);
            QUnit.test("UInt16 - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.IEquatableEqualsWorks);
            QUnit.test("UInt16 - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.CompareToWorks);
            QUnit.test("UInt16 - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests.IComparableCompareToWorks);
            QUnit.test("UInt32 - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.TypePropertiesAreCorrect);
            QUnit.test("UInt32 - CastsWork", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.CastsWork);
            QUnit.test("UInt32 - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.DefaultValueIs0);
            QUnit.test("UInt32 - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.DefaultConstructorReturnsZero);
            QUnit.test("UInt32 - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.CreatingInstanceReturnsZero);
            QUnit.test("UInt32 - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.ConstantsWork);
            QUnit.test("UInt32 - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.FormatWorks);
            QUnit.test("UInt32 - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.IFormattableToStringWorks);
            QUnit.test("UInt32 - TryParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.TryParseWorks);
            QUnit.test("UInt32 - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.ParseWorks);
            QUnit.test("UInt32 - ToStringWithoutRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.ToStringWithoutRadixWorks);
            QUnit.test("UInt32 - ToStringWithRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.ToStringWithRadixWorks);
            QUnit.test("UInt32 - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.GetHashCodeWorks);
            QUnit.test("UInt32 - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.EqualsWorks);
            QUnit.test("UInt32 - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.IEquatableEqualsWorks);
            QUnit.test("UInt32 - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.CompareToWorks);
            QUnit.test("UInt32 - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests.IComparableCompareToWorks);
            QUnit.test("UInt64 - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.TypePropertiesAreCorrect);
            QUnit.test("UInt64 - MinMaxValuesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.MinMaxValuesAreCorrect);
            QUnit.test("UInt64 - CastsWork", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.CastsWork);
            QUnit.test("UInt64 - OverflowWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.OverflowWorks);
            QUnit.test("UInt64 - CombinedTypesOperationsWork", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.CombinedTypesOperationsWork);
            QUnit.test("UInt64 - DefaultValueIs0", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.DefaultValueIs0);
            QUnit.test("UInt64 - DefaultConstructorReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.DefaultConstructorReturnsZero);
            QUnit.test("UInt64 - CreatingInstanceReturnsZero", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.CreatingInstanceReturnsZero);
            QUnit.test("UInt64 - ConstantsWork", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.ConstantsWork);
            QUnit.test("UInt64 - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.FormatWorks);
            QUnit.test("UInt64 - IFormattableToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.IFormattableToStringWorks);
            QUnit.test("UInt64 - CastingOfLargeValuesToUInt64Works", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.CastingOfLargeValuesToUInt64Works);
            QUnit.test("UInt64 - DivisionOfLargeUInt64Works", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.DivisionOfLargeUInt64Works);
            QUnit.test("UInt64 - TryParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.TryParseWorks);
            QUnit.test("UInt64 - ParseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.ParseWorks);
            QUnit.test("UInt64 - ToStringWithoutRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.ToStringWithoutRadixWorks);
            QUnit.test("UInt64 - ToStringWithRadixWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.ToStringWithRadixWorks);
            QUnit.test("UInt64 - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.GetHashCodeWorks);
            QUnit.test("UInt64 - EqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.EqualsWorks);
            QUnit.test("UInt64 - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.IEquatableEqualsWorks);
            QUnit.test("UInt64 - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.CompareToWorks);
            QUnit.test("UInt64 - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests.IComparableCompareToWorks);
            QUnit.module("String");
            QUnit.test("StringFormatTests - Simple", Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests.Simple);
            QUnit.test("StringFormatTests - ValueFormating", Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests.ValueFormating);
            QUnit.test("StringFormatTests - SpaceControlling", Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests.SpaceControlling);
            QUnit.test("StringFormatTests - Aligment", Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests.Aligment);
            QUnit.test("StringFormatTests - PadIntegerWithLeadingZeros", Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests.PadIntegerWithLeadingZeros);
            QUnit.test("StringFormatTests - PadIntegerWithSpecificNumberLeadingZeros", Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests.PadIntegerWithSpecificNumberLeadingZeros);
            QUnit.test("StringFormatTests - PadNumericWithLeadingZerosToLength", Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests.PadNumericWithLeadingZerosToLength);
            QUnit.test("StringFormatTests - PadNumericWithSpecificNumberOfLeadingZeros", Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests.PadNumericWithSpecificNumberOfLeadingZeros);
            QUnit.test("FormattableString - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests.TypePropertiesAreCorrect);
            QUnit.test("FormattableString - ArgumentCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests.ArgumentCountWorks);
            QUnit.test("FormattableString - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests.FormatWorks);
            QUnit.test("FormattableString - GetArgumentWorks", Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests.GetArgumentWorks);
            QUnit.test("FormattableString - GetArgumentsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests.GetArgumentsWorks);
            QUnit.test("FormattableString - ArrayReturnedByGetArgumentsCanBeModified", Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests.ArrayReturnedByGetArgumentsCanBeModified);
            QUnit.test("FormattableString - ToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests.ToStringWorks);
            QUnit.test("FormattableString - InvariantWorks", Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests.InvariantWorks);
            QUnit.test("JsString - CharAtWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.CharAtWorks);
            QUnit.test("JsString - CharCodeAtWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.CharCodeAtWorks);
            QUnit.test("JsString - FromCharCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.FromCharCodeWorks);
            QUnit.test("JsString - LocaleCompareWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.LocaleCompareWorks);
            QUnit.test("JsString - SliceWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.SliceWorks);
            QUnit.test("JsString - SplitWithCharWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.SplitWithCharWorks);
            QUnit.test("JsString - SplitWithLimitWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.SplitWithLimitWorks);
            QUnit.test("JsString - SplitWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.SplitWorks);
            QUnit.test("JsString - SplitWithCharAndLimitWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.SplitWithCharAndLimitWorks);
            QUnit.test("JsString - SplitWithStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.SplitWithStringWorks);
            QUnit.test("JsString - JsSplitWithStringAndLimitWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.JsSplitWithStringAndLimitWorks);
            QUnit.test("JsString - SubstrWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.SubstrWorks);
            QUnit.test("JsString - JavaScriptSubstringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.JavaScriptSubstringWorks);
            QUnit.test("JsString - Strings", Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests.Strings);
            QUnit.test("String - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.TypePropertiesAreCorrect);
            QUnit.test("String - StringInterfaces", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.StringInterfaces);
            QUnit.test("String - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.DefaultConstructorWorks);
            QUnit.test("String - CharAndCountConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.CharAndCountConstructorWorks);
            QUnit.test("String - CharArrayConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.CharArrayConstructorWorks);
            QUnit.test("String - EmptyFieldWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.EmptyFieldWorks);
            QUnit.test("String - LengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.LengthPropertyWorks);
            QUnit.test("String - CompareToWorks_353", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.CompareToWorks_353);
            QUnit.test("String - CompareWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.CompareWorks);
            QUnit.test("String - CompareWithIgnoreCaseArgWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.CompareWithIgnoreCaseArgWorks);
            QUnit.test("String - ConcatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.ConcatWorks);
            QUnit.test("String - ConcatWithObjectsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.ConcatWithObjectsWorks);
            QUnit.test("String - EndsWithCharWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.EndsWithCharWorks);
            QUnit.test("String - EndsWithStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.EndsWithStringWorks);
            QUnit.test("String - StaticEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.StaticEqualsWorks);
            QUnit.test("String - FormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.FormatWorks);
            QUnit.test("String - FormatWorksExtended", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.FormatWorksExtended);
            QUnit.test("String - FormatWorksWithIFormattable", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.FormatWorksWithIFormattable);
            QUnit.test("String - FormatCanUseEscapedBraces", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.FormatCanUseEscapedBraces);
            QUnit.test("String - IndexOfCharWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.IndexOfCharWorks);
            QUnit.test("String - IndexOfStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.IndexOfStringWorks);
            QUnit.test("String - IndexOfCharWithStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.IndexOfCharWithStartIndexWorks);
            QUnit.test("String - IndexOfCharWithStartIndexAndCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.IndexOfCharWithStartIndexAndCountWorks);
            QUnit.test("String - IndexOfStringWithStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.IndexOfStringWithStartIndexWorks);
            QUnit.test("String - IndexOfStringWithStartIndexAndCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.IndexOfStringWithStartIndexAndCountWorks);
            QUnit.test("String - IndexOfAnyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.IndexOfAnyWorks);
            QUnit.test("String - IndexOfAnyWithStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.IndexOfAnyWithStartIndexWorks);
            QUnit.test("String - IndexOfAnyWithStartIndexAndCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.IndexOfAnyWithStartIndexAndCountWorks);
            QUnit.test("String - InsertWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.InsertWorks);
            QUnit.test("String - IsNullOrEmptyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.IsNullOrEmptyWorks);
            QUnit.test("String - LastIndexOfCharWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.LastIndexOfCharWorks);
            QUnit.test("String - LastIndexOfStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.LastIndexOfStringWorks);
            QUnit.test("String - LastIndexOfCharWithStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.LastIndexOfCharWithStartIndexWorks);
            QUnit.test("String - LastIndexOfStringWithStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.LastIndexOfStringWithStartIndexWorks);
            QUnit.test("String - LastIndexOfCharWithStartIndexAndCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.LastIndexOfCharWithStartIndexAndCountWorks);
            QUnit.test("String - LastIndexOfStringWithStartIndexAndCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.LastIndexOfStringWithStartIndexAndCountWorks);
            QUnit.test("String - LastIndexOfAnyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.LastIndexOfAnyWorks);
            QUnit.test("String - LastIndexOfAnyWithStartIndexWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.LastIndexOfAnyWithStartIndexWorks);
            QUnit.test("String - LastIndexOfAnyWithStartIndexAndCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.LastIndexOfAnyWithStartIndexAndCountWorks);
            QUnit.test("String - PadLeftWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.PadLeftWorks);
            QUnit.test("String - PadLeftWithCharWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.PadLeftWithCharWorks);
            QUnit.test("String - PadRightWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.PadRightWorks);
            QUnit.test("String - PadRightWithCharWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.PadRightWithCharWorks);
            QUnit.test("String - RemoveWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.RemoveWorks);
            QUnit.test("String - RemoveWithCountWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.RemoveWithCountWorks);
            QUnit.test("String - ReplaceWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.ReplaceWorks);
            QUnit.test("String - ReplaceCharWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.ReplaceCharWorks);
            QUnit.test("String - SplitWithCharWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.SplitWithCharWorks);
            QUnit.test("String - SplitWithCharsAndLimitWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.SplitWithCharsAndLimitWorks);
            QUnit.test("String - SplitWithCharsAndStringSplitOptionsAndLimitWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.SplitWithCharsAndStringSplitOptionsAndLimitWorks);
            QUnit.test("String - SomeNetSplitTests", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.SomeNetSplitTests);
            QUnit.test("String - SplitWithCharsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.SplitWithCharsWorks);
            QUnit.test("String - SplitWithStringsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.SplitWithStringsWorks);
            QUnit.test("String - SplitWithStringsAndLimitWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.SplitWithStringsAndLimitWorks);
            QUnit.test("String - StartsWithCharWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.StartsWithCharWorks);
            QUnit.test("String - StartsWithStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.StartsWithStringWorks);
            QUnit.test("String - SubstringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.SubstringWorks);
            QUnit.test("String - ToLowerCaseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.ToLowerCaseWorks);
            QUnit.test("String - ToUpperCaseWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.ToUpperCaseWorks);
            QUnit.test("String - ToLowerWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.ToLowerWorks);
            QUnit.test("String - ToUpperWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.ToUpperWorks);
            QUnit.test("String - TrimWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.TrimWorks);
            QUnit.test("String - TrimCharsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.TrimCharsWorks);
            QUnit.test("String - TrimStartCharsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.TrimStartCharsWorks);
            QUnit.test("String - TrimEndCharsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.TrimEndCharsWorks);
            QUnit.test("String - TrimStartWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.TrimStartWorks);
            QUnit.test("String - TrimEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.TrimEndWorks);
            QUnit.test("String - StringEqualityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.StringEqualityWorks);
            QUnit.test("String - StringInequalityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.StringInequalityWorks);
            QUnit.test("String - StringIndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.StringIndexingWorks);
            QUnit.test("String - GetHashCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.GetHashCodeWorks);
            QUnit.test("String - InstanceEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.InstanceEqualsWorks);
            QUnit.test("String - IEquatableEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.IEquatableEqualsWorks);
            QUnit.test("String - StringEqualsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.StringEqualsWorks);
            QUnit.test("String - CompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.CompareToWorks);
            QUnit.test("String - IComparableCompareToWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.IComparableCompareToWorks);
            QUnit.test("String - JoinWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.JoinWorks);
            QUnit.test("String - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.ContainsWorks);
            QUnit.test("String - ToCharArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.ToCharArrayWorks);
            QUnit.test("String - Strings", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.Strings);
            QUnit.test("String - Enumerable", Bridge.Test.Runtime.BridgeClientTestRunner.StringTests.Enumerable);
            QUnit.test("StringBuilder - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.TypePropertiesAreCorrect);
            QUnit.test("StringBuilder - DefaultConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.DefaultConstructorWorks);
            QUnit.test("StringBuilder - ConstructorWithCapacityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.ConstructorWithCapacityWorks);
            QUnit.test("StringBuilder - InitialTextConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.InitialTextConstructorWorks);
            QUnit.test("StringBuilder - InitialTextConstructorWithCapacityWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.InitialTextConstructorWithCapacityWorks);
            QUnit.test("StringBuilder - SubstringConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.SubstringConstructorWorks);
            QUnit.test("StringBuilder - AppendBoolWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.AppendBoolWorks);
            QUnit.test("StringBuilder - AppendCharWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.AppendCharWorks);
            QUnit.test("StringBuilder - AppendIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.AppendIntWorks);
            QUnit.test("StringBuilder - AppendDoubleWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.AppendDoubleWorks);
            QUnit.test("StringBuilder - AppendObjectWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.AppendObjectWorks);
            QUnit.test("StringBuilder - AppendStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.AppendStringWorks);
            QUnit.test("StringBuilder - AppendLineWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.AppendLineWorks);
            QUnit.test("StringBuilder - AppendLineStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.AppendLineStringWorks);
            QUnit.test("StringBuilder - ClearWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.ClearWorks);
            QUnit.test("StringBuilder - SetLengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.SetLengthWorks);
            QUnit.test("StringBuilder - ToStringWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.ToStringWorks);
            QUnit.test("StringBuilder - LengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.LengthPropertyWorks);
            QUnit.test("StringBuilder - StringBuilders", Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests.StringBuilders);
            QUnit.module("System interface");
            QUnit.test("IComparable - CallingMethodThroughIComparableInterfaceInvokesImplementingMethod", Bridge.Test.Runtime.BridgeClientTestRunner.IComparableTests.CallingMethodThroughIComparableInterfaceInvokesImplementingMethod);
            QUnit.test("IEquatable - CallingMethodThroughIComparableInterfaceInvokesImplementingMethod", Bridge.Test.Runtime.BridgeClientTestRunner.IEquatableTests.CallingMethodThroughIComparableInterfaceInvokesImplementingMethod);
            QUnit.module("Threading");
            QUnit.test("Async - AsyncVoid", Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests.AsyncVoid);
            QUnit.test("Async - AsyncTask", Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests.AsyncTask);
            QUnit.test("Async - AsyncTaskBodyThrowsException", Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests.AsyncTaskBodyThrowsException);
            QUnit.test("Async - AwaitTaskThatFaults", Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests.AwaitTaskThatFaults);
            QUnit.test("Async - AggregateExceptionsAreUnwrappedWhenAwaitingTask", Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests.AggregateExceptionsAreUnwrappedWhenAwaitingTask);
            QUnit.test("Async - AsyncTaskThatReturnsValue", Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests.AsyncTaskThatReturnsValue);
            QUnit.test("CancellationToken - TypePropertiesForCancellationTokenSourceAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.TypePropertiesForCancellationTokenSourceAreCorrect);
            QUnit.test("CancellationToken - TypePropertiesForCancellationTokenAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.TypePropertiesForCancellationTokenAreCorrect);
            QUnit.test("CancellationToken - TypePropertiesForCancellationTokenRegistrationAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.TypePropertiesForCancellationTokenRegistrationAreCorrect);
            QUnit.test("CancellationToken - CancellationTokenCreatedWithDefaultConstructorIsNotCanceledAndCannotBe", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.CancellationTokenCreatedWithDefaultConstructorIsNotCanceledAndCannotBe);
            QUnit.test("CancellationToken - CancellationTokenCreatedWithFalseArgumentToConstructorIsNotCanceledAndCannotBe", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.CancellationTokenCreatedWithFalseArgumentToConstructorIsNotCanceledAndCannotBe);
            QUnit.test("CancellationToken - CancellationTokenCreatedWithTrueArgumentToConstructorIsCanceled", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.CancellationTokenCreatedWithTrueArgumentToConstructorIsCanceled);
            QUnit.test("CancellationToken - CancellationTokenNoneIsNotCancelledAndCannotBe", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.CancellationTokenNoneIsNotCancelledAndCannotBe);
            QUnit.test("CancellationToken - CreatingADefaultCancellationTokenReturnsACancellationTokenThatIsNotCancelled", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.CreatingADefaultCancellationTokenReturnsACancellationTokenThatIsNotCancelled);
            QUnit.test("CancellationToken - ActivatorCreateForCancellationTokenReturnsACancellationTokenThatIsNotCancelled", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.ActivatorCreateForCancellationTokenReturnsACancellationTokenThatIsNotCancelled);
            QUnit.test("CancellationToken - CanBeCanceledIsTrueForTokenCreatedForCancellationTokenSource", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.CanBeCanceledIsTrueForTokenCreatedForCancellationTokenSource);
            QUnit.test("CancellationToken - IsCancellationRequestedForTokenCreatedForCancellationTokenSourceIsSetByTheCancelMethod", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.IsCancellationRequestedForTokenCreatedForCancellationTokenSourceIsSetByTheCancelMethod);
            QUnit.test("CancellationToken - ThrowIfCancellationRequestedForTokenCreatedForCancellationTokenSourceThrowsAfterTheCancelMethodIsCalled", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.ThrowIfCancellationRequestedForTokenCreatedForCancellationTokenSourceThrowsAfterTheCancelMethodIsCalled);
            QUnit.test("CancellationToken - CancelWithoutArgumentsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.CancelWithoutArgumentsWorks);
            QUnit.test("CancellationToken - CancelWorksWhenThrowOnFirstExceptionIsFalse", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.CancelWorksWhenThrowOnFirstExceptionIsFalse);
            QUnit.test("CancellationToken - CancelWorksWhenThrowOnFirstExceptionIsTrue", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.CancelWorksWhenThrowOnFirstExceptionIsTrue);
            QUnit.test("CancellationToken - RegisterOnACancelledSourceWithoutContextInvokesTheCallback", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.RegisterOnACancelledSourceWithoutContextInvokesTheCallback);
            QUnit.test("CancellationToken - RegisterWithArgumentOnACancelledSourceInvokesTheCallback", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.RegisterWithArgumentOnACancelledSourceInvokesTheCallback);
            QUnit.test("CancellationToken - RegisterOnACancelledSourceWithoutContextRethrowsAThrownException", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.RegisterOnACancelledSourceWithoutContextRethrowsAThrownException);
            QUnit.test("CancellationToken - RegisterOnACancelledSourceWithContextRethrowsAThrownException", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.RegisterOnACancelledSourceWithContextRethrowsAThrownException);
            QUnit.test("CancellationToken - RegisterOverloadsWithUseSynchronizationContextWork", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.RegisterOverloadsWithUseSynchronizationContextWork);
            QUnit.test("CancellationToken - RegisterOnCancellationTokenCreatedNonCancelledDoesNothing", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.RegisterOnCancellationTokenCreatedNonCancelledDoesNothing);
            QUnit.test("CancellationToken - RegisterOnCancellationTokenCreatedCancelledInvokesTheActionImmediately", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.RegisterOnCancellationTokenCreatedCancelledInvokesTheActionImmediately);
            QUnit.test("CancellationToken - DuplicateCancelDoesNotCauseCallbacksToBeCalledTwice", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.DuplicateCancelDoesNotCauseCallbacksToBeCalledTwice);
            QUnit.test("CancellationToken - RegistrationsCanBeCompared", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.RegistrationsCanBeCompared);
            QUnit.test("CancellationToken - RegistrationsCanBeUnregistered", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.RegistrationsCanBeUnregistered);
            QUnit.test("CancellationToken - CreatingADefaultCancellationTokenRegistrationReturnsARegistrationThatCanBeDisposedWithoutHarm", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.CreatingADefaultCancellationTokenRegistrationReturnsARegistrationThatCanBeDisposedWithoutHarm);
            QUnit.test("CancellationToken - LinkedSourceWithTwoTokensWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.LinkedSourceWithTwoTokensWorks);
            QUnit.test("CancellationToken - LinkedSourceWithThreeTokensWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests.LinkedSourceWithThreeTokensWorks);
            QUnit.test("Promise - TaskFromPromiseWithoutResultFactoryWorksWhenPromiseCompletes", Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests.TaskFromPromiseWithoutResultFactoryWorksWhenPromiseCompletes);
            QUnit.test("Promise - TaskFromPromiseWithResultFactoryWorksWhenPromiseCompletes", Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests.TaskFromPromiseWithResultFactoryWorksWhenPromiseCompletes);
            QUnit.test("Promise - TaskFromPromiseWorksWhenPromiseFails", Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests.TaskFromPromiseWorksWhenPromiseFails);
            QUnit.test("Promise - CompletingPromiseCanBeAwaited", Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests.CompletingPromiseCanBeAwaited);
            QUnit.test("Promise - FailingPromiseCanBeAwaited", Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests.FailingPromiseCanBeAwaited);
            QUnit.test("Promise - TaskFromPromiseWithProgressWithoutResultFactoryWorksWhenPromiseProgressesAndCompletes", Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests.TaskFromPromiseWithProgressWithoutResultFactoryWorksWhenPromiseProgressesAndCompletes);
            QUnit.test("Tasks - TaskCompletionSourceTypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.TaskCompletionSourceTypePropertiesAreCorrect);
            QUnit.test("Tasks - TaskTypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.TaskTypePropertiesAreCorrect);
            QUnit.test("Tasks - TaskCompletionSourceWorksWhenSettingResult", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.TaskCompletionSourceWorksWhenSettingResult);
            QUnit.test("Tasks - TaskCompletionSourceWorksWhenSettingASingleException", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.TaskCompletionSourceWorksWhenSettingASingleException);
            QUnit.test("Tasks - TaskCompletionSourceWorksWhenSettingTwoExceptions", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.TaskCompletionSourceWorksWhenSettingTwoExceptions);
            QUnit.test("Tasks - TaskCompletionSourceWorksWhenCancelling", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.TaskCompletionSourceWorksWhenCancelling);
            QUnit.test("Tasks - CancelledTaskThrowsTaskCanceledExceptionWhenAwaited", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.CancelledTaskThrowsTaskCanceledExceptionWhenAwaited);
            QUnit.test("Tasks - CancelledTaskThrowsAggregateExceptionWithTaskCanceledExceptionWhenResultIsAccessed", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.CancelledTaskThrowsAggregateExceptionWithTaskCanceledExceptionWhenResultIsAccessed);
            QUnit.test("Tasks - SetResultFailsWhenTheTaskIsCompleted", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.SetResultFailsWhenTheTaskIsCompleted);
            QUnit.test("Tasks - SetCanceledFailsWhenTheTaskIsCompleted", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.SetCanceledFailsWhenTheTaskIsCompleted);
            QUnit.test("Tasks - SetExceptionFailsWhenTheTaskIsCompleted", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.SetExceptionFailsWhenTheTaskIsCompleted);
            QUnit.test("Tasks - CompletedTaskHasCorrectIsXProperties", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.CompletedTaskHasCorrectIsXProperties);
            QUnit.test("Tasks - CancelledTaskHasCorrectIsXProperties", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.CancelledTaskHasCorrectIsXProperties);
            QUnit.test("Tasks - FaultedTaskHasCorrectIsXProperties", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.FaultedTaskHasCorrectIsXProperties);
            QUnit.test("Tasks - TrySetResultReturnsFalseWhenTheTaskIsCompleted", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.TrySetResultReturnsFalseWhenTheTaskIsCompleted);
            QUnit.test("Tasks - TrySetCanceledReturnsFalseWhenTheTaskIsCompleted", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.TrySetCanceledReturnsFalseWhenTheTaskIsCompleted);
            QUnit.test("Tasks - TrySetExceptionReturnsFalseWhenTheTaskIsCompleted", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.TrySetExceptionReturnsFalseWhenTheTaskIsCompleted);
            QUnit.test("Tasks - ContinueWithForNonGenericTaskWorkWithNoResultAndNoException", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.ContinueWithForNonGenericTaskWorkWithNoResultAndNoException);
            QUnit.test("Tasks - ContinueWithWhenCallbackThrowsAnException", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.ContinueWithWhenCallbackThrowsAnException);
            QUnit.test("Tasks - ExceptionInTaskBodyAppearsInTheExceptionMemberForNonGenericTask", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.ExceptionInTaskBodyAppearsInTheExceptionMemberForNonGenericTask);
            QUnit.test("Tasks - ContinueWithForNonGenericTaskCanReturnAValue", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.ContinueWithForNonGenericTaskCanReturnAValue);
            QUnit.test("Tasks - ContinueWithWithNoReturnValueForGenericTaskWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.ContinueWithWithNoReturnValueForGenericTaskWorks);
            QUnit.test("Tasks - ContinueWithForGenericTaskCanReturnAValue", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.ContinueWithForGenericTaskCanReturnAValue);
            QUnit.test("Tasks - DelayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.DelayWorks);
            QUnit.test("Tasks - FromResultWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.FromResultWorks);
            QUnit.test("Tasks - RunWithoutResultWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.RunWithoutResultWorks);
            QUnit.test("Tasks - RunWithResultWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.RunWithResultWorks);
            QUnit.test("Tasks - RunWorksWhenBodyThrows", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.RunWorksWhenBodyThrows);
            QUnit.test("Tasks - WhenAllParamArrayWithResultWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.WhenAllParamArrayWithResultWorks);
            QUnit.test("Tasks - WhenAllEnumerableWithResultWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.WhenAllEnumerableWithResultWorks);
            QUnit.test("Tasks - WhenAllParamArrayWithoutResultWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.WhenAllParamArrayWithoutResultWorks);
            QUnit.test("Tasks - WhenAllEnumerableWithoutResultWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.WhenAllEnumerableWithoutResultWorks);
            QUnit.test("Tasks - WhenAllShouldHaveAnErrorIfAnyIncludedTaskFaulted", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.WhenAllShouldHaveAnErrorIfAnyIncludedTaskFaulted);
            QUnit.test("Tasks - WhenAllShouldBeCancelledIfNoTaskWasFaultedButSomeWasCancelled", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.WhenAllShouldBeCancelledIfNoTaskWasFaultedButSomeWasCancelled);
            QUnit.test("Tasks - WhenAnyParamArrayWithResultWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.WhenAnyParamArrayWithResultWorks);
            QUnit.test("Tasks - WhenAnyEnumerableWithResultWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.WhenAnyEnumerableWithResultWorks);
            QUnit.test("Tasks - WhenAnyParamArrayWithoutResultWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.WhenAnyParamArrayWithoutResultWorks);
            QUnit.test("Tasks - WhenAnyEnumerableWithoutResultWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.WhenAnyEnumerableWithoutResultWorks);
            QUnit.test("Tasks - WhenAnyFaultsIfTheFirstTaskFaulted", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.WhenAnyFaultsIfTheFirstTaskFaulted);
            QUnit.test("Tasks - WhenAnyIsCancelledIfTheFirstTaskWasCancelled", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.WhenAnyIsCancelledIfTheFirstTaskWasCancelled);
            QUnit.test("Tasks - ConstructorWithOnlyActionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.ConstructorWithOnlyActionWorks);
            QUnit.test("Tasks - ConstructorWithActionAndStateWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.ConstructorWithActionAndStateWorks);
            QUnit.test("Tasks - ExceptionInManuallyCreatedTaskIsStoredOnTheTask", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.ExceptionInManuallyCreatedTaskIsStoredOnTheTask);
            QUnit.test("Tasks - ConstructorWithOnlyFunctionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.ConstructorWithOnlyFunctionWorks);
            QUnit.test("Tasks - ConstructorWithFunctionAndStateWorks", Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests.ConstructorWithFunctionAndStateWorks);
            QUnit.test("TimerTests - TestTimerThrows", Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests.TestTimerThrows);
            QUnit.test("TimerTests - TestStaticCallbackWithDispose", Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests.TestStaticCallbackWithDispose);
            QUnit.test("TimerTests - TestStaticCallbackWithChange", Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests.TestStaticCallbackWithChange);
            QUnit.test("TimerTests - TestInstanceCallbackWithDispose", Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests.TestInstanceCallbackWithDispose);
            QUnit.test("TimerTests - TestInstanceCallbackWithChange", Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests.TestInstanceCallbackWithChange);
            QUnit.test("TimerTests - TestInfiniteTimer", Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests.TestInfiniteTimer);
            QUnit.module("Type system");
            QUnit.test("Type - GettingBaseTypeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Bridge_ClientTest_TypeSystemTests.GettingBaseTypeWorks);
            QUnit.test("Type - IsAssignableFromWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Bridge_ClientTest_TypeSystemTests.IsAssignableFromWorks);
            QUnit.module("Typed Arrays");
            QUnit.test("ArrayBufferTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayBufferTests.TypePropertiesAreCorrect);
            QUnit.test("ArrayBufferTests - ConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayBufferTests.ConstructorWorks);
            QUnit.test("ArrayBufferTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.ArrayBufferTests.ByteLengthPropertyWorks);
            QUnit.test("DataViewTests - TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.TypePropertiesAreCorrect);
            QUnit.test("DataViewTests - ArrayBufferOnlyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.ArrayBufferOnlyConstructorWorks);
            QUnit.test("DataViewTests - ArrayBufferAndByteOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.ArrayBufferAndByteOffsetConstructorWorks);
            QUnit.test("DataViewTests - ArrayBufferAndByteOffsetAndByteLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.ArrayBufferAndByteOffsetAndByteLengthConstructorWorks);
            QUnit.test("DataViewTests - GetInt8Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.GetInt8Works);
            QUnit.test("DataViewTests - GetUint8Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.GetUint8Works);
            QUnit.test("DataViewTests - GetInt16Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.GetInt16Works);
            QUnit.test("DataViewTests - GetUint16Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.GetUint16Works);
            QUnit.test("DataViewTests - GetInt32Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.GetInt32Works);
            QUnit.test("DataViewTests - GetUint32Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.GetUint32Works);
            QUnit.test("DataViewTests - GetFloat32Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.GetFloat32Works);
            QUnit.test("DataViewTests - GetFloat64Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.GetFloat64Works);
            QUnit.test("DataViewTests - SetInt8Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.SetInt8Works);
            QUnit.test("DataViewTests - SetUint8Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.SetUint8Works);
            QUnit.test("DataViewTests - SetInt16Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.SetInt16Works);
            QUnit.test("DataViewTests - SetUint16Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.SetUint16Works);
            QUnit.test("DataViewTests - SetInt32Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.SetInt32Works);
            QUnit.test("DataViewTests - SetUint32Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.SetUint32Works);
            QUnit.test("DataViewTests - SetFloat32Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.SetFloat32Works);
            QUnit.test("DataViewTests - SetFloat64Works", Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests.SetFloat64Works);
            QUnit.test("Float32ArrayTests - LengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.LengthConstructorWorks);
            QUnit.test("Float32ArrayTests - ConstructorFromIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.ConstructorFromIntWorks);
            QUnit.test("Float32ArrayTests - CopyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.CopyConstructorWorks);
            QUnit.test("Float32ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.ArrayBufferConstructorWorks);
            QUnit.test("Float32ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.ArrayBufferWithOffsetConstructorWorks);
            QUnit.test("Float32ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Float32ArrayTests - StaticBytesPerElementWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.StaticBytesPerElementWorks);
            QUnit.test("Float32ArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.LengthWorks);
            QUnit.test("Float32ArrayTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.IndexingWorks);
            QUnit.test("Float32ArrayTests - SetFloat32ArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.SetFloat32ArrayWorks);
            QUnit.test("Float32ArrayTests - SetFloat32ArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.SetFloat32ArrayWithOffsetWorks);
            QUnit.test("Float32ArrayTests - SetNormalArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.SetNormalArrayWorks);
            QUnit.test("Float32ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.SetNormalArrayWithOffsetWorks);
            QUnit.test("Float32ArrayTests - SubarrayWithBeginWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.SubarrayWithBeginWorks);
            QUnit.test("Float32ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.SubarrayWithBeginAndEndWorks);
            QUnit.test("Float32ArrayTests - BufferPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.BufferPropertyWorks);
            QUnit.test("Float32ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.ByteOffsetPropertyWorks);
            QUnit.test("Float32ArrayTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.ByteLengthPropertyWorks);
            QUnit.test("Float32ArrayTests - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.IndexOfWorks);
            QUnit.test("Float32ArrayTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.ContainsWorks);
            QUnit.test("Float32ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.ForeachWorks_SPI_1401);
            QUnit.test("Float32ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.GetEnumeratorWorks_SPI_1401);
            QUnit.test("Float32ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.IEnumerableGetEnumeratorWorks);
            QUnit.test("Float32ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.ICollectionMethodsWork_SPI_1559);
            QUnit.test("Float32ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.IListMethodsWork_SPI_1559);
            QUnit.test("Float32ArrayTests - IListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.IListIsReadOnlyWorks);
            QUnit.test("Float32ArrayTests - ICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.ICollectionIsReadOnlyWorks);
            QUnit.test("Float32ArrayTests - ICollectionCopyTo", Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests.ICollectionCopyTo);
            QUnit.test("Float64ArrayTests - LengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.LengthConstructorWorks);
            QUnit.test("Float64ArrayTests - ConstructorFromIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.ConstructorFromIntWorks);
            QUnit.test("Float64ArrayTests - CopyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.CopyConstructorWorks);
            QUnit.test("Float64ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.ArrayBufferConstructorWorks);
            QUnit.test("Float64ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.ArrayBufferWithOffsetConstructorWorks);
            QUnit.test("Float64ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Float64ArrayTests - StaticBytesPerElementWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.StaticBytesPerElementWorks);
            QUnit.test("Float64ArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.LengthWorks);
            QUnit.test("Float64ArrayTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.IndexingWorks);
            QUnit.test("Float64ArrayTests - SetFloat64ArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.SetFloat64ArrayWorks);
            QUnit.test("Float64ArrayTests - SetFloat64ArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.SetFloat64ArrayWithOffsetWorks);
            QUnit.test("Float64ArrayTests - SetNormalArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.SetNormalArrayWorks);
            QUnit.test("Float64ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.SetNormalArrayWithOffsetWorks);
            QUnit.test("Float64ArrayTests - SubarrayWithBeginWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.SubarrayWithBeginWorks);
            QUnit.test("Float64ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.SubarrayWithBeginAndEndWorks);
            QUnit.test("Float64ArrayTests - BufferPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.BufferPropertyWorks);
            QUnit.test("Float64ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.ByteOffsetPropertyWorks);
            QUnit.test("Float64ArrayTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.ByteLengthPropertyWorks);
            QUnit.test("Float64ArrayTests - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.IndexOfWorks);
            QUnit.test("Float64ArrayTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.ContainsWorks);
            QUnit.test("Float64ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.ForeachWorks_SPI_1401);
            QUnit.test("Float64ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.GetEnumeratorWorks_SPI_1401);
            QUnit.test("Float64ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.IEnumerableGetEnumeratorWorks);
            QUnit.test("Float64ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.ICollectionMethodsWork_SPI_1559);
            QUnit.test("Float64ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.IListMethodsWork_SPI_1559);
            QUnit.test("Float64ArrayTests - IListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.IListIsReadOnlyWorks);
            QUnit.test("Float64ArrayTests - ICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.ICollectionIsReadOnlyWorks);
            QUnit.test("Float64ArrayTests - ICollectionCopyTo", Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests.ICollectionCopyTo);
            QUnit.test("Int16ArrayTests - LengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.LengthConstructorWorks);
            QUnit.test("Int16ArrayTests - ConstructorFromIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.ConstructorFromIntWorks);
            QUnit.test("Int16ArrayTests - CopyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.CopyConstructorWorks);
            QUnit.test("Int16ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.ArrayBufferConstructorWorks);
            QUnit.test("Int16ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.ArrayBufferWithOffsetConstructorWorks);
            QUnit.test("Int16ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Int16ArrayTests - StaticBytesPerElementWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.StaticBytesPerElementWorks);
            QUnit.test("Int16ArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.LengthWorks);
            QUnit.test("Int16ArrayTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.IndexingWorks);
            QUnit.test("Int16ArrayTests - SetInt16ArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.SetInt16ArrayWorks);
            QUnit.test("Int16ArrayTests - SetInt16ArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.SetInt16ArrayWithOffsetWorks);
            QUnit.test("Int16ArrayTests - SetNormalArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.SetNormalArrayWorks);
            QUnit.test("Int16ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.SetNormalArrayWithOffsetWorks);
            QUnit.test("Int16ArrayTests - SubarrayWithBeginWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.SubarrayWithBeginWorks);
            QUnit.test("Int16ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.SubarrayWithBeginAndEndWorks);
            QUnit.test("Int16ArrayTests - BufferPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.BufferPropertyWorks);
            QUnit.test("Int16ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.ByteOffsetPropertyWorks);
            QUnit.test("Int16ArrayTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.ByteLengthPropertyWorks);
            QUnit.test("Int16ArrayTests - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.IndexOfWorks);
            QUnit.test("Int16ArrayTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.ContainsWorks);
            QUnit.test("Int16ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.ForeachWorks_SPI_1401);
            QUnit.test("Int16ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.GetEnumeratorWorks_SPI_1401);
            QUnit.test("Int16ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.IEnumerableGetEnumeratorWorks);
            QUnit.test("Int16ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.ICollectionMethodsWork_SPI_1559);
            QUnit.test("Int16ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.IListMethodsWork_SPI_1559);
            QUnit.test("Int16ArrayTests - IListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.IListIsReadOnlyWorks);
            QUnit.test("Int16ArrayTests - ICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.ICollectionIsReadOnlyWorks);
            QUnit.test("Int16ArrayTests - ICollectionCopyTo", Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests.ICollectionCopyTo);
            QUnit.test("Int32ArrayTests - LengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.LengthConstructorWorks);
            QUnit.test("Int32ArrayTests - ConstructorFromIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.ConstructorFromIntWorks);
            QUnit.test("Int32ArrayTests - CopyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.CopyConstructorWorks);
            QUnit.test("Int32ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.ArrayBufferConstructorWorks);
            QUnit.test("Int32ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.ArrayBufferWithOffsetConstructorWorks);
            QUnit.test("Int32ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Int32ArrayTests - StaticBytesPerElementWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.StaticBytesPerElementWorks);
            QUnit.test("Int32ArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.LengthWorks);
            QUnit.test("Int32ArrayTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.IndexingWorks);
            QUnit.test("Int32ArrayTests - SetInt32ArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.SetInt32ArrayWorks);
            QUnit.test("Int32ArrayTests - SetInt32ArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.SetInt32ArrayWithOffsetWorks);
            QUnit.test("Int32ArrayTests - SetNormalArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.SetNormalArrayWorks);
            QUnit.test("Int32ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.SetNormalArrayWithOffsetWorks);
            QUnit.test("Int32ArrayTests - SubarrayWithBeginWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.SubarrayWithBeginWorks);
            QUnit.test("Int32ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.SubarrayWithBeginAndEndWorks);
            QUnit.test("Int32ArrayTests - BufferPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.BufferPropertyWorks);
            QUnit.test("Int32ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.ByteOffsetPropertyWorks);
            QUnit.test("Int32ArrayTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.ByteLengthPropertyWorks);
            QUnit.test("Int32ArrayTests - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.IndexOfWorks);
            QUnit.test("Int32ArrayTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.ContainsWorks);
            QUnit.test("Int32ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.ForeachWorks_SPI_1401);
            QUnit.test("Int32ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.GetEnumeratorWorks_SPI_1401);
            QUnit.test("Int32ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.IEnumerableGetEnumeratorWorks);
            QUnit.test("Int32ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.ICollectionMethodsWork_SPI_1559);
            QUnit.test("Int32ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.IListMethodsWork_SPI_1559);
            QUnit.test("Int32ArrayTests - IListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.IListIsReadOnlyWorks);
            QUnit.test("Int32ArrayTests - ICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.ICollectionIsReadOnlyWorks);
            QUnit.test("Int32ArrayTests - ICollectionCopyTo", Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests.ICollectionCopyTo);
            QUnit.test("Int8ArrayTests - LengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.LengthConstructorWorks);
            QUnit.test("Int8ArrayTests - ConstructorFromIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.ConstructorFromIntWorks);
            QUnit.test("Int8ArrayTests - CopyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.CopyConstructorWorks);
            QUnit.test("Int8ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.ArrayBufferConstructorWorks);
            QUnit.test("Int8ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.ArrayBufferWithOffsetConstructorWorks);
            QUnit.test("Int8ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Int8ArrayTests - StaticBytesPerElementWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.StaticBytesPerElementWorks);
            QUnit.test("Int8ArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.LengthWorks);
            QUnit.test("Int8ArrayTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.IndexingWorks);
            QUnit.test("Int8ArrayTests - SetInt8ArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.SetInt8ArrayWorks);
            QUnit.test("Int8ArrayTests - SetInt8ArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.SetInt8ArrayWithOffsetWorks);
            QUnit.test("Int8ArrayTests - SetNormalArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.SetNormalArrayWorks);
            QUnit.test("Int8ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.SetNormalArrayWithOffsetWorks);
            QUnit.test("Int8ArrayTests - SubarrayWithBeginWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.SubarrayWithBeginWorks);
            QUnit.test("Int8ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.SubarrayWithBeginAndEndWorks);
            QUnit.test("Int8ArrayTests - BufferPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.BufferPropertyWorks);
            QUnit.test("Int8ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.ByteOffsetPropertyWorks);
            QUnit.test("Int8ArrayTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.ByteLengthPropertyWorks);
            QUnit.test("Int8ArrayTests - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.IndexOfWorks);
            QUnit.test("Int8ArrayTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.ContainsWorks);
            QUnit.test("Int8ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.ForeachWorks_SPI_1401);
            QUnit.test("Int8ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.GetEnumeratorWorks_SPI_1401);
            QUnit.test("Int8ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.IEnumerableGetEnumeratorWorks);
            QUnit.test("Int8ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.ICollectionMethodsWork_SPI_1559);
            QUnit.test("Int8ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.IListMethodsWork_SPI_1559);
            QUnit.test("Int8ArrayTests - IListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.IListIsReadOnlyWorks);
            QUnit.test("Int8ArrayTests - ICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.ICollectionIsReadOnlyWorks);
            QUnit.test("Int8ArrayTests - ICollectionCopyTo", Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests.ICollectionCopyTo);
            QUnit.test("Uint16ArrayTests - LengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.LengthConstructorWorks);
            QUnit.test("Uint16ArrayTests - ConstructorFromIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.ConstructorFromIntWorks);
            QUnit.test("Uint16ArrayTests - CopyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.CopyConstructorWorks);
            QUnit.test("Uint16ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.ArrayBufferConstructorWorks);
            QUnit.test("Uint16ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.ArrayBufferWithOffsetConstructorWorks);
            QUnit.test("Uint16ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Uint16ArrayTests - StaticBytesPerElementWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.StaticBytesPerElementWorks);
            QUnit.test("Uint16ArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.LengthWorks);
            QUnit.test("Uint16ArrayTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.IndexingWorks);
            QUnit.test("Uint16ArrayTests - SetUint16ArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.SetUint16ArrayWorks);
            QUnit.test("Uint16ArrayTests - SetUint16ArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.SetUint16ArrayWithOffsetWorks);
            QUnit.test("Uint16ArrayTests - SetNormalArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.SetNormalArrayWorks);
            QUnit.test("Uint16ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.SetNormalArrayWithOffsetWorks);
            QUnit.test("Uint16ArrayTests - SubarrayWithBeginWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.SubarrayWithBeginWorks);
            QUnit.test("Uint16ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.SubarrayWithBeginAndEndWorks);
            QUnit.test("Uint16ArrayTests - BufferPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.BufferPropertyWorks);
            QUnit.test("Uint16ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.ByteOffsetPropertyWorks);
            QUnit.test("Uint16ArrayTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.ByteLengthPropertyWorks);
            QUnit.test("Uint16ArrayTests - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.IndexOfWorks);
            QUnit.test("Uint16ArrayTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.ContainsWorks);
            QUnit.test("Uint16ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.ForeachWorks_SPI_1401);
            QUnit.test("Uint16ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.GetEnumeratorWorks_SPI_1401);
            QUnit.test("Uint16ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.IEnumerableGetEnumeratorWorks);
            QUnit.test("Uint16ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.ICollectionMethodsWork_SPI_1559);
            QUnit.test("Uint16ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.IListMethodsWork_SPI_1559);
            QUnit.test("Uint16ArrayTests - IListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.IListIsReadOnlyWorks);
            QUnit.test("Uint16ArrayTests - ICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.ICollectionIsReadOnlyWorks);
            QUnit.test("Uint16ArrayTests - ICollectionCopyTo", Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests.ICollectionCopyTo);
            QUnit.test("Uint32ArrayTests - LengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.LengthConstructorWorks);
            QUnit.test("Uint32ArrayTests - ConstructorFromIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.ConstructorFromIntWorks);
            QUnit.test("Uint32ArrayTests - CopyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.CopyConstructorWorks);
            QUnit.test("Uint32ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.ArrayBufferConstructorWorks);
            QUnit.test("Uint32ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.ArrayBufferWithOffsetConstructorWorks);
            QUnit.test("Uint32ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Uint32ArrayTests - StaticBytesPerElementWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.StaticBytesPerElementWorks);
            QUnit.test("Uint32ArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.LengthWorks);
            QUnit.test("Uint32ArrayTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.IndexingWorks);
            QUnit.test("Uint32ArrayTests - SetUint32ArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.SetUint32ArrayWorks);
            QUnit.test("Uint32ArrayTests - SetUint32ArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.SetUint32ArrayWithOffsetWorks);
            QUnit.test("Uint32ArrayTests - SetNormalArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.SetNormalArrayWorks);
            QUnit.test("Uint32ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.SetNormalArrayWithOffsetWorks);
            QUnit.test("Uint32ArrayTests - SubarrayWithBeginWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.SubarrayWithBeginWorks);
            QUnit.test("Uint32ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.SubarrayWithBeginAndEndWorks);
            QUnit.test("Uint32ArrayTests - BufferPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.BufferPropertyWorks);
            QUnit.test("Uint32ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.ByteOffsetPropertyWorks);
            QUnit.test("Uint32ArrayTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.ByteLengthPropertyWorks);
            QUnit.test("Uint32ArrayTests - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.IndexOfWorks);
            QUnit.test("Uint32ArrayTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.ContainsWorks);
            QUnit.test("Uint32ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.ForeachWorks_SPI_1401);
            QUnit.test("Uint32ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.GetEnumeratorWorks_SPI_1401);
            QUnit.test("Uint32ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.IEnumerableGetEnumeratorWorks);
            QUnit.test("Uint32ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.ICollectionMethodsWork_SPI_1559);
            QUnit.test("Uint32ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.IListMethodsWork_SPI_1559);
            QUnit.test("Uint32ArrayTests - IListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.IListIsReadOnlyWorks);
            QUnit.test("Uint32ArrayTests - ICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.ICollectionIsReadOnlyWorks);
            QUnit.test("Uint32ArrayTests - ICollectionCopyTo", Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests.ICollectionCopyTo);
            QUnit.test("Uint8ArrayTests - LengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.LengthConstructorWorks);
            QUnit.test("Uint8ArrayTests - ConstructorFromIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.ConstructorFromIntWorks);
            QUnit.test("Uint8ArrayTests - CopyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.CopyConstructorWorks);
            QUnit.test("Uint8ArrayTests - ArrayBufferConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.ArrayBufferConstructorWorks);
            QUnit.test("Uint8ArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.ArrayBufferWithOffsetConstructorWorks);
            QUnit.test("Uint8ArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Uint8ArrayTests - StaticBytesPerElementWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.StaticBytesPerElementWorks);
            QUnit.test("Uint8ArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.LengthWorks);
            QUnit.test("Uint8ArrayTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.IndexingWorks);
            QUnit.test("Uint8ArrayTests - SetUint8ArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.SetUint8ArrayWorks);
            QUnit.test("Uint8ArrayTests - SetUint8ArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.SetUint8ArrayWithOffsetWorks);
            QUnit.test("Uint8ArrayTests - SetNormalArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.SetNormalArrayWorks);
            QUnit.test("Uint8ArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.SetNormalArrayWithOffsetWorks);
            QUnit.test("Uint8ArrayTests - SubarrayWithBeginWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.SubarrayWithBeginWorks);
            QUnit.test("Uint8ArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.SubarrayWithBeginAndEndWorks);
            QUnit.test("Uint8ArrayTests - BufferPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.BufferPropertyWorks);
            QUnit.test("Uint8ArrayTests - ByteOffsetPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.ByteOffsetPropertyWorks);
            QUnit.test("Uint8ArrayTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.ByteLengthPropertyWorks);
            QUnit.test("Uint8ArrayTests - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.IndexOfWorks);
            QUnit.test("Uint8ArrayTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.ContainsWorks);
            QUnit.test("Uint8ArrayTests - ForeachWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.ForeachWorks_SPI_1401);
            QUnit.test("Uint8ArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.GetEnumeratorWorks_SPI_1401);
            QUnit.test("Uint8ArrayTests - IEnumerableGetEnumeratorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.IEnumerableGetEnumeratorWorks);
            QUnit.test("Uint8ArrayTests - ICollectionMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.ICollectionMethodsWork_SPI_1559);
            QUnit.test("Uint8ArrayTests - IListMethodsWork_SPI_1559", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.IListMethodsWork_SPI_1559);
            QUnit.test("Uint8ArrayTests - IListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.IListIsReadOnlyWorks);
            QUnit.test("Uint8ArrayTests - ICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.ICollectionIsReadOnlyWorks);
            QUnit.test("Uint8ArrayTests - ICollectionCopyTo", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests.ICollectionCopyTo);
            QUnit.test("Uint8ClampedArrayTests - TypePropertiesAreCorrect_SPI_1560", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.TypePropertiesAreCorrect_SPI_1560);
            QUnit.test("Uint8ClampedArrayTests - LengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.LengthConstructorWorks);
            QUnit.test("Uint8ClampedArrayTests - ConstructorFromIntWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.ConstructorFromIntWorks);
            QUnit.test("Uint8ClampedArrayTests - ConstructorFromUint8ArrayWorks_SPI_TODO", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.ConstructorFromUint8ArrayWorks_SPI_TODO);
            QUnit.test("Uint8ClampedArrayTests - CopyConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.CopyConstructorWorks);
            QUnit.test("Uint8ClampedArrayTests - ArrayBufferConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.ArrayBufferConstructorWorks);
            QUnit.test("Uint8ClampedArrayTests - ArrayBufferWithOffsetConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.ArrayBufferWithOffsetConstructorWorks);
            QUnit.test("Uint8ClampedArrayTests - ArrayBufferWithOffsetAndLengthConstructorWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.ArrayBufferWithOffsetAndLengthConstructorWorks);
            QUnit.test("Uint8ClampedArrayTests - StaticBytesPerElementWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.StaticBytesPerElementWorks);
            QUnit.test("Uint8ClampedArrayTests - LengthWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.LengthWorks);
            QUnit.test("Uint8ClampedArrayTests - IndexingWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.IndexingWorks);
            QUnit.test("Uint8ClampedArrayTests - SetUint8ClampedArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.SetUint8ClampedArrayWorks);
            QUnit.test("Uint8ClampedArrayTests - SetUint8ClampedArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.SetUint8ClampedArrayWithOffsetWorks);
            QUnit.test("Uint8ClampedArrayTests - SetNormalArrayWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.SetNormalArrayWorks);
            QUnit.test("Uint8ClampedArrayTests - SetNormalArrayWithOffsetWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.SetNormalArrayWithOffsetWorks);
            QUnit.test("Uint8ClampedArrayTests - SubarrayWithBeginWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.SubarrayWithBeginWorks);
            QUnit.test("Uint8ClampedArrayTests - SubarrayWithBeginAndEndWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.SubarrayWithBeginAndEndWorks);
            QUnit.test("Uint8ClampedArrayTests - BufferPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.BufferPropertyWorks);
            QUnit.test("Uint8ClampedArrayTests - ByteOffsetPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.ByteOffsetPropertyWorks);
            QUnit.test("Uint8ClampedArrayTests - ByteLengthPropertyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.ByteLengthPropertyWorks);
            QUnit.test("Uint8ClampedArrayTests - IndexOfWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.IndexOfWorks);
            QUnit.test("Uint8ClampedArrayTests - ContainsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.ContainsWorks);
            QUnit.test("Uint8ClampedArrayTests - ForeachWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.ForeachWorks_SPI_1401);
            QUnit.test("Uint8ClampedArrayTests - GetEnumeratorWorks_SPI_1401", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.GetEnumeratorWorks_SPI_1401);
            QUnit.test("Uint8ClampedArrayTests - ICollectionMethodsWork_SPI_1559_1560", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.ICollectionMethodsWork_SPI_1559_1560);
            QUnit.test("Uint8ClampedArrayTests - IListMethodsWork_SPI_1559_1560", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.IListMethodsWork_SPI_1559_1560);
            QUnit.test("Uint8ClampedArrayTests - IListIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.IListIsReadOnlyWorks);
            QUnit.test("Uint8ClampedArrayTests - ICollectionIsReadOnlyWorks", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.ICollectionIsReadOnlyWorks);
            QUnit.test("Uint8ClampedArrayTests - ICollectionCopyTo", Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests.ICollectionCopyTo);
            QUnit.module("Utilities");
            QUnit.test("Environment - CommandLineNotEmpty", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.CommandLineNotEmpty);
            QUnit.test("Environment - CurrentDirectoryNotEmpty", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.CurrentDirectoryNotEmpty);
            QUnit.test("Environment - CurrentManagedThreadIdZero", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.CurrentManagedThreadIdZero);
            QUnit.test("Environment - ExitCodeWorks", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.ExitCodeWorks);
            QUnit.test("Environment - HasShutdownStartedFalse", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.HasShutdownStartedFalse);
            QUnit.test("Environment - Is64BitOperatingSystemNotNull", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.Is64BitOperatingSystemNotNull);
            QUnit.test("Environment - Is64BitProcessNotNull", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.Is64BitProcessNotNull);
            QUnit.test("Environment - MachineNameEmpty", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.MachineNameEmpty);
            QUnit.test("Environment - NewLineIsAStringContainingOnlyTheNewLineChar", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.NewLineIsAStringContainingOnlyTheNewLineChar);
            QUnit.test("Environment - OSVersionNull", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.OSVersionNull);
            QUnit.test("Environment - ProcessorCountMoreThanZero", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.ProcessorCountMoreThanZero);
            QUnit.test("Environment - StackTraceNotEmpty", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.StackTraceNotEmpty);
            QUnit.test("Environment - SystemDirectoryEmpty", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.SystemDirectoryEmpty);
            QUnit.test("Environment - SystemPageSizeEqualsOne", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.SystemPageSizeEqualsOne);
            QUnit.test("Environment - TickCountNotEmpty", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.TickCountNotEmpty);
            QUnit.test("Environment - UserDomainNameEmpty", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.UserDomainNameEmpty);
            QUnit.test("Environment - UserInteractiveTrue", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.UserInteractiveTrue);
            QUnit.test("Environment - UserNameEmpty", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.UserNameEmpty);
            QUnit.test("Environment - VersionWorks", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.VersionWorks);
            QUnit.test("Environment - WorkingSetZero", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.WorkingSetZero);
            QUnit.test("Environment - ExitSetsExitCode", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.ExitSetsExitCode);
            QUnit.test("Environment - ExpandEnvironmentVariablesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.ExpandEnvironmentVariablesWorks);
            QUnit.test("Environment - FailFastWorks", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.FailFastWorks);
            QUnit.test("Environment - GetCommandLineArgsWorks", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.GetCommandLineArgsWorks);
            QUnit.test("Environment - GetEnvironmentVariableOneParameterWorks", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.GetEnvironmentVariableOneParameterWorks);
            QUnit.test("Environment - GetEnvironmentVariableRwoParametersWorks", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.GetEnvironmentVariableRwoParametersWorks);
            QUnit.test("Environment - GetEnvironmentVariablesWorks", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.GetEnvironmentVariablesWorks);
            QUnit.test("Environment - GetEnvironmentVariablesOneParameterWorks", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.GetEnvironmentVariablesOneParameterWorks);
            QUnit.test("Environment - GetFolderPathOneParameterEmpty", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.GetFolderPathOneParameterEmpty);
            QUnit.test("Environment - GetFolderPathTwoParametersEmpty", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.GetFolderPathTwoParametersEmpty);
            QUnit.test("Environment - GetLogicalDrivesEmpty", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.GetLogicalDrivesEmpty);
            QUnit.test("Environment - SetEnvironmentVariableTwoParametersWorks", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.SetEnvironmentVariableTwoParametersWorks);
            QUnit.test("Environment - SetEnvironmentVariableThreeParametersWorks", Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests.SetEnvironmentVariableThreeParametersWorks);
            QUnit.module("СultureInfo");
            QUnit.test("TypePropertiesAreCorrect", Bridge.Test.Runtime.BridgeClientTestRunner.CultureInfoTests.TypePropertiesAreCorrect);
            QUnit.test("GetFormatWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CultureInfoTests.GetFormatWorks);
            QUnit.test("InvariantWorks", Bridge.Test.Runtime.BridgeClientTestRunner.CultureInfoTests.InvariantWorks);
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "20"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorWorks()",
                        Line: "29"
                    } ));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithIEnumerableInnerExceptionsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithIEnumerableInnerExceptionsWorks()",
                        Line: "40"
                    } ));
                    t.Fixture.ConstructorWithIEnumerableInnerExceptionsWorks();
                },
                ConstructorWithInnerExceptionArrayWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithInnerExceptionArrayWorks()",
                        Line: "71"
                    } ));
                    t.Fixture.ConstructorWithInnerExceptionArrayWorks();
                },
                ConstructorWithMessageWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageWorks()",
                        Line: "102"
                    } ));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                ConstructorWithMessageAndIEnumerableInnerExceptionsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageAndIEnumerableInnerExceptionsWorks()",
                        Line: "113"
                    } ));
                    t.Fixture.ConstructorWithMessageAndIEnumerableInnerExceptionsWorks();
                },
                ConstructorWithMessageAndInnerExceptionArrayWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageAndInnerExceptionArrayWorks()",
                        Line: "144"
                    } ));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionArrayWorks();
                },
                FlattenWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AggregateExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FlattenWorks()",
                        Line: "175"
                    } ));
                    t.Fixture.FlattenWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Exceptions.AggregateExceptionTests",
                        File: "Batch1\\Exceptions\\AggregateExceptionTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.AmbiguousMatchExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AmbiguousMatchExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AmbiguousMatchExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AmbiguousMatchExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "12"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AmbiguousMatchExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AmbiguousMatchExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorWorks()",
                        Line: "26"
                    } ));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithMessageWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AmbiguousMatchExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AmbiguousMatchExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageWorks()",
                        Line: "35"
                    } ));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.AmbiguousMatchExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AmbiguousMatchExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageAndInnerExceptionWorks()",
                        Line: "44"
                    } ));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Exceptions.AmbiguousMatchExceptionTests",
                        File: "Batch1\\Exceptions\\AmbiguousMatchExceptionTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "12"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorWorks()",
                        Line: "21"
                    } ));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithMessageWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageWorks()",
                        Line: "31"
                    } ));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageAndInnerExceptionWorks()",
                        Line: "41"
                    } ));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                },
                ConstructorWithMessageAndParamNameWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageAndParamNameWorks()",
                        Line: "52"
                    } ));
                    t.Fixture.ConstructorWithMessageAndParamNameWorks();
                },
                ConstructorWithMessageAndParamNameAndInnerExceptionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageAndParamNameAndInnerExceptionWorks()",
                        Line: "62"
                    } ));
                    t.Fixture.ConstructorWithMessageAndParamNameAndInnerExceptionWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Exceptions.ArgumentExceptionTests",
                        File: "Batch1\\Exceptions\\ArgumentExceptionTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentNullExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentNullExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentNullExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentNullExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "10"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentNullExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentNullExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorWorks()",
                        Line: "20"
                    } ));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithParamNameWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentNullExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentNullExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithParamNameWorks()",
                        Line: "30"
                    } ));
                    t.Fixture.ConstructorWithParamNameWorks();
                },
                ConstructorWithParamNameAndMessageWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentNullExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentNullExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithParamNameAndMessageWorks()",
                        Line: "40"
                    } ));
                    t.Fixture.ConstructorWithParamNameAndMessageWorks();
                },
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentNullExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentNullExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageAndInnerExceptionWorks()",
                        Line: "50"
                    } ));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Exceptions.ArgumentNullExceptionTests",
                        File: "Batch1\\Exceptions\\ArgumentNullExceptionTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentOutOfRangeExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentOutOfRangeExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "10"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentOutOfRangeExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorWorks()",
                        Line: "20"
                    } ));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithParamNameWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentOutOfRangeExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithParamNameWorks()",
                        Line: "31"
                    } ));
                    t.Fixture.ConstructorWithParamNameWorks();
                },
                ConstructorWithParamNameAndMessageWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentOutOfRangeExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithParamNameAndMessageWorks()",
                        Line: "42"
                    } ));
                    t.Fixture.ConstructorWithParamNameAndMessageWorks();
                },
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentOutOfRangeExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageAndInnerExceptionWorks()",
                        Line: "53"
                    } ));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                },
                ConstructorWithParamNameAndActualValueAndMessageWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArgumentOutOfRangeExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentOutOfRangeExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithParamNameAndActualValueAndMessageWorks()",
                        Line: "65"
                    } ));
                    t.Fixture.ConstructorWithParamNameAndActualValueAndMessageWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Exceptions.ArgumentOutOfRangeExceptionTests",
                        File: "Batch1\\Exceptions\\ArgumentOutOfRangeExceptionTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentsTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArgumentsTests)],
        statics: {
            methods: {
                LengthWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArgumentsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LengthWorks()",
                        Line: "45"
                    } ));
                    t.Fixture.LengthWorks();
                },
                GetArgumentWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArgumentsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetArgumentWorks()",
                        Line: "53"
                    } ));
                    t.Fixture.GetArgumentWorks();
                },
                ToArrayWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArgumentsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToArrayWorks()",
                        Line: "61"
                    } ));
                    t.Fixture.ToArrayWorks();
                },
                ToArrayOfTWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArgumentsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArgumentsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToArrayOfTWorks()",
                        Line: "69"
                    } ));
                    t.Fixture.ToArrayOfTWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.ArgumentsTests",
                        File: "Batch1\\ArgumentsTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ArithmeticExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArithmeticExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArithmeticExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArithmeticExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "10"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArithmeticExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArithmeticExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorWorks()",
                        Line: "19"
                    } ));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithMessageWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArithmeticExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArithmeticExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageWorks()",
                        Line: "28"
                    } ));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ArithmeticExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArithmeticExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageAndInnerExceptionWorks()",
                        Line: "37"
                    } ));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Exceptions.ArithmeticExceptionTests",
                        File: "Batch1\\Exceptions\\ArithmeticExceptionTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ArrayBufferTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.ArrayBufferTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.ArrayBufferTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayBufferTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "19"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                ConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.ArrayBufferTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayBufferTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWorks()",
                        Line: "35"
                    } ));
                    t.Fixture.ConstructorWorks();
                },
                ByteLengthPropertyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.ArrayBufferTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayBufferTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ByteLengthPropertyWorks()",
                        Line: "43"
                    } ));
                    t.Fixture.ByteLengthPropertyWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Collections.Native.ArrayBufferTests",
                        File: "Batch1\\Collections\\Native\\ArrayBufferTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "36"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                CreateWithNegativeLenghtShouldThrow: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CreateWithNegativeLenghtShouldThrow()",
                        Line: "53"
                    } ));
                    t.Fixture.CreateWithNegativeLenghtShouldThrow();
                },
                LengthWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LengthWorks()",
                        Line: "69"
                    } ));
                    t.Fixture.LengthWorks();
                },
                RankIsOne: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RankIsOne()",
                        Line: "77"
                    } ));
                    t.Fixture.RankIsOne();
                },
                GetLengthWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetLengthWorks()",
                        Line: "83"
                    } ));
                    t.Fixture.GetLengthWorks();
                },
                GetLowerBound: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetLowerBound()",
                        Line: "91"
                    } ));
                    t.Fixture.GetLowerBound();
                },
                GetUpperBoundWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetUpperBoundWorks()",
                        Line: "99"
                    } ));
                    t.Fixture.GetUpperBoundWorks();
                },
                GettingValueByIndexWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GettingValueByIndexWorks()",
                        Line: "107"
                    } ));
                    t.Fixture.GettingValueByIndexWorks();
                },
                GetValueWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetValueWorks()",
                        Line: "114"
                    } ));
                    t.Fixture.GetValueWorks();
                },
                SettingValueByIndexWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SettingValueByIndexWorks()",
                        Line: "121"
                    } ));
                    t.Fixture.SettingValueByIndexWorks();
                },
                SetValueWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetValueWorks()",
                        Line: "131"
                    } ));
                    t.Fixture.SetValueWorks();
                },
                ForeachWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ForeachWorks()",
                        Line: "141"
                    } ));
                    t.Fixture.ForeachWorks();
                },
                CloneWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CloneWorks()",
                        Line: "152"
                    } ));
                    t.Fixture.CloneWorks();
                },
                ConcatWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConcatWorks()",
                        Line: "161"
                    } ));
                    t.Fixture.ConcatWorks();
                },
                ContainsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ContainsWorks()",
                        Line: "170"
                    } ));
                    t.Fixture.ContainsWorks();
                },
                CopyToSameBoundWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CopyToSameBoundWorks()",
                        Line: "178"
                    } ));
                    t.Fixture.CopyToSameBoundWorks();
                },
                CopyToOffsetBoundWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CopyToOffsetBoundWorks()",
                        Line: "191"
                    } ));
                    t.Fixture.CopyToOffsetBoundWorks();
                },
                CopyToIllegalBoundWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CopyToIllegalBoundWorks()",
                        Line: "206"
                    } ));
                    t.Fixture.CopyToIllegalBoundWorks();
                },
                ContainsUsesEqualsMethod: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ContainsUsesEqualsMethod()",
                        Line: "222"
                    } ));
                    t.Fixture.ContainsUsesEqualsMethod();
                },
                AllWithArrayItemFilterCallbackWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AllWithArrayItemFilterCallbackWorks()",
                        Line: "230"
                    } ));
                    t.Fixture.AllWithArrayItemFilterCallbackWorks();
                },
                SliceWithoutEndWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SliceWithoutEndWorks()",
                        Line: "237"
                    } ));
                    t.Fixture.SliceWithoutEndWorks();
                },
                ForeachWithArrayItemCallbackWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ForeachWithArrayItemCallbackWorks()",
                        Line: "244"
                    } ));
                    t.Fixture.ForeachWithArrayItemCallbackWorks();
                },
                ForeachWithArrayCallbackWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ForeachWithArrayCallbackWorks()",
                        Line: "252"
                    } ));
                    t.Fixture.ForeachWithArrayCallbackWorks();
                },
                IndexOfWithoutStartIndexWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexOfWithoutStartIndexWorks()",
                        Line: "260"
                    } ));
                    t.Fixture.IndexOfWithoutStartIndexWorks();
                },
                IndexOfWithoutStartIndexUsesEqualsMethod: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexOfWithoutStartIndexUsesEqualsMethod()",
                        Line: "266"
                    } ));
                    t.Fixture.IndexOfWithoutStartIndexUsesEqualsMethod();
                },
                IndexOfWithStartIndexWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexOfWithStartIndexWorks()",
                        Line: "274"
                    } ));
                    t.Fixture.IndexOfWithStartIndexWorks();
                },
                JoinWithoutDelimiterWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "JoinWithoutDelimiterWorks()",
                        Line: "280"
                    } ));
                    t.Fixture.JoinWithoutDelimiterWorks();
                },
                ReverseWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ReverseWorks()",
                        Line: "288"
                    } ));
                    t.Fixture.ReverseWorks();
                },
                AnyWithArrayItemFilterCallbackWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AnyWithArrayItemFilterCallbackWorks()",
                        Line: "296"
                    } ));
                    t.Fixture.AnyWithArrayItemFilterCallbackWorks();
                },
                BinarySearch1Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "BinarySearch1Works()",
                        Line: "303"
                    } ));
                    t.Fixture.BinarySearch1Works();
                },
                BinarySearch2Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "BinarySearch2Works()",
                        Line: "312"
                    } ));
                    t.Fixture.BinarySearch2Works();
                },
                BinarySearch3Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "BinarySearch3Works()",
                        Line: "329"
                    } ));
                    t.Fixture.BinarySearch3Works();
                },
                BinarySearch4Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "BinarySearch4Works()",
                        Line: "338"
                    } ));
                    t.Fixture.BinarySearch4Works();
                },
                BinarySearchExceptionsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "BinarySearchExceptionsWorks()",
                        Line: "347"
                    } ));
                    t.Fixture.BinarySearchExceptionsWorks();
                },
                SortWithDefaultCompareWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SortWithDefaultCompareWorks()",
                        Line: "358"
                    } ));
                    t.Fixture.SortWithDefaultCompareWorks();
                },
                Sort1Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Sort1Works()",
                        Line: "366"
                    } ));
                    t.Fixture.Sort1Works();
                },
                Sort2Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Sort2Works()",
                        Line: "374"
                    } ));
                    t.Fixture.Sort2Works();
                },
                Sort3Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Sort3Works()",
                        Line: "382"
                    } ));
                    t.Fixture.Sort3Works();
                },
                Sort4Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Sort4Works()",
                        Line: "390"
                    } ));
                    t.Fixture.Sort4Works();
                },
                SortExceptionsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SortExceptionsWorks()",
                        Line: "398"
                    } ));
                    t.Fixture.SortExceptionsWorks();
                },
                ForeachWhenCastToIListWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ForeachWhenCastToIListWorks()",
                        Line: "406"
                    } ));
                    t.Fixture.ForeachWhenCastToIListWorks();
                },
                ICollectionCountWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionCountWorks()",
                        Line: "418"
                    } ));
                    t.Fixture.ICollectionCountWorks();
                },
                ICollectionIsReadOnlyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionIsReadOnlyWorks()",
                        Line: "425"
                    } ));
                    t.Fixture.ICollectionIsReadOnlyWorks();
                },
                ICollectionAddWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionAddWorks()",
                        Line: "432"
                    } ));
                    t.Fixture.ICollectionAddWorks();
                },
                ICollectionClearWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionClearWorks()",
                        Line: "440"
                    } ));
                    t.Fixture.ICollectionClearWorks();
                },
                ICollectionContainsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionContainsWorks()",
                        Line: "448"
                    } ));
                    t.Fixture.ICollectionContainsWorks();
                },
                ICollectionContainsUsesEqualsMethod: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionContainsUsesEqualsMethod()",
                        Line: "456"
                    } ));
                    t.Fixture.ICollectionContainsUsesEqualsMethod();
                },
                ICollectionCopyToSameBoundWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionCopyToSameBoundWorks()",
                        Line: "464"
                    } ));
                    t.Fixture.ICollectionCopyToSameBoundWorks();
                },
                ICollectionCopyToOffsetBoundWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionCopyToOffsetBoundWorks()",
                        Line: "477"
                    } ));
                    t.Fixture.ICollectionCopyToOffsetBoundWorks();
                },
                ICollectionCopyToIllegalBoundWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionCopyToIllegalBoundWorks()",
                        Line: "492"
                    } ));
                    t.Fixture.ICollectionCopyToIllegalBoundWorks();
                },
                ICollectionRemoveWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionRemoveWorks()",
                        Line: "508"
                    } ));
                    t.Fixture.ICollectionRemoveWorks();
                },
                IListIsReadOnlyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IListIsReadOnlyWorks()",
                        Line: "516"
                    } ));
                    t.Fixture.IListIsReadOnlyWorks();
                },
                IListIndexingWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IListIndexingWorks()",
                        Line: "523"
                    } ));
                    t.Fixture.IListIndexingWorks();
                },
                IListIndexOfWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IListIndexOfWorks()",
                        Line: "532"
                    } ));
                    t.Fixture.IListIndexOfWorks();
                },
                IListIndexOfUsesEqualsMethod: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IListIndexOfUsesEqualsMethod()",
                        Line: "540"
                    } ));
                    t.Fixture.IListIndexOfUsesEqualsMethod();
                },
                IListInsertWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IListInsertWorks()",
                        Line: "548"
                    } ));
                    t.Fixture.IListInsertWorks();
                },
                IListRemoveAtWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet1).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet1, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IListRemoveAtWorks()",
                        Line: "556"
                    } ));
                    t.Fixture.IListRemoveAtWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.ArrayTests.ArrayTestsSet1",
                        File: "Batch1\\ArrayTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2)],
        statics: {
            methods: {
                TestArrayAsIListOfT: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestArrayAsIListOfT()",
                        Line: "569"
                    } ));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestArrayAsIListOfT();
                },
                TestTrivials: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestTrivials()",
                        Line: "630"
                    } ));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestTrivials();
                },
                TestGetAndSetValue: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestGetAndSetValue()",
                        Line: "801"
                    } ));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestGetAndSetValue();
                },
                TestClear: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestClear()",
                        Line: "836"
                    } ));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestClear();
                },
                TestCopy_GCRef: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestCopy_GCRef()",
                        Line: "1017"
                    } ));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestCopy_GCRef();
                },
                TestCopy_VTToObj: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestCopy_VTToObj()",
                        Line: "1040"
                    } ));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestCopy_VTToObj();
                },
                TestCopy_VTWithGCRef: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestCopy_VTWithGCRef()",
                        Line: "1080"
                    } ));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestCopy_VTWithGCRef();
                },
                TestCopy_VTNoGCRef: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestCopy_VTNoGCRef()",
                        Line: "1141"
                    } ));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestCopy_VTNoGCRef();
                },
                TestFind: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestFind()",
                        Line: "1176"
                    } ));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestFind();
                },
                TestForEach: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestForEach()",
                        Line: "1250"
                    } ));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestForEach();
                },
                TestGetEnumerator: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestGetEnumerator()",
                        Line: "1262"
                    } ));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestGetEnumerator();
                },
                TestIndexOf: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestIndexOf()",
                        Line: "1296"
                    } ));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestIndexOf();
                },
                TestLastIndexOf: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestLastIndexOf()",
                        Line: "1371"
                    } ));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestLastIndexOf();
                },
                TestResize: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestResize()",
                        Line: "1446"
                    } ));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestResize();
                },
                TestReverse: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestReverse()",
                        Line: "1477"
                    } ));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestReverse();
                },
                TestSort: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestSort()",
                        Line: "1517"
                    } ));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestSort();
                },
                TestTrueForAll: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestTrueForAll()",
                        Line: "1588"
                    } ));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestTrueForAll();
                },
                TestSetValueCasting: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestSetValueCasting()",
                        Line: "1646"
                    } ));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestSetValueCasting();
                },
                TestValueTypeToReferenceCopy: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestValueTypeToReferenceCopy()",
                        Line: "1702"
                    } ));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestValueTypeToReferenceCopy();
                },
                TestReferenceToValueTypeCopy: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestReferenceToValueTypeCopy()",
                        Line: "1762"
                    } ));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestReferenceToValueTypeCopy();
                },
                TestArrayConstructionMultidimArrays: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ArrayTests.ArrayTestsSet2).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ArrayTestsSet2, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestArrayConstructionMultidimArrays()",
                        Line: "1893"
                    } ));
                    Bridge.ClientTest.ArrayTests.ArrayTestsSet2.TestArrayConstructionMultidimArrays();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.ArrayTests.ArrayTestsSet2",
                        File: "Batch1\\ArrayTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyAttributeTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Assembly.AssemblyAttributeTests)],
        statics: {
            methods: {
                NotationTypeTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Assembly.AssemblyAttributeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NotationTypeTest()",
                        Line: "83"
                    } ));
                    Bridge.ClientTest.ConventionTests.Assembly.AssemblyAttributeTests.NotationTypeTest();
                },
                NotationTypeClassOverrideTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Assembly.AssemblyAttributeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NotationTypeClassOverrideTest()",
                        Line: "98"
                    } ));
                    Bridge.ClientTest.ConventionTests.Assembly.AssemblyAttributeTests.NotationTypeClassOverrideTest();
                },
                NotationTypeMemberOverrideTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Assembly.AssemblyAttributeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NotationTypeMemberOverrideTest()",
                        Line: "113"
                    } ));
                    Bridge.ClientTest.ConventionTests.Assembly.AssemblyAttributeTests.NotationTypeMemberOverrideTest();
                },
                NotationAccessibilityTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Assembly.AssemblyAttributeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NotationAccessibilityTest()",
                        Line: "125"
                    } ));
                    Bridge.ClientTest.ConventionTests.Assembly.AssemblyAttributeTests.NotationAccessibilityTest();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.ConventionTests.Assembly.AssemblyAttributeTests",
                        File: "Batch1\\Convention\\AssemblyAttributeTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests)],
        statics: {
            methods: {
                GetExecutingAssemblyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetExecutingAssemblyWorks()",
                        Line: "87"
                    } ));
                    t.Fixture.GetExecutingAssemblyWorks();
                },
                GetAssemblyForTypeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetAssemblyForTypeWorks()",
                        Line: "93"
                    } ));
                    t.Fixture.GetAssemblyForTypeWorks();
                },
                FullNameWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FullNameWorks()",
                        Line: "100"
                    } ));
                    t.Fixture.FullNameWorks();
                },
                ToStringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToStringWorks()",
                        Line: "107"
                    } ));
                    t.Fixture.ToStringWorks();
                },
                GetTypesWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetTypesWorks()",
                        Line: "114"
                    } ));
                    t.Fixture.GetTypesWorks();
                },
                GetTypesWithImportedModuleWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetTypesWithImportedModuleWorks()",
                        Line: "124"
                    } ));
                    t.Fixture.GetTypesWithImportedModuleWorks();
                },
                GetTypeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetTypeWorks()",
                        Line: "135"
                    } ));
                    t.Fixture.GetTypeWorks();
                },
                GetTypeWorksWithGenerics: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetTypeWorksWithGenerics()",
                        Line: "143"
                    } ));
                    t.Fixture.GetTypeWorksWithGenerics();
                },
                GetTypeWithImportedModuleWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetTypeWithImportedModuleWorks()",
                        Line: "150"
                    } ));
                    t.Fixture.GetTypeWithImportedModuleWorks();
                },
                AssemblyOfBuiltInTypes: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AssemblyOfBuiltInTypes()",
                        Line: "160"
                    } ));
                    t.Fixture.AssemblyOfBuiltInTypes();
                },
                CreateInstanceWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CreateInstanceWorks()",
                        Line: "171"
                    } ));
                    t.Fixture.CreateInstanceWorks();
                },
                GetCustomAttributesWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetCustomAttributesWorks()",
                        Line: "179"
                    } ));
                    t.Fixture.GetCustomAttributesWorks();
                },
                LoadCanReturnReferenceToLoadedAssembly: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LoadCanReturnReferenceToLoadedAssembly()",
                        Line: "205"
                    } ));
                    t.Fixture.LoadCanReturnReferenceToLoadedAssembly();
                },
                GetManifestResourceNamesWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetManifestResourceNamesWorks()",
                        Line: "215"
                    } ));
                    t.Fixture.GetManifestResourceNamesWorks();
                },
                GetManifestResourceDataAsBase64WithoutTypeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetManifestResourceDataAsBase64WithoutTypeWorks()",
                        Line: "223"
                    } ));
                    t.Fixture.GetManifestResourceDataAsBase64WithoutTypeWorks();
                },
                GetManifestResourceDataAsBase64WithTypeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetManifestResourceDataAsBase64WithTypeWorks()",
                        Line: "231"
                    } ));
                    t.Fixture.GetManifestResourceDataAsBase64WithTypeWorks();
                },
                GetManifestResourceDataWithoutTypeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetManifestResourceDataWithoutTypeWorks()",
                        Line: "239"
                    } ));
                    t.Fixture.GetManifestResourceDataWithoutTypeWorks();
                },
                GetManifestResourceDataWithTypeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AssemblyTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AssemblyTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetManifestResourceDataWithTypeWorks()",
                        Line: "247"
                    } ));
                    t.Fixture.GetManifestResourceDataWithTypeWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Batch1.Reflection.AssemblyTests",
                        File: "Batch1\\Reflection\\AssemblyTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.AsyncTests)],
        statics: {
            methods: {
                AsyncVoid: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.AsyncTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests, 3, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AsyncVoid()",
                        Line: "12"
                    } ));
                    t.Fixture.AsyncVoid();
                },
                AsyncTask: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.AsyncTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests, 7, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AsyncTask()",
                        Line: "43"
                    } ));
                    t.Fixture.AsyncTask();
                },
                AsyncTaskBodyThrowsException: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.AsyncTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests, 8, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AsyncTaskBodyThrowsException()",
                        Line: "79"
                    } ));
                    t.Fixture.AsyncTaskBodyThrowsException();
                },
                AwaitTaskThatFaults: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.AsyncTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests, 8, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AwaitTaskThatFaults()",
                        Line: "118"
                    } ));
                    t.Fixture.AwaitTaskThatFaults();
                },
                AggregateExceptionsAreUnwrappedWhenAwaitingTask: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.AsyncTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests, 2, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AggregateExceptionsAreUnwrappedWhenAwaitingTask()",
                        Line: "156"
                    } ));
                    t.Fixture.AggregateExceptionsAreUnwrappedWhenAwaitingTask();
                },
                AsyncTaskThatReturnsValue: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.AsyncTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AsyncTests, 8, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AsyncTaskThatReturnsValue()",
                        Line: "192"
                    } ));
                    t.Fixture.AsyncTaskThatReturnsValue();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Threading.AsyncTests",
                        File: "Batch1\\Threading\\Tasks\\AsyncTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests)],
        statics: {
            methods: {
                GetCustomAttributesForAssemblyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetCustomAttributesForAssemblyWorks()",
                        Line: "51"
                    } ));
                    t.Fixture.GetCustomAttributesForAssemblyWorks();
                },
                GetCustomAttributesForMemberInfoWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetCustomAttributesForMemberInfoWorks()",
                        Line: "97"
                    } ));
                    t.Fixture.GetCustomAttributesForMemberInfoWorks();
                },
                GetCustomAttributesForMemberInfoInheritTrueWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetCustomAttributesForMemberInfoInheritTrueWorks()",
                        Line: "118"
                    } ));
                    t.Fixture.GetCustomAttributesForMemberInfoInheritTrueWorks();
                },
                GetCustomAttributesForMemberInfoInheritFalseWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetCustomAttributesForMemberInfoInheritFalseWorks()",
                        Line: "139"
                    } ));
                    t.Fixture.GetCustomAttributesForMemberInfoInheritFalseWorks();
                },
                GetCustomAttributesForMemberInfoTypeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetCustomAttributesForMemberInfoTypeWorks()",
                        Line: "160"
                    } ));
                    t.Fixture.GetCustomAttributesForMemberInfoTypeWorks();
                },
                GetCustomAttributesForMemberInfoTypeInheritFalseWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetCustomAttributesForMemberInfoTypeInheritFalseWorks()",
                        Line: "186"
                    } ));
                    t.Fixture.GetCustomAttributesForMemberInfoTypeInheritFalseWorks();
                },
                GetCustomAttributesForMemberInfoTypeInheritTrueWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetCustomAttributesForMemberInfoTypeInheritTrueWorks()",
                        Line: "217"
                    } ));
                    t.Fixture.GetCustomAttributesForMemberInfoTypeInheritTrueWorks();
                },
                GetCustomAttributesForParameterInfoWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetCustomAttributesForParameterInfoWorks()",
                        Line: "248"
                    } ));
                    t.Fixture.GetCustomAttributesForParameterInfoWorks();
                },
                GetCustomAttributesForParameterInfoInheritTrueWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetCustomAttributesForParameterInfoInheritTrueWorks()",
                        Line: "271"
                    } ));
                    t.Fixture.GetCustomAttributesForParameterInfoInheritTrueWorks();
                },
                GetCustomAttributesForParameterInfoInheritFalseWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetCustomAttributesForParameterInfoInheritFalseWorks()",
                        Line: "292"
                    } ));
                    t.Fixture.GetCustomAttributesForParameterInfoInheritFalseWorks();
                },
                GetCustomAttributesForParameterInfoTypeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetCustomAttributesForParameterInfoTypeWorks()",
                        Line: "313"
                    } ));
                    t.Fixture.GetCustomAttributesForParameterInfoTypeWorks();
                },
                GetCustomAttributesForParameterInfoTypeInheritFalseWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetCustomAttributesForParameterInfoTypeInheritFalseWorks()",
                        Line: "339"
                    } ));
                    t.Fixture.GetCustomAttributesForParameterInfoTypeInheritFalseWorks();
                },
                GetCustomAttributesForParameterInfoTypeInheritTrueWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Batch1.Reflection.AttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.AttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetCustomAttributesForParameterInfoTypeInheritTrueWorks()",
                        Line: "370"
                    } ));
                    t.Fixture.GetCustomAttributesForParameterInfoTypeInheritTrueWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Batch1.Reflection.AttributeTests",
                        File: "Batch1\\Reflection\\AttributeTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests)],
        statics: {
            methods: {
                ValueArgumentNull: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ValueArgumentNull()",
                        Line: "22"
                    } ));
                    Bridge.ClientTest.BitConverterTests.ValueArgumentNull();
                },
                StartIndexBeyondLength: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StartIndexBeyondLength()",
                        Line: "40"
                    } ));
                    Bridge.ClientTest.BitConverterTests.StartIndexBeyondLength();
                },
                StartIndexPlusNeededLengthTooLong: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StartIndexPlusNeededLengthTooLong()",
                        Line: "94"
                    } ));
                    Bridge.ClientTest.BitConverterTests.StartIndexPlusNeededLengthTooLong();
                },
                RoundtripDoubleToInt64Bits: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RoundtripDoubleToInt64Bits()",
                        Line: "110"
                    } ));
                    Bridge.ClientTest.BitConverterTests.RoundtripDoubleToInt64Bits();
                },
                Int64BitsToDouble: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Int64BitsToDouble()",
                        Line: "122"
                    } ));
                    Bridge.ClientTest.BitConverterTests.Int64BitsToDouble();
                },
                DoubleToInt64Bits: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DoubleToInt64Bits()",
                        Line: "134"
                    } ));
                    Bridge.ClientTest.BitConverterTests.DoubleToInt64Bits();
                },
                RoundtripBoolean: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RoundtripBoolean()",
                        Line: "146"
                    } ));
                    Bridge.ClientTest.BitConverterTests.RoundtripBoolean();
                },
                RoundtripChar: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RoundtripChar()",
                        Line: "160"
                    } ));
                    Bridge.ClientTest.BitConverterTests.RoundtripChar();
                },
                RoundtripDouble: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RoundtripDouble()",
                        Line: "168"
                    } ));
                    Bridge.ClientTest.BitConverterTests.RoundtripDouble();
                },
                RoundtripSingle: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RoundtripSingle()",
                        Line: "186"
                    } ));
                    Bridge.ClientTest.BitConverterTests.RoundtripSingle();
                },
                RoundtripInt16: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RoundtripInt16()",
                        Line: "195"
                    } ));
                    Bridge.ClientTest.BitConverterTests.RoundtripInt16();
                },
                RoundtripInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RoundtripInt32()",
                        Line: "211"
                    } ));
                    Bridge.ClientTest.BitConverterTests.RoundtripInt32();
                },
                RoundtripInt64: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RoundtripInt64()",
                        Line: "227"
                    } ));
                    Bridge.ClientTest.BitConverterTests.RoundtripInt64();
                },
                RoundtripUInt16: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RoundtripUInt16()",
                        Line: "243"
                    } ));
                    Bridge.ClientTest.BitConverterTests.RoundtripUInt16();
                },
                RoundtripUInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RoundtripUInt32()",
                        Line: "259"
                    } ));
                    Bridge.ClientTest.BitConverterTests.RoundtripUInt32();
                },
                RoundtripUInt64: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RoundtripUInt64()",
                        Line: "275"
                    } ));
                    Bridge.ClientTest.BitConverterTests.RoundtripUInt64();
                },
                RoundtripString: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RoundtripString()",
                        Line: "291"
                    } ));
                    Bridge.ClientTest.BitConverterTests.RoundtripString();
                },
                ToString_ByteArray_Long: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BitConverterTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BitConverterTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToString_ByteArray_Long()",
                        Line: "304"
                    } ));
                    Bridge.ClientTest.BitConverterTests.ToString_ByteArray_Long();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.BitConverterTests",
                        File: "Batch1\\BitConverterTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "22"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultValueIsFalse: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultValueIsFalse()",
                        Line: "34"
                    } ));
                    t.Fixture.DefaultValueIsFalse();
                },
                CreatingInstanceReturnsFalse: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CreatingInstanceReturnsFalse()",
                        Line: "40"
                    } ));
                    t.Fixture.CreatingInstanceReturnsFalse();
                },
                DefaultConstructorReturnsFalse: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorReturnsFalse()",
                        Line: "46"
                    } ));
                    t.Fixture.DefaultConstructorReturnsFalse();
                },
                GetHashCodeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetHashCodeWorks()",
                        Line: "52"
                    } ));
                    t.Fixture.GetHashCodeWorks();
                },
                ObjectEqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ObjectEqualsWorks()",
                        Line: "60"
                    } ));
                    t.Fixture.ObjectEqualsWorks();
                },
                BoolEqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "BoolEqualsWorks()",
                        Line: "69"
                    } ));
                    t.Fixture.BoolEqualsWorks();
                },
                LogicalExclusiveOrWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LogicalExclusiveOrWorks()",
                        Line: "83"
                    } ));
                    t.Fixture.LogicalExclusiveOrWorks();
                },
                LogicalAndWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LogicalAndWorks()",
                        Line: "96"
                    } ));
                    t.Fixture.LogicalAndWorks();
                },
                LogicalNegationWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LogicalNegationWorks()",
                        Line: "109"
                    } ));
                    t.Fixture.LogicalNegationWorks();
                },
                ConditionalOperatorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConditionalOperatorWorks()",
                        Line: "120"
                    } ));
                    t.Fixture.ConditionalOperatorWorks();
                },
                ConditionalAndWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConditionalAndWorks()",
                        Line: "129"
                    } ));
                    t.Fixture.ConditionalAndWorks();
                },
                ConditionalOrWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConditionalOrWorks()",
                        Line: "158"
                    } ));
                    t.Fixture.ConditionalOrWorks();
                },
                EqualityWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EqualityWorks()",
                        Line: "187"
                    } ));
                    t.Fixture.EqualityWorks();
                },
                InequalityWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InequalityWorks()",
                        Line: "205"
                    } ));
                    t.Fixture.InequalityWorks();
                },
                CompareToWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CompareToWorks()",
                        Line: "223"
                    } ));
                    t.Fixture.CompareToWorks();
                },
                IComparableCompareToWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IComparableCompareToWorks()",
                        Line: "232"
                    } ));
                    t.Fixture.IComparableCompareToWorks();
                },
                ParseWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ParseWorks()",
                        Line: "241"
                    } ));
                    t.Fixture.ParseWorks();
                },
                TryParseWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TryParseWorks()",
                        Line: "269"
                    } ));
                    t.Fixture.TryParseWorks();
                },
                BoolStringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.BooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "BoolStringWorks()",
                        Line: "305"
                    } ));
                    t.Fixture.BoolStringWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.SimpleTypes.BooleanTests",
                        File: "Batch1\\SimpleTypes\\BooleanTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Bridge_ClientTest_TypeSystemTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.TypeSystemTests)],
        statics: {
            methods: {
                GettingBaseTypeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Bridge_ClientTest_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GettingBaseTypeWorks()",
                        Line: "28"
                    } ));
                    t.Fixture.GettingBaseTypeWorks();
                },
                IsAssignableFromWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Bridge_ClientTest_TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsAssignableFromWorks()",
                        Line: "90"
                    } ));
                    t.Fixture.IsAssignableFromWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.TypeSystemTests",
                        File: "Batch1\\TypeSystemTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Bridge1529", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ObjectLiteralTests.Bridge1529)],
        statics: {
            methods: {
                TestObjectLiteral: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ObjectLiteralTests.Bridge1529).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Bridge1529, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestObjectLiteral()",
                        Line: "130"
                    } ));
                    t.Fixture.TestObjectLiteral();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.ObjectLiteralTests.Bridge1529",
                        File: "Batch1\\ObjectLiteralTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.BridgeConsoleTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BridgeConsoleTests)],
        statics: {
            methods: {
                TestLogMessageObject: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BridgeConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeConsoleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestLogMessageObject()",
                        Line: "18"
                    } ));
                    try {
                        t.Fixture.TestLogMessageObject();
                    }
                    finally {
                        t.TearDown();
                    }
                },
                TestLogMessageString: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BridgeConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeConsoleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestLogMessageString()",
                        Line: "56"
                    } ));
                    try {
                        t.Fixture.TestLogMessageString();
                    }
                    finally {
                        t.TearDown();
                    }
                },
                TestDebugMessageString: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BridgeConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeConsoleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestDebugMessageString()",
                        Line: "63"
                    } ));
                    try {
                        t.Fixture.TestDebugMessageString();
                    }
                    finally {
                        t.TearDown();
                    }
                },
                TestErrorMessageString: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BridgeConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeConsoleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestErrorMessageString()",
                        Line: "70"
                    } ));
                    try {
                        t.Fixture.TestErrorMessageString();
                    }
                    finally {
                        t.TearDown();
                    }
                },
                TestToggling: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BridgeConsoleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeConsoleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestToggling()",
                        Line: "77"
                    } ));
                    try {
                        t.Fixture.TestToggling();
                    }
                    finally {
                        t.TearDown();
                    }
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.BridgeConsoleTests",
                        File: "Batch1\\BridgeConsoleTests.cs"
                    } );
                }
                return this.context;
            },
            TearDown: function () {
                Bridge.ClientTest.BridgeConsoleTests.HideConsole();
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "10"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                StringOnlyConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StringOnlyConstructorWorks()",
                        Line: "18"
                    } ));
                    t.Fixture.StringOnlyConstructorWorks();
                },
                ConstructorWithFlagsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithFlagsWorks()",
                        Line: "26"
                    } ));
                    t.Fixture.ConstructorWithFlagsWorks();
                },
                GlobalFlagWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GlobalFlagWorks()",
                        Line: "34"
                    } ));
                    t.Fixture.GlobalFlagWorks();
                },
                IgnoreCaseFlagWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IgnoreCaseFlagWorks()",
                        Line: "41"
                    } ));
                    t.Fixture.IgnoreCaseFlagWorks();
                },
                MultilineFlagWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MultilineFlagWorks()",
                        Line: "48"
                    } ));
                    t.Fixture.MultilineFlagWorks();
                },
                PatternPropertyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PatternPropertyWorks()",
                        Line: "55"
                    } ));
                    t.Fixture.PatternPropertyWorks();
                },
                SourcePropertyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SourcePropertyWorks()",
                        Line: "61"
                    } ));
                    t.Fixture.SourcePropertyWorks();
                },
                ExecWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ExecWorks()",
                        Line: "67"
                    } ));
                    t.Fixture.ExecWorks();
                },
                LastIndexWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LastIndexWorks()",
                        Line: "77"
                    } ));
                    t.Fixture.LastIndexWorks();
                },
                TestWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.BridgeRegexTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestWorks()",
                        Line: "85"
                    } ));
                    t.Fixture.TestWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests",
                        File: "Batch1\\Text\\RegularExpressions\\JavaScript\\BridgeRegexTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "10"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                CastsWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CastsWork()",
                        Line: "25"
                    } ));
                    t.Fixture.CastsWork();
                },
                DefaultValueIs0: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultValueIs0()",
                        Line: "69"
                    } ));
                    t.Fixture.DefaultValueIs0();
                },
                DefaultConstructorReturnsZero: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorReturnsZero()",
                        Line: "75"
                    } ));
                    t.Fixture.DefaultConstructorReturnsZero();
                },
                CreatingInstanceReturnsZero: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CreatingInstanceReturnsZero()",
                        Line: "81"
                    } ));
                    t.Fixture.CreatingInstanceReturnsZero();
                },
                ConstantsWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstantsWork()",
                        Line: "87"
                    } ));
                    t.Fixture.ConstantsWork();
                },
                FormatWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FormatWorks()",
                        Line: "94"
                    } ));
                    t.Fixture.FormatWorks();
                },
                IFormattableToStringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IFormattableToStringWorks()",
                        Line: "100"
                    } ));
                    t.Fixture.IFormattableToStringWorks();
                },
                TryParseWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TryParseWorks()",
                        Line: "106"
                    } ));
                    t.Fixture.TryParseWorks();
                },
                ParseWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ParseWorks()",
                        Line: "139"
                    } ));
                    t.Fixture.ParseWorks();
                },
                ToStringWithoutRadixWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToStringWithoutRadixWorks()",
                        Line: "151"
                    } ));
                    t.Fixture.ToStringWithoutRadixWorks();
                },
                ToStringWithRadixWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToStringWithRadixWorks()",
                        Line: "157"
                    } ));
                    t.Fixture.ToStringWithRadixWorks();
                },
                GetHashCodeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetHashCodeWorks()",
                        Line: "164"
                    } ));
                    t.Fixture.GetHashCodeWorks();
                },
                EqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EqualsWorks()",
                        Line: "172"
                    } ));
                    t.Fixture.EqualsWorks();
                },
                IEquatableEqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IEquatableEqualsWorks()",
                        Line: "181"
                    } ));
                    t.Fixture.IEquatableEqualsWorks();
                },
                CompareToWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CompareToWorks()",
                        Line: "195"
                    } ));
                    t.Fixture.CompareToWorks();
                },
                IComparableCompareToWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IComparableCompareToWorks()",
                        Line: "203"
                    } ));
                    t.Fixture.IComparableCompareToWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.SimpleTypes.ByteTests",
                        File: "Batch1\\SimpleTypes\\ByteTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests)],
        statics: {
            methods: {
                TypePropertiesForCancellationTokenSourceAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesForCancellationTokenSourceAreCorrect()",
                        Line: "15"
                    } ));
                    t.Fixture.TypePropertiesForCancellationTokenSourceAreCorrect();
                },
                TypePropertiesForCancellationTokenAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesForCancellationTokenAreCorrect()",
                        Line: "24"
                    } ));
                    t.Fixture.TypePropertiesForCancellationTokenAreCorrect();
                },
                TypePropertiesForCancellationTokenRegistrationAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesForCancellationTokenRegistrationAreCorrect()",
                        Line: "34"
                    } ));
                    t.Fixture.TypePropertiesForCancellationTokenRegistrationAreCorrect();
                },
                CancellationTokenCreatedWithDefaultConstructorIsNotCanceledAndCannotBe: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CancellationTokenCreatedWithDefaultConstructorIsNotCanceledAndCannotBe()",
                        Line: "45"
                    } ));
                    t.Fixture.CancellationTokenCreatedWithDefaultConstructorIsNotCanceledAndCannotBe();
                },
                CancellationTokenCreatedWithFalseArgumentToConstructorIsNotCanceledAndCannotBe: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CancellationTokenCreatedWithFalseArgumentToConstructorIsNotCanceledAndCannotBe()",
                        Line: "54"
                    } ));
                    t.Fixture.CancellationTokenCreatedWithFalseArgumentToConstructorIsNotCanceledAndCannotBe();
                },
                CancellationTokenCreatedWithTrueArgumentToConstructorIsCanceled: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CancellationTokenCreatedWithTrueArgumentToConstructorIsCanceled()",
                        Line: "63"
                    } ));
                    t.Fixture.CancellationTokenCreatedWithTrueArgumentToConstructorIsCanceled();
                },
                CancellationTokenNoneIsNotCancelledAndCannotBe: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CancellationTokenNoneIsNotCancelledAndCannotBe()",
                        Line: "72"
                    } ));
                    t.Fixture.CancellationTokenNoneIsNotCancelledAndCannotBe();
                },
                CreatingADefaultCancellationTokenReturnsACancellationTokenThatIsNotCancelled: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CreatingADefaultCancellationTokenReturnsACancellationTokenThatIsNotCancelled()",
                        Line: "80"
                    } ));
                    t.Fixture.CreatingADefaultCancellationTokenReturnsACancellationTokenThatIsNotCancelled();
                },
                ActivatorCreateForCancellationTokenReturnsACancellationTokenThatIsNotCancelled: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ActivatorCreateForCancellationTokenReturnsACancellationTokenThatIsNotCancelled()",
                        Line: "89"
                    } ));
                    t.Fixture.ActivatorCreateForCancellationTokenReturnsACancellationTokenThatIsNotCancelled();
                },
                CanBeCanceledIsTrueForTokenCreatedForCancellationTokenSource: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CanBeCanceledIsTrueForTokenCreatedForCancellationTokenSource()",
                        Line: "98"
                    } ));
                    t.Fixture.CanBeCanceledIsTrueForTokenCreatedForCancellationTokenSource();
                },
                IsCancellationRequestedForTokenCreatedForCancellationTokenSourceIsSetByTheCancelMethod: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsCancellationRequestedForTokenCreatedForCancellationTokenSourceIsSetByTheCancelMethod()",
                        Line: "105"
                    } ));
                    t.Fixture.IsCancellationRequestedForTokenCreatedForCancellationTokenSourceIsSetByTheCancelMethod();
                },
                ThrowIfCancellationRequestedForTokenCreatedForCancellationTokenSourceThrowsAfterTheCancelMethodIsCalled: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ThrowIfCancellationRequestedForTokenCreatedForCancellationTokenSourceThrowsAfterTheCancelMethodIsCalled()",
                        Line: "116"
                    } ));
                    t.Fixture.ThrowIfCancellationRequestedForTokenCreatedForCancellationTokenSourceThrowsAfterTheCancelMethodIsCalled();
                },
                CancelWithoutArgumentsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CancelWithoutArgumentsWorks()",
                        Line: "125"
                    } ));
                    t.Fixture.CancelWithoutArgumentsWorks();
                },
                CancelWorksWhenThrowOnFirstExceptionIsFalse: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CancelWorksWhenThrowOnFirstExceptionIsFalse()",
                        Line: "170"
                    } ));
                    t.Fixture.CancelWorksWhenThrowOnFirstExceptionIsFalse();
                },
                CancelWorksWhenThrowOnFirstExceptionIsTrue: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CancelWorksWhenThrowOnFirstExceptionIsTrue()",
                        Line: "216"
                    } ));
                    t.Fixture.CancelWorksWhenThrowOnFirstExceptionIsTrue();
                },
                RegisterOnACancelledSourceWithoutContextInvokesTheCallback: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RegisterOnACancelledSourceWithoutContextInvokesTheCallback()",
                        Line: "260"
                    } ));
                    t.Fixture.RegisterOnACancelledSourceWithoutContextInvokesTheCallback();
                },
                RegisterWithArgumentOnACancelledSourceInvokesTheCallback: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RegisterWithArgumentOnACancelledSourceInvokesTheCallback()",
                        Line: "270"
                    } ));
                    t.Fixture.RegisterWithArgumentOnACancelledSourceInvokesTheCallback();
                },
                RegisterOnACancelledSourceWithoutContextRethrowsAThrownException: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RegisterOnACancelledSourceWithoutContextRethrowsAThrownException()",
                        Line: "285"
                    } ));
                    t.Fixture.RegisterOnACancelledSourceWithoutContextRethrowsAThrownException();
                },
                RegisterOnACancelledSourceWithContextRethrowsAThrownException: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RegisterOnACancelledSourceWithContextRethrowsAThrownException()",
                        Line: "305"
                    } ));
                    t.Fixture.RegisterOnACancelledSourceWithContextRethrowsAThrownException();
                },
                RegisterOverloadsWithUseSynchronizationContextWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RegisterOverloadsWithUseSynchronizationContextWork()",
                        Line: "327"
                    } ));
                    t.Fixture.RegisterOverloadsWithUseSynchronizationContextWork();
                },
                RegisterOnCancellationTokenCreatedNonCancelledDoesNothing: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RegisterOnCancellationTokenCreatedNonCancelledDoesNothing()",
                        Line: "357"
                    } ));
                    t.Fixture.RegisterOnCancellationTokenCreatedNonCancelledDoesNothing();
                },
                RegisterOnCancellationTokenCreatedCancelledInvokesTheActionImmediately: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RegisterOnCancellationTokenCreatedCancelledInvokesTheActionImmediately()",
                        Line: "368"
                    } ));
                    t.Fixture.RegisterOnCancellationTokenCreatedCancelledInvokesTheActionImmediately();
                },
                DuplicateCancelDoesNotCauseCallbacksToBeCalledTwice: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DuplicateCancelDoesNotCauseCallbacksToBeCalledTwice()",
                        Line: "385"
                    } ));
                    t.Fixture.DuplicateCancelDoesNotCauseCallbacksToBeCalledTwice();
                },
                RegistrationsCanBeCompared: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RegistrationsCanBeCompared()",
                        Line: "397"
                    } ));
                    t.Fixture.RegistrationsCanBeCompared();
                },
                RegistrationsCanBeUnregistered: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RegistrationsCanBeUnregistered()",
                        Line: "419"
                    } ));
                    t.Fixture.RegistrationsCanBeUnregistered();
                },
                CreatingADefaultCancellationTokenRegistrationReturnsARegistrationThatCanBeDisposedWithoutHarm: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CreatingADefaultCancellationTokenRegistrationReturnsARegistrationThatCanBeDisposedWithoutHarm()",
                        Line: "447"
                    } ));
                    t.Fixture.CreatingADefaultCancellationTokenRegistrationReturnsARegistrationThatCanBeDisposedWithoutHarm();
                },
                LinkedSourceWithTwoTokensWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LinkedSourceWithTwoTokensWorks()",
                        Line: "456"
                    } ));
                    t.Fixture.LinkedSourceWithTwoTokensWorks();
                },
                LinkedSourceWithThreeTokensWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.CancellationTokenTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CancellationTokenTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LinkedSourceWithThreeTokensWorks()",
                        Line: "480"
                    } ));
                    t.Fixture.LinkedSourceWithThreeTokensWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Threading.CancellationTokenTests",
                        File: "Batch1\\Threading\\CancellationTokenTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.CharTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests)],
        statics: {
            methods: {
                TypePropertiesAreInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreInt32()",
                        Line: "10"
                    } ));
                    t.Fixture.TypePropertiesAreInt32();
                },
                CastsWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CastsWork()",
                        Line: "20"
                    } ));
                    t.Fixture.CastsWork();
                },
                DefaultValueWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultValueWorks()",
                        Line: "64"
                    } ));
                    t.Fixture.DefaultValueWorks();
                },
                DefaultConstructorReturnsZero: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorReturnsZero()",
                        Line: "70"
                    } ));
                    t.Fixture.DefaultConstructorReturnsZero();
                },
                CreatingInstanceReturnsZero: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CreatingInstanceReturnsZero()",
                        Line: "76"
                    } ));
                    t.Fixture.CreatingInstanceReturnsZero();
                },
                ConstantsWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstantsWork()",
                        Line: "82"
                    } ));
                    t.Fixture.ConstantsWork();
                },
                CharComparisonWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CharComparisonWorks()",
                        Line: "89"
                    } ));
                    t.Fixture.CharComparisonWorks();
                },
                ParseWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ParseWorks()",
                        Line: "101"
                    } ));
                    t.Fixture.ParseWorks();
                },
                FormatWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FormatWorks()",
                        Line: "110"
                    } ));
                    t.Fixture.FormatWorks();
                },
                IFormattableToStringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IFormattableToStringWorks()",
                        Line: "116"
                    } ));
                    t.Fixture.IFormattableToStringWorks();
                },
                ToStringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToStringWorks()",
                        Line: "122"
                    } ));
                    t.Fixture.ToStringWorks();
                },
                GetHashCodeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetHashCodeWorks()",
                        Line: "128"
                    } ));
                    t.Fixture.GetHashCodeWorks();
                },
                EqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EqualsWorks()",
                        Line: "136"
                    } ));
                    t.Fixture.EqualsWorks();
                },
                IEquatableEqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IEquatableEqualsWorks()",
                        Line: "152"
                    } ));
                    t.Fixture.IEquatableEqualsWorks();
                },
                CompareToWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CompareToWorks()",
                        Line: "161"
                    } ));
                    t.Fixture.CompareToWorks();
                },
                IsLowerWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsLowerWorks()",
                        Line: "170"
                    } ));
                    t.Fixture.IsLowerWorks();
                },
                IsUpperWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsUpperWorks()",
                        Line: "178"
                    } ));
                    t.Fixture.IsUpperWorks();
                },
                ToLowerWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToLowerWorks()",
                        Line: "186"
                    } ));
                    t.Fixture.ToLowerWorks();
                },
                ToUpperWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToUpperWorks()",
                        Line: "194"
                    } ));
                    t.Fixture.ToUpperWorks();
                },
                IsDigitWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsDigitWorks()",
                        Line: "202"
                    } ));
                    t.Fixture.IsDigitWorks();
                },
                IsWhiteSpaceWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsWhiteSpaceWorks()",
                        Line: "210"
                    } ));
                    t.Fixture.IsWhiteSpaceWorks();
                },
                IsDigitWithStringAndIndexWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsDigitWithStringAndIndexWorks()",
                        Line: "218"
                    } ));
                    t.Fixture.IsDigitWithStringAndIndexWorks();
                },
                IsWhiteSpaceWithStringAndIndexWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.CharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsWhiteSpaceWithStringAndIndexWorks()",
                        Line: "230"
                    } ));
                    t.Fixture.IsWhiteSpaceWithStringAndIndexWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.SimpleTypes.CharTests",
                        File: "Batch1\\SimpleTypes\\CharTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.CheckedInsideUncheckedTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.CheckedInsideUncheckedTests)],
        statics: {
            methods: {
                TestInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.CheckedInsideUncheckedTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CheckedInsideUncheckedTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestInt32()",
                        Line: "188"
                    } ));
                    Bridge.ClientTest.CheckedUncheckedTests.CheckedInsideUncheckedTests.TestInt32();
                },
                TestUInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.CheckedInsideUncheckedTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CheckedInsideUncheckedTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestUInt32()",
                        Line: "232"
                    } ));
                    Bridge.ClientTest.CheckedUncheckedTests.CheckedInsideUncheckedTests.TestUInt32();
                },
                TestLong: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.CheckedInsideUncheckedTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CheckedInsideUncheckedTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestLong()",
                        Line: "274"
                    } ));
                    Bridge.ClientTest.CheckedUncheckedTests.CheckedInsideUncheckedTests.TestLong();
                },
                TestULong: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.CheckedInsideUncheckedTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CheckedInsideUncheckedTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestULong()",
                        Line: "318"
                    } ));
                    Bridge.ClientTest.CheckedUncheckedTests.CheckedInsideUncheckedTests.TestULong();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.CheckedUncheckedTests.CheckedInsideUncheckedTests",
                        File: "Batch1\\CheckedUncheckedTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.CheckedTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.CheckedTests)],
        statics: {
            methods: {
                TestInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.CheckedTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CheckedTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestInt32()",
                        Line: "23"
                    } ));
                    Bridge.ClientTest.CheckedUncheckedTests.CheckedTests.TestInt32();
                },
                TestUInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.CheckedTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CheckedTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestUInt32()",
                        Line: "64"
                    } ));
                    Bridge.ClientTest.CheckedUncheckedTests.CheckedTests.TestUInt32();
                },
                TestLong: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.CheckedTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CheckedTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestLong()",
                        Line: "103"
                    } ));
                    Bridge.ClientTest.CheckedUncheckedTests.CheckedTests.TestLong();
                },
                TestULong: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.CheckedTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CheckedTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestULong()",
                        Line: "144"
                    } ));
                    Bridge.ClientTest.CheckedUncheckedTests.CheckedTests.TestULong();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.CheckedUncheckedTests.CheckedTests",
                        File: "Batch1\\CheckedUncheckedTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests)],
        statics: {
            methods: {
                AllTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AllTest()",
                        Line: "345"
                    } ));
                    Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests.AllTest();
                },
                MembersTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MembersTest()",
                        Line: "358"
                    } ));
                    Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests.MembersTest();
                },
                ObjectLiteralTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ObjectLiteralTest()",
                        Line: "373"
                    } ));
                    Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests.ObjectLiteralTest();
                },
                InterfaceMemberTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InterfaceMemberTest()",
                        Line: "381"
                    } ));
                    Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests.InterfaceMemberTest();
                },
                InnerClassMemberTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InnerClassMemberTest()",
                        Line: "389"
                    } ));
                    Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests.InnerClassMemberTest();
                },
                ClassAttributeInheritanceTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClassAttributeInheritanceTest()",
                        Line: "397"
                    } ));
                    Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests.ClassAttributeInheritanceTest();
                },
                OverrideMemberTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "OverrideMemberTest()",
                        Line: "411"
                    } ));
                    Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests.OverrideMemberTest();
                },
                NestedClassTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NestedClassTest()",
                        Line: "423"
                    } ));
                    Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests.NestedClassTest();
                },
                AccessibilityTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AccessibilityTest()",
                        Line: "443"
                    } ));
                    Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests.AccessibilityTest();
                },
                ConstMemberTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstMemberTest()",
                        Line: "497"
                    } ));
                    Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests.ConstMemberTest();
                },
                EventMemberTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EventMemberTest()",
                        Line: "507"
                    } ));
                    Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests.EventMemberTest();
                },
                EnumItemMemberTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EnumItemMemberTest()",
                        Line: "533"
                    } ));
                    Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests.EnumItemMemberTest();
                },
                EnumTargetTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EnumTargetTest()",
                        Line: "545"
                    } ));
                    Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests.EnumTargetTest();
                },
                ExternalTargetTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ClassAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ExternalTargetTest()",
                        Line: "562"
                    } ));
                    Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests.ExternalTargetTest();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.ConventionTests.Class.ClassAttributeTests",
                        File: "Batch1\\Convention\\ClassAttributeTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.CommonExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CommonExceptionTests)],
        statics: {
            methods: {
                ThrowingAndCatchingExceptionsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CommonExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CommonExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ThrowingAndCatchingExceptionsWorks()",
                        Line: "27"
                    } ));
                    t.Fixture.ThrowingAndCatchingExceptionsWorks();
                },
                ExceptionOfWrongTypeIsNotCaught: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CommonExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CommonExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ExceptionOfWrongTypeIsNotCaught()",
                        Line: "43"
                    } ));
                    t.Fixture.ExceptionOfWrongTypeIsNotCaught();
                },
                CanCatchExceptionAsBaseType: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CommonExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CommonExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CanCatchExceptionAsBaseType()",
                        Line: "63"
                    } ));
                    t.Fixture.CanCatchExceptionAsBaseType();
                },
                CanCatchStringAsException: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CommonExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CommonExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CanCatchStringAsException()",
                        Line: "82"
                    } ));
                    t.Fixture.CanCatchStringAsException();
                },
                CanCatchStringAsCatchAll: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CommonExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CommonExceptionTests, 1, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CanCatchStringAsCatchAll()",
                        Line: "102"
                    } ));
                    t.Fixture.CanCatchStringAsCatchAll();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Exceptions.CommonExceptionTests",
                        File: "Batch1\\Exceptions\\CommonExceptionTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ComparerTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ComparerTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ComparerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ComparerTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "26"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultComparerCanOrderNumbers: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ComparerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ComparerTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultComparerCanOrderNumbers()",
                        Line: "40"
                    } ));
                    t.Fixture.DefaultComparerCanOrderNumbers();
                },
                DefaultComparerCanOrderNullValues: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ComparerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ComparerTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultComparerCanOrderNullValues()",
                        Line: "48"
                    } ));
                    t.Fixture.DefaultComparerCanOrderNullValues();
                },
                DefaultComparerUsesCompareMethodIfClassImplementsIComparable: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ComparerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ComparerTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultComparerUsesCompareMethodIfClassImplementsIComparable()",
                        Line: "56"
                    } ));
                    t.Fixture.DefaultComparerUsesCompareMethodIfClassImplementsIComparable();
                },
                CreateWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ComparerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ComparerTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CreateWorks()",
                        Line: "64"
                    } ));
                    t.Fixture.CreateWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Collections.Generic.ComparerTests",
                        File: "Batch1\\Collections\\Generic\\ComparerTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests)],
        statics: {
            methods: {
                Assume: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Assume()",
                        Line: "48"
                    } ));
                    t.Fixture.Assume();
                },
                AssumeWithUserMessage: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AssumeWithUserMessage()",
                        Line: "57"
                    } ));
                    t.Fixture.AssumeWithUserMessage();
                },
                _Assert: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "_Assert()",
                        Line: "66"
                    } ));
                    t.Fixture._Assert();
                },
                AssertWithUserMessage: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AssertWithUserMessage()",
                        Line: "75"
                    } ));
                    t.Fixture.AssertWithUserMessage();
                },
                Requires: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Requires()",
                        Line: "84"
                    } ));
                    t.Fixture.Requires();
                },
                RequiresWithUserMessage: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RequiresWithUserMessage()",
                        Line: "93"
                    } ));
                    t.Fixture.RequiresWithUserMessage();
                },
                RequiresWithTypeException: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RequiresWithTypeException()",
                        Line: "102"
                    } ));
                    t.Fixture.RequiresWithTypeException();
                },
                RequiredWithTypeExceptionAndUserMessage: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RequiredWithTypeExceptionAndUserMessage()",
                        Line: "110"
                    } ));
                    t.Fixture.RequiredWithTypeExceptionAndUserMessage();
                },
                ForAll: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ForAll()",
                        Line: "118"
                    } ));
                    t.Fixture.ForAll();
                },
                ForAllWithCollection: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ForAllWithCollection()",
                        Line: "127"
                    } ));
                    t.Fixture.ForAllWithCollection();
                },
                Exists: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Exists()",
                        Line: "136"
                    } ));
                    t.Fixture.Exists();
                },
                ExistsWithCollection: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.Contracts.ContractTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ContractTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ExistsWithCollection()",
                        Line: "145"
                    } ));
                    t.Fixture.ExistsWithCollection();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Diagnostics.Contracts.ContractTests",
                        File: "Batch1\\Diagnostics\\Contracts\\ContractTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests)],
        statics: {
            methods: {
                Roundtrip1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Roundtrip1()",
                        Line: "14"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.Roundtrip1();
                },
                Roundtrip2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Roundtrip2()",
                        Line: "33"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.Roundtrip2();
                },
                Roundtrip3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Roundtrip3()",
                        Line: "39"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.Roundtrip3();
                },
                EmptyString: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EmptyString()",
                        Line: "45"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.EmptyString();
                },
                ZeroLengthArray: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ZeroLengthArray()",
                        Line: "56"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.ZeroLengthArray();
                },
                RoundtripWithPadding1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RoundtripWithPadding1()",
                        Line: "67"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.RoundtripWithPadding1();
                },
                RoundtripWithPadding2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RoundtripWithPadding2()",
                        Line: "73"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.RoundtripWithPadding2();
                },
                PartialRoundtripWithPadding1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PartialRoundtripWithPadding1()",
                        Line: "79"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.PartialRoundtripWithPadding1();
                },
                PartialRoundtripWithPadding2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PartialRoundtripWithPadding2()",
                        Line: "93"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.PartialRoundtripWithPadding2();
                },
                ParseWithWhitespace: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ParseWithWhitespace()",
                        Line: "108"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.ParseWithWhitespace();
                },
                RoundtripWithWhitespace2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RoundtripWithWhitespace2()",
                        Line: "114"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.RoundtripWithWhitespace2();
                },
                RoundtripWithWhitespace3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RoundtripWithWhitespace3()",
                        Line: "121"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.RoundtripWithWhitespace3();
                },
                RoundtripWithWhitespace4: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RoundtripWithWhitespace4()",
                        Line: "128"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.RoundtripWithWhitespace4();
                },
                RoundtripWithWhitespace5: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RoundtripWithWhitespace5()",
                        Line: "136"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.RoundtripWithWhitespace5();
                },
                RoundtripWithWhitespace6: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RoundtripWithWhitespace6()",
                        Line: "144"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.RoundtripWithWhitespace6();
                },
                RoundtripWithWhitespace7: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RoundtripWithWhitespace7()",
                        Line: "152"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.RoundtripWithWhitespace7();
                },
                RoundtripLargeString: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RoundtripLargeString()",
                        Line: "160"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.RoundtripLargeString();
                },
                InvalidOffset: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InvalidOffset()",
                        Line: "167"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.InvalidOffset();
                },
                InvalidLength: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InvalidLength()",
                        Line: "177"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.InvalidLength();
                },
                InvalidInput: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InvalidInput()",
                        Line: "188"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.InvalidInput();
                },
                InvalidCharactersInInput: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertFromBase64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InvalidCharactersInInput()",
                        Line: "215"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.InvalidCharactersInInput();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests",
                        File: "Batch1\\Convert\\ConvertFromBase64Tests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests)],
        statics: {
            methods: {
                ValidOffsetIn: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ValidOffsetIn()",
                        Line: "14"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.ValidOffsetIn();
                },
                ShortInputArray: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ShortInputArray()",
                        Line: "24"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.ShortInputArray();
                },
                ValidOffsetOut: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ValidOffsetOut()",
                        Line: "37"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.ValidOffsetOut();
                },
                InvalidInputBuffer: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InvalidInputBuffer()",
                        Line: "56"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.InvalidInputBuffer();
                },
                InvalidOutputBuffer: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InvalidOutputBuffer()",
                        Line: "62"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.InvalidOutputBuffer();
                },
                InvalidOffsetIn: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InvalidOffsetIn()",
                        Line: "70"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.InvalidOffsetIn();
                },
                InvalidOffsetOut: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InvalidOffsetOut()",
                        Line: "81"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.InvalidOffsetOut();
                },
                InvalidInputLength: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64CharArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InvalidInputLength()",
                        Line: "92"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.InvalidInputLength();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests",
                        File: "Batch1\\Convert\\ConvertToBase64CharArrayTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests)],
        statics: {
            methods: {
                KnownByteSequence: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "KnownByteSequence()",
                        Line: "14"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests.KnownByteSequence();
                },
                ZeroLength: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ZeroLength()",
                        Line: "33"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests.ZeroLength();
                },
                InvalidInputBuffer: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InvalidInputBuffer()",
                        Line: "40"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests.InvalidInputBuffer();
                },
                InvalidOffset: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InvalidOffset()",
                        Line: "47"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests.InvalidOffset();
                },
                InvalidLength: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBase64StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InvalidLength()",
                        Line: "56"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests.InvalidLength();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests",
                        File: "Batch1\\Convert\\ConvertToBase64StringTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests)],
        statics: {
            methods: {
                FromBoolean: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromBoolean()",
                        Line: "14"
                    } ));
                    t.Fixture.FromBoolean();
                },
                FromByte: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromByte()",
                        Line: "21"
                    } ));
                    t.Fixture.FromByte();
                },
                FromDecimal: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromDecimal()",
                        Line: "29"
                    } ));
                    t.Fixture.FromDecimal();
                },
                FromDouble: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromDouble()",
                        Line: "37"
                    } ));
                    t.Fixture.FromDouble();
                },
                FromInt16: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt16()",
                        Line: "45"
                    } ));
                    t.Fixture.FromInt16();
                },
                FromInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt32()",
                        Line: "53"
                    } ));
                    t.Fixture.FromInt32();
                },
                FromInt64: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt64()",
                        Line: "61"
                    } ));
                    t.Fixture.FromInt64();
                },
                FromString: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromString()",
                        Line: "69"
                    } ));
                    t.Fixture.FromString();
                },
                FromObject: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromObject()",
                        Line: "80"
                    } ));
                    t.Fixture.FromObject();
                },
                FromSByte: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromSByte()",
                        Line: "91"
                    } ));
                    t.Fixture.FromSByte();
                },
                FromSingle: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromSingle()",
                        Line: "99"
                    } ));
                    t.Fixture.FromSingle();
                },
                FromUInt16: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt16()",
                        Line: "107"
                    } ));
                    t.Fixture.FromUInt16();
                },
                FromUInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt32()",
                        Line: "115"
                    } ));
                    t.Fixture.FromUInt32();
                },
                FromUInt64: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToBooleanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToBooleanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt64()",
                        Line: "123"
                    } ));
                    t.Fixture.FromUInt64();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.ConvertTests.ConvertToBooleanTests",
                        File: "Batch1\\Convert\\ConvertToBooleanTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests)],
        statics: {
            methods: {
                FromBoolean: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromBoolean()",
                        Line: "14"
                    } ));
                    t.Fixture.FromBoolean();
                },
                FromChar: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromChar()",
                        Line: "22"
                    } ));
                    t.Fixture.FromChar();
                },
                FromDecimal: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromDecimal()",
                        Line: "33"
                    } ));
                    t.Fixture.FromDecimal();
                },
                FromDouble: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromDouble()",
                        Line: "44"
                    } ));
                    t.Fixture.FromDouble();
                },
                FromInt16: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt16()",
                        Line: "55"
                    } ));
                    t.Fixture.FromInt16();
                },
                FromInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt32()",
                        Line: "66"
                    } ));
                    t.Fixture.FromInt32();
                },
                FromInt64: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt64()",
                        Line: "77"
                    } ));
                    t.Fixture.FromInt64();
                },
                FromObject: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromObject()",
                        Line: "88"
                    } ));
                    t.Fixture.FromObject();
                },
                FromSByte: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromSByte()",
                        Line: "99"
                    } ));
                    t.Fixture.FromSByte();
                },
                FromSingle: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromSingle()",
                        Line: "110"
                    } ));
                    t.Fixture.FromSingle();
                },
                FromString: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromString()",
                        Line: "121"
                    } ));
                    t.Fixture.FromString();
                },
                FromStringWithBase: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromStringWithBase()",
                        Line: "140"
                    } ));
                    t.Fixture.FromStringWithBase();
                },
                FromUInt16: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt16()",
                        Line: "161"
                    } ));
                    t.Fixture.FromUInt16();
                },
                FromUInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt32()",
                        Line: "172"
                    } ));
                    t.Fixture.FromUInt32();
                },
                FromUInt64: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt64()",
                        Line: "183"
                    } ));
                    t.Fixture.FromUInt64();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.ConvertTests.ConvertToByteTests",
                        File: "Batch1\\Convert\\ConvertToByteTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests)],
        statics: {
            methods: {
                FromByte: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromByte()",
                        Line: "14"
                    } ));
                    t.Fixture.FromByte();
                },
                FromChar: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromChar()",
                        Line: "22"
                    } ));
                    t.Fixture.FromChar();
                },
                FromDecimal: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromDecimal()",
                        Line: "30"
                    } ));
                    t.Fixture.FromDecimal();
                },
                FromDecimalViaObject: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromDecimalViaObject()",
                        Line: "37"
                    } ));
                    t.Fixture.FromDecimalViaObject();
                },
                FromDouble: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromDouble()",
                        Line: "44"
                    } ));
                    t.Fixture.FromDouble();
                },
                FromDoubleViaObject: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromDoubleViaObject()",
                        Line: "51"
                    } ));
                    t.Fixture.FromDoubleViaObject();
                },
                FromInt16: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt16()",
                        Line: "58"
                    } ));
                    t.Fixture.FromInt16();
                },
                FromInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt32()",
                        Line: "69"
                    } ));
                    t.Fixture.FromInt32();
                },
                FromInt64: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt64()",
                        Line: "80"
                    } ));
                    t.Fixture.FromInt64();
                },
                FromObject: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromObject()",
                        Line: "91"
                    } ));
                    t.Fixture.FromObject();
                },
                FromSByte: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromSByte()",
                        Line: "102"
                    } ));
                    t.Fixture.FromSByte();
                },
                FromSingle: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromSingle()",
                        Line: "113"
                    } ));
                    t.Fixture.FromSingle();
                },
                FromSingleViaObject: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromSingleViaObject()",
                        Line: "120"
                    } ));
                    t.Fixture.FromSingleViaObject();
                },
                FromString: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromString()",
                        Line: "127"
                    } ));
                    t.Fixture.FromString();
                },
                FromUInt16: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt16()",
                        Line: "139"
                    } ));
                    t.Fixture.FromUInt16();
                },
                FromUInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt32()",
                        Line: "147"
                    } ));
                    t.Fixture.FromUInt32();
                },
                FromUInt64: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToCharTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToCharTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt64()",
                        Line: "158"
                    } ));
                    t.Fixture.FromUInt64();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.ConvertTests.ConvertToCharTests",
                        File: "Batch1\\Convert\\ConvertToCharTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests)],
        statics: {
            methods: {
                FromString: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromString()",
                        Line: "17"
                    } ));
                    t.Fixture.FromString();
                },
                FromStringWithCustomFormatProvider: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromStringWithCustomFormatProvider()",
                        Line: "53"
                    } ));
                    t.Fixture.FromStringWithCustomFormatProvider();
                },
                FromDateTime: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromDateTime()",
                        Line: "83"
                    } ));
                    t.Fixture.FromDateTime();
                },
                FromObject: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromObject()",
                        Line: "94"
                    } ));
                    t.Fixture.FromObject();
                },
                FromBoolean: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromBoolean()",
                        Line: "101"
                    } ));
                    t.Fixture.FromBoolean();
                },
                FromChar: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromChar()",
                        Line: "107"
                    } ));
                    t.Fixture.FromChar();
                },
                FromInt16: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt16()",
                        Line: "113"
                    } ));
                    t.Fixture.FromInt16();
                },
                FromInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt32()",
                        Line: "119"
                    } ));
                    t.Fixture.FromInt32();
                },
                FromInt64: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt64()",
                        Line: "125"
                    } ));
                    t.Fixture.FromInt64();
                },
                FromUInt16: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt16()",
                        Line: "131"
                    } ));
                    t.Fixture.FromUInt16();
                },
                FromUInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt32()",
                        Line: "137"
                    } ));
                    t.Fixture.FromUInt32();
                },
                FromUInt64: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt64()",
                        Line: "143"
                    } ));
                    t.Fixture.FromUInt64();
                },
                FromSingle: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromSingle()",
                        Line: "149"
                    } ));
                    t.Fixture.FromSingle();
                },
                FromDouble: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromDouble()",
                        Line: "155"
                    } ));
                    t.Fixture.FromDouble();
                },
                FromDecimal: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromDecimal()",
                        Line: "161"
                    } ));
                    t.Fixture.FromDecimal();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests",
                        File: "Batch1\\Convert\\ConvertToDateTimeTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests)],
        statics: {
            methods: {
                FromBoolean: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromBoolean()",
                        Line: "14"
                    } ));
                    t.Fixture.FromBoolean();
                },
                FromByte: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromByte()",
                        Line: "22"
                    } ));
                    t.Fixture.FromByte();
                },
                FromDecimal: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromDecimal()",
                        Line: "30"
                    } ));
                    t.Fixture.FromDecimal();
                },
                FromDouble: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromDouble()",
                        Line: "38"
                    } ));
                    t.Fixture.FromDouble();
                },
                FromInt16: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt16()",
                        Line: "49"
                    } ));
                    t.Fixture.FromInt16();
                },
                FromInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt32()",
                        Line: "57"
                    } ));
                    t.Fixture.FromInt32();
                },
                FromInt64: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt64()",
                        Line: "65"
                    } ));
                    t.Fixture.FromInt64();
                },
                FromObject: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromObject()",
                        Line: "76"
                    } ));
                    t.Fixture.FromObject();
                },
                FromSByte: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromSByte()",
                        Line: "87"
                    } ));
                    t.Fixture.FromSByte();
                },
                FromSingle: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromSingle()",
                        Line: "95"
                    } ));
                    t.Fixture.FromSingle();
                },
                FromString: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromString()",
                        Line: "106"
                    } ));
                    t.Fixture.FromString();
                },
                FromUInt16: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt16()",
                        Line: "126"
                    } ));
                    t.Fixture.FromUInt16();
                },
                FromUInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt32()",
                        Line: "134"
                    } ));
                    t.Fixture.FromUInt32();
                },
                FromUInt64: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt64()",
                        Line: "142"
                    } ));
                    t.Fixture.FromUInt64();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.ConvertTests.ConvertToDecimalTests",
                        File: "Batch1\\Convert\\ConvertToDecimalTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests)],
        statics: {
            methods: {
                FromBoolean: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromBoolean()",
                        Line: "14"
                    } ));
                    t.Fixture.FromBoolean();
                },
                FromByte: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromByte()",
                        Line: "22"
                    } ));
                    t.Fixture.FromByte();
                },
                FromDecimal: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromDecimal()",
                        Line: "30"
                    } ));
                    t.Fixture.FromDecimal();
                },
                FromDouble: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromDouble()",
                        Line: "38"
                    } ));
                    t.Fixture.FromDouble();
                },
                FromInt16: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt16()",
                        Line: "46"
                    } ));
                    t.Fixture.FromInt16();
                },
                FromInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt32()",
                        Line: "54"
                    } ));
                    t.Fixture.FromInt32();
                },
                FromInt64: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt64()",
                        Line: "62"
                    } ));
                    t.Fixture.FromInt64();
                },
                FromObject: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromObject()",
                        Line: "70"
                    } ));
                    t.Fixture.FromObject();
                },
                FromSByte: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromSByte()",
                        Line: "81"
                    } ));
                    t.Fixture.FromSByte();
                },
                FromSingle: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromSingle()",
                        Line: "89"
                    } ));
                    t.Fixture.FromSingle();
                },
                FromString: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromString()",
                        Line: "97"
                    } ));
                    t.Fixture.FromString();
                },
                FromUInt16: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt16()",
                        Line: "114"
                    } ));
                    t.Fixture.FromUInt16();
                },
                FromUInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt32()",
                        Line: "122"
                    } ));
                    t.Fixture.FromUInt32();
                },
                FromUInt64: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToDoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToDoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt64()",
                        Line: "130"
                    } ));
                    t.Fixture.FromUInt64();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.ConvertTests.ConvertToDoubleTests",
                        File: "Batch1\\Convert\\ConvertToDoubleTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests)],
        statics: {
            methods: {
                FromBoolean: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromBoolean()",
                        Line: "14"
                    } ));
                    t.Fixture.FromBoolean();
                },
                FromByte: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromByte()",
                        Line: "22"
                    } ));
                    t.Fixture.FromByte();
                },
                FromChar: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromChar()",
                        Line: "30"
                    } ));
                    t.Fixture.FromChar();
                },
                FromDecimal: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromDecimal()",
                        Line: "38"
                    } ));
                    t.Fixture.FromDecimal();
                },
                FromDouble: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromDouble()",
                        Line: "49"
                    } ));
                    t.Fixture.FromDouble();
                },
                FromInt16: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt16()",
                        Line: "60"
                    } ));
                    t.Fixture.FromInt16();
                },
                FromInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt32()",
                        Line: "68"
                    } ));
                    t.Fixture.FromInt32();
                },
                FromInt64: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt64()",
                        Line: "79"
                    } ));
                    t.Fixture.FromInt64();
                },
                FromObject: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromObject()",
                        Line: "90"
                    } ));
                    t.Fixture.FromObject();
                },
                FromSByte: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromSByte()",
                        Line: "101"
                    } ));
                    t.Fixture.FromSByte();
                },
                FromSingle: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromSingle()",
                        Line: "109"
                    } ));
                    t.Fixture.FromSingle();
                },
                FromString: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromString()",
                        Line: "120"
                    } ));
                    t.Fixture.FromString();
                },
                FromStringWithBase: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromStringWithBase()",
                        Line: "139"
                    } ));
                    t.Fixture.FromStringWithBase();
                },
                FromUInt16: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt16()",
                        Line: "172"
                    } ));
                    t.Fixture.FromUInt16();
                },
                FromUInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt32()",
                        Line: "183"
                    } ));
                    t.Fixture.FromUInt32();
                },
                FromUInt64: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt64()",
                        Line: "194"
                    } ));
                    t.Fixture.FromUInt64();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.ConvertTests.ConvertToInt16Tests",
                        File: "Batch1\\Convert\\ConvertToInt16Tests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests)],
        statics: {
            methods: {
                FromBoolean: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromBoolean()",
                        Line: "14"
                    } ));
                    t.Fixture.FromBoolean();
                },
                FromByte: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromByte()",
                        Line: "22"
                    } ));
                    t.Fixture.FromByte();
                },
                FromChar: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromChar()",
                        Line: "30"
                    } ));
                    t.Fixture.FromChar();
                },
                FromDecimal: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromDecimal()",
                        Line: "38"
                    } ));
                    t.Fixture.FromDecimal();
                },
                FromDouble: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromDouble()",
                        Line: "49"
                    } ));
                    t.Fixture.FromDouble();
                },
                FromInt16: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt16()",
                        Line: "60"
                    } ));
                    t.Fixture.FromInt16();
                },
                FromInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt32()",
                        Line: "68"
                    } ));
                    t.Fixture.FromInt32();
                },
                FromInt64: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt64()",
                        Line: "76"
                    } ));
                    t.Fixture.FromInt64();
                },
                FromObject: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromObject()",
                        Line: "87"
                    } ));
                    t.Fixture.FromObject();
                },
                FromSByte: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromSByte()",
                        Line: "98"
                    } ));
                    t.Fixture.FromSByte();
                },
                FromSingle: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromSingle()",
                        Line: "106"
                    } ));
                    t.Fixture.FromSingle();
                },
                FromString: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromString()",
                        Line: "117"
                    } ));
                    t.Fixture.FromString();
                },
                FromStringWithBase: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromStringWithBase()",
                        Line: "136"
                    } ));
                    t.Fixture.FromStringWithBase();
                },
                FromUInt16: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt16()",
                        Line: "169"
                    } ));
                    t.Fixture.FromUInt16();
                },
                FromUInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt32()",
                        Line: "177"
                    } ));
                    t.Fixture.FromUInt32();
                },
                FromUInt64: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt64()",
                        Line: "188"
                    } ));
                    t.Fixture.FromUInt64();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.ConvertTests.ConvertToInt32Tests",
                        File: "Batch1\\Convert\\ConvertToInt32Tests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests)],
        statics: {
            methods: {
                FromBoolean: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromBoolean()",
                        Line: "14"
                    } ));
                    t.Fixture.FromBoolean();
                },
                FromByte: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromByte()",
                        Line: "22"
                    } ));
                    t.Fixture.FromByte();
                },
                FromChar: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromChar()",
                        Line: "30"
                    } ));
                    t.Fixture.FromChar();
                },
                FromDecimal: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromDecimal()",
                        Line: "38"
                    } ));
                    t.Fixture.FromDecimal();
                },
                FromDouble: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromDouble()",
                        Line: "49"
                    } ));
                    t.Fixture.FromDouble();
                },
                FromInt16: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt16()",
                        Line: "60"
                    } ));
                    t.Fixture.FromInt16();
                },
                FromInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt32()",
                        Line: "68"
                    } ));
                    t.Fixture.FromInt32();
                },
                FromInt64: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt64()",
                        Line: "76"
                    } ));
                    t.Fixture.FromInt64();
                },
                FromObject: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromObject()",
                        Line: "84"
                    } ));
                    t.Fixture.FromObject();
                },
                FromSByte: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromSByte()",
                        Line: "95"
                    } ));
                    t.Fixture.FromSByte();
                },
                FromSingle: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromSingle()",
                        Line: "103"
                    } ));
                    t.Fixture.FromSingle();
                },
                FromString: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromString()",
                        Line: "114"
                    } ));
                    t.Fixture.FromString();
                },
                FromStringWithBase: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromStringWithBase()",
                        Line: "131"
                    } ));
                    t.Fixture.FromStringWithBase();
                },
                FromUInt16: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt16()",
                        Line: "166"
                    } ));
                    t.Fixture.FromUInt16();
                },
                FromUInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt32()",
                        Line: "174"
                    } ));
                    t.Fixture.FromUInt32();
                },
                FromUInt64: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt64()",
                        Line: "182"
                    } ));
                    t.Fixture.FromUInt64();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.ConvertTests.ConvertToInt64Tests",
                        File: "Batch1\\Convert\\ConvertToInt64Tests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests)],
        statics: {
            methods: {
                FromBoolean: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromBoolean()",
                        Line: "14"
                    } ));
                    t.Fixture.FromBoolean();
                },
                FromByte: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromByte()",
                        Line: "22"
                    } ));
                    t.Fixture.FromByte();
                },
                FromChar: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromChar()",
                        Line: "33"
                    } ));
                    t.Fixture.FromChar();
                },
                FromDecimal: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromDecimal()",
                        Line: "41"
                    } ));
                    t.Fixture.FromDecimal();
                },
                FromDouble: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromDouble()",
                        Line: "52"
                    } ));
                    t.Fixture.FromDouble();
                },
                FromInt16: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt16()",
                        Line: "63"
                    } ));
                    t.Fixture.FromInt16();
                },
                FromInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt32()",
                        Line: "74"
                    } ));
                    t.Fixture.FromInt32();
                },
                FromInt64: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt64()",
                        Line: "85"
                    } ));
                    t.Fixture.FromInt64();
                },
                FromObject: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromObject()",
                        Line: "96"
                    } ));
                    t.Fixture.FromObject();
                },
                FromSByte: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromSByte()",
                        Line: "107"
                    } ));
                    t.Fixture.FromSByte();
                },
                FromSingle: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromSingle()",
                        Line: "115"
                    } ));
                    t.Fixture.FromSingle();
                },
                FromString: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromString()",
                        Line: "126"
                    } ));
                    t.Fixture.FromString();
                },
                FromStringWithBase: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromStringWithBase()",
                        Line: "150"
                    } ));
                    t.Fixture.FromStringWithBase();
                },
                FromUInt16: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt16()",
                        Line: "171"
                    } ));
                    t.Fixture.FromUInt16();
                },
                FromUInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt32()",
                        Line: "182"
                    } ));
                    t.Fixture.FromUInt32();
                },
                FromUInt64: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt64()",
                        Line: "193"
                    } ));
                    t.Fixture.FromUInt64();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.ConvertTests.ConvertToSByteTests",
                        File: "Batch1\\Convert\\ConvertToSByteTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests)],
        statics: {
            methods: {
                FromBoolean: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromBoolean()",
                        Line: "14"
                    } ));
                    t.Fixture.FromBoolean();
                },
                FromByte: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromByte()",
                        Line: "22"
                    } ));
                    t.Fixture.FromByte();
                },
                FromDecimal: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromDecimal()",
                        Line: "30"
                    } ));
                    t.Fixture.FromDecimal();
                },
                FromDouble: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromDouble()",
                        Line: "40"
                    } ));
                    t.Fixture.FromDouble();
                },
                FromInt16: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt16()",
                        Line: "48"
                    } ));
                    t.Fixture.FromInt16();
                },
                FromInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt32()",
                        Line: "56"
                    } ));
                    t.Fixture.FromInt32();
                },
                FromInt64: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt64()",
                        Line: "64"
                    } ));
                    t.Fixture.FromInt64();
                },
                FromObject: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromObject()",
                        Line: "72"
                    } ));
                    t.Fixture.FromObject();
                },
                FromSByte: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromSByte()",
                        Line: "83"
                    } ));
                    t.Fixture.FromSByte();
                },
                FromSingle: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromSingle()",
                        Line: "91"
                    } ));
                    t.Fixture.FromSingle();
                },
                FromString: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromString()",
                        Line: "99"
                    } ));
                    t.Fixture.FromString();
                },
                FromUInt16: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt16()",
                        Line: "115"
                    } ));
                    t.Fixture.FromUInt16();
                },
                FromUInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt32()",
                        Line: "123"
                    } ));
                    t.Fixture.FromUInt32();
                },
                FromUInt64: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToSingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToSingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt64()",
                        Line: "131"
                    } ));
                    t.Fixture.FromUInt64();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.ConvertTests.ConvertToSingleTests",
                        File: "Batch1\\Convert\\ConvertToSingleTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests)],
        statics: {
            methods: {
                FromBoxedObject: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromBoxedObject()",
                        Line: "15"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromBoxedObject();
                },
                FromObject: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromObject()",
                        Line: "199"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromObject();
                },
                FromDateTime: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromDateTime()",
                        Line: "205"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromDateTime();
                },
                FromChar: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromChar()",
                        Line: "218"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromChar();
                },
                FromByteBase2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromByteBase2()",
                        Line: "231"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromByteBase2();
                },
                FromByteBase8: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromByteBase8()",
                        Line: "243"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromByteBase8();
                },
                FromByteBase10: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromByteBase10()",
                        Line: "255"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromByteBase10();
                },
                FromByteBase16: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromByteBase16()",
                        Line: "267"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromByteBase16();
                },
                FromByteInvalidBase: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromByteInvalidBase()",
                        Line: "279"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromByteInvalidBase();
                },
                FromInt16Base2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt16Base2()",
                        Line: "285"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromInt16Base2();
                },
                FromInt16Base8: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt16Base8()",
                        Line: "297"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromInt16Base8();
                },
                FromInt16Base10: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt16Base10()",
                        Line: "309"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromInt16Base10();
                },
                FromInt16Base16: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt16Base16()",
                        Line: "321"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromInt16Base16();
                },
                FromInt16InvalidBase: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt16InvalidBase()",
                        Line: "333"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromInt16InvalidBase();
                },
                FromInt32Base2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt32Base2()",
                        Line: "339"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromInt32Base2();
                },
                FromInt32Base8: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt32Base8()",
                        Line: "351"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromInt32Base8();
                },
                FromInt32Base10: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt32Base10()",
                        Line: "363"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromInt32Base10();
                },
                FromInt32Base16: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt32Base16()",
                        Line: "375"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromInt32Base16();
                },
                FromInt32InvalidBase: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt32InvalidBase()",
                        Line: "387"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromInt32InvalidBase();
                },
                FromInt64Base2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt64Base2()",
                        Line: "393"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromInt64Base2();
                },
                FromInt64Base8: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt64Base8()",
                        Line: "405"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromInt64Base8();
                },
                FromInt64Base10: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt64Base10()",
                        Line: "417"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromInt64Base10();
                },
                FromInt64Base16: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt64Base16()",
                        Line: "429"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromInt64Base16();
                },
                FromInt64InvalidBase: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt64InvalidBase()",
                        Line: "441"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromInt64InvalidBase();
                },
                FromBoolean: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromBoolean()",
                        Line: "447"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromBoolean();
                },
                FromSByte: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromSByte()",
                        Line: "463"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromSByte();
                },
                FromByte: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromByte()",
                        Line: "477"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromByte();
                },
                FromInt16Array: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt16Array()",
                        Line: "491"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromInt16Array();
                },
                FromUInt16Array: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt16Array()",
                        Line: "505"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromUInt16Array();
                },
                FromInt32Array: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt32Array()",
                        Line: "519"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromInt32Array();
                },
                FromUInt32Array: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt32Array()",
                        Line: "533"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromUInt32Array();
                },
                FromInt64Array: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt64Array()",
                        Line: "547"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromInt64Array();
                },
                FromUInt64Array: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt64Array()",
                        Line: "561"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromUInt64Array();
                },
                FromSingleArray: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromSingleArray()",
                        Line: "575"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromSingleArray();
                },
                FromDoubleArray: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromDoubleArray()",
                        Line: "592"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromDoubleArray();
                },
                FromDecimalArray: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromDecimalArray()",
                        Line: "606"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromDecimalArray();
                },
                FromDateTimeArray: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromDateTimeArray()",
                        Line: "619"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromDateTimeArray();
                },
                FromString: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromString()",
                        Line: "638"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromString();
                },
                FromIFormattable: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromIFormattable()",
                        Line: "652"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromIFormattable();
                },
                FromNonIConvertible: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromNonIConvertible()",
                        Line: "666"
                    } ));
                    Bridge.ClientTest.ConvertTests.ConvertToStringTests.FromNonIConvertible();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.ConvertTests.ConvertToStringTests",
                        File: "Batch1\\Convert\\ConvertToStringTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests)],
        statics: {
            methods: {
                FromBoolean: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromBoolean()",
                        Line: "14"
                    } ));
                    t.Fixture.FromBoolean();
                },
                FromByte: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromByte()",
                        Line: "22"
                    } ));
                    t.Fixture.FromByte();
                },
                FromChar: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromChar()",
                        Line: "30"
                    } ));
                    t.Fixture.FromChar();
                },
                FromDecimal: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromDecimal()",
                        Line: "38"
                    } ));
                    t.Fixture.FromDecimal();
                },
                FromDouble: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromDouble()",
                        Line: "49"
                    } ));
                    t.Fixture.FromDouble();
                },
                FromInt16: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt16()",
                        Line: "60"
                    } ));
                    t.Fixture.FromInt16();
                },
                FromInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt32()",
                        Line: "71"
                    } ));
                    t.Fixture.FromInt32();
                },
                FromInt64: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt64()",
                        Line: "82"
                    } ));
                    t.Fixture.FromInt64();
                },
                FromObject: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromObject()",
                        Line: "93"
                    } ));
                    t.Fixture.FromObject();
                },
                FromSByte: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromSByte()",
                        Line: "104"
                    } ));
                    t.Fixture.FromSByte();
                },
                FromSingle: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromSingle()",
                        Line: "115"
                    } ));
                    t.Fixture.FromSingle();
                },
                FromString: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromString()",
                        Line: "126"
                    } ));
                    t.Fixture.FromString();
                },
                FromStringWithBase: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromStringWithBase()",
                        Line: "142"
                    } ));
                    t.Fixture.FromStringWithBase();
                },
                FromUInt16: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt16()",
                        Line: "163"
                    } ));
                    t.Fixture.FromUInt16();
                },
                FromUInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt32()",
                        Line: "171"
                    } ));
                    t.Fixture.FromUInt32();
                },
                FromUInt64: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt64()",
                        Line: "182"
                    } ));
                    t.Fixture.FromUInt64();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests",
                        File: "Batch1\\Convert\\ConvertToUInt16Tests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests)],
        statics: {
            methods: {
                FromBoolean: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromBoolean()",
                        Line: "14"
                    } ));
                    t.Fixture.FromBoolean();
                },
                FromByte: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromByte()",
                        Line: "22"
                    } ));
                    t.Fixture.FromByte();
                },
                FromChar: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromChar()",
                        Line: "30"
                    } ));
                    t.Fixture.FromChar();
                },
                FromDecimal: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromDecimal()",
                        Line: "38"
                    } ));
                    t.Fixture.FromDecimal();
                },
                FromDouble: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromDouble()",
                        Line: "49"
                    } ));
                    t.Fixture.FromDouble();
                },
                FromInt16: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt16()",
                        Line: "60"
                    } ));
                    t.Fixture.FromInt16();
                },
                FromInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt32()",
                        Line: "71"
                    } ));
                    t.Fixture.FromInt32();
                },
                FromInt64: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt64()",
                        Line: "82"
                    } ));
                    t.Fixture.FromInt64();
                },
                FromObject: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromObject()",
                        Line: "93"
                    } ));
                    t.Fixture.FromObject();
                },
                FromSByte: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromSByte()",
                        Line: "104"
                    } ));
                    t.Fixture.FromSByte();
                },
                FromSingle: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromSingle()",
                        Line: "115"
                    } ));
                    t.Fixture.FromSingle();
                },
                FromString: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromString()",
                        Line: "126"
                    } ));
                    t.Fixture.FromString();
                },
                FromStringWithBase: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromStringWithBase()",
                        Line: "144"
                    } ));
                    t.Fixture.FromStringWithBase();
                },
                FromUInt16: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt16()",
                        Line: "165"
                    } ));
                    t.Fixture.FromUInt16();
                },
                FromUInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt32()",
                        Line: "173"
                    } ));
                    t.Fixture.FromUInt32();
                },
                FromUInt64: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt64()",
                        Line: "181"
                    } ));
                    t.Fixture.FromUInt64();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests",
                        File: "Batch1\\Convert\\ConvertToUInt32Tests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests)],
        statics: {
            methods: {
                FromBoolean: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromBoolean()",
                        Line: "14"
                    } ));
                    t.Fixture.FromBoolean();
                },
                FromByte: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromByte()",
                        Line: "22"
                    } ));
                    t.Fixture.FromByte();
                },
                FromChar: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromChar()",
                        Line: "30"
                    } ));
                    t.Fixture.FromChar();
                },
                FromDecimal: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromDecimal()",
                        Line: "38"
                    } ));
                    t.Fixture.FromDecimal();
                },
                FromDouble: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromDouble()",
                        Line: "49"
                    } ));
                    t.Fixture.FromDouble();
                },
                FromInt16: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt16()",
                        Line: "60"
                    } ));
                    t.Fixture.FromInt16();
                },
                FromInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt32()",
                        Line: "71"
                    } ));
                    t.Fixture.FromInt32();
                },
                FromInt64: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromInt64()",
                        Line: "82"
                    } ));
                    t.Fixture.FromInt64();
                },
                FromObject: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromObject()",
                        Line: "93"
                    } ));
                    t.Fixture.FromObject();
                },
                FromSByte: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromSByte()",
                        Line: "104"
                    } ));
                    t.Fixture.FromSByte();
                },
                FromSingle: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromSingle()",
                        Line: "115"
                    } ));
                    t.Fixture.FromSingle();
                },
                FromString: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromString()",
                        Line: "126"
                    } ));
                    t.Fixture.FromString();
                },
                FromStringWithBase: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromStringWithBase()",
                        Line: "148"
                    } ));
                    t.Fixture.FromStringWithBase();
                },
                FromUInt16: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt16()",
                        Line: "175"
                    } ));
                    t.Fixture.FromUInt16();
                },
                FromUInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt32()",
                        Line: "183"
                    } ));
                    t.Fixture.FromUInt32();
                },
                FromUInt64: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ConvertToUInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromUInt64()",
                        Line: "191"
                    } ));
                    t.Fixture.FromUInt64();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests",
                        File: "Batch1\\Convert\\ConvertToUInt64Tests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.CreateAndInitializationModesTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ObjectLiteralTests.CreateAndInitializationModesTests)],
        statics: {
            methods: {
                Test: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ObjectLiteralTests.CreateAndInitializationModesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CreateAndInitializationModesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Test()",
                        Line: "391"
                    } ));
                    t.Fixture.Test();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.ObjectLiteralTests.CreateAndInitializationModesTests",
                        File: "Batch1\\ObjectLiteralTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.CreateModeTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ObjectLiteralTests.CreateModeTests)],
        statics: {
            methods: {
                Test: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ObjectLiteralTests.CreateModeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CreateModeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Test()",
                        Line: "233"
                    } ));
                    t.Fixture.Test();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.ObjectLiteralTests.CreateModeTests",
                        File: "Batch1\\ObjectLiteralTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.CultureInfoTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CultureInfoTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CultureInfoTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureInfoTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "10"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                GetFormatWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CultureInfoTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureInfoTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetFormatWorks()",
                        Line: "18"
                    } ));
                    t.Fixture.GetFormatWorks();
                },
                InvariantWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CultureInfoTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureInfoTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InvariantWorks()",
                        Line: "27"
                    } ));
                    t.Fixture.InvariantWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.CultureInfoTests",
                        File: "Batch1\\CultureInfoTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CultureNotFoundExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CultureNotFoundExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "14"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CultureNotFoundExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorWorks()",
                        Line: "23"
                    } ));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithMessageWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CultureNotFoundExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageWorks()",
                        Line: "33"
                    } ));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CultureNotFoundExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageAndInnerExceptionWorks()",
                        Line: "45"
                    } ));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                },
                ConstructorWithMessageAndParamNameWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CultureNotFoundExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageAndParamNameWorks()",
                        Line: "58"
                    } ));
                    t.Fixture.ConstructorWithMessageAndParamNameWorks();
                },
                ConstructorWithMessageAndCultureNameAndInnerExceptionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CultureNotFoundExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageAndCultureNameAndInnerExceptionWorks()",
                        Line: "70"
                    } ));
                    t.Fixture.ConstructorWithMessageAndCultureNameAndInnerExceptionWorks();
                },
                ConstructorWithParamNameAndCultureNameAndMessage: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CultureNotFoundExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithParamNameAndCultureNameAndMessage()",
                        Line: "84"
                    } ));
                    t.Fixture.ConstructorWithParamNameAndCultureNameAndMessage();
                },
                ConstructorWithMessageAndCultureIdAndInnerExceptionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CultureNotFoundExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageAndCultureIdAndInnerExceptionWorks()",
                        Line: "96"
                    } ));
                    t.Fixture.ConstructorWithMessageAndCultureIdAndInnerExceptionWorks();
                },
                ConstructorWithParamNameAndCultureIdAndMessage: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.CultureNotFoundExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.CultureNotFoundExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithParamNameAndCultureIdAndMessage()",
                        Line: "110"
                    } ));
                    t.Fixture.ConstructorWithParamNameAndCultureIdAndMessage();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Exceptions.CultureNotFoundExceptionTests",
                        File: "Batch1\\Exceptions\\CultureNotFoundExceptionTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "20"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                ArrayBufferOnlyConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayBufferOnlyConstructorWorks()",
                        Line: "36"
                    } ));
                    t.Fixture.ArrayBufferOnlyConstructorWorks();
                },
                ArrayBufferAndByteOffsetConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayBufferAndByteOffsetConstructorWorks()",
                        Line: "45"
                    } ));
                    t.Fixture.ArrayBufferAndByteOffsetConstructorWorks();
                },
                ArrayBufferAndByteOffsetAndByteLengthConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayBufferAndByteOffsetAndByteLengthConstructorWorks()",
                        Line: "54"
                    } ));
                    t.Fixture.ArrayBufferAndByteOffsetAndByteLengthConstructorWorks();
                },
                GetInt8Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetInt8Works()",
                        Line: "64"
                    } ));
                    t.Fixture.GetInt8Works();
                },
                GetUint8Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetUint8Works()",
                        Line: "72"
                    } ));
                    t.Fixture.GetUint8Works();
                },
                GetInt16Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetInt16Works()",
                        Line: "80"
                    } ));
                    t.Fixture.GetInt16Works();
                },
                GetUint16Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetUint16Works()",
                        Line: "95"
                    } ));
                    t.Fixture.GetUint16Works();
                },
                GetInt32Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetInt32Works()",
                        Line: "110"
                    } ));
                    t.Fixture.GetInt32Works();
                },
                GetUint32Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetUint32Works()",
                        Line: "125"
                    } ));
                    t.Fixture.GetUint32Works();
                },
                GetFloat32Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetFloat32Works()",
                        Line: "140"
                    } ));
                    t.Fixture.GetFloat32Works();
                },
                GetFloat64Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetFloat64Works()",
                        Line: "149"
                    } ));
                    t.Fixture.GetFloat64Works();
                },
                SetInt8Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetInt8Works()",
                        Line: "173"
                    } ));
                    t.Fixture.SetInt8Works();
                },
                SetUint8Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetUint8Works()",
                        Line: "183"
                    } ));
                    t.Fixture.SetUint8Works();
                },
                SetInt16Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetInt16Works()",
                        Line: "193"
                    } ));
                    t.Fixture.SetInt16Works();
                },
                SetUint16Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetUint16Works()",
                        Line: "207"
                    } ));
                    t.Fixture.SetUint16Works();
                },
                SetInt32Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetInt32Works()",
                        Line: "221"
                    } ));
                    t.Fixture.SetInt32Works();
                },
                SetUint32Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetUint32Works()",
                        Line: "235"
                    } ));
                    t.Fixture.SetUint32Works();
                },
                SetFloat32Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetFloat32Works()",
                        Line: "249"
                    } ));
                    t.Fixture.SetFloat32Works();
                },
                SetFloat64Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.DataViewTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DataViewTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetFloat64Works()",
                        Line: "260"
                    } ));
                    t.Fixture.SetFloat64Works();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Collections.Native.DataViewTests",
                        File: "Batch1\\Collections\\Native\\DataViewTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.DateTimeFormatInfoTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.DateTimeFormatInfoTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.DateTimeFormatInfoTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTimeFormatInfoTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "11"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                GetFormatWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.DateTimeFormatInfoTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTimeFormatInfoTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetFormatWorks()",
                        Line: "19"
                    } ));
                    t.Fixture.GetFormatWorks();
                },
                InvariantWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.DateTimeFormatInfoTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DateTimeFormatInfoTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InvariantWorks()",
                        Line: "27"
                    } ));
                    t.Fixture.InvariantWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Format.DateTimeFormatInfoTests",
                        File: "Batch1\\Format\\DateTimeFormatInfoTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests)],
        statics: {
            methods: {
                TestSubtractOperator: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestSubtractOperator()",
                        Line: "132"
                    } ));
                    Bridge.ClientTest.DecimalMathTests.TestSubtractOperator();
                },
                TestRemainderOperator: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestRemainderOperator()",
                        Line: "138"
                    } ));
                    Bridge.ClientTest.DecimalMathTests.TestRemainderOperator();
                },
                TestMultiplyOperator: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestMultiplyOperator()",
                        Line: "144"
                    } ));
                    Bridge.ClientTest.DecimalMathTests.TestMultiplyOperator();
                },
                TestDivideOperator: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestDivideOperator()",
                        Line: "150"
                    } ));
                    Bridge.ClientTest.DecimalMathTests.TestDivideOperator();
                },
                TestAddOperator: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestAddOperator()",
                        Line: "156"
                    } ));
                    Bridge.ClientTest.DecimalMathTests.TestAddOperator();
                },
                TestAddMethod: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestAddMethod()",
                        Line: "162"
                    } ));
                    Bridge.ClientTest.DecimalMathTests.TestAddMethod();
                },
                TestDivideMethod: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestDivideMethod()",
                        Line: "168"
                    } ));
                    Bridge.ClientTest.DecimalMathTests.TestDivideMethod();
                },
                TestMultiplyMethod: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestMultiplyMethod()",
                        Line: "174"
                    } ));
                    Bridge.ClientTest.DecimalMathTests.TestMultiplyMethod();
                },
                TestRemainderMethod: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestRemainderMethod()",
                        Line: "180"
                    } ));
                    Bridge.ClientTest.DecimalMathTests.TestRemainderMethod();
                },
                TestSubtractMethod: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestSubtractMethod()",
                        Line: "186"
                    } ));
                    Bridge.ClientTest.DecimalMathTests.TestSubtractMethod();
                },
                TestCeilingMethod: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestCeilingMethod()",
                        Line: "192"
                    } ));
                    Bridge.ClientTest.DecimalMathTests.TestCeilingMethod();
                },
                TestFloorMethod: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DecimalMathTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalMathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestFloorMethod()",
                        Line: "217"
                    } ));
                    Bridge.ClientTest.DecimalMathTests.TestFloorMethod();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.DecimalMathTests",
                        File: "Batch1\\DecimalMathTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "16"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultValueIs0: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultValueIs0()",
                        Line: "31"
                    } ));
                    t.Fixture.DefaultValueIs0();
                },
                CreatingInstanceReturnsZero: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CreatingInstanceReturnsZero()",
                        Line: "37"
                    } ));
                    t.Fixture.CreatingInstanceReturnsZero();
                },
                ConstantsWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstantsWork()",
                        Line: "43"
                    } ));
                    t.Fixture.ConstantsWork();
                },
                DefaultConstructorReturnsZero: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorReturnsZero()",
                        Line: "51"
                    } ));
                    t.Fixture.DefaultConstructorReturnsZero();
                },
                ConvertingConstructorsWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConvertingConstructorsWork()",
                        Line: "57"
                    } ));
                    t.Fixture.ConvertingConstructorsWork();
                },
                FormatWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FormatWorks()",
                        Line: "68"
                    } ));
                    t.Fixture.FormatWorks();
                },
                IFormattableToStringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IFormattableToStringWorks()",
                        Line: "74"
                    } ));
                    t.Fixture.IFormattableToStringWorks();
                },
                ToStringWithoutRadixWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToStringWithoutRadixWorks()",
                        Line: "80"
                    } ));
                    t.Fixture.ToStringWithoutRadixWorks();
                },
                AddWithStringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AddWithStringWorks()",
                        Line: "129"
                    } ));
                    t.Fixture.AddWithStringWorks();
                },
                ConversionsToDecimalWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConversionsToDecimalWork()",
                        Line: "143"
                    } ));
                    t.Fixture.ConversionsToDecimalWork();
                },
                ConversionsFromDecimalWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConversionsFromDecimalWork()",
                        Line: "160"
                    } ));
                    t.Fixture.ConversionsFromDecimalWork();
                },
                OperatorsWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "OperatorsWork()",
                        Line: "177"
                    } ));
                    t.Fixture.OperatorsWork();
                },
                AddWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AddWorks()",
                        Line: "206"
                    } ));
                    t.Fixture.AddWorks();
                },
                CeilingWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CeilingWorks()",
                        Line: "212"
                    } ));
                    t.Fixture.CeilingWorks();
                },
                DivideWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DivideWorks()",
                        Line: "218"
                    } ));
                    t.Fixture.DivideWorks();
                },
                FloorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FloorWorks()",
                        Line: "224"
                    } ));
                    t.Fixture.FloorWorks();
                },
                RemainderWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RemainderWorks()",
                        Line: "230"
                    } ));
                    t.Fixture.RemainderWorks();
                },
                MultiplyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MultiplyWorks()",
                        Line: "236"
                    } ));
                    t.Fixture.MultiplyWorks();
                },
                NegateWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NegateWorks()",
                        Line: "242"
                    } ));
                    t.Fixture.NegateWorks();
                },
                RoundWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RoundWorks()",
                        Line: "248"
                    } ));
                    t.Fixture.RoundWorks();
                },
                RoundWithModeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RoundWithModeWorks()",
                        Line: "254"
                    } ));
                    t.Fixture.RoundWithModeWorks();
                },
                SubtractWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SubtractWorks()",
                        Line: "321"
                    } ));
                    t.Fixture.SubtractWorks();
                },
                GetHashCodeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetHashCodeWorks()",
                        Line: "327"
                    } ));
                    t.Fixture.GetHashCodeWorks();
                },
                ObjectEqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ObjectEqualsWorks()",
                        Line: "336"
                    } ));
                    t.Fixture.ObjectEqualsWorks();
                },
                DecimalEqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DecimalEqualsWorks()",
                        Line: "346"
                    } ));
                    t.Fixture.DecimalEqualsWorks();
                },
                CompareToWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CompareToWorks()",
                        Line: "356"
                    } ));
                    t.Fixture.CompareToWorks();
                },
                IComparableCompareToWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IComparableCompareToWorks()",
                        Line: "365"
                    } ));
                    t.Fixture.IComparableCompareToWorks();
                },
                FullCoalesceWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FullCoalesceWorks()",
                        Line: "374"
                    } ));
                    t.Fixture.FullCoalesceWorks();
                },
                ShortCoalesceWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DecimalTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DecimalTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ShortCoalesceWorks()",
                        Line: "383"
                    } ));
                    t.Fixture.ShortCoalesceWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.SimpleTypes.DecimalTests",
                        File: "Batch1\\SimpleTypes\\DecimalTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests)],
        statics: {
            methods: {
                ByteArrayWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ByteArrayWorks()",
                        Line: "158"
                    } ));
                    Bridge.ClientTest.DeserializationTests.ByteArrayWorks();
                },
                GuidWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GuidWorks()",
                        Line: "165"
                    } ));
                    Bridge.ClientTest.DeserializationTests.GuidWorks();
                },
                TypeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypeWorks()",
                        Line: "172"
                    } ));
                    Bridge.ClientTest.DeserializationTests.TypeWorks();
                },
                CharWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CharWorks()",
                        Line: "178"
                    } ));
                    Bridge.ClientTest.DeserializationTests.CharWorks();
                },
                Int64Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Int64Works()",
                        Line: "184"
                    } ));
                    Bridge.ClientTest.DeserializationTests.Int64Works();
                },
                UInt64Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "UInt64Works()",
                        Line: "195"
                    } ));
                    Bridge.ClientTest.DeserializationTests.UInt64Works();
                },
                DecimalWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DecimalWorks()",
                        Line: "206"
                    } ));
                    Bridge.ClientTest.DeserializationTests.DecimalWorks();
                },
                DateTimeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DateTimeWorks()",
                        Line: "214"
                    } ));
                    Bridge.ClientTest.DeserializationTests.DateTimeWorks();
                },
                ArrayWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayWorks()",
                        Line: "224"
                    } ));
                    Bridge.ClientTest.DeserializationTests.ArrayWorks();
                },
                ComplexArrayWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ComplexArrayWorks()",
                        Line: "241"
                    } ));
                    Bridge.ClientTest.DeserializationTests.ComplexArrayWorks();
                },
                EnumWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EnumWorks()",
                        Line: "265"
                    } ));
                    Bridge.ClientTest.DeserializationTests.EnumWorks();
                },
                IListWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IListWorks()",
                        Line: "271"
                    } ));
                    Bridge.ClientTest.DeserializationTests.IListWorks();
                },
                IDictionaryWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IDictionaryWorks()",
                        Line: "282"
                    } ));
                    Bridge.ClientTest.DeserializationTests.IDictionaryWorks();
                },
                TypeWithFieldWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypeWithFieldWorks()",
                        Line: "296"
                    } ));
                    Bridge.ClientTest.DeserializationTests.TypeWithFieldWorks();
                },
                ComplexPropertiesWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ComplexPropertiesWorks()",
                        Line: "323"
                    } ));
                    Bridge.ClientTest.DeserializationTests.ComplexPropertiesWorks();
                },
                CamelCaseSettingWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CamelCaseSettingWorks()",
                        Line: "384"
                    } ));
                    Bridge.ClientTest.DeserializationTests.CamelCaseSettingWorks();
                },
                IgnoreNullValueWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IgnoreNullValueWorks()",
                        Line: "396"
                    } ));
                    Bridge.ClientTest.DeserializationTests.IgnoreNullValueWorks();
                },
                AnonymousTypesWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AnonymousTypesWorks()",
                        Line: "418"
                    } ));
                    Bridge.ClientTest.DeserializationTests.AnonymousTypesWorks();
                },
                TypeNameHandlingWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DeserializationTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DeserializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypeNameHandlingWorks()",
                        Line: "433"
                    } ));
                    Bridge.ClientTest.DeserializationTests.TypeNameHandlingWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.DeserializationTests",
                        File: "Batch1\\Serialization\\DeserializationTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.DivideByZeroExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.DivideByZeroExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.DivideByZeroExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DivideByZeroExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "10"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.DivideByZeroExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DivideByZeroExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorWorks()",
                        Line: "19"
                    } ));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithMessageWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.DivideByZeroExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DivideByZeroExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageWorks()",
                        Line: "28"
                    } ));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.DivideByZeroExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DivideByZeroExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageAndInnerExceptionWorks()",
                        Line: "37"
                    } ));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Exceptions.DivideByZeroExceptionTests",
                        File: "Batch1\\Exceptions\\DivideByZeroExceptionTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.DOMParserTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DOMParserTests)],
        statics: {
            methods: {
                ConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DOMParserTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DOMParserTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWorks()",
                        Line: "12"
                    } ));
                    t.Fixture.ConstructorWorks();
                },
                XmlParsingWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DOMParserTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DOMParserTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "XmlParsingWorks()",
                        Line: "20"
                    } ));
                    t.Fixture.XmlParsingWorks();
                },
                XmlParsingShouldThrow: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.DOMParserTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DOMParserTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "XmlParsingShouldThrow()",
                        Line: "38"
                    } ));
                    t.Fixture.XmlParsingShouldThrow();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.DOMParserTests",
                        File: "Batch1\\DOMParserTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "30"
                    } ));
                    try {
                        t.Fixture.TypePropertiesAreCorrect();
                    }
                    finally {
                        t.TearDown();
                    }
                },
                DefaultValueIs0: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultValueIs0()",
                        Line: "45"
                    } ));
                    try {
                        t.Fixture.DefaultValueIs0();
                    }
                    finally {
                        t.TearDown();
                    }
                },
                CreatingInstanceReturnsZero: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CreatingInstanceReturnsZero()",
                        Line: "51"
                    } ));
                    try {
                        t.Fixture.CreatingInstanceReturnsZero();
                    }
                    finally {
                        t.TearDown();
                    }
                },
                ConstantsWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstantsWork()",
                        Line: "57"
                    } ));
                    try {
                        t.Fixture.ConstantsWork();
                    }
                    finally {
                        t.TearDown();
                    }
                },
                DefaultConstructorReturnsZero: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorReturnsZero()",
                        Line: "68"
                    } ));
                    try {
                        t.Fixture.DefaultConstructorReturnsZero();
                    }
                    finally {
                        t.TearDown();
                    }
                },
                FormatWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FormatWorks()",
                        Line: "74"
                    } ));
                    try {
                        t.Fixture.FormatWorks();
                    }
                    finally {
                        t.TearDown();
                    }
                },
                IFormattableToStringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IFormattableToStringWorks()",
                        Line: "80"
                    } ));
                    try {
                        t.Fixture.IFormattableToStringWorks();
                    }
                    finally {
                        t.TearDown();
                    }
                },
                ToStringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToStringWorks()",
                        Line: "86"
                    } ));
                    try {
                        t.Fixture.ToStringWorks();
                    }
                    finally {
                        t.TearDown();
                    }
                },
                ToExponentialWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToExponentialWorks()",
                        Line: "92"
                    } ));
                    try {
                        t.Fixture.ToExponentialWorks();
                    }
                    finally {
                        t.TearDown();
                    }
                },
                ToExponentialWithFractionalDigitsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToExponentialWithFractionalDigitsWorks()",
                        Line: "98"
                    } ));
                    try {
                        t.Fixture.ToExponentialWithFractionalDigitsWorks();
                    }
                    finally {
                        t.TearDown();
                    }
                },
                ToFixed: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToFixed()",
                        Line: "104"
                    } ));
                    try {
                        t.Fixture.ToFixed();
                    }
                    finally {
                        t.TearDown();
                    }
                },
                ToFixedWithFractionalDigitsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToFixedWithFractionalDigitsWorks()",
                        Line: "110"
                    } ));
                    try {
                        t.Fixture.ToFixedWithFractionalDigitsWorks();
                    }
                    finally {
                        t.TearDown();
                    }
                },
                ToPrecisionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToPrecisionWorks()",
                        Line: "116"
                    } ));
                    try {
                        t.Fixture.ToPrecisionWorks();
                    }
                    finally {
                        t.TearDown();
                    }
                },
                ToPrecisionWithPrecisionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToPrecisionWithPrecisionWorks()",
                        Line: "122"
                    } ));
                    try {
                        t.Fixture.ToPrecisionWithPrecisionWorks();
                    }
                    finally {
                        t.TearDown();
                    }
                },
                IsPositiveInfinityWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsPositiveInfinityWorks()",
                        Line: "128"
                    } ));
                    try {
                        t.Fixture.IsPositiveInfinityWorks();
                    }
                    finally {
                        t.TearDown();
                    }
                },
                IsNegativeInfinityWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsNegativeInfinityWorks()",
                        Line: "137"
                    } ));
                    try {
                        t.Fixture.IsNegativeInfinityWorks();
                    }
                    finally {
                        t.TearDown();
                    }
                },
                IsInfinityWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsInfinityWorks()",
                        Line: "147"
                    } ));
                    try {
                        t.Fixture.IsInfinityWorks();
                    }
                    finally {
                        t.TearDown();
                    }
                },
                IsFiniteWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsFiniteWorks()",
                        Line: "157"
                    } ));
                    try {
                        t.Fixture.IsFiniteWorks();
                    }
                    finally {
                        t.TearDown();
                    }
                },
                IsNaNWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsNaNWorks()",
                        Line: "166"
                    } ));
                    try {
                        t.Fixture.IsNaNWorks();
                    }
                    finally {
                        t.TearDown();
                    }
                },
                GetHashCodeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetHashCodeWorks()",
                        Line: "175"
                    } ));
                    try {
                        t.Fixture.GetHashCodeWorks();
                    }
                    finally {
                        t.TearDown();
                    }
                },
                ObjectEqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ObjectEqualsWorks()",
                        Line: "184"
                    } ));
                    try {
                        t.Fixture.ObjectEqualsWorks();
                    }
                    finally {
                        t.TearDown();
                    }
                },
                DoubleEqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DoubleEqualsWorks()",
                        Line: "193"
                    } ));
                    try {
                        t.Fixture.DoubleEqualsWorks();
                    }
                    finally {
                        t.TearDown();
                    }
                },
                CompareToWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CompareToWorks()",
                        Line: "202"
                    } ));
                    try {
                        t.Fixture.CompareToWorks();
                    }
                    finally {
                        t.TearDown();
                    }
                },
                IComparableCompareToWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IComparableCompareToWorks()",
                        Line: "211"
                    } ));
                    try {
                        t.Fixture.IComparableCompareToWorks();
                    }
                    finally {
                        t.TearDown();
                    }
                },
                ParseCurrentCultureWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ParseCurrentCultureWorks()",
                        Line: "220"
                    } ));
                    try {
                        t.Fixture.ParseCurrentCultureWorks();
                    }
                    finally {
                        t.TearDown();
                    }
                },
                ParseCurrentCultureThrows: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ParseCurrentCultureThrows()",
                        Line: "241"
                    } ));
                    try {
                        t.Fixture.ParseCurrentCultureThrows();
                    }
                    finally {
                        t.TearDown();
                    }
                },
                ParseRuCultureWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ParseRuCultureWorks()",
                        Line: "259"
                    } ));
                    try {
                        t.Fixture.ParseRuCultureWorks();
                    }
                    finally {
                        t.TearDown();
                    }
                },
                ParseRuCultureThrows: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ParseRuCultureThrows()",
                        Line: "279"
                    } ));
                    try {
                        t.Fixture.ParseRuCultureThrows();
                    }
                    finally {
                        t.TearDown();
                    }
                },
                TryParseCurrentCultureWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TryParseCurrentCultureWorks()",
                        Line: "303"
                    } ));
                    try {
                        t.Fixture.TryParseCurrentCultureWorks();
                    }
                    finally {
                        t.TearDown();
                    }
                },
                TryParseRuCultureWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.DoubleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.DoubleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TryParseRuCultureWorks()",
                        Line: "338"
                    } ));
                    try {
                        t.Fixture.TryParseRuCultureWorks();
                    }
                    finally {
                        t.TearDown();
                    }
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.SimpleTypes.DoubleTests",
                        File: "Batch1\\SimpleTypes\\DoubleTests.cs"
                    } );
                }
                return this.context;
            },
            SetUp: function () {
                this.Fixture.SaveCurrentCulture();
            },
            TearDown: function () {
                this.Fixture.RestoreCulture();
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "29"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultValueOfEnumClassIsNull: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultValueOfEnumClassIsNull()",
                        Line: "52"
                    } ));
                    t.Fixture.DefaultValueOfEnumClassIsNull();
                },
                DefaultValueOfEnumTypeIsFirstValue: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultValueOfEnumTypeIsFirstValue()",
                        Line: "58"
                    } ));
                    t.Fixture.DefaultValueOfEnumTypeIsFirstValue();
                },
                DefaultConstructorOfEnumTypeReturnsZero: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorOfEnumTypeReturnsZero()",
                        Line: "64"
                    } ));
                    t.Fixture.DefaultConstructorOfEnumTypeReturnsZero();
                },
                FirstValueOfEnumIsZero: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FirstValueOfEnumIsZero()",
                        Line: "70"
                    } ));
                    t.Fixture.FirstValueOfEnumIsZero();
                },
                CreatingInstanceOfEnumTypeReturnsZero: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CreatingInstanceOfEnumTypeReturnsZero()",
                        Line: "76"
                    } ));
                    t.Fixture.CreatingInstanceOfEnumTypeReturnsZero();
                },
                DefaultExpressionWithEnumReturnsZero: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultExpressionWithEnumReturnsZero()",
                        Line: "82"
                    } ));
                    t.Fixture.DefaultExpressionWithEnumReturnsZero();
                },
                GetHashCodeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetHashCodeWorks()",
                        Line: "88"
                    } ));
                    t.Fixture.GetHashCodeWorks();
                },
                EqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EqualsWorks()",
                        Line: "95"
                    } ));
                    t.Fixture.EqualsWorks();
                },
                ParseWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ParseWorks()",
                        Line: "103"
                    } ));
                    t.Fixture.ParseWorks();
                },
                StaticToStringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StaticToStringWorks()",
                        Line: "111"
                    } ));
                    t.Fixture.StaticToStringWorks();
                },
                ConversionsToEnumAreTreatedAsConversionsToTheUnderlyingType: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConversionsToEnumAreTreatedAsConversionsToTheUnderlyingType()",
                        Line: "120"
                    } ));
                    t.Fixture.ConversionsToEnumAreTreatedAsConversionsToTheUnderlyingType();
                },
                GetValuesWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.EnumTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnumTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetValuesWorks()",
                        Line: "128"
                    } ));
                    t.Fixture.GetValuesWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.SimpleTypes.EnumTests",
                        File: "Batch1\\SimpleTypes\\EnumTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests)],
        statics: {
            methods: {
                CommandLineNotEmpty: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CommandLineNotEmpty()",
                        Line: "40"
                    } ));
                    t.Fixture.CommandLineNotEmpty();
                },
                CurrentDirectoryNotEmpty: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CurrentDirectoryNotEmpty()",
                        Line: "47"
                    } ));
                    t.Fixture.CurrentDirectoryNotEmpty();
                },
                CurrentManagedThreadIdZero: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CurrentManagedThreadIdZero()",
                        Line: "54"
                    } ));
                    t.Fixture.CurrentManagedThreadIdZero();
                },
                ExitCodeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ExitCodeWorks()",
                        Line: "60"
                    } ));
                    t.Fixture.ExitCodeWorks();
                },
                HasShutdownStartedFalse: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "HasShutdownStartedFalse()",
                        Line: "70"
                    } ));
                    t.Fixture.HasShutdownStartedFalse();
                },
                Is64BitOperatingSystemNotNull: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Is64BitOperatingSystemNotNull()",
                        Line: "77"
                    } ));
                    t.Fixture.Is64BitOperatingSystemNotNull();
                },
                Is64BitProcessNotNull: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Is64BitProcessNotNull()",
                        Line: "83"
                    } ));
                    t.Fixture.Is64BitProcessNotNull();
                },
                MachineNameEmpty: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MachineNameEmpty()",
                        Line: "89"
                    } ));
                    t.Fixture.MachineNameEmpty();
                },
                NewLineIsAStringContainingOnlyTheNewLineChar: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NewLineIsAStringContainingOnlyTheNewLineChar()",
                        Line: "96"
                    } ));
                    t.Fixture.NewLineIsAStringContainingOnlyTheNewLineChar();
                },
                OSVersionNull: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "OSVersionNull()",
                        Line: "102"
                    } ));
                    t.Fixture.OSVersionNull();
                },
                ProcessorCountMoreThanZero: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ProcessorCountMoreThanZero()",
                        Line: "108"
                    } ));
                    t.Fixture.ProcessorCountMoreThanZero();
                },
                StackTraceNotEmpty: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StackTraceNotEmpty()",
                        Line: "115"
                    } ));
                    t.Fixture.StackTraceNotEmpty();
                },
                SystemDirectoryEmpty: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SystemDirectoryEmpty()",
                        Line: "122"
                    } ));
                    t.Fixture.SystemDirectoryEmpty();
                },
                SystemPageSizeEqualsOne: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SystemPageSizeEqualsOne()",
                        Line: "128"
                    } ));
                    t.Fixture.SystemPageSizeEqualsOne();
                },
                TickCountNotEmpty: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TickCountNotEmpty()",
                        Line: "134"
                    } ));
                    t.Fixture.TickCountNotEmpty();
                },
                UserDomainNameEmpty: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "UserDomainNameEmpty()",
                        Line: "142"
                    } ));
                    t.Fixture.UserDomainNameEmpty();
                },
                UserInteractiveTrue: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "UserInteractiveTrue()",
                        Line: "148"
                    } ));
                    t.Fixture.UserInteractiveTrue();
                },
                UserNameEmpty: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "UserNameEmpty()",
                        Line: "155"
                    } ));
                    t.Fixture.UserNameEmpty();
                },
                VersionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "VersionWorks()",
                        Line: "161"
                    } ));
                    t.Fixture.VersionWorks();
                },
                WorkingSetZero: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "WorkingSetZero()",
                        Line: "168"
                    } ));
                    t.Fixture.WorkingSetZero();
                },
                ExitSetsExitCode: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ExitSetsExitCode()",
                        Line: "176"
                    } ));
                    t.Fixture.ExitSetsExitCode();
                },
                ExpandEnvironmentVariablesWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ExpandEnvironmentVariablesWorks()",
                        Line: "184"
                    } ));
                    t.Fixture.ExpandEnvironmentVariablesWorks();
                },
                FailFastWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FailFastWorks()",
                        Line: "199"
                    } ));
                    t.Fixture.FailFastWorks();
                },
                GetCommandLineArgsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetCommandLineArgsWorks()",
                        Line: "223"
                    } ));
                    t.Fixture.GetCommandLineArgsWorks();
                },
                GetEnvironmentVariableOneParameterWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetEnvironmentVariableOneParameterWorks()",
                        Line: "235"
                    } ));
                    t.Fixture.GetEnvironmentVariableOneParameterWorks();
                },
                GetEnvironmentVariableRwoParametersWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetEnvironmentVariableRwoParametersWorks()",
                        Line: "254"
                    } ));
                    t.Fixture.GetEnvironmentVariableRwoParametersWorks();
                },
                GetEnvironmentVariablesWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetEnvironmentVariablesWorks()",
                        Line: "274"
                    } ));
                    t.Fixture.GetEnvironmentVariablesWorks();
                },
                GetEnvironmentVariablesOneParameterWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetEnvironmentVariablesOneParameterWorks()",
                        Line: "294"
                    } ));
                    t.Fixture.GetEnvironmentVariablesOneParameterWorks();
                },
                GetFolderPathOneParameterEmpty: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetFolderPathOneParameterEmpty()",
                        Line: "315"
                    } ));
                    t.Fixture.GetFolderPathOneParameterEmpty();
                },
                GetFolderPathTwoParametersEmpty: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetFolderPathTwoParametersEmpty()",
                        Line: "321"
                    } ));
                    t.Fixture.GetFolderPathTwoParametersEmpty();
                },
                GetLogicalDrivesEmpty: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetLogicalDrivesEmpty()",
                        Line: "328"
                    } ));
                    t.Fixture.GetLogicalDrivesEmpty();
                },
                SetEnvironmentVariableTwoParametersWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetEnvironmentVariableTwoParametersWorks()",
                        Line: "336"
                    } ));
                    t.Fixture.SetEnvironmentVariableTwoParametersWorks();
                },
                SetEnvironmentVariableThreeParametersWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.EnvironmentTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EnvironmentTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetEnvironmentVariableThreeParametersWorks()",
                        Line: "364"
                    } ));
                    t.Fixture.SetEnvironmentVariableThreeParametersWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.EnvironmentTests",
                        File: "Batch1\\EnvironmentTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.EqualityComparerTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.EqualityComparerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "28"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultComparerCanGetHashCodeOfNumber: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.EqualityComparerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultComparerCanGetHashCodeOfNumber()",
                        Line: "37"
                    } ));
                    t.Fixture.DefaultComparerCanGetHashCodeOfNumber();
                },
                DefaultComparerReturnsZeroAsHashCodeForNullAndUndefined: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.EqualityComparerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultComparerReturnsZeroAsHashCodeForNullAndUndefined()",
                        Line: "43"
                    } ));
                    t.Fixture.DefaultComparerReturnsZeroAsHashCodeForNullAndUndefined();
                },
                DefaultComparerCanDetermineEquality: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.EqualityComparerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultComparerCanDetermineEquality()",
                        Line: "50"
                    } ));
                    t.Fixture.DefaultComparerCanDetermineEquality();
                },
                DefaultComparerInvokesOverriddenGetHashCode: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.EqualityComparerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultComparerInvokesOverriddenGetHashCode()",
                        Line: "64"
                    } ));
                    t.Fixture.DefaultComparerInvokesOverriddenGetHashCode();
                },
                DefaultComparerInvokesOverriddenEquals: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.EqualityComparerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.EqualityComparerTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultComparerInvokesOverriddenEquals()",
                        Line: "70"
                    } ));
                    t.Fixture.DefaultComparerInvokesOverriddenEquals();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Collections.Generic.EqualityComparerTests",
                        File: "Batch1\\Collections\\Generic\\EqualityComparerTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "25"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorWorks()",
                        Line: "33"
                    } ));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithMessageWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageWorks()",
                        Line: "42"
                    } ));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageAndInnerExceptionWorks()",
                        Line: "51"
                    } ));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                },
                MessagePropertyCanBeOverridden: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MessagePropertyCanBeOverridden()",
                        Line: "61"
                    } ));
                    t.Fixture.MessagePropertyCanBeOverridden();
                },
                InnerExceptionPropertyCanBeOverridden: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.ExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InnerExceptionPropertyCanBeOverridden()",
                        Line: "68"
                    } ));
                    t.Fixture.InnerExceptionPropertyCanBeOverridden();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Exceptions.ExceptionTests",
                        File: "Batch1\\Exceptions\\ExceptionTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests)],
        statics: {
            methods: {
                ExpressionProtectedConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ExpressionProtectedConstructorWorks()",
                        Line: "336"
                    } ));
                    t.Fixture.ExpressionProtectedConstructorWorks();
                },
                SimpleExpressionTreeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SimpleExpressionTreeWorks()",
                        Line: "344"
                    } ));
                    t.Fixture.SimpleExpressionTreeWorks();
                },
                LambdaWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LambdaWorks()",
                        Line: "356"
                    } ));
                    t.Fixture.LambdaWorks();
                },
                ParameterAndVariableWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ParameterAndVariableWork()",
                        Line: "392"
                    } ));
                    t.Fixture.ParameterAndVariableWork();
                },
                ConstantWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstantWorks()",
                        Line: "419"
                    } ));
                    t.Fixture.ConstantWorks();
                },
                BinaryExpressionsWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "BinaryExpressionsWork()",
                        Line: "442"
                    } ));
                    t.Fixture.BinaryExpressionsWork();
                },
                UnaryExpressionsWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "UnaryExpressionsWork()",
                        Line: "717"
                    } ));
                    t.Fixture.UnaryExpressionsWork();
                },
                ArrayLengthWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayLengthWorks()",
                        Line: "834"
                    } ));
                    t.Fixture.ArrayLengthWorks();
                },
                ConversionsWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConversionsWork()",
                        Line: "853"
                    } ));
                    t.Fixture.ConversionsWork();
                },
                ArrayIndexWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayIndexWorks()",
                        Line: "908"
                    } ));
                    t.Fixture.ArrayIndexWorks();
                },
                MultiDimensionalArrayIndexWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MultiDimensionalArrayIndexWorks()",
                        Line: "929"
                    } ));
                    t.Fixture.MultiDimensionalArrayIndexWorks();
                },
                ConditionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConditionWorks()",
                        Line: "963"
                    } ));
                    t.Fixture.ConditionWorks();
                },
                CallWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CallWorks()",
                        Line: "986"
                    } ));
                    t.Fixture.CallWorks();
                },
                MethodGroupConversionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MethodGroupConversionWorks()",
                        Line: "1037"
                    } ));
                    t.Fixture.MethodGroupConversionWorks();
                },
                InvokeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InvokeWorks()",
                        Line: "1059"
                    } ));
                    t.Fixture.InvokeWorks();
                },
                ArrayCreationWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayCreationWorks()",
                        Line: "1085"
                    } ));
                    t.Fixture.ArrayCreationWorks();
                },
                PropertiesAndFieldsWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PropertiesAndFieldsWork()",
                        Line: "1147"
                    } ));
                    t.Fixture.PropertiesAndFieldsWork();
                },
                IndexersWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexersWork()",
                        Line: "1202"
                    } ));
                    t.Fixture.IndexersWork();
                },
                IndexExpressionsWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexExpressionsWork()",
                        Line: "1218"
                    } ));
                    t.Fixture.IndexExpressionsWork();
                },
                ObjectConstructionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ObjectConstructionWorks()",
                        Line: "1254"
                    } ));
                    t.Fixture.ObjectConstructionWorks();
                },
                AnonymousTypeConstructionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AnonymousTypeConstructionWorks()",
                        Line: "1297"
                    } ));
                    t.Fixture.AnonymousTypeConstructionWorks();
                },
                TransparentIdentifiersWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TransparentIdentifiersWork()",
                        Line: "1352"
                    } ));
                    t.Fixture.TransparentIdentifiersWork();
                },
                NewExpressionWithMembersWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NewExpressionWithMembersWork()",
                        Line: "1395"
                    } ));
                    t.Fixture.NewExpressionWithMembersWork();
                },
                BindWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "BindWorks()",
                        Line: "1425"
                    } ));
                    t.Fixture.BindWorks();
                },
                ElementInitWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ElementInitWorks()",
                        Line: "1470"
                    } ));
                    t.Fixture.ElementInitWorks();
                },
                ListBindWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ListBindWorks()",
                        Line: "1502"
                    } ));
                    t.Fixture.ListBindWorks();
                },
                MemberBindWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MemberBindWorks()",
                        Line: "1567"
                    } ));
                    t.Fixture.MemberBindWorks();
                },
                MemberInitWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MemberInitWorks()",
                        Line: "1629"
                    } ));
                    t.Fixture.MemberInitWorks();
                },
                ListInitWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ListInitWorks()",
                        Line: "1665"
                    } ));
                    t.Fixture.ListInitWorks();
                },
                TypeIsAndTypeEqualWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypeIsAndTypeEqualWork()",
                        Line: "1719"
                    } ));
                    t.Fixture.TypeIsAndTypeEqualWork();
                },
                QuoteWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "QuoteWorks()",
                        Line: "1747"
                    } ));
                    t.Fixture.QuoteWorks();
                },
                LocalVariableReferenceWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LocalVariableReferenceWorks()",
                        Line: "1772"
                    } ));
                    t.Fixture.LocalVariableReferenceWorks();
                },
                ThrowAndRethrowWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ThrowAndRethrowWork()",
                        Line: "1824"
                    } ));
                    t.Fixture.ThrowAndRethrowWork();
                },
                DefaultAndEmptyWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultAndEmptyWork()",
                        Line: "1856"
                    } ));
                    t.Fixture.DefaultAndEmptyWork();
                },
                BlockWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "BlockWorks()",
                        Line: "1873"
                    } ));
                    t.Fixture.BlockWorks();
                },
                IfThenWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IfThenWorks()",
                        Line: "1932"
                    } ));
                    t.Fixture.IfThenWorks();
                },
                LabelTargetWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LabelTargetWorks()",
                        Line: "1960"
                    } ));
                    t.Fixture.LabelTargetWorks();
                },
                GotoWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GotoWorks()",
                        Line: "1978"
                    } ));
                    t.Fixture.GotoWorks();
                },
                LabelExpressionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LabelExpressionWorks()",
                        Line: "2030"
                    } ));
                    t.Fixture.LabelExpressionWorks();
                },
                LoopWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LoopWorks()",
                        Line: "2061"
                    } ));
                    t.Fixture.LoopWorks();
                },
                SwitchCaseWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SwitchCaseWorks()",
                        Line: "2104"
                    } ));
                    t.Fixture.SwitchCaseWorks();
                },
                SwitchWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SwitchWorks()",
                        Line: "2125"
                    } ));
                    t.Fixture.SwitchWorks();
                },
                CatchBlockWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CatchBlockWorks()",
                        Line: "2170"
                    } ));
                    t.Fixture.CatchBlockWorks();
                },
                TryWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TryWorks()",
                        Line: "2200"
                    } ));
                    t.Fixture.TryWorks();
                },
                DynamicWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.Expressions.ExpressionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ExpressionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DynamicWorks()",
                        Line: "2246"
                    } ));
                    t.Fixture.DynamicWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Linq.Expressions.ExpressionTests",
                        File: "Batch1\\Linq\\Expressions\\ExpressionTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests)],
        statics: {
            methods: {
                LengthConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LengthConstructorWorks()",
                        Line: "30"
                    } ));
                    t.Fixture.LengthConstructorWorks();
                },
                ConstructorFromIntWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorFromIntWorks()",
                        Line: "38"
                    } ));
                    t.Fixture.ConstructorFromIntWorks();
                },
                CopyConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CopyConstructorWorks()",
                        Line: "48"
                    } ));
                    t.Fixture.CopyConstructorWorks();
                },
                ArrayBufferConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayBufferConstructorWorks()",
                        Line: "58"
                    } ));
                    t.Fixture.ArrayBufferConstructorWorks();
                },
                ArrayBufferWithOffsetConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayBufferWithOffsetConstructorWorks()",
                        Line: "68"
                    } ));
                    t.Fixture.ArrayBufferWithOffsetConstructorWorks();
                },
                ArrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayBufferWithOffsetAndLengthConstructorWorks()",
                        Line: "78"
                    } ));
                    t.Fixture.ArrayBufferWithOffsetAndLengthConstructorWorks();
                },
                StaticBytesPerElementWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StaticBytesPerElementWorks()",
                        Line: "95"
                    } ));
                    t.Fixture.StaticBytesPerElementWorks();
                },
                LengthWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LengthWorks()",
                        Line: "101"
                    } ));
                    t.Fixture.LengthWorks();
                },
                IndexingWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexingWorks()",
                        Line: "108"
                    } ));
                    t.Fixture.IndexingWorks();
                },
                SetFloat32ArrayWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetFloat32ArrayWorks()",
                        Line: "117"
                    } ));
                    t.Fixture.SetFloat32ArrayWorks();
                },
                SetFloat32ArrayWithOffsetWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetFloat32ArrayWithOffsetWorks()",
                        Line: "125"
                    } ));
                    t.Fixture.SetFloat32ArrayWithOffsetWorks();
                },
                SetNormalArrayWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetNormalArrayWorks()",
                        Line: "133"
                    } ));
                    t.Fixture.SetNormalArrayWorks();
                },
                SetNormalArrayWithOffsetWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetNormalArrayWithOffsetWorks()",
                        Line: "141"
                    } ));
                    t.Fixture.SetNormalArrayWithOffsetWorks();
                },
                SubarrayWithBeginWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SubarrayWithBeginWorks()",
                        Line: "149"
                    } ));
                    t.Fixture.SubarrayWithBeginWorks();
                },
                SubarrayWithBeginAndEndWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SubarrayWithBeginAndEndWorks()",
                        Line: "159"
                    } ));
                    t.Fixture.SubarrayWithBeginAndEndWorks();
                },
                BufferPropertyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "BufferPropertyWorks()",
                        Line: "170"
                    } ));
                    t.Fixture.BufferPropertyWorks();
                },
                ByteOffsetPropertyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ByteOffsetPropertyWorks()",
                        Line: "178"
                    } ));
                    t.Fixture.ByteOffsetPropertyWorks();
                },
                ByteLengthPropertyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ByteLengthPropertyWorks()",
                        Line: "186"
                    } ));
                    t.Fixture.ByteLengthPropertyWorks();
                },
                IndexOfWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexOfWorks()",
                        Line: "193"
                    } ));
                    t.Fixture.IndexOfWorks();
                },
                ContainsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ContainsWorks()",
                        Line: "202"
                    } ));
                    t.Fixture.ContainsWorks();
                },
                ForeachWorks_SPI_1401: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ForeachWorks_SPI_1401()",
                        Line: "211"
                    } ));
                    t.Fixture.ForeachWorks_SPI_1401();
                },
                GetEnumeratorWorks_SPI_1401: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetEnumeratorWorks_SPI_1401()",
                        Line: "225"
                    } ));
                    t.Fixture.GetEnumeratorWorks_SPI_1401();
                },
                IEnumerableGetEnumeratorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IEnumerableGetEnumeratorWorks()",
                        Line: "239"
                    } ));
                    t.Fixture.IEnumerableGetEnumeratorWorks();
                },
                ICollectionMethodsWork_SPI_1559: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionMethodsWork_SPI_1559()",
                        Line: "252"
                    } ));
                    t.Fixture.ICollectionMethodsWork_SPI_1559();
                },
                IListMethodsWork_SPI_1559: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IListMethodsWork_SPI_1559()",
                        Line: "265"
                    } ));
                    t.Fixture.IListMethodsWork_SPI_1559();
                },
                IListIsReadOnlyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IListIsReadOnlyWorks()",
                        Line: "298"
                    } ));
                    t.Fixture.IListIsReadOnlyWorks();
                },
                ICollectionIsReadOnlyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionIsReadOnlyWorks()",
                        Line: "305"
                    } ));
                    t.Fixture.ICollectionIsReadOnlyWorks();
                },
                ICollectionCopyTo: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionCopyTo()",
                        Line: "312"
                    } ));
                    t.Fixture.ICollectionCopyTo();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Collections.Native.Float32ArrayTests",
                        File: "Batch1\\Collections\\Native\\Float32ArrayTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests)],
        statics: {
            methods: {
                LengthConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LengthConstructorWorks()",
                        Line: "30"
                    } ));
                    t.Fixture.LengthConstructorWorks();
                },
                ConstructorFromIntWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorFromIntWorks()",
                        Line: "38"
                    } ));
                    t.Fixture.ConstructorFromIntWorks();
                },
                CopyConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CopyConstructorWorks()",
                        Line: "48"
                    } ));
                    t.Fixture.CopyConstructorWorks();
                },
                ArrayBufferConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayBufferConstructorWorks()",
                        Line: "58"
                    } ));
                    t.Fixture.ArrayBufferConstructorWorks();
                },
                ArrayBufferWithOffsetConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayBufferWithOffsetConstructorWorks()",
                        Line: "68"
                    } ));
                    t.Fixture.ArrayBufferWithOffsetConstructorWorks();
                },
                ArrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayBufferWithOffsetAndLengthConstructorWorks()",
                        Line: "78"
                    } ));
                    t.Fixture.ArrayBufferWithOffsetAndLengthConstructorWorks();
                },
                StaticBytesPerElementWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StaticBytesPerElementWorks()",
                        Line: "95"
                    } ));
                    t.Fixture.StaticBytesPerElementWorks();
                },
                LengthWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LengthWorks()",
                        Line: "101"
                    } ));
                    t.Fixture.LengthWorks();
                },
                IndexingWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexingWorks()",
                        Line: "108"
                    } ));
                    t.Fixture.IndexingWorks();
                },
                SetFloat64ArrayWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetFloat64ArrayWorks()",
                        Line: "117"
                    } ));
                    t.Fixture.SetFloat64ArrayWorks();
                },
                SetFloat64ArrayWithOffsetWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetFloat64ArrayWithOffsetWorks()",
                        Line: "125"
                    } ));
                    t.Fixture.SetFloat64ArrayWithOffsetWorks();
                },
                SetNormalArrayWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetNormalArrayWorks()",
                        Line: "133"
                    } ));
                    t.Fixture.SetNormalArrayWorks();
                },
                SetNormalArrayWithOffsetWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetNormalArrayWithOffsetWorks()",
                        Line: "141"
                    } ));
                    t.Fixture.SetNormalArrayWithOffsetWorks();
                },
                SubarrayWithBeginWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SubarrayWithBeginWorks()",
                        Line: "149"
                    } ));
                    t.Fixture.SubarrayWithBeginWorks();
                },
                SubarrayWithBeginAndEndWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SubarrayWithBeginAndEndWorks()",
                        Line: "159"
                    } ));
                    t.Fixture.SubarrayWithBeginAndEndWorks();
                },
                BufferPropertyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "BufferPropertyWorks()",
                        Line: "170"
                    } ));
                    t.Fixture.BufferPropertyWorks();
                },
                ByteOffsetPropertyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ByteOffsetPropertyWorks()",
                        Line: "178"
                    } ));
                    t.Fixture.ByteOffsetPropertyWorks();
                },
                ByteLengthPropertyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ByteLengthPropertyWorks()",
                        Line: "186"
                    } ));
                    t.Fixture.ByteLengthPropertyWorks();
                },
                IndexOfWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexOfWorks()",
                        Line: "193"
                    } ));
                    t.Fixture.IndexOfWorks();
                },
                ContainsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ContainsWorks()",
                        Line: "202"
                    } ));
                    t.Fixture.ContainsWorks();
                },
                ForeachWorks_SPI_1401: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ForeachWorks_SPI_1401()",
                        Line: "211"
                    } ));
                    t.Fixture.ForeachWorks_SPI_1401();
                },
                GetEnumeratorWorks_SPI_1401: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetEnumeratorWorks_SPI_1401()",
                        Line: "225"
                    } ));
                    t.Fixture.GetEnumeratorWorks_SPI_1401();
                },
                IEnumerableGetEnumeratorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IEnumerableGetEnumeratorWorks()",
                        Line: "239"
                    } ));
                    t.Fixture.IEnumerableGetEnumeratorWorks();
                },
                ICollectionMethodsWork_SPI_1559: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionMethodsWork_SPI_1559()",
                        Line: "252"
                    } ));
                    t.Fixture.ICollectionMethodsWork_SPI_1559();
                },
                IListMethodsWork_SPI_1559: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IListMethodsWork_SPI_1559()",
                        Line: "265"
                    } ));
                    t.Fixture.IListMethodsWork_SPI_1559();
                },
                IListIsReadOnlyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IListIsReadOnlyWorks()",
                        Line: "298"
                    } ));
                    t.Fixture.IListIsReadOnlyWorks();
                },
                ICollectionIsReadOnlyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionIsReadOnlyWorks()",
                        Line: "305"
                    } ));
                    t.Fixture.ICollectionIsReadOnlyWorks();
                },
                ICollectionCopyTo: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Float64ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Float64ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionCopyTo()",
                        Line: "312"
                    } ));
                    t.Fixture.ICollectionCopyTo();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Collections.Native.Float64ArrayTests",
                        File: "Batch1\\Collections\\Native\\Float64ArrayTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.FormatExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.FormatExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.FormatExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FormatExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "10"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.FormatExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FormatExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorWorks()",
                        Line: "19"
                    } ));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithMessageWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.FormatExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FormatExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageWorks()",
                        Line: "28"
                    } ));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.FormatExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FormatExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageAndInnerExceptionWorks()",
                        Line: "37"
                    } ));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Exceptions.FormatExceptionTests",
                        File: "Batch1\\Exceptions\\FormatExceptionTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FormattableStringTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FormattableStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "29"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                ArgumentCountWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FormattableStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArgumentCountWorks()",
                        Line: "43"
                    } ));
                    t.Fixture.ArgumentCountWorks();
                },
                FormatWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FormattableStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FormatWorks()",
                        Line: "52"
                    } ));
                    t.Fixture.FormatWorks();
                },
                GetArgumentWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FormattableStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetArgumentWorks()",
                        Line: "59"
                    } ));
                    t.Fixture.GetArgumentWorks();
                },
                GetArgumentsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FormattableStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetArgumentsWorks()",
                        Line: "67"
                    } ));
                    t.Fixture.GetArgumentsWorks();
                },
                ArrayReturnedByGetArgumentsCanBeModified: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FormattableStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayReturnedByGetArgumentsCanBeModified()",
                        Line: "76"
                    } ));
                    t.Fixture.ArrayReturnedByGetArgumentsCanBeModified();
                },
                ToStringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FormattableStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToStringWorks()",
                        Line: "88"
                    } ));
                    t.Fixture.ToStringWorks();
                },
                InvariantWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FormattableStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FormattableStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InvariantWorks()",
                        Line: "112"
                    } ));
                    t.Fixture.InvariantWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.FormattableStringTests",
                        File: "Batch1\\FormattableStringTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.FunctionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FunctionTests)],
        statics: {
            methods: {
                TestConstructorArgumentsBodyInOneParameter: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FunctionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FunctionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestConstructorArgumentsBodyInOneParameter()",
                        Line: "20"
                    } ));
                    t.Fixture.TestConstructorArgumentsBodyInOneParameter();
                },
                TestConstructorArgumentsBodyInTwoParameters: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FunctionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FunctionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestConstructorArgumentsBodyInTwoParameters()",
                        Line: "28"
                    } ));
                    t.Fixture.TestConstructorArgumentsBodyInTwoParameters();
                },
                TestConstructorArgumentsInArray: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.FunctionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.FunctionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestConstructorArgumentsInArray()",
                        Line: "36"
                    } ));
                    t.Fixture.TestConstructorArgumentsInArray();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.FunctionTests",
                        File: "Batch1\\FunctionTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "25"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorWorks()",
                        Line: "38"
                    } ));
                    t.Fixture.DefaultConstructorWorks();
                },
                CapacityConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CapacityConstructorWorks()",
                        Line: "47"
                    } ));
                    t.Fixture.CapacityConstructorWorks();
                },
                CapacityAndEqualityComparerWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CapacityAndEqualityComparerWorks()",
                        Line: "56"
                    } ));
                    t.Fixture.CapacityAndEqualityComparerWorks();
                },
                EqualityComparerOnlyConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EqualityComparerOnlyConstructorWorks()",
                        Line: "65"
                    } ));
                    t.Fixture.EqualityComparerOnlyConstructorWorks();
                },
                CountWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CountWorks()",
                        Line: "74"
                    } ));
                    t.Fixture.CountWorks();
                },
                KeysWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "KeysWorks()",
                        Line: "85"
                    } ));
                    t.Fixture.KeysWorks();
                },
                ValuesWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ValuesWorks()",
                        Line: "112"
                    } ));
                    t.Fixture.ValuesWorks();
                },
                IndexerGetterWorksForExistingItems: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexerGetterWorksForExistingItems()",
                        Line: "136"
                    } ));
                    t.Fixture.IndexerGetterWorksForExistingItems();
                },
                IndexerSetterWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexerSetterWorks()",
                        Line: "143"
                    } ));
                    t.Fixture.IndexerSetterWorks();
                },
                IndexerGetterThrowsForNonExistingItems: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexerGetterThrowsForNonExistingItems()",
                        Line: "155"
                    } ));
                    t.Fixture.IndexerGetterThrowsForNonExistingItems();
                },
                AddWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AddWorks()",
                        Line: "169"
                    } ));
                    t.Fixture.AddWorks();
                },
                AddThrowsIfItemAlreadyExists: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AddThrowsIfItemAlreadyExists()",
                        Line: "180"
                    } ));
                    t.Fixture.AddThrowsIfItemAlreadyExists();
                },
                ClearWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClearWorks()",
                        Line: "194"
                    } ));
                    t.Fixture.ClearWorks();
                },
                ContainsKeyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ContainsKeyWorks()",
                        Line: "202"
                    } ));
                    t.Fixture.ContainsKeyWorks();
                },
                EnumeratingWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EnumeratingWorks()",
                        Line: "210"
                    } ));
                    t.Fixture.EnumeratingWorks();
                },
                RemoveWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RemoveWorks()",
                        Line: "234"
                    } ));
                    t.Fixture.RemoveWorks();
                },
                TryGetValueWithIntKeysWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TryGetValueWithIntKeysWorks()",
                        Line: "244"
                    } ));
                    t.Fixture.TryGetValueWithIntKeysWorks();
                },
                TryGetValueWithObjectKeysWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TryGetValueWithObjectKeysWorks()",
                        Line: "256"
                    } ));
                    t.Fixture.TryGetValueWithObjectKeysWorks();
                },
                CanUseCustomComparer: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CanUseCustomComparer()",
                        Line: "268"
                    } ));
                    t.Fixture.CanUseCustomComparer();
                },
                DictionaryAsIEnumerableWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DictionaryAsIEnumerableWorks()",
                        Line: "277"
                    } ));
                    t.Fixture.DictionaryAsIEnumerableWorks();
                },
                DictionaryAsICollectionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DictionaryAsICollectionWorks()",
                        Line: "302"
                    } ));
                    t.Fixture.DictionaryAsICollectionWorks();
                },
                DictionaryAsIDictionaryWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DictionaryAsIDictionaryWorks()",
                        Line: "365"
                    } ));
                    t.Fixture.DictionaryAsIDictionaryWorks();
                },
                DictionaryAsIReadOnlyDictionaryWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DictionaryAsIReadOnlyDictionaryWorks()",
                        Line: "500"
                    } ));
                    t.Fixture.DictionaryAsIReadOnlyDictionaryWorks();
                },
                DictionaryAsIReadOnlyCollectionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.GenericDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GenericDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DictionaryAsIReadOnlyCollectionWorks()",
                        Line: "565"
                    } ));
                    t.Fixture.DictionaryAsIReadOnlyCollectionWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Collections.Generic.GenericDictionaryTests",
                        File: "Batch1\\Collections\\Generic\\GenericDictionaryTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests)],
        statics: {
            methods: {
                GetMembersWithoutBindingFlagsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetMembersWithoutBindingFlagsWorks()",
                        Line: "627"
                    } ));
                    t.Fixture.GetMembersWithoutBindingFlagsWorks();
                },
                GetMembersWorksForInterface: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetMembersWorksForInterface()",
                        Line: "637"
                    } ));
                    t.Fixture.GetMembersWorksForInterface();
                },
                GetMembersWithBindingFlagsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetMembersWithBindingFlagsWorks()",
                        Line: "645"
                    } ));
                    t.Fixture.GetMembersWithBindingFlagsWorks();
                },
                GetMemberWithNameWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetMemberWithNameWorks()",
                        Line: "683"
                    } ));
                    t.Fixture.GetMemberWithNameWorks();
                },
                GetMemberWithNameAndBindingFlagsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetMemberWithNameAndBindingFlagsWorks()",
                        Line: "693"
                    } ));
                    t.Fixture.GetMemberWithNameAndBindingFlagsWorks();
                },
                GetConstructorsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetConstructorsWorks()",
                        Line: "708"
                    } ));
                    t.Fixture.GetConstructorsWorks();
                },
                GetConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetConstructorWorks()",
                        Line: "714"
                    } ));
                    t.Fixture.GetConstructorWorks();
                },
                GetMethodsWithoutBindingFlagsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetMethodsWithoutBindingFlagsWorks()",
                        Line: "722"
                    } ));
                    t.Fixture.GetMethodsWithoutBindingFlagsWorks();
                },
                GetMethodsWithBindingFlagsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetMethodsWithBindingFlagsWorks()",
                        Line: "732"
                    } ));
                    t.Fixture.GetMethodsWithBindingFlagsWorks();
                },
                GetMethodWithNameWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetMethodWithNameWorks()",
                        Line: "770"
                    } ));
                    t.Fixture.GetMethodWithNameWorks();
                },
                GetMethodWithNameAndBindingFlagsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetMethodWithNameAndBindingFlagsWorks()",
                        Line: "786"
                    } ));
                    t.Fixture.GetMethodWithNameAndBindingFlagsWorks();
                },
                GetMethodWithNameAndArgumentTypesWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetMethodWithNameAndArgumentTypesWorks()",
                        Line: "814"
                    } ));
                    t.Fixture.GetMethodWithNameAndArgumentTypesWorks();
                },
                GetMethodWithNameAndArgumentTypesAndBindingFlagsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetMethodWithNameAndArgumentTypesAndBindingFlagsWorks()",
                        Line: "829"
                    } ));
                    t.Fixture.GetMethodWithNameAndArgumentTypesAndBindingFlagsWorks();
                },
                GetPropertiesWithoutBindingFlagsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetPropertiesWithoutBindingFlagsWorks()",
                        Line: "849"
                    } ));
                    t.Fixture.GetPropertiesWithoutBindingFlagsWorks();
                },
                GetPropertiesWithBindingFlagsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetPropertiesWithBindingFlagsWorks()",
                        Line: "859"
                    } ));
                    t.Fixture.GetPropertiesWithBindingFlagsWorks();
                },
                GetPropertyWithNameWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetPropertyWithNameWorks()",
                        Line: "897"
                    } ));
                    t.Fixture.GetPropertyWithNameWorks();
                },
                GetPropertyWithNameAndBindingFlagsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetPropertyWithNameAndBindingFlagsWorks()",
                        Line: "909"
                    } ));
                    t.Fixture.GetPropertyWithNameAndBindingFlagsWorks();
                },
                GetPropertyWithNameAndArgumentTypesWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetPropertyWithNameAndArgumentTypesWorks()",
                        Line: "929"
                    } ));
                    t.Fixture.GetPropertyWithNameAndArgumentTypesWorks();
                },
                GetPropertyWithNameAndArgumentTypesAndBindingFlagsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetPropertyWithNameAndArgumentTypesAndBindingFlagsWorks()",
                        Line: "940"
                    } ));
                    t.Fixture.GetPropertyWithNameAndArgumentTypesAndBindingFlagsWorks();
                },
                GetFieldsWithoutBindingFlagsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetFieldsWithoutBindingFlagsWorks()",
                        Line: "956"
                    } ));
                    t.Fixture.GetFieldsWithoutBindingFlagsWorks();
                },
                GetFieldsWithBindingFlagsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetFieldsWithBindingFlagsWorks()",
                        Line: "966"
                    } ));
                    t.Fixture.GetFieldsWithBindingFlagsWorks();
                },
                GetFieldWithNameWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetFieldWithNameWorks()",
                        Line: "1004"
                    } ));
                    t.Fixture.GetFieldWithNameWorks();
                },
                GetFieldWithNameAndBindingFlagsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetFieldWithNameAndBindingFlagsWorks()",
                        Line: "1014"
                    } ));
                    t.Fixture.GetFieldWithNameAndBindingFlagsWorks();
                },
                GetEventsWithoutBindingFlagsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetEventsWithoutBindingFlagsWorks()",
                        Line: "1031"
                    } ));
                    t.Fixture.GetEventsWithoutBindingFlagsWorks();
                },
                GetEventsWithBindingFlagsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetEventsWithBindingFlagsWorks()",
                        Line: "1041"
                    } ));
                    t.Fixture.GetEventsWithBindingFlagsWorks();
                },
                GetEventWithNameWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetEventWithNameWorks()",
                        Line: "1079"
                    } ));
                    t.Fixture.GetEventWithNameWorks();
                },
                GetEventWithNameAndBindingFlagsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetEventWithNameAndBindingFlagsWorks()",
                        Line: "1089"
                    } ));
                    t.Fixture.GetEventWithNameAndBindingFlagsWorks();
                },
                IsOperatorForMemberInfoWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.GetMembersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GetMembersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsOperatorForMemberInfoWorks()",
                        Line: "1106"
                    } ));
                    t.Fixture.IsOperatorForMemberInfoWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Reflection.GetMembersTests",
                        File: "Batch1\\Reflection\\GetMembersTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "11"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultValueWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultValueWorks()",
                        Line: "26"
                    } ));
                    t.Fixture.DefaultValueWorks();
                },
                CreateInstanceWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CreateInstanceWorks()",
                        Line: "34"
                    } ));
                    t.Fixture.CreateInstanceWorks();
                },
                DefaultConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorWorks()",
                        Line: "42"
                    } ));
                    t.Fixture.DefaultConstructorWorks();
                },
                EmptyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EmptyWorks()",
                        Line: "50"
                    } ));
                    t.Fixture.EmptyWorks();
                },
                ToStringWithoutArgumentsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToStringWithoutArgumentsWorks()",
                        Line: "56"
                    } ));
                    t.Fixture.ToStringWithoutArgumentsWorks();
                },
                ByteArrayConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ByteArrayConstructorWorks()",
                        Line: "63"
                    } ));
                    t.Fixture.ByteArrayConstructorWorks();
                },
                Int32Int16Int16ByteArrayConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Int32Int16Int16ByteArrayConstructorWorks()",
                        Line: "72"
                    } ));
                    t.Fixture.Int32Int16Int16ByteArrayConstructorWorks();
                },
                Int32Int16Int16BytesConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Int32Int16Int16BytesConstructorWorks()",
                        Line: "80"
                    } ));
                    t.Fixture.Int32Int16Int16BytesConstructorWorks();
                },
                UInt32UInt16UInt16BytesConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "UInt32UInt16UInt16BytesConstructorWorks()",
                        Line: "88"
                    } ));
                    t.Fixture.UInt32UInt16UInt16BytesConstructorWorks();
                },
                StringConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StringConstructorWorks()",
                        Line: "96"
                    } ));
                    t.Fixture.StringConstructorWorks();
                },
                ParseWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ParseWorks()",
                        Line: "114"
                    } ));
                    t.Fixture.ParseWorks();
                },
                ParseExactWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ParseExactWorks()",
                        Line: "132"
                    } ));
                    t.Fixture.ParseExactWorks();
                },
                TryParseWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TryParseWorks()",
                        Line: "153"
                    } ));
                    t.Fixture.TryParseWorks();
                },
                TryParseExactWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TryParseExactWorks()",
                        Line: "174"
                    } ));
                    t.Fixture.TryParseExactWorks();
                },
                CompareToWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CompareToWorks()",
                        Line: "204"
                    } ));
                    t.Fixture.CompareToWorks();
                },
                IComparableCompareToWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IComparableCompareToWorks()",
                        Line: "212"
                    } ));
                    t.Fixture.IComparableCompareToWorks();
                },
                EqualsObjectWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EqualsObjectWorks()",
                        Line: "220"
                    } ));
                    t.Fixture.EqualsObjectWorks();
                },
                EqualsGuidWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EqualsGuidWorks()",
                        Line: "229"
                    } ));
                    t.Fixture.EqualsGuidWorks();
                },
                IEquatableEqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IEquatableEqualsWorks()",
                        Line: "237"
                    } ));
                    t.Fixture.IEquatableEqualsWorks();
                },
                GetHashCodeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetHashCodeWorks()",
                        Line: "245"
                    } ));
                    t.Fixture.GetHashCodeWorks();
                },
                EqualityOperatorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EqualityOperatorWorks()",
                        Line: "252"
                    } ));
                    t.Fixture.EqualityOperatorWorks();
                },
                InequalityOperatorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InequalityOperatorWorks()",
                        Line: "259"
                    } ));
                    t.Fixture.InequalityOperatorWorks();
                },
                ToStringWithFormatWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToStringWithFormatWorks()",
                        Line: "266"
                    } ));
                    t.Fixture.ToStringWithFormatWorks();
                },
                NewGuidWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NewGuidWorks()",
                        Line: "278"
                    } ));
                    t.Fixture.NewGuidWorks();
                },
                ToByteArrayWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.GuidTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.GuidTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToByteArrayWorks()",
                        Line: "294"
                    } ));
                    t.Fixture.ToByteArrayWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.GuidTests",
                        File: "Batch1\\GuidTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests)],
        statics: {
            methods: {
                ArrayImplementsICollection: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayImplementsICollection()",
                        Line: "87"
                    } ));
                    t.Fixture.ArrayImplementsICollection();
                },
                CustomClassThatShouldImplementICollectionDoesSo: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CustomClassThatShouldImplementICollectionDoesSo()",
                        Line: "93"
                    } ));
                    t.Fixture.CustomClassThatShouldImplementICollectionDoesSo();
                },
                ArrayCastToICollectionCountWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayCastToICollectionCountWorks()",
                        Line: "99"
                    } ));
                    t.Fixture.ArrayCastToICollectionCountWorks();
                },
                ClassImplementingICollectionCountWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClassImplementingICollectionCountWorks()",
                        Line: "105"
                    } ));
                    t.Fixture.ClassImplementingICollectionCountWorks();
                },
                ClassImplementingICollectionCastToICollectionCountWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClassImplementingICollectionCastToICollectionCountWorks()",
                        Line: "111"
                    } ));
                    t.Fixture.ClassImplementingICollectionCastToICollectionCountWorks();
                },
                ArrayCastToICollectionIsReadOnlyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayCastToICollectionIsReadOnlyWorks()",
                        Line: "117"
                    } ));
                    t.Fixture.ArrayCastToICollectionIsReadOnlyWorks();
                },
                ClassImplementingICollectionIsReadOnlyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClassImplementingICollectionIsReadOnlyWorks()",
                        Line: "123"
                    } ));
                    t.Fixture.ClassImplementingICollectionIsReadOnlyWorks();
                },
                ClassImplementingICollectionCastToICollectionIsReadOnlyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClassImplementingICollectionCastToICollectionIsReadOnlyWorks()",
                        Line: "129"
                    } ));
                    t.Fixture.ClassImplementingICollectionCastToICollectionIsReadOnlyWorks();
                },
                ClassImplementingICollectionAddWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClassImplementingICollectionAddWorks()",
                        Line: "135"
                    } ));
                    t.Fixture.ClassImplementingICollectionAddWorks();
                },
                ClassImplementingICollectionCastToICollectionAddWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClassImplementingICollectionCastToICollectionAddWorks()",
                        Line: "144"
                    } ));
                    t.Fixture.ClassImplementingICollectionCastToICollectionAddWorks();
                },
                ClassImplementingICollectionClearWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClassImplementingICollectionClearWorks()",
                        Line: "153"
                    } ));
                    t.Fixture.ClassImplementingICollectionClearWorks();
                },
                ClassImplementingICollectionCastToICollectionClearWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClassImplementingICollectionCastToICollectionClearWorks()",
                        Line: "161"
                    } ));
                    t.Fixture.ClassImplementingICollectionCastToICollectionClearWorks();
                },
                ArrayCastToICollectionContainsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayCastToICollectionContainsWorks()",
                        Line: "169"
                    } ));
                    t.Fixture.ArrayCastToICollectionContainsWorks();
                },
                ClassImplementingICollectionContainsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClassImplementingICollectionContainsWorks()",
                        Line: "177"
                    } ));
                    t.Fixture.ClassImplementingICollectionContainsWorks();
                },
                ClassImplementingICollectionCastToICollectionContainsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClassImplementingICollectionCastToICollectionContainsWorks()",
                        Line: "185"
                    } ));
                    t.Fixture.ClassImplementingICollectionCastToICollectionContainsWorks();
                },
                ClassImplementingICollectionRemoveWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClassImplementingICollectionRemoveWorks()",
                        Line: "193"
                    } ));
                    t.Fixture.ClassImplementingICollectionRemoveWorks();
                },
                ClassImplementingICollectionCastToICollectionRemoveWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClassImplementingICollectionCastToICollectionRemoveWorks()",
                        Line: "203"
                    } ));
                    t.Fixture.ClassImplementingICollectionCastToICollectionRemoveWorks();
                },
                ClassImplementingICollectionCopyToWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClassImplementingICollectionCopyToWorks()",
                        Line: "213"
                    } ));
                    t.Fixture.ClassImplementingICollectionCopyToWorks();
                },
                ClassImplementingICollectionCastToICollectionCopyToWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ICollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ICollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClassImplementingICollectionCastToICollectionCopyToWorks()",
                        Line: "243"
                    } ));
                    t.Fixture.ClassImplementingICollectionCastToICollectionCopyToWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Collections.Generic.ICollectionTests",
                        File: "Batch1\\Collections\\Generic\\ICollectionTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.IComparableTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IComparableTests)],
        statics: {
            methods: {
                CallingMethodThroughIComparableInterfaceInvokesImplementingMethod: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IComparableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IComparableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CallingMethodThroughIComparableInterfaceInvokesImplementingMethod()",
                        Line: "22"
                    } ));
                    t.Fixture.CallingMethodThroughIComparableInterfaceInvokesImplementingMethod();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.IComparableTests",
                        File: "Batch1\\IComparableTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "121"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                ClassImplementsInterfaces: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClassImplementsInterfaces()",
                        Line: "127"
                    } ));
                    t.Fixture.ClassImplementsInterfaces();
                },
                CountWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CountWorks()",
                        Line: "134"
                    } ));
                    t.Fixture.CountWorks();
                },
                KeysWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "KeysWorks()",
                        Line: "147"
                    } ));
                    t.Fixture.KeysWorks();
                },
                GetItemWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetItemWorks()",
                        Line: "165"
                    } ));
                    t.Fixture.GetItemWorks();
                },
                ValuesWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ValuesWorks()",
                        Line: "194"
                    } ));
                    t.Fixture.ValuesWorks();
                },
                ContainsKeyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ContainsKeyWorks()",
                        Line: "212"
                    } ));
                    t.Fixture.ContainsKeyWorks();
                },
                TryGetValueWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TryGetValueWorks()",
                        Line: "230"
                    } ));
                    t.Fixture.TryGetValueWorks();
                },
                AddWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AddWorks()",
                        Line: "261"
                    } ));
                    t.Fixture.AddWorks();
                },
                ClearWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClearWorks()",
                        Line: "289"
                    } ));
                    t.Fixture.ClearWorks();
                },
                RemoveWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RemoveWorks()",
                        Line: "299"
                    } ));
                    t.Fixture.RemoveWorks();
                },
                SetItemWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetItemWorks()",
                        Line: "316"
                    } ));
                    t.Fixture.SetItemWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Collections.Generic.IDictionaryTests",
                        File: "Batch1\\Collections\\Generic\\IDictionaryTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IEnumerableTests)],
        statics: {
            methods: {
                ArrayImplementsIEnumerable: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IEnumerableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayImplementsIEnumerable()",
                        Line: "26"
                    } ));
                    t.Fixture.ArrayImplementsIEnumerable();
                },
                CustomClassThatShouldImplementIEnumerableDoesSo: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IEnumerableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CustomClassThatShouldImplementIEnumerableDoesSo()",
                        Line: "32"
                    } ));
                    t.Fixture.CustomClassThatShouldImplementIEnumerableDoesSo();
                },
                ArrayGetEnumeratorMethodWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IEnumerableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayGetEnumeratorMethodWorks()",
                        Line: "38"
                    } ));
                    t.Fixture.ArrayGetEnumeratorMethodWorks();
                },
                ArrayCastToIEnumerableCanBeEnumerated: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IEnumerableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayCastToIEnumerableCanBeEnumerated()",
                        Line: "51"
                    } ));
                    t.Fixture.ArrayCastToIEnumerableCanBeEnumerated();
                },
                ClassImplementingIEnumerableCanBeEnumerated: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IEnumerableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClassImplementingIEnumerableCanBeEnumerated()",
                        Line: "65"
                    } ));
                    t.Fixture.ClassImplementingIEnumerableCanBeEnumerated();
                },
                ClassImplementingIEnumerableCastToIEnumerableCanBeEnumerated: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IEnumerableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IEnumerableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClassImplementingIEnumerableCastToIEnumerableCanBeEnumerated()",
                        Line: "79"
                    } ));
                    t.Fixture.ClassImplementingIEnumerableCastToIEnumerableCanBeEnumerated();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Collections.Generic.IEnumerableTests",
                        File: "Batch1\\Collections\\Generic\\IEnumerableTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.IEquatableTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IEquatableTests)],
        statics: {
            methods: {
                CallingMethodThroughIComparableInterfaceInvokesImplementingMethod: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.IEquatableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IEquatableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CallingMethodThroughIComparableInterfaceInvokesImplementingMethod()",
                        Line: "22"
                    } ));
                    t.Fixture.CallingMethodThroughIComparableInterfaceInvokesImplementingMethod();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.IEquatableTests",
                        File: "Batch1\\IEquatableTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.IListTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "104"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                ArrayImplementsIList: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayImplementsIList()",
                        Line: "115"
                    } ));
                    t.Fixture.ArrayImplementsIList();
                },
                CustomClassThatShouldImplementIListDoesSo: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CustomClassThatShouldImplementIListDoesSo()",
                        Line: "121"
                    } ));
                    t.Fixture.CustomClassThatShouldImplementIListDoesSo();
                },
                ArrayCastToIListGetItemWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayCastToIListGetItemWorks()",
                        Line: "127"
                    } ));
                    t.Fixture.ArrayCastToIListGetItemWorks();
                },
                ArrayCastToIListSetItemWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayCastToIListSetItemWorks()",
                        Line: "134"
                    } ));
                    t.Fixture.ArrayCastToIListSetItemWorks();
                },
                ClassImplementingIListGetItemWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClassImplementingIListGetItemWorks()",
                        Line: "142"
                    } ));
                    t.Fixture.ClassImplementingIListGetItemWorks();
                },
                ClassImplementingIListCastToIListGetItemWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClassImplementingIListCastToIListGetItemWorks()",
                        Line: "149"
                    } ));
                    t.Fixture.ClassImplementingIListCastToIListGetItemWorks();
                },
                ClassImplementingIListSetItemWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClassImplementingIListSetItemWorks()",
                        Line: "156"
                    } ));
                    t.Fixture.ClassImplementingIListSetItemWorks();
                },
                ClassImplementingIListCastToIListSetItemWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClassImplementingIListCastToIListSetItemWorks()",
                        Line: "164"
                    } ));
                    t.Fixture.ClassImplementingIListCastToIListSetItemWorks();
                },
                ArrayCastToIListIsReadOnlyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayCastToIListIsReadOnlyWorks()",
                        Line: "172"
                    } ));
                    t.Fixture.ArrayCastToIListIsReadOnlyWorks();
                },
                ClassImplementingIListIsReadOnlyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClassImplementingIListIsReadOnlyWorks()",
                        Line: "179"
                    } ));
                    t.Fixture.ClassImplementingIListIsReadOnlyWorks();
                },
                ClassImplementingIListCastToIListIsReadOnlyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClassImplementingIListCastToIListIsReadOnlyWorks()",
                        Line: "186"
                    } ));
                    t.Fixture.ClassImplementingIListCastToIListIsReadOnlyWorks();
                },
                ArrayCastToIListIndexOfWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayCastToIListIndexOfWorks()",
                        Line: "193"
                    } ));
                    t.Fixture.ArrayCastToIListIndexOfWorks();
                },
                ClassImplementingIListIndexOfWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClassImplementingIListIndexOfWorks()",
                        Line: "201"
                    } ));
                    t.Fixture.ClassImplementingIListIndexOfWorks();
                },
                ClassImplementingIListCastToIListIndexOfWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClassImplementingIListCastToIListIndexOfWorks()",
                        Line: "209"
                    } ));
                    t.Fixture.ClassImplementingIListCastToIListIndexOfWorks();
                },
                ClassImplementingIListInsertWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClassImplementingIListInsertWorks()",
                        Line: "217"
                    } ));
                    t.Fixture.ClassImplementingIListInsertWorks();
                },
                ClassImplementingIListCastToIListInsertWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClassImplementingIListCastToIListInsertWorks()",
                        Line: "225"
                    } ));
                    t.Fixture.ClassImplementingIListCastToIListInsertWorks();
                },
                ClassImplementingIListRemoveAtWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClassImplementingIListRemoveAtWorks()",
                        Line: "233"
                    } ));
                    t.Fixture.ClassImplementingIListRemoveAtWorks();
                },
                ClassImplementingIListCastToIListRemoveAtWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClassImplementingIListCastToIListRemoveAtWorks()",
                        Line: "241"
                    } ));
                    t.Fixture.ClassImplementingIListCastToIListRemoveAtWorks();
                },
                ClassImplementingIListCopyToWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClassImplementingIListCopyToWorks()",
                        Line: "249"
                    } ));
                    t.Fixture.ClassImplementingIListCopyToWorks();
                },
                ClassImplementingIListCastToIListCopyToWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClassImplementingIListCastToIListCopyToWorks()",
                        Line: "279"
                    } ));
                    t.Fixture.ClassImplementingIListCastToIListCopyToWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Collections.Generic.IListTests",
                        File: "Batch1\\Collections\\Generic\\IListTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.IndexOutOfRangeExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.IndexOutOfRangeExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.IndexOutOfRangeExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IndexOutOfRangeExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "13"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.IndexOutOfRangeExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IndexOutOfRangeExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorWorks()",
                        Line: "23"
                    } ));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithMessageWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.IndexOutOfRangeExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IndexOutOfRangeExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageWorks()",
                        Line: "32"
                    } ));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.IndexOutOfRangeExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IndexOutOfRangeExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageAndInnerExceptionWorks()",
                        Line: "41"
                    } ));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Exceptions.IndexOutOfRangeExceptionTests",
                        File: "Batch1\\Exceptions\\IndexOutOfRangeExceptionTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.InitializationModeTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ObjectLiteralTests.InitializationModeTests)],
        statics: {
            methods: {
                Test: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.ObjectLiteralTests.InitializationModeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.InitializationModeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Test()",
                        Line: "290"
                    } ));
                    t.Fixture.Test();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.ObjectLiteralTests.InitializationModeTests",
                        File: "Batch1\\ObjectLiteralTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests)],
        statics: {
            methods: {
                LengthConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LengthConstructorWorks()",
                        Line: "30"
                    } ));
                    t.Fixture.LengthConstructorWorks();
                },
                ConstructorFromIntWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorFromIntWorks()",
                        Line: "38"
                    } ));
                    t.Fixture.ConstructorFromIntWorks();
                },
                CopyConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CopyConstructorWorks()",
                        Line: "48"
                    } ));
                    t.Fixture.CopyConstructorWorks();
                },
                ArrayBufferConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayBufferConstructorWorks()",
                        Line: "58"
                    } ));
                    t.Fixture.ArrayBufferConstructorWorks();
                },
                ArrayBufferWithOffsetConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayBufferWithOffsetConstructorWorks()",
                        Line: "68"
                    } ));
                    t.Fixture.ArrayBufferWithOffsetConstructorWorks();
                },
                ArrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayBufferWithOffsetAndLengthConstructorWorks()",
                        Line: "78"
                    } ));
                    t.Fixture.ArrayBufferWithOffsetAndLengthConstructorWorks();
                },
                StaticBytesPerElementWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StaticBytesPerElementWorks()",
                        Line: "95"
                    } ));
                    t.Fixture.StaticBytesPerElementWorks();
                },
                LengthWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LengthWorks()",
                        Line: "101"
                    } ));
                    t.Fixture.LengthWorks();
                },
                IndexingWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexingWorks()",
                        Line: "108"
                    } ));
                    t.Fixture.IndexingWorks();
                },
                SetInt16ArrayWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetInt16ArrayWorks()",
                        Line: "117"
                    } ));
                    t.Fixture.SetInt16ArrayWorks();
                },
                SetInt16ArrayWithOffsetWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetInt16ArrayWithOffsetWorks()",
                        Line: "125"
                    } ));
                    t.Fixture.SetInt16ArrayWithOffsetWorks();
                },
                SetNormalArrayWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetNormalArrayWorks()",
                        Line: "133"
                    } ));
                    t.Fixture.SetNormalArrayWorks();
                },
                SetNormalArrayWithOffsetWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetNormalArrayWithOffsetWorks()",
                        Line: "141"
                    } ));
                    t.Fixture.SetNormalArrayWithOffsetWorks();
                },
                SubarrayWithBeginWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SubarrayWithBeginWorks()",
                        Line: "149"
                    } ));
                    t.Fixture.SubarrayWithBeginWorks();
                },
                SubarrayWithBeginAndEndWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SubarrayWithBeginAndEndWorks()",
                        Line: "159"
                    } ));
                    t.Fixture.SubarrayWithBeginAndEndWorks();
                },
                BufferPropertyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "BufferPropertyWorks()",
                        Line: "170"
                    } ));
                    t.Fixture.BufferPropertyWorks();
                },
                ByteOffsetPropertyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ByteOffsetPropertyWorks()",
                        Line: "178"
                    } ));
                    t.Fixture.ByteOffsetPropertyWorks();
                },
                ByteLengthPropertyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ByteLengthPropertyWorks()",
                        Line: "186"
                    } ));
                    t.Fixture.ByteLengthPropertyWorks();
                },
                IndexOfWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexOfWorks()",
                        Line: "193"
                    } ));
                    t.Fixture.IndexOfWorks();
                },
                ContainsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ContainsWorks()",
                        Line: "202"
                    } ));
                    t.Fixture.ContainsWorks();
                },
                ForeachWorks_SPI_1401: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ForeachWorks_SPI_1401()",
                        Line: "211"
                    } ));
                    t.Fixture.ForeachWorks_SPI_1401();
                },
                GetEnumeratorWorks_SPI_1401: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetEnumeratorWorks_SPI_1401()",
                        Line: "225"
                    } ));
                    t.Fixture.GetEnumeratorWorks_SPI_1401();
                },
                IEnumerableGetEnumeratorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IEnumerableGetEnumeratorWorks()",
                        Line: "239"
                    } ));
                    t.Fixture.IEnumerableGetEnumeratorWorks();
                },
                ICollectionMethodsWork_SPI_1559: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionMethodsWork_SPI_1559()",
                        Line: "252"
                    } ));
                    t.Fixture.ICollectionMethodsWork_SPI_1559();
                },
                IListMethodsWork_SPI_1559: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IListMethodsWork_SPI_1559()",
                        Line: "265"
                    } ));
                    t.Fixture.IListMethodsWork_SPI_1559();
                },
                IListIsReadOnlyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IListIsReadOnlyWorks()",
                        Line: "298"
                    } ));
                    t.Fixture.IListIsReadOnlyWorks();
                },
                ICollectionIsReadOnlyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionIsReadOnlyWorks()",
                        Line: "305"
                    } ));
                    t.Fixture.ICollectionIsReadOnlyWorks();
                },
                ICollectionCopyTo: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionCopyTo()",
                        Line: "312"
                    } ));
                    t.Fixture.ICollectionCopyTo();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Collections.Native.Int16ArrayTests",
                        File: "Batch1\\Collections\\Native\\Int16ArrayTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "10"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                CastsWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CastsWork()",
                        Line: "26"
                    } ));
                    t.Fixture.CastsWork();
                },
                DefaultValueIs0: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultValueIs0()",
                        Line: "70"
                    } ));
                    t.Fixture.DefaultValueIs0();
                },
                DefaultConstructorReturnsZero: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorReturnsZero()",
                        Line: "76"
                    } ));
                    t.Fixture.DefaultConstructorReturnsZero();
                },
                CreatingInstanceReturnsZero: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CreatingInstanceReturnsZero()",
                        Line: "82"
                    } ));
                    t.Fixture.CreatingInstanceReturnsZero();
                },
                ConstantsWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstantsWork()",
                        Line: "88"
                    } ));
                    t.Fixture.ConstantsWork();
                },
                FormatWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FormatWorks()",
                        Line: "95"
                    } ));
                    t.Fixture.FormatWorks();
                },
                IFormattableToStringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IFormattableToStringWorks()",
                        Line: "101"
                    } ));
                    t.Fixture.IFormattableToStringWorks();
                },
                TryParseWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TryParseWorks()",
                        Line: "107"
                    } ));
                    t.Fixture.TryParseWorks();
                },
                ParseWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ParseWorks()",
                        Line: "140"
                    } ));
                    t.Fixture.ParseWorks();
                },
                ToStringWithoutRadixWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToStringWithoutRadixWorks()",
                        Line: "152"
                    } ));
                    t.Fixture.ToStringWithoutRadixWorks();
                },
                ToStringWithRadixWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToStringWithRadixWorks()",
                        Line: "158"
                    } ));
                    t.Fixture.ToStringWithRadixWorks();
                },
                GetHashCodeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetHashCodeWorks()",
                        Line: "165"
                    } ));
                    t.Fixture.GetHashCodeWorks();
                },
                EqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EqualsWorks()",
                        Line: "173"
                    } ));
                    t.Fixture.EqualsWorks();
                },
                IEquatableEqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IEquatableEqualsWorks()",
                        Line: "182"
                    } ));
                    t.Fixture.IEquatableEqualsWorks();
                },
                CompareToWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CompareToWorks()",
                        Line: "196"
                    } ));
                    t.Fixture.CompareToWorks();
                },
                IComparableCompareToWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IComparableCompareToWorks()",
                        Line: "204"
                    } ));
                    t.Fixture.IComparableCompareToWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.SimpleTypes.Int16Tests",
                        File: "Batch1\\SimpleTypes\\Int16Tests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests)],
        statics: {
            methods: {
                LengthConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LengthConstructorWorks()",
                        Line: "30"
                    } ));
                    t.Fixture.LengthConstructorWorks();
                },
                ConstructorFromIntWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorFromIntWorks()",
                        Line: "38"
                    } ));
                    t.Fixture.ConstructorFromIntWorks();
                },
                CopyConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CopyConstructorWorks()",
                        Line: "48"
                    } ));
                    t.Fixture.CopyConstructorWorks();
                },
                ArrayBufferConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayBufferConstructorWorks()",
                        Line: "58"
                    } ));
                    t.Fixture.ArrayBufferConstructorWorks();
                },
                ArrayBufferWithOffsetConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayBufferWithOffsetConstructorWorks()",
                        Line: "68"
                    } ));
                    t.Fixture.ArrayBufferWithOffsetConstructorWorks();
                },
                ArrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayBufferWithOffsetAndLengthConstructorWorks()",
                        Line: "78"
                    } ));
                    t.Fixture.ArrayBufferWithOffsetAndLengthConstructorWorks();
                },
                StaticBytesPerElementWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StaticBytesPerElementWorks()",
                        Line: "95"
                    } ));
                    t.Fixture.StaticBytesPerElementWorks();
                },
                LengthWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LengthWorks()",
                        Line: "101"
                    } ));
                    t.Fixture.LengthWorks();
                },
                IndexingWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexingWorks()",
                        Line: "108"
                    } ));
                    t.Fixture.IndexingWorks();
                },
                SetInt32ArrayWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetInt32ArrayWorks()",
                        Line: "117"
                    } ));
                    t.Fixture.SetInt32ArrayWorks();
                },
                SetInt32ArrayWithOffsetWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetInt32ArrayWithOffsetWorks()",
                        Line: "125"
                    } ));
                    t.Fixture.SetInt32ArrayWithOffsetWorks();
                },
                SetNormalArrayWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetNormalArrayWorks()",
                        Line: "133"
                    } ));
                    t.Fixture.SetNormalArrayWorks();
                },
                SetNormalArrayWithOffsetWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetNormalArrayWithOffsetWorks()",
                        Line: "141"
                    } ));
                    t.Fixture.SetNormalArrayWithOffsetWorks();
                },
                SubarrayWithBeginWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SubarrayWithBeginWorks()",
                        Line: "149"
                    } ));
                    t.Fixture.SubarrayWithBeginWorks();
                },
                SubarrayWithBeginAndEndWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SubarrayWithBeginAndEndWorks()",
                        Line: "159"
                    } ));
                    t.Fixture.SubarrayWithBeginAndEndWorks();
                },
                BufferPropertyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "BufferPropertyWorks()",
                        Line: "170"
                    } ));
                    t.Fixture.BufferPropertyWorks();
                },
                ByteOffsetPropertyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ByteOffsetPropertyWorks()",
                        Line: "178"
                    } ));
                    t.Fixture.ByteOffsetPropertyWorks();
                },
                ByteLengthPropertyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ByteLengthPropertyWorks()",
                        Line: "186"
                    } ));
                    t.Fixture.ByteLengthPropertyWorks();
                },
                IndexOfWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexOfWorks()",
                        Line: "193"
                    } ));
                    t.Fixture.IndexOfWorks();
                },
                ContainsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ContainsWorks()",
                        Line: "202"
                    } ));
                    t.Fixture.ContainsWorks();
                },
                ForeachWorks_SPI_1401: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ForeachWorks_SPI_1401()",
                        Line: "211"
                    } ));
                    t.Fixture.ForeachWorks_SPI_1401();
                },
                GetEnumeratorWorks_SPI_1401: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetEnumeratorWorks_SPI_1401()",
                        Line: "225"
                    } ));
                    t.Fixture.GetEnumeratorWorks_SPI_1401();
                },
                IEnumerableGetEnumeratorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IEnumerableGetEnumeratorWorks()",
                        Line: "239"
                    } ));
                    t.Fixture.IEnumerableGetEnumeratorWorks();
                },
                ICollectionMethodsWork_SPI_1559: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionMethodsWork_SPI_1559()",
                        Line: "252"
                    } ));
                    t.Fixture.ICollectionMethodsWork_SPI_1559();
                },
                IListMethodsWork_SPI_1559: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IListMethodsWork_SPI_1559()",
                        Line: "265"
                    } ));
                    t.Fixture.IListMethodsWork_SPI_1559();
                },
                IListIsReadOnlyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IListIsReadOnlyWorks()",
                        Line: "298"
                    } ));
                    t.Fixture.IListIsReadOnlyWorks();
                },
                ICollectionIsReadOnlyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionIsReadOnlyWorks()",
                        Line: "305"
                    } ));
                    t.Fixture.ICollectionIsReadOnlyWorks();
                },
                ICollectionCopyTo: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionCopyTo()",
                        Line: "312"
                    } ));
                    t.Fixture.ICollectionCopyTo();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Collections.Native.Int32ArrayTests",
                        File: "Batch1\\Collections\\Native\\Int32ArrayTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "12"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                CastsWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CastsWork()",
                        Line: "28"
                    } ));
                    t.Fixture.CastsWork();
                },
                TypeIsWorksForInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypeIsWorksForInt32()",
                        Line: "67"
                    } ));
                    t.Fixture.TypeIsWorksForInt32();
                },
                TypeAsWorksForInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypeAsWorksForInt32()",
                        Line: "76"
                    } ));
                    t.Fixture.TypeAsWorksForInt32();
                },
                UnboxingWorksForInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "UnboxingWorksForInt32()",
                        Line: "85"
                    } ));
                    t.Fixture.UnboxingWorksForInt32();
                },
                DefaultValueIs0: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultValueIs0()",
                        Line: "103"
                    } ));
                    t.Fixture.DefaultValueIs0();
                },
                DefaultConstructorReturnsZero: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorReturnsZero()",
                        Line: "109"
                    } ));
                    t.Fixture.DefaultConstructorReturnsZero();
                },
                CreatingInstanceReturnsZero: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CreatingInstanceReturnsZero()",
                        Line: "115"
                    } ));
                    t.Fixture.CreatingInstanceReturnsZero();
                },
                ConstantsWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstantsWork()",
                        Line: "121"
                    } ));
                    t.Fixture.ConstantsWork();
                },
                FormatWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FormatWorks()",
                        Line: "128"
                    } ));
                    t.Fixture.FormatWorks();
                },
                IFormattableToStringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IFormattableToStringWorks()",
                        Line: "134"
                    } ));
                    t.Fixture.IFormattableToStringWorks();
                },
                TryParseWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TryParseWorks()",
                        Line: "140"
                    } ));
                    t.Fixture.TryParseWorks();
                },
                ParseWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ParseWorks()",
                        Line: "169"
                    } ));
                    t.Fixture.ParseWorks();
                },
                ToStringWithoutRadixWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToStringWithoutRadixWorks()",
                        Line: "183"
                    } ));
                    t.Fixture.ToStringWithoutRadixWorks();
                },
                ToStringWithRadixWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToStringWithRadixWorks()",
                        Line: "189"
                    } ));
                    t.Fixture.ToStringWithRadixWorks();
                },
                GetHashCodeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetHashCodeWorks()",
                        Line: "196"
                    } ));
                    t.Fixture.GetHashCodeWorks();
                },
                EqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EqualsWorks()",
                        Line: "204"
                    } ));
                    t.Fixture.EqualsWorks();
                },
                IEquatableEqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IEquatableEqualsWorks()",
                        Line: "213"
                    } ));
                    t.Fixture.IEquatableEqualsWorks();
                },
                CompareToWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CompareToWorks()",
                        Line: "227"
                    } ));
                    t.Fixture.CompareToWorks();
                },
                IComparableCompareToWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IComparableCompareToWorks()",
                        Line: "235"
                    } ));
                    t.Fixture.IComparableCompareToWorks();
                },
                IntegerDivisionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IntegerDivisionWorks()",
                        Line: "243"
                    } ));
                    t.Fixture.IntegerDivisionWorks();
                },
                IntegerModuloWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IntegerModuloWorks()",
                        Line: "254"
                    } ));
                    t.Fixture.IntegerModuloWorks();
                },
                IntegerDivisionByZeroThrowsDivideByZeroException: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IntegerDivisionByZeroThrowsDivideByZeroException()",
                        Line: "265"
                    } ));
                    t.Fixture.IntegerDivisionByZeroThrowsDivideByZeroException();
                },
                DoublesAreTruncatedWhenConvertedToIntegers: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DoublesAreTruncatedWhenConvertedToIntegers()",
                        Line: "272"
                    } ));
                    t.Fixture.DoublesAreTruncatedWhenConvertedToIntegers();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.SimpleTypes.Int32Tests",
                        File: "Batch1\\SimpleTypes\\Int32Tests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "24"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                MinMaxValuesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MinMaxValuesAreCorrect()",
                        Line: "39"
                    } ));
                    t.Fixture.MinMaxValuesAreCorrect();
                },
                CastsWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CastsWork()",
                        Line: "46"
                    } ));
                    t.Fixture.CastsWork();
                },
                OverflowWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "OverflowWorks()",
                        Line: "75"
                    } ));
                    t.Fixture.OverflowWorks();
                },
                CombinedTypesOperationsWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CombinedTypesOperationsWork()",
                        Line: "99"
                    } ));
                    t.Fixture.CombinedTypesOperationsWork();
                },
                DefaultValueIs0: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultValueIs0()",
                        Line: "142"
                    } ));
                    t.Fixture.DefaultValueIs0();
                },
                DefaultConstructorReturnsZero: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorReturnsZero()",
                        Line: "148"
                    } ));
                    t.Fixture.DefaultConstructorReturnsZero();
                },
                CreatingInstanceReturnsZero: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CreatingInstanceReturnsZero()",
                        Line: "154"
                    } ));
                    t.Fixture.CreatingInstanceReturnsZero();
                },
                FormatWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FormatWorks()",
                        Line: "160"
                    } ));
                    t.Fixture.FormatWorks();
                },
                IFormattableToStringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IFormattableToStringWorks()",
                        Line: "166"
                    } ));
                    t.Fixture.IFormattableToStringWorks();
                },
                TryParseWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TryParseWorks()",
                        Line: "172"
                    } ));
                    t.Fixture.TryParseWorks();
                },
                ParseWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ParseWorks()",
                        Line: "209"
                    } ));
                    t.Fixture.ParseWorks();
                },
                CastingOfLargeDoublesToInt64Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CastingOfLargeDoublesToInt64Works()",
                        Line: "222"
                    } ));
                    t.Fixture.CastingOfLargeDoublesToInt64Works();
                },
                DivisionOfLargeInt64Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DivisionOfLargeInt64Works()",
                        Line: "230"
                    } ));
                    t.Fixture.DivisionOfLargeInt64Works();
                },
                ToStringWithoutRadixWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToStringWithoutRadixWorks()",
                        Line: "238"
                    } ));
                    t.Fixture.ToStringWithoutRadixWorks();
                },
                ToStringWithRadixWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToStringWithRadixWorks()",
                        Line: "244"
                    } ));
                    t.Fixture.ToStringWithRadixWorks();
                },
                GetHashCodeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetHashCodeWorks()",
                        Line: "251"
                    } ));
                    t.Fixture.GetHashCodeWorks();
                },
                EqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EqualsWorks()",
                        Line: "260"
                    } ));
                    t.Fixture.EqualsWorks();
                },
                IEquatableEqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IEquatableEqualsWorks()",
                        Line: "269"
                    } ));
                    t.Fixture.IEquatableEqualsWorks();
                },
                CompareToWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CompareToWorks()",
                        Line: "283"
                    } ));
                    t.Fixture.CompareToWorks();
                },
                IComparableCompareToWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IComparableCompareToWorks()",
                        Line: "291"
                    } ));
                    t.Fixture.IComparableCompareToWorks();
                },
                ShiftWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.Int64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ShiftWorks()",
                        Line: "299"
                    } ));
                    t.Fixture.ShiftWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.SimpleTypes.Int64Tests",
                        File: "Batch1\\SimpleTypes\\Int64Tests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests)],
        statics: {
            methods: {
                LengthConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LengthConstructorWorks()",
                        Line: "30"
                    } ));
                    t.Fixture.LengthConstructorWorks();
                },
                ConstructorFromIntWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorFromIntWorks()",
                        Line: "38"
                    } ));
                    t.Fixture.ConstructorFromIntWorks();
                },
                CopyConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CopyConstructorWorks()",
                        Line: "48"
                    } ));
                    t.Fixture.CopyConstructorWorks();
                },
                ArrayBufferConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayBufferConstructorWorks()",
                        Line: "58"
                    } ));
                    t.Fixture.ArrayBufferConstructorWorks();
                },
                ArrayBufferWithOffsetConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayBufferWithOffsetConstructorWorks()",
                        Line: "68"
                    } ));
                    t.Fixture.ArrayBufferWithOffsetConstructorWorks();
                },
                ArrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayBufferWithOffsetAndLengthConstructorWorks()",
                        Line: "78"
                    } ));
                    t.Fixture.ArrayBufferWithOffsetAndLengthConstructorWorks();
                },
                StaticBytesPerElementWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StaticBytesPerElementWorks()",
                        Line: "95"
                    } ));
                    t.Fixture.StaticBytesPerElementWorks();
                },
                LengthWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LengthWorks()",
                        Line: "101"
                    } ));
                    t.Fixture.LengthWorks();
                },
                IndexingWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexingWorks()",
                        Line: "108"
                    } ));
                    t.Fixture.IndexingWorks();
                },
                SetInt8ArrayWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetInt8ArrayWorks()",
                        Line: "117"
                    } ));
                    t.Fixture.SetInt8ArrayWorks();
                },
                SetInt8ArrayWithOffsetWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetInt8ArrayWithOffsetWorks()",
                        Line: "125"
                    } ));
                    t.Fixture.SetInt8ArrayWithOffsetWorks();
                },
                SetNormalArrayWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetNormalArrayWorks()",
                        Line: "133"
                    } ));
                    t.Fixture.SetNormalArrayWorks();
                },
                SetNormalArrayWithOffsetWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetNormalArrayWithOffsetWorks()",
                        Line: "141"
                    } ));
                    t.Fixture.SetNormalArrayWithOffsetWorks();
                },
                SubarrayWithBeginWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SubarrayWithBeginWorks()",
                        Line: "149"
                    } ));
                    t.Fixture.SubarrayWithBeginWorks();
                },
                SubarrayWithBeginAndEndWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SubarrayWithBeginAndEndWorks()",
                        Line: "159"
                    } ));
                    t.Fixture.SubarrayWithBeginAndEndWorks();
                },
                BufferPropertyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "BufferPropertyWorks()",
                        Line: "170"
                    } ));
                    t.Fixture.BufferPropertyWorks();
                },
                ByteOffsetPropertyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ByteOffsetPropertyWorks()",
                        Line: "178"
                    } ));
                    t.Fixture.ByteOffsetPropertyWorks();
                },
                ByteLengthPropertyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ByteLengthPropertyWorks()",
                        Line: "186"
                    } ));
                    t.Fixture.ByteLengthPropertyWorks();
                },
                IndexOfWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexOfWorks()",
                        Line: "193"
                    } ));
                    t.Fixture.IndexOfWorks();
                },
                ContainsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ContainsWorks()",
                        Line: "202"
                    } ));
                    t.Fixture.ContainsWorks();
                },
                ForeachWorks_SPI_1401: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ForeachWorks_SPI_1401()",
                        Line: "211"
                    } ));
                    t.Fixture.ForeachWorks_SPI_1401();
                },
                GetEnumeratorWorks_SPI_1401: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetEnumeratorWorks_SPI_1401()",
                        Line: "225"
                    } ));
                    t.Fixture.GetEnumeratorWorks_SPI_1401();
                },
                IEnumerableGetEnumeratorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IEnumerableGetEnumeratorWorks()",
                        Line: "239"
                    } ));
                    t.Fixture.IEnumerableGetEnumeratorWorks();
                },
                ICollectionMethodsWork_SPI_1559: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionMethodsWork_SPI_1559()",
                        Line: "252"
                    } ));
                    t.Fixture.ICollectionMethodsWork_SPI_1559();
                },
                IListMethodsWork_SPI_1559: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IListMethodsWork_SPI_1559()",
                        Line: "265"
                    } ));
                    t.Fixture.IListMethodsWork_SPI_1559();
                },
                IListIsReadOnlyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IListIsReadOnlyWorks()",
                        Line: "298"
                    } ));
                    t.Fixture.IListIsReadOnlyWorks();
                },
                ICollectionIsReadOnlyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionIsReadOnlyWorks()",
                        Line: "305"
                    } ));
                    t.Fixture.ICollectionIsReadOnlyWorks();
                },
                ICollectionCopyTo: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Int8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Int8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionCopyTo()",
                        Line: "312"
                    } ));
                    t.Fixture.ICollectionCopyTo();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Collections.Native.Int8ArrayTests",
                        File: "Batch1\\Collections\\Native\\Int8ArrayTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.InvalidCastExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.InvalidCastExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.InvalidCastExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.InvalidCastExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "10"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.InvalidCastExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.InvalidCastExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorWorks()",
                        Line: "19"
                    } ));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithMessageWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.InvalidCastExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.InvalidCastExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageWorks()",
                        Line: "28"
                    } ));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.InvalidCastExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.InvalidCastExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageAndInnerExceptionWorks()",
                        Line: "37"
                    } ));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Exceptions.InvalidCastExceptionTests",
                        File: "Batch1\\Exceptions\\InvalidCastExceptionTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.InvalidOperationExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.InvalidOperationExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.InvalidOperationExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.InvalidOperationExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "10"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.InvalidOperationExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.InvalidOperationExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorWorks()",
                        Line: "19"
                    } ));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithMessageWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.InvalidOperationExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.InvalidOperationExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageWorks()",
                        Line: "28"
                    } ));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.InvalidOperationExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.InvalidOperationExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageAndInnerExceptionWorks()",
                        Line: "37"
                    } ));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Exceptions.InvalidOperationExceptionTests",
                        File: "Batch1\\Exceptions\\InvalidOperationExceptionTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyCollectionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyCollectionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "70"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                ArrayImplementsIReadOnlyCollection: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayImplementsIReadOnlyCollection()",
                        Line: "82"
                    } ));
                    t.Fixture.ArrayImplementsIReadOnlyCollection();
                },
                CustomClassThatShouldImplementIReadOnlyCollectionDoesSo: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CustomClassThatShouldImplementIReadOnlyCollectionDoesSo()",
                        Line: "88"
                    } ));
                    t.Fixture.CustomClassThatShouldImplementIReadOnlyCollectionDoesSo();
                },
                ArrayCastToIReadOnlyCollectionCountWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayCastToIReadOnlyCollectionCountWorks()",
                        Line: "94"
                    } ));
                    t.Fixture.ArrayCastToIReadOnlyCollectionCountWorks();
                },
                ClassImplementingICollectionCastToIReadOnlyCollectionCountWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClassImplementingICollectionCastToIReadOnlyCollectionCountWorks()",
                        Line: "104"
                    } ));
                    t.Fixture.ClassImplementingICollectionCastToIReadOnlyCollectionCountWorks();
                },
                ArrayCastToIReadOnlyCollectionContainsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayCastToIReadOnlyCollectionContainsWorks()",
                        Line: "110"
                    } ));
                    t.Fixture.ArrayCastToIReadOnlyCollectionContainsWorks();
                },
                ClassImplementingICollectionCastToIReadOnlyCollectionContainsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClassImplementingICollectionCastToIReadOnlyCollectionContainsWorks()",
                        Line: "118"
                    } ));
                    t.Fixture.ClassImplementingICollectionCastToIReadOnlyCollectionContainsWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Collections.Generic.IReadOnlyCollectionTests",
                        File: "Batch1\\Collections\\Generic\\IReadOnlyCollectionTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyDictionaryTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "80"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                ClassImplementsInterfaces: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClassImplementsInterfaces()",
                        Line: "93"
                    } ));
                    t.Fixture.ClassImplementsInterfaces();
                },
                CountWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CountWorks()",
                        Line: "99"
                    } ));
                    t.Fixture.CountWorks();
                },
                KeysWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "KeysWorks()",
                        Line: "109"
                    } ));
                    t.Fixture.KeysWorks();
                },
                GetItemWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetItemWorks()",
                        Line: "138"
                    } ));
                    t.Fixture.GetItemWorks();
                },
                ValuesWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ValuesWorks()",
                        Line: "166"
                    } ));
                    t.Fixture.ValuesWorks();
                },
                ContainsKeyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ContainsKeyWorks()",
                        Line: "196"
                    } ));
                    t.Fixture.ContainsKeyWorks();
                },
                TryGetValueWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TryGetValueWorks()",
                        Line: "209"
                    } ));
                    t.Fixture.TryGetValueWorks();
                },
                UsersTestCase_1626_Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyDictionaryTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyDictionaryTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "UsersTestCase_1626_Works()",
                        Line: "246"
                    } ));
                    t.Fixture.UsersTestCase_1626_Works();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Collections.Generic.IReadOnlyDictionaryTests",
                        File: "Batch1\\Collections\\Generic\\IReadOnlyDictionaryTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyListTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyListTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "82"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                CustomClassThatShouldImplementIReadOnlyListDoesSo: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CustomClassThatShouldImplementIReadOnlyListDoesSo()",
                        Line: "95"
                    } ));
                    t.Fixture.CustomClassThatShouldImplementIReadOnlyListDoesSo();
                },
                ArrayImplementsIReadOnlyList: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayImplementsIReadOnlyList()",
                        Line: "101"
                    } ));
                    t.Fixture.ArrayImplementsIReadOnlyList();
                },
                ArrayCastToIReadOnlyListGetItemWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayCastToIReadOnlyListGetItemWorks()",
                        Line: "107"
                    } ));
                    t.Fixture.ArrayCastToIReadOnlyListGetItemWorks();
                },
                ClassImplementingIReadOnlyListGetItemWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClassImplementingIReadOnlyListGetItemWorks()",
                        Line: "114"
                    } ));
                    t.Fixture.ClassImplementingIReadOnlyListGetItemWorks();
                },
                ClassImplementingIReadOnlyListCastToIReadOnlyListGetItemWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IReadOnlyListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IReadOnlyListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClassImplementingIReadOnlyListCastToIReadOnlyListGetItemWorks()",
                        Line: "121"
                    } ));
                    t.Fixture.ClassImplementingIReadOnlyListCastToIReadOnlyListGetItemWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Collections.Generic.IReadOnlyListTests",
                        File: "Batch1\\Collections\\Generic\\IReadOnlyListTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IteratorBlockTests)],
        statics: {
            methods: {
                TypeReturnedByIteratorBlockReturningIEnumeratorImplementsThatInterfaceAndIDisposable: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IteratorBlockTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypeReturnedByIteratorBlockReturningIEnumeratorImplementsThatInterfaceAndIDisposable()",
                        Line: "122"
                    } ));
                    t.Fixture.TypeReturnedByIteratorBlockReturningIEnumeratorImplementsThatInterfaceAndIDisposable();
                },
                EnumeratingIEnumeratorIteratorToEndWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IteratorBlockTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EnumeratingIEnumeratorIteratorToEndWorks()",
                        Line: "129"
                    } ));
                    t.Fixture.EnumeratingIEnumeratorIteratorToEndWorks();
                },
                PrematureDisposalOfIEnumeratorIteratorExecutesFinallyBlocks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IteratorBlockTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PrematureDisposalOfIEnumeratorIteratorExecutesFinallyBlocks()",
                        Line: "144"
                    } ));
                    t.Fixture.PrematureDisposalOfIEnumeratorIteratorExecutesFinallyBlocks();
                },
                ExceptionInIEnumeratorIteratorBodyExecutesFinallyBlocks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IteratorBlockTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ExceptionInIEnumeratorIteratorBodyExecutesFinallyBlocks()",
                        Line: "162"
                    } ));
                    t.Fixture.ExceptionInIEnumeratorIteratorBodyExecutesFinallyBlocks();
                },
                TypeReturnedByIteratorBlockReturningIEnumerableImplementsThatInterface: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IteratorBlockTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypeReturnedByIteratorBlockReturningIEnumerableImplementsThatInterface()",
                        Line: "187"
                    } ));
                    t.Fixture.TypeReturnedByIteratorBlockReturningIEnumerableImplementsThatInterface();
                },
                EnumeratingIEnumerableIteratorToEndWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IteratorBlockTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EnumeratingIEnumerableIteratorToEndWorks()",
                        Line: "194"
                    } ));
                    t.Fixture.EnumeratingIEnumerableIteratorToEndWorks();
                },
                PrematureDisposalOfIEnumerableIteratorExecutesFinallyBlocks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IteratorBlockTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PrematureDisposalOfIEnumerableIteratorExecutesFinallyBlocks()",
                        Line: "218"
                    } ));
                    t.Fixture.PrematureDisposalOfIEnumerableIteratorExecutesFinallyBlocks();
                },
                ExceptionInIEnumerableIteratorBodyExecutesFinallyBlocks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IteratorBlockTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ExceptionInIEnumerableIteratorBodyExecutesFinallyBlocks()",
                        Line: "237"
                    } ));
                    t.Fixture.ExceptionInIEnumerableIteratorBodyExecutesFinallyBlocks();
                },
                EnumeratingAnIteratorBlockReturningIEnumerableMultipleTimesUsesTheInitialValuesForParameters: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IteratorBlockTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EnumeratingAnIteratorBlockReturningIEnumerableMultipleTimesUsesTheInitialValuesForParameters()",
                        Line: "264"
                    } ));
                    t.Fixture.EnumeratingAnIteratorBlockReturningIEnumerableMultipleTimesUsesTheInitialValuesForParameters();
                },
                DifferentGetEnumeratorCallsOnIteratorBlockReturningIEnumerableGetOwnCopiesOfLocals: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.IteratorBlockTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.IteratorBlockTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DifferentGetEnumeratorCallsOnIteratorBlockReturningIEnumerableGetOwnCopiesOfLocals()",
                        Line: "278"
                    } ));
                    t.Fixture.DifferentGetEnumeratorCallsOnIteratorBlockReturningIEnumerableGetOwnCopiesOfLocals();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Collections.Generic.IteratorBlockTests",
                        File: "Batch1\\Collections\\Generic\\IteratorBlockTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "11"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks_SPI_1606: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorWorks_SPI_1606()",
                        Line: "58"
                    } ));
                    t.Fixture.DefaultConstructorWorks_SPI_1606();
                },
                DefaultValueWorks_SPI_1606: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultValueWorks_SPI_1606()",
                        Line: "66"
                    } ));
                    t.Fixture.DefaultValueWorks_SPI_1606();
                },
                CreatingInstanceReturnsDateWithZeroValue_SPI_1606: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CreatingInstanceReturnsDateWithZeroValue_SPI_1606()",
                        Line: "74"
                    } ));
                    t.Fixture.CreatingInstanceReturnsDateWithZeroValue_SPI_1606();
                },
                LongConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LongConstructorWorks()",
                        Line: "82"
                    } ));
                    t.Fixture.LongConstructorWorks();
                },
                StringConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StringConstructorWorks()",
                        Line: "95"
                    } ));
                    t.Fixture.StringConstructorWorks();
                },
                YMDConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "YMDConstructorWorks()",
                        Line: "102"
                    } ));
                    t.Fixture.YMDConstructorWorks();
                },
                YMDHConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "YMDHConstructorWorks()",
                        Line: "109"
                    } ));
                    t.Fixture.YMDHConstructorWorks();
                },
                YMDHNConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "YMDHNConstructorWorks()",
                        Line: "116"
                    } ));
                    t.Fixture.YMDHNConstructorWorks();
                },
                YMDHNSConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "YMDHNSConstructorWorks()",
                        Line: "123"
                    } ));
                    t.Fixture.YMDHNSConstructorWorks();
                },
                YMDHNSUConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "YMDHNSUConstructorWorks()",
                        Line: "130"
                    } ));
                    t.Fixture.YMDHNSUConstructorWorks();
                },
                MinWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MinWorks()",
                        Line: "137"
                    } ));
                    t.Fixture.MinWorks();
                },
                MaxWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MaxWorks()",
                        Line: "144"
                    } ));
                    t.Fixture.MaxWorks();
                },
                NowWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NowWorks()",
                        Line: "151"
                    } ));
                    t.Fixture.NowWorks();
                },
                UTCNowWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "UTCNowWorks()",
                        Line: "159"
                    } ));
                    t.Fixture.UTCNowWorks();
                },
                ToUniversalWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToUniversalWorks()",
                        Line: "171"
                    } ));
                    t.Fixture.ToUniversalWorks();
                },
                ToLocalWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToLocalWorks()",
                        Line: "185"
                    } ));
                    t.Fixture.ToLocalWorks();
                },
                TodayWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TodayWorks()",
                        Line: "199"
                    } ));
                    t.Fixture.TodayWorks();
                },
                FormatWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FormatWorks()",
                        Line: "210"
                    } ));
                    t.Fixture.FormatWorks();
                },
                IFormattableToStringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IFormattableToStringWorks()",
                        Line: "217"
                    } ));
                    t.Fixture.IFormattableToStringWorks();
                },
                LocaleFormatWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LocaleFormatWorks()",
                        Line: "225"
                    } ));
                    t.Fixture.LocaleFormatWorks();
                },
                GetFullYearWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetFullYearWorks()",
                        Line: "232"
                    } ));
                    t.Fixture.GetFullYearWorks();
                },
                GetMonthWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetMonthWorks()",
                        Line: "239"
                    } ));
                    t.Fixture.GetMonthWorks();
                },
                GetDateWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetDateWorks()",
                        Line: "246"
                    } ));
                    t.Fixture.GetDateWorks();
                },
                GetHoursWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetHoursWorks()",
                        Line: "253"
                    } ));
                    t.Fixture.GetHoursWorks();
                },
                GetMinutesWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetMinutesWorks()",
                        Line: "260"
                    } ));
                    t.Fixture.GetMinutesWorks();
                },
                GetSecondsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetSecondsWorks()",
                        Line: "267"
                    } ));
                    t.Fixture.GetSecondsWorks();
                },
                GetMillisecondsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetMillisecondsWorks()",
                        Line: "274"
                    } ));
                    t.Fixture.GetMillisecondsWorks();
                },
                GetDayWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetDayWorks()",
                        Line: "281"
                    } ));
                    t.Fixture.GetDayWorks();
                },
                GetTimeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetTimeWorks()",
                        Line: "288"
                    } ));
                    t.Fixture.GetTimeWorks();
                },
                ValueOfWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ValueOfWorks()",
                        Line: "295"
                    } ));
                    t.Fixture.ValueOfWorks();
                },
                TicksWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TicksWorks()",
                        Line: "302"
                    } ));
                    t.Fixture.TicksWorks();
                },
                GetUTCFullYearWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetUTCFullYearWorks()",
                        Line: "323"
                    } ));
                    t.Fixture.GetUTCFullYearWorks();
                },
                GetUtcMonthWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetUtcMonthWorks()",
                        Line: "330"
                    } ));
                    t.Fixture.GetUtcMonthWorks();
                },
                GetUTCDateWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetUTCDateWorks()",
                        Line: "337"
                    } ));
                    t.Fixture.GetUTCDateWorks();
                },
                GetUTCHoursWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetUTCHoursWorks()",
                        Line: "344"
                    } ));
                    t.Fixture.GetUTCHoursWorks();
                },
                GetUTCMinutesWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetUTCMinutesWorks()",
                        Line: "351"
                    } ));
                    t.Fixture.GetUTCMinutesWorks();
                },
                GetUTCSecondsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetUTCSecondsWorks()",
                        Line: "358"
                    } ));
                    t.Fixture.GetUTCSecondsWorks();
                },
                GetUTCMillisecondsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetUTCMillisecondsWorks()",
                        Line: "365"
                    } ));
                    t.Fixture.GetUTCMillisecondsWorks();
                },
                GetUTCDayWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetUTCDayWorks()",
                        Line: "372"
                    } ));
                    t.Fixture.GetUTCDayWorks();
                },
                ParseWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ParseWorks()",
                        Line: "379"
                    } ));
                    t.Fixture.ParseWorks();
                },
                ParseExactWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ParseExactWorks()",
                        Line: "386"
                    } ));
                    t.Fixture.ParseExactWorks();
                },
                ParseExactWithCultureWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ParseExactWithCultureWorks()",
                        Line: "393"
                    } ));
                    t.Fixture.ParseExactWithCultureWorks();
                },
                ParseExactUTCWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ParseExactUTCWorks()",
                        Line: "400"
                    } ));
                    t.Fixture.ParseExactUTCWorks();
                },
                ParseExactUTCWithCultureWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ParseExactUTCWithCultureWorks()",
                        Line: "410"
                    } ));
                    t.Fixture.ParseExactUTCWithCultureWorks();
                },
                ToDateStringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToDateStringWorks()",
                        Line: "420"
                    } ));
                    t.Fixture.ToDateStringWorks();
                },
                ToTimeStringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToTimeStringWorks()",
                        Line: "428"
                    } ));
                    t.Fixture.ToTimeStringWorks();
                },
                ToUTCStringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToUTCStringWorks()",
                        Line: "436"
                    } ));
                    t.Fixture.ToUTCStringWorks();
                },
                ToLocaleDateStringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToLocaleDateStringWorks()",
                        Line: "444"
                    } ));
                    t.Fixture.ToLocaleDateStringWorks();
                },
                ToLocaleTimeStringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToLocaleTimeStringWorks()",
                        Line: "452"
                    } ));
                    t.Fixture.ToLocaleTimeStringWorks();
                },
                SubtractingDatesWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SubtractingDatesWorks()",
                        Line: "471"
                    } ));
                    t.Fixture.SubtractingDatesWorks();
                },
                SubtractMethodReturningTimeSpanWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SubtractMethodReturningTimeSpanWorks()",
                        Line: "478"
                    } ));
                    t.Fixture.SubtractMethodReturningTimeSpanWorks();
                },
                DateEqualityWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DateEqualityWorks()",
                        Line: "485"
                    } ));
                    t.Fixture.DateEqualityWorks();
                },
                DateInequalityWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DateInequalityWorks()",
                        Line: "500"
                    } ));
                    t.Fixture.DateInequalityWorks();
                },
                DateLessThanWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DateLessThanWorks()",
                        Line: "515"
                    } ));
                    t.Fixture.DateLessThanWorks();
                },
                DateLessEqualWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DateLessEqualWorks()",
                        Line: "523"
                    } ));
                    t.Fixture.DateLessEqualWorks();
                },
                DateGreaterThanWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DateGreaterThanWorks()",
                        Line: "531"
                    } ));
                    t.Fixture.DateGreaterThanWorks();
                },
                DateGreaterEqualWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DateGreaterEqualWorks()",
                        Line: "539"
                    } ));
                    t.Fixture.DateGreaterEqualWorks();
                },
                GetHashCodeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetHashCodeWorks()",
                        Line: "688"
                    } ));
                    t.Fixture.GetHashCodeWorks();
                },
                EqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EqualsWorks()",
                        Line: "697"
                    } ));
                    t.Fixture.EqualsWorks();
                },
                DateTimeEqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DateTimeEqualsWorks()",
                        Line: "706"
                    } ));
                    t.Fixture.DateTimeEqualsWorks();
                },
                CompareToWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CompareToWorks()",
                        Line: "725"
                    } ));
                    t.Fixture.CompareToWorks();
                },
                DateTimes: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, 1, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DateTimes()",
                        Line: "742"
                    } ));
                    Bridge.ClientTest.SimpleTypes.JsDateTimeTests.DateTimes();
                },
                CreateUnixTimestampAndConvertBackToDateTime: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, 11, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CreateUnixTimestampAndConvertBackToDateTime()",
                        Line: "763"
                    } ));
                    t.Fixture.CreateUnixTimestampAndConvertBackToDateTime();
                },
                ToShortDateStringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToShortDateStringWorks()",
                        Line: "789"
                    } ));
                    t.Fixture.ToShortDateStringWorks();
                },
                ToShortTimeStringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsDateTimeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsDateTimeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToShortTimeStringWorks()",
                        Line: "814"
                    } ));
                    t.Fixture.ToShortTimeStringWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.SimpleTypes.JsDateTimeTests",
                        File: "Batch1\\SimpleTypes\\DateTimeTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests)],
        statics: {
            methods: {
                NonGenericParseWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NonGenericParseWorks()",
                        Line: "66"
                    } ));
                    t.Fixture.NonGenericParseWorks();
                },
                GenericParseWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GenericParseWorks()",
                        Line: "75"
                    } ));
                    t.Fixture.GenericParseWorks();
                },
                NonGenericParseWithCallbackWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NonGenericParseWithCallbackWorks()",
                        Line: "84"
                    } ));
                    t.Fixture.NonGenericParseWithCallbackWorks();
                },
                GenericParseWithCallbackWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GenericParseWithCallbackWorks()",
                        Line: "93"
                    } ));
                    t.Fixture.GenericParseWithCallbackWorks();
                },
                NonGenericParseWorks3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NonGenericParseWorks3()",
                        Line: "102"
                    } ));
                    t.Fixture.NonGenericParseWorks3();
                },
                GenericParseWorks3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GenericParseWorks3()",
                        Line: "113"
                    } ));
                    t.Fixture.GenericParseWorks3();
                },
                NonGenericParseWithCallbackWorks3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NonGenericParseWithCallbackWorks3()",
                        Line: "124"
                    } ));
                    t.Fixture.NonGenericParseWithCallbackWorks3();
                },
                GenericParseWithCallbackWorks3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GenericParseWithCallbackWorks3()",
                        Line: "135"
                    } ));
                    t.Fixture.GenericParseWithCallbackWorks3();
                },
                NonGenericParseWorks4: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NonGenericParseWorks4()",
                        Line: "146"
                    } ));
                    t.Fixture.NonGenericParseWorks4();
                },
                GenericParseWorks4: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GenericParseWorks4()",
                        Line: "157"
                    } ));
                    t.Fixture.GenericParseWorks4();
                },
                NonGenericParseWithCallbackWorks4: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NonGenericParseWithCallbackWorks4()",
                        Line: "168"
                    } ));
                    t.Fixture.NonGenericParseWithCallbackWorks4();
                },
                GenericParseWithCallbackWorks4: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GenericParseWithCallbackWorks4()",
                        Line: "179"
                    } ));
                    t.Fixture.GenericParseWithCallbackWorks4();
                },
                StringifyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StringifyWorks()",
                        Line: "190"
                    } ));
                    t.Fixture.StringifyWorks();
                },
                StringifyWithSerializableMembersArrayWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StringifyWithSerializableMembersArrayWorks()",
                        Line: "196"
                    } ));
                    t.Fixture.StringifyWithSerializableMembersArrayWorks();
                },
                StringifyWithSerializableMembersArrayAndIntentCountWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StringifyWithSerializableMembersArrayAndIntentCountWorks()",
                        Line: "202"
                    } ));
                    t.Fixture.StringifyWithSerializableMembersArrayAndIntentCountWorks();
                },
                StringifyWithSerializableMembersArrayAndIntentTextWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StringifyWithSerializableMembersArrayAndIntentTextWorks()",
                        Line: "208"
                    } ));
                    t.Fixture.StringifyWithSerializableMembersArrayAndIntentTextWorks();
                },
                StringifyWithCallbackWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StringifyWithCallbackWorks()",
                        Line: "214"
                    } ));
                    t.Fixture.StringifyWithCallbackWorks();
                },
                StringifyWithCallbackAndIndentCountWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StringifyWithCallbackAndIndentCountWorks()",
                        Line: "220"
                    } ));
                    t.Fixture.StringifyWithCallbackAndIndentCountWorks();
                },
                StringifyWithCallbackAndIndentTextWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StringifyWithCallbackAndIndentTextWorks()",
                        Line: "226"
                    } ));
                    t.Fixture.StringifyWithCallbackAndIndentTextWorks();
                },
                StringifyWithSerializableMembersArrayWorks3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StringifyWithSerializableMembersArrayWorks3()",
                        Line: "232"
                    } ));
                    t.Fixture.StringifyWithSerializableMembersArrayWorks3();
                },
                StringifyWithSerializableMembersArrayAndIntentCountWorks3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StringifyWithSerializableMembersArrayAndIntentCountWorks3()",
                        Line: "238"
                    } ));
                    t.Fixture.StringifyWithSerializableMembersArrayAndIntentCountWorks3();
                },
                StringifyWithSerializableMembersArrayAndIntentTextWorks3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StringifyWithSerializableMembersArrayAndIntentTextWorks3()",
                        Line: "244"
                    } ));
                    t.Fixture.StringifyWithSerializableMembersArrayAndIntentTextWorks3();
                },
                StringifyWithCallbackWorks3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StringifyWithCallbackWorks3()",
                        Line: "250"
                    } ));
                    t.Fixture.StringifyWithCallbackWorks3();
                },
                StringifyWithCallbackAndIndentCountWorks3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StringifyWithCallbackAndIndentCountWorks3()",
                        Line: "256"
                    } ));
                    t.Fixture.StringifyWithCallbackAndIndentCountWorks3();
                },
                StringifyWithCallbackAndIndentTextWorks3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StringifyWithCallbackAndIndentTextWorks3()",
                        Line: "262"
                    } ));
                    t.Fixture.StringifyWithCallbackAndIndentTextWorks3();
                },
                StringifyWithSerializableMembersArrayWorks4: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StringifyWithSerializableMembersArrayWorks4()",
                        Line: "268"
                    } ));
                    t.Fixture.StringifyWithSerializableMembersArrayWorks4();
                },
                StringifyWithSerializableMembersArrayAndIntentCountWorks4: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StringifyWithSerializableMembersArrayAndIntentCountWorks4()",
                        Line: "274"
                    } ));
                    t.Fixture.StringifyWithSerializableMembersArrayAndIntentCountWorks4();
                },
                StringifyWithSerializableMembersArrayAndIntentTextWorks4: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StringifyWithSerializableMembersArrayAndIntentTextWorks4()",
                        Line: "280"
                    } ));
                    t.Fixture.StringifyWithSerializableMembersArrayAndIntentTextWorks4();
                },
                StringifyWithCallbackWorks4: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StringifyWithCallbackWorks4()",
                        Line: "286"
                    } ));
                    t.Fixture.StringifyWithCallbackWorks4();
                },
                StringifyWithCallbackAndIndentCountWorks4: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StringifyWithCallbackAndIndentCountWorks4()",
                        Line: "292"
                    } ));
                    t.Fixture.StringifyWithCallbackAndIndentCountWorks4();
                },
                StringifyWithCallbackAndIndentTextWorks4: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.JsonTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsonTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StringifyWithCallbackAndIndentTextWorks4()",
                        Line: "298"
                    } ));
                    t.Fixture.StringifyWithCallbackAndIndentTextWorks4();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.JsonTests",
                        File: "Batch1\\Serialization\\JsonTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests)],
        statics: {
            methods: {
                CharAtWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CharAtWorks()",
                        Line: "11"
                    } ));
                    t.Fixture.CharAtWorks();
                },
                CharCodeAtWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CharCodeAtWorks()",
                        Line: "17"
                    } ));
                    t.Fixture.CharCodeAtWorks();
                },
                FromCharCodeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromCharCodeWorks()",
                        Line: "23"
                    } ));
                    t.Fixture.FromCharCodeWorks();
                },
                LocaleCompareWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LocaleCompareWorks()",
                        Line: "33"
                    } ));
                    t.Fixture.LocaleCompareWorks();
                },
                SliceWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SliceWorks()",
                        Line: "42"
                    } ));
                    t.Fixture.SliceWorks();
                },
                SplitWithCharWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SplitWithCharWorks()",
                        Line: "66"
                    } ));
                    t.Fixture.SplitWithCharWorks();
                },
                SplitWithLimitWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SplitWithLimitWorks()",
                        Line: "72"
                    } ));
                    t.Fixture.SplitWithLimitWorks();
                },
                SplitWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SplitWorks()",
                        Line: "78"
                    } ));
                    t.Fixture.SplitWorks();
                },
                SplitWithCharAndLimitWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SplitWithCharAndLimitWorks()",
                        Line: "84"
                    } ));
                    t.Fixture.SplitWithCharAndLimitWorks();
                },
                SplitWithStringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SplitWithStringWorks()",
                        Line: "91"
                    } ));
                    t.Fixture.SplitWithStringWorks();
                },
                JsSplitWithStringAndLimitWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "JsSplitWithStringAndLimitWorks()",
                        Line: "99"
                    } ));
                    t.Fixture.JsSplitWithStringAndLimitWorks();
                },
                SubstrWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SubstrWorks()",
                        Line: "106"
                    } ));
                    t.Fixture.SubstrWorks();
                },
                JavaScriptSubstringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "JavaScriptSubstringWorks()",
                        Line: "133"
                    } ));
                    t.Fixture.JavaScriptSubstringWorks();
                },
                Strings: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.JsStringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.JsStringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Strings()",
                        Line: "159"
                    } ));
                    Bridge.ClientTest.SimpleTypes.JsStringTests.Strings();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.SimpleTypes.JsStringTests",
                        File: "Batch1\\SimpleTypes\\JsStringTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.KeyNotFoundExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.KeyNotFoundExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.KeyNotFoundExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.KeyNotFoundExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "11"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.KeyNotFoundExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.KeyNotFoundExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorWorks()",
                        Line: "20"
                    } ));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithMessageWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.KeyNotFoundExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.KeyNotFoundExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageWorks()",
                        Line: "29"
                    } ));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.KeyNotFoundExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.KeyNotFoundExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageAndInnerExceptionWorks()",
                        Line: "38"
                    } ));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Exceptions.KeyNotFoundExceptionTests",
                        File: "Batch1\\Exceptions\\KeyNotFoundExceptionTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ListTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "33"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorWorks()",
                        Line: "48"
                    } ));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithCapacityWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithCapacityWorks()",
                        Line: "55"
                    } ));
                    t.Fixture.ConstructorWithCapacityWorks();
                },
                ConstructingFromArrayWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructingFromArrayWorks()",
                        Line: "62"
                    } ));
                    t.Fixture.ConstructingFromArrayWorks();
                },
                ConstructingFromListWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructingFromListWorks()",
                        Line: "71"
                    } ));
                    t.Fixture.ConstructingFromListWorks();
                },
                ConstructingFromIEnumerableWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructingFromIEnumerableWorks()",
                        Line: "80"
                    } ));
                    t.Fixture.ConstructingFromIEnumerableWorks();
                },
                CountWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CountWorks()",
                        Line: "89"
                    } ));
                    t.Fixture.CountWorks();
                },
                IndexingWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexingWorks()",
                        Line: "97"
                    } ));
                    t.Fixture.IndexingWorks();
                },
                ForeachWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ForeachWorks()",
                        Line: "104"
                    } ));
                    t.Fixture.ForeachWorks();
                },
                GetEnumeratorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetEnumeratorWorks()",
                        Line: "115"
                    } ));
                    t.Fixture.GetEnumeratorWorks();
                },
                AddWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AddWorks()",
                        Line: "126"
                    } ));
                    t.Fixture.AddWorks();
                },
                AddRangeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AddRangeWorks()",
                        Line: "134"
                    } ));
                    t.Fixture.AddRangeWorks();
                },
                BinarySearch1Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "BinarySearch1Works()",
                        Line: "142"
                    } ));
                    t.Fixture.BinarySearch1Works();
                },
                BinarySearch2Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "BinarySearch2Works()",
                        Line: "151"
                    } ));
                    t.Fixture.BinarySearch2Works();
                },
                BinarySearch3Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "BinarySearch3Works()",
                        Line: "168"
                    } ));
                    t.Fixture.BinarySearch3Works();
                },
                BinarySearch4Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "BinarySearch4Works()",
                        Line: "177"
                    } ));
                    t.Fixture.BinarySearch4Works();
                },
                ClearWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClearWorks()",
                        Line: "186"
                    } ));
                    t.Fixture.ClearWorks();
                },
                ContainsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ContainsWorks()",
                        Line: "194"
                    } ));
                    t.Fixture.ContainsWorks();
                },
                ContainsUsesEqualsMethod: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ContainsUsesEqualsMethod()",
                        Line: "202"
                    } ));
                    t.Fixture.ContainsUsesEqualsMethod();
                },
                CopyToMethodSameBound: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CopyToMethodSameBound()",
                        Line: "210"
                    } ));
                    t.Fixture.CopyToMethodSameBound();
                },
                CopyToMethodOffsetBound: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CopyToMethodOffsetBound()",
                        Line: "223"
                    } ));
                    t.Fixture.CopyToMethodOffsetBound();
                },
                CopyToMethodIllegalBound: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CopyToMethodIllegalBound()",
                        Line: "238"
                    } ));
                    t.Fixture.CopyToMethodIllegalBound();
                },
                SliceWithoutEndWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SliceWithoutEndWorks()",
                        Line: "254"
                    } ));
                    t.Fixture.SliceWithoutEndWorks();
                },
                SliceWithEndWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SliceWithEndWorks()",
                        Line: "260"
                    } ));
                    t.Fixture.SliceWithEndWorks();
                },
                ForeachWithListItemCallbackWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ForeachWithListItemCallbackWorks()",
                        Line: "266"
                    } ));
                    t.Fixture.ForeachWithListItemCallbackWorks();
                },
                ForeachWithListCallbackWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ForeachWithListCallbackWorks()",
                        Line: "274"
                    } ));
                    t.Fixture.ForeachWithListCallbackWorks();
                },
                IndexOfWithoutStartIndexWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexOfWithoutStartIndexWorks()",
                        Line: "282"
                    } ));
                    t.Fixture.IndexOfWithoutStartIndexWorks();
                },
                IndexOfWithoutStartIndexUsesEqualsMethod: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexOfWithoutStartIndexUsesEqualsMethod()",
                        Line: "288"
                    } ));
                    t.Fixture.IndexOfWithoutStartIndexUsesEqualsMethod();
                },
                IndexOfWithStartIndexWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexOfWithStartIndexWorks()",
                        Line: "296"
                    } ));
                    t.Fixture.IndexOfWithStartIndexWorks();
                },
                IndexOfWithStartIndexUsesEqualsMethod: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexOfWithStartIndexUsesEqualsMethod()",
                        Line: "302"
                    } ));
                    t.Fixture.IndexOfWithStartIndexUsesEqualsMethod();
                },
                InsertWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InsertWorks()",
                        Line: "308"
                    } ));
                    t.Fixture.InsertWorks();
                },
                InsertRangeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InsertRangeWorks()",
                        Line: "316"
                    } ));
                    t.Fixture.InsertRangeWorks();
                },
                JoinWithoutDelimiterWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "JoinWithoutDelimiterWorks()",
                        Line: "328"
                    } ));
                    t.Fixture.JoinWithoutDelimiterWorks();
                },
                JoinWithDelimiterWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "JoinWithDelimiterWorks()",
                        Line: "334"
                    } ));
                    t.Fixture.JoinWithDelimiterWorks();
                },
                RemoveWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RemoveWorks()",
                        Line: "340"
                    } ));
                    t.Fixture.RemoveWorks();
                },
                RemoveReturnsFalseIfTheElementWasNotFound: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RemoveReturnsFalseIfTheElementWasNotFound()",
                        Line: "348"
                    } ));
                    t.Fixture.RemoveReturnsFalseIfTheElementWasNotFound();
                },
                RemoveCanRemoveNullItem: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RemoveCanRemoveNullItem()",
                        Line: "356"
                    } ));
                    t.Fixture.RemoveCanRemoveNullItem();
                },
                RemoveUsesEqualsMethod: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RemoveUsesEqualsMethod()",
                        Line: "364"
                    } ));
                    t.Fixture.RemoveUsesEqualsMethod();
                },
                RemoveAtWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RemoveAtWorks()",
                        Line: "374"
                    } ));
                    t.Fixture.RemoveAtWorks();
                },
                RemoveRangeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RemoveRangeWorks()",
                        Line: "382"
                    } ));
                    t.Fixture.RemoveRangeWorks();
                },
                ReverseWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ReverseWorks()",
                        Line: "390"
                    } ));
                    t.Fixture.ReverseWorks();
                },
                SortWithDefaultCompareWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SortWithDefaultCompareWorks()",
                        Line: "398"
                    } ));
                    t.Fixture.SortWithDefaultCompareWorks();
                },
                SortWithCompareCallbackWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SortWithCompareCallbackWorks()",
                        Line: "406"
                    } ));
                    t.Fixture.SortWithCompareCallbackWorks();
                },
                SortWithIComparerWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SortWithIComparerWorks()",
                        Line: "414"
                    } ));
                    t.Fixture.SortWithIComparerWorks();
                },
                ForeachWhenCastToIEnumerableWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ForeachWhenCastToIEnumerableWorks()",
                        Line: "422"
                    } ));
                    t.Fixture.ForeachWhenCastToIEnumerableWorks();
                },
                IEnumerableGetEnumeratorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IEnumerableGetEnumeratorWorks()",
                        Line: "434"
                    } ));
                    t.Fixture.IEnumerableGetEnumeratorWorks();
                },
                ICollectionCountWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionCountWorks()",
                        Line: "446"
                    } ));
                    t.Fixture.ICollectionCountWorks();
                },
                ICollectionAddWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionAddWorks()",
                        Line: "453"
                    } ));
                    t.Fixture.ICollectionAddWorks();
                },
                ICollectionClearWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionClearWorks()",
                        Line: "461"
                    } ));
                    t.Fixture.ICollectionClearWorks();
                },
                ICollectionContainsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionContainsWorks()",
                        Line: "469"
                    } ));
                    t.Fixture.ICollectionContainsWorks();
                },
                ICollectionContainsUsesEqualsMethod: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionContainsUsesEqualsMethod()",
                        Line: "477"
                    } ));
                    t.Fixture.ICollectionContainsUsesEqualsMethod();
                },
                ICollectionRemoveWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionRemoveWorks()",
                        Line: "485"
                    } ));
                    t.Fixture.ICollectionRemoveWorks();
                },
                ICollectionRemoveCanRemoveNullItem: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionRemoveCanRemoveNullItem()",
                        Line: "496"
                    } ));
                    t.Fixture.ICollectionRemoveCanRemoveNullItem();
                },
                ICollectionRemoveUsesEqualsMethod: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionRemoveUsesEqualsMethod()",
                        Line: "504"
                    } ));
                    t.Fixture.ICollectionRemoveUsesEqualsMethod();
                },
                IListIndexingWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IListIndexingWorks()",
                        Line: "514"
                    } ));
                    t.Fixture.IListIndexingWorks();
                },
                IListIndexOfWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IListIndexOfWorks()",
                        Line: "523"
                    } ));
                    t.Fixture.IListIndexOfWorks();
                },
                IListIndexOfUsesEqualsMethod: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IListIndexOfUsesEqualsMethod()",
                        Line: "531"
                    } ));
                    t.Fixture.IListIndexOfUsesEqualsMethod();
                },
                IListInsertWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IListInsertWorks()",
                        Line: "539"
                    } ));
                    t.Fixture.IListInsertWorks();
                },
                IListRemoveAtWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IListRemoveAtWorks()",
                        Line: "547"
                    } ));
                    t.Fixture.IListRemoveAtWorks();
                },
                ToArrayWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToArrayWorks()",
                        Line: "555"
                    } ));
                    t.Fixture.ToArrayWorks();
                },
                IReadOnlyCollectionCountWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IReadOnlyCollectionCountWorks()",
                        Line: "567"
                    } ));
                    t.Fixture.IReadOnlyCollectionCountWorks();
                },
                IReadOnlyCollectionGetEnumeratorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IReadOnlyCollectionGetEnumeratorWorks()",
                        Line: "574"
                    } ));
                    t.Fixture.IReadOnlyCollectionGetEnumeratorWorks();
                },
                IReadOnlyListIndexingWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IReadOnlyListIndexingWorks()",
                        Line: "586"
                    } ));
                    t.Fixture.IReadOnlyListIndexingWorks();
                },
                IReadOnlyListCountWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IReadOnlyListCountWorks()",
                        Line: "593"
                    } ));
                    t.Fixture.IReadOnlyListCountWorks();
                },
                IReadOnlyListGetEnumeratorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ListTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ListTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IReadOnlyListGetEnumeratorWorks()",
                        Line: "600"
                    } ));
                    t.Fixture.IReadOnlyListGetEnumeratorWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Collections.Generic.ListTests",
                        File: "Batch1\\Collections\\Generic\\ListTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.MathTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests)],
        statics: {
            methods: {
                ConstantsWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstantsWork()",
                        Line: "33"
                    } ));
                    t.Fixture.ConstantsWork();
                },
                ConstantsWork_N2473: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstantsWork_N2473()",
                        Line: "41"
                    } ));
                    t.Fixture.ConstantsWork_N2473();
                },
                AbsOfDoubleWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AbsOfDoubleWorks()",
                        Line: "48"
                    } ));
                    t.Fixture.AbsOfDoubleWorks();
                },
                AbsOfIntWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AbsOfIntWorks()",
                        Line: "54"
                    } ));
                    t.Fixture.AbsOfIntWorks();
                },
                AbsOfLongWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AbsOfLongWorks()",
                        Line: "60"
                    } ));
                    t.Fixture.AbsOfLongWorks();
                },
                AbsOfSbyteWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AbsOfSbyteWorks()",
                        Line: "66"
                    } ));
                    t.Fixture.AbsOfSbyteWorks();
                },
                AbsOfShortWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AbsOfShortWorks()",
                        Line: "72"
                    } ));
                    t.Fixture.AbsOfShortWorks();
                },
                AbsOfFloatWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AbsOfFloatWorks()",
                        Line: "78"
                    } ));
                    t.Fixture.AbsOfFloatWorks();
                },
                AbsOfDecimalWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AbsOfDecimalWorks()",
                        Line: "84"
                    } ));
                    t.Fixture.AbsOfDecimalWorks();
                },
                AcosWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AcosWorks()",
                        Line: "90"
                    } ));
                    t.Fixture.AcosWorks();
                },
                AsinWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AsinWorks()",
                        Line: "96"
                    } ));
                    t.Fixture.AsinWorks();
                },
                AtanWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AtanWorks()",
                        Line: "102"
                    } ));
                    t.Fixture.AtanWorks();
                },
                Atan2Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Atan2Works()",
                        Line: "108"
                    } ));
                    t.Fixture.Atan2Works();
                },
                CosWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CosWorks()",
                        Line: "114"
                    } ));
                    t.Fixture.CosWorks();
                },
                DivRemWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DivRemWorks()",
                        Line: "120"
                    } ));
                    t.Fixture.DivRemWorks();
                },
                ExpWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ExpWorks()",
                        Line: "143"
                    } ));
                    t.Fixture.ExpWorks();
                },
                FloorOfDoubleWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FloorOfDoubleWorks()",
                        Line: "149"
                    } ));
                    t.Fixture.FloorOfDoubleWorks();
                },
                FloorOfDecimalWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FloorOfDecimalWorks()",
                        Line: "156"
                    } ));
                    t.Fixture.FloorOfDecimalWorks();
                },
                LogWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LogWorks()",
                        Line: "163"
                    } ));
                    t.Fixture.LogWorks();
                },
                MaxOfByteWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MaxOfByteWorks()",
                        Line: "169"
                    } ));
                    t.Fixture.MaxOfByteWorks();
                },
                MaxOfDecimalWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MaxOfDecimalWorks()",
                        Line: "176"
                    } ));
                    t.Fixture.MaxOfDecimalWorks();
                },
                MaxOfDoubleWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MaxOfDoubleWorks()",
                        Line: "183"
                    } ));
                    t.Fixture.MaxOfDoubleWorks();
                },
                MaxOfShortWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MaxOfShortWorks()",
                        Line: "190"
                    } ));
                    t.Fixture.MaxOfShortWorks();
                },
                MaxOfIntWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MaxOfIntWorks()",
                        Line: "197"
                    } ));
                    t.Fixture.MaxOfIntWorks();
                },
                MaxOfLongWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MaxOfLongWorks()",
                        Line: "204"
                    } ));
                    t.Fixture.MaxOfLongWorks();
                },
                MaxOfSByteWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MaxOfSByteWorks()",
                        Line: "211"
                    } ));
                    t.Fixture.MaxOfSByteWorks();
                },
                MaxOfFloatWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MaxOfFloatWorks()",
                        Line: "218"
                    } ));
                    t.Fixture.MaxOfFloatWorks();
                },
                MaxOfUShortWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MaxOfUShortWorks()",
                        Line: "225"
                    } ));
                    t.Fixture.MaxOfUShortWorks();
                },
                MaxOfUIntWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MaxOfUIntWorks()",
                        Line: "232"
                    } ));
                    t.Fixture.MaxOfUIntWorks();
                },
                MaxOfULongWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MaxOfULongWorks()",
                        Line: "239"
                    } ));
                    t.Fixture.MaxOfULongWorks();
                },
                MinOfByteWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MinOfByteWorks()",
                        Line: "246"
                    } ));
                    t.Fixture.MinOfByteWorks();
                },
                MinOfDecimalWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MinOfDecimalWorks()",
                        Line: "253"
                    } ));
                    t.Fixture.MinOfDecimalWorks();
                },
                MinOfDoubleWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MinOfDoubleWorks()",
                        Line: "260"
                    } ));
                    t.Fixture.MinOfDoubleWorks();
                },
                MinOfShortWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MinOfShortWorks()",
                        Line: "267"
                    } ));
                    t.Fixture.MinOfShortWorks();
                },
                MinOfIntWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MinOfIntWorks()",
                        Line: "274"
                    } ));
                    t.Fixture.MinOfIntWorks();
                },
                MinOfLongWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MinOfLongWorks()",
                        Line: "281"
                    } ));
                    t.Fixture.MinOfLongWorks();
                },
                MinOfSByteWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MinOfSByteWorks()",
                        Line: "288"
                    } ));
                    t.Fixture.MinOfSByteWorks();
                },
                MinOfFloatWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MinOfFloatWorks()",
                        Line: "295"
                    } ));
                    t.Fixture.MinOfFloatWorks();
                },
                MinOfUShortWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MinOfUShortWorks()",
                        Line: "302"
                    } ));
                    t.Fixture.MinOfUShortWorks();
                },
                MinOfUIntWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MinOfUIntWorks()",
                        Line: "309"
                    } ));
                    t.Fixture.MinOfUIntWorks();
                },
                MinOfULongWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MinOfULongWorks()",
                        Line: "316"
                    } ));
                    t.Fixture.MinOfULongWorks();
                },
                PowWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PowWorks()",
                        Line: "323"
                    } ));
                    t.Fixture.PowWorks();
                },
                RandomWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RandomWorks()",
                        Line: "332"
                    } ));
                    t.Fixture.RandomWorks();
                },
                RoundOfDoubleWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RoundOfDoubleWorks()",
                        Line: "343"
                    } ));
                    t.Fixture.RoundOfDoubleWorks();
                },
                RoundDecimalWithModeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RoundDecimalWithModeWorks()",
                        Line: "354"
                    } ));
                    t.Fixture.RoundDecimalWithModeWorks();
                },
                RoundDecimalWithPrecisionAndModeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RoundDecimalWithPrecisionAndModeWorks()",
                        Line: "428"
                    } ));
                    t.Fixture.RoundDecimalWithPrecisionAndModeWorks();
                },
                RoundDoubleWithModeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RoundDoubleWithModeWorks()",
                        Line: "502"
                    } ));
                    t.Fixture.RoundDoubleWithModeWorks();
                },
                RoundDoubleWithPrecisionAndModeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RoundDoubleWithPrecisionAndModeWorks()",
                        Line: "576"
                    } ));
                    t.Fixture.RoundDoubleWithPrecisionAndModeWorks();
                },
                JsRoundWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "JsRoundWorks()",
                        Line: "650"
                    } ));
                    t.Fixture.JsRoundWorks();
                },
                IEEERemainderWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IEEERemainderWorks()",
                        Line: "661"
                    } ));
                    t.Fixture.IEEERemainderWorks();
                },
                SinWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SinWorks()",
                        Line: "671"
                    } ));
                    t.Fixture.SinWorks();
                },
                SqrtWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SqrtWorks()",
                        Line: "677"
                    } ));
                    t.Fixture.SqrtWorks();
                },
                TanWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MathTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MathTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TanWorks()",
                        Line: "683"
                    } ));
                    t.Fixture.TanWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.MathTests",
                        File: "Batch1\\MathTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.MixinTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MixinTests)],
        statics: {
            methods: {
                TestGlobalMethods: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MixinTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MixinTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestGlobalMethods()",
                        Line: "19"
                    } ));
                    t.Fixture.TestGlobalMethods();
                },
                TestMixin: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MixinTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MixinTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestMixin()",
                        Line: "34"
                    } ));
                    t.Fixture.TestMixin();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.MixinTests",
                        File: "Batch1\\MixinTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "12"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                LengthWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LengthWorks()",
                        Line: "21"
                    } ));
                    t.Fixture.LengthWorks();
                },
                GetValueWorksForUninitializedElement: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetValueWorksForUninitializedElement()",
                        Line: "28"
                    } ));
                    t.Fixture.GetValueWorksForUninitializedElement();
                },
                GetValueByIndexWorksForUninitializedElement: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetValueByIndexWorksForUninitializedElement()",
                        Line: "35"
                    } ));
                    t.Fixture.GetValueByIndexWorksForUninitializedElement();
                },
                SettingValueByIndexWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SettingValueByIndexWorks()",
                        Line: "42"
                    } ));
                    t.Fixture.SettingValueByIndexWorks();
                },
                SetValueWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetValueWorks()",
                        Line: "60"
                    } ));
                    t.Fixture.SetValueWorks();
                },
                GetValueWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetValueWorks()",
                        Line: "92"
                    } ));
                    t.Fixture.GetValueWorks();
                },
                GettingValueByIndexWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GettingValueByIndexWorks()",
                        Line: "104"
                    } ));
                    t.Fixture.GettingValueByIndexWorks();
                },
                GetLengthWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetLengthWorks()",
                        Line: "116"
                    } ));
                    t.Fixture.GetLengthWorks();
                },
                GetLowerBoundWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetLowerBoundWorks()",
                        Line: "125"
                    } ));
                    t.Fixture.GetLowerBoundWorks();
                },
                GetUpperBoundWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetUpperBoundWorks()",
                        Line: "134"
                    } ));
                    t.Fixture.GetUpperBoundWorks();
                },
                ForeachWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ForeachWorks()",
                        Line: "143"
                    } ));
                    t.Fixture.ForeachWorks();
                },
                RankWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RankWorks()",
                        Line: "155"
                    } ));
                    t.Fixture.RankWorks();
                },
                GetValueWithIndexOutOfRangeThrowsAnException: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetValueWithIndexOutOfRangeThrowsAnException()",
                        Line: "162"
                    } ));
                    t.Fixture.GetValueWithIndexOutOfRangeThrowsAnException();
                },
                SetValueWithIndexOutOfRangeThrowsAnException: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MultidimArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MultidimArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetValueWithIndexOutOfRangeThrowsAnException()",
                        Line: "177"
                    } ));
                    t.Fixture.SetValueWithIndexOutOfRangeThrowsAnException();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.MultidimArrayTests",
                        File: "Batch1\\MultidimArrayTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.MutationObserverTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MutationObserverTests)],
        statics: {
            methods: {
                TestNewlyAttachedElements: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.MutationObserverTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.MutationObserverTests, 10, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestNewlyAttachedElements()",
                        Line: "22"
                    } ));
                    t.Fixture.TestNewlyAttachedElements();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.MutationObserverTests",
                        File: "Batch1\\MutationObserverTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.NotImplementedExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NotImplementedExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NotImplementedExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NotImplementedExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "10"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NotImplementedExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NotImplementedExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorWorks()",
                        Line: "19"
                    } ));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithMessageWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NotImplementedExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NotImplementedExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageWorks()",
                        Line: "28"
                    } ));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NotImplementedExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NotImplementedExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageAndInnerExceptionWorks()",
                        Line: "37"
                    } ));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Exceptions.NotImplementedExceptionTests",
                        File: "Batch1\\Exceptions\\NotImplementedExceptionTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.NotSupportedExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NotSupportedExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NotSupportedExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NotSupportedExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "10"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NotSupportedExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NotSupportedExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorWorks()",
                        Line: "19"
                    } ));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithMessageWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NotSupportedExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NotSupportedExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageWorks()",
                        Line: "28"
                    } ));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NotSupportedExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NotSupportedExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageAndInnerExceptionWorks()",
                        Line: "37"
                    } ));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Exceptions.NotSupportedExceptionTests",
                        File: "Batch1\\Exceptions\\NotSupportedExceptionTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "17"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                ConvertingToNullableWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConvertingToNullableWorks()",
                        Line: "32"
                    } ));
                    t.Fixture.ConvertingToNullableWorks();
                },
                HasValueWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "HasValueWorks()",
                        Line: "42"
                    } ));
                    t.Fixture.HasValueWorks();
                },
                BoxingWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "BoxingWorks()",
                        Line: "50"
                    } ));
                    t.Fixture.BoxingWorks();
                },
                UnboxingWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "UnboxingWorks()",
                        Line: "58"
                    } ));
                    t.Fixture.UnboxingWorks();
                },
                ValueWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ValueWorks()",
                        Line: "73"
                    } ));
                    t.Fixture.ValueWorks();
                },
                UnboxingValueOfWrongTypeThrowsAnException: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "UnboxingValueOfWrongTypeThrowsAnException()",
                        Line: "88"
                    } ));
                    t.Fixture.UnboxingValueOfWrongTypeThrowsAnException();
                },
                GetValueOrDefaultWithArgWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetValueOrDefaultWithArgWorks()",
                        Line: "98"
                    } ));
                    t.Fixture.GetValueOrDefaultWithArgWorks();
                },
                LiftedEqualityWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LiftedEqualityWorks()",
                        Line: "106"
                    } ));
                    t.Fixture.LiftedEqualityWorks();
                },
                LiftedInequalityWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LiftedInequalityWorks()",
                        Line: "116"
                    } ));
                    t.Fixture.LiftedInequalityWorks();
                },
                LiftedLessThanWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LiftedLessThanWorks()",
                        Line: "126"
                    } ));
                    t.Fixture.LiftedLessThanWorks();
                },
                LiftedGreaterThanWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LiftedGreaterThanWorks()",
                        Line: "136"
                    } ));
                    t.Fixture.LiftedGreaterThanWorks();
                },
                LiftedLessThanOrEqualWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LiftedLessThanOrEqualWorks()",
                        Line: "146"
                    } ));
                    t.Fixture.LiftedLessThanOrEqualWorks();
                },
                LiftedGreaterThanOrEqualWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LiftedGreaterThanOrEqualWorks()",
                        Line: "156"
                    } ));
                    t.Fixture.LiftedGreaterThanOrEqualWorks();
                },
                LiftedSubtractionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LiftedSubtractionWorks()",
                        Line: "166"
                    } ));
                    t.Fixture.LiftedSubtractionWorks();
                },
                LiftedAdditionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LiftedAdditionWorks()",
                        Line: "174"
                    } ));
                    t.Fixture.LiftedAdditionWorks();
                },
                LiftedModWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LiftedModWorks()",
                        Line: "182"
                    } ));
                    t.Fixture.LiftedModWorks();
                },
                LiftedFloatingPointDivisionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LiftedFloatingPointDivisionWorks()",
                        Line: "190"
                    } ));
                    t.Fixture.LiftedFloatingPointDivisionWorks();
                },
                LiftedIntegerDivisionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LiftedIntegerDivisionWorks()",
                        Line: "198"
                    } ));
                    t.Fixture.LiftedIntegerDivisionWorks();
                },
                LiftedMultiplicationWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LiftedMultiplicationWorks()",
                        Line: "206"
                    } ));
                    t.Fixture.LiftedMultiplicationWorks();
                },
                LiftedBitwiseAndWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LiftedBitwiseAndWorks()",
                        Line: "214"
                    } ));
                    t.Fixture.LiftedBitwiseAndWorks();
                },
                LiftedBitwiseOrWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LiftedBitwiseOrWorks()",
                        Line: "222"
                    } ));
                    t.Fixture.LiftedBitwiseOrWorks();
                },
                LiftedBitwiseXorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LiftedBitwiseXorWorks()",
                        Line: "230"
                    } ));
                    t.Fixture.LiftedBitwiseXorWorks();
                },
                LiftedLeftShiftWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LiftedLeftShiftWorks()",
                        Line: "238"
                    } ));
                    t.Fixture.LiftedLeftShiftWorks();
                },
                LiftedSignedRightShiftWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LiftedSignedRightShiftWorks()",
                        Line: "246"
                    } ));
                    t.Fixture.LiftedSignedRightShiftWorks();
                },
                LiftedUnsignedRightShiftWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LiftedUnsignedRightShiftWorks()",
                        Line: "254"
                    } ));
                    t.Fixture.LiftedUnsignedRightShiftWorks();
                },
                LiftedBooleanAndWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LiftedBooleanAndWorks()",
                        Line: "262"
                    } ));
                    t.Fixture.LiftedBooleanAndWorks();
                },
                LiftedBooleanOrWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LiftedBooleanOrWorks()",
                        Line: "277"
                    } ));
                    t.Fixture.LiftedBooleanOrWorks();
                },
                LiftedBooleanNotWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LiftedBooleanNotWorks()",
                        Line: "292"
                    } ));
                    t.Fixture.LiftedBooleanNotWorks();
                },
                LiftedNegationWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LiftedNegationWorks()",
                        Line: "301"
                    } ));
                    t.Fixture.LiftedNegationWorks();
                },
                LiftedUnaryPlusWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LiftedUnaryPlusWorks()",
                        Line: "309"
                    } ));
                    t.Fixture.LiftedUnaryPlusWorks();
                },
                LiftedOnesComplementWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LiftedOnesComplementWorks()",
                        Line: "317"
                    } ));
                    t.Fixture.LiftedOnesComplementWorks();
                },
                CoalesceWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.NullableTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullableTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CoalesceWorks()",
                        Line: "325"
                    } ));
                    t.Fixture.CoalesceWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.NullableTests",
                        File: "Batch1\\NullableTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.NullReferenceExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NullReferenceExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NullReferenceExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullReferenceExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "10"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NullReferenceExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullReferenceExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorWorks()",
                        Line: "19"
                    } ));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithMessageWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NullReferenceExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullReferenceExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageWorks()",
                        Line: "28"
                    } ));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NullReferenceExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullReferenceExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageAndInnerExceptionWorks()",
                        Line: "37"
                    } ));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                },
                AccessingAFieldOnANullObjectCausesANullReferenceException: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.NullReferenceExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NullReferenceExceptionTests, 1, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AccessingAFieldOnANullObjectCausesANullReferenceException()",
                        Line: "47"
                    } ));
                    t.Fixture.AccessingAFieldOnANullObjectCausesANullReferenceException();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Exceptions.NullReferenceExceptionTests",
                        File: "Batch1\\Exceptions\\NullReferenceExceptionTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatInfoTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatInfoTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatInfoTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatInfoTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "11"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                GetFormatWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatInfoTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatInfoTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetFormatWorks()",
                        Line: "19"
                    } ));
                    t.Fixture.GetFormatWorks();
                },
                InvariantWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatInfoTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatInfoTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InvariantWorks()",
                        Line: "27"
                    } ));
                    t.Fixture.InvariantWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Format.NumberFormatInfoTests",
                        File: "Batch1\\Format\\NumberFormatInfoTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests)],
        statics: {
            methods: {
                CurrencyFormatSpecifierWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CurrencyFormatSpecifierWorks()",
                        Line: "12"
                    } ));
                    t.Fixture.CurrencyFormatSpecifierWorks();
                },
                DecimalFormatSpecifierWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DecimalFormatSpecifierWorks()",
                        Line: "22"
                    } ));
                    t.Fixture.DecimalFormatSpecifierWorks();
                },
                ExponentialFormatSpecifierWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ExponentialFormatSpecifierWorks()",
                        Line: "33"
                    } ));
                    t.Fixture.ExponentialFormatSpecifierWorks();
                },
                FixedPointFormatSpecifierWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FixedPointFormatSpecifierWorks()",
                        Line: "43"
                    } ));
                    t.Fixture.FixedPointFormatSpecifierWorks();
                },
                GeneralFormatSpecifierWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GeneralFormatSpecifierWorks()",
                        Line: "61"
                    } ));
                    t.Fixture.GeneralFormatSpecifierWorks();
                },
                NumericFormatSpecifierWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NumericFormatSpecifierWorks()",
                        Line: "83"
                    } ));
                    t.Fixture.NumericFormatSpecifierWorks();
                },
                PercentFormatSpecifierWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PercentFormatSpecifierWorks()",
                        Line: "94"
                    } ));
                    t.Fixture.PercentFormatSpecifierWorks();
                },
                RoundTripFormatSpecifierWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RoundTripFormatSpecifierWorks()",
                        Line: "103"
                    } ));
                    t.Fixture.RoundTripFormatSpecifierWorks();
                },
                HexadecimalFormatSpecifierWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "HexadecimalFormatSpecifierWorks()",
                        Line: "114"
                    } ));
                    t.Fixture.HexadecimalFormatSpecifierWorks();
                },
                CustomZeroFormatSpecifierWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CustomZeroFormatSpecifierWorks()",
                        Line: "127"
                    } ));
                    t.Fixture.CustomZeroFormatSpecifierWorks();
                },
                CustomHashFormatSpecifierWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CustomHashFormatSpecifierWorks()",
                        Line: "152"
                    } ));
                    t.Fixture.CustomHashFormatSpecifierWorks();
                },
                CustomDotFormatSpecifierWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CustomDotFormatSpecifierWorks()",
                        Line: "172"
                    } ));
                    t.Fixture.CustomDotFormatSpecifierWorks();
                },
                CustomCommaFormatSpecifierWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CustomCommaFormatSpecifierWorks()",
                        Line: "184"
                    } ));
                    t.Fixture.CustomCommaFormatSpecifierWorks();
                },
                CustomPercentFormatSpecifierWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CustomPercentFormatSpecifierWorks()",
                        Line: "197"
                    } ));
                    t.Fixture.CustomPercentFormatSpecifierWorks();
                },
                CustomPerMileFormatSpecifierWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CustomPerMileFormatSpecifierWorks()",
                        Line: "204"
                    } ));
                    t.Fixture.CustomPerMileFormatSpecifierWorks();
                },
                CustomEscapeFormatSpecifierWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CustomEscapeFormatSpecifierWorks()",
                        Line: "211"
                    } ));
                    t.Fixture.CustomEscapeFormatSpecifierWorks();
                },
                CustomSemicolonFormatSpecifierWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.NumberFormatSpecifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.NumberFormatSpecifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CustomSemicolonFormatSpecifierWorks()",
                        Line: "221"
                    } ));
                    t.Fixture.CustomSemicolonFormatSpecifierWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Format.NumberFormatSpecifiersTests",
                        File: "Batch1\\Format\\NumberFormatSpecifiersTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ObjectTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ObjectTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "19"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                CanGetHashCodeForObject: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ObjectTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CanGetHashCodeForObject()",
                        Line: "26"
                    } ));
                    t.Fixture.CanGetHashCodeForObject();
                },
                RepeatedCallsToGetHashCodeReturnsSameValue: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ObjectTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RepeatedCallsToGetHashCodeReturnsSameValue()",
                        Line: "34"
                    } ));
                    t.Fixture.RepeatedCallsToGetHashCodeReturnsSameValue();
                },
                ObjectIsEqualToItself: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ObjectTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ObjectIsEqualToItself()",
                        Line: "41"
                    } ));
                    t.Fixture.ObjectIsEqualToItself();
                },
                ObjectIsNotEqualToOtherObject: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ObjectTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ObjectIsNotEqualToOtherObject()",
                        Line: "48"
                    } ));
                    t.Fixture.ObjectIsNotEqualToOtherObject();
                },
                StaticEqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ObjectTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StaticEqualsWorks()",
                        Line: "54"
                    } ));
                    t.Fixture.StaticEqualsWorks();
                },
                ReferenceEqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ObjectTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ReferenceEqualsWorks()",
                        Line: "65"
                    } ));
                    t.Fixture.ReferenceEqualsWorks();
                },
                ToStringOverride: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.ObjectTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ObjectTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToStringOverride()",
                        Line: "77"
                    } ));
                    t.Fixture.ToStringOverride();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.SimpleTypes.ObjectTests",
                        File: "Batch1\\SimpleTypes\\ObjectTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OperationCanceledExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OperationCanceledExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "11"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OperationCanceledExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorWorks()",
                        Line: "20"
                    } ));
                    t.Fixture.DefaultConstructorWorks();
                },
                CancellationTokenOnlyConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OperationCanceledExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CancellationTokenOnlyConstructorWorks()",
                        Line: "30"
                    } ));
                    t.Fixture.CancellationTokenOnlyConstructorWorks();
                },
                MessageOnlyConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OperationCanceledExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MessageOnlyConstructorWorks()",
                        Line: "41"
                    } ));
                    t.Fixture.MessageOnlyConstructorWorks();
                },
                MessageAndInnerExceptionConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OperationCanceledExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MessageAndInnerExceptionConstructorWorks()",
                        Line: "51"
                    } ));
                    t.Fixture.MessageAndInnerExceptionConstructorWorks();
                },
                MessageAndCancellationTokenConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OperationCanceledExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MessageAndCancellationTokenConstructorWorks()",
                        Line: "62"
                    } ));
                    t.Fixture.MessageAndCancellationTokenConstructorWorks();
                },
                MessageAndInnerExceptionAndCancellationTokenConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OperationCanceledExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OperationCanceledExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MessageAndInnerExceptionAndCancellationTokenConstructorWorks()",
                        Line: "73"
                    } ));
                    t.Fixture.MessageAndInnerExceptionAndCancellationTokenConstructorWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Exceptions.OperationCanceledExceptionTests",
                        File: "Batch1\\Exceptions\\OperationCanceledExceptionTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.OutOfMemoryExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OutOfMemoryExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OutOfMemoryExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OutOfMemoryExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "13"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OutOfMemoryExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OutOfMemoryExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorWorks()",
                        Line: "23"
                    } ));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithMessageWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OutOfMemoryExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OutOfMemoryExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageWorks()",
                        Line: "32"
                    } ));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OutOfMemoryExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OutOfMemoryExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageAndInnerExceptionWorks()",
                        Line: "41"
                    } ));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Exceptions.OutOfMemoryExceptionTests",
                        File: "Batch1\\Exceptions\\OutOfMemoryExceptionTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.OverflowExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OverflowExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OverflowExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OverflowExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "10"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OverflowExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OverflowExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorWorks()",
                        Line: "19"
                    } ));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithMessageWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OverflowExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OverflowExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageWorks()",
                        Line: "28"
                    } ));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.OverflowExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.OverflowExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageAndInnerExceptionWorks()",
                        Line: "37"
                    } ));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Exceptions.OverflowExceptionTests",
                        File: "Batch1\\Exceptions\\OverflowExceptionTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.PromiseExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.PromiseExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.PromiseExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PromiseExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "11"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                ArgumentsOnlyConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.PromiseExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PromiseExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArgumentsOnlyConstructorWorks()",
                        Line: "20"
                    } ));
                    t.Fixture.ArgumentsOnlyConstructorWorks();
                },
                ArgumentsAndMessageConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.PromiseExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PromiseExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArgumentsAndMessageConstructorWorks()",
                        Line: "32"
                    } ));
                    t.Fixture.ArgumentsAndMessageConstructorWorks();
                },
                ArgumentsAndMessageAndInnerExceptionConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.PromiseExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PromiseExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArgumentsAndMessageAndInnerExceptionConstructorWorks()",
                        Line: "43"
                    } ));
                    t.Fixture.ArgumentsAndMessageAndInnerExceptionConstructorWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Exceptions.PromiseExceptionTests",
                        File: "Batch1\\Exceptions\\PromiseExceptionTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.PromiseTests)],
        statics: {
            methods: {
                TaskFromPromiseWithoutResultFactoryWorksWhenPromiseCompletes: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.PromiseTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests, 7, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TaskFromPromiseWithoutResultFactoryWorksWhenPromiseCompletes()",
                        Line: "132"
                    } ));
                    t.Fixture.TaskFromPromiseWithoutResultFactoryWorksWhenPromiseCompletes();
                },
                TaskFromPromiseWithResultFactoryWorksWhenPromiseCompletes: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.PromiseTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests, 7, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TaskFromPromiseWithResultFactoryWorksWhenPromiseCompletes()",
                        Line: "164"
                    } ));
                    t.Fixture.TaskFromPromiseWithResultFactoryWorksWhenPromiseCompletes();
                },
                TaskFromPromiseWorksWhenPromiseFails: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.PromiseTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests, 10, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TaskFromPromiseWorksWhenPromiseFails()",
                        Line: "203"
                    } ));
                    t.Fixture.TaskFromPromiseWorksWhenPromiseFails();
                },
                CompletingPromiseCanBeAwaited: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.PromiseTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests, 3, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CompletingPromiseCanBeAwaited()",
                        Line: "238"
                    } ));
                    t.Fixture.CompletingPromiseCanBeAwaited();
                },
                FailingPromiseCanBeAwaited: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.PromiseTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests, 4, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FailingPromiseCanBeAwaited()",
                        Line: "260"
                    } ));
                    t.Fixture.FailingPromiseCanBeAwaited();
                },
                TaskFromPromiseWithProgressWithoutResultFactoryWorksWhenPromiseProgressesAndCompletes: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.PromiseTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PromiseTests, 9, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TaskFromPromiseWithProgressWithoutResultFactoryWorksWhenPromiseProgressesAndCompletes()",
                        Line: "305"
                    } ));
                    t.Fixture.TaskFromPromiseWithProgressWithoutResultFactoryWorksWhenPromiseProgressesAndCompletes();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Threading.PromiseTests",
                        File: "Batch1\\Threading\\Tasks\\PromiseTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.PropertyAccessorTests)],
        statics: {
            methods: {
                AccessorsCanBeInvokedInstance: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.PropertyAccessorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AccessorsCanBeInvokedInstance()",
                        Line: "69"
                    } ));
                    t.Fixture.AccessorsCanBeInvokedInstance();
                },
                AccessorsCanBeInvokedStatic: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.PropertyAccessorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AccessorsCanBeInvokedStatic()",
                        Line: "87"
                    } ));
                    t.Fixture.AccessorsCanBeInvokedStatic();
                },
                AccessorsCanBeInvokedGeneric: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.PropertyAccessorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AccessorsCanBeInvokedGeneric()",
                        Line: "103"
                    } ));
                    t.Fixture.AccessorsCanBeInvokedGeneric();
                },
                AccessorsCanBeInvokedGenericStatic: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.PropertyAccessorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AccessorsCanBeInvokedGenericStatic()",
                        Line: "121"
                    } ));
                    t.Fixture.AccessorsCanBeInvokedGenericStatic();
                },
                BaseAccessorsCanBeInvoked: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.PropertyAccessorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "BaseAccessorsCanBeInvoked()",
                        Line: "137"
                    } ));
                    t.Fixture.BaseAccessorsCanBeInvoked();
                },
                BaseAccessorsCanBeInvokedGeneric: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.PropertyAccessorTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.PropertyAccessorTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "BaseAccessorsCanBeInvokedGeneric()",
                        Line: "155"
                    } ));
                    t.Fixture.BaseAccessorsCanBeInvokedGeneric();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.PropertyAccessorTests",
                        File: "Batch1\\PropertyAccessorTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RandomTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.RandomTests)],
        statics: {
            methods: {
                Unseeded: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.RandomTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RandomTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Unseeded()",
                        Line: "13"
                    } ));
                    Bridge.ClientTest.RandomTests.Unseeded();
                },
                Seeded: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.RandomTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RandomTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Seeded()",
                        Line: "37"
                    } ));
                    Bridge.ClientTest.RandomTests.Seeded();
                },
                Sample: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.RandomTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RandomTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Sample()",
                        Line: "65"
                    } ));
                    Bridge.ClientTest.RandomTests.Sample();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.RandomTests",
                        File: "Batch1\\RandomTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RankExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.RankExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.RankExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RankExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "12"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.RankExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RankExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorWorks()",
                        Line: "21"
                    } ));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithMessageWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.RankExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RankExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageWorks()",
                        Line: "30"
                    } ));
                    t.Fixture.ConstructorWithMessageWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Exceptions.RankExceptionTests",
                        File: "Batch1\\Exceptions\\RankExceptionTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "32"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                ConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWorks()",
                        Line: "45"
                    } ));
                    t.Fixture.ConstructorWorks();
                },
                CountWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CountWorks()",
                        Line: "55"
                    } ));
                    t.Fixture.CountWorks();
                },
                IndexingWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexingWorks()",
                        Line: "63"
                    } ));
                    t.Fixture.IndexingWorks();
                },
                ForeachWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ForeachWorks()",
                        Line: "71"
                    } ));
                    t.Fixture.ForeachWorks();
                },
                GetEnumeratorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetEnumeratorWorks()",
                        Line: "82"
                    } ));
                    t.Fixture.GetEnumeratorWorks();
                },
                ContainsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ContainsWorks()",
                        Line: "93"
                    } ));
                    t.Fixture.ContainsWorks();
                },
                ContainsUsesEqualsMethod: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ContainsUsesEqualsMethod()",
                        Line: "101"
                    } ));
                    t.Fixture.ContainsUsesEqualsMethod();
                },
                CopyToMethodSameBound: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CopyToMethodSameBound()",
                        Line: "109"
                    } ));
                    t.Fixture.CopyToMethodSameBound();
                },
                CopyToMethodOffsetBound: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CopyToMethodOffsetBound()",
                        Line: "122"
                    } ));
                    t.Fixture.CopyToMethodOffsetBound();
                },
                CopyToMethodIllegalBound: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CopyToMethodIllegalBound()",
                        Line: "137"
                    } ));
                    t.Fixture.CopyToMethodIllegalBound();
                },
                CopyToMethodWhenCastToIListSameBound: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CopyToMethodWhenCastToIListSameBound()",
                        Line: "153"
                    } ));
                    t.Fixture.CopyToMethodWhenCastToIListSameBound();
                },
                CopyToMethodWhenCastToIListOffsetBound: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CopyToMethodWhenCastToIListOffsetBound()",
                        Line: "166"
                    } ));
                    t.Fixture.CopyToMethodWhenCastToIListOffsetBound();
                },
                CopyToMethodWhenCastToIListIllegalBound: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CopyToMethodWhenCastToIListIllegalBound()",
                        Line: "181"
                    } ));
                    t.Fixture.CopyToMethodWhenCastToIListIllegalBound();
                },
                CopyToMethodWhenCastToICollectionSameBound: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CopyToMethodWhenCastToICollectionSameBound()",
                        Line: "197"
                    } ));
                    t.Fixture.CopyToMethodWhenCastToICollectionSameBound();
                },
                CopyToMethodWhenCastToICollectionOffsetBound: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CopyToMethodWhenCastToICollectionOffsetBound()",
                        Line: "210"
                    } ));
                    t.Fixture.CopyToMethodWhenCastToICollectionOffsetBound();
                },
                CopyToMethodWhenCastToICollectionIllegalBound: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CopyToMethodWhenCastToICollectionIllegalBound()",
                        Line: "225"
                    } ));
                    t.Fixture.CopyToMethodWhenCastToICollectionIllegalBound();
                },
                IndexOfWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexOfWorks()",
                        Line: "241"
                    } ));
                    t.Fixture.IndexOfWorks();
                },
                ForeachWhenCastToIEnumerableWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ForeachWhenCastToIEnumerableWorks()",
                        Line: "248"
                    } ));
                    t.Fixture.ForeachWhenCastToIEnumerableWorks();
                },
                IEnumerableGetEnumeratorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IEnumerableGetEnumeratorWorks()",
                        Line: "260"
                    } ));
                    t.Fixture.IEnumerableGetEnumeratorWorks();
                },
                ICollectionCountWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionCountWorks()",
                        Line: "272"
                    } ));
                    t.Fixture.ICollectionCountWorks();
                },
                ICollectionIsReadOnlyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionIsReadOnlyWorks()",
                        Line: "279"
                    } ));
                    t.Fixture.ICollectionIsReadOnlyWorks();
                },
                ICollectionContainsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionContainsWorks()",
                        Line: "286"
                    } ));
                    t.Fixture.ICollectionContainsWorks();
                },
                ICollectionContainsUsesEqualsMethod: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionContainsUsesEqualsMethod()",
                        Line: "294"
                    } ));
                    t.Fixture.ICollectionContainsUsesEqualsMethod();
                },
                IListIndexingWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IListIndexingWorks()",
                        Line: "302"
                    } ));
                    t.Fixture.IListIndexingWorks();
                },
                IListIndexOfWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IListIndexOfWorks()",
                        Line: "309"
                    } ));
                    t.Fixture.IListIndexOfWorks();
                },
                IListIndexOfUsesEqualsMethod: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IListIndexOfUsesEqualsMethod()",
                        Line: "317"
                    } ));
                    t.Fixture.IListIndexOfUsesEqualsMethod();
                },
                IListIsReadOnlyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IListIsReadOnlyWorks()",
                        Line: "325"
                    } ));
                    t.Fixture.IListIsReadOnlyWorks();
                },
                IReadOnlyCollectionCountWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IReadOnlyCollectionCountWorks()",
                        Line: "332"
                    } ));
                    t.Fixture.IReadOnlyCollectionCountWorks();
                },
                IReadOnlyCollectionGetEnumeratorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IReadOnlyCollectionGetEnumeratorWorks()",
                        Line: "339"
                    } ));
                    t.Fixture.IReadOnlyCollectionGetEnumeratorWorks();
                },
                IReadOnlyListIndexingWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IReadOnlyListIndexingWorks()",
                        Line: "351"
                    } ));
                    t.Fixture.IReadOnlyListIndexingWorks();
                },
                IReadOnlyListCountWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IReadOnlyListCountWorks()",
                        Line: "358"
                    } ));
                    t.Fixture.IReadOnlyListCountWorks();
                },
                IReadOnlyListGetEnumeratorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReadOnlyCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IReadOnlyListGetEnumeratorWorks()",
                        Line: "365"
                    } ));
                    t.Fixture.IReadOnlyListGetEnumeratorWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Collections.Generic.ReadOnlyCollectionTests",
                        File: "Batch1\\Collections\\ObjectModel\\ReadOnlyCollectionTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests)],
        statics: {
            methods: {
                GetMembersReturnsMethodsWithAnyScriptableAttributeOrReflectableAttribute: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetMembersReturnsMethodsWithAnyScriptableAttributeOrReflectableAttribute()",
                        Line: "679"
                    } ));
                    t.Fixture.GetMembersReturnsMethodsWithAnyScriptableAttributeOrReflectableAttribute();
                },
                StructMemberReflectionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StructMemberReflectionWorks()",
                        Line: "688"
                    } ));
                    t.Fixture.StructMemberReflectionWorks();
                },
                IsStaticFlagWorksForMethod: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsStaticFlagWorksForMethod()",
                        Line: "697"
                    } ));
                    t.Fixture.IsStaticFlagWorksForMethod();
                },
                MemberTypeIsMethodForMethod: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MemberTypeIsMethodForMethod()",
                        Line: "704"
                    } ));
                    t.Fixture.MemberTypeIsMethodForMethod();
                },
                IsConstructorIsFalseForMethod: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsConstructorIsFalseForMethod()",
                        Line: "711"
                    } ));
                    t.Fixture.IsConstructorIsFalseForMethod();
                },
                IsConstructorIsTrueForAllKindsOfConstructors: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsConstructorIsTrueForAllKindsOfConstructors()",
                        Line: "718"
                    } ));
                    t.Fixture.IsConstructorIsTrueForAllKindsOfConstructors();
                },
                IsStaticIsFalseForAllKindsOfConstructors: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsStaticIsFalseForAllKindsOfConstructors()",
                        Line: "732"
                    } ));
                    t.Fixture.IsStaticIsFalseForAllKindsOfConstructors();
                },
                MemberTypeIsConstructorForAllKindsOfConstructors: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MemberTypeIsConstructorForAllKindsOfConstructors()",
                        Line: "746"
                    } ));
                    t.Fixture.MemberTypeIsConstructorForAllKindsOfConstructors();
                },
                NameIsCtorForAllKindsOfConstructors: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NameIsCtorForAllKindsOfConstructors()",
                        Line: "760"
                    } ));
                    t.Fixture.NameIsCtorForAllKindsOfConstructors();
                },
                DeclaringTypeIsCorrectForAllKindsOfConstructors: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DeclaringTypeIsCorrectForAllKindsOfConstructors()",
                        Line: "774"
                    } ));
                    t.Fixture.DeclaringTypeIsCorrectForAllKindsOfConstructors();
                },
                ScriptNameIsCorrectForAllKindsOfConstructors: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ScriptNameIsCorrectForAllKindsOfConstructors()",
                        Line: "788"
                    } ));
                    t.Fixture.ScriptNameIsCorrectForAllKindsOfConstructors();
                },
                IsStaticMethodIsTrueOnlyForStaticMethodConstructors: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsStaticMethodIsTrueOnlyForStaticMethodConstructors()",
                        Line: "802"
                    } ));
                    t.Fixture.IsStaticMethodIsTrueOnlyForStaticMethodConstructors();
                },
                IsExpandParamsIsCorrectForConstructors: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsExpandParamsIsCorrectForConstructors()",
                        Line: "816"
                    } ));
                    t.Fixture.IsExpandParamsIsCorrectForConstructors();
                },
                SpecialImplementationExistsOnlyForObjectLiteralAndInlineCodeConstructors: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SpecialImplementationExistsOnlyForObjectLiteralAndInlineCodeConstructors()",
                        Line: "829"
                    } ));
                    t.Fixture.SpecialImplementationExistsOnlyForObjectLiteralAndInlineCodeConstructors();
                },
                DeclaringTypeShouldBeCorrectForMethods: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DeclaringTypeShouldBeCorrectForMethods()",
                        Line: "843"
                    } ));
                    t.Fixture.DeclaringTypeShouldBeCorrectForMethods();
                },
                ReturnTypeAndParameterTypesAreCorrectForMethods: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ReturnTypeAndParameterTypesAreCorrectForMethods()",
                        Line: "851"
                    } ));
                    t.Fixture.ReturnTypeAndParameterTypesAreCorrectForMethods();
                },
                ParameterTypesShouldBeCorrectForConstructors: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ParameterTypesShouldBeCorrectForConstructors()",
                        Line: "874"
                    } ));
                    t.Fixture.ParameterTypesShouldBeCorrectForConstructors();
                },
                VoidIsConsideredObjectAsReturnType: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "VoidIsConsideredObjectAsReturnType()",
                        Line: "888"
                    } ));
                    t.Fixture.VoidIsConsideredObjectAsReturnType();
                },
                MethodNameIsTheCSharpName: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MethodNameIsTheCSharpName()",
                        Line: "894"
                    } ));
                    t.Fixture.MethodNameIsTheCSharpName();
                },
                TypeParametersAreReplacedWithObjectForReturnAndParameterTypesForOpenGenericTypes: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypeParametersAreReplacedWithObjectForReturnAndParameterTypesForOpenGenericTypes()",
                        Line: "901"
                    } ));
                    t.Fixture.TypeParametersAreReplacedWithObjectForReturnAndParameterTypesForOpenGenericTypes();
                },
                TypeParametersAreCorrectForReturnAndParameterTypesForConstructedGenericTypes: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypeParametersAreCorrectForReturnAndParameterTypesForConstructedGenericTypes()",
                        Line: "909"
                    } ));
                    t.Fixture.TypeParametersAreCorrectForReturnAndParameterTypesForConstructedGenericTypes();
                },
                MethodTypeParametersAreReplacedWithObjectForReturnAndParameterTypes: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MethodTypeParametersAreReplacedWithObjectForReturnAndParameterTypes()",
                        Line: "921"
                    } ));
                    t.Fixture.MethodTypeParametersAreReplacedWithObjectForReturnAndParameterTypes();
                },
                IsGenericMethodDefinitionAndTypeParameterCountWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsGenericMethodDefinitionAndTypeParameterCountWork()",
                        Line: "929"
                    } ));
                    t.Fixture.IsGenericMethodDefinitionAndTypeParameterCountWork();
                },
                ScriptNameWorksForAllKindsOfMethods: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ScriptNameWorksForAllKindsOfMethods()",
                        Line: "940"
                    } ));
                    t.Fixture.ScriptNameWorksForAllKindsOfMethods();
                },
                SpecialImplementationExistsOnlyForMethodsImplementedAsInlineCode: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SpecialImplementationExistsOnlyForMethodsImplementedAsInlineCode()",
                        Line: "954"
                    } ));
                    t.Fixture.SpecialImplementationExistsOnlyForMethodsImplementedAsInlineCode();
                },
                IsExpandParamsIsCorrectForMethods: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsExpandParamsIsCorrectForMethods()",
                        Line: "962"
                    } ));
                    t.Fixture.IsExpandParamsIsCorrectForMethods();
                },
                CreateDelegateWorksForNonGenericInstanceMethods: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CreateDelegateWorksForNonGenericInstanceMethods()",
                        Line: "975"
                    } ));
                    t.Fixture.CreateDelegateWorksForNonGenericInstanceMethods();
                },
                DelegateCreateDelegateWorksForNonGenericInstanceMethods: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DelegateCreateDelegateWorksForNonGenericInstanceMethods()",
                        Line: "993"
                    } ));
                    t.Fixture.DelegateCreateDelegateWorksForNonGenericInstanceMethods();
                },
                CreateDelegateWorksNonGenericStaticMethods: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CreateDelegateWorksNonGenericStaticMethods()",
                        Line: "1001"
                    } ));
                    t.Fixture.CreateDelegateWorksNonGenericStaticMethods();
                },
                CreateDelegateWorksNonGenericStaticMethodOfGenericType: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CreateDelegateWorksNonGenericStaticMethodOfGenericType()",
                        Line: "1020"
                    } ));
                    t.Fixture.CreateDelegateWorksNonGenericStaticMethodOfGenericType();
                },
                CreateDelegateWorksForGenericInstanceMethods: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CreateDelegateWorksForGenericInstanceMethods()",
                        Line: "1028"
                    } ));
                    t.Fixture.CreateDelegateWorksForGenericInstanceMethods();
                },
                CreateDelegateWorksForGenericStaticMethods: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CreateDelegateWorksForGenericStaticMethods()",
                        Line: "1042"
                    } ));
                    t.Fixture.CreateDelegateWorksForGenericStaticMethods();
                },
                InvokeWorksForNonGenericInstanceMethods: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InvokeWorksForNonGenericInstanceMethods()",
                        Line: "1055"
                    } ));
                    t.Fixture.InvokeWorksForNonGenericInstanceMethods();
                },
                InvokeWorksForNonGenericStaticMethods: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InvokeWorksForNonGenericStaticMethods()",
                        Line: "1068"
                    } ));
                    t.Fixture.InvokeWorksForNonGenericStaticMethods();
                },
                InvokeWorksForNonGenericInstanceMethodsOnSerializableTypes: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InvokeWorksForNonGenericInstanceMethodsOnSerializableTypes()",
                        Line: "1078"
                    } ));
                    t.Fixture.InvokeWorksForNonGenericInstanceMethodsOnSerializableTypes();
                },
                InvokeWorksForNonGenericInlineCodeMethods: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InvokeWorksForNonGenericInlineCodeMethods()",
                        Line: "1085"
                    } ));
                    t.Fixture.InvokeWorksForNonGenericInlineCodeMethods();
                },
                InvokeWorksForGenericInlineCodeMethods: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InvokeWorksForGenericInlineCodeMethods()",
                        Line: "1092"
                    } ));
                    t.Fixture.InvokeWorksForGenericInlineCodeMethods();
                },
                InvokeWorksForGenericInstanceMethod: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InvokeWorksForGenericInstanceMethod()",
                        Line: "1099"
                    } ));
                    t.Fixture.InvokeWorksForGenericInstanceMethod();
                },
                InvokeWorksForGenericStaticMethod: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InvokeWorksForGenericStaticMethod()",
                        Line: "1114"
                    } ));
                    t.Fixture.InvokeWorksForGenericStaticMethod();
                },
                InvokeWorksForGenericInstanceMethodsOnSerializableTypes: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InvokeWorksForGenericInstanceMethodsOnSerializableTypes()",
                        Line: "1126"
                    } ));
                    t.Fixture.InvokeWorksForGenericInstanceMethodsOnSerializableTypes();
                },
                InvokeWorksForExpandParamsMethods: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InvokeWorksForExpandParamsMethods()",
                        Line: "1133"
                    } ));
                    t.Fixture.InvokeWorksForExpandParamsMethods();
                },
                InvokeWorksForAllKindsOfConstructors: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InvokeWorksForAllKindsOfConstructors()",
                        Line: "1145"
                    } ));
                    t.Fixture.InvokeWorksForAllKindsOfConstructors();
                },
                InvokeWorksForExpandParamsConstructors: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InvokeWorksForExpandParamsConstructors()",
                        Line: "1171"
                    } ));
                    t.Fixture.InvokeWorksForExpandParamsConstructors();
                },
                MemberTypeIsFieldForField: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MemberTypeIsFieldForField()",
                        Line: "1185"
                    } ));
                    t.Fixture.MemberTypeIsFieldForField();
                },
                DeclaringTypeIsCorrectForField: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DeclaringTypeIsCorrectForField()",
                        Line: "1192"
                    } ));
                    t.Fixture.DeclaringTypeIsCorrectForField();
                },
                NameIsCorrectForField: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NameIsCorrectForField()",
                        Line: "1199"
                    } ));
                    t.Fixture.NameIsCorrectForField();
                },
                IsStaticIsCorrectForField: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsStaticIsCorrectForField()",
                        Line: "1206"
                    } ));
                    t.Fixture.IsStaticIsCorrectForField();
                },
                FieldTypeIsCorrectForField: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FieldTypeIsCorrectForField()",
                        Line: "1214"
                    } ));
                    t.Fixture.FieldTypeIsCorrectForField();
                },
                ScriptNameIsCorrectForField: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ScriptNameIsCorrectForField()",
                        Line: "1222"
                    } ));
                    t.Fixture.ScriptNameIsCorrectForField();
                },
                GetValueWorksForInstanceField: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetValueWorksForInstanceField()",
                        Line: "1229"
                    } ));
                    t.Fixture.GetValueWorksForInstanceField();
                },
                GetValueWorksForStaticField: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetValueWorksForStaticField()",
                        Line: "1236"
                    } ));
                    t.Fixture.GetValueWorksForStaticField();
                },
                SetValueWorksForInstanceField: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetValueWorksForInstanceField()",
                        Line: "1243"
                    } ));
                    t.Fixture.SetValueWorksForInstanceField();
                },
                SetValueWorksForStaticField: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetValueWorksForStaticField()",
                        Line: "1251"
                    } ));
                    t.Fixture.SetValueWorksForStaticField();
                },
                MemberTypeIsEventForEvent: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MemberTypeIsEventForEvent()",
                        Line: "1258"
                    } ));
                    t.Fixture.MemberTypeIsEventForEvent();
                },
                DeclaringTypeIsCorrectForEvent: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DeclaringTypeIsCorrectForEvent()",
                        Line: "1265"
                    } ));
                    t.Fixture.DeclaringTypeIsCorrectForEvent();
                },
                NameIsCorrectForEvent: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NameIsCorrectForEvent()",
                        Line: "1272"
                    } ));
                    t.Fixture.NameIsCorrectForEvent();
                },
                IsStaticIsCorrectForEvent: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsStaticIsCorrectForEvent()",
                        Line: "1279"
                    } ));
                    t.Fixture.IsStaticIsCorrectForEvent();
                },
                AddEventHandlerMethodWorksForInstanceEvent: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AddEventHandlerMethodWorksForInstanceEvent()",
                        Line: "1286"
                    } ));
                    t.Fixture.AddEventHandlerMethodWorksForInstanceEvent();
                },
                AddEventHandlerMethodWorksForInstanceEventWithInlineCodeAddMethod: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AddEventHandlerMethodWorksForInstanceEventWithInlineCodeAddMethod()",
                        Line: "1298"
                    } ));
                    t.Fixture.AddEventHandlerMethodWorksForInstanceEventWithInlineCodeAddMethod();
                },
                AddEventHandlerMethodWorksForStaticEvent: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AddEventHandlerMethodWorksForStaticEvent()",
                        Line: "1309"
                    } ));
                    t.Fixture.AddEventHandlerMethodWorksForStaticEvent();
                },
                AddEventHandlerMethodWorksForStaticEventWithInlineCodeAddMethod: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AddEventHandlerMethodWorksForStaticEventWithInlineCodeAddMethod()",
                        Line: "1320"
                    } ));
                    t.Fixture.AddEventHandlerMethodWorksForStaticEventWithInlineCodeAddMethod();
                },
                RemoveEventHandlerMethodWorksForInstanceEvent: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RemoveEventHandlerMethodWorksForInstanceEvent()",
                        Line: "1330"
                    } ));
                    t.Fixture.RemoveEventHandlerMethodWorksForInstanceEvent();
                },
                RemoveEventHandlerMethodWorksForInstanceEventWithInlineCodeRemoveMethod: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RemoveEventHandlerMethodWorksForInstanceEventWithInlineCodeRemoveMethod()",
                        Line: "1345"
                    } ));
                    t.Fixture.RemoveEventHandlerMethodWorksForInstanceEventWithInlineCodeRemoveMethod();
                },
                RemoveEventHandlerMethodWorksForStaticEvent: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RemoveEventHandlerMethodWorksForStaticEvent()",
                        Line: "1357"
                    } ));
                    t.Fixture.RemoveEventHandlerMethodWorksForStaticEvent();
                },
                RemoveEventHandlerMethodWorksForStaticEventWithInlineCodeRemoveMethod: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RemoveEventHandlerMethodWorksForStaticEventWithInlineCodeRemoveMethod()",
                        Line: "1371"
                    } ));
                    t.Fixture.RemoveEventHandlerMethodWorksForStaticEventWithInlineCodeRemoveMethod();
                },
                PropertiesForAddMethodAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PropertiesForAddMethodAreCorrect()",
                        Line: "1382"
                    } ));
                    t.Fixture.PropertiesForAddMethodAreCorrect();
                },
                PropertiesForRemoveMethodAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PropertiesForRemoveMethodAreCorrect()",
                        Line: "1419"
                    } ));
                    t.Fixture.PropertiesForRemoveMethodAreCorrect();
                },
                MemberTypeIsPropertyForProperty: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MemberTypeIsPropertyForProperty()",
                        Line: "1458"
                    } ));
                    t.Fixture.MemberTypeIsPropertyForProperty();
                },
                ScriptFieldNameIsCorrectForPropertiesImplementedAsFieldAndNullForOtherProperties: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ScriptFieldNameIsCorrectForPropertiesImplementedAsFieldAndNullForOtherProperties()",
                        Line: "1467"
                    } ));
                    t.Fixture.ScriptFieldNameIsCorrectForPropertiesImplementedAsFieldAndNullForOtherProperties();
                },
                MemberTypeIsPropertyForIndexer: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MemberTypeIsPropertyForIndexer()",
                        Line: "1474"
                    } ));
                    t.Fixture.MemberTypeIsPropertyForIndexer();
                },
                DeclaringTypeIsCorrectForProperty: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DeclaringTypeIsCorrectForProperty()",
                        Line: "1481"
                    } ));
                    t.Fixture.DeclaringTypeIsCorrectForProperty();
                },
                DeclaringTypeIsCorrectForIndexer: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DeclaringTypeIsCorrectForIndexer()",
                        Line: "1490"
                    } ));
                    t.Fixture.DeclaringTypeIsCorrectForIndexer();
                },
                NameIsCorrectForProperty: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NameIsCorrectForProperty()",
                        Line: "1497"
                    } ));
                    t.Fixture.NameIsCorrectForProperty();
                },
                NameIsCorrectForIndexer: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NameIsCorrectForIndexer()",
                        Line: "1506"
                    } ));
                    t.Fixture.NameIsCorrectForIndexer();
                },
                IsStaticIsCorrectForProperty: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsStaticIsCorrectForProperty()",
                        Line: "1513"
                    } ));
                    t.Fixture.IsStaticIsCorrectForProperty();
                },
                IsStaticIsFalseForIndexer: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsStaticIsFalseForIndexer()",
                        Line: "1522"
                    } ));
                    t.Fixture.IsStaticIsFalseForIndexer();
                },
                PropertyTypeIsCorrectForProperty: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PropertyTypeIsCorrectForProperty()",
                        Line: "1529"
                    } ));
                    t.Fixture.PropertyTypeIsCorrectForProperty();
                },
                PropertyTypeIsCorrectForIndexer: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PropertyTypeIsCorrectForIndexer()",
                        Line: "1538"
                    } ));
                    t.Fixture.PropertyTypeIsCorrectForIndexer();
                },
                IndexParameterTypesAreEmptyForProperty: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexParameterTypesAreEmptyForProperty()",
                        Line: "1545"
                    } ));
                    t.Fixture.IndexParameterTypesAreEmptyForProperty();
                },
                IndexParameterTypesAreCorrectForIndexer: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexParameterTypesAreCorrectForIndexer()",
                        Line: "1554"
                    } ));
                    t.Fixture.IndexParameterTypesAreCorrectForIndexer();
                },
                PropertiesForGetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PropertiesForGetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods()",
                        Line: "1561"
                    } ));
                    t.Fixture.PropertiesForGetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods();
                },
                PropertiesForSetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PropertiesForSetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods()",
                        Line: "1614"
                    } ));
                    t.Fixture.PropertiesForSetMethodAreCorrectForPropertyImplementedAsGetAndSetMethods();
                },
                PropertiesForGetMethodAreCorrectForPropertyImplementedAsFields: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PropertiesForGetMethodAreCorrectForPropertyImplementedAsFields()",
                        Line: "1667"
                    } ));
                    t.Fixture.PropertiesForGetMethodAreCorrectForPropertyImplementedAsFields();
                },
                PropertiesForSetMethodAreCorrectForPropertyImplementedAsFields: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PropertiesForSetMethodAreCorrectForPropertyImplementedAsFields()",
                        Line: "1701"
                    } ));
                    t.Fixture.PropertiesForSetMethodAreCorrectForPropertyImplementedAsFields();
                },
                PropertiesForGetMethodAreCorrectForIndexer: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PropertiesForGetMethodAreCorrectForIndexer()",
                        Line: "1735"
                    } ));
                    t.Fixture.PropertiesForGetMethodAreCorrectForIndexer();
                },
                PropertiesForSetMethodAreCorrectForIndexer: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PropertiesForSetMethodAreCorrectForIndexer()",
                        Line: "1769"
                    } ));
                    t.Fixture.PropertiesForSetMethodAreCorrectForIndexer();
                },
                CanReadAndWriteAndPropertiesWithOnlyOneAccessor: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CanReadAndWriteAndPropertiesWithOnlyOneAccessor()",
                        Line: "1809"
                    } ));
                    t.Fixture.CanReadAndWriteAndPropertiesWithOnlyOneAccessor();
                },
                CanReadAndWriteAndIndexersWithOnlyOneAccessor: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CanReadAndWriteAndIndexersWithOnlyOneAccessor()",
                        Line: "1863"
                    } ));
                    t.Fixture.CanReadAndWriteAndIndexersWithOnlyOneAccessor();
                },
                PropertyInfoGetValueWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PropertyInfoGetValueWorks()",
                        Line: "1881"
                    } ));
                    t.Fixture.PropertyInfoGetValueWorks();
                },
                PropertyInfoSetValueWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PropertyInfoSetValueWorks()",
                        Line: "1902"
                    } ));
                    t.Fixture.PropertyInfoSetValueWorks();
                },
                MemberAttributesWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MemberAttributesWork()",
                        Line: "1957"
                    } ));
                    t.Fixture.MemberAttributesWork();
                },
                MembersReflectableAttributeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.ReflectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.ReflectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MembersReflectableAttributeWorks()",
                        Line: "1973"
                    } ));
                    t.Fixture.MembersReflectableAttributeWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Reflection.ReflectionTests",
                        File: "Batch1\\Reflection\\ReflectionTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests)],
        statics: {
            methods: {
                MsdnSimpleAlternationTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnSimpleAlternationTest1()",
                        Line: "13"
                    } ));
                    t.Fixture.MsdnSimpleAlternationTest1();
                },
                MsdnSimpleAlternationTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnSimpleAlternationTest2()",
                        Line: "25"
                    } ));
                    t.Fixture.MsdnSimpleAlternationTest2();
                },
                MsdnSimpleAlternationTest3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnSimpleAlternationTest3()",
                        Line: "50"
                    } ));
                    t.Fixture.MsdnSimpleAlternationTest3();
                },
                MsdnAlternationExprTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnAlternationExprTest1()",
                        Line: "81"
                    } ));
                    t.Fixture.MsdnAlternationExprTest1();
                },
                MsdnAlternationExprTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnAlternationExprTest2()",
                        Line: "106"
                    } ));
                    t.Fixture.MsdnAlternationExprTest2();
                },
                MsdnAlternationGroupNameExprTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnAlternationGroupNameExprTest1()",
                        Line: "131"
                    } ));
                    t.Fixture.MsdnAlternationGroupNameExprTest1();
                },
                MsdnAlternationGroupNameExprTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnAlternationGroupNameExprTest2()",
                        Line: "161"
                    } ));
                    t.Fixture.MsdnAlternationGroupNameExprTest2();
                },
                MsdnAlternationGroupNumberExprTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnAlternationGroupNumberExprTest()",
                        Line: "191"
                    } ));
                    t.Fixture.MsdnAlternationGroupNumberExprTest();
                },
                SimpleAlternationTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SimpleAlternationTest()",
                        Line: "223"
                    } ));
                    t.Fixture.SimpleAlternationTest();
                },
                SimpleAlternationTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SimpleAlternationTest2()",
                        Line: "264"
                    } ));
                    t.Fixture.SimpleAlternationTest2();
                },
                SimpleAlternationTest3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SimpleAlternationTest3()",
                        Line: "283"
                    } ));
                    t.Fixture.SimpleAlternationTest3();
                },
                AlternationWithGroupTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AlternationWithGroupTest()",
                        Line: "325"
                    } ));
                    t.Fixture.AlternationWithGroupTest();
                },
                AlternationGroupTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AlternationGroupTest()",
                        Line: "348"
                    } ));
                    t.Fixture.AlternationGroupTest();
                },
                AlternationGroupNonCapturingTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AlternationGroupNonCapturingTest()",
                        Line: "362"
                    } ));
                    t.Fixture.AlternationGroupNonCapturingTest();
                },
                AlternationGroupPositiveLookaheadTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AlternationGroupPositiveLookaheadTest()",
                        Line: "376"
                    } ));
                    t.Fixture.AlternationGroupPositiveLookaheadTest();
                },
                AlternationGroupNegativeLookaheadTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AlternationGroupNegativeLookaheadTest1()",
                        Line: "390"
                    } ));
                    t.Fixture.AlternationGroupNegativeLookaheadTest1();
                },
                AlternationGroupNegativeLookaheadTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AlternationGroupNegativeLookaheadTest2()",
                        Line: "404"
                    } ));
                    t.Fixture.AlternationGroupNegativeLookaheadTest2();
                },
                AlternationGroupPositiveLookbehindTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AlternationGroupPositiveLookbehindTest()",
                        Line: "417"
                    } ));
                    t.Fixture.AlternationGroupPositiveLookbehindTest();
                },
                AlternationGroupNegativeLookbehindTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AlternationGroupNegativeLookbehindTest1()",
                        Line: "431"
                    } ));
                    t.Fixture.AlternationGroupNegativeLookbehindTest1();
                },
                AlternationGroupNegativeLookbehindTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AlternationGroupNegativeLookbehindTest2()",
                        Line: "445"
                    } ));
                    t.Fixture.AlternationGroupNegativeLookbehindTest2();
                },
                AlternationGroupNonBacktrackingTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AlternationGroupNonBacktrackingTest()",
                        Line: "459"
                    } ));
                    t.Fixture.AlternationGroupNonBacktrackingTest();
                },
                AlternationGroupCommentTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AlternationGroupCommentTest()",
                        Line: "473"
                    } ));
                    t.Fixture.AlternationGroupCommentTest();
                },
                AlternationGroupWithNameInConditionTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AlternationGroupWithNameInConditionTest()",
                        Line: "485"
                    } ));
                    t.Fixture.AlternationGroupWithNameInConditionTest();
                },
                AlternationGroupWithIncorrectRefTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AlternationGroupWithIncorrectRefTest1()",
                        Line: "497"
                    } ));
                    t.Fixture.AlternationGroupWithIncorrectRefTest1();
                },
                AlternationGroupWithIncorrectRefTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AlternationGroupWithIncorrectRefTest2()",
                        Line: "509"
                    } ));
                    t.Fixture.AlternationGroupWithIncorrectRefTest2();
                },
                AlternationGroupWithImnsxTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AlternationGroupWithImnsxTest1()",
                        Line: "521"
                    } ));
                    t.Fixture.AlternationGroupWithImnsxTest1();
                },
                AlternationGroupWithImnsxTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AlternationGroupWithImnsxTest2()",
                        Line: "535"
                    } ));
                    t.Fixture.AlternationGroupWithImnsxTest2();
                },
                AlternationGroupWithImnsxTest3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AlternationGroupWithImnsxTest3()",
                        Line: "548"
                    } ));
                    t.Fixture.AlternationGroupWithImnsxTest3();
                },
                AlternationConditionWithGroupTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AlternationConditionWithGroupTest1()",
                        Line: "562"
                    } ));
                    t.Fixture.AlternationConditionWithGroupTest1();
                },
                AlternationConditionWithGroupTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AlternationConditionWithGroupTest2()",
                        Line: "579"
                    } ));
                    t.Fixture.AlternationConditionWithGroupTest2();
                },
                AlternationConditionWithGroupTest3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AlternationConditionWithGroupTest3()",
                        Line: "596"
                    } ));
                    t.Fixture.AlternationConditionWithGroupTest3();
                },
                AlternationConditionWithGroupTest4: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AlternationConditionWithGroupTest4()",
                        Line: "615"
                    } ));
                    t.Fixture.AlternationConditionWithGroupTest4();
                },
                AlternationConditionWithGroupTest5: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AlternationConditionWithGroupTest5()",
                        Line: "634"
                    } ));
                    t.Fixture.AlternationConditionWithGroupTest5();
                },
                AlternationGroupNonCapturingWithGroupTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AlternationGroupNonCapturingWithGroupTest()",
                        Line: "656"
                    } ));
                    t.Fixture.AlternationGroupNonCapturingWithGroupTest();
                },
                AlternationGroupPositiveLookaheadWithGroupTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AlternationGroupPositiveLookaheadWithGroupTest()",
                        Line: "672"
                    } ));
                    t.Fixture.AlternationGroupPositiveLookaheadWithGroupTest();
                },
                AlternationGroupNegativeLookaheadWithGroupTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AlternationGroupNegativeLookaheadWithGroupTest()",
                        Line: "688"
                    } ));
                    t.Fixture.AlternationGroupNegativeLookaheadWithGroupTest();
                },
                AlternationGroupPositiveLookbehindWithGroupTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AlternationGroupPositiveLookbehindWithGroupTest()",
                        Line: "703"
                    } ));
                    t.Fixture.AlternationGroupPositiveLookbehindWithGroupTest();
                },
                AlternationGroupNegativeLookbehindWithGroupTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AlternationGroupNegativeLookbehindWithGroupTest()",
                        Line: "719"
                    } ));
                    t.Fixture.AlternationGroupNegativeLookbehindWithGroupTest();
                },
                AlternationGroupNonBacktrackingWithGroupTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AlternationGroupNonBacktrackingWithGroupTest()",
                        Line: "735"
                    } ));
                    t.Fixture.AlternationGroupNonBacktrackingWithGroupTest();
                },
                AlternationGroupWithImnsxAndGroupTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AlternationGroupWithImnsxAndGroupTest()",
                        Line: "751"
                    } ));
                    t.Fixture.AlternationGroupWithImnsxAndGroupTest();
                },
                AlternationGroupWithoutAlternativeBranchTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AlternationGroupWithoutAlternativeBranchTest1()",
                        Line: "767"
                    } ));
                    t.Fixture.AlternationGroupWithoutAlternativeBranchTest1();
                },
                AlternationGroupWithoutAlternativeBranchTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AlternationGroupWithoutAlternativeBranchTest2()",
                        Line: "802"
                    } ));
                    t.Fixture.AlternationGroupWithoutAlternativeBranchTest2();
                },
                AlternationGroupWithoutAlternativeBranchExceptionTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAlternationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AlternationGroupWithoutAlternativeBranchExceptionTest()",
                        Line: "879"
                    } ));
                    t.Fixture.AlternationGroupWithoutAlternativeBranchExceptionTest();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Text.RegularExpressions.RegexAlternationTests",
                        File: "Batch1\\Text\\RegularExpressions\\RegexAlternationTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests)],
        statics: {
            methods: {
                MsdnStartOfStringOrLineTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnStartOfStringOrLineTest()",
                        Line: "14"
                    } ));
                    t.Fixture.MsdnStartOfStringOrLineTest();
                },
                MsdnStartOfStringOrLineMultilineModeTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnStartOfStringOrLineMultilineModeTest()",
                        Line: "52"
                    } ));
                    t.Fixture.MsdnStartOfStringOrLineMultilineModeTest();
                },
                MsdnEndOfStringOrLineTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnEndOfStringOrLineTest1()",
                        Line: "97"
                    } ));
                    t.Fixture.MsdnEndOfStringOrLineTest1();
                },
                MsdnEndOfStringOrLineTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnEndOfStringOrLineTest2()",
                        Line: "140"
                    } ));
                    t.Fixture.MsdnEndOfStringOrLineTest2();
                },
                MsdnEndOfStringOrLineTest3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnEndOfStringOrLineTest3()",
                        Line: "187"
                    } ));
                    t.Fixture.MsdnEndOfStringOrLineTest3();
                },
                MsdnEndOfStringOrLineTest4: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnEndOfStringOrLineTest4()",
                        Line: "231"
                    } ));
                    t.Fixture.MsdnEndOfStringOrLineTest4();
                },
                MsdnStartOfStringOnlyTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnStartOfStringOnlyTest()",
                        Line: "283"
                    } ));
                    t.Fixture.MsdnStartOfStringOnlyTest();
                },
                MsdnEndOfStringOrNewlineTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnEndOfStringOrNewlineTest()",
                        Line: "324"
                    } ));
                    t.Fixture.MsdnEndOfStringOrNewlineTest();
                },
                MsdnEndOfStringOnlyTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnEndOfStringOnlyTest()",
                        Line: "350"
                    } ));
                    t.Fixture.MsdnEndOfStringOnlyTest();
                },
                MsdnContiguousMatchesTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnContiguousMatchesTest()",
                        Line: "376"
                    } ));
                    t.Fixture.MsdnContiguousMatchesTest();
                },
                MsdnWordBoundaryTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnWordBoundaryTest()",
                        Line: "414"
                    } ));
                    t.Fixture.MsdnWordBoundaryTest();
                },
                MsdnNonWordBoundaryTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnNonWordBoundaryTest()",
                        Line: "435"
                    } ));
                    t.Fixture.MsdnNonWordBoundaryTest();
                },
                StartAndEndOfStringCustomTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StartAndEndOfStringCustomTest1()",
                        Line: "459"
                    } ));
                    t.Fixture.StartAndEndOfStringCustomTest1();
                },
                StartAndEndOfStringCustomTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StartAndEndOfStringCustomTest2()",
                        Line: "484"
                    } ));
                    t.Fixture.StartAndEndOfStringCustomTest2();
                },
                EndOfStringOrNewlineCustomTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EndOfStringOrNewlineCustomTest1()",
                        Line: "523"
                    } ));
                    t.Fixture.EndOfStringOrNewlineCustomTest1();
                },
                EndOfStringOrNewlineCustomTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EndOfStringOrNewlineCustomTest2()",
                        Line: "543"
                    } ));
                    t.Fixture.EndOfStringOrNewlineCustomTest2();
                },
                EndOfStringOnlyCustomTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EndOfStringOnlyCustomTest1()",
                        Line: "563"
                    } ));
                    t.Fixture.EndOfStringOnlyCustomTest1();
                },
                EndOfStringOnlyCustomTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EndOfStringOnlyCustomTest2()",
                        Line: "583"
                    } ));
                    t.Fixture.EndOfStringOnlyCustomTest2();
                },
                EndOfStringOnlyCustomTest3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EndOfStringOnlyCustomTest3()",
                        Line: "603"
                    } ));
                    t.Fixture.EndOfStringOnlyCustomTest3();
                },
                ContiguousMatchesCustomTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ContiguousMatchesCustomTest1()",
                        Line: "623"
                    } ));
                    t.Fixture.ContiguousMatchesCustomTest1();
                },
                ContiguousMatchesCustomTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexAnchorsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ContiguousMatchesCustomTest2()",
                        Line: "642"
                    } ));
                    t.Fixture.ContiguousMatchesCustomTest2();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Text.RegularExpressions.RegexAnchorsTests",
                        File: "Batch1\\Text\\RegularExpressions\\RegexAnchorsTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests)],
        statics: {
            methods: {
                MsdnNumberedBackrefTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnNumberedBackrefTest()",
                        Line: "12"
                    } ));
                    t.Fixture.MsdnNumberedBackrefTest();
                },
                MsdnNamedBackrefTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnNamedBackrefTest()",
                        Line: "68"
                    } ));
                    t.Fixture.MsdnNamedBackrefTest();
                },
                MsdnNamedBackrefWithNumberAsNameTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnNamedBackrefWithNumberAsNameTest()",
                        Line: "124"
                    } ));
                    t.Fixture.MsdnNamedBackrefWithNumberAsNameTest();
                },
                MsdnNamedBackrefWithRedefinedGroupTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnNamedBackrefWithRedefinedGroupTest()",
                        Line: "185"
                    } ));
                    t.Fixture.MsdnNamedBackrefWithRedefinedGroupTest();
                },
                MsdnNamedBackrefWithEmptyCaptureTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnNamedBackrefWithEmptyCaptureTest1()",
                        Line: "204"
                    } ));
                    t.Fixture.MsdnNamedBackrefWithEmptyCaptureTest1();
                },
                MsdnNamedBackrefWithEmptyCaptureTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnNamedBackrefWithEmptyCaptureTest2()",
                        Line: "227"
                    } ));
                    t.Fixture.MsdnNamedBackrefWithEmptyCaptureTest2();
                },
                NamedBackrefToUnreachableGroupTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NamedBackrefToUnreachableGroupTest()",
                        Line: "251"
                    } ));
                    t.Fixture.NamedBackrefToUnreachableGroupTest();
                },
                NamedBackrefToSelfGroupTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NamedBackrefToSelfGroupTest()",
                        Line: "268"
                    } ));
                    t.Fixture.NamedBackrefToSelfGroupTest();
                },
                NamedBackrefToParentGroupTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NamedBackrefToParentGroupTest()",
                        Line: "283"
                    } ));
                    t.Fixture.NamedBackrefToParentGroupTest();
                },
                NumberedBackrefTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NumberedBackrefTest()",
                        Line: "300"
                    } ));
                    t.Fixture.NumberedBackrefTest();
                },
                NumberedBackrefInGroupTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NumberedBackrefInGroupTest()",
                        Line: "320"
                    } ));
                    t.Fixture.NumberedBackrefInGroupTest();
                },
                NamedBackrefInGroupTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NamedBackrefInGroupTest()",
                        Line: "343"
                    } ));
                    t.Fixture.NamedBackrefInGroupTest();
                },
                NumberedBackrefRecursiveGroupTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NumberedBackrefRecursiveGroupTest()",
                        Line: "366"
                    } ));
                    t.Fixture.NumberedBackrefRecursiveGroupTest();
                },
                NamedBackrefRecursiveGroupTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NamedBackrefRecursiveGroupTest()",
                        Line: "386"
                    } ));
                    t.Fixture.NamedBackrefRecursiveGroupTest();
                },
                ComplexBackrefTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBackreferenceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ComplexBackrefTest1()",
                        Line: "406"
                    } ));
                    t.Fixture.ComplexBackrefTest1();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Text.RegularExpressions.RegexBackreferenceTests",
                        File: "Batch1\\Text\\RegularExpressions\\RegexBackreferenceTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests)],
        statics: {
            methods: {
                MsdnBalancingGroupTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnBalancingGroupTest1()",
                        Line: "13"
                    } ));
                    t.Fixture.MsdnBalancingGroupTest1();
                },
                MsdnBalancingGroupTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnBalancingGroupTest2()",
                        Line: "48"
                    } ));
                    t.Fixture.MsdnBalancingGroupTest2();
                },
                BalancingGroupTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "BalancingGroupTest()",
                        Line: "106"
                    } ));
                    t.Fixture.BalancingGroupTest();
                },
                BalancingGroupWithoutName1Test: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "BalancingGroupWithoutName1Test()",
                        Line: "125"
                    } ));
                    t.Fixture.BalancingGroupWithoutName1Test();
                },
                BalancingGroupWithQuantifierTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "BalancingGroupWithQuantifierTest()",
                        Line: "143"
                    } ));
                    t.Fixture.BalancingGroupWithQuantifierTest();
                },
                BalancingGroupWithEmptyIntervalTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "BalancingGroupWithEmptyIntervalTest()",
                        Line: "164"
                    } ));
                    t.Fixture.BalancingGroupWithEmptyIntervalTest();
                },
                BalancingGroupStackApproachTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "BalancingGroupStackApproachTest()",
                        Line: "181"
                    } ));
                    t.Fixture.BalancingGroupStackApproachTest();
                },
                BalancingGroupWithNumberReferenceTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "BalancingGroupWithNumberReferenceTest1()",
                        Line: "203"
                    } ));
                    t.Fixture.BalancingGroupWithNumberReferenceTest1();
                },
                BalancingGroupWithNumberReferenceTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "BalancingGroupWithNumberReferenceTest2()",
                        Line: "221"
                    } ));
                    t.Fixture.BalancingGroupWithNumberReferenceTest2();
                },
                BalancingGroupIncorrectReferenceTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "BalancingGroupIncorrectReferenceTest1()",
                        Line: "242"
                    } ));
                    t.Fixture.BalancingGroupIncorrectReferenceTest1();
                },
                BalancingGroupIncorrectReferenceTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexBalancingGroupsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "BalancingGroupIncorrectReferenceTest2()",
                        Line: "254"
                    } ));
                    t.Fixture.BalancingGroupIncorrectReferenceTest2();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Text.RegularExpressions.RegexBalancingGroupsTests",
                        File: "Batch1\\Text\\RegularExpressions\\RegexBalancingGroupsTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexCaptureCollectionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexCaptureCollectionTests)],
        statics: {
            methods: {
                CaseDataTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexCaptureCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCaptureCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CaseDataTest()",
                        Line: "28"
                    } ));
                    t.Fixture.CaseDataTest();
                },
                CaptureCollectionFieldsTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexCaptureCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCaptureCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CaptureCollectionFieldsTest()",
                        Line: "60"
                    } ));
                    t.Fixture.CaptureCollectionFieldsTest();
                },
                CaptureCollectionForeachTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexCaptureCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCaptureCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CaptureCollectionForeachTest()",
                        Line: "73"
                    } ));
                    t.Fixture.CaptureCollectionForeachTest();
                },
                CaptureCollectionEnumeratorTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexCaptureCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCaptureCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CaptureCollectionEnumeratorTest()",
                        Line: "89"
                    } ));
                    t.Fixture.CaptureCollectionEnumeratorTest();
                },
                CaptureCollectionCopyToTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexCaptureCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCaptureCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CaptureCollectionCopyToTest()",
                        Line: "111"
                    } ));
                    t.Fixture.CaptureCollectionCopyToTest();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Text.RegularExpressions.Entities.RegexCaptureCollectionTests",
                        File: "Batch1\\Text\\RegularExpressions\\Entities\\RegexCaptureCollectionTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests)],
        statics: {
            methods: {
                MsdnCharGroupTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnCharGroupTest1()",
                        Line: "13"
                    } ));
                    t.Fixture.MsdnCharGroupTest1();
                },
                MsdnCharGroupTest3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnCharGroupTest3()",
                        Line: "66"
                    } ));
                    t.Fixture.MsdnCharGroupTest3();
                },
                MsdnNegativeCharGroupTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnNegativeCharGroupTest1()",
                        Line: "105"
                    } ));
                    t.Fixture.MsdnNegativeCharGroupTest1();
                },
                MsdnNegativeCharGroupTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnNegativeCharGroupTest2()",
                        Line: "137"
                    } ));
                    t.Fixture.MsdnNegativeCharGroupTest2();
                },
                MsdnDotCharTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnDotCharTest1()",
                        Line: "183"
                    } ));
                    t.Fixture.MsdnDotCharTest1();
                },
                MsdnDotCharTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnDotCharTest2()",
                        Line: "197"
                    } ));
                    t.Fixture.MsdnDotCharTest2();
                },
                MsdnDotCharTest3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnDotCharTest3()",
                        Line: "211"
                    } ));
                    t.Fixture.MsdnDotCharTest3();
                },
                MsdnCharRangeInGroupTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnCharRangeInGroupTest()",
                        Line: "225"
                    } ));
                    t.Fixture.MsdnCharRangeInGroupTest();
                },
                MsdnWordCharTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnWordCharTest1()",
                        Line: "434"
                    } ));
                    t.Fixture.MsdnWordCharTest1();
                },
                MsdnWordCharTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnWordCharTest2()",
                        Line: "480"
                    } ));
                    t.Fixture.MsdnWordCharTest2();
                },
                MsdnNonWordCharTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnNonWordCharTest1()",
                        Line: "497"
                    } ));
                    t.Fixture.MsdnNonWordCharTest1();
                },
                MsdnNonWordCharTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnNonWordCharTest2()",
                        Line: "522"
                    } ));
                    t.Fixture.MsdnNonWordCharTest2();
                },
                MsdnSpaceCharTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnSpaceCharTest1()",
                        Line: "678"
                    } ));
                    t.Fixture.MsdnSpaceCharTest1();
                },
                MsdnSpaceCharTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnSpaceCharTest2()",
                        Line: "692"
                    } ));
                    t.Fixture.MsdnSpaceCharTest2();
                },
                MsdnNonSpaceCharTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnNonSpaceCharTest1()",
                        Line: "751"
                    } ));
                    t.Fixture.MsdnNonSpaceCharTest1();
                },
                MsdnNonSpaceCharTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnNonSpaceCharTest2()",
                        Line: "765"
                    } ));
                    t.Fixture.MsdnNonSpaceCharTest2();
                },
                MsdnDigitCharTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnDigitCharTest1()",
                        Line: "1006"
                    } ));
                    t.Fixture.MsdnDigitCharTest1();
                },
                MsdnDigitCharTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnDigitCharTest2()",
                        Line: "1020"
                    } ));
                    t.Fixture.MsdnDigitCharTest2();
                },
                MsdnDigitCharTest3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnDigitCharTest3()",
                        Line: "1037"
                    } ));
                    t.Fixture.MsdnDigitCharTest3();
                },
                MsdnNonDigitCharTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnNonDigitCharTest1()",
                        Line: "1052"
                    } ));
                    t.Fixture.MsdnNonDigitCharTest1();
                },
                MsdnNonDigitCharTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnNonDigitCharTest2()",
                        Line: "1098"
                    } ));
                    t.Fixture.MsdnNonDigitCharTest2();
                },
                MsdnNonDigitCharTest3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnNonDigitCharTest3()",
                        Line: "1112"
                    } ));
                    t.Fixture.MsdnNonDigitCharTest3();
                },
                MsdnSubstactGroupTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnSubstactGroupTest1()",
                        Line: "1125"
                    } ));
                    t.Fixture.MsdnSubstactGroupTest1();
                },
                MsdnSubstactGroupTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnSubstactGroupTest2()",
                        Line: "1138"
                    } ));
                    t.Fixture.MsdnSubstactGroupTest2();
                },
                MsdnSubstactGroupTest3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnSubstactGroupTest3()",
                        Line: "1152"
                    } ));
                    t.Fixture.MsdnSubstactGroupTest3();
                },
                MsdnSubstactGroupTest4: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnSubstactGroupTest4()",
                        Line: "1165"
                    } ));
                    t.Fixture.MsdnSubstactGroupTest4();
                },
                CharClassesInCharGroupTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CharClassesInCharGroupTest()",
                        Line: "1181"
                    } ));
                    t.Fixture.CharClassesInCharGroupTest();
                },
                CaretSymbolInCharGroupTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CaretSymbolInCharGroupTest()",
                        Line: "1212"
                    } ));
                    t.Fixture.CaretSymbolInCharGroupTest();
                },
                NegativeCharGroupTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NegativeCharGroupTest()",
                        Line: "1243"
                    } ));
                    t.Fixture.NegativeCharGroupTest();
                },
                CombiningCharRangesTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CombiningCharRangesTest()",
                        Line: "1274"
                    } ));
                    t.Fixture.CombiningCharRangesTest();
                },
                SubstractGroupTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SubstractGroupTest1()",
                        Line: "1291"
                    } ));
                    t.Fixture.SubstractGroupTest1();
                },
                SubstractGroupTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SubstractGroupTest2()",
                        Line: "1305"
                    } ));
                    t.Fixture.SubstractGroupTest2();
                },
                SubstractGroupTest3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SubstractGroupTest3()",
                        Line: "1318"
                    } ));
                    t.Fixture.SubstractGroupTest3();
                },
                SubstractNegativeGroupTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SubstractNegativeGroupTest1()",
                        Line: "1332"
                    } ));
                    t.Fixture.SubstractNegativeGroupTest1();
                },
                SubstractNegativeGroupTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SubstractNegativeGroupTest2()",
                        Line: "1346"
                    } ));
                    t.Fixture.SubstractNegativeGroupTest2();
                },
                SubstractNegativeGroupTest3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SubstractNegativeGroupTest3()",
                        Line: "1359"
                    } ));
                    t.Fixture.SubstractNegativeGroupTest3();
                },
                SubstractNestedGroupsTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SubstractNestedGroupsTest1()",
                        Line: "1373"
                    } ));
                    t.Fixture.SubstractNestedGroupsTest1();
                },
                SubstractNestedGroupsTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SubstractNestedGroupsTest2()",
                        Line: "1419"
                    } ));
                    t.Fixture.SubstractNestedGroupsTest2();
                },
                SubstractGroupIsNotLastTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SubstractGroupIsNotLastTest()",
                        Line: "1458"
                    } ));
                    t.Fixture.SubstractGroupIsNotLastTest();
                },
                CharClassWithEscapedBracketInGroupTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CharClassWithEscapedBracketInGroupTest()",
                        Line: "1471"
                    } ));
                    t.Fixture.CharClassWithEscapedBracketInGroupTest();
                },
                CharClassWithEscapedSquareBracketInGroupTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CharClassWithEscapedSquareBracketInGroupTest()",
                        Line: "1506"
                    } ));
                    t.Fixture.CharClassWithEscapedSquareBracketInGroupTest();
                },
                CharClassWithUnescapedBracketInGroupTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CharClassWithUnescapedBracketInGroupTest()",
                        Line: "1541"
                    } ));
                    t.Fixture.CharClassWithUnescapedBracketInGroupTest();
                },
                CharClassWithUnescapedSquareBracketInGroupTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CharClassWithUnescapedSquareBracketInGroupTest()",
                        Line: "1576"
                    } ));
                    t.Fixture.CharClassWithUnescapedSquareBracketInGroupTest();
                },
                EmptyRangeTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EmptyRangeTest()",
                        Line: "1611"
                    } ));
                    t.Fixture.EmptyRangeTest();
                },
                ClosingSquareBracketTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClosingSquareBracketTest1()",
                        Line: "1624"
                    } ));
                    t.Fixture.ClosingSquareBracketTest1();
                },
                ClosingSquareBracketTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClosingSquareBracketTest2()",
                        Line: "1649"
                    } ));
                    t.Fixture.ClosingSquareBracketTest2();
                },
                OpeningSquareBracketTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "OpeningSquareBracketTest1()",
                        Line: "1663"
                    } ));
                    t.Fixture.OpeningSquareBracketTest1();
                },
                OpeningSquareBracketTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexCharClassesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "OpeningSquareBracketTest2()",
                        Line: "1688"
                    } ));
                    t.Fixture.OpeningSquareBracketTest2();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Text.RegularExpressions.RegexCharClassesTests",
                        File: "Batch1\\Text\\RegularExpressions\\RegexCharClassesTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests)],
        statics: {
            methods: {
                CaseDataTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CaseDataTest()",
                        Line: "29"
                    } ));
                    t.Fixture.CaseDataTest();
                },
                GetGroupNamesTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetGroupNamesTest()",
                        Line: "61"
                    } ));
                    t.Fixture.GetGroupNamesTest();
                },
                GetGroupNumbersTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetGroupNumbersTest()",
                        Line: "101"
                    } ));
                    t.Fixture.GetGroupNumbersTest();
                },
                GroupNameFromNumberTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GroupNameFromNumberTest()",
                        Line: "141"
                    } ));
                    t.Fixture.GroupNameFromNumberTest();
                },
                GroupNumberFromNameTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GroupNumberFromNameTest()",
                        Line: "189"
                    } ));
                    t.Fixture.GroupNumberFromNameTest();
                },
                SupportedOptionsTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SupportedOptionsTest()",
                        Line: "237"
                    } ));
                    t.Fixture.SupportedOptionsTest();
                },
                MatchNamedGroupTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MatchNamedGroupTest()",
                        Line: "255"
                    } ));
                    t.Fixture.MatchNamedGroupTest();
                },
                MatchInnerNamedGroupTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MatchInnerNamedGroupTest1()",
                        Line: "277"
                    } ));
                    t.Fixture.MatchInnerNamedGroupTest1();
                },
                MatchInnerNamedGroupTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MatchInnerNamedGroupTest2()",
                        Line: "302"
                    } ));
                    t.Fixture.MatchInnerNamedGroupTest2();
                },
                GroupOrderingTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GroupOrderingTest()",
                        Line: "335"
                    } ));
                    t.Fixture.GroupOrderingTest();
                },
                RepeatingGroupTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RepeatingGroupTest()",
                        Line: "373"
                    } ));
                    t.Fixture.RepeatingGroupTest();
                },
                ZeroResultTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ZeroResultTest()",
                        Line: "403"
                    } ));
                    t.Fixture.ZeroResultTest();
                },
                NonCapturingGroupsTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NonCapturingGroupsTest()",
                        Line: "448"
                    } ));
                    t.Fixture.NonCapturingGroupsTest();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Text.RegularExpressions.Entities.RegexEntityTests",
                        File: "Batch1\\Text\\RegularExpressions\\Entities\\RegexEntityTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests)],
        statics: {
            methods: {
                MsdnBellCharTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnBellCharTest()",
                        Line: "13"
                    } ));
                    t.Fixture.MsdnBellCharTest();
                },
                MsdnBackspaceCharTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnBackspaceCharTest()",
                        Line: "27"
                    } ));
                    t.Fixture.MsdnBackspaceCharTest();
                },
                MsdnTabCharTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnTabCharTest()",
                        Line: "41"
                    } ));
                    t.Fixture.MsdnTabCharTest();
                },
                MsdnCarriageRetCharTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnCarriageRetCharTest()",
                        Line: "72"
                    } ));
                    t.Fixture.MsdnCarriageRetCharTest();
                },
                MsdnVerticalTabCharTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnVerticalTabCharTest()",
                        Line: "89"
                    } ));
                    t.Fixture.MsdnVerticalTabCharTest();
                },
                MsdnFormFeedCharTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnFormFeedCharTest()",
                        Line: "103"
                    } ));
                    t.Fixture.MsdnFormFeedCharTest();
                },
                MsdnNewLineCharTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnNewLineCharTest()",
                        Line: "117"
                    } ));
                    t.Fixture.MsdnNewLineCharTest();
                },
                MsdnEscapeCharTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnEscapeCharTest()",
                        Line: "134"
                    } ));
                    t.Fixture.MsdnEscapeCharTest();
                },
                MsdnOctalEscapeTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnOctalEscapeTest()",
                        Line: "148"
                    } ));
                    t.Fixture.MsdnOctalEscapeTest();
                },
                MsdnHexEscapeTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnHexEscapeTest()",
                        Line: "173"
                    } ));
                    t.Fixture.MsdnHexEscapeTest();
                },
                MsdnAsciiEscapeTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnAsciiEscapeTest()",
                        Line: "198"
                    } ));
                    t.Fixture.MsdnAsciiEscapeTest();
                },
                MsdnUnicodeEscapeTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnUnicodeEscapeTest()",
                        Line: "212"
                    } ));
                    t.Fixture.MsdnUnicodeEscapeTest();
                },
                MsdnSpecialEscapesTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnSpecialEscapesTest()",
                        Line: "237"
                    } ));
                    t.Fixture.MsdnSpecialEscapesTest();
                },
                MsdnCharEscapesExampleTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnCharEscapesExampleTest()",
                        Line: "262"
                    } ));
                    t.Fixture.MsdnCharEscapesExampleTest();
                },
                CharEscapesTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CharEscapesTest()",
                        Line: "340"
                    } ));
                    t.Fixture.CharEscapesTest();
                },
                RangeWithCharEscapesTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RangeWithCharEscapesTest()",
                        Line: "463"
                    } ));
                    t.Fixture.RangeWithCharEscapesTest();
                },
                ControlCharsTestUpperTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ControlCharsTestUpperTest()",
                        Line: "594"
                    } ));
                    t.Fixture.ControlCharsTestUpperTest();
                },
                ControlCharsTestLowerTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ControlCharsTestLowerTest()",
                        Line: "829"
                    } ));
                    t.Fixture.ControlCharsTestLowerTest();
                },
                BasicLatinEscapeTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "BasicLatinEscapeTest()",
                        Line: "1064"
                    } ));
                    t.Fixture.BasicLatinEscapeTest();
                },
                OctalEscapeTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "OctalEscapeTest()",
                        Line: "1099"
                    } ));
                    t.Fixture.OctalEscapeTest();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Text.RegularExpressions.RegexEscapesTests",
                        File: "Batch1\\Text\\RegularExpressions\\RegexEscapesTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapeTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexEscapeTests)],
        statics: {
            methods: {
                MsdnEscapeTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexEscapeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnEscapeTest()",
                        Line: "14"
                    } ));
                    t.Fixture.MsdnEscapeTest();
                },
                MsdnUnescapeTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexEscapeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnUnescapeTest()",
                        Line: "43"
                    } ));
                    t.Fixture.MsdnUnescapeTest();
                },
                EscapeCharSetTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexEscapeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapeTests, 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EscapeCharSetTest()",
                        Line: "55"
                    } ));
                    t.Fixture.EscapeCharSetTest();
                },
                NonEscapeCharSetTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexEscapeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexEscapeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NonEscapeCharSetTest()",
                        Line: "73"
                    } ));
                    t.Fixture.NonEscapeCharSetTest();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Text.RegularExpressions.Methods.RegexEscapeTests",
                        File: "Batch1\\Text\\RegularExpressions\\Methods\\RegexEscapeTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexExamplesTests)],
        statics: {
            methods: {
                EmailParseTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexExamplesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EmailParseTest()",
                        Line: "10"
                    } ));
                    t.Fixture.EmailParseTest();
                },
                PhoneParseTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexExamplesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PhoneParseTest()",
                        Line: "25"
                    } ));
                    t.Fixture.PhoneParseTest();
                },
                PasswordValidationTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexExamplesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PasswordValidationTest()",
                        Line: "39"
                    } ));
                    t.Fixture.PasswordValidationTest();
                },
                WordSlplittingTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexExamplesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "WordSlplittingTest()",
                        Line: "56"
                    } ));
                    t.Fixture.WordSlplittingTest();
                },
                IpAddressValidationTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexExamplesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IpAddressValidationTest()",
                        Line: "117"
                    } ));
                    t.Fixture.IpAddressValidationTest();
                },
                EscapeQuotedWordsTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexExamplesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EscapeQuotedWordsTest()",
                        Line: "143"
                    } ));
                    t.Fixture.EscapeQuotedWordsTest();
                },
                CreditCardExpirationParsingTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexExamplesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CreditCardExpirationParsingTest()",
                        Line: "180"
                    } ));
                    t.Fixture.CreditCardExpirationParsingTest();
                },
                UrlParsingTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexExamplesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexExamplesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "UrlParsingTest()",
                        Line: "203"
                    } ));
                    t.Fixture.UrlParsingTest();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Text.RegularExpressions.RegexExamplesTests",
                        File: "Batch1\\Text\\RegularExpressions\\RegexExamplesTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexGroupCollectionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexGroupCollectionTests)],
        statics: {
            methods: {
                CaseDataTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexGroupCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexGroupCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CaseDataTest()",
                        Line: "28"
                    } ));
                    t.Fixture.CaseDataTest();
                },
                GroupCollectionFieldsTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexGroupCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexGroupCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GroupCollectionFieldsTest()",
                        Line: "60"
                    } ));
                    t.Fixture.GroupCollectionFieldsTest();
                },
                GroupCollectionForeachTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexGroupCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexGroupCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GroupCollectionForeachTest()",
                        Line: "72"
                    } ));
                    t.Fixture.GroupCollectionForeachTest();
                },
                GroupCollectionEnumeratorTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexGroupCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexGroupCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GroupCollectionEnumeratorTest()",
                        Line: "87"
                    } ));
                    t.Fixture.GroupCollectionEnumeratorTest();
                },
                GroupCollectionCopyToTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexGroupCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexGroupCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GroupCollectionCopyToTest()",
                        Line: "108"
                    } ));
                    t.Fixture.GroupCollectionCopyToTest();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Text.RegularExpressions.Entities.RegexGroupCollectionTests",
                        File: "Batch1\\Text\\RegularExpressions\\Entities\\RegexGroupCollectionTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests)],
        statics: {
            methods: {
                MsdnInlineOptionsTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnInlineOptionsTest()",
                        Line: "12"
                    } ));
                    t.Fixture.MsdnInlineOptionsTest();
                },
                MsdnIgnoreCaseTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnIgnoreCaseTest()",
                        Line: "43"
                    } ));
                    t.Fixture.MsdnIgnoreCaseTest();
                },
                MsdnMultilineInlineOptionTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnMultilineInlineOptionTest()",
                        Line: "75"
                    } ));
                    t.Fixture.MsdnMultilineInlineOptionTest();
                },
                MsdnSinglelineInlineOptionTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnSinglelineInlineOptionTest()",
                        Line: "142"
                    } ));
                    t.Fixture.MsdnSinglelineInlineOptionTest();
                },
                MsdnIngoreWhitespaceInlineOptionTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnIngoreWhitespaceInlineOptionTest1()",
                        Line: "156"
                    } ));
                    t.Fixture.MsdnIngoreWhitespaceInlineOptionTest1();
                },
                MsdnIngoreWhitespaceInlineOptionTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnIngoreWhitespaceInlineOptionTest2()",
                        Line: "176"
                    } ));
                    t.Fixture.MsdnIngoreWhitespaceInlineOptionTest2();
                },
                MsdnIngoreWhitespaceInlineOptionTest3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnIngoreWhitespaceInlineOptionTest3()",
                        Line: "196"
                    } ));
                    t.Fixture.MsdnIngoreWhitespaceInlineOptionTest3();
                },
                MsdnExplicitCaptureInlineOptionTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnExplicitCaptureInlineOptionTest1()",
                        Line: "265"
                    } ));
                    t.Fixture.MsdnExplicitCaptureInlineOptionTest1();
                },
                MsdnExplicitCaptureInlineOptionTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnExplicitCaptureInlineOptionTest2()",
                        Line: "304"
                    } ));
                    t.Fixture.MsdnExplicitCaptureInlineOptionTest2();
                },
                IgnoreCaseInlineOptionTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IgnoreCaseInlineOptionTest1()",
                        Line: "345"
                    } ));
                    t.Fixture.IgnoreCaseInlineOptionTest1();
                },
                IgnoreCaseInlineOptionTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IgnoreCaseInlineOptionTest2()",
                        Line: "353"
                    } ));
                    t.Fixture.IgnoreCaseInlineOptionTest2();
                },
                IgnoreCaseInlineOptionTest3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IgnoreCaseInlineOptionTest3()",
                        Line: "361"
                    } ));
                    t.Fixture.IgnoreCaseInlineOptionTest3();
                },
                IgnoreCaseInlineOptionTest4: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IgnoreCaseInlineOptionTest4()",
                        Line: "369"
                    } ));
                    t.Fixture.IgnoreCaseInlineOptionTest4();
                },
                IgnoreCaseInlineOptionTest5: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IgnoreCaseInlineOptionTest5()",
                        Line: "377"
                    } ));
                    t.Fixture.IgnoreCaseInlineOptionTest5();
                },
                MultilineInlineOptionTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MultilineInlineOptionTest1()",
                        Line: "385"
                    } ));
                    t.Fixture.MultilineInlineOptionTest1();
                },
                MultilineInlineOptionTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MultilineInlineOptionTest2()",
                        Line: "398"
                    } ));
                    t.Fixture.MultilineInlineOptionTest2();
                },
                MultilineInlineOptionTest3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MultilineInlineOptionTest3()",
                        Line: "423"
                    } ));
                    t.Fixture.MultilineInlineOptionTest3();
                },
                MultilineInlineOptionTest4: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MultilineInlineOptionTest4()",
                        Line: "437"
                    } ));
                    t.Fixture.MultilineInlineOptionTest4();
                },
                MultilineInlineOptionTest5: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MultilineInlineOptionTest5()",
                        Line: "451"
                    } ));
                    t.Fixture.MultilineInlineOptionTest5();
                },
                MultilineInlineOptionTest6: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MultilineInlineOptionTest6()",
                        Line: "468"
                    } ));
                    t.Fixture.MultilineInlineOptionTest6();
                },
                MultilineInlineOptionTest7: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MultilineInlineOptionTest7()",
                        Line: "509"
                    } ));
                    t.Fixture.MultilineInlineOptionTest7();
                },
                SinglelineInlineOptionTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SinglelineInlineOptionTest1()",
                        Line: "526"
                    } ));
                    t.Fixture.SinglelineInlineOptionTest1();
                },
                SinglelineInlineOptionTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SinglelineInlineOptionTest2()",
                        Line: "540"
                    } ));
                    t.Fixture.SinglelineInlineOptionTest2();
                },
                SinglelineInlineOptionTest3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SinglelineInlineOptionTest3()",
                        Line: "556"
                    } ));
                    t.Fixture.SinglelineInlineOptionTest3();
                },
                IngoreWhitespaceInlineOptionTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IngoreWhitespaceInlineOptionTest1()",
                        Line: "579"
                    } ));
                    t.Fixture.IngoreWhitespaceInlineOptionTest1();
                },
                IngoreWhitespaceInlineOptionTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IngoreWhitespaceInlineOptionTest2()",
                        Line: "592"
                    } ));
                    t.Fixture.IngoreWhitespaceInlineOptionTest2();
                },
                IngoreWhitespaceInlineOptionTest3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IngoreWhitespaceInlineOptionTest3()",
                        Line: "606"
                    } ));
                    t.Fixture.IngoreWhitespaceInlineOptionTest3();
                },
                IngoreWhitespaceInlineOptionTest4: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IngoreWhitespaceInlineOptionTest4()",
                        Line: "620"
                    } ));
                    t.Fixture.IngoreWhitespaceInlineOptionTest4();
                },
                IngoreWhitespaceInlineOptionTest5: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IngoreWhitespaceInlineOptionTest5()",
                        Line: "634"
                    } ));
                    t.Fixture.IngoreWhitespaceInlineOptionTest5();
                },
                IngoreWhitespaceInlineOptionTest6: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IngoreWhitespaceInlineOptionTest6()",
                        Line: "648"
                    } ));
                    t.Fixture.IngoreWhitespaceInlineOptionTest6();
                },
                IngoreWhitespaceInlineOptionTest7: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IngoreWhitespaceInlineOptionTest7()",
                        Line: "662"
                    } ));
                    t.Fixture.IngoreWhitespaceInlineOptionTest7();
                },
                IngoreWhitespaceInlineOptionTest8: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IngoreWhitespaceInlineOptionTest8()",
                        Line: "676"
                    } ));
                    t.Fixture.IngoreWhitespaceInlineOptionTest8();
                },
                IngoreWhitespaceInlineOptionTest9: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IngoreWhitespaceInlineOptionTest9()",
                        Line: "690"
                    } ));
                    t.Fixture.IngoreWhitespaceInlineOptionTest9();
                },
                InlineCommentTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InlineCommentTest1()",
                        Line: "704"
                    } ));
                    t.Fixture.InlineCommentTest1();
                },
                ExplicitCaptureInlineOptionTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ExplicitCaptureInlineOptionTest1()",
                        Line: "718"
                    } ));
                    t.Fixture.ExplicitCaptureInlineOptionTest1();
                },
                ExplicitCaptureInlineOptionTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ExplicitCaptureInlineOptionTest2()",
                        Line: "738"
                    } ));
                    t.Fixture.ExplicitCaptureInlineOptionTest2();
                },
                ExplicitCaptureInlineOptionTest3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ExplicitCaptureInlineOptionTest3()",
                        Line: "761"
                    } ));
                    t.Fixture.ExplicitCaptureInlineOptionTest3();
                },
                ExplicitCaptureInlineOptionTest4: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexInlineOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ExplicitCaptureInlineOptionTest4()",
                        Line: "784"
                    } ));
                    t.Fixture.ExplicitCaptureInlineOptionTest4();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests",
                        File: "Batch1\\Text\\RegularExpressions\\RegexInlineOptionsTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexIsMatchTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexIsMatchTests)],
        statics: {
            methods: {
                IsMatchTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexIsMatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexIsMatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsMatchTest()",
                        Line: "18"
                    } ));
                    t.Fixture.IsMatchTest();
                },
                IsMatchWithOffsetTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexIsMatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexIsMatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsMatchWithOffsetTest()",
                        Line: "32"
                    } ));
                    t.Fixture.IsMatchWithOffsetTest();
                },
                IsMatchStaticTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexIsMatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexIsMatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsMatchStaticTest()",
                        Line: "51"
                    } ));
                    t.Fixture.IsMatchStaticTest();
                },
                IsMatchStaticWithOptionsTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexIsMatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexIsMatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsMatchStaticWithOptionsTest()",
                        Line: "65"
                    } ));
                    t.Fixture.IsMatchStaticWithOptionsTest();
                },
                IsMatchStaticWithOptionsAndTimeoutTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexIsMatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexIsMatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsMatchStaticWithOptionsAndTimeoutTest()",
                        Line: "79"
                    } ));
                    t.Fixture.IsMatchStaticWithOptionsAndTimeoutTest();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Text.RegularExpressions.Methods.RegexIsMatchTests",
                        File: "Batch1\\Text\\RegularExpressions\\Methods\\RegexIsMatchTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests)],
        statics: {
            methods: {
                MsdnPositiveLookaheadTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnPositiveLookaheadTest()",
                        Line: "12"
                    } ));
                    t.Fixture.MsdnPositiveLookaheadTest();
                },
                MsdnNegativeLookaheadTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnNegativeLookaheadTest()",
                        Line: "36"
                    } ));
                    t.Fixture.MsdnNegativeLookaheadTest();
                },
                PositiveLookaheadTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PositiveLookaheadTest1()",
                        Line: "77"
                    } ));
                    t.Fixture.PositiveLookaheadTest1();
                },
                PositiveLookaheadTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PositiveLookaheadTest2()",
                        Line: "90"
                    } ));
                    t.Fixture.PositiveLookaheadTest2();
                },
                NegativeLookaheadTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NegativeLookaheadTest1()",
                        Line: "104"
                    } ));
                    t.Fixture.NegativeLookaheadTest1();
                },
                NegativeLookaheadTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NegativeLookaheadTest2()",
                        Line: "118"
                    } ));
                    t.Fixture.NegativeLookaheadTest2();
                },
                PositiveLookaheadWithGroupTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PositiveLookaheadWithGroupTest()",
                        Line: "131"
                    } ));
                    t.Fixture.PositiveLookaheadWithGroupTest();
                },
                NegativeLookaheadWithGroupTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NegativeLookaheadWithGroupTest()",
                        Line: "154"
                    } ));
                    t.Fixture.NegativeLookaheadWithGroupTest();
                },
                PositiveLookaheadWithOffsetTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PositiveLookaheadWithOffsetTest()",
                        Line: "176"
                    } ));
                    t.Fixture.PositiveLookaheadWithOffsetTest();
                },
                NegativeLookaheadWithOffsetTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NegativeLookaheadWithOffsetTest()",
                        Line: "193"
                    } ));
                    t.Fixture.NegativeLookaheadWithOffsetTest();
                },
                PositiveLookaheadGroupCombineTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookaheadTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PositiveLookaheadGroupCombineTest()",
                        Line: "254"
                    } ));
                    t.Fixture.PositiveLookaheadGroupCombineTest();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Text.RegularExpressions.RegexLookaheadTests",
                        File: "Batch1\\Text\\RegularExpressions\\RegexLookaheadTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests)],
        statics: {
            methods: {
                MsdnPositiveLookbehindTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnPositiveLookbehindTest()",
                        Line: "12"
                    } ));
                    t.Fixture.MsdnPositiveLookbehindTest();
                },
                MsdnNegativeLookbehindTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnNegativeLookbehindTest()",
                        Line: "37"
                    } ));
                    t.Fixture.MsdnNegativeLookbehindTest();
                },
                PositiveLookbehindTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PositiveLookbehindTest1()",
                        Line: "65"
                    } ));
                    t.Fixture.PositiveLookbehindTest1();
                },
                PositiveLookbehindTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PositiveLookbehindTest2()",
                        Line: "79"
                    } ));
                    t.Fixture.PositiveLookbehindTest2();
                },
                PositiveLookbehindTest3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PositiveLookbehindTest3()",
                        Line: "92"
                    } ));
                    t.Fixture.PositiveLookbehindTest3();
                },
                PositiveLookbehindWithMatchOffsetTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PositiveLookbehindWithMatchOffsetTest()",
                        Line: "106"
                    } ));
                    t.Fixture.PositiveLookbehindWithMatchOffsetTest();
                },
                NegativeLookbehindTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NegativeLookbehindTest1()",
                        Line: "120"
                    } ));
                    t.Fixture.NegativeLookbehindTest1();
                },
                NegativeLookbehindTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NegativeLookbehindTest2()",
                        Line: "133"
                    } ));
                    t.Fixture.NegativeLookbehindTest2();
                },
                PositiveLookbehindWithGroupTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PositiveLookbehindWithGroupTest()",
                        Line: "147"
                    } ));
                    t.Fixture.PositiveLookbehindWithGroupTest();
                },
                NegativeLookbehindWithGroupTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NegativeLookbehindWithGroupTest()",
                        Line: "170"
                    } ));
                    t.Fixture.NegativeLookbehindWithGroupTest();
                },
                PositiveLookbehindWithOffsetTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PositiveLookbehindWithOffsetTest()",
                        Line: "192"
                    } ));
                    t.Fixture.PositiveLookbehindWithOffsetTest();
                },
                NegativeLookbehindWithOffsetTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexLookbehindTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NegativeLookbehindWithOffsetTest()",
                        Line: "209"
                    } ));
                    t.Fixture.NegativeLookbehindWithOffsetTest();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Text.RegularExpressions.RegexLookbehindTests",
                        File: "Batch1\\Text\\RegularExpressions\\RegexLookbehindTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests)],
        statics: {
            methods: {
                CaseDataTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CaseDataTest()",
                        Line: "35"
                    } ));
                    t.Fixture.CaseDataTest();
                },
                MatchCollectionFieldsTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MatchCollectionFieldsTest()",
                        Line: "67"
                    } ));
                    t.Fixture.MatchCollectionFieldsTest();
                },
                MatchCollectionItemsTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MatchCollectionItemsTest()",
                        Line: "78"
                    } ));
                    t.Fixture.MatchCollectionItemsTest();
                },
                MatchCollectionForeachTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MatchCollectionForeachTest()",
                        Line: "94"
                    } ));
                    t.Fixture.MatchCollectionForeachTest();
                },
                MatchCollectionEnumeratorTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MatchCollectionEnumeratorTest()",
                        Line: "111"
                    } ));
                    t.Fixture.MatchCollectionEnumeratorTest();
                },
                MatchCollectionCopyToTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MatchCollectionCopyToTest()",
                        Line: "135"
                    } ));
                    t.Fixture.MatchCollectionCopyToTest();
                },
                MatchCollectionWithEmptyPatternTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchCollectionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MatchCollectionWithEmptyPatternTest()",
                        Line: "155"
                    } ));
                    t.Fixture.MatchCollectionWithEmptyPatternTest();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchCollectionTests",
                        File: "Batch1\\Text\\RegularExpressions\\Entities\\RegexMatchCollectionTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchEntityTests)],
        statics: {
            methods: {
                CaseDataTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CaseDataTest()",
                        Line: "28"
                    } ));
                    t.Fixture.CaseDataTest();
                },
                MatchEmptyPatternTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MatchEmptyPatternTest()",
                        Line: "60"
                    } ));
                    t.Fixture.MatchEmptyPatternTest();
                },
                MatchEmptyFieldsTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MatchEmptyFieldsTest()",
                        Line: "72"
                    } ));
                    t.Fixture.MatchEmptyFieldsTest();
                },
                MatchNextMatchTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MatchNextMatchTest()",
                        Line: "79"
                    } ));
                    t.Fixture.MatchNextMatchTest();
                },
                MatchNextMatchWithEmptyPatternTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MatchNextMatchWithEmptyPatternTest()",
                        Line: "95"
                    } ));
                    t.Fixture.MatchNextMatchWithEmptyPatternTest();
                },
                MatchResultTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MatchResultTest()",
                        Line: "115"
                    } ));
                    t.Fixture.MatchResultTest();
                },
                MatchSearchGroupByNameTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchEntityTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchEntityTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MatchSearchGroupByNameTest()",
                        Line: "133"
                    } ));
                    t.Fixture.MatchSearchGroupByNameTest();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchEntityTests",
                        File: "Batch1\\Text\\RegularExpressions\\Entities\\RegexMatchEntityTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchesTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchesTests)],
        statics: {
            methods: {
                MatchesTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MatchesTest()",
                        Line: "12"
                    } ));
                    t.Fixture.MatchesTest();
                },
                MatchesAtPositionTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MatchesAtPositionTest()",
                        Line: "36"
                    } ));
                    t.Fixture.MatchesAtPositionTest();
                },
                MatchesStaticTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MatchesStaticTest()",
                        Line: "64"
                    } ));
                    t.Fixture.MatchesStaticTest();
                },
                MatchesStaticWithOptionsTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MatchesStaticWithOptionsTest()",
                        Line: "86"
                    } ));
                    t.Fixture.MatchesStaticWithOptionsTest();
                },
                MatchesStaticWithOptionsAndTimeoutTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchesTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchesTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MatchesStaticWithOptionsAndTimeoutTest()",
                        Line: "122"
                    } ));
                    t.Fixture.MatchesStaticWithOptionsAndTimeoutTest();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchesTests",
                        File: "Batch1\\Text\\RegularExpressions\\Methods\\RegexMatchesTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchSparseTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchSparseTests)],
        statics: {
            methods: {
                GroupOrderingTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchSparseTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchSparseTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GroupOrderingTest1()",
                        Line: "10"
                    } ));
                    t.Fixture.GroupOrderingTest1();
                },
                GroupOrderingTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchSparseTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchSparseTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GroupOrderingTest2()",
                        Line: "36"
                    } ));
                    t.Fixture.GroupOrderingTest2();
                },
                GroupOrderingTest3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchSparseTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchSparseTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GroupOrderingTest3()",
                        Line: "65"
                    } ));
                    t.Fixture.GroupOrderingTest3();
                },
                SparseOrderingTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchSparseTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchSparseTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SparseOrderingTest()",
                        Line: "94"
                    } ));
                    t.Fixture.SparseOrderingTest();
                },
                GroupCapturesMergeTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchSparseTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchSparseTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GroupCapturesMergeTest()",
                        Line: "129"
                    } ));
                    t.Fixture.GroupCapturesMergeTest();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Text.RegularExpressions.Entities.RegexMatchSparseTests",
                        File: "Batch1\\Text\\RegularExpressions\\Entities\\RegexMatchSparseTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchTests)],
        statics: {
            methods: {
                MatchTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MatchTest()",
                        Line: "12"
                    } ));
                    t.Fixture.MatchTest();
                },
                MatchAtPositionTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MatchAtPositionTest()",
                        Line: "54"
                    } ));
                    t.Fixture.MatchAtPositionTest();
                },
                MatchAtPositionAndLengthTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MatchAtPositionAndLengthTest()",
                        Line: "96"
                    } ));
                    t.Fixture.MatchAtPositionAndLengthTest();
                },
                MatchStaticTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MatchStaticTest()",
                        Line: "142"
                    } ));
                    t.Fixture.MatchStaticTest();
                },
                MatchStaticWithOptionsTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MatchStaticWithOptionsTest()",
                        Line: "169"
                    } ));
                    t.Fixture.MatchStaticWithOptionsTest();
                },
                MatchStaticWithOptionsAndTimeoutTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MatchStaticWithOptionsAndTimeoutTest()",
                        Line: "193"
                    } ));
                    t.Fixture.MatchStaticWithOptionsAndTimeoutTest();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Text.RegularExpressions.Methods.RegexMatchTests",
                        File: "Batch1\\Text\\RegularExpressions\\Methods\\RegexMatchTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTimeoutExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.RegexMatchTimeoutExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.RegexMatchTimeoutExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTimeoutExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "13"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.RegexMatchTimeoutExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTimeoutExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorWorks()",
                        Line: "24"
                    } ));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithMessageWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.RegexMatchTimeoutExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTimeoutExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageWorks()",
                        Line: "33"
                    } ));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.RegexMatchTimeoutExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTimeoutExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageAndInnerExceptionWorks()",
                        Line: "42"
                    } ));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                },
                ConstructorWithExceptionDetailsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.RegexMatchTimeoutExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexMatchTimeoutExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithExceptionDetailsWorks()",
                        Line: "52"
                    } ));
                    t.Fixture.ConstructorWithExceptionDetailsWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Exceptions.RegexMatchTimeoutExceptionTests",
                        File: "Batch1\\Exceptions\\RegexMatchTimeoutExceptionTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexNonbacktrackingTests)],
        statics: {
            methods: {
                MsdnNonBacktrackingTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexNonbacktrackingTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnNonBacktrackingTest1()",
                        Line: "12"
                    } ));
                    t.Fixture.MsdnNonBacktrackingTest1();
                },
                MsdnNonBacktrackingTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexNonbacktrackingTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnNonBacktrackingTest2()",
                        Line: "24"
                    } ));
                    t.Fixture.MsdnNonBacktrackingTest2();
                },
                NonBacktrackingTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexNonbacktrackingTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NonBacktrackingTest1()",
                        Line: "38"
                    } ));
                    t.Fixture.NonBacktrackingTest1();
                },
                NonBacktrackingTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexNonbacktrackingTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NonBacktrackingTest2()",
                        Line: "55"
                    } ));
                    t.Fixture.NonBacktrackingTest2();
                },
                NonBacktrackingTest3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexNonbacktrackingTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NonBacktrackingTest3()",
                        Line: "67"
                    } ));
                    t.Fixture.NonBacktrackingTest3();
                },
                NonBacktrackingTest4: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexNonbacktrackingTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NonBacktrackingTest4()",
                        Line: "79"
                    } ));
                    t.Fixture.NonBacktrackingTest4();
                },
                NonBacktrackingTest5: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexNonbacktrackingTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NonBacktrackingTest5()",
                        Line: "93"
                    } ));
                    t.Fixture.NonBacktrackingTest5();
                },
                NonBacktrackingWithOffsetTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexNonbacktrackingTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexNonbacktrackingTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NonBacktrackingWithOffsetTest()",
                        Line: "118"
                    } ));
                    t.Fixture.NonBacktrackingWithOffsetTest();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Text.RegularExpressions.RegexNonbacktrackingTests",
                        File: "Batch1\\Text\\RegularExpressions\\RegexNonbacktrackingTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests)],
        statics: {
            methods: {
                MsdnIgnoreCaseOptionTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnIgnoreCaseOptionTest()",
                        Line: "12"
                    } ));
                    t.Fixture.MsdnIgnoreCaseOptionTest();
                },
                MsdnMultilineOptionTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnMultilineOptionTest1()",
                        Line: "44"
                    } ));
                    t.Fixture.MsdnMultilineOptionTest1();
                },
                MsdnMultilineOptionTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnMultilineOptionTest2()",
                        Line: "65"
                    } ));
                    t.Fixture.MsdnMultilineOptionTest2();
                },
                MsdnSinglelineOptionTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnSinglelineOptionTest()",
                        Line: "132"
                    } ));
                    t.Fixture.MsdnSinglelineOptionTest();
                },
                MsdnIgnoreWhitespaceOptionTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnIgnoreWhitespaceOptionTest()",
                        Line: "146"
                    } ));
                    t.Fixture.MsdnIgnoreWhitespaceOptionTest();
                },
                MsdnExplicitCaptureOptionTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnExplicitCaptureOptionTest1()",
                        Line: "215"
                    } ));
                    t.Fixture.MsdnExplicitCaptureOptionTest1();
                },
                MsdnExplicitCaptureOptionTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnExplicitCaptureOptionTest2()",
                        Line: "284"
                    } ));
                    t.Fixture.MsdnExplicitCaptureOptionTest2();
                },
                IgnoreCaseOptionTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IgnoreCaseOptionTest1()",
                        Line: "325"
                    } ));
                    t.Fixture.IgnoreCaseOptionTest1();
                },
                IgnoreCaseOptionTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IgnoreCaseOptionTest2()",
                        Line: "338"
                    } ));
                    t.Fixture.IgnoreCaseOptionTest2();
                },
                IgnoreCaseOptionTest3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IgnoreCaseOptionTest3()",
                        Line: "352"
                    } ));
                    t.Fixture.IgnoreCaseOptionTest3();
                },
                DefaultLineOptionsTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultLineOptionsTest1()",
                        Line: "366"
                    } ));
                    t.Fixture.DefaultLineOptionsTest1();
                },
                DefaultLineOptionsTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultLineOptionsTest2()",
                        Line: "380"
                    } ));
                    t.Fixture.DefaultLineOptionsTest2();
                },
                MultilineOptionTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MultilineOptionTest1()",
                        Line: "394"
                    } ));
                    t.Fixture.MultilineOptionTest1();
                },
                MultilineOptionTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MultilineOptionTest2()",
                        Line: "447"
                    } ));
                    t.Fixture.MultilineOptionTest2();
                },
                SinglelineOptionTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SinglelineOptionTest()",
                        Line: "479"
                    } ));
                    t.Fixture.SinglelineOptionTest();
                },
                SinglelineDotCharTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SinglelineDotCharTest()",
                        Line: "493"
                    } ));
                    t.Fixture.SinglelineDotCharTest();
                },
                MultilineAndSinglelineOptionsTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexOptionsTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MultilineAndSinglelineOptionsTest()",
                        Line: "507"
                    } ));
                    t.Fixture.MultilineAndSinglelineOptionsTest();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests",
                        File: "Batch1\\Text\\RegularExpressions\\RegexOptionsTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests)],
        statics: {
            methods: {
                MsdnZeroOrMoreTimesTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnZeroOrMoreTimesTest()",
                        Line: "12"
                    } ));
                    t.Fixture.MsdnZeroOrMoreTimesTest();
                },
                MsdnOneOrMoreTimesTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnOneOrMoreTimesTest()",
                        Line: "24"
                    } ));
                    t.Fixture.MsdnOneOrMoreTimesTest();
                },
                MsdnZeroOrOneTimeTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnZeroOrOneTimeTest()",
                        Line: "36"
                    } ));
                    t.Fixture.MsdnZeroOrOneTimeTest();
                },
                MsdnNTimesTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnNTimesTest1()",
                        Line: "48"
                    } ));
                    t.Fixture.MsdnNTimesTest1();
                },
                MsdnNTimesTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnNTimesTest2()",
                        Line: "60"
                    } ));
                    t.Fixture.MsdnNTimesTest2();
                },
                MsdnNOrMoreTimesTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnNOrMoreTimesTest()",
                        Line: "72"
                    } ));
                    t.Fixture.MsdnNOrMoreTimesTest();
                },
                MsdnNToMTimesTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnNToMTimesTest()",
                        Line: "84"
                    } ));
                    t.Fixture.MsdnNToMTimesTest();
                },
                MsdnLazyZeroOrMoreTimesTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnLazyZeroOrMoreTimesTest()",
                        Line: "96"
                    } ));
                    t.Fixture.MsdnLazyZeroOrMoreTimesTest();
                },
                MsdnLazyOneOrMoreTimesTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnLazyOneOrMoreTimesTest()",
                        Line: "108"
                    } ));
                    t.Fixture.MsdnLazyOneOrMoreTimesTest();
                },
                MsdnLazyZeroOrOneTimeTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnLazyZeroOrOneTimeTest()",
                        Line: "120"
                    } ));
                    t.Fixture.MsdnLazyZeroOrOneTimeTest();
                },
                MsdnLazyNTimesTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnLazyNTimesTest()",
                        Line: "132"
                    } ));
                    t.Fixture.MsdnLazyNTimesTest();
                },
                MsdnLazyNOrMoreTimesTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnLazyNOrMoreTimesTest()",
                        Line: "144"
                    } ));
                    t.Fixture.MsdnLazyNOrMoreTimesTest();
                },
                MsdnLazyNToMTimesTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MsdnLazyNToMTimesTest()",
                        Line: "156"
                    } ));
                    t.Fixture.MsdnLazyNToMTimesTest();
                },
                ZeroOrMoreTimesTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ZeroOrMoreTimesTest()",
                        Line: "170"
                    } ));
                    t.Fixture.ZeroOrMoreTimesTest();
                },
                OneOrMoreTimesTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "OneOrMoreTimesTest1()",
                        Line: "190"
                    } ));
                    t.Fixture.OneOrMoreTimesTest1();
                },
                OneOrMoreTimesTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "OneOrMoreTimesTest2()",
                        Line: "210"
                    } ));
                    t.Fixture.OneOrMoreTimesTest2();
                },
                OneOrMoreTimesTest3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "OneOrMoreTimesTest3()",
                        Line: "227"
                    } ));
                    t.Fixture.OneOrMoreTimesTest3();
                },
                ZeroOrOneTimeTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ZeroOrOneTimeTest()",
                        Line: "247"
                    } ));
                    t.Fixture.ZeroOrOneTimeTest();
                },
                LazyZeroOrMoreTimesTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LazyZeroOrMoreTimesTest1()",
                        Line: "267"
                    } ));
                    t.Fixture.LazyZeroOrMoreTimesTest1();
                },
                LazyZeroOrMoreTimesTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LazyZeroOrMoreTimesTest2()",
                        Line: "287"
                    } ));
                    t.Fixture.LazyZeroOrMoreTimesTest2();
                },
                LazyOneOrMoreTimesTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LazyOneOrMoreTimesTest1()",
                        Line: "307"
                    } ));
                    t.Fixture.LazyOneOrMoreTimesTest1();
                },
                LazyOneOrMoreTimesTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LazyOneOrMoreTimesTest2()",
                        Line: "327"
                    } ));
                    t.Fixture.LazyOneOrMoreTimesTest2();
                },
                LazyZeroOrOneTimeTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LazyZeroOrOneTimeTest1()",
                        Line: "347"
                    } ));
                    t.Fixture.LazyZeroOrOneTimeTest1();
                },
                LazyZeroOrOneTimeTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexQuantifiersTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LazyZeroOrOneTimeTest2()",
                        Line: "367"
                    } ));
                    t.Fixture.LazyZeroOrOneTimeTest2();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Text.RegularExpressions.RegexQuantifiersTests",
                        File: "Batch1\\Text\\RegularExpressions\\RegexQuantifiersTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests)],
        statics: {
            methods: {
                ReplaceTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ReplaceTest1()",
                        Line: "13"
                    } ));
                    t.Fixture.ReplaceTest1();
                },
                ReplaceAtPositionTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ReplaceAtPositionTest()",
                        Line: "42"
                    } ));
                    t.Fixture.ReplaceAtPositionTest();
                },
                ReplaceAtPositionAndLengthTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ReplaceAtPositionAndLengthTest()",
                        Line: "56"
                    } ));
                    t.Fixture.ReplaceAtPositionAndLengthTest();
                },
                ReplaceWithEvaluatorTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ReplaceWithEvaluatorTest()",
                        Line: "91"
                    } ));
                    t.Fixture.ReplaceWithEvaluatorTest();
                },
                ReplaceWithEvaluatorAndCountTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ReplaceWithEvaluatorAndCountTest()",
                        Line: "106"
                    } ));
                    t.Fixture.ReplaceWithEvaluatorAndCountTest();
                },
                ReplaceWithEvaluatorAndCountAtPostitionTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ReplaceWithEvaluatorAndCountAtPostitionTest()",
                        Line: "118"
                    } ));
                    t.Fixture.ReplaceWithEvaluatorAndCountAtPostitionTest();
                },
                ReplaceStaticTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ReplaceStaticTest1()",
                        Line: "134"
                    } ));
                    t.Fixture.ReplaceStaticTest1();
                },
                ReplaceStaticTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ReplaceStaticTest2()",
                        Line: "147"
                    } ));
                    t.Fixture.ReplaceStaticTest2();
                },
                ReplaceStaticWithOptionsTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ReplaceStaticWithOptionsTest()",
                        Line: "173"
                    } ));
                    t.Fixture.ReplaceStaticWithOptionsTest();
                },
                ReplaceStaticWithOptionsAndTimeoutTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ReplaceStaticWithOptionsAndTimeoutTest()",
                        Line: "199"
                    } ));
                    t.Fixture.ReplaceStaticWithOptionsAndTimeoutTest();
                },
                ReplaceStaticWithEvaluatorTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ReplaceStaticWithEvaluatorTest()",
                        Line: "239"
                    } ));
                    t.Fixture.ReplaceStaticWithEvaluatorTest();
                },
                ReplaceStaticWithEvaluatorAndOptionsTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ReplaceStaticWithEvaluatorAndOptionsTest()",
                        Line: "252"
                    } ));
                    t.Fixture.ReplaceStaticWithEvaluatorAndOptionsTest();
                },
                ReplaceStaticWithEvaluatorAndOptionsAndTimoutTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexReplaceTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ReplaceStaticWithEvaluatorAndOptionsAndTimoutTest()",
                        Line: "269"
                    } ));
                    t.Fixture.ReplaceStaticWithEvaluatorAndOptionsAndTimoutTest();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Text.RegularExpressions.Methods.RegexReplaceTests",
                        File: "Batch1\\Text\\RegularExpressions\\Methods\\RegexReplaceTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests)],
        statics: {
            methods: {
                SplitTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SplitTest1()",
                        Line: "20"
                    } ));
                    t.Fixture.SplitTest1();
                },
                SplitTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SplitTest2()",
                        Line: "31"
                    } ));
                    t.Fixture.SplitTest2();
                },
                SplitTest3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SplitTest3()",
                        Line: "44"
                    } ));
                    t.Fixture.SplitTest3();
                },
                SplitTest4: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SplitTest4()",
                        Line: "55"
                    } ));
                    t.Fixture.SplitTest4();
                },
                SplitTest5: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SplitTest5()",
                        Line: "68"
                    } ));
                    t.Fixture.SplitTest5();
                },
                SplitWithCountTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SplitWithCountTest1()",
                        Line: "80"
                    } ));
                    t.Fixture.SplitWithCountTest1();
                },
                SplitWithCountTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SplitWithCountTest2()",
                        Line: "93"
                    } ));
                    t.Fixture.SplitWithCountTest2();
                },
                SplitWithCountTest3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SplitWithCountTest3()",
                        Line: "106"
                    } ));
                    t.Fixture.SplitWithCountTest3();
                },
                SplitWithCountTest4: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SplitWithCountTest4()",
                        Line: "119"
                    } ));
                    t.Fixture.SplitWithCountTest4();
                },
                SplitWithCountAndStartAtTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SplitWithCountAndStartAtTest1()",
                        Line: "131"
                    } ));
                    t.Fixture.SplitWithCountAndStartAtTest1();
                },
                SplitWithCountAndStartAtTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SplitWithCountAndStartAtTest2()",
                        Line: "149"
                    } ));
                    t.Fixture.SplitWithCountAndStartAtTest2();
                },
                SplitWithCountAndStartAtTest3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SplitWithCountAndStartAtTest3()",
                        Line: "163"
                    } ));
                    t.Fixture.SplitWithCountAndStartAtTest3();
                },
                SplitWithCountAndStartAtTest4: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SplitWithCountAndStartAtTest4()",
                        Line: "176"
                    } ));
                    t.Fixture.SplitWithCountAndStartAtTest4();
                },
                SplitStaticTest1: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SplitStaticTest1()",
                        Line: "188"
                    } ));
                    t.Fixture.SplitStaticTest1();
                },
                SplitStaticTest2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SplitStaticTest2()",
                        Line: "198"
                    } ));
                    t.Fixture.SplitStaticTest2();
                },
                SplitStaticTest3: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SplitStaticTest3()",
                        Line: "210"
                    } ));
                    t.Fixture.SplitStaticTest3();
                },
                SplitStaticTest4: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SplitStaticTest4()",
                        Line: "220"
                    } ));
                    t.Fixture.SplitStaticTest4();
                },
                SplitStaticTest5: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SplitStaticTest5()",
                        Line: "232"
                    } ));
                    t.Fixture.SplitStaticTest5();
                },
                SplitStaticWithOptionsTest: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SplitStaticWithOptionsTest()",
                        Line: "243"
                    } ));
                    t.Fixture.SplitStaticWithOptionsTest();
                },
                SplitStaticWithOptionsAndTimeout: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexSplitTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SplitStaticWithOptionsAndTimeout()",
                        Line: "255"
                    } ));
                    t.Fixture.SplitStaticWithOptionsAndTimeout();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Text.RegularExpressions.Methods.RegexSplitTests",
                        File: "Batch1\\Text\\RegularExpressions\\Methods\\RegexSplitTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests)],
        statics: {
            methods: {
                RegexTimeoutValidationWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RegexTimeoutValidationWorks()",
                        Line: "32"
                    } ));
                    t.Fixture.RegexTimeoutValidationWorks();
                },
                RegexIsMatchWorksWithShortTimeout: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RegexIsMatchWorksWithShortTimeout()",
                        Line: "47"
                    } ));
                    t.Fixture.RegexIsMatchWorksWithShortTimeout();
                },
                RegexIsMatchWorksWithLongTimeout: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RegexIsMatchWorksWithLongTimeout()",
                        Line: "54"
                    } ));
                    t.Fixture.RegexIsMatchWorksWithLongTimeout();
                },
                RegexMatchWorksWithShortTimeout: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RegexMatchWorksWithShortTimeout()",
                        Line: "62"
                    } ));
                    t.Fixture.RegexMatchWorksWithShortTimeout();
                },
                RegexMatchWorksWithLongTimeout: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RegexMatchWorksWithLongTimeout()",
                        Line: "69"
                    } ));
                    t.Fixture.RegexMatchWorksWithLongTimeout();
                },
                RegexNextMatchWorksWithShortTimeout: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RegexNextMatchWorksWithShortTimeout()",
                        Line: "77"
                    } ));
                    t.Fixture.RegexNextMatchWorksWithShortTimeout();
                },
                RegexNextMatchWorksWithLongTimeout: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RegexNextMatchWorksWithLongTimeout()",
                        Line: "89"
                    } ));
                    t.Fixture.RegexNextMatchWorksWithLongTimeout();
                },
                RegexReplaceWorksWithShortTimeout: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RegexReplaceWorksWithShortTimeout()",
                        Line: "100"
                    } ));
                    t.Fixture.RegexReplaceWorksWithShortTimeout();
                },
                RegexReplaceWorksWithLongTimeout: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RegexReplaceWorksWithLongTimeout()",
                        Line: "109"
                    } ));
                    t.Fixture.RegexReplaceWorksWithLongTimeout();
                },
                RegexReplaceEvaluatorWorksWithShortTimeout: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RegexReplaceEvaluatorWorksWithShortTimeout()",
                        Line: "116"
                    } ));
                    t.Fixture.RegexReplaceEvaluatorWorksWithShortTimeout();
                },
                RegexReplaceEvaluatorWorksWithLongTimeout: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RegexReplaceEvaluatorWorksWithLongTimeout()",
                        Line: "125"
                    } ));
                    t.Fixture.RegexReplaceEvaluatorWorksWithLongTimeout();
                },
                RegexSplitWorksWithShortTimeout: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RegexSplitWorksWithShortTimeout()",
                        Line: "132"
                    } ));
                    t.Fixture.RegexSplitWorksWithShortTimeout();
                },
                RegexSplitWorksWithLongTimeout: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.RegexTimeoutTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RegexSplitWorksWithLongTimeout()",
                        Line: "141"
                    } ));
                    t.Fixture.RegexSplitWorksWithLongTimeout();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests",
                        File: "Batch1\\Text\\RegularExpressions\\RegexTimeoutTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "10"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                CastsWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CastsWork()",
                        Line: "24"
                    } ));
                    t.Fixture.CastsWork();
                },
                DefaultValueIs0: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultValueIs0()",
                        Line: "68"
                    } ));
                    t.Fixture.DefaultValueIs0();
                },
                DefaultConstructorReturnsZero: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorReturnsZero()",
                        Line: "74"
                    } ));
                    t.Fixture.DefaultConstructorReturnsZero();
                },
                CreatingInstanceReturnsZero: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CreatingInstanceReturnsZero()",
                        Line: "80"
                    } ));
                    t.Fixture.CreatingInstanceReturnsZero();
                },
                ConstantsWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstantsWork()",
                        Line: "86"
                    } ));
                    t.Fixture.ConstantsWork();
                },
                FormatWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FormatWorks()",
                        Line: "93"
                    } ));
                    t.Fixture.FormatWorks();
                },
                IFormattableToStringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IFormattableToStringWorks()",
                        Line: "99"
                    } ));
                    t.Fixture.IFormattableToStringWorks();
                },
                TryParseWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TryParseWorks()",
                        Line: "105"
                    } ));
                    t.Fixture.TryParseWorks();
                },
                ParseWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ParseWorks()",
                        Line: "138"
                    } ));
                    t.Fixture.ParseWorks();
                },
                ToStringWithoutRadixWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToStringWithoutRadixWorks()",
                        Line: "150"
                    } ));
                    t.Fixture.ToStringWithoutRadixWorks();
                },
                ToStringWithRadixWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToStringWithRadixWorks()",
                        Line: "156"
                    } ));
                    t.Fixture.ToStringWithRadixWorks();
                },
                GetHashCodeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetHashCodeWorks()",
                        Line: "163"
                    } ));
                    t.Fixture.GetHashCodeWorks();
                },
                EqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EqualsWorks()",
                        Line: "171"
                    } ));
                    t.Fixture.EqualsWorks();
                },
                IEquatableEqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IEquatableEqualsWorks()",
                        Line: "180"
                    } ));
                    t.Fixture.IEquatableEqualsWorks();
                },
                CompareToWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CompareToWorks()",
                        Line: "194"
                    } ));
                    t.Fixture.CompareToWorks();
                },
                IComparableCompareToWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SByteTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SByteTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IComparableCompareToWorks()",
                        Line: "202"
                    } ));
                    t.Fixture.IComparableCompareToWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.SimpleTypes.SByteTests",
                        File: "Batch1\\SimpleTypes\\SByteTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests)],
        statics: {
            methods: {
                ByteArrayWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ByteArrayWorks()",
                        Line: "103"
                    } ));
                    Bridge.ClientTest.SerializationTests.ByteArrayWorks();
                },
                GuidWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GuidWorks()",
                        Line: "110"
                    } ));
                    Bridge.ClientTest.SerializationTests.GuidWorks();
                },
                TypeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypeWorks()",
                        Line: "117"
                    } ));
                    Bridge.ClientTest.SerializationTests.TypeWorks();
                },
                CharWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CharWorks()",
                        Line: "123"
                    } ));
                    Bridge.ClientTest.SerializationTests.CharWorks();
                },
                Int64Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Int64Works()",
                        Line: "130"
                    } ));
                    Bridge.ClientTest.SerializationTests.Int64Works();
                },
                UInt64Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "UInt64Works()",
                        Line: "140"
                    } ));
                    Bridge.ClientTest.SerializationTests.UInt64Works();
                },
                DecimalWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DecimalWorks()",
                        Line: "150"
                    } ));
                    Bridge.ClientTest.SerializationTests.DecimalWorks();
                },
                DateTimeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DateTimeWorks()",
                        Line: "169"
                    } ));
                    Bridge.ClientTest.SerializationTests.DateTimeWorks();
                },
                ArrayWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayWorks()",
                        Line: "177"
                    } ));
                    Bridge.ClientTest.SerializationTests.ArrayWorks();
                },
                EnumWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EnumWorks()",
                        Line: "190"
                    } ));
                    Bridge.ClientTest.SerializationTests.EnumWorks();
                },
                IListWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IListWorks()",
                        Line: "196"
                    } ));
                    Bridge.ClientTest.SerializationTests.IListWorks();
                },
                IDictionaryWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IDictionaryWorks()",
                        Line: "203"
                    } ));
                    Bridge.ClientTest.SerializationTests.IDictionaryWorks();
                },
                TypeWithFieldWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypeWithFieldWorks()",
                        Line: "211"
                    } ));
                    Bridge.ClientTest.SerializationTests.TypeWithFieldWorks();
                },
                ComplexPropertiesWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ComplexPropertiesWorks()",
                        Line: "233"
                    } ));
                    Bridge.ClientTest.SerializationTests.ComplexPropertiesWorks();
                },
                CamelCaseSettingWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CamelCaseSettingWorks()",
                        Line: "254"
                    } ));
                    Bridge.ClientTest.SerializationTests.CamelCaseSettingWorks();
                },
                IgnoreNullValueWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IgnoreNullValueWorks()",
                        Line: "265"
                    } ));
                    Bridge.ClientTest.SerializationTests.IgnoreNullValueWorks();
                },
                TypeNameHandlingWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypeNameHandlingWorks()",
                        Line: "276"
                    } ));
                    Bridge.ClientTest.SerializationTests.TypeNameHandlingWorks();
                },
                AnonymousTypesWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SerializationTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SerializationTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AnonymousTypesWorks()",
                        Line: "286"
                    } ));
                    Bridge.ClientTest.SerializationTests.AnonymousTypesWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.SerializationTests",
                        File: "Batch1\\Serialization\\SerializationTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "10"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultValueIs0: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultValueIs0()",
                        Line: "26"
                    } ));
                    t.Fixture.DefaultValueIs0();
                },
                CreatingInstanceReturnsZero: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CreatingInstanceReturnsZero()",
                        Line: "32"
                    } ));
                    t.Fixture.CreatingInstanceReturnsZero();
                },
                ConstantsWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstantsWork()",
                        Line: "38"
                    } ));
                    t.Fixture.ConstantsWork();
                },
                DefaultConstructorReturnsZero: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorReturnsZero()",
                        Line: "50"
                    } ));
                    t.Fixture.DefaultConstructorReturnsZero();
                },
                FormatWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FormatWorks()",
                        Line: "56"
                    } ));
                    t.Fixture.FormatWorks();
                },
                IFormattableToStringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IFormattableToStringWorks()",
                        Line: "62"
                    } ));
                    t.Fixture.IFormattableToStringWorks();
                },
                ToStringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToStringWorks()",
                        Line: "68"
                    } ));
                    t.Fixture.ToStringWorks();
                },
                ToExponentialWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToExponentialWorks()",
                        Line: "74"
                    } ));
                    t.Fixture.ToExponentialWorks();
                },
                ToExponentialWithFractionalDigitsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToExponentialWithFractionalDigitsWorks()",
                        Line: "80"
                    } ));
                    t.Fixture.ToExponentialWithFractionalDigitsWorks();
                },
                ToFixed: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToFixed()",
                        Line: "86"
                    } ));
                    t.Fixture.ToFixed();
                },
                ToFixedWithFractionalDigitsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToFixedWithFractionalDigitsWorks()",
                        Line: "92"
                    } ));
                    t.Fixture.ToFixedWithFractionalDigitsWorks();
                },
                ToPrecisionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToPrecisionWorks()",
                        Line: "98"
                    } ));
                    t.Fixture.ToPrecisionWorks();
                },
                ToPrecisionWithPrecisionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToPrecisionWithPrecisionWorks()",
                        Line: "104"
                    } ));
                    t.Fixture.ToPrecisionWithPrecisionWorks();
                },
                IsPositiveInfinityWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsPositiveInfinityWorks()",
                        Line: "110"
                    } ));
                    t.Fixture.IsPositiveInfinityWorks();
                },
                IsNegativeInfinityWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsNegativeInfinityWorks()",
                        Line: "121"
                    } ));
                    t.Fixture.IsNegativeInfinityWorks();
                },
                IsInfinityWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsInfinityWorks()",
                        Line: "131"
                    } ));
                    t.Fixture.IsInfinityWorks();
                },
                IsFiniteWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsFiniteWorks()",
                        Line: "141"
                    } ));
                    t.Fixture.IsFiniteWorks();
                },
                IsNaNWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsNaNWorks()",
                        Line: "150"
                    } ));
                    t.Fixture.IsNaNWorks();
                },
                GetHashCodeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetHashCodeWorks()",
                        Line: "159"
                    } ));
                    t.Fixture.GetHashCodeWorks();
                },
                EqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EqualsWorks()",
                        Line: "168"
                    } ));
                    t.Fixture.EqualsWorks();
                },
                IEquatableEqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IEquatableEqualsWorks()",
                        Line: "177"
                    } ));
                    t.Fixture.IEquatableEqualsWorks();
                },
                CompareToWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CompareToWorks()",
                        Line: "191"
                    } ));
                    t.Fixture.CompareToWorks();
                },
                IComparableCompareToWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.SingleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SingleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IComparableCompareToWorks()",
                        Line: "200"
                    } ));
                    t.Fixture.IComparableCompareToWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.SimpleTypes.SingleTests",
                        File: "Batch1\\SimpleTypes\\SingleTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.StopwatchTests)],
        statics: {
            methods: {
                GetTimestamp: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.StopwatchTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetTimestamp()",
                        Line: "12"
                    } ));
                    Bridge.ClientTest.Diagnostics.StopwatchTests.GetTimestamp();
                },
                ConstructStartAndStop: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.StopwatchTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructStartAndStop()",
                        Line: "21"
                    } ));
                    Bridge.ClientTest.Diagnostics.StopwatchTests.ConstructStartAndStop();
                },
                StartNewAndReset: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.StopwatchTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StartNewAndReset()",
                        Line: "46"
                    } ));
                    Bridge.ClientTest.Diagnostics.StopwatchTests.StartNewAndReset();
                },
                StartNewAndRestart: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.StopwatchTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StartNewAndRestart()",
                        Line: "61"
                    } ));
                    Bridge.ClientTest.Diagnostics.StopwatchTests.StartNewAndRestart();
                },
                StopShouldContinue: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.StopwatchTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StopShouldContinue()",
                        Line: "89"
                    } ));
                    Bridge.ClientTest.Diagnostics.StopwatchTests.StopShouldContinue();
                },
                DefaultConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.StopwatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorWorks()",
                        Line: "117"
                    } ));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstantsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.StopwatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstantsWorks()",
                        Line: "125"
                    } ));
                    t.Fixture.ConstantsWorks();
                },
                StartNewWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.StopwatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StartNewWorks()",
                        Line: "132"
                    } ));
                    t.Fixture.StartNewWorks();
                },
                StartAndStopWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.StopwatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StartAndStopWork()",
                        Line: "140"
                    } ));
                    t.Fixture.StartAndStopWork();
                },
                ElapsedWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.StopwatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ElapsedWorks()",
                        Line: "151"
                    } ));
                    t.Fixture.ElapsedWorks();
                },
                GetTimestampWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Diagnostics.StopwatchTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StopwatchTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetTimestampWorks()",
                        Line: "185"
                    } ));
                    t.Fixture.GetTimestampWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Diagnostics.StopwatchTests",
                        File: "Batch1\\Diagnostics\\StopwatchTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "18"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorWorks()",
                        Line: "26"
                    } ));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithCapacityWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithCapacityWorks()",
                        Line: "34"
                    } ));
                    t.Fixture.ConstructorWithCapacityWorks();
                },
                InitialTextConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InitialTextConstructorWorks()",
                        Line: "42"
                    } ));
                    t.Fixture.InitialTextConstructorWorks();
                },
                InitialTextConstructorWithCapacityWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InitialTextConstructorWithCapacityWorks()",
                        Line: "50"
                    } ));
                    t.Fixture.InitialTextConstructorWithCapacityWorks();
                },
                SubstringConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SubstringConstructorWorks()",
                        Line: "58"
                    } ));
                    t.Fixture.SubstringConstructorWorks();
                },
                AppendBoolWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AppendBoolWorks()",
                        Line: "66"
                    } ));
                    t.Fixture.AppendBoolWorks();
                },
                AppendCharWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AppendCharWorks()",
                        Line: "75"
                    } ));
                    t.Fixture.AppendCharWorks();
                },
                AppendIntWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AppendIntWorks()",
                        Line: "84"
                    } ));
                    t.Fixture.AppendIntWorks();
                },
                AppendDoubleWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AppendDoubleWorks()",
                        Line: "93"
                    } ));
                    t.Fixture.AppendDoubleWorks();
                },
                AppendObjectWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AppendObjectWorks()",
                        Line: "102"
                    } ));
                    t.Fixture.AppendObjectWorks();
                },
                AppendStringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AppendStringWorks()",
                        Line: "111"
                    } ));
                    t.Fixture.AppendStringWorks();
                },
                AppendLineWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AppendLineWorks()",
                        Line: "120"
                    } ));
                    t.Fixture.AppendLineWorks();
                },
                AppendLineStringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AppendLineStringWorks()",
                        Line: "129"
                    } ));
                    t.Fixture.AppendLineStringWorks();
                },
                ClearWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ClearWorks()",
                        Line: "138"
                    } ));
                    t.Fixture.ClearWorks();
                },
                SetLengthWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetLengthWorks()",
                        Line: "148"
                    } ));
                    t.Fixture.SetLengthWorks();
                },
                ToStringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToStringWorks()",
                        Line: "187"
                    } ));
                    t.Fixture.ToStringWorks();
                },
                LengthPropertyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LengthPropertyWorks()",
                        Line: "195"
                    } ));
                    t.Fixture.LengthPropertyWorks();
                },
                StringBuilders: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Text.StringBuilderTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringBuilderTests, 21, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StringBuilders()",
                        Line: "203"
                    } ));
                    Bridge.ClientTest.Text.StringBuilderTests.StringBuilders();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Text.StringBuilderTests",
                        File: "Batch1\\Text\\StringBuilderTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.StringFormatTests)],
        statics: {
            methods: {
                Simple: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.StringFormatTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Simple()",
                        Line: "11"
                    } ));
                    t.Fixture.Simple();
                },
                ValueFormating: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.StringFormatTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ValueFormating()",
                        Line: "19"
                    } ));
                    t.Fixture.ValueFormating();
                },
                SpaceControlling: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.StringFormatTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SpaceControlling()",
                        Line: "27"
                    } ));
                    t.Fixture.SpaceControlling();
                },
                Aligment: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.StringFormatTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Aligment()",
                        Line: "45"
                    } ));
                    t.Fixture.Aligment();
                },
                PadIntegerWithLeadingZeros: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.StringFormatTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PadIntegerWithLeadingZeros()",
                        Line: "82"
                    } ));
                    t.Fixture.PadIntegerWithLeadingZeros();
                },
                PadIntegerWithSpecificNumberLeadingZeros: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.StringFormatTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PadIntegerWithSpecificNumberLeadingZeros()",
                        Line: "103"
                    } ));
                    t.Fixture.PadIntegerWithSpecificNumberLeadingZeros();
                },
                PadNumericWithLeadingZerosToLength: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.StringFormatTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PadNumericWithLeadingZerosToLength()",
                        Line: "113"
                    } ));
                    t.Fixture.PadNumericWithLeadingZerosToLength();
                },
                PadNumericWithSpecificNumberOfLeadingZeros: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Format.StringFormatTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringFormatTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PadNumericWithSpecificNumberOfLeadingZeros()",
                        Line: "128"
                    } ));
                    t.Fixture.PadNumericWithSpecificNumberOfLeadingZeros();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Format.StringFormatTests",
                        File: "Batch1\\Format\\StringFormatTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.StringTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "32"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                StringInterfaces: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StringInterfaces()",
                        Line: "40"
                    } ));
                    t.Fixture.StringInterfaces();
                },
                DefaultConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorWorks()",
                        Line: "49"
                    } ));
                    t.Fixture.DefaultConstructorWorks();
                },
                CharAndCountConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CharAndCountConstructorWorks()",
                        Line: "55"
                    } ));
                    t.Fixture.CharAndCountConstructorWorks();
                },
                CharArrayConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CharArrayConstructorWorks()",
                        Line: "61"
                    } ));
                    t.Fixture.CharArrayConstructorWorks();
                },
                EmptyFieldWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EmptyFieldWorks()",
                        Line: "67"
                    } ));
                    t.Fixture.EmptyFieldWorks();
                },
                LengthPropertyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LengthPropertyWorks()",
                        Line: "73"
                    } ));
                    t.Fixture.LengthPropertyWorks();
                },
                CompareToWorks_353: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CompareToWorks_353()",
                        Line: "93"
                    } ));
                    t.Fixture.CompareToWorks_353();
                },
                CompareWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CompareWorks()",
                        Line: "107"
                    } ));
                    t.Fixture.CompareWorks();
                },
                CompareWithIgnoreCaseArgWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CompareWithIgnoreCaseArgWorks()",
                        Line: "115"
                    } ));
                    t.Fixture.CompareWithIgnoreCaseArgWorks();
                },
                ConcatWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConcatWorks()",
                        Line: "126"
                    } ));
                    t.Fixture.ConcatWorks();
                },
                ConcatWithObjectsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConcatWithObjectsWorks()",
                        Line: "139"
                    } ));
                    t.Fixture.ConcatWithObjectsWorks();
                },
                EndsWithCharWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EndsWithCharWorks()",
                        Line: "153"
                    } ));
                    t.Fixture.EndsWithCharWorks();
                },
                EndsWithStringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EndsWithStringWorks()",
                        Line: "160"
                    } ));
                    t.Fixture.EndsWithStringWorks();
                },
                StaticEqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StaticEqualsWorks()",
                        Line: "167"
                    } ));
                    t.Fixture.StaticEqualsWorks();
                },
                FormatWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FormatWorks()",
                        Line: "178"
                    } ));
                    t.Fixture.FormatWorks();
                },
                FormatWorksExtended: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FormatWorksExtended()",
                        Line: "197"
                    } ));
                    t.Fixture.FormatWorksExtended();
                },
                FormatWorksWithIFormattable: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FormatWorksWithIFormattable()",
                        Line: "209"
                    } ));
                    t.Fixture.FormatWorksWithIFormattable();
                },
                FormatCanUseEscapedBraces: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FormatCanUseEscapedBraces()",
                        Line: "215"
                    } ));
                    t.Fixture.FormatCanUseEscapedBraces();
                },
                IndexOfCharWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexOfCharWorks()",
                        Line: "221"
                    } ));
                    t.Fixture.IndexOfCharWorks();
                },
                IndexOfStringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexOfStringWorks()",
                        Line: "228"
                    } ));
                    t.Fixture.IndexOfStringWorks();
                },
                IndexOfCharWithStartIndexWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexOfCharWithStartIndexWorks()",
                        Line: "235"
                    } ));
                    t.Fixture.IndexOfCharWithStartIndexWorks();
                },
                IndexOfCharWithStartIndexAndCountWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexOfCharWithStartIndexAndCountWorks()",
                        Line: "242"
                    } ));
                    t.Fixture.IndexOfCharWithStartIndexAndCountWorks();
                },
                IndexOfStringWithStartIndexWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexOfStringWithStartIndexWorks()",
                        Line: "250"
                    } ));
                    t.Fixture.IndexOfStringWithStartIndexWorks();
                },
                IndexOfStringWithStartIndexAndCountWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexOfStringWithStartIndexAndCountWorks()",
                        Line: "257"
                    } ));
                    t.Fixture.IndexOfStringWithStartIndexAndCountWorks();
                },
                IndexOfAnyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexOfAnyWorks()",
                        Line: "265"
                    } ));
                    t.Fixture.IndexOfAnyWorks();
                },
                IndexOfAnyWithStartIndexWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexOfAnyWithStartIndexWorks()",
                        Line: "274"
                    } ));
                    t.Fixture.IndexOfAnyWithStartIndexWorks();
                },
                IndexOfAnyWithStartIndexAndCountWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexOfAnyWithStartIndexAndCountWorks()",
                        Line: "283"
                    } ));
                    t.Fixture.IndexOfAnyWithStartIndexAndCountWorks();
                },
                InsertWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InsertWorks()",
                        Line: "293"
                    } ));
                    t.Fixture.InsertWorks();
                },
                IsNullOrEmptyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsNullOrEmptyWorks()",
                        Line: "299"
                    } ));
                    t.Fixture.IsNullOrEmptyWorks();
                },
                LastIndexOfCharWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LastIndexOfCharWorks()",
                        Line: "308"
                    } ));
                    t.Fixture.LastIndexOfCharWorks();
                },
                LastIndexOfStringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LastIndexOfStringWorks()",
                        Line: "315"
                    } ));
                    t.Fixture.LastIndexOfStringWorks();
                },
                LastIndexOfCharWithStartIndexWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LastIndexOfCharWithStartIndexWorks()",
                        Line: "322"
                    } ));
                    t.Fixture.LastIndexOfCharWithStartIndexWorks();
                },
                LastIndexOfStringWithStartIndexWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LastIndexOfStringWithStartIndexWorks()",
                        Line: "329"
                    } ));
                    t.Fixture.LastIndexOfStringWithStartIndexWorks();
                },
                LastIndexOfCharWithStartIndexAndCountWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LastIndexOfCharWithStartIndexAndCountWorks()",
                        Line: "336"
                    } ));
                    t.Fixture.LastIndexOfCharWithStartIndexAndCountWorks();
                },
                LastIndexOfStringWithStartIndexAndCountWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LastIndexOfStringWithStartIndexAndCountWorks()",
                        Line: "344"
                    } ));
                    t.Fixture.LastIndexOfStringWithStartIndexAndCountWorks();
                },
                LastIndexOfAnyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LastIndexOfAnyWorks()",
                        Line: "352"
                    } ));
                    t.Fixture.LastIndexOfAnyWorks();
                },
                LastIndexOfAnyWithStartIndexWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LastIndexOfAnyWithStartIndexWorks()",
                        Line: "361"
                    } ));
                    t.Fixture.LastIndexOfAnyWithStartIndexWorks();
                },
                LastIndexOfAnyWithStartIndexAndCountWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LastIndexOfAnyWithStartIndexAndCountWorks()",
                        Line: "370"
                    } ));
                    t.Fixture.LastIndexOfAnyWithStartIndexAndCountWorks();
                },
                PadLeftWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PadLeftWorks()",
                        Line: "380"
                    } ));
                    t.Fixture.PadLeftWorks();
                },
                PadLeftWithCharWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PadLeftWithCharWorks()",
                        Line: "386"
                    } ));
                    t.Fixture.PadLeftWithCharWorks();
                },
                PadRightWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PadRightWorks()",
                        Line: "392"
                    } ));
                    t.Fixture.PadRightWorks();
                },
                PadRightWithCharWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PadRightWithCharWorks()",
                        Line: "398"
                    } ));
                    t.Fixture.PadRightWithCharWorks();
                },
                RemoveWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RemoveWorks()",
                        Line: "404"
                    } ));
                    t.Fixture.RemoveWorks();
                },
                RemoveWithCountWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RemoveWithCountWorks()",
                        Line: "417"
                    } ));
                    t.Fixture.RemoveWithCountWorks();
                },
                ReplaceWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ReplaceWorks()",
                        Line: "445"
                    } ));
                    t.Fixture.ReplaceWorks();
                },
                ReplaceCharWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ReplaceCharWorks()",
                        Line: "452"
                    } ));
                    t.Fixture.ReplaceCharWorks();
                },
                SplitWithCharWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SplitWithCharWorks()",
                        Line: "458"
                    } ));
                    t.Fixture.SplitWithCharWorks();
                },
                SplitWithCharsAndLimitWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SplitWithCharsAndLimitWorks()",
                        Line: "464"
                    } ));
                    t.Fixture.SplitWithCharsAndLimitWorks();
                },
                SplitWithCharsAndStringSplitOptionsAndLimitWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SplitWithCharsAndStringSplitOptionsAndLimitWorks()",
                        Line: "470"
                    } ));
                    t.Fixture.SplitWithCharsAndStringSplitOptionsAndLimitWorks();
                },
                SomeNetSplitTests: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SomeNetSplitTests()",
                        Line: "476"
                    } ));
                    t.Fixture.SomeNetSplitTests();
                },
                SplitWithCharsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SplitWithCharsWorks()",
                        Line: "508"
                    } ));
                    t.Fixture.SplitWithCharsWorks();
                },
                SplitWithStringsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SplitWithStringsWorks()",
                        Line: "516"
                    } ));
                    t.Fixture.SplitWithStringsWorks();
                },
                SplitWithStringsAndLimitWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SplitWithStringsAndLimitWorks()",
                        Line: "523"
                    } ));
                    t.Fixture.SplitWithStringsAndLimitWorks();
                },
                StartsWithCharWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StartsWithCharWorks()",
                        Line: "529"
                    } ));
                    t.Fixture.StartsWithCharWorks();
                },
                StartsWithStringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StartsWithStringWorks()",
                        Line: "536"
                    } ));
                    t.Fixture.StartsWithStringWorks();
                },
                SubstringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SubstringWorks()",
                        Line: "543"
                    } ));
                    t.Fixture.SubstringWorks();
                },
                ToLowerCaseWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToLowerCaseWorks()",
                        Line: "571"
                    } ));
                    t.Fixture.ToLowerCaseWorks();
                },
                ToUpperCaseWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToUpperCaseWorks()",
                        Line: "577"
                    } ));
                    t.Fixture.ToUpperCaseWorks();
                },
                ToLowerWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToLowerWorks()",
                        Line: "583"
                    } ));
                    t.Fixture.ToLowerWorks();
                },
                ToUpperWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToUpperWorks()",
                        Line: "589"
                    } ));
                    t.Fixture.ToUpperWorks();
                },
                TrimWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TrimWorks()",
                        Line: "595"
                    } ));
                    t.Fixture.TrimWorks();
                },
                TrimCharsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TrimCharsWorks()",
                        Line: "601"
                    } ));
                    t.Fixture.TrimCharsWorks();
                },
                TrimStartCharsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TrimStartCharsWorks()",
                        Line: "607"
                    } ));
                    t.Fixture.TrimStartCharsWorks();
                },
                TrimEndCharsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TrimEndCharsWorks()",
                        Line: "613"
                    } ));
                    t.Fixture.TrimEndCharsWorks();
                },
                TrimStartWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TrimStartWorks()",
                        Line: "619"
                    } ));
                    t.Fixture.TrimStartWorks();
                },
                TrimEndWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TrimEndWorks()",
                        Line: "625"
                    } ));
                    t.Fixture.TrimEndWorks();
                },
                StringEqualityWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StringEqualityWorks()",
                        Line: "631"
                    } ));
                    t.Fixture.StringEqualityWorks();
                },
                StringInequalityWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StringInequalityWorks()",
                        Line: "641"
                    } ));
                    t.Fixture.StringInequalityWorks();
                },
                StringIndexingWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StringIndexingWorks()",
                        Line: "651"
                    } ));
                    t.Fixture.StringIndexingWorks();
                },
                GetHashCodeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetHashCodeWorks()",
                        Line: "661"
                    } ));
                    t.Fixture.GetHashCodeWorks();
                },
                InstanceEqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InstanceEqualsWorks()",
                        Line: "671"
                    } ));
                    t.Fixture.InstanceEqualsWorks();
                },
                IEquatableEqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IEquatableEqualsWorks()",
                        Line: "686"
                    } ));
                    t.Fixture.IEquatableEqualsWorks();
                },
                StringEqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StringEqualsWorks()",
                        Line: "704"
                    } ));
                    t.Fixture.StringEqualsWorks();
                },
                CompareToWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CompareToWorks()",
                        Line: "715"
                    } ));
                    t.Fixture.CompareToWorks();
                },
                IComparableCompareToWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IComparableCompareToWorks()",
                        Line: "724"
                    } ));
                    t.Fixture.IComparableCompareToWorks();
                },
                JoinWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "JoinWorks()",
                        Line: "735"
                    } ));
                    t.Fixture.JoinWorks();
                },
                ContainsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ContainsWorks()",
                        Line: "748"
                    } ));
                    t.Fixture.ContainsWorks();
                },
                ToCharArrayWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToCharArrayWorks()",
                        Line: "757"
                    } ));
                    t.Fixture.ToCharArrayWorks();
                },
                Strings: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Strings()",
                        Line: "764"
                    } ));
                    Bridge.ClientTest.SimpleTypes.StringTests.Strings();
                },
                Enumerable: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.StringTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.StringTests, 5, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Enumerable()",
                        Line: "890"
                    } ));
                    Bridge.ClientTest.SimpleTypes.StringTests.Enumerable();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.SimpleTypes.StringTests",
                        File: "Batch1\\SimpleTypes\\StringTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.SystemExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.SystemExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.SystemExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "13"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.SystemExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorWorks()",
                        Line: "22"
                    } ));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithMessageWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.SystemExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageWorks()",
                        Line: "31"
                    } ));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.SystemExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.SystemExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageAndInnerExceptionWorks()",
                        Line: "40"
                    } ));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Exceptions.SystemExceptionTests",
                        File: "Batch1\\Exceptions\\SystemExceptionTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TaskCanceledExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.TaskCanceledExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.TaskCanceledExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskCanceledExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "12"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.TaskCanceledExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskCanceledExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorWorks()",
                        Line: "22"
                    } ));
                    t.Fixture.DefaultConstructorWorks();
                },
                MessageOnlyConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.TaskCanceledExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskCanceledExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MessageOnlyConstructorWorks()",
                        Line: "33"
                    } ));
                    t.Fixture.MessageOnlyConstructorWorks();
                },
                TaskOnlyConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.TaskCanceledExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskCanceledExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TaskOnlyConstructorWorks()",
                        Line: "44"
                    } ));
                    t.Fixture.TaskOnlyConstructorWorks();
                },
                MessageAndInnerExceptionConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.TaskCanceledExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskCanceledExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MessageAndInnerExceptionConstructorWorks()",
                        Line: "56"
                    } ));
                    t.Fixture.MessageAndInnerExceptionConstructorWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Exceptions.TaskCanceledExceptionTests",
                        File: "Batch1\\Exceptions\\TaskCanceledExceptionTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests)],
        statics: {
            methods: {
                TaskCompletionSourceTypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 2, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TaskCompletionSourceTypePropertiesAreCorrect()",
                        Line: "19"
                    } ));
                    t.Fixture.TaskCompletionSourceTypePropertiesAreCorrect();
                },
                TaskTypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 5, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TaskTypePropertiesAreCorrect()",
                        Line: "27"
                    } ));
                    t.Fixture.TaskTypePropertiesAreCorrect();
                },
                TaskCompletionSourceWorksWhenSettingResult: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 10, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TaskCompletionSourceWorksWhenSettingResult()",
                        Line: "41"
                    } ));
                    t.Fixture.TaskCompletionSourceWorksWhenSettingResult();
                },
                TaskCompletionSourceWorksWhenSettingASingleException: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 12, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TaskCompletionSourceWorksWhenSettingASingleException()",
                        Line: "78"
                    } ));
                    t.Fixture.TaskCompletionSourceWorksWhenSettingASingleException();
                },
                TaskCompletionSourceWorksWhenSettingTwoExceptions: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 14, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TaskCompletionSourceWorksWhenSettingTwoExceptions()",
                        Line: "125"
                    } ));
                    t.Fixture.TaskCompletionSourceWorksWhenSettingTwoExceptions();
                },
                TaskCompletionSourceWorksWhenCancelling: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 10, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TaskCompletionSourceWorksWhenCancelling()",
                        Line: "173"
                    } ));
                    t.Fixture.TaskCompletionSourceWorksWhenCancelling();
                },
                CancelledTaskThrowsTaskCanceledExceptionWhenAwaited: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 2, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CancelledTaskThrowsTaskCanceledExceptionWhenAwaited()",
                        Line: "215"
                    } ));
                    t.Fixture.CancelledTaskThrowsTaskCanceledExceptionWhenAwaited();
                },
                CancelledTaskThrowsAggregateExceptionWithTaskCanceledExceptionWhenResultIsAccessed: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 3, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CancelledTaskThrowsAggregateExceptionWithTaskCanceledExceptionWhenResultIsAccessed()",
                        Line: "250"
                    } ));
                    t.Fixture.CancelledTaskThrowsAggregateExceptionWithTaskCanceledExceptionWhenResultIsAccessed();
                },
                SetResultFailsWhenTheTaskIsCompleted: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 1, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetResultFailsWhenTheTaskIsCompleted()",
                        Line: "271"
                    } ));
                    t.Fixture.SetResultFailsWhenTheTaskIsCompleted();
                },
                SetCanceledFailsWhenTheTaskIsCompleted: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 1, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetCanceledFailsWhenTheTaskIsCompleted()",
                        Line: "279"
                    } ));
                    t.Fixture.SetCanceledFailsWhenTheTaskIsCompleted();
                },
                SetExceptionFailsWhenTheTaskIsCompleted: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 1, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetExceptionFailsWhenTheTaskIsCompleted()",
                        Line: "287"
                    } ));
                    t.Fixture.SetExceptionFailsWhenTheTaskIsCompleted();
                },
                CompletedTaskHasCorrectIsXProperties: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 3, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CompletedTaskHasCorrectIsXProperties()",
                        Line: "296"
                    } ));
                    t.Fixture.CompletedTaskHasCorrectIsXProperties();
                },
                CancelledTaskHasCorrectIsXProperties: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 3, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CancelledTaskHasCorrectIsXProperties()",
                        Line: "306"
                    } ));
                    t.Fixture.CancelledTaskHasCorrectIsXProperties();
                },
                FaultedTaskHasCorrectIsXProperties: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 3, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FaultedTaskHasCorrectIsXProperties()",
                        Line: "316"
                    } ));
                    t.Fixture.FaultedTaskHasCorrectIsXProperties();
                },
                TrySetResultReturnsFalseWhenTheTaskIsCompleted: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 2, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TrySetResultReturnsFalseWhenTheTaskIsCompleted()",
                        Line: "326"
                    } ));
                    t.Fixture.TrySetResultReturnsFalseWhenTheTaskIsCompleted();
                },
                TrySetCanceledReturnsFalseWhenTheTaskIsCompleted: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 2, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TrySetCanceledReturnsFalseWhenTheTaskIsCompleted()",
                        Line: "334"
                    } ));
                    t.Fixture.TrySetCanceledReturnsFalseWhenTheTaskIsCompleted();
                },
                TrySetExceptionReturnsFalseWhenTheTaskIsCompleted: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 2, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TrySetExceptionReturnsFalseWhenTheTaskIsCompleted()",
                        Line: "342"
                    } ));
                    t.Fixture.TrySetExceptionReturnsFalseWhenTheTaskIsCompleted();
                },
                ContinueWithForNonGenericTaskWorkWithNoResultAndNoException: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 10, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ContinueWithForNonGenericTaskWorkWithNoResultAndNoException()",
                        Line: "351"
                    } ));
                    t.Fixture.ContinueWithForNonGenericTaskWorkWithNoResultAndNoException();
                },
                ContinueWithWhenCallbackThrowsAnException: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 6, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ContinueWithWhenCallbackThrowsAnException()",
                        Line: "393"
                    } ));
                    t.Fixture.ContinueWithWhenCallbackThrowsAnException();
                },
                ExceptionInTaskBodyAppearsInTheExceptionMemberForNonGenericTask: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 8, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ExceptionInTaskBodyAppearsInTheExceptionMemberForNonGenericTask()",
                        Line: "431"
                    } ));
                    t.Fixture.ExceptionInTaskBodyAppearsInTheExceptionMemberForNonGenericTask();
                },
                ContinueWithForNonGenericTaskCanReturnAValue: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 11, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ContinueWithForNonGenericTaskCanReturnAValue()",
                        Line: "472"
                    } ));
                    t.Fixture.ContinueWithForNonGenericTaskCanReturnAValue();
                },
                ContinueWithWithNoReturnValueForGenericTaskWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 10, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ContinueWithWithNoReturnValueForGenericTaskWorks()",
                        Line: "517"
                    } ));
                    t.Fixture.ContinueWithWithNoReturnValueForGenericTaskWorks();
                },
                ContinueWithForGenericTaskCanReturnAValue: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 11, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ContinueWithForGenericTaskCanReturnAValue()",
                        Line: "559"
                    } ));
                    t.Fixture.ContinueWithForGenericTaskCanReturnAValue();
                },
                DelayWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 6, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DelayWorks()",
                        Line: "604"
                    } ));
                    t.Fixture.DelayWorks();
                },
                FromResultWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 3, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FromResultWorks()",
                        Line: "637"
                    } ));
                    t.Fixture.FromResultWorks();
                },
                RunWithoutResultWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 6, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RunWithoutResultWorks()",
                        Line: "646"
                    } ));
                    t.Fixture.RunWithoutResultWorks();
                },
                RunWithResultWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 7, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RunWithResultWorks()",
                        Line: "677"
                    } ));
                    t.Fixture.RunWithResultWorks();
                },
                RunWorksWhenBodyThrows: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 7, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "RunWorksWhenBodyThrows()",
                        Line: "710"
                    } ));
                    t.Fixture.RunWorksWhenBodyThrows();
                },
                WhenAllParamArrayWithResultWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 13, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "WhenAllParamArrayWithResultWorks()",
                        Line: "743"
                    } ));
                    t.Fixture.WhenAllParamArrayWithResultWorks();
                },
                WhenAllEnumerableWithResultWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 13, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "WhenAllEnumerableWithResultWorks()",
                        Line: "800"
                    } ));
                    t.Fixture.WhenAllEnumerableWithResultWorks();
                },
                WhenAllParamArrayWithoutResultWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 12, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "WhenAllParamArrayWithoutResultWorks()",
                        Line: "857"
                    } ));
                    t.Fixture.WhenAllParamArrayWithoutResultWorks();
                },
                WhenAllEnumerableWithoutResultWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 12, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "WhenAllEnumerableWithoutResultWorks()",
                        Line: "913"
                    } ));
                    t.Fixture.WhenAllEnumerableWithoutResultWorks();
                },
                WhenAllShouldHaveAnErrorIfAnyIncludedTaskFaulted: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 17, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "WhenAllShouldHaveAnErrorIfAnyIncludedTaskFaulted()",
                        Line: "969"
                    } ));
                    t.Fixture.WhenAllShouldHaveAnErrorIfAnyIncludedTaskFaulted();
                },
                WhenAllShouldBeCancelledIfNoTaskWasFaultedButSomeWasCancelled: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 12, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "WhenAllShouldBeCancelledIfNoTaskWasFaultedButSomeWasCancelled()",
                        Line: "1039"
                    } ));
                    t.Fixture.WhenAllShouldBeCancelledIfNoTaskWasFaultedButSomeWasCancelled();
                },
                WhenAnyParamArrayWithResultWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 10, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "WhenAnyParamArrayWithResultWorks()",
                        Line: "1094"
                    } ));
                    t.Fixture.WhenAnyParamArrayWithResultWorks();
                },
                WhenAnyEnumerableWithResultWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 10, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "WhenAnyEnumerableWithResultWorks()",
                        Line: "1142"
                    } ));
                    t.Fixture.WhenAnyEnumerableWithResultWorks();
                },
                WhenAnyParamArrayWithoutResultWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 9, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "WhenAnyParamArrayWithoutResultWorks()",
                        Line: "1189"
                    } ));
                    t.Fixture.WhenAnyParamArrayWithoutResultWorks();
                },
                WhenAnyEnumerableWithoutResultWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 9, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "WhenAnyEnumerableWithoutResultWorks()",
                        Line: "1236"
                    } ));
                    t.Fixture.WhenAnyEnumerableWithoutResultWorks();
                },
                WhenAnyFaultsIfTheFirstTaskFaulted: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 9, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "WhenAnyFaultsIfTheFirstTaskFaulted()",
                        Line: "1283"
                    } ));
                    t.Fixture.WhenAnyFaultsIfTheFirstTaskFaulted();
                },
                WhenAnyIsCancelledIfTheFirstTaskWasCancelled: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 8, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "WhenAnyIsCancelledIfTheFirstTaskWasCancelled()",
                        Line: "1331"
                    } ));
                    t.Fixture.WhenAnyIsCancelledIfTheFirstTaskWasCancelled();
                },
                ConstructorWithOnlyActionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 7, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithOnlyActionWorks()",
                        Line: "1376"
                    } ));
                    t.Fixture.ConstructorWithOnlyActionWorks();
                },
                ConstructorWithActionAndStateWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 8, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithActionAndStateWorks()",
                        Line: "1415"
                    } ));
                    t.Fixture.ConstructorWithActionAndStateWorks();
                },
                ExceptionInManuallyCreatedTaskIsStoredOnTheTask: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 8, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ExceptionInManuallyCreatedTaskIsStoredOnTheTask()",
                        Line: "1457"
                    } ));
                    t.Fixture.ExceptionInManuallyCreatedTaskIsStoredOnTheTask();
                },
                ConstructorWithOnlyFunctionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 8, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithOnlyFunctionWorks()",
                        Line: "1499"
                    } ));
                    t.Fixture.ConstructorWithOnlyFunctionWorks();
                },
                ConstructorWithFunctionAndStateWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TaskTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TaskTests, 9, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithFunctionAndStateWorks()",
                        Line: "1541"
                    } ));
                    t.Fixture.ConstructorWithFunctionAndStateWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Threading.TaskTests",
                        File: "Batch1\\Threading\\Tasks\\TaskTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestAbstractClass", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestAbstractClass)],
        statics: {
            methods: {
                TestB: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestAbstractClass).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestAbstractClass, 3, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestB()",
                        Line: "38"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestAbstractClass.TestB();
                },
                TestC: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestAbstractClass).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestAbstractClass, 3, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestC()",
                        Line: "48"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestAbstractClass.TestC();
                },
                TestBC: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestAbstractClass).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestAbstractClass, 6, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestBC()",
                        Line: "58"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestAbstractClass.TestBC();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.BasicCSharp.TestAbstractClass",
                        File: "Batch1\\BasicCSharp\\TestAbstractClass.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestAutoProps", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestAutoProps)],
        statics: {
            methods: {
                TestBasic: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestAutoProps).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestAutoProps, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestBasic()",
                        Line: "31"
                    } ));
                    Bridge.ClientTest.CSharp6.TestAutoProps.TestBasic();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.CSharp6.TestAutoProps",
                        File: "Batch1\\CSharp6\\TestAutoProps.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestAwaitInCatchFinally", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestAwaitInCatchFinally)],
        statics: {
            methods: {
                TestBasic: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestAwaitInCatchFinally).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestAwaitInCatchFinally, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestBasic()",
                        Line: "12"
                    } ));
                    Bridge.ClientTest.CSharp6.TestAwaitInCatchFinally.TestBasic();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.CSharp6.TestAwaitInCatchFinally",
                        File: "Batch1\\CSharp6\\TestAwaitInCatchFinally.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestConditionAccess", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestConditionAccess)],
        statics: {
            methods: {
                TestBasic: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestConditionAccess).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestConditionAccess, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestBasic()",
                        Line: "11"
                    } ));
                    Bridge.ClientTest.CSharp6.TestConditionAccess.TestBasic();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.CSharp6.TestConditionAccess",
                        File: "Batch1\\CSharp6\\TestConditionalAccess.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestEnum)],
        statics: {
            methods: {
                TestParse: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestEnum).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum, 6, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestParse()",
                        Line: "45"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestEnum.TestParse();
                },
                TestParseIgnoreCase: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestEnum).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum, 4, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestParseIgnoreCase()",
                        Line: "57"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestEnum.TestParseIgnoreCase();
                },
                TestToString: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestEnum).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum, 4, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestToString()",
                        Line: "67"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestEnum.TestToString();
                },
                TestGetValues: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestEnum).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum, 2, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestGetValues()",
                        Line: "76"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestEnum.TestGetValues();
                },
                TestCompareTo: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestEnum).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum, 3, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestCompareTo()",
                        Line: "84"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestEnum.TestCompareTo();
                },
                TestFormat: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestEnum).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum, 22, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestFormat()",
                        Line: "92"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestEnum.TestFormat();
                },
                TestGetName: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestEnum).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum, 3, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestGetName()",
                        Line: "122"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestEnum.TestGetName();
                },
                TestGetNames: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestEnum).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum, 2, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestGetNames()",
                        Line: "130"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestEnum.TestGetNames();
                },
                TestHasFlag: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestEnum).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum, 5, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestHasFlag()",
                        Line: "138"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestEnum.TestHasFlag();
                },
                TestIsDefined: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestEnum).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum, 6, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestIsDefined()",
                        Line: "148"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestEnum.TestIsDefined();
                },
                TestTryParse: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestEnum).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestEnum, 11, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestTryParse()",
                        Line: "159"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestEnum.TestTryParse();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.BasicCSharp.TestEnum",
                        File: "Batch1\\BasicCSharp\\TestEnum.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestExceptionFilter", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestExceptionFilter)],
        statics: {
            methods: {
                TestFalseFilter: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestExceptionFilter).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestExceptionFilter, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestFalseFilter()",
                        Line: "12"
                    } ));
                    Bridge.ClientTest.CSharp6.TestExceptionFilter.TestFalseFilter();
                },
                TestTrueFilter: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestExceptionFilter).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestExceptionFilter, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestTrueFilter()",
                        Line: "39"
                    } ));
                    Bridge.ClientTest.CSharp6.TestExceptionFilter.TestTrueFilter();
                },
                TestMultipleCatchClauses_2223: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestExceptionFilter).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestExceptionFilter, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestMultipleCatchClauses_2223()",
                        Line: "63"
                    } ));
                    Bridge.ClientTest.CSharp6.TestExceptionFilter.TestMultipleCatchClauses_2223();
                },
                TestFailedFilter_2223: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestExceptionFilter).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestExceptionFilter, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestFailedFilter_2223()",
                        Line: "90"
                    } ));
                    Bridge.ClientTest.CSharp6.TestExceptionFilter.TestFailedFilter_2223();
                },
                TestFailedFilter2_2223: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestExceptionFilter).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestExceptionFilter, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestFailedFilter2_2223()",
                        Line: "121"
                    } ));
                    Bridge.ClientTest.CSharp6.TestExceptionFilter.TestFailedFilter2_2223();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.CSharp6.TestExceptionFilter",
                        File: "Batch1\\CSharp6\\TestExceptionFilter.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestExpressionBodyFunction", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestExpressionBodyFunction)],
        statics: {
            methods: {
                TestBasic: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestExpressionBodyFunction).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestExpressionBodyFunction, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestBasic()",
                        Line: "9"
                    } ));
                    Bridge.ClientTest.CSharp6.TestExpressionBodyFunction.TestBasic();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.CSharp6.TestExpressionBodyFunction",
                        File: "Batch1\\CSharp6\\TestExpressionBodyFunction.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestGoto", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestGoto)],
        statics: {
            methods: {
                TestGotoCase: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestGoto).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestGoto, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestGotoCase()",
                        Line: "70"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestGoto.TestGotoCase();
                },
                TestGotoLabel: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestGoto).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestGoto, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestGotoLabel()",
                        Line: "82"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestGoto.TestGotoLabel();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.BasicCSharp.TestGoto",
                        File: "Batch1\\BasicCSharp\\TestGoto.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestIndexInitializer", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestIndexInitializer)],
        statics: {
            methods: {
                TestBasic: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestIndexInitializer).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestIndexInitializer, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestBasic()",
                        Line: "11"
                    } ));
                    Bridge.ClientTest.CSharp6.TestIndexInitializer.TestBasic();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.CSharp6.TestIndexInitializer",
                        File: "Batch1\\CSharp6\\TestIndexInitializer.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestInheritance", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestInheritance)],
        statics: {
            methods: {
                TestA: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestInheritance).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestInheritance, 4, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestA()",
                        Line: "53"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestInheritance.TestA();
                },
                TestB: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestInheritance).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestInheritance, 5, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestB()",
                        Line: "64"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestInheritance.TestB();
                },
                TestAB: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestInheritance).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestInheritance, 4, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestAB()",
                        Line: "76"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestInheritance.TestAB();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.BasicCSharp.TestInheritance",
                        File: "Batch1\\BasicCSharp\\TestInheritance.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestInterfaces", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestInterfaces)],
        statics: {
            methods: {
                TestInterfaceMethodAndProperty: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestInterfaces).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestInterfaces, 6, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestInterfaceMethodAndProperty()",
                        Line: "124"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestInterfaces.TestInterfaceMethodAndProperty();
                },
                TestExplicitInterfaceMethodAndProperty: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestInterfaces).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestInterfaces, 3, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestExplicitInterfaceMethodAndProperty()",
                        Line: "139"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestInterfaces.TestExplicitInterfaceMethodAndProperty();
                },
                TestTwoInterfaces: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestInterfaces).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestInterfaces, 9, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestTwoInterfaces()",
                        Line: "148"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestInterfaces.TestTwoInterfaces();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.BasicCSharp.TestInterfaces",
                        File: "Batch1\\BasicCSharp\\TestInterfaces.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestInterpolatedStrings", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestInterpolatedStrings)],
        statics: {
            methods: {
                TestBasic: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestInterpolatedStrings).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestInterpolatedStrings, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestBasic()",
                        Line: "37"
                    } ));
                    Bridge.ClientTest.CSharp6.TestInterpolatedStrings.TestBasic();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.CSharp6.TestInterpolatedStrings",
                        File: "Batch1\\CSharp6\\TestInterpolatedStrings.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqAggregateOperators", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqAggregateOperators)],
        statics: {
            methods: {
                Test: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqAggregateOperators).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqAggregateOperators, 20, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Test()",
                        Line: "12"
                    } ));
                    Bridge.ClientTest.Linq.TestLinqAggregateOperators.Test();
                },
                Bridge315: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqAggregateOperators).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqAggregateOperators, 1, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Bridge315()",
                        Line: "231"
                    } ));
                    Bridge.ClientTest.Linq.TestLinqAggregateOperators.Bridge315();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Linq.TestLinqAggregateOperators",
                        File: "Batch1\\Linq\\TestLinqAggregateOperators.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqConversionOperators", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqConversionOperators)],
        statics: {
            methods: {
                Test: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqConversionOperators).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqConversionOperators, 13, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Test()",
                        Line: "30"
                    } ));
                    Bridge.ClientTest.Linq.TestLinqConversionOperators.Test();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Linq.TestLinqConversionOperators",
                        File: "Batch1\\Linq\\TestLinqConversionOperators.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqElementOperators", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqElementOperators)],
        statics: {
            methods: {
                Test: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqElementOperators).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqElementOperators, 26, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Test()",
                        Line: "11"
                    } ));
                    Bridge.ClientTest.Linq.TestLinqElementOperators.Test();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Linq.TestLinqElementOperators",
                        File: "Batch1\\Linq\\TestLinqElementOperators.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqGenerationOperators", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqGenerationOperators)],
        statics: {
            methods: {
                Test: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqGenerationOperators).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqGenerationOperators, 2, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Test()",
                        Line: "10"
                    } ));
                    Bridge.ClientTest.Linq.TestLinqGenerationOperators.Test();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Linq.TestLinqGenerationOperators",
                        File: "Batch1\\Linq\\TestLinqGenerationOperators.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqGroupingOperators", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqGroupingOperators)],
        statics: {
            methods: {
                Test: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqGroupingOperators).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqGroupingOperators, 3, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Test()",
                        Line: "38"
                    } ));
                    Bridge.ClientTest.Linq.TestLinqGroupingOperators.Test();
                },
                TestComplexGrouping: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqGroupingOperators).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqGroupingOperators, 1, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestComplexGrouping()",
                        Line: "105"
                    } ));
                    Bridge.ClientTest.Linq.TestLinqGroupingOperators.TestComplexGrouping();
                },
                TestAnagrams: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqGroupingOperators).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqGroupingOperators, 2, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestAnagrams()",
                        Line: "147"
                    } ));
                    Bridge.ClientTest.Linq.TestLinqGroupingOperators.TestAnagrams();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Linq.TestLinqGroupingOperators",
                        File: "Batch1\\Linq\\TestLinqGroupingOperators.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqJoinOperators", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqJoinOperators)],
        statics: {
            methods: {
                Test: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqJoinOperators).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqJoinOperators, 5, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Test()",
                        Line: "11"
                    } ));
                    Bridge.ClientTest.Linq.TestLinqJoinOperators.Test();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Linq.TestLinqJoinOperators",
                        File: "Batch1\\Linq\\TestLinqJoinOperators.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqMiscellaneousOperators", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqMiscellaneousOperators)],
        statics: {
            methods: {
                Test: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqMiscellaneousOperators).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqMiscellaneousOperators, 4, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Test()",
                        Line: "11"
                    } ));
                    Bridge.ClientTest.Linq.TestLinqMiscellaneousOperators.Test();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Linq.TestLinqMiscellaneousOperators",
                        File: "Batch1\\Linq\\TestLinqMiscellaneousOperators.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqOrderingOperators", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqOrderingOperators)],
        statics: {
            methods: {
                Test: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqOrderingOperators).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqOrderingOperators, 8, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Test()",
                        Line: "11"
                    } ));
                    Bridge.ClientTest.Linq.TestLinqOrderingOperators.Test();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Linq.TestLinqOrderingOperators",
                        File: "Batch1\\Linq\\TestLinqOrderingOperators.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqPartitioningOperators", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqPartitioningOperators)],
        statics: {
            methods: {
                Test: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqPartitioningOperators).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqPartitioningOperators, 8, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Test()",
                        Line: "11"
                    } ));
                    Bridge.ClientTest.Linq.TestLinqPartitioningOperators.Test();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Linq.TestLinqPartitioningOperators",
                        File: "Batch1\\Linq\\TestLinqPartitioningOperators.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqProjectionOperators", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqProjectionOperators)],
        statics: {
            methods: {
                Test: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqProjectionOperators).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqProjectionOperators, 8, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Test()",
                        Line: "16"
                    } ));
                    Bridge.ClientTest.Linq.TestLinqProjectionOperators.Test();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Linq.TestLinqProjectionOperators",
                        File: "Batch1\\Linq\\TestLinqProjectionOperators.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqQuantifiers", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqQuantifiers)],
        statics: {
            methods: {
                Test: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqQuantifiers).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqQuantifiers, 4, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Test()",
                        Line: "11"
                    } ));
                    Bridge.ClientTest.Linq.TestLinqQuantifiers.Test();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Linq.TestLinqQuantifiers",
                        File: "Batch1\\Linq\\TestLinqQuantifiers.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqQueryExecution", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqQueryExecution)],
        statics: {
            methods: {
                Test: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqQueryExecution).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqQueryExecution, 6, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Test()",
                        Line: "11"
                    } ));
                    Bridge.ClientTest.Linq.TestLinqQueryExecution.Test();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Linq.TestLinqQueryExecution",
                        File: "Batch1\\Linq\\TestLinqQueryExecution.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqRestrictionOperators", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqRestrictionOperators)],
        statics: {
            methods: {
                Test: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqRestrictionOperators).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqRestrictionOperators, 5, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Test()",
                        Line: "11"
                    } ));
                    Bridge.ClientTest.Linq.TestLinqRestrictionOperators.Test();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Linq.TestLinqRestrictionOperators",
                        File: "Batch1\\Linq\\TestLinqRestrictionOperators.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqSetOperators", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqSetOperators)],
        statics: {
            methods: {
                Test: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Linq.TestLinqSetOperators).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestLinqSetOperators, 8, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Test()",
                        Line: "11"
                    } ));
                    Bridge.ClientTest.Linq.TestLinqSetOperators.Test();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Linq.TestLinqSetOperators",
                        File: "Batch1\\Linq\\TestLinqSetOperators.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestMethodParametersClass", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestMethodParametersClass)],
        statics: {
            methods: {
                Test: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestMethodParametersClass).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestMethodParametersClass, 3, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Test()",
                        Line: "25"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestMethodParametersClass.Test();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.BasicCSharp.TestMethodParametersClass",
                        File: "Batch1\\BasicCSharp\\TestMethodParametersClass.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestNameOf", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestNameOf)],
        statics: {
            methods: {
                TestBasic: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestNameOf).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestNameOf, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestBasic()",
                        Line: "30"
                    } ));
                    Bridge.ClientTest.CSharp6.TestNameOf.TestBasic();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.CSharp6.TestNameOf",
                        File: "Batch1\\CSharp6\\TestNameof.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestOverloadInstanceMethods", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestOverloadInstanceMethods)],
        statics: {
            methods: {
                TestInstance: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestOverloadInstanceMethods).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestOverloadInstanceMethods, 17, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestInstance()",
                        Line: "82"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestOverloadInstanceMethods.TestInstance();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.BasicCSharp.TestOverloadInstanceMethods",
                        File: "Batch1\\BasicCSharp\\TestOverloadInstanceMethods.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestOverloadStaticMethods", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods)],
        statics: {
            methods: {
                TestStatic: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestOverloadStaticMethods, 16, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestStatic()",
                        Line: "82"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods.TestStatic();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods",
                        File: "Batch1\\BasicCSharp\\TestOverloadStaticMethods.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestReferenceTypes", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestReferenceTypes)],
        statics: {
            methods: {
                TestInstanceConstructorsAndMethods: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestReferenceTypes).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestReferenceTypes, 26, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestInstanceConstructorsAndMethods()",
                        Line: "256"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestReferenceTypes.TestInstanceConstructorsAndMethods();
                },
                TestStaticConstructorsAndMethods: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestReferenceTypes).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestReferenceTypes, 13, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestStaticConstructorsAndMethods()",
                        Line: "322"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestReferenceTypes.TestStaticConstructorsAndMethods();
                },
                TestMethodParameters: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestReferenceTypes).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestReferenceTypes, 16, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestMethodParameters()",
                        Line: "354"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestReferenceTypes.TestMethodParameters();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.BasicCSharp.TestReferenceTypes",
                        File: "Batch1\\BasicCSharp\\TestReferenceTypes.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchBlocks", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks)],
        statics: {
            methods: {
                SimpleTryCatch: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchBlocks, 1, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SimpleTryCatch()",
                        Line: "16"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.SimpleTryCatch();
                },
                CaughtExceptions: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchBlocks, 3, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CaughtExceptions()",
                        Line: "24"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.CaughtExceptions();
                },
                ThrownExceptions: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchBlocks, 12, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ThrownExceptions()",
                        Line: "37"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.ThrownExceptions();
                },
                Bridge320: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchBlocks, 1, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Bridge320()",
                        Line: "63"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.Bridge320();
                },
                Bridge343: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchBlocks, 1, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Bridge343()",
                        Line: "84"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.Bridge343();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks",
                        File: "Batch1\\BasicCSharp\\TestTryCatchBlocks.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchFinallyBlocks", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks)],
        statics: {
            methods: {
                SimpleTryCatchFinally: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchFinallyBlocks, 1, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SimpleTryCatchFinally()",
                        Line: "24"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.SimpleTryCatchFinally();
                },
                CaughtExceptions: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchFinallyBlocks, 4, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CaughtExceptions()",
                        Line: "33"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.CaughtExceptions();
                },
                ThrownExceptions: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestTryCatchFinallyBlocks, 16, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ThrownExceptions()",
                        Line: "53"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.ThrownExceptions();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks",
                        File: "Batch1\\BasicCSharp\\TestTryCatchFinallyBlocks.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestUsingStatic", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestUsingStatic)],
        statics: {
            methods: {
                TestBasic: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CSharp6.TestUsingStatic).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestUsingStatic, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestBasic()",
                        Line: "9"
                    } ));
                    Bridge.ClientTest.CSharp6.TestUsingStatic.TestBasic();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.CSharp6.TestUsingStatic",
                        File: "Batch1\\CSharp6\\TestUsingStatic.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestValueTypes", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestValueTypes)],
        statics: {
            methods: {
                TestInstanceConstructorsAndMethods: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestValueTypes).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestValueTypes, 18, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestInstanceConstructorsAndMethods()",
                        Line: "75"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestValueTypes.TestInstanceConstructorsAndMethods();
                },
                TestStaticConstructorsAndMethods: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestValueTypes).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestValueTypes, 7, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestStaticConstructorsAndMethods()",
                        Line: "126"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestValueTypes.TestStaticConstructorsAndMethods();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.BasicCSharp.TestValueTypes",
                        File: "Batch1\\BasicCSharp\\TestValueTypes.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TestVersion)],
        statics: {
            methods: {
                TestConstructors: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TestVersion).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion, 42, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestConstructors()",
                        Line: "11"
                    } ));
                    Bridge.ClientTest.SimpleTypes.TestVersion.TestConstructors();
                },
                TestCloneCompare: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TestVersion).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion, 13, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestCloneCompare()",
                        Line: "70"
                    } ));
                    Bridge.ClientTest.SimpleTypes.TestVersion.TestCloneCompare();
                },
                TestEqualsGetHashCode: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TestVersion).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion, 9, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestEqualsGetHashCode()",
                        Line: "99"
                    } ));
                    Bridge.ClientTest.SimpleTypes.TestVersion.TestEqualsGetHashCode();
                },
                TestToString: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TestVersion).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion, 10, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestToString()",
                        Line: "120"
                    } ));
                    Bridge.ClientTest.SimpleTypes.TestVersion.TestToString();
                },
                TestParse: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TestVersion).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion, 6, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestParse()",
                        Line: "145"
                    } ));
                    Bridge.ClientTest.SimpleTypes.TestVersion.TestParse();
                },
                TestOperators: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TestVersion).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestVersion, 30, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestOperators()",
                        Line: "173"
                    } ));
                    Bridge.ClientTest.SimpleTypes.TestVersion.TestOperators();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.SimpleTypes.TestVersion",
                        File: "Batch1\\SimpleTypes\\TestVersion.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TestVirtualMethods", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestVirtualMethods)],
        statics: {
            methods: {
                TestB: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.BasicCSharp.TestVirtualMethods).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TestVirtualMethods, 7, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestB()",
                        Line: "30"
                    } ));
                    Bridge.ClientTest.BasicCSharp.TestVirtualMethods.TestB();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.BasicCSharp.TestVirtualMethods",
                        File: "Batch1\\BasicCSharp\\TestVirtualMethods.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutExceptionTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.TimeoutExceptionTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.TimeoutExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "12"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.TimeoutExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorWorks()",
                        Line: "22"
                    } ));
                    t.Fixture.DefaultConstructorWorks();
                },
                ConstructorWithMessageWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.TimeoutExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageWorks()",
                        Line: "31"
                    } ));
                    t.Fixture.ConstructorWithMessageWorks();
                },
                ConstructorWithMessageAndInnerExceptionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Exceptions.TimeoutExceptionTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeoutExceptionTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorWithMessageAndInnerExceptionWorks()",
                        Line: "40"
                    } ));
                    t.Fixture.ConstructorWithMessageAndInnerExceptionWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Exceptions.TimeoutExceptionTests",
                        File: "Batch1\\Exceptions\\TimeoutExceptionTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TimerTests)],
        statics: {
            methods: {
                TestTimerThrows: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TimerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestTimerThrows()",
                        Line: "34"
                    } ));
                    t.Fixture.TestTimerThrows();
                },
                TestStaticCallbackWithDispose: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TimerTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestStaticCallbackWithDispose()",
                        Line: "63"
                    } ));
                    Bridge.ClientTest.Threading.TimerTests.TestStaticCallbackWithDispose();
                },
                TestStaticCallbackWithChange: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TimerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestStaticCallbackWithChange()",
                        Line: "89"
                    } ));
                    t.Fixture.TestStaticCallbackWithChange();
                },
                TestInstanceCallbackWithDispose: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TimerTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestInstanceCallbackWithDispose()",
                        Line: "122"
                    } ));
                    Bridge.ClientTest.Threading.TimerTests.TestInstanceCallbackWithDispose();
                },
                TestInstanceCallbackWithChange: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TimerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestInstanceCallbackWithChange()",
                        Line: "146"
                    } ));
                    t.Fixture.TestInstanceCallbackWithChange();
                },
                TestInfiniteTimer: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Threading.TimerTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimerTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestInfiniteTimer()",
                        Line: "178"
                    } ));
                    t.Fixture.TestInfiniteTimer();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Threading.TimerTests",
                        File: "Batch1\\Threading\\TimerTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "10"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                DefaultConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorWorks()",
                        Line: "20"
                    } ));
                    t.Fixture.DefaultConstructorWorks();
                },
                DefaultValueWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultValueWorks()",
                        Line: "27"
                    } ));
                    t.Fixture.DefaultValueWorks();
                },
                ZeroWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ZeroWorks()",
                        Line: "34"
                    } ));
                    t.Fixture.ZeroWorks();
                },
                CreatingInstanceReturnsTimeSpanWithZeroValue: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CreatingInstanceReturnsTimeSpanWithZeroValue()",
                        Line: "41"
                    } ));
                    t.Fixture.CreatingInstanceReturnsTimeSpanWithZeroValue();
                },
                ParameterConstructorsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ParameterConstructorsWorks()",
                        Line: "48"
                    } ));
                    t.Fixture.ParameterConstructorsWorks();
                },
                FactoryMethodsWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FactoryMethodsWork()",
                        Line: "68"
                    } ));
                    t.Fixture.FactoryMethodsWork();
                },
                PropertiesWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PropertiesWork()",
                        Line: "96"
                    } ));
                    t.Fixture.PropertiesWork();
                },
                CompareToWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CompareToWorks()",
                        Line: "113"
                    } ));
                    t.Fixture.CompareToWorks();
                },
                CompareWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CompareWorks()",
                        Line: "126"
                    } ));
                    t.Fixture.CompareWorks();
                },
                StaticEqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StaticEqualsWorks()",
                        Line: "139"
                    } ));
                    t.Fixture.StaticEqualsWorks();
                },
                EqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EqualsWorks()",
                        Line: "150"
                    } ));
                    t.Fixture.EqualsWorks();
                },
                IEquatableEqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IEquatableEqualsWorks()",
                        Line: "161"
                    } ));
                    t.Fixture.IEquatableEqualsWorks();
                },
                ToStringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToStringWorks()",
                        Line: "172"
                    } ));
                    t.Fixture.ToStringWorks();
                },
                AddWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AddWorks()",
                        Line: "185"
                    } ));
                    t.Fixture.AddWorks();
                },
                SubtractWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SubtractWorks()",
                        Line: "195"
                    } ));
                    t.Fixture.SubtractWorks();
                },
                DurationWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DurationWorks()",
                        Line: "205"
                    } ));
                    t.Fixture.DurationWorks();
                },
                NegateWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NegateWorks()",
                        Line: "217"
                    } ));
                    t.Fixture.NegateWorks();
                },
                ComparisonOperatorsWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ComparisonOperatorsWork()",
                        Line: "234"
                    } ));
                    t.Fixture.ComparisonOperatorsWork();
                },
                AdditionOperatorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AdditionOperatorWorks()",
                        Line: "271"
                    } ));
                    t.Fixture.AdditionOperatorWorks();
                },
                SubtractionOperatorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SubtractionOperatorWorks()",
                        Line: "281"
                    } ));
                    t.Fixture.SubtractionOperatorWorks();
                },
                UnaryPlusWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "UnaryPlusWorks()",
                        Line: "291"
                    } ));
                    t.Fixture.UnaryPlusWorks();
                },
                UnaryMinusWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TimeSpanTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TimeSpanTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "UnaryMinusWorks()",
                        Line: "300"
                    } ));
                    t.Fixture.UnaryMinusWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.SimpleTypes.TimeSpanTests",
                        File: "Batch1\\SimpleTypes\\TimeSpanTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TupleTests)],
        statics: {
            methods: {
                Tuple1Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TupleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Tuple1Works()",
                        Line: "10"
                    } ));
                    t.Fixture.Tuple1Works();
                },
                Tuple2Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TupleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Tuple2Works()",
                        Line: "20"
                    } ));
                    t.Fixture.Tuple2Works();
                },
                Tuple3Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TupleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Tuple3Works()",
                        Line: "31"
                    } ));
                    t.Fixture.Tuple3Works();
                },
                Tuple4Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TupleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Tuple4Works()",
                        Line: "43"
                    } ));
                    t.Fixture.Tuple4Works();
                },
                Tuple5Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TupleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Tuple5Works()",
                        Line: "56"
                    } ));
                    t.Fixture.Tuple5Works();
                },
                Tuple6Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TupleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Tuple6Works()",
                        Line: "70"
                    } ));
                    t.Fixture.Tuple6Works();
                },
                Tuple7Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TupleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Tuple7Works()",
                        Line: "85"
                    } ));
                    t.Fixture.Tuple7Works();
                },
                Tuple8Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.TupleTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TupleTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "Tuple8Works()",
                        Line: "101"
                    } ));
                    t.Fixture.Tuple8Works();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.SimpleTypes.TupleTests",
                        File: "Batch1\\SimpleTypes\\TupleTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests)],
        statics: {
            methods: {
                CanGetCustomTypeAttributesForTypeWithNoAttributes: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CanGetCustomTypeAttributesForTypeWithNoAttributes()",
                        Line: "415"
                    } ));
                    t.Fixture.CanGetCustomTypeAttributesForTypeWithNoAttributes();
                },
                CanGetCustomTypeAttributesForClassWithAttributes: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CanGetCustomTypeAttributesForClassWithAttributes()",
                        Line: "422"
                    } ));
                    t.Fixture.CanGetCustomTypeAttributesForClassWithAttributes();
                },
                NonScriptableAttributesAreNotIncluded: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NonScriptableAttributesAreNotIncluded()",
                        Line: "435"
                    } ));
                    t.Fixture.NonScriptableAttributesAreNotIncluded();
                },
                CanGetCustomTypeAttributesForInterfaceWithAttributes: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CanGetCustomTypeAttributesForInterfaceWithAttributes()",
                        Line: "443"
                    } ));
                    t.Fixture.CanGetCustomTypeAttributesForInterfaceWithAttributes();
                },
                CanGetCustomTypeAttributesForEnumWithAttributes: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CanGetCustomTypeAttributesForEnumWithAttributes()",
                        Line: "456"
                    } ));
                    t.Fixture.CanGetCustomTypeAttributesForEnumWithAttributes();
                },
                InheritedFlagToGetCustomAttributesWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InheritedFlagToGetCustomAttributesWorks()",
                        Line: "469"
                    } ));
                    t.Fixture.InheritedFlagToGetCustomAttributesWorks();
                },
                DeepInheritanceWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DeepInheritanceWorks()",
                        Line: "483"
                    } ));
                    t.Fixture.DeepInheritanceWorks();
                },
                OverridingSingleUseAttributeReplacesTheAttributeOnTheBaseClass: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "OverridingSingleUseAttributeReplacesTheAttributeOnTheBaseClass()",
                        Line: "494"
                    } ));
                    t.Fixture.OverridingSingleUseAttributeReplacesTheAttributeOnTheBaseClass();
                },
                ApplyingNewInstanceOfMultipleUseAttributeAddsTheAttribute: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ApplyingNewInstanceOfMultipleUseAttributeAddsTheAttribute()",
                        Line: "505"
                    } ));
                    t.Fixture.ApplyingNewInstanceOfMultipleUseAttributeAddsTheAttribute();
                },
                NonInheritedAttributeIsNotInherited: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NonInheritedAttributeIsNotInherited()",
                        Line: "517"
                    } ));
                    t.Fixture.NonInheritedAttributeIsNotInherited();
                },
                GetCustomAttributesTypeFilterWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetCustomAttributesTypeFilterWorks()",
                        Line: "524"
                    } ));
                    t.Fixture.GetCustomAttributesTypeFilterWorks();
                },
                GetCustomAttributesWorksForOpenGenericClass: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetCustomAttributesWorksForOpenGenericClass()",
                        Line: "534"
                    } ));
                    t.Fixture.GetCustomAttributesWorksForOpenGenericClass();
                },
                GetCustomAttributesWorksForConstructedGenericClass: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetCustomAttributesWorksForConstructedGenericClass()",
                        Line: "542"
                    } ));
                    t.Fixture.GetCustomAttributesWorksForConstructedGenericClass();
                },
                GetCustomAttributesWorksForOpenGenericInterface: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetCustomAttributesWorksForOpenGenericInterface()",
                        Line: "550"
                    } ));
                    t.Fixture.GetCustomAttributesWorksForOpenGenericInterface();
                },
                GetCustomAttributesWorksForConstructedGenericInterface: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetCustomAttributesWorksForConstructedGenericInterface()",
                        Line: "558"
                    } ));
                    t.Fixture.GetCustomAttributesWorksForConstructedGenericInterface();
                },
                AllSupportedScalarTypesCanBeUsedAsAttributeArguments: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AllSupportedScalarTypesCanBeUsedAsAttributeArguments()",
                        Line: "566"
                    } ));
                    t.Fixture.AllSupportedScalarTypesCanBeUsedAsAttributeArguments();
                },
                ArraysCanBeUsedAsAttributeArguments: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArraysCanBeUsedAsAttributeArguments()",
                        Line: "584"
                    } ));
                    t.Fixture.ArraysCanBeUsedAsAttributeArguments();
                },
                NamedValuesEnumCanBeUsedAsAttributeArgument: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NamedValuesEnumCanBeUsedAsAttributeArgument()",
                        Line: "592"
                    } ));
                    t.Fixture.NamedValuesEnumCanBeUsedAsAttributeArgument();
                },
                PropertiesWithSetMethodsImplementedAsNormalMethodsCanBeSetInAttributeDeclaration: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PropertiesWithSetMethodsImplementedAsNormalMethodsCanBeSetInAttributeDeclaration()",
                        Line: "599"
                    } ));
                    t.Fixture.PropertiesWithSetMethodsImplementedAsNormalMethodsCanBeSetInAttributeDeclaration();
                },
                PropertiesWithSetMethodsImplementedAsInlineCodeCanBeSetInAttributeDeclaration: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PropertiesWithSetMethodsImplementedAsInlineCodeCanBeSetInAttributeDeclaration()",
                        Line: "606"
                    } ));
                    t.Fixture.PropertiesWithSetMethodsImplementedAsInlineCodeCanBeSetInAttributeDeclaration();
                },
                PropertiesImplementedAsFieldsCanBeAssignedInAttributeDeclaration: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "PropertiesImplementedAsFieldsCanBeAssignedInAttributeDeclaration()",
                        Line: "613"
                    } ));
                    t.Fixture.PropertiesImplementedAsFieldsCanBeAssignedInAttributeDeclaration();
                },
                FieldsCanBeAssignedInAttributeDeclaration: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FieldsCanBeAssignedInAttributeDeclaration()",
                        Line: "620"
                    } ));
                    t.Fixture.FieldsCanBeAssignedInAttributeDeclaration();
                },
                CreatingAttributeWithNamedConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CreatingAttributeWithNamedConstructorWorks()",
                        Line: "627"
                    } ));
                    t.Fixture.CreatingAttributeWithNamedConstructorWorks();
                },
                CreatingAttributeWithInlineCodeConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CreatingAttributeWithInlineCodeConstructorWorks()",
                        Line: "634"
                    } ));
                    t.Fixture.CreatingAttributeWithInlineCodeConstructorWorks();
                },
                ConditionalAttributesWhoseSymbolsAreNotDefinedAreRemoved: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeAttributeTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeAttributeTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConditionalAttributesWhoseSymbolsAreNotDefinedAreRemoved()",
                        Line: "641"
                    } ));
                    t.Fixture.ConditionalAttributesWhoseSymbolsAreNotDefinedAreRemoved();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Reflection.TypeAttributeTests",
                        File: "Batch1\\Reflection\\TypeAttributeTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests)],
        statics: {
            methods: {
                TypeIsWorksForReferenceTypes: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypeIsWorksForReferenceTypes()",
                        Line: "145"
                    } ));
                    t.Fixture.TypeIsWorksForReferenceTypes();
                },
                TypeAsWorksForReferenceTypes: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypeAsWorksForReferenceTypes()",
                        Line: "288"
                    } ));
                    t.Fixture.TypeAsWorksForReferenceTypes();
                },
                CastWorksForReferenceTypes: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CastWorksForReferenceTypes()",
                        Line: "431"
                    } ));
                    t.Fixture.CastWorksForReferenceTypes();
                },
                GetTypeWorksOnObjects: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetTypeWorksOnObjects()",
                        Line: "574"
                    } ));
                    t.Fixture.GetTypeWorksOnObjects();
                },
                GetTypeOnNullInstanceThrowsException: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetTypeOnNullInstanceThrowsException()",
                        Line: "588"
                    } ));
                    t.Fixture.GetTypeOnNullInstanceThrowsException();
                },
                CastOperatorForSerializableTypeWithoutTypeCheckCodeAlwaysSucceedsGeneric: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CastOperatorForSerializableTypeWithoutTypeCheckCodeAlwaysSucceedsGeneric()",
                        Line: "601"
                    } ));
                    t.Fixture.CastOperatorForSerializableTypeWithoutTypeCheckCodeAlwaysSucceedsGeneric();
                },
                TypeCheckForSubTypeOfGenericType: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemLanguageSupportTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypeCheckForSubTypeOfGenericType()",
                        Line: "643"
                    } ));
                    t.Fixture.TypeCheckForSubTypeOfGenericType();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Reflection.TypeSystemLanguageSupportTests",
                        File: "Batch1\\Reflection\\TypeSystemLanguageSupportTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests)],
        statics: {
            methods: {
                FullNamePropertyReturnsTheNameWithTheNamespace: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FullNamePropertyReturnsTheNameWithTheNamespace()",
                        Line: "252"
                    } ));
                    t.Fixture.FullNamePropertyReturnsTheNameWithTheNamespace();
                },
                AssemblyQualifiedNameReturnsTheNameWithTheNamespaceAndAssemblyName: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AssemblyQualifiedNameReturnsTheNameWithTheNamespaceAndAssemblyName()",
                        Line: "258"
                    } ));
                    t.Fixture.AssemblyQualifiedNameReturnsTheNameWithTheNamespaceAndAssemblyName();
                },
                AssemblyPropertyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AssemblyPropertyWorks()",
                        Line: "266"
                    } ));
                    t.Fixture.AssemblyPropertyWorks();
                },
                NamespacePropertyReturnsTheNamespaceWithoutTheName: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NamespacePropertyReturnsTheNamespaceWithoutTheName()",
                        Line: "278"
                    } ));
                    t.Fixture.NamespacePropertyReturnsTheNamespaceWithoutTheName();
                },
                InstantiatingClassWithConstructorThatNeedsToBeAppliedWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InstantiatingClassWithConstructorThatNeedsToBeAppliedWorks()",
                        Line: "285"
                    } ));
                    t.Fixture.InstantiatingClassWithConstructorThatNeedsToBeAppliedWorks();
                },
                NamePropertyRemovesTheNamespace: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NamePropertyRemovesTheNamespace()",
                        Line: "295"
                    } ));
                    t.Fixture.NamePropertyRemovesTheNamespace();
                },
                GettingBaseTypeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GettingBaseTypeWorks()",
                        Line: "303"
                    } ));
                    t.Fixture.GettingBaseTypeWorks();
                },
                GettingImplementedInterfacesWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GettingImplementedInterfacesWorks()",
                        Line: "311"
                    } ));
                    t.Fixture.GettingImplementedInterfacesWorks();
                },
                TypeOfAnOpenGenericClassWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypeOfAnOpenGenericClassWorks()",
                        Line: "322"
                    } ));
                    t.Fixture.TypeOfAnOpenGenericClassWorks();
                },
                TypeOfAnOpenGenericInterfaceWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypeOfAnOpenGenericInterfaceWorks()",
                        Line: "328"
                    } ));
                    t.Fixture.TypeOfAnOpenGenericInterfaceWorks();
                },
                TypeOfInstantiatedGenericClassWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypeOfInstantiatedGenericClassWorks()",
                        Line: "334"
                    } ));
                    t.Fixture.TypeOfInstantiatedGenericClassWorks();
                },
                TypeOfInstantiatedGenericInterfaceWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypeOfInstantiatedGenericInterfaceWorks()",
                        Line: "340"
                    } ));
                    t.Fixture.TypeOfInstantiatedGenericInterfaceWorks();
                },
                ConstructingAGenericTypeTwiceWithTheSameArgumentsReturnsTheSameInstance: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructingAGenericTypeTwiceWithTheSameArgumentsReturnsTheSameInstance()",
                        Line: "346"
                    } ));
                    t.Fixture.ConstructingAGenericTypeTwiceWithTheSameArgumentsReturnsTheSameInstance();
                },
                AccessingAStaticMemberInAGenericClassWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AccessingAStaticMemberInAGenericClassWorks()",
                        Line: "356"
                    } ));
                    t.Fixture.AccessingAStaticMemberInAGenericClassWorks();
                },
                TypeOfNestedGenericClassWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypeOfNestedGenericClassWorks()",
                        Line: "364"
                    } ));
                    t.Fixture.TypeOfNestedGenericClassWorks();
                },
                BaseTypeAndImplementedInterfacesForGenericTypeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "BaseTypeAndImplementedInterfacesForGenericTypeWorks()",
                        Line: "370"
                    } ));
                    t.Fixture.BaseTypeAndImplementedInterfacesForGenericTypeWorks();
                },
                IsAbstractWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsAbstractWorks()",
                        Line: "377"
                    } ));
                    t.Fixture.IsAbstractWorks();
                },
                IsGenericTypeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsGenericTypeWorks()",
                        Line: "390"
                    } ));
                    t.Fixture.IsGenericTypeWorks();
                },
                IsNestedWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsNestedWorks()",
                        Line: "402"
                    } ));
                    Bridge.ClientTest.Reflection.TypeSystemTests.IsNestedWorks();
                },
                IsPublicWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsPublicWorks()",
                        Line: "411"
                    } ));
                    t.Fixture.IsPublicWorks();
                },
                IsNestedPublicWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsNestedPublicWorks()",
                        Line: "427"
                    } ));
                    t.Fixture.IsNestedPublicWorks();
                },
                IsNestedPrivateWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsNestedPrivateWorks()",
                        Line: "444"
                    } ));
                    t.Fixture.IsNestedPrivateWorks();
                },
                IsNestedFamilyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsNestedFamilyWorks()",
                        Line: "461"
                    } ));
                    t.Fixture.IsNestedFamilyWorks();
                },
                IsNestedAssemblyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsNestedAssemblyWorks()",
                        Line: "480"
                    } ));
                    t.Fixture.IsNestedAssemblyWorks();
                },
                IsNotPublicWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsNotPublicWorks()",
                        Line: "499"
                    } ));
                    t.Fixture.IsNotPublicWorks();
                },
                IsSealedWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsSealedWorks()",
                        Line: "516"
                    } ));
                    t.Fixture.IsSealedWorks();
                },
                AttributesWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "AttributesWorks()",
                        Line: "528"
                    } ));
                    t.Fixture.AttributesWorks();
                },
                ContainsGenericParametersWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ContainsGenericParametersWorks()",
                        Line: "543"
                    } ));
                    Bridge.ClientTest.Reflection.TypeSystemTests.ContainsGenericParametersWorks();
                },
                DeclaringTypeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DeclaringTypeWorks()",
                        Line: "561"
                    } ));
                    Bridge.ClientTest.Reflection.TypeSystemTests.DeclaringTypeWorks();
                },
                IsGenericParameterWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, 58, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsGenericParameterWorks()",
                        Line: "589"
                    } ));
                    Bridge.ClientTest.Reflection.TypeSystemTests.IsGenericParameterWorks();
                },
                GetEnumNamesWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetEnumNamesWorks()",
                        Line: "634"
                    } ));
                    t.Fixture.GetEnumNamesWorks();
                },
                GetEnumNameWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetEnumNameWorks()",
                        Line: "646"
                    } ));
                    t.Fixture.GetEnumNameWorks();
                },
                GetEnumValuesWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetEnumValuesWorks()",
                        Line: "680"
                    } ));
                    t.Fixture.GetEnumValuesWorks();
                },
                GetEnumUnderlyingTypeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetEnumUnderlyingTypeWorks()",
                        Line: "692"
                    } ));
                    t.Fixture.GetEnumUnderlyingTypeWorks();
                },
                IsGenericTypeDefinitionWorksAsExpected: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsGenericTypeDefinitionWorksAsExpected()",
                        Line: "705"
                    } ));
                    t.Fixture.IsGenericTypeDefinitionWorksAsExpected();
                },
                GenericParameterCountReturnsZeroForConstructedTypesAndNonZeroForOpenOnes: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GenericParameterCountReturnsZeroForConstructedTypesAndNonZeroForOpenOnes()",
                        Line: "717"
                    } ));
                    t.Fixture.GenericParameterCountReturnsZeroForConstructedTypesAndNonZeroForOpenOnes();
                },
                GetGenericArgumentsReturnsTheCorrectTypesForConstructedTypesOtherwiseNull: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetGenericArgumentsReturnsTheCorrectTypesForConstructedTypesOtherwiseNull()",
                        Line: "729"
                    } ));
                    t.Fixture.GetGenericArgumentsReturnsTheCorrectTypesForConstructedTypesOtherwiseNull();
                },
                GetGenericTypeDefinitionReturnsTheGenericTypeDefinitionForConstructedTypeOtherwiseNull: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetGenericTypeDefinitionReturnsTheGenericTypeDefinitionForConstructedTypeOtherwiseNull()",
                        Line: "741"
                    } ));
                    t.Fixture.GetGenericTypeDefinitionReturnsTheGenericTypeDefinitionForConstructedTypeOtherwiseNull();
                },
                IsAssignableFromWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsAssignableFromWorks()",
                        Line: "830"
                    } ));
                    t.Fixture.IsAssignableFromWorks();
                },
                IsSubclassOfWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsSubclassOfWorks()",
                        Line: "1038"
                    } ));
                    t.Fixture.IsSubclassOfWorks();
                },
                IsClassWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsClassWorks()",
                        Line: "1055"
                    } ));
                    t.Fixture.IsClassWorks();
                },
                IsEnumWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsEnumWorks()",
                        Line: "1068"
                    } ));
                    t.Fixture.IsEnumWorks();
                },
                IsArrayWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsArrayWorks()",
                        Line: "1081"
                    } ));
                    t.Fixture.IsArrayWorks();
                },
                IsFlagsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsFlagsWorks()",
                        Line: "1093"
                    } ));
                    t.Fixture.IsFlagsWorks();
                },
                IsInterfaceWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsInterfaceWorks()",
                        Line: "1106"
                    } ));
                    t.Fixture.IsInterfaceWorks();
                },
                IsInstanceOfTypeWorksForReferenceTypes: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IsInstanceOfTypeWorksForReferenceTypes()",
                        Line: "1119"
                    } ));
                    t.Fixture.IsInstanceOfTypeWorksForReferenceTypes();
                },
                InvokingBaseUnnamedConstructorWithoutArgumentsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InvokingBaseUnnamedConstructorWithoutArgumentsWorks()",
                        Line: "1311"
                    } ));
                    t.Fixture.InvokingBaseUnnamedConstructorWithoutArgumentsWorks();
                },
                InvokingBaseUnnamedConstructorWithArgumentsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InvokingBaseUnnamedConstructorWithArgumentsWorks()",
                        Line: "1341"
                    } ));
                    t.Fixture.InvokingBaseUnnamedConstructorWithArgumentsWorks();
                },
                InvokingBaseNamedConstructorWithoutArgumentsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InvokingBaseNamedConstructorWithoutArgumentsWorks()",
                        Line: "1371"
                    } ));
                    t.Fixture.InvokingBaseNamedConstructorWithoutArgumentsWorks();
                },
                InvokingBaseNamedConstructorWithArgumentsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InvokingBaseNamedConstructorWithArgumentsWorks()",
                        Line: "1401"
                    } ));
                    t.Fixture.InvokingBaseNamedConstructorWithArgumentsWorks();
                },
                ConstructingInstanceWithNamedConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructingInstanceWithNamedConstructorWorks()",
                        Line: "1441"
                    } ));
                    t.Fixture.ConstructingInstanceWithNamedConstructorWorks();
                },
                ConstructingInstanceWithNamedConstructorWorks2: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructingInstanceWithNamedConstructorWorks2()",
                        Line: "1450"
                    } ));
                    t.Fixture.ConstructingInstanceWithNamedConstructorWorks2();
                },
                InvokingBaseMethodWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InvokingBaseMethodWorks()",
                        Line: "1501"
                    } ));
                    t.Fixture.InvokingBaseMethodWorks();
                },
                InvokingGenericBaseMethodWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InvokingGenericBaseMethodWorks()",
                        Line: "1507"
                    } ));
                    t.Fixture.InvokingGenericBaseMethodWorks();
                },
                MethodGroupConversionWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MethodGroupConversionWorks()",
                        Line: "1593"
                    } ));
                    t.Fixture.MethodGroupConversionWorks();
                },
                MethodGroupConversionOnGenericMethodWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MethodGroupConversionOnGenericMethodWorks()",
                        Line: "1600"
                    } ));
                    t.Fixture.MethodGroupConversionOnGenericMethodWorks();
                },
                MethodGroupConversionOnBaseMethodWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MethodGroupConversionOnBaseMethodWorks()",
                        Line: "1607"
                    } ));
                    t.Fixture.MethodGroupConversionOnBaseMethodWorks();
                },
                MethodGroupConversionOnGenericBaseMethodWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MethodGroupConversionOnGenericBaseMethodWorks()",
                        Line: "1614"
                    } ));
                    t.Fixture.MethodGroupConversionOnGenericBaseMethodWorks();
                },
                ImportedInterfaceAppearsAsObjectWhenUsedAsGenericArgument: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ImportedInterfaceAppearsAsObjectWhenUsedAsGenericArgument()",
                        Line: "1621"
                    } ));
                    t.Fixture.ImportedInterfaceAppearsAsObjectWhenUsedAsGenericArgument();
                },
                FalseIsFunctionShouldReturnFalse: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FalseIsFunctionShouldReturnFalse()",
                        Line: "1627"
                    } ));
                    t.Fixture.FalseIsFunctionShouldReturnFalse();
                },
                CastingUndefinedToOtherTypeShouldReturnUndefined: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CastingUndefinedToOtherTypeShouldReturnUndefined()",
                        Line: "1633"
                    } ));
                    t.Fixture.CastingUndefinedToOtherTypeShouldReturnUndefined();
                },
                NonSerializableTypeCanInheritFromSerializableType: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "NonSerializableTypeCanInheritFromSerializableType()",
                        Line: "1639"
                    } ));
                    t.Fixture.NonSerializableTypeCanInheritFromSerializableType();
                },
                InheritingFromRecordWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InheritingFromRecordWorks()",
                        Line: "1647"
                    } ));
                    t.Fixture.InheritingFromRecordWorks();
                },
                InstanceOfWorksForSerializableTypesWithCustomTypeCheckCode: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "InstanceOfWorksForSerializableTypesWithCustomTypeCheckCode()",
                        Line: "1654"
                    } ));
                    t.Fixture.InstanceOfWorksForSerializableTypesWithCustomTypeCheckCode();
                },
                StaticGetTypeMethodWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StaticGetTypeMethodWorks()",
                        Line: "1663"
                    } ));
                    t.Fixture.StaticGetTypeMethodWorks();
                },
                StaticGetTypeMethodWithGenericsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StaticGetTypeMethodWithGenericsWorks()",
                        Line: "1673"
                    } ));
                    t.Fixture.StaticGetTypeMethodWithGenericsWorks();
                },
                CastingToNamedValuesEnumCastsToString: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CastingToNamedValuesEnumCastsToString()",
                        Line: "1722"
                    } ));
                    t.Fixture.CastingToNamedValuesEnumCastsToString();
                },
                CastingToImportedNamedValuesEnumCastsToString: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CastingToImportedNamedValuesEnumCastsToString()",
                        Line: "1742"
                    } ));
                    t.Fixture.CastingToImportedNamedValuesEnumCastsToString();
                },
                DefaultValueOfNamedValuesEnumIsNull: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultValueOfNamedValuesEnumIsNull()",
                        Line: "1758"
                    } ));
                    t.Fixture.DefaultValueOfNamedValuesEnumIsNull();
                },
                DefaultValueOfImportedNamedValuesEnumIsNull: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Reflection.TypeSystemTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.TypeSystemTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultValueOfImportedNamedValuesEnumIsNull()",
                        Line: "1765"
                    } ));
                    t.Fixture.DefaultValueOfImportedNamedValuesEnumIsNull();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Reflection.TypeSystemTests",
                        File: "Batch1\\Reflection\\TypeSystemTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests)],
        statics: {
            methods: {
                LengthConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LengthConstructorWorks()",
                        Line: "30"
                    } ));
                    t.Fixture.LengthConstructorWorks();
                },
                ConstructorFromIntWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorFromIntWorks()",
                        Line: "38"
                    } ));
                    t.Fixture.ConstructorFromIntWorks();
                },
                CopyConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CopyConstructorWorks()",
                        Line: "48"
                    } ));
                    t.Fixture.CopyConstructorWorks();
                },
                ArrayBufferConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayBufferConstructorWorks()",
                        Line: "58"
                    } ));
                    t.Fixture.ArrayBufferConstructorWorks();
                },
                ArrayBufferWithOffsetConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayBufferWithOffsetConstructorWorks()",
                        Line: "68"
                    } ));
                    t.Fixture.ArrayBufferWithOffsetConstructorWorks();
                },
                ArrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayBufferWithOffsetAndLengthConstructorWorks()",
                        Line: "78"
                    } ));
                    t.Fixture.ArrayBufferWithOffsetAndLengthConstructorWorks();
                },
                StaticBytesPerElementWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StaticBytesPerElementWorks()",
                        Line: "95"
                    } ));
                    t.Fixture.StaticBytesPerElementWorks();
                },
                LengthWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LengthWorks()",
                        Line: "101"
                    } ));
                    t.Fixture.LengthWorks();
                },
                IndexingWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexingWorks()",
                        Line: "108"
                    } ));
                    t.Fixture.IndexingWorks();
                },
                SetUint16ArrayWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetUint16ArrayWorks()",
                        Line: "117"
                    } ));
                    t.Fixture.SetUint16ArrayWorks();
                },
                SetUint16ArrayWithOffsetWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetUint16ArrayWithOffsetWorks()",
                        Line: "125"
                    } ));
                    t.Fixture.SetUint16ArrayWithOffsetWorks();
                },
                SetNormalArrayWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetNormalArrayWorks()",
                        Line: "133"
                    } ));
                    t.Fixture.SetNormalArrayWorks();
                },
                SetNormalArrayWithOffsetWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetNormalArrayWithOffsetWorks()",
                        Line: "141"
                    } ));
                    t.Fixture.SetNormalArrayWithOffsetWorks();
                },
                SubarrayWithBeginWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SubarrayWithBeginWorks()",
                        Line: "149"
                    } ));
                    t.Fixture.SubarrayWithBeginWorks();
                },
                SubarrayWithBeginAndEndWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SubarrayWithBeginAndEndWorks()",
                        Line: "159"
                    } ));
                    t.Fixture.SubarrayWithBeginAndEndWorks();
                },
                BufferPropertyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "BufferPropertyWorks()",
                        Line: "170"
                    } ));
                    t.Fixture.BufferPropertyWorks();
                },
                ByteOffsetPropertyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ByteOffsetPropertyWorks()",
                        Line: "178"
                    } ));
                    t.Fixture.ByteOffsetPropertyWorks();
                },
                ByteLengthPropertyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ByteLengthPropertyWorks()",
                        Line: "186"
                    } ));
                    t.Fixture.ByteLengthPropertyWorks();
                },
                IndexOfWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexOfWorks()",
                        Line: "193"
                    } ));
                    t.Fixture.IndexOfWorks();
                },
                ContainsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ContainsWorks()",
                        Line: "202"
                    } ));
                    t.Fixture.ContainsWorks();
                },
                ForeachWorks_SPI_1401: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ForeachWorks_SPI_1401()",
                        Line: "211"
                    } ));
                    t.Fixture.ForeachWorks_SPI_1401();
                },
                GetEnumeratorWorks_SPI_1401: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetEnumeratorWorks_SPI_1401()",
                        Line: "225"
                    } ));
                    t.Fixture.GetEnumeratorWorks_SPI_1401();
                },
                IEnumerableGetEnumeratorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IEnumerableGetEnumeratorWorks()",
                        Line: "239"
                    } ));
                    t.Fixture.IEnumerableGetEnumeratorWorks();
                },
                ICollectionMethodsWork_SPI_1559: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionMethodsWork_SPI_1559()",
                        Line: "252"
                    } ));
                    t.Fixture.ICollectionMethodsWork_SPI_1559();
                },
                IListMethodsWork_SPI_1559: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IListMethodsWork_SPI_1559()",
                        Line: "265"
                    } ));
                    t.Fixture.IListMethodsWork_SPI_1559();
                },
                IListIsReadOnlyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IListIsReadOnlyWorks()",
                        Line: "298"
                    } ));
                    t.Fixture.IListIsReadOnlyWorks();
                },
                ICollectionIsReadOnlyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionIsReadOnlyWorks()",
                        Line: "305"
                    } ));
                    t.Fixture.ICollectionIsReadOnlyWorks();
                },
                ICollectionCopyTo: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint16ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint16ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionCopyTo()",
                        Line: "312"
                    } ));
                    t.Fixture.ICollectionCopyTo();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Collections.Native.Uint16ArrayTests",
                        File: "Batch1\\Collections\\Native\\Uint16ArrayTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "10"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                CastsWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CastsWork()",
                        Line: "26"
                    } ));
                    t.Fixture.CastsWork();
                },
                DefaultValueIs0: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultValueIs0()",
                        Line: "70"
                    } ));
                    t.Fixture.DefaultValueIs0();
                },
                DefaultConstructorReturnsZero: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorReturnsZero()",
                        Line: "76"
                    } ));
                    t.Fixture.DefaultConstructorReturnsZero();
                },
                CreatingInstanceReturnsZero: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CreatingInstanceReturnsZero()",
                        Line: "82"
                    } ));
                    t.Fixture.CreatingInstanceReturnsZero();
                },
                ConstantsWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstantsWork()",
                        Line: "88"
                    } ));
                    t.Fixture.ConstantsWork();
                },
                FormatWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FormatWorks()",
                        Line: "95"
                    } ));
                    t.Fixture.FormatWorks();
                },
                IFormattableToStringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IFormattableToStringWorks()",
                        Line: "101"
                    } ));
                    t.Fixture.IFormattableToStringWorks();
                },
                TryParseWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TryParseWorks()",
                        Line: "107"
                    } ));
                    t.Fixture.TryParseWorks();
                },
                ParseWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ParseWorks()",
                        Line: "140"
                    } ));
                    t.Fixture.ParseWorks();
                },
                ToStringWithoutRadixWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToStringWithoutRadixWorks()",
                        Line: "152"
                    } ));
                    t.Fixture.ToStringWithoutRadixWorks();
                },
                ToStringWithRadixWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToStringWithRadixWorks()",
                        Line: "158"
                    } ));
                    t.Fixture.ToStringWithRadixWorks();
                },
                GetHashCodeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetHashCodeWorks()",
                        Line: "165"
                    } ));
                    t.Fixture.GetHashCodeWorks();
                },
                EqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EqualsWorks()",
                        Line: "173"
                    } ));
                    t.Fixture.EqualsWorks();
                },
                IEquatableEqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IEquatableEqualsWorks()",
                        Line: "182"
                    } ));
                    t.Fixture.IEquatableEqualsWorks();
                },
                CompareToWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CompareToWorks()",
                        Line: "196"
                    } ));
                    t.Fixture.CompareToWorks();
                },
                IComparableCompareToWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt16Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt16Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IComparableCompareToWorks()",
                        Line: "204"
                    } ));
                    t.Fixture.IComparableCompareToWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.SimpleTypes.UInt16Tests",
                        File: "Batch1\\SimpleTypes\\UInt16Tests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests)],
        statics: {
            methods: {
                LengthConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LengthConstructorWorks()",
                        Line: "30"
                    } ));
                    t.Fixture.LengthConstructorWorks();
                },
                ConstructorFromIntWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorFromIntWorks()",
                        Line: "38"
                    } ));
                    t.Fixture.ConstructorFromIntWorks();
                },
                CopyConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CopyConstructorWorks()",
                        Line: "48"
                    } ));
                    t.Fixture.CopyConstructorWorks();
                },
                ArrayBufferConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayBufferConstructorWorks()",
                        Line: "58"
                    } ));
                    t.Fixture.ArrayBufferConstructorWorks();
                },
                ArrayBufferWithOffsetConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayBufferWithOffsetConstructorWorks()",
                        Line: "68"
                    } ));
                    t.Fixture.ArrayBufferWithOffsetConstructorWorks();
                },
                ArrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayBufferWithOffsetAndLengthConstructorWorks()",
                        Line: "78"
                    } ));
                    t.Fixture.ArrayBufferWithOffsetAndLengthConstructorWorks();
                },
                StaticBytesPerElementWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StaticBytesPerElementWorks()",
                        Line: "95"
                    } ));
                    t.Fixture.StaticBytesPerElementWorks();
                },
                LengthWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LengthWorks()",
                        Line: "101"
                    } ));
                    t.Fixture.LengthWorks();
                },
                IndexingWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexingWorks()",
                        Line: "108"
                    } ));
                    t.Fixture.IndexingWorks();
                },
                SetUint32ArrayWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetUint32ArrayWorks()",
                        Line: "117"
                    } ));
                    t.Fixture.SetUint32ArrayWorks();
                },
                SetUint32ArrayWithOffsetWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetUint32ArrayWithOffsetWorks()",
                        Line: "125"
                    } ));
                    t.Fixture.SetUint32ArrayWithOffsetWorks();
                },
                SetNormalArrayWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetNormalArrayWorks()",
                        Line: "133"
                    } ));
                    t.Fixture.SetNormalArrayWorks();
                },
                SetNormalArrayWithOffsetWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetNormalArrayWithOffsetWorks()",
                        Line: "141"
                    } ));
                    t.Fixture.SetNormalArrayWithOffsetWorks();
                },
                SubarrayWithBeginWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SubarrayWithBeginWorks()",
                        Line: "149"
                    } ));
                    t.Fixture.SubarrayWithBeginWorks();
                },
                SubarrayWithBeginAndEndWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SubarrayWithBeginAndEndWorks()",
                        Line: "159"
                    } ));
                    t.Fixture.SubarrayWithBeginAndEndWorks();
                },
                BufferPropertyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "BufferPropertyWorks()",
                        Line: "170"
                    } ));
                    t.Fixture.BufferPropertyWorks();
                },
                ByteOffsetPropertyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ByteOffsetPropertyWorks()",
                        Line: "178"
                    } ));
                    t.Fixture.ByteOffsetPropertyWorks();
                },
                ByteLengthPropertyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ByteLengthPropertyWorks()",
                        Line: "186"
                    } ));
                    t.Fixture.ByteLengthPropertyWorks();
                },
                IndexOfWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexOfWorks()",
                        Line: "193"
                    } ));
                    t.Fixture.IndexOfWorks();
                },
                ContainsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ContainsWorks()",
                        Line: "202"
                    } ));
                    t.Fixture.ContainsWorks();
                },
                ForeachWorks_SPI_1401: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ForeachWorks_SPI_1401()",
                        Line: "211"
                    } ));
                    t.Fixture.ForeachWorks_SPI_1401();
                },
                GetEnumeratorWorks_SPI_1401: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetEnumeratorWorks_SPI_1401()",
                        Line: "225"
                    } ));
                    t.Fixture.GetEnumeratorWorks_SPI_1401();
                },
                IEnumerableGetEnumeratorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IEnumerableGetEnumeratorWorks()",
                        Line: "239"
                    } ));
                    t.Fixture.IEnumerableGetEnumeratorWorks();
                },
                ICollectionMethodsWork_SPI_1559: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionMethodsWork_SPI_1559()",
                        Line: "252"
                    } ));
                    t.Fixture.ICollectionMethodsWork_SPI_1559();
                },
                IListMethodsWork_SPI_1559: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IListMethodsWork_SPI_1559()",
                        Line: "265"
                    } ));
                    t.Fixture.IListMethodsWork_SPI_1559();
                },
                IListIsReadOnlyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IListIsReadOnlyWorks()",
                        Line: "298"
                    } ));
                    t.Fixture.IListIsReadOnlyWorks();
                },
                ICollectionIsReadOnlyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionIsReadOnlyWorks()",
                        Line: "305"
                    } ));
                    t.Fixture.ICollectionIsReadOnlyWorks();
                },
                ICollectionCopyTo: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint32ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint32ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionCopyTo()",
                        Line: "312"
                    } ));
                    t.Fixture.ICollectionCopyTo();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Collections.Native.Uint32ArrayTests",
                        File: "Batch1\\Collections\\Native\\Uint32ArrayTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "10"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                CastsWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CastsWork()",
                        Line: "25"
                    } ));
                    t.Fixture.CastsWork();
                },
                DefaultValueIs0: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultValueIs0()",
                        Line: "69"
                    } ));
                    t.Fixture.DefaultValueIs0();
                },
                DefaultConstructorReturnsZero: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorReturnsZero()",
                        Line: "75"
                    } ));
                    t.Fixture.DefaultConstructorReturnsZero();
                },
                CreatingInstanceReturnsZero: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CreatingInstanceReturnsZero()",
                        Line: "81"
                    } ));
                    t.Fixture.CreatingInstanceReturnsZero();
                },
                ConstantsWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstantsWork()",
                        Line: "87"
                    } ));
                    t.Fixture.ConstantsWork();
                },
                FormatWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FormatWorks()",
                        Line: "94"
                    } ));
                    t.Fixture.FormatWorks();
                },
                IFormattableToStringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IFormattableToStringWorks()",
                        Line: "100"
                    } ));
                    t.Fixture.IFormattableToStringWorks();
                },
                TryParseWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TryParseWorks()",
                        Line: "106"
                    } ));
                    t.Fixture.TryParseWorks();
                },
                ParseWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ParseWorks()",
                        Line: "135"
                    } ));
                    t.Fixture.ParseWorks();
                },
                ToStringWithoutRadixWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToStringWithoutRadixWorks()",
                        Line: "147"
                    } ));
                    t.Fixture.ToStringWithoutRadixWorks();
                },
                ToStringWithRadixWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToStringWithRadixWorks()",
                        Line: "153"
                    } ));
                    t.Fixture.ToStringWithRadixWorks();
                },
                GetHashCodeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetHashCodeWorks()",
                        Line: "160"
                    } ));
                    t.Fixture.GetHashCodeWorks();
                },
                EqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EqualsWorks()",
                        Line: "168"
                    } ));
                    t.Fixture.EqualsWorks();
                },
                IEquatableEqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IEquatableEqualsWorks()",
                        Line: "177"
                    } ));
                    t.Fixture.IEquatableEqualsWorks();
                },
                CompareToWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CompareToWorks()",
                        Line: "191"
                    } ));
                    t.Fixture.CompareToWorks();
                },
                IComparableCompareToWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt32Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt32Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IComparableCompareToWorks()",
                        Line: "199"
                    } ));
                    t.Fixture.IComparableCompareToWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.SimpleTypes.UInt32Tests",
                        File: "Batch1\\SimpleTypes\\UInt32Tests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect()",
                        Line: "23"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect();
                },
                MinMaxValuesAreCorrect: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "MinMaxValuesAreCorrect()",
                        Line: "36"
                    } ));
                    t.Fixture.MinMaxValuesAreCorrect();
                },
                CastsWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CastsWork()",
                        Line: "43"
                    } ));
                    t.Fixture.CastsWork();
                },
                OverflowWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "OverflowWorks()",
                        Line: "74"
                    } ));
                    t.Fixture.OverflowWorks();
                },
                CombinedTypesOperationsWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CombinedTypesOperationsWork()",
                        Line: "94"
                    } ));
                    t.Fixture.CombinedTypesOperationsWork();
                },
                DefaultValueIs0: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultValueIs0()",
                        Line: "137"
                    } ));
                    t.Fixture.DefaultValueIs0();
                },
                DefaultConstructorReturnsZero: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DefaultConstructorReturnsZero()",
                        Line: "143"
                    } ));
                    t.Fixture.DefaultConstructorReturnsZero();
                },
                CreatingInstanceReturnsZero: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CreatingInstanceReturnsZero()",
                        Line: "149"
                    } ));
                    t.Fixture.CreatingInstanceReturnsZero();
                },
                ConstantsWork: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstantsWork()",
                        Line: "155"
                    } ));
                    t.Fixture.ConstantsWork();
                },
                FormatWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "FormatWorks()",
                        Line: "161"
                    } ));
                    t.Fixture.FormatWorks();
                },
                IFormattableToStringWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IFormattableToStringWorks()",
                        Line: "167"
                    } ));
                    t.Fixture.IFormattableToStringWorks();
                },
                CastingOfLargeValuesToUInt64Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CastingOfLargeValuesToUInt64Works()",
                        Line: "173"
                    } ));
                    t.Fixture.CastingOfLargeValuesToUInt64Works();
                },
                DivisionOfLargeUInt64Works: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "DivisionOfLargeUInt64Works()",
                        Line: "181"
                    } ));
                    t.Fixture.DivisionOfLargeUInt64Works();
                },
                TryParseWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TryParseWorks()",
                        Line: "188"
                    } ));
                    t.Fixture.TryParseWorks();
                },
                ParseWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ParseWorks()",
                        Line: "221"
                    } ));
                    t.Fixture.ParseWorks();
                },
                ToStringWithoutRadixWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToStringWithoutRadixWorks()",
                        Line: "233"
                    } ));
                    t.Fixture.ToStringWithoutRadixWorks();
                },
                ToStringWithRadixWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ToStringWithRadixWorks()",
                        Line: "239"
                    } ));
                    t.Fixture.ToStringWithRadixWorks();
                },
                GetHashCodeWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetHashCodeWorks()",
                        Line: "246"
                    } ));
                    t.Fixture.GetHashCodeWorks();
                },
                EqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "EqualsWorks()",
                        Line: "254"
                    } ));
                    t.Fixture.EqualsWorks();
                },
                IEquatableEqualsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IEquatableEqualsWorks()",
                        Line: "263"
                    } ));
                    t.Fixture.IEquatableEqualsWorks();
                },
                CompareToWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CompareToWorks()",
                        Line: "277"
                    } ));
                    t.Fixture.CompareToWorks();
                },
                IComparableCompareToWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.SimpleTypes.UInt64Tests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UInt64Tests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IComparableCompareToWorks()",
                        Line: "285"
                    } ));
                    t.Fixture.IComparableCompareToWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.SimpleTypes.UInt64Tests",
                        File: "Batch1\\SimpleTypes\\UInt64Tests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests)],
        statics: {
            methods: {
                LengthConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LengthConstructorWorks()",
                        Line: "30"
                    } ));
                    t.Fixture.LengthConstructorWorks();
                },
                ConstructorFromIntWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorFromIntWorks()",
                        Line: "38"
                    } ));
                    t.Fixture.ConstructorFromIntWorks();
                },
                CopyConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CopyConstructorWorks()",
                        Line: "48"
                    } ));
                    t.Fixture.CopyConstructorWorks();
                },
                ArrayBufferConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayBufferConstructorWorks()",
                        Line: "58"
                    } ));
                    t.Fixture.ArrayBufferConstructorWorks();
                },
                ArrayBufferWithOffsetConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayBufferWithOffsetConstructorWorks()",
                        Line: "68"
                    } ));
                    t.Fixture.ArrayBufferWithOffsetConstructorWorks();
                },
                ArrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayBufferWithOffsetAndLengthConstructorWorks()",
                        Line: "78"
                    } ));
                    t.Fixture.ArrayBufferWithOffsetAndLengthConstructorWorks();
                },
                StaticBytesPerElementWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StaticBytesPerElementWorks()",
                        Line: "95"
                    } ));
                    t.Fixture.StaticBytesPerElementWorks();
                },
                LengthWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LengthWorks()",
                        Line: "101"
                    } ));
                    t.Fixture.LengthWorks();
                },
                IndexingWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexingWorks()",
                        Line: "108"
                    } ));
                    t.Fixture.IndexingWorks();
                },
                SetUint8ArrayWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetUint8ArrayWorks()",
                        Line: "117"
                    } ));
                    t.Fixture.SetUint8ArrayWorks();
                },
                SetUint8ArrayWithOffsetWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetUint8ArrayWithOffsetWorks()",
                        Line: "125"
                    } ));
                    t.Fixture.SetUint8ArrayWithOffsetWorks();
                },
                SetNormalArrayWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetNormalArrayWorks()",
                        Line: "133"
                    } ));
                    t.Fixture.SetNormalArrayWorks();
                },
                SetNormalArrayWithOffsetWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetNormalArrayWithOffsetWorks()",
                        Line: "141"
                    } ));
                    t.Fixture.SetNormalArrayWithOffsetWorks();
                },
                SubarrayWithBeginWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SubarrayWithBeginWorks()",
                        Line: "149"
                    } ));
                    t.Fixture.SubarrayWithBeginWorks();
                },
                SubarrayWithBeginAndEndWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SubarrayWithBeginAndEndWorks()",
                        Line: "159"
                    } ));
                    t.Fixture.SubarrayWithBeginAndEndWorks();
                },
                BufferPropertyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "BufferPropertyWorks()",
                        Line: "170"
                    } ));
                    t.Fixture.BufferPropertyWorks();
                },
                ByteOffsetPropertyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ByteOffsetPropertyWorks()",
                        Line: "178"
                    } ));
                    t.Fixture.ByteOffsetPropertyWorks();
                },
                ByteLengthPropertyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ByteLengthPropertyWorks()",
                        Line: "186"
                    } ));
                    t.Fixture.ByteLengthPropertyWorks();
                },
                IndexOfWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexOfWorks()",
                        Line: "193"
                    } ));
                    t.Fixture.IndexOfWorks();
                },
                ContainsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ContainsWorks()",
                        Line: "202"
                    } ));
                    t.Fixture.ContainsWorks();
                },
                ForeachWorks_SPI_1401: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ForeachWorks_SPI_1401()",
                        Line: "211"
                    } ));
                    t.Fixture.ForeachWorks_SPI_1401();
                },
                GetEnumeratorWorks_SPI_1401: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetEnumeratorWorks_SPI_1401()",
                        Line: "225"
                    } ));
                    t.Fixture.GetEnumeratorWorks_SPI_1401();
                },
                IEnumerableGetEnumeratorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IEnumerableGetEnumeratorWorks()",
                        Line: "239"
                    } ));
                    t.Fixture.IEnumerableGetEnumeratorWorks();
                },
                ICollectionMethodsWork_SPI_1559: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionMethodsWork_SPI_1559()",
                        Line: "252"
                    } ));
                    t.Fixture.ICollectionMethodsWork_SPI_1559();
                },
                IListMethodsWork_SPI_1559: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IListMethodsWork_SPI_1559()",
                        Line: "265"
                    } ));
                    t.Fixture.IListMethodsWork_SPI_1559();
                },
                IListIsReadOnlyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IListIsReadOnlyWorks()",
                        Line: "298"
                    } ));
                    t.Fixture.IListIsReadOnlyWorks();
                },
                ICollectionIsReadOnlyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionIsReadOnlyWorks()",
                        Line: "305"
                    } ));
                    t.Fixture.ICollectionIsReadOnlyWorks();
                },
                ICollectionCopyTo: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionCopyTo()",
                        Line: "312"
                    } ));
                    t.Fixture.ICollectionCopyTo();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Collections.Native.Uint8ArrayTests",
                        File: "Batch1\\Collections\\Native\\Uint8ArrayTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests)],
        statics: {
            methods: {
                TypePropertiesAreCorrect_SPI_1560: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TypePropertiesAreCorrect_SPI_1560()",
                        Line: "30"
                    } ));
                    t.Fixture.TypePropertiesAreCorrect_SPI_1560();
                },
                LengthConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LengthConstructorWorks()",
                        Line: "38"
                    } ));
                    t.Fixture.LengthConstructorWorks();
                },
                ConstructorFromIntWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorFromIntWorks()",
                        Line: "46"
                    } ));
                    t.Fixture.ConstructorFromIntWorks();
                },
                ConstructorFromUint8ArrayWorks_SPI_TODO: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ConstructorFromUint8ArrayWorks_SPI_TODO()",
                        Line: "56"
                    } ));
                    t.Fixture.ConstructorFromUint8ArrayWorks_SPI_TODO();
                },
                CopyConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "CopyConstructorWorks()",
                        Line: "66"
                    } ));
                    t.Fixture.CopyConstructorWorks();
                },
                ArrayBufferConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayBufferConstructorWorks()",
                        Line: "76"
                    } ));
                    t.Fixture.ArrayBufferConstructorWorks();
                },
                ArrayBufferWithOffsetConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayBufferWithOffsetConstructorWorks()",
                        Line: "86"
                    } ));
                    t.Fixture.ArrayBufferWithOffsetConstructorWorks();
                },
                ArrayBufferWithOffsetAndLengthConstructorWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ArrayBufferWithOffsetAndLengthConstructorWorks()",
                        Line: "96"
                    } ));
                    t.Fixture.ArrayBufferWithOffsetAndLengthConstructorWorks();
                },
                StaticBytesPerElementWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "StaticBytesPerElementWorks()",
                        Line: "113"
                    } ));
                    t.Fixture.StaticBytesPerElementWorks();
                },
                LengthWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "LengthWorks()",
                        Line: "119"
                    } ));
                    t.Fixture.LengthWorks();
                },
                IndexingWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexingWorks()",
                        Line: "126"
                    } ));
                    t.Fixture.IndexingWorks();
                },
                SetUint8ClampedArrayWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetUint8ClampedArrayWorks()",
                        Line: "155"
                    } ));
                    t.Fixture.SetUint8ClampedArrayWorks();
                },
                SetUint8ClampedArrayWithOffsetWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetUint8ClampedArrayWithOffsetWorks()",
                        Line: "163"
                    } ));
                    t.Fixture.SetUint8ClampedArrayWithOffsetWorks();
                },
                SetNormalArrayWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetNormalArrayWorks()",
                        Line: "171"
                    } ));
                    t.Fixture.SetNormalArrayWorks();
                },
                SetNormalArrayWithOffsetWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SetNormalArrayWithOffsetWorks()",
                        Line: "179"
                    } ));
                    t.Fixture.SetNormalArrayWithOffsetWorks();
                },
                SubarrayWithBeginWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SubarrayWithBeginWorks()",
                        Line: "187"
                    } ));
                    t.Fixture.SubarrayWithBeginWorks();
                },
                SubarrayWithBeginAndEndWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "SubarrayWithBeginAndEndWorks()",
                        Line: "197"
                    } ));
                    t.Fixture.SubarrayWithBeginAndEndWorks();
                },
                BufferPropertyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "BufferPropertyWorks()",
                        Line: "208"
                    } ));
                    t.Fixture.BufferPropertyWorks();
                },
                ByteOffsetPropertyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ByteOffsetPropertyWorks()",
                        Line: "216"
                    } ));
                    t.Fixture.ByteOffsetPropertyWorks();
                },
                ByteLengthPropertyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ByteLengthPropertyWorks()",
                        Line: "224"
                    } ));
                    t.Fixture.ByteLengthPropertyWorks();
                },
                IndexOfWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IndexOfWorks()",
                        Line: "231"
                    } ));
                    t.Fixture.IndexOfWorks();
                },
                ContainsWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ContainsWorks()",
                        Line: "240"
                    } ));
                    t.Fixture.ContainsWorks();
                },
                ForeachWorks_SPI_1401: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ForeachWorks_SPI_1401()",
                        Line: "249"
                    } ));
                    t.Fixture.ForeachWorks_SPI_1401();
                },
                GetEnumeratorWorks_SPI_1401: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GetEnumeratorWorks_SPI_1401()",
                        Line: "263"
                    } ));
                    t.Fixture.GetEnumeratorWorks_SPI_1401();
                },
                ICollectionMethodsWork_SPI_1559_1560: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionMethodsWork_SPI_1559_1560()",
                        Line: "277"
                    } ));
                    t.Fixture.ICollectionMethodsWork_SPI_1559_1560();
                },
                IListMethodsWork_SPI_1559_1560: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IListMethodsWork_SPI_1559_1560()",
                        Line: "290"
                    } ));
                    t.Fixture.IListMethodsWork_SPI_1559_1560();
                },
                IListIsReadOnlyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "IListIsReadOnlyWorks()",
                        Line: "323"
                    } ));
                    t.Fixture.IListIsReadOnlyWorks();
                },
                ICollectionIsReadOnlyWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionIsReadOnlyWorks()",
                        Line: "330"
                    } ));
                    t.Fixture.ICollectionIsReadOnlyWorks();
                },
                ICollectionCopyTo: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.Uint8ClampedArrayTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "ICollectionCopyTo()",
                        Line: "337"
                    } ));
                    t.Fixture.ICollectionCopyTo();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Collections.Native.Uint8ClampedArrayTests",
                        File: "Batch1\\Collections\\Native\\Uint8ClampedArrayTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedInsideCheckedTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.UncheckedInsideCheckedTests)],
        statics: {
            methods: {
                TestInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.UncheckedInsideCheckedTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedInsideCheckedTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestInt32()",
                        Line: "563"
                    } ));
                    Bridge.ClientTest.CheckedUncheckedTests.UncheckedInsideCheckedTests.TestInt32();
                },
                TestUInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.UncheckedInsideCheckedTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedInsideCheckedTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestUInt32()",
                        Line: "615"
                    } ));
                    Bridge.ClientTest.CheckedUncheckedTests.UncheckedInsideCheckedTests.TestUInt32();
                },
                TestLong: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.UncheckedInsideCheckedTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedInsideCheckedTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestLong()",
                        Line: "667"
                    } ));
                    Bridge.ClientTest.CheckedUncheckedTests.UncheckedInsideCheckedTests.TestLong();
                },
                TestULong: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.UncheckedInsideCheckedTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedInsideCheckedTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestULong()",
                        Line: "719"
                    } ));
                    Bridge.ClientTest.CheckedUncheckedTests.UncheckedInsideCheckedTests.TestULong();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.CheckedUncheckedTests.UncheckedInsideCheckedTests",
                        File: "Batch1\\CheckedUncheckedTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.UncheckedTests)],
        statics: {
            methods: {
                TestInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.UncheckedTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestInt32()",
                        Line: "365"
                    } ));
                    Bridge.ClientTest.CheckedUncheckedTests.UncheckedTests.TestInt32();
                },
                TestUInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.UncheckedTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestUInt32()",
                        Line: "414"
                    } ));
                    Bridge.ClientTest.CheckedUncheckedTests.UncheckedTests.TestUInt32();
                },
                TestLong: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.UncheckedTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestLong()",
                        Line: "463"
                    } ));
                    Bridge.ClientTest.CheckedUncheckedTests.UncheckedTests.TestLong();
                },
                TestULong: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.UncheckedTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.UncheckedTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestULong()",
                        Line: "512"
                    } ));
                    Bridge.ClientTest.CheckedUncheckedTests.UncheckedTests.TestULong();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.CheckedUncheckedTests.UncheckedTests",
                        File: "Batch1\\CheckedUncheckedTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.WeakMapTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.WeakMapTests)],
        statics: {
            methods: {
                GettingSettingAndDeletingWorks: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.Collections.Generic.WeakMapTests).BeforeTest(true, assert, Bridge.Test.Runtime.BridgeClientTestRunner.WeakMapTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "GettingSettingAndDeletingWorks()",
                        Line: "18"
                    } ));
                    t.Fixture.GettingSettingAndDeletingWorks();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.Collections.Generic.WeakMapTests",
                        File: "Batch1\\Collections\\Native\\WeakMapTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });

    Bridge.define("Bridge.Test.Runtime.BridgeClientTestRunner.WithNoUncheckedKeywordTests", {
        inherits: [Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.WithNoUncheckedKeywordTests)],
        statics: {
            methods: {
                TestInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.WithNoUncheckedKeywordTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.WithNoUncheckedKeywordTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestInt32()",
                        Line: "773"
                    } ));
                    Bridge.ClientTest.CheckedUncheckedTests.WithNoUncheckedKeywordTests.TestInt32();
                },
                TestUInt32: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.WithNoUncheckedKeywordTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.WithNoUncheckedKeywordTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestUInt32()",
                        Line: "819"
                    } ));
                    Bridge.ClientTest.CheckedUncheckedTests.WithNoUncheckedKeywordTests.TestUInt32();
                },
                TestLong: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.WithNoUncheckedKeywordTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.WithNoUncheckedKeywordTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestLong()",
                        Line: "865"
                    } ));
                    Bridge.ClientTest.CheckedUncheckedTests.WithNoUncheckedKeywordTests.TestLong();
                },
                TestULong: function (assert) {
                    var t = Bridge.Test.Runtime.TestFixture$1(Bridge.ClientTest.CheckedUncheckedTests.WithNoUncheckedKeywordTests).BeforeTest(false, assert, Bridge.Test.Runtime.BridgeClientTestRunner.WithNoUncheckedKeywordTests, void 0, Bridge.merge(new Bridge.Test.Runtime.TestContext(), {
                        Method: "TestULong()",
                        Line: "911"
                    } ));
                    Bridge.ClientTest.CheckedUncheckedTests.WithNoUncheckedKeywordTests.TestULong();
                }
            }
        },
        fields: {
            context: null
        },
        methods: {
            GetContext: function () {
                if (this.context == null) {
                    this.context = Bridge.merge(new Bridge.Test.Runtime.FixtureContext(), {
                        Project: "Batch1",
                        ClassName: "Bridge.ClientTest.CheckedUncheckedTests.WithNoUncheckedKeywordTests",
                        File: "Batch1\\CheckedUncheckedTests.cs"
                    } );
                }
                return this.context;
            }
        }
    });
});

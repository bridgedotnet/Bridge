
var SomeExternalNamespace = {
    SomeNonBridgeClass: function () {
        
    }               
};
SomeExternalNamespace.SomeNonBridgeClass.prototype.foo = function(){return 1;};


(function (globals) {
    "use strict";

    /** @namespace System */
    
    /**
     * @memberof System
     * @callback System.Func
     * @param   {TInput}     arg
     * @return  {TOutput}
     */
    
    Bridge.define('Bridge.ClientTest.ArrayTests1');
    
    Bridge.define('Bridge.ClientTest.ArrayTests1.ArrayTestsSet1', {
        typePropertiesAreCorrect: function () {
            var arr = [1, 2, 3];
            Bridge.Test.Assert.true$1(Bridge.is(arr, Array), "is Array should be true");
            Bridge.Test.Assert.true$1(Bridge.is(arr, Array), "is int[] should be true");
            Bridge.Test.Assert.true$1(Bridge.is(arr, System.Collections.ICollection), "is ICollection should be true");
            Bridge.Test.Assert.true$1(Bridge.is(arr, System.Collections.IEnumerable), "is IEnumerable should be true");
            Bridge.Test.Assert.true$1(Bridge.is(arr, System.ICloneable), "is ICloneable should be true");
            Bridge.Test.Assert.true$1(Bridge.is(arr, System.Collections.Generic.ICollection$1(System.Int32)), "is ICollection<int> should be true");
            Bridge.Test.Assert.true$1(Bridge.is(arr, System.Collections.Generic.IEnumerable$1(System.Int32)), "is IEnumerable<int> should be true");
            Bridge.Test.Assert.true$1(Bridge.is(arr, System.Collections.Generic.IList$1(System.Int32)), "is IList<int> should be true");
        },
        lengthWorks: function () {
            Bridge.Test.Assert.areEqual(0, System.Array.init(0, 0).length);
            Bridge.Test.Assert.areEqual(1, ["x"].length);
            Bridge.Test.Assert.areEqual(2, ["x", "y"].length);
        },
        rankIsOne: function () {
            Bridge.Test.Assert.areEqual(1, System.Array.getRank(System.Array.init(0, 0)));
        },
        getLengthWorks: function () {
            Bridge.Test.Assert.areEqual(0, System.Array.getLength(System.Array.init(0, 0), 0));
            Bridge.Test.Assert.areEqual(1, System.Array.getLength(["x"], 0));
            Bridge.Test.Assert.areEqual(2, System.Array.getLength(["x", "y"], 0));
        },
        getLowerBound: function () {
            Bridge.Test.Assert.areEqual(0, System.Array.getLower(System.Array.init(0, 0), 0));
            Bridge.Test.Assert.areEqual(0, System.Array.getLower(["x"], 0));
            Bridge.Test.Assert.areEqual(0, System.Array.getLower(["x", "y"], 0));
        },
        getUpperBoundWorks: function () {
            Bridge.Test.Assert.areEqual(-1, (System.Array.getLength(System.Array.init(0, 0), 0) - 1));
            Bridge.Test.Assert.areEqual(0, (System.Array.getLength(["x"], 0) - 1));
            Bridge.Test.Assert.areEqual(1, (System.Array.getLength(["x", "y"], 0) - 1));
        },
        gettingValueByIndexWorks: function () {
            Bridge.Test.Assert.areEqual("x", ["x", "y"][0]);
            Bridge.Test.Assert.areEqual("y", ["x", "y"][1]);
        },
        getValueWorks: function () {
            Bridge.Test.Assert.areEqual("x", System.Array.get(["x", "y"], 0));
            Bridge.Test.Assert.areEqual("y", System.Array.get(["x", "y"], 1));
        },
        settingValueByIndexWorks: function () {
            var arr = System.Array.init(2, null);
            arr[0] = "x";
            arr[1] = "y";
            Bridge.Test.Assert.areEqual("x", arr[0]);
            Bridge.Test.Assert.areEqual("y", arr[1]);
        },
        setValueWorks: function () {
            var arr = System.Array.init(2, null);
            System.Array.set(arr, "x", 0);
            System.Array.set(arr, "y", 1);
            Bridge.Test.Assert.areEqual("x", arr[0]);
            Bridge.Test.Assert.areEqual("y", arr[1]);
        },
        foreachWorks: function () {
            var $t;
            var result = "";
            $t = Bridge.getEnumerator(["x", "y"]);
            while ($t.moveNext()) {
                var s = $t.getCurrent();
                result += s;
            }
            Bridge.Test.Assert.areEqual("xy", result);
        },
        cloneWorks: function () {
            var arr = ["x", "y"];
            var arr2 = System.Array.clone(arr);
            Bridge.Test.Assert.false(Bridge.referenceEquals(arr, arr2));
            Bridge.Test.Assert.areDeepEqual(arr2, arr);
        },
        concatWorks: function () {
            var arr = ["a", "b"];
            Bridge.Test.Assert.areDeepEqual(["a", "b", "c"], arr.concat("c"));
            Bridge.Test.Assert.areDeepEqual(["a", "b", "c", "d"], arr.concat("c", "d"));
            Bridge.Test.Assert.areDeepEqual(["a", "b"], arr);
        },
        containsWorks: function () {
            var arr = ["x", "y"];
            Bridge.Test.Assert.true(System.Linq.Enumerable.from(arr).contains("x"));
            Bridge.Test.Assert.false(System.Linq.Enumerable.from(arr).contains("z"));
        },
        containsUsesEqualsMethod: function () {
            var arr = [new Bridge.ClientTest.ArrayTests1.ArrayTestsSet1.C(1), new Bridge.ClientTest.ArrayTests1.ArrayTestsSet1.C(2), new Bridge.ClientTest.ArrayTests1.ArrayTestsSet1.C(3)];
            Bridge.Test.Assert.true(System.Linq.Enumerable.from(arr).contains(new Bridge.ClientTest.ArrayTests1.ArrayTestsSet1.C(2)));
            Bridge.Test.Assert.false(System.Linq.Enumerable.from(arr).contains(new Bridge.ClientTest.ArrayTests1.ArrayTestsSet1.C(4)));
        },
        allWithArrayItemFilterCallbackWorks: function () {
            Bridge.Test.Assert.true(System.Linq.Enumerable.from([1, 2, 3]).all($_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet1.f1));
            Bridge.Test.Assert.false(System.Linq.Enumerable.from([1, 2, 3]).all($_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet1.f2));
        },
        sliceWithoutEndWorks: function () {
            Bridge.Test.Assert.areDeepEqual(["c", "d"], ["a", "b", "c", "d"].slice(2));
            Bridge.Test.Assert.areDeepEqual(["b", "c"], ["a", "b", "c", "d"].slice(1, 3));
        },
        foreachWithArrayItemCallbackWorks: function () {
            var result = "";
            Bridge.Linq.Enumerable.from(["a", "b", "c"]).forEach(function (s) {
                result += s;
            });
            Bridge.Test.Assert.areEqual("abc", result);
        },
        foreachWithArrayCallbackWorks: function () {
            var result = "";
            Bridge.Linq.Enumerable.from(["a", "b", "c"]).forEach(function (s, i) {
                result += s + i;
            });
            Bridge.Test.Assert.areEqual("a0b1c2", result);
        },
        indexOfWithoutStartIndexWorks: function () {
            Bridge.Test.Assert.areEqual(1, ["a", "b", "c", "b"].indexOf("b"));
        },
        indexOfWithoutStartIndexUsesEqualsMethod: function () {
            var arr = [new Bridge.ClientTest.ArrayTests1.ArrayTestsSet1.C(1), new Bridge.ClientTest.ArrayTests1.ArrayTestsSet1.C(2), new Bridge.ClientTest.ArrayTests1.ArrayTestsSet1.C(3)];
            Bridge.Test.Assert.areEqual(1, Bridge.Linq.Enumerable.from(arr).indexOf(new Bridge.ClientTest.ArrayTests1.ArrayTestsSet1.C(2)));
            Bridge.Test.Assert.areEqual(-1, Bridge.Linq.Enumerable.from(arr).indexOf(new Bridge.ClientTest.ArrayTests1.ArrayTestsSet1.C(4)));
        },
        indexOfWithStartIndexWorks: function () {
            Bridge.Test.Assert.areEqual(3, ["a", "b", "c", "b"].indexOf("b", 2));
        },
        joinWithoutDelimiterWorks: function () {
            Bridge.Test.Assert.areEqual("a,b,c,b", ["a", "b", "c", "b"].join(","));
    
            Bridge.Test.Assert.areEqual("a|b|c|b", ["a", "b", "c", "b"].join("|"));
        },
        reverseWorks: function () {
            var arr = [1, 3, 4, 1, 3, 2];
            arr.reverse();
            Bridge.Test.Assert.areDeepEqual([2, 3, 1, 4, 3, 1], arr);
        },
        anyWithArrayItemFilterCallbackWorks: function () {
            Bridge.Test.Assert.true(System.Linq.Enumerable.from([1, 2, 3, 4]).any($_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet1.f3));
            Bridge.Test.Assert.false(System.Linq.Enumerable.from([1, 2, 3, 4]).any($_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet1.f4));
        },
        binarySearch1Works: function () {
            var arr = [1, 2, 3, 3, 4, 5];
    
            Bridge.Test.Assert.areEqual(2, System.Array.binarySearch(arr, 0, arr.length, 3));
            Bridge.Test.Assert.true(System.Array.binarySearch(arr, 0, arr.length, 6) < 0);
        },
        binarySearch2Works: function () {
            var arr = [1, 2, 3, 3, 4, 5];
    
            Bridge.Test.Assert.areEqual(3, System.Array.binarySearch(arr, 3, 2, 3));
            Bridge.Test.Assert.true(System.Array.binarySearch(arr, 2, 2, 4) < 0);
        },
        binarySearch3Works: function () {
            var arr = [1, 2, 3, 3, 4, 5];
    
            Bridge.Test.Assert.areEqual(2, System.Array.binarySearch(arr, 0, arr.length, 3, new Bridge.ClientTest.ArrayTests1.ArrayTestsSet1.TestReverseComparer()));
            Bridge.Test.Assert.areEqual(-1, System.Array.binarySearch(arr, 0, arr.length, 6, new Bridge.ClientTest.ArrayTests1.ArrayTestsSet1.TestReverseComparer()));
        },
        binarySearch4Works: function () {
            var arr = [1, 2, 3, 3, 4, 5];
    
            Bridge.Test.Assert.areEqual(3, System.Array.binarySearch(arr, 3, 2, 3, new Bridge.ClientTest.ArrayTests1.ArrayTestsSet1.TestReverseComparer()));
            Bridge.Test.Assert.true(System.Array.binarySearch(arr, 3, 2, 4, new Bridge.ClientTest.ArrayTests1.ArrayTestsSet1.TestReverseComparer()) < 0);
        },
        binarySearchExceptionsWorks: function () {
            var arr1 = null;
            var arr2 = [1, 2, 3, 3, 4, 5];
    
            Bridge.Test.Assert.throws(function () {
                System.Array.binarySearch(arr1, 0, arr1.length, 1);
            });
            Bridge.Test.Assert.throws(function () {
                System.Array.binarySearch(arr2, -1, 1, 1);
            });
            Bridge.Test.Assert.throws(function () {
                System.Array.binarySearch(arr2, 1, 6, 1);
            });
        },
        sortWithDefaultCompareWorks: function () {
            var arr = [1, 6, 6, 4, 2];
            arr.sort();
            Bridge.Test.Assert.areDeepEqual([1, 2, 4, 6, 6], arr);
        },
        sort1Works: function () {
            var arr = [1, 6, 6, 4, 2];
            System.Array.sort(arr);
            Bridge.Test.Assert.areDeepEqual([1, 2, 4, 6, 6], arr);
        },
        sort2Works: function () {
            var arr = [1, 6, 6, 4, 2];
            System.Array.sort(arr, 2, 3);
            Bridge.Test.Assert.areDeepEqual([1, 6, 2, 4, 6], arr);
        },
        sort3Works: function () {
            var arr = [1, 2, 6, 3, 6, 7];
            System.Array.sort(arr, 2, 3, new Bridge.ClientTest.ArrayTests1.ArrayTestsSet1.TestReverseComparer());
            Bridge.Test.Assert.areDeepEqual([1, 2, 6, 6, 3, 7], arr);
        },
        sort4Works: function () {
            var arr = [1, 6, 6, 4, 2];
            System.Array.sort(arr, new Bridge.ClientTest.ArrayTests1.ArrayTestsSet1.TestReverseComparer());
            Bridge.Test.Assert.areDeepEqual([6, 6, 4, 2, 1], arr);
        },
        sortExceptionsWorks: function () {
            var arr1 = null;
    
            Bridge.Test.Assert.throws(function () {
                System.Array.sort(arr1);
            });
        },
        foreachWhenCastToIListWorks: function () {
            var $t;
            var list = ["x", "y"];
            var result = "";
            $t = Bridge.getEnumerator(list);
            while ($t.moveNext()) {
                var s = $t.getCurrent();
                result += s;
            }
            Bridge.Test.Assert.areEqual("xy", result);
        },
        iCollectionCountWorks: function () {
            var l = ["x", "y", "z"];
            Bridge.Test.Assert.areEqual(3, System.Array.getCount(l));
        },
        iCollectionAddWorks: function () {
            var l = ["x", "y", "z"];
            System.Array.add(l, "a");
            Bridge.Test.Assert.areDeepEqual(["x", "y", "z", "a"], l);
        },
        iCollectionClearWorks: function () {
            var l = ["x", "y", "z"];
            System.Array.clear(l, String);
            Bridge.Test.Assert.areDeepEqual(System.Array.init(3, null), l);
            Bridge.Test.Assert.areDeepEqual(null, System.Array.getItem(l, 0));
            Bridge.Test.Assert.areDeepEqual(null, System.Array.getItem(l, 1));
            Bridge.Test.Assert.areDeepEqual(null, System.Array.getItem(l, 2));
        },
        iCollectionContainsWorks: function () {
            var l = ["x", "y", "z"];
            Bridge.Test.Assert.true(System.Array.contains(l, "y"));
            Bridge.Test.Assert.false(System.Array.contains(l, "a"));
        },
        iCollectionContainsUsesEqualsMethod: function () {
            var l = [new Bridge.ClientTest.ArrayTests1.ArrayTestsSet1.C(1), new Bridge.ClientTest.ArrayTests1.ArrayTestsSet1.C(2), new Bridge.ClientTest.ArrayTests1.ArrayTestsSet1.C(3)];
            Bridge.Test.Assert.true(System.Array.contains(l, new Bridge.ClientTest.ArrayTests1.ArrayTestsSet1.C(2)));
            Bridge.Test.Assert.false(System.Array.contains(l, new Bridge.ClientTest.ArrayTests1.ArrayTestsSet1.C(4)));
        },
        iCollectionRemoveWorks: function () {
            var l = ["x", "y", "z"];
            Bridge.Test.Assert.true(System.Array.remove(l, "y"));
            Bridge.Test.Assert.false(System.Array.remove(l, "a"));
            Bridge.Test.Assert.areDeepEqual(["x", "z"], l);
        },
        iListIndexingWorks: function () {
            var l = ["x", "y", "z"];
            Bridge.Test.Assert.areEqual("y", System.Array.getItem(l, 1));
            System.Array.setItem(l, 1, "a");
            Bridge.Test.Assert.areDeepEqual(["x", "a", "z"], l);
        },
        iListIndexOfWorks: function () {
            var l = ["x", "y", "z"];
            Bridge.Test.Assert.areEqual(1, System.Array.indexOf(l, "y"));
            Bridge.Test.Assert.areEqual(-1, System.Array.indexOf(l, "a"));
        },
        iListIndexOfUsesEqualsMethod: function () {
            var arr = [new Bridge.ClientTest.ArrayTests1.ArrayTestsSet1.C(1), new Bridge.ClientTest.ArrayTests1.ArrayTestsSet1.C(2), new Bridge.ClientTest.ArrayTests1.ArrayTestsSet1.C(3)];
            Bridge.Test.Assert.areEqual(1, Bridge.Linq.Enumerable.from(arr).indexOf(new Bridge.ClientTest.ArrayTests1.ArrayTestsSet1.C(2)));
            Bridge.Test.Assert.areEqual(-1, Bridge.Linq.Enumerable.from(arr).indexOf(new Bridge.ClientTest.ArrayTests1.ArrayTestsSet1.C(4)));
        },
        iListInsertWorks: function () {
            var l = ["x", "y", "z"];
            System.Array.insert(l, 1, "a");
            Bridge.Test.Assert.areDeepEqual(["x", "a", "y", "z"], l);
        },
        iListRemoveAtWorks: function () {
            var l = ["x", "y", "z"];
            System.Array.removeAt(l, 1);
            Bridge.Test.Assert.areDeepEqual(["x", "z"], l);
        }
    });
    
    var $_ = {};
    
    Bridge.ns("Bridge.ClientTest.ArrayTests1.ArrayTestsSet1", $_);
    
    Bridge.apply($_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet1, {
        f1: function (x) {
            return x > 0;
        },
        f2: function (x) {
            return x > 1;
        },
        f3: function (i) {
            return i > 1;
        },
        f4: function (i) {
            return i > 5;
        }
    });
    
    Bridge.define('Bridge.ClientTest.ArrayTests1.ArrayTestsSet1.C', {
        i: 0,
        constructor: function (i) {
            this.i = i;
        },
        equals: function (o) {
            return Bridge.is(o, Bridge.ClientTest.ArrayTests1.ArrayTestsSet1.C) && this.i === Bridge.cast(o, Bridge.ClientTest.ArrayTests1.ArrayTestsSet1.C).i;
        },
        getHashCode: function () {
            return this.i;
        }
    });
    
    Bridge.define('Bridge.ClientTest.ArrayTests1.ArrayTestsSet1.TestReverseComparer', {
        inherits: [System.Collections.Generic.IComparer$1(System.Int32)],
        compare: function (x, y) {
            return x === y ? 0 : (x > y ? -1 : 1);
        }
    });
    
    Bridge.define('Bridge.ClientTest.ArrayTests1.ArrayTestsSet2', {
        statics: {
            getBinarySearchTestData: function () {
                var intArray = [1, 3, 6, 6, 8, 10, 12, 16];
                var intComparer = new Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.IntegerComparer();
                var intGenericComparer = new Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.IntegerComparer();
    
                var strArray = [null, "aa", "bb", "bb", "cc", "dd", "ee"];
                var strComparer = new Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.StringComparer();
                var strGenericComparer = new Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.StringComparer();
    
                return [[intArray, 8, intComparer, intGenericComparer, $_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.f1], [intArray, 99, intComparer, intGenericComparer, function (i) {
                    return i === ~(intArray.length);
                }], [intArray, 6, intComparer, intGenericComparer, $_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.f2], [strArray, "bb", strComparer, strGenericComparer, $_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.f2], [strArray, null, strComparer, null, $_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.f3]];
            },
            getBinarySearchTestDataInRange: function () {
                var intArray = [1, 3, 6, 6, 8, 10, 12, 16];
                var intComparer = new Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.IntegerComparer();
                var intGenericComparer = new Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.IntegerComparer();
    
                var strArray = [null, "aa", "bb", "bb", "cc", "dd", "ee"];
                var strComparer = new Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.StringComparer();
                var strGenericComparer = new Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.StringComparer();
    
                return [[intArray, 0, 8, 99, intComparer, intGenericComparer, function (i) {
                    return i === ~(intArray.length);
                }], [intArray, 0, 8, 6, intComparer, intGenericComparer, $_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.f2], [intArray, 1, 5, 16, intComparer, intGenericComparer, $_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.f4], [strArray, 0, strArray.length, "bb", strComparer, strGenericComparer, $_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.f2], [strArray, 3, 4, "bb", strComparer, strGenericComparer, $_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.f5], [strArray, 4, 3, "bb", strComparer, strGenericComparer, $_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.f6], [strArray, 4, 0, "bb", strComparer, strGenericComparer, $_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.f6], [strArray, 0, 7, null, strComparer, null, $_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.f3]];
            },
            testArrayAsIListOfT: function () {
                var sa = ["Hello", "There"];
                var s;
                var idx;
    
                var b = (Bridge.is(sa, System.Collections.Generic.IList$1(String)));
                Bridge.Test.Assert.true(b);
    
                var ils = sa;
                var len = System.Array.getCount(ils);
                Bridge.Test.Assert.areEqual(len, 2);
    
                b = System.Array.contains(ils, null);
                Bridge.Test.Assert.false(b);
    
                b = System.Array.contains(ils, "There");
                Bridge.Test.Assert.true(b);
    
                idx = System.Array.indexOf(ils, "There");
                Bridge.Test.Assert.areEqual(idx, 1);
                idx = System.Array.indexOf(ils, null);
                Bridge.Test.Assert.areEqual(idx, -1);
    
                var sa2 = System.Array.init(2, null);
                System.Array.copy(sa, 0, sa2, 0, sa.length);
                Bridge.Test.Assert.areEqual(sa2[0], sa[0]);
                Bridge.Test.Assert.areEqual(sa2[1], sa[1]);
    
                var ia1;
                var dst;
                ia1 = [1, 2, 3, 4];
                dst = System.Array.init(4, 0);
                System.Array.copy(ia1, 0, dst, 0, ia1.length);
                Bridge.Test.Assert.areEqual(dst, ia1);
    
                ia1 = [1, 2, 3, 4];
                dst = System.Array.init(6, 0);
                System.Array.copy(ia1, 0, dst, 1, ia1.length);
                Bridge.Test.Assert.areEqual(dst, [0, 1, 2, 3, 4, 0]);
    
                var e = Bridge.getEnumerator(ils, "$1");
                b = e.moveNext();
                Bridge.Test.Assert.true(b);
                s = e.getCurrent$1();
                Bridge.Test.Assert.areEqual(s, sa[0]);
                b = e.moveNext();
                Bridge.Test.Assert.true(b);
                s = e.getCurrent$1();
                Bridge.Test.Assert.areEqual(s, sa[1]);
                b = e.moveNext();
                Bridge.Test.Assert.false(b);
    
                s = System.Array.getItem(ils, 1);
                Bridge.Test.Assert.areEqual(s, sa[1]);
    
                System.Array.setItem(ils, 1, "42");
                Bridge.Test.Assert.areEqual(sa[1], "42");
            },
            testTrivials: function () {
                // Check a number of the simple APIs on Array for dimensions up to 4.
                var a = [1, 2, 3];
                Bridge.Test.Assert.areEqual(a.length, 3);
                Bridge.Test.Assert.areEqual(System.Array.getLength(a, 0), 3);
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    System.Array.getLength(a, -1);
                });
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    System.Array.getLength(a, 1);
                });
                Bridge.Test.Assert.areEqual(System.Array.getLower(a, 0), 0);
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    System.Array.getLower(a, 1);
                });
                Bridge.Test.Assert.areEqual((System.Array.getLength(a, 0) - 1), 2);
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    (System.Array.getLength(a, 1) - 1);
                });
                Bridge.Test.Assert.areEqual(System.Array.getRank(a), 1);
                var il = a;
                Bridge.Test.Assert.areEqual(System.Array.getCount(il), 3);
    
                Bridge.Test.Assert.true(System.Array.contains(il, 1));
                Bridge.Test.Assert.false(System.Array.contains(il, 999));
                Bridge.Test.Assert.areEqual(System.Array.indexOf(il, 1), 0);
                Bridge.Test.Assert.areEqual(System.Array.indexOf(il, 999), -1);
                var v = System.Array.getItem(il, 0);
                Bridge.Test.Assert.areEqual(v, 1);
                v = System.Array.getItem(il, 1);
                Bridge.Test.Assert.areEqual(v, 2);
                v = System.Array.getItem(il, 2);
                Bridge.Test.Assert.areEqual(v, 3);
                System.Array.setItem(il, 2, 42);
                Bridge.Test.Assert.areEqual(Bridge.cast(a, Array)[2], 42);
    
                var a2 = System.Array.create(0, [[1, 2, 3], [4, 5, 6]], 2, 3);
                Bridge.Test.Assert.areEqual(System.Array.getLength(a2, 0), 2);
                Bridge.Test.Assert.areEqual(System.Array.getLength(a2, 1), 3);
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    System.Array.getLength(a2, -1);
                });
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    System.Array.getLength(a2, 2);
                });
                Bridge.Test.Assert.areEqual(System.Array.getLower(a2, 0), 0);
                Bridge.Test.Assert.areEqual(System.Array.getLower(a2, 1), 0);
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    System.Array.getLower(a2, 2);
                });
                Bridge.Test.Assert.areEqual((System.Array.getLength(a2, 0) - 1), 1);
                Bridge.Test.Assert.areEqual((System.Array.getLength(a2, 1) - 1), 2);
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    (System.Array.getLength(a2, 2) - 1);
                });
                Bridge.Test.Assert.areEqual(System.Array.getRank(a2), 2);
    
                var a3 = System.Array.create(0, null, 2, 3, 4);
                var tracer = 0; // makes it easier to confirm row major ordering
                for (var i = 0; i < 2; i = (i + 1) | 0) {
                    for (var j = 0; j < 3; j = (j + 1) | 0) {
                        for (var k = 0; k < 4; k = (k + 1) | 0) {
                            System.Array.set(a3, Bridge.identity(tracer, (tracer = (tracer + 1) | 0)), i, j, k);
                        }
                    }
                }
                Bridge.Test.Assert.areEqual(System.Array.getLength(a3, 0), 2);
                Bridge.Test.Assert.areEqual(System.Array.getLength(a3, 1), 3);
                Bridge.Test.Assert.areEqual(System.Array.getLength(a3, 2), 4);
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    System.Array.getLength(a3, -1);
                });
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    System.Array.getLength(a3, 3);
                });
                Bridge.Test.Assert.areEqual(System.Array.getLower(a3, 0), 0);
                Bridge.Test.Assert.areEqual(System.Array.getLower(a3, 1), 0);
                Bridge.Test.Assert.areEqual(System.Array.getLower(a3, 2), 0);
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    System.Array.getLower(a3, 3);
                });
                Bridge.Test.Assert.areEqual((System.Array.getLength(a3, 0) - 1), 1);
                Bridge.Test.Assert.areEqual((System.Array.getLength(a3, 1) - 1), 2);
                Bridge.Test.Assert.areEqual((System.Array.getLength(a3, 2) - 1), 3);
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    (System.Array.getLength(a3, 3) - 1);
                });
                Bridge.Test.Assert.areEqual(System.Array.getRank(a3), 3);
    
                var a4 = System.Array.create(0, null, 2, 3, 4, 5);
    
                tracer = 0; // makes it easier to confirm row major ordering
                for (var i1 = 0; i1 < 2; i1 = (i1 + 1) | 0) {
                    for (var j1 = 0; j1 < 3; j1 = (j1 + 1) | 0) {
                        for (var k1 = 0; k1 < 4; k1 = (k1 + 1) | 0) {
                            for (var l = 0; l < 5; l = (l + 1) | 0) {
                                System.Array.set(a4, Bridge.identity(tracer, (tracer = (tracer + 1) | 0)), i1, j1, k1, l);
                            }
                        }
                    }
                }
                Bridge.Test.Assert.areEqual(System.Array.getLength(a4, 0), 2);
                Bridge.Test.Assert.areEqual(System.Array.getLength(a4, 1), 3);
                Bridge.Test.Assert.areEqual(System.Array.getLength(a4, 2), 4);
                Bridge.Test.Assert.areEqual(System.Array.getLength(a4, 3), 5);
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    System.Array.getLength(a4, -1);
                });
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    System.Array.getLength(a4, 4);
                });
                Bridge.Test.Assert.areEqual(System.Array.getLower(a4, 0), 0);
                Bridge.Test.Assert.areEqual(System.Array.getLower(a4, 1), 0);
                Bridge.Test.Assert.areEqual(System.Array.getLower(a4, 2), 0);
                Bridge.Test.Assert.areEqual(System.Array.getLower(a4, 3), 0);
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    System.Array.getLower(a4, 4);
                });
                Bridge.Test.Assert.areEqual((System.Array.getLength(a4, 0) - 1), 1);
                Bridge.Test.Assert.areEqual((System.Array.getLength(a4, 1) - 1), 2);
                Bridge.Test.Assert.areEqual((System.Array.getLength(a4, 2) - 1), 3);
                Bridge.Test.Assert.areEqual((System.Array.getLength(a4, 3) - 1), 4);
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    (System.Array.getLength(a4, 4) - 1);
                });
                Bridge.Test.Assert.areEqual(System.Array.getRank(a4), 4);
            },
            testGetAndSetValue: function () {
                var idirect = [7, 8, 9];
                var a = idirect;
    
                var seven = System.Array.get(a, 0);
                Bridge.Test.Assert.areEqual(7, seven);
                System.Array.set(a, 41, 0);
                Bridge.Test.Assert.areEqual(41, idirect[0]);
    
                var eight = System.Array.get(a, 1);
                Bridge.Test.Assert.areEqual(8, eight);
                System.Array.set(a, 42, 1);
                Bridge.Test.Assert.areEqual(42, idirect[1]);
    
                var nine = System.Array.get(a, 2);
                Bridge.Test.Assert.areEqual(9, nine);
                System.Array.set(a, 43, 2);
                Bridge.Test.Assert.areEqual(43, idirect[2]);
    
                var idirect2 = System.Array.create(0, [[1, 2, 3], [4, 5, 6]], 2, 3);
                var b = idirect2;
                Bridge.Test.Assert.areEqual(1, System.Array.get(b, 0, 0));
                Bridge.Test.Assert.areEqual(6, System.Array.get(b, 1, 2));
                System.Array.set(b, 42, 1, 2);
                Bridge.Test.Assert.areEqual(42, System.Array.get(b, 1, 2));
    
                var nullIndices = null;
                Bridge.Test.Assert.throws$6(System.ArgumentNullException, function () {
                    System.Array.get.apply(System.Array, [b].concat(nullIndices));
                });
    
                var tooManyIndices = [1, 2, 3, 4];
                Bridge.Test.Assert.throws$6(System.ArgumentException, function () {
                    System.Array.get.apply(System.Array, [b].concat(tooManyIndices));
                });
            },
            testClear: function () {
                //----------------------------------------------------------
                // Primitives/valuetypes with no gc-ref pointers
                //----------------------------------------------------------
                var idirect;
                idirect = [7, 8, 9];
    
                System.Array.fill(idirect, 0, 0, 3);
                Bridge.Test.Assert.areEqual(idirect[0], 0);
                Bridge.Test.Assert.areEqual(idirect[1], 0);
                Bridge.Test.Assert.areEqual(idirect[2], 0);
    
                idirect = [7, 8, 9];
    
                System.Array.clear(Bridge.cast(idirect, System.Collections.Generic.IList$1(System.Int32)), System.Int32);
                Bridge.Test.Assert.areEqual(idirect[0], 0);
                Bridge.Test.Assert.areEqual(idirect[1], 0);
                Bridge.Test.Assert.areEqual(idirect[2], 0);
    
                idirect = [19088743, 2023406814, 573785173, 1719109785, 288576887, 574908040];
                System.Array.fill(idirect, 0, 2, 3);
                Bridge.Test.Assert.areEqual(idirect[0], 19088743);
                Bridge.Test.Assert.areEqual(idirect[1], 2023406814);
                Bridge.Test.Assert.areEqual(idirect[2], 0);
                Bridge.Test.Assert.areEqual(idirect[3], 0);
                Bridge.Test.Assert.areEqual(idirect[4], 0);
                Bridge.Test.Assert.areEqual(idirect[5], 574908040);
    
                idirect = [19088743, 2023406814, 573785173, 1719109785, 288576887, 574908040];
                System.Array.fill(idirect, 0, 0, 6);
                Bridge.Test.Assert.areEqual(idirect[0], 0);
                Bridge.Test.Assert.areEqual(idirect[1], 0);
                Bridge.Test.Assert.areEqual(idirect[2], 0);
                Bridge.Test.Assert.areEqual(idirect[3], 0);
                Bridge.Test.Assert.areEqual(idirect[4], 0);
                Bridge.Test.Assert.areEqual(idirect[5], 0);
    
                idirect = [19088743, 2023406814, 573785173, 1719109785, 288576887, 574908040];
                System.Array.fill(idirect, 0, 6, 0);
                Bridge.Test.Assert.areEqual(idirect[0], 19088743);
                Bridge.Test.Assert.areEqual(idirect[1], 2023406814);
                Bridge.Test.Assert.areEqual(idirect[2], 573785173);
                Bridge.Test.Assert.areEqual(idirect[3], 1719109785);
                Bridge.Test.Assert.areEqual(idirect[4], 288576887);
                Bridge.Test.Assert.areEqual(idirect[5], 574908040);
    
                idirect = [19088743, 2023406814, 573785173, 1719109785, 288576887, 574908040];
                System.Array.fill(idirect, 0, 0, 0);
                Bridge.Test.Assert.areEqual(idirect[0], 19088743);
                Bridge.Test.Assert.areEqual(idirect[1], 2023406814);
                Bridge.Test.Assert.areEqual(idirect[2], 573785173);
                Bridge.Test.Assert.areEqual(idirect[3], 1719109785);
                Bridge.Test.Assert.areEqual(idirect[4], 288576887);
                Bridge.Test.Assert.areEqual(idirect[5], 574908040);
    
                //----------------------------------------------------------
                // GC-refs
                //----------------------------------------------------------
                var sdirect;
    
                sdirect = ["7", "8", "9"];
    
                System.Array.fill(sdirect, null, 0, 3);
                Bridge.Test.Assert.null(sdirect[0]);
                Bridge.Test.Assert.null(sdirect[1]);
                Bridge.Test.Assert.null(sdirect[2]);
    
                sdirect = ["7", "8", "9"];
    
                System.Array.clear(Bridge.cast(sdirect, System.Collections.Generic.IList$1(String)), String);
                Bridge.Test.Assert.null(sdirect[0]);
                Bridge.Test.Assert.null(sdirect[1]);
                Bridge.Test.Assert.null(sdirect[2]);
    
                sdirect = ["0x1234567", "0x789abcde", "0x22334455", "0x66778899", "0x11335577", "0x22446688"];
                System.Array.fill(sdirect, null, 2, 3);
                Bridge.Test.Assert.areEqual(sdirect[0], "0x1234567");
                Bridge.Test.Assert.areEqual(sdirect[1], "0x789abcde");
                Bridge.Test.Assert.null(sdirect[2]);
                Bridge.Test.Assert.null(sdirect[3]);
                Bridge.Test.Assert.null(sdirect[4]);
                Bridge.Test.Assert.areEqual(sdirect[5], "0x22446688");
    
                sdirect = ["0x1234567", "0x789abcde", "0x22334455", "0x66778899", "0x11335577", "0x22446688"];
                System.Array.fill(sdirect, null, 0, 6);
                Bridge.Test.Assert.null(sdirect[0]);
                Bridge.Test.Assert.null(sdirect[1]);
                Bridge.Test.Assert.null(sdirect[2]);
                Bridge.Test.Assert.null(sdirect[3]);
                Bridge.Test.Assert.null(sdirect[4]);
                Bridge.Test.Assert.null(sdirect[5]);
    
                sdirect = ["0x1234567", "0x789abcde", "0x22334455", "0x66778899", "0x11335577", "0x22446688"];
                System.Array.fill(sdirect, null, 6, 0);
                Bridge.Test.Assert.areEqual(sdirect[0], "0x1234567");
                Bridge.Test.Assert.areEqual(sdirect[1], "0x789abcde");
                Bridge.Test.Assert.areEqual(sdirect[2], "0x22334455");
                Bridge.Test.Assert.areEqual(sdirect[3], "0x66778899");
                Bridge.Test.Assert.areEqual(sdirect[4], "0x11335577");
                Bridge.Test.Assert.areEqual(sdirect[5], "0x22446688");
    
                sdirect = ["0x1234567", "0x789abcde", "0x22334455", "0x66778899", "0x11335577", "0x22446688"];
                System.Array.fill(sdirect, null, 0, 0);
                Bridge.Test.Assert.areEqual(sdirect[0], "0x1234567");
                Bridge.Test.Assert.areEqual(sdirect[1], "0x789abcde");
                Bridge.Test.Assert.areEqual(sdirect[2], "0x22334455");
                Bridge.Test.Assert.areEqual(sdirect[3], "0x66778899");
                Bridge.Test.Assert.areEqual(sdirect[4], "0x11335577");
                Bridge.Test.Assert.areEqual(sdirect[5], "0x22446688");
    
                //----------------------------------------------------------
                // Valuetypes with embedded GC-refs
                //----------------------------------------------------------
                var g;
                g = System.Array.init(5, function (){
                    return new Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.G();
                });
                g[0].x = 7;
                g[0].s = "Hello";
                g[0].z = 8;
                g[1].x = 7;
                g[1].s = "Hello";
                g[1].z = 8;
                g[2].x = 7;
                g[2].s = "Hello";
                g[2].z = 8;
                g[3].x = 7;
                g[3].s = "Hello";
                g[3].z = 8;
                g[4].x = 7;
                g[4].s = "Hello";
                g[4].z = 8;
    
                System.Array.fill(g, Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.G.getDefaultValue, 0, 5);
                for (var i = 0; i < g.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(g[i].x, 0);
                    Bridge.Test.Assert.null(g[i].s);
                    Bridge.Test.Assert.areEqual(g[i].z, 0);
                }
    
                g = System.Array.init(5, function (){
                    return new Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.G();
                });
                g[0].x = 7;
                g[0].s = "Hello";
                g[0].z = 8;
                g[1].x = 7;
                g[1].s = "Hello";
                g[1].z = 8;
                g[2].x = 7;
                g[2].s = "Hello";
                g[2].z = 8;
                g[3].x = 7;
                g[3].s = "Hello";
                g[3].z = 8;
                g[4].x = 7;
                g[4].s = "Hello";
                g[4].z = 8;
    
                System.Array.fill(g, Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.G.getDefaultValue, 2, 3);
                Bridge.Test.Assert.areEqual(g[0].x, 7);
                Bridge.Test.Assert.areEqual(g[0].s, "Hello");
                Bridge.Test.Assert.areEqual(g[0].z, 8);
                Bridge.Test.Assert.areEqual(g[1].x, 7);
                Bridge.Test.Assert.areEqual(g[1].s, "Hello");
                Bridge.Test.Assert.areEqual(g[1].z, 8);
                for (var i1 = 2; i1 < 5; i1 = (i1 + 1) | 0) {
                    Bridge.Test.Assert.areEqual(g[i1].x, 0);
                    Bridge.Test.Assert.null(g[i1].s);
                    Bridge.Test.Assert.areEqual(g[i1].z, 0);
                }
    
                //----------------------------------------------------------
                // Range-checks
                //----------------------------------------------------------
                Bridge.Test.Assert.throws$6(System.ArgumentNullException, $_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.f7);
    
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    System.Array.fill(idirect, 0, -1, 1);
                });
    
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    System.Array.fill(idirect, 0, 0, 7);
                });
    
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    System.Array.fill(idirect, 0, 7, 0);
                });
    
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    System.Array.fill(idirect, 0, 5, 2);
                });
    
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    System.Array.fill(idirect, 0, 6, 2);
                });
    
                Bridge.Test.Assert.throws$6(System.IndexOutOfRangeException, function () {
                    System.Array.fill(idirect, 0, 6, 2147483647);
                });
            },
            testCopy_GCRef: function () {
                var s;
                var d;
    
                s = ["Red", "Green", null, "Blue"];
                d = ["X", "X", "X", "X"];
                System.Array.copy(s, 0, d, 0, 4);
                Bridge.Test.Assert.areEqual(d[0], "Red");
                Bridge.Test.Assert.areEqual(d[1], "Green");
                Bridge.Test.Assert.null(d[2]);
                Bridge.Test.Assert.areEqual(d[3], "Blue");
    
                // With reverse overlap
                s = ["Red", "Green", null, "Blue"];
                System.Array.copy(s, 1, s, 2, 2);
                Bridge.Test.Assert.areEqual(s[0], "Red");
                Bridge.Test.Assert.areEqual(s[1], "Green");
                Bridge.Test.Assert.areEqual(s[2], "Green");
                Bridge.Test.Assert.null(s[3]);
            },
            testCopy_VTToObj: function () {
                // Test the Array.Copy code for value-type arrays => Object[]
                var s;
                var d;
                s = System.Array.init(5, function (){
                    return new Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.G();
                });
                d = System.Array.init(5, null);
    
                s[0].x = 7;
                s[0].s = "Hello0";
                s[0].z = 8;
    
                s[1].x = 9;
                s[1].s = "Hello1";
                s[1].z = 10;
    
                s[2].x = 11;
                s[2].s = "Hello2";
                s[2].z = 12;
    
                s[3].x = 13;
                s[3].s = "Hello3";
                s[3].z = 14;
    
                s[4].x = 15;
                s[4].s = "Hello4";
                s[4].z = 16;
    
                System.Array.copy(s, 0, d, 0, 5);
                for (var i = 0; i < d.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.true(Bridge.is(d[i], Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.G));
                    var g = Bridge.cast((d[i]), Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.G);
                    Bridge.Test.Assert.areEqual(g.x, s[i].x);
                    Bridge.Test.Assert.areEqual(g.s, s[i].s);
                    Bridge.Test.Assert.areEqual(g.z, s[i].z);
                }
            },
            testCopy_VTWithGCRef: function () {
                // Test the Array.Copy code for value-type arrays with no internal GC-refs.
    
                var s;
                var d;
                s = System.Array.init(5, function (){
                    return new Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.G();
                });
                d = System.Array.init(5, function (){
                    return new Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.G();
                });
    
                s[0].x = 7;
                s[0].s = "Hello0";
                s[0].z = 8;
    
                s[1].x = 9;
                s[1].s = "Hello1";
                s[1].z = 10;
    
                s[2].x = 11;
                s[2].s = "Hello2";
                s[2].z = 12;
    
                s[3].x = 13;
                s[3].s = "Hello3";
                s[3].z = 14;
    
                s[4].x = 15;
                s[4].s = "Hello4";
                s[4].z = 16;
    
                System.Array.copy(s, 0, d, 0, 5);
                for (var i = 0; i < d.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(d[i].x, s[i].x);
                    Bridge.Test.Assert.areEqual(d[i].s, s[i].s);
                    Bridge.Test.Assert.areEqual(d[i].z, s[i].z);
                }
    
                // With overlap
                System.Array.copy(s, 1, s, 2, 3);
                Bridge.Test.Assert.areEqual(s[0].x, 7);
                Bridge.Test.Assert.areEqual(s[0].s, "Hello0");
                Bridge.Test.Assert.areEqual(s[0].z, 8);
    
                Bridge.Test.Assert.areEqual(s[1].x, 9);
                Bridge.Test.Assert.areEqual(s[1].s, "Hello1");
                Bridge.Test.Assert.areEqual(s[1].z, 10);
    
                Bridge.Test.Assert.areEqual(s[2].x, 9);
                Bridge.Test.Assert.areEqual(s[2].s, "Hello1");
                Bridge.Test.Assert.areEqual(s[2].z, 10);
    
                Bridge.Test.Assert.areEqual(s[3].x, 11);
                Bridge.Test.Assert.areEqual(s[3].s, "Hello2");
                Bridge.Test.Assert.areEqual(s[3].z, 12);
    
                Bridge.Test.Assert.areEqual(s[4].x, 13);
                Bridge.Test.Assert.areEqual(s[4].s, "Hello3");
                Bridge.Test.Assert.areEqual(s[4].z, 14);
            },
            testCopy_VTNoGCRef: function () {
                // Test the Array.Copy code for value-type arrays with no internal GC-refs.
    
                var s;
                var d;
                s = [305419896, 573785173, 2005440938];
                d = System.Array.init(3, 0);
    
                // Value-type to value-type array copy.
                System.Array.copy(s, 0, d, 0, 3);
                Bridge.Test.Assert.areEqual(d[0], 305419896);
                Bridge.Test.Assert.areEqual(d[1], 573785173);
                Bridge.Test.Assert.areEqual(d[2], 2005440938);
    
                s = [305419896, 573785173, 2005440938, 1430532898, 860116326];
                // Value-type to value-type array copy (in place, with overlap)
                System.Array.copy(s, 3, s, 2, 2);
                Bridge.Test.Assert.areEqual(s[0], 305419896);
                Bridge.Test.Assert.areEqual(s[1], 573785173);
                Bridge.Test.Assert.areEqual(s[2], 1430532898);
                Bridge.Test.Assert.areEqual(s[3], 860116326);
                Bridge.Test.Assert.areEqual(s[4], 860116326);
    
                s = [305419896, 573785173, 2005440938, 1430532898, 860116326];
                // Value-type to value-type array copy (in place, with reverse overlap)
                System.Array.copy(s, 2, s, 3, 2);
                Bridge.Test.Assert.areEqual(s[0], 305419896);
                Bridge.Test.Assert.areEqual(s[1], 573785173);
                Bridge.Test.Assert.areEqual(s[2], 2005440938);
                Bridge.Test.Assert.areEqual(s[3], 2005440938);
                Bridge.Test.Assert.areEqual(s[4], 1430532898);
            },
            testFind: function () {
                var ia = [7, 8, 9];
                var b;
    
                // Exists included here since it's a trivial wrapper around FindIndex
                b = (System.Array.findIndex(ia, $_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.f8) !== -1);
                Bridge.Test.Assert.true(b);
    
                b = (System.Array.findIndex(ia, $_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.f9) !== -1);
                Bridge.Test.Assert.false(b);
    
                var results;
                results = System.Array.findAll(ia, $_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.f10);
                Bridge.Test.Assert.areEqual(results.length, 2);
                Bridge.Test.Assert.true((System.Array.findIndex(results, $_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.f11) !== -1));
                Bridge.Test.Assert.true((System.Array.findIndex(results, $_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.f12) !== -1));
    
                var sa = ["7", "8", "88", "888", "9"];
                var elem;
                elem = System.Array.find(String, sa, $_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.f13);
                Bridge.Test.Assert.areEqual(elem, "8");
    
                elem = System.Array.find(String, sa, $_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.f14);
                Bridge.Test.Assert.null(elem);
    
                ia = [40, 41, 42, 43, 44, 45, 46, 47, 48, 49];
                var idx;
                idx = System.Array.findIndex(ia, $_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.f15);
                Bridge.Test.Assert.areEqual(idx, 3);
    
                idx = System.Array.findIndex(ia, $_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.f16);
                Bridge.Test.Assert.areEqual(idx, -1);
    
                idx = System.Array.findIndex(ia, 3, $_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.f17);
                Bridge.Test.Assert.areEqual(idx, 3);
    
                idx = System.Array.findIndex(ia, 4, $_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.f17);
                Bridge.Test.Assert.areEqual(idx, -1);
    
                idx = System.Array.findIndex(ia, 1, 3, $_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.f17);
                Bridge.Test.Assert.areEqual(idx, 3);
    
                idx = System.Array.findIndex(ia, 1, 2, $_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.f17);
                Bridge.Test.Assert.areEqual(idx, -1);
    
                sa = ["7", "8", "88", "888", "9"];
                elem = System.Array.findLast(String, sa, $_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.f13);
                Bridge.Test.Assert.areEqual(elem, "888");
    
                elem = System.Array.findLast(String, sa, $_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.f14);
                Bridge.Test.Assert.null(elem);
    
                ia = [40, 41, 42, 43, 44, 45, 46, 47, 48, 49];
                idx = System.Array.findLastIndex(ia, $_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.f15);
                Bridge.Test.Assert.areEqual(idx, 9);
    
                idx = System.Array.findLastIndex(ia, $_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.f16);
                Bridge.Test.Assert.areEqual(idx, -1);
    
                idx = System.Array.findLastIndex(ia, 3, $_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.f17);
                Bridge.Test.Assert.areEqual(idx, 3);
    
                idx = System.Array.findLastIndex(ia, 2, $_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.f17);
                Bridge.Test.Assert.areEqual(idx, -1);
    
                idx = System.Array.findLastIndex(ia, 5, 3, $_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.f17);
                Bridge.Test.Assert.areEqual(idx, 3);
    
                idx = System.Array.findLastIndex(ia, 5, 2, $_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.f17);
                Bridge.Test.Assert.areEqual(idx, -1);
            },
            testForEach: function () {
                var intArray = [2, 3, 4];
                var sum = 0;
    
                var action = function (i) {
                    sum = (sum + i) | 0;
                };
    
                System.Array.forEach(intArray, action);
                Bridge.Test.Assert.areEqual(9, sum);
            },
            testGetEnumerator: function () {
                var i = [7, 8, 9];
    
                var ie = Bridge.getEnumerator(i);
                var b;
                var v;
    
                b = ie.moveNext();
                Bridge.Test.Assert.true(b);
                v = ie.getCurrent();
                Bridge.Test.Assert.areEqual(v, 7);
    
                b = ie.moveNext();
                Bridge.Test.Assert.true(b);
                v = ie.getCurrent();
                Bridge.Test.Assert.areEqual(v, 8);
    
                b = ie.moveNext();
                Bridge.Test.Assert.true(b);
                v = ie.getCurrent();
                Bridge.Test.Assert.areEqual(v, 9);
    
                b = ie.moveNext();
                Bridge.Test.Assert.false(b);
    
                ie.reset();
                b = ie.moveNext();
                Bridge.Test.Assert.true(b);
                v = ie.getCurrent();
                Bridge.Test.Assert.areEqual(v, 7);
            },
            testIndexOf: function () {
                var a;
    
                a = [7, 7, 8, 8, 9, 9];
                var idx;
                idx = System.Array.lastIndexOfT(a, 8);
                Bridge.Test.Assert.areEqual(idx, 3);
    
                idx = System.Array.lastIndexOfT(a, 8, 3);
                Bridge.Test.Assert.areEqual(idx, 3);
    
                idx = System.Array.indexOfT(a, 8, 4);
                Bridge.Test.Assert.areEqual(idx, -1);
    
                idx = System.Array.indexOfT(a, 9, 2, 3);
                Bridge.Test.Assert.areEqual(idx, 4);
    
                idx = System.Array.indexOfT(a, 9, 2, 2);
                Bridge.Test.Assert.areEqual(idx, -1);
    
                var ia = Bridge.cast(a, Array);
                idx = System.Array.indexOfT(ia, 8);
                Bridge.Test.Assert.areEqual(idx, 2);
    
                idx = System.Array.indexOfT(ia, 8, 3);
                Bridge.Test.Assert.areEqual(idx, 3);
    
                idx = System.Array.indexOfT(ia, 8, 4);
                Bridge.Test.Assert.areEqual(idx, -1);
    
                idx = System.Array.indexOfT(ia, 9, 2, 3);
                Bridge.Test.Assert.areEqual(idx, 4);
    
                idx = System.Array.indexOfT(ia, 9, 2, 2);
                Bridge.Test.Assert.areEqual(idx, -1);
    
                a = [null, null, "Hello", "Hello", "Goodbye", "Goodbye", null, null];
                idx = System.Array.indexOfT(a, null);
                Bridge.Test.Assert.areEqual(idx, 0);
                idx = System.Array.indexOfT(a, "Hello");
                Bridge.Test.Assert.areEqual(idx, 2);
                idx = System.Array.indexOfT(a, "Goodbye");
                Bridge.Test.Assert.areEqual(idx, 4);
                idx = System.Array.indexOfT(a, "Nowhere");
                Bridge.Test.Assert.areEqual(idx, -1);
                idx = System.Array.indexOfT(a, "Hello", 3);
                Bridge.Test.Assert.areEqual(idx, 3);
                idx = System.Array.indexOfT(a, "Hello", 4);
                Bridge.Test.Assert.areEqual(idx, -1);
                idx = System.Array.indexOfT(a, "Goodbye", 2, 3);
                Bridge.Test.Assert.areEqual(idx, 4);
                idx = System.Array.indexOfT(a, "Goodbye", 2, 2);
                Bridge.Test.Assert.areEqual(idx, -1);
    
                var sa = Bridge.cast(a, Array);
                idx = System.Array.indexOfT(sa, null);
                Bridge.Test.Assert.areEqual(idx, 0);
                idx = System.Array.indexOfT(sa, "Hello");
                Bridge.Test.Assert.areEqual(idx, 2);
                idx = System.Array.indexOfT(sa, "Goodbye");
                Bridge.Test.Assert.areEqual(idx, 4);
                idx = System.Array.indexOfT(sa, "Nowhere");
                Bridge.Test.Assert.areEqual(idx, -1);
                idx = System.Array.indexOfT(sa, "Hello", 3);
                Bridge.Test.Assert.areEqual(idx, 3);
                idx = System.Array.indexOfT(sa, "Hello", 4);
                Bridge.Test.Assert.areEqual(idx, -1);
                idx = System.Array.indexOfT(sa, "Goodbye", 2, 3);
                Bridge.Test.Assert.areEqual(idx, 4);
                idx = System.Array.indexOfT(sa, "Goodbye", 2, 2);
                Bridge.Test.Assert.areEqual(idx, -1);
            },
            testLastIndexOf: function () {
                var a;
    
                a = [7, 7, 8, 8, 9, 9];
                var idx;
                idx = System.Array.lastIndexOfT(a, 8);
                Bridge.Test.Assert.areEqual(idx, 3);
    
                idx = System.Array.lastIndexOfT(a, 8, 3);
                Bridge.Test.Assert.areEqual(idx, 3);
    
                idx = System.Array.lastIndexOfT(a, 8, 1);
                Bridge.Test.Assert.areEqual(idx, -1);
    
                idx = System.Array.lastIndexOfT(a, 7, 3, 3);
                Bridge.Test.Assert.areEqual(idx, 1);
    
                idx = System.Array.lastIndexOfT(a, 7, 3, 2);
                Bridge.Test.Assert.areEqual(idx, -1);
    
                var ia = Bridge.cast(a, Array);
                idx = System.Array.lastIndexOfT(ia, 8);
                Bridge.Test.Assert.areEqual(idx, 3);
    
                idx = System.Array.lastIndexOfT(ia, 8, 3);
                Bridge.Test.Assert.areEqual(idx, 3);
    
                idx = System.Array.lastIndexOfT(ia, 8, 1);
                Bridge.Test.Assert.areEqual(idx, -1);
    
                idx = System.Array.lastIndexOfT(ia, 7, 3, 3);
                Bridge.Test.Assert.areEqual(idx, 1);
    
                idx = System.Array.lastIndexOfT(ia, 7, 3, 2);
                Bridge.Test.Assert.areEqual(idx, -1);
    
                a = [null, null, "Hello", "Hello", "Goodbye", "Goodbye", null, null];
                idx = System.Array.lastIndexOfT(a, null);
                Bridge.Test.Assert.areEqual(idx, 7);
                idx = System.Array.lastIndexOfT(a, "Hello");
                Bridge.Test.Assert.areEqual(idx, 3);
                idx = System.Array.lastIndexOfT(a, "Goodbye");
                Bridge.Test.Assert.areEqual(idx, 5);
                idx = System.Array.lastIndexOfT(a, "Nowhere");
                Bridge.Test.Assert.areEqual(idx, -1);
                idx = System.Array.lastIndexOfT(a, "Hello", 3);
                Bridge.Test.Assert.areEqual(idx, 3);
                idx = System.Array.lastIndexOfT(a, "Hello", 2);
                Bridge.Test.Assert.areEqual(idx, 2);
                idx = System.Array.lastIndexOfT(a, "Goodbye", 7, 3);
                Bridge.Test.Assert.areEqual(idx, 5);
                idx = System.Array.lastIndexOfT(a, "Goodbye", 7, 2);
                Bridge.Test.Assert.areEqual(idx, -1);
    
                var sa = Bridge.cast(a, Array);
                idx = System.Array.lastIndexOfT(sa, null);
                Bridge.Test.Assert.areEqual(idx, 7);
                idx = System.Array.lastIndexOfT(sa, "Hello");
                Bridge.Test.Assert.areEqual(idx, 3);
                idx = System.Array.lastIndexOfT(sa, "Goodbye");
                Bridge.Test.Assert.areEqual(idx, 5);
                idx = System.Array.lastIndexOfT(sa, "Nowhere");
                Bridge.Test.Assert.areEqual(idx, -1);
                idx = System.Array.lastIndexOfT(sa, "Hello", 3);
                Bridge.Test.Assert.areEqual(idx, 3);
                idx = System.Array.lastIndexOfT(sa, "Hello", 2);
                Bridge.Test.Assert.areEqual(idx, 2);
                idx = System.Array.lastIndexOfT(sa, "Goodbye", 7, 3);
                Bridge.Test.Assert.areEqual(idx, 5);
                idx = System.Array.lastIndexOfT(sa, "Goodbye", 7, 2);
                Bridge.Test.Assert.areEqual(idx, -1);
            },
            testResize: function () {
                var i = { };
    
                i.v = [1, 2, 3, 4, 5];
                System.Array.resize(i, 7, 0);
                Bridge.Test.Assert.areEqual(i.v.length, 7);
                Bridge.Test.Assert.areEqual(i.v[0], 1);
                Bridge.Test.Assert.areEqual(i.v[1], 2);
                Bridge.Test.Assert.areEqual(i.v[2], 3);
                Bridge.Test.Assert.areEqual(i.v[3], 4);
                Bridge.Test.Assert.areEqual(i.v[4], 5);
                Bridge.Test.Assert.areEqual(i.v[5], Bridge.getDefaultValue(System.Int32));
                Bridge.Test.Assert.areEqual(i.v[6], Bridge.getDefaultValue(System.Int32));
    
                i.v = [1, 2, 3, 4, 5];
                System.Array.resize(i, 3, 0);
                Bridge.Test.Assert.areEqual(i.v.length, 3);
                Bridge.Test.Assert.areEqual(i.v[0], 1);
                Bridge.Test.Assert.areEqual(i.v[1], 2);
                Bridge.Test.Assert.areEqual(i.v[2], 3);
    
                i.v = null;
                System.Array.resize(i, 3, 0);
                Bridge.Test.Assert.areEqual(i.v.length, 3);
                Bridge.Test.Assert.areEqual(i.v[0], Bridge.getDefaultValue(System.Int32));
                Bridge.Test.Assert.areEqual(i.v[1], Bridge.getDefaultValue(System.Int32));
                Bridge.Test.Assert.areEqual(i.v[2], Bridge.getDefaultValue(System.Int32));
            },
            testReverse: function () {
                var i;
    
                i = [1, 2, 3, 4, 5];
                System.Array.reverse(Bridge.cast(i, Array));
                Bridge.Test.Assert.areEqual(i[0], 5);
                Bridge.Test.Assert.areEqual(i[1], 4);
                Bridge.Test.Assert.areEqual(i[2], 3);
                Bridge.Test.Assert.areEqual(i[3], 2);
                Bridge.Test.Assert.areEqual(i[4], 1);
    
                i = [1, 2, 3, 4, 5];
                System.Array.reverse(Bridge.cast(i, Array), 2, 3);
                Bridge.Test.Assert.areEqual(i[0], 1);
                Bridge.Test.Assert.areEqual(i[1], 2);
                Bridge.Test.Assert.areEqual(i[2], 5);
                Bridge.Test.Assert.areEqual(i[3], 4);
                Bridge.Test.Assert.areEqual(i[4], 3);
    
                var s;
    
                s = ["1", "2", "3", "4", "5"];
                System.Array.reverse(Bridge.cast(s, Array));
                Bridge.Test.Assert.areEqual(s[0], "5");
                Bridge.Test.Assert.areEqual(s[1], "4");
                Bridge.Test.Assert.areEqual(s[2], "3");
                Bridge.Test.Assert.areEqual(s[3], "2");
                Bridge.Test.Assert.areEqual(s[4], "1");
    
                s = ["1", "2", "3", "4", "5"];
                System.Array.reverse(Bridge.cast(s, Array), 2, 3);
                Bridge.Test.Assert.areEqual(s[0], "1");
                Bridge.Test.Assert.areEqual(s[1], "2");
                Bridge.Test.Assert.areEqual(s[2], "5");
                Bridge.Test.Assert.areEqual(s[3], "4");
                Bridge.Test.Assert.areEqual(s[4], "3");
            },
            testSort: function () {
                var icomparer = new Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.IntegerComparer();
    
                Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.testSortHelper(System.Int32, [], 0, 0, icomparer);
                Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.testSortHelper(System.Int32, [5], 0, 1, icomparer);
                Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.testSortHelper(System.Int32, [5, 2], 0, 2, icomparer);
    
                Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.testSortHelper(System.Int32, [5, 2, 9, 8, 4, 3, 2, 4, 6], 0, 9, icomparer);
                Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.testSortHelper(System.Int32, [5, 2, 9, 8, 4, 3, 2, 4, 6], 3, 4, icomparer);
                Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.testSortHelper(System.Int32, [5, 2, 9, 8, 4, 3, 2, 4, 6], 3, 6, icomparer);
    
                var scomparer = new Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.StringComparer();
                Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.testSortHelper(String, [], 0, 0, scomparer);
                Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.testSortHelper(String, ["5"], 0, 1, scomparer);
                Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.testSortHelper(String, ["5", "2"], 0, 2, scomparer);
    
                Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.testSortHelper(String, ["5", "2", null, "8", "4", "3", "2", "4", "6"], 0, 9, scomparer);
                Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.testSortHelper(String, ["5", "2", null, "8", "4", "3", "2", "4", "6"], 3, 4, scomparer);
                Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.testSortHelper(String, ["5", "2", null, "8", "4", "3", "2", "4", "6"], 3, 6, scomparer);
            },
            testSortHelper: function (T, array, index, length, comparer) {
                var control = Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.simpleSort(T, array, index, length, comparer);
    
                {
                    var spawn2 = Bridge.cast((System.Array.clone(array)), Array);
                    System.Array.sort(spawn2, index, length, comparer);
                    Bridge.Test.Assert.true(Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.arraysAreEqual(T, spawn2, control, comparer));
                }
            },
            simpleSort: function (T, a, index, length, comparer) {
                var result = Bridge.cast((System.Array.clone(a)), Array);
                if (length < 2) {
                    return result;
                }
    
                for (var i = index; i < ((((index + length) | 0) - 1) | 0); i = (i + 1) | 0) {
                    var tmp = result[i];
                    for (var j = (i + 1) | 0; j < ((index + length) | 0); j = (j + 1) | 0) {
                        if (comparer.compare(tmp, result[j]) > 0) {
                            result[i] = result[j];
                            result[j] = tmp;
                            tmp = result[i];
                        }
                    }
                }
                return result;
            },
            arraysAreEqual: function (T, a, b, comparer) {
                // If the same instances were passed, this is unlikely what the test intended.
                Bridge.Test.Assert.false(Bridge.referenceEquals(a, b));
    
                if (a.length !== b.length) {
                    return false;
                }
                for (var i = 0; i < a.length; i = (i + 1) | 0) {
                    if (0 !== comparer.compare(a[i], b[i])) {
                        return false;
                    }
                }
                return true;
            },
            testTrueForAll: function () {
                var ia;
                var b;
    
                ia = [1, 2, 3, 4, 5];
    
                b = System.Array.trueForAll(ia, $_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.f18);
                Bridge.Test.Assert.true(b);
    
                b = System.Array.trueForAll(ia, $_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.f5);
                Bridge.Test.Assert.false(b);
    
                ia = System.Array.init(0, 0);
                b = System.Array.trueForAll(ia, $_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.f19);
                Bridge.Test.Assert.true(b);
            },
            testSetValueCasting: function () {
                var indices = [1];
                {
                    // null -> default(null)
                    var a = System.Array.init(3, function (){
                        return new Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.S();
                    });
                    a[1].x = 572662306;
                    //a.SetValue(null, indices);
                    //Assert.AreEqual(a[1].X, 0);
                }
    
                {
                    // T -> Nullable<T>
                    var a1 = System.Array.init(3, null);
                    System.Array.set.apply(System.Array, [a1, 42].concat(indices));
                    var ni = a1[1];
                    Bridge.Test.Assert.areEqual(System.Nullable.hasValue(ni), true);
                    Bridge.Test.Assert.areEqual(System.Nullable.getValue(ni), 42);
                }
    
                {
                    // null -> Nullable<T>
                    var a2 = System.Array.init(3, null);
                    var orig = 42;
                    a2[1] = orig;
                    System.Array.set.apply(System.Array, [a2, null].concat(indices));
                    var ni1 = a2[1];
                    Bridge.Test.Assert.areEqual(System.Nullable.hasValue(ni1), false);
                }
    
                {
                    // primitive widening
                    var a3 = System.Array.init(3, 0);
                    System.Array.set.apply(System.Array, [a3, 42].concat(indices));
                    Bridge.Test.Assert.areEqual(a3[1], 42);
                }
    
                {
                    // widening from enum to primitive
                    var a4 = System.Array.init(3, 0);
                    System.Array.set.apply(System.Array, [a4, Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.E1.MinusTwo].concat(indices));
                    Bridge.Test.Assert.areEqual(a4[1], -2);
                }
            },
            testValueTypeToReferenceCopy: function () {
                {
                    var s = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
                    var d = System.Array.init(10, null);
    
                    System.Array.copy(s, 2, d, 5, 3);
    
                    Bridge.Test.Assert.areEqual(d[0], null);
                    Bridge.Test.Assert.areEqual(d[1], null);
                    Bridge.Test.Assert.areEqual(d[2], null);
                    Bridge.Test.Assert.areEqual(d[3], null);
                    Bridge.Test.Assert.areEqual(d[4], null);
                    Bridge.Test.Assert.areEqual(d[5], 2);
                    Bridge.Test.Assert.areEqual(d[6], 3);
                    Bridge.Test.Assert.areEqual(d[7], 4);
                    Bridge.Test.Assert.areEqual(d[8], null);
                    Bridge.Test.Assert.areEqual(d[9], null);
                }
    
                {
                    var s1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];
                    var d1 = System.Array.init(10, null);
    
                    System.Array.copy(s1, 2, d1, 5, 3);
    
                    Bridge.Test.Assert.areEqual(d1[0], null);
                    Bridge.Test.Assert.areEqual(d1[1], null);
                    Bridge.Test.Assert.areEqual(d1[2], null);
                    Bridge.Test.Assert.areEqual(d1[3], null);
                    Bridge.Test.Assert.areEqual(d1[4], null);
                    Bridge.Test.Assert.areEqual(d1[5], 2);
                    Bridge.Test.Assert.areEqual(d1[6], 3);
                    Bridge.Test.Assert.areEqual(d1[7], 4);
                    Bridge.Test.Assert.areEqual(d1[8], null);
                    Bridge.Test.Assert.areEqual(d1[9], null);
                }
    
                {
                    var s2 = [0, 1, 2, null, 4, 5, 6, 7, 8, 9];
                    var d2 = System.Array.init(10, null);
    
                    System.Array.copy(s2, 2, d2, 5, 3);
    
                    Bridge.Test.Assert.areEqual(d2[0], null);
                    Bridge.Test.Assert.areEqual(d2[1], null);
                    Bridge.Test.Assert.areEqual(d2[2], null);
                    Bridge.Test.Assert.areEqual(d2[3], null);
                    Bridge.Test.Assert.areEqual(d2[4], null);
                    Bridge.Test.Assert.areEqual(d2[5], 2);
                    Bridge.Test.Assert.areEqual(d2[6], null);
                    Bridge.Test.Assert.areEqual(d2[7], 4);
                    Bridge.Test.Assert.areEqual(d2[8], null);
                    Bridge.Test.Assert.areEqual(d2[9], null);
                }
    
                return;
            },
            testReferenceToValueTypeCopy: function () {
                var cc = -858993460;
    
                {
                    var s = System.Array.init(10, null);
                    for (var i = 0; i < s.length; i = (i + 1) | 0) {
                        s[i] = i;
                    }
    
                    var d = System.Array.init(10, 0);
                    for (var i1 = 0; i1 < d.length; i1 = (i1 + 1) | 0) {
                        d[i1] = cc;
                    }
    
                    System.Array.copy(s, 2, d, 5, 3);
                    Bridge.Test.Assert.areEqual(d[0], cc);
                    Bridge.Test.Assert.areEqual(d[1], cc);
                    Bridge.Test.Assert.areEqual(d[2], cc);
                    Bridge.Test.Assert.areEqual(d[3], cc);
                    Bridge.Test.Assert.areEqual(d[4], cc);
                    Bridge.Test.Assert.areEqual(d[5], 2);
                    Bridge.Test.Assert.areEqual(d[6], 3);
                    Bridge.Test.Assert.areEqual(d[7], 4);
                    Bridge.Test.Assert.areEqual(d[8], cc);
                    Bridge.Test.Assert.areEqual(d[9], cc);
                }
    
                {
                    var s1 = System.Array.init(10, null);
                    for (var i2 = 0; i2 < s1.length; i2 = (i2 + 1) | 0) {
                        s1[i2] = i2;
                    }
    
                    var d1 = System.Array.init(10, 0);
                    for (var i3 = 0; i3 < d1.length; i3 = (i3 + 1) | 0) {
                        d1[i3] = cc;
                    }
    
                    System.Array.copy(s1, 2, d1, 5, 3);
                    Bridge.Test.Assert.areEqual(d1[0], cc);
                    Bridge.Test.Assert.areEqual(d1[1], cc);
                    Bridge.Test.Assert.areEqual(d1[2], cc);
                    Bridge.Test.Assert.areEqual(d1[3], cc);
                    Bridge.Test.Assert.areEqual(d1[4], cc);
                    Bridge.Test.Assert.areEqual(d1[5], 2);
                    Bridge.Test.Assert.areEqual(d1[6], 3);
                    Bridge.Test.Assert.areEqual(d1[7], 4);
                    Bridge.Test.Assert.areEqual(d1[8], cc);
                    Bridge.Test.Assert.areEqual(d1[9], cc);
                }
    
                {
                    var s2 = System.Array.init(10, null);
                    for (var i4 = 0; i4 < s2.length; i4 = (i4 + 1) | 0) {
                        s2[i4] = i4;
                    }
                    s2[1] = new Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.NotInt32();
                    s2[5] = new Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.NotInt32();
    
                    var d2 = System.Array.init(10, 0);
                    for (var i5 = 0; i5 < d2.length; i5 = (i5 + 1) | 0) {
                        d2[i5] = cc;
                    }
    
                    System.Array.copy(s2, 2, d2, 5, 3);
                    Bridge.Test.Assert.areEqual(d2[0], cc);
                    Bridge.Test.Assert.areEqual(d2[1], cc);
                    Bridge.Test.Assert.areEqual(d2[2], cc);
                    Bridge.Test.Assert.areEqual(d2[3], cc);
                    Bridge.Test.Assert.areEqual(d2[4], cc);
                    Bridge.Test.Assert.areEqual(d2[5], 2);
                    Bridge.Test.Assert.areEqual(d2[6], 3);
                    Bridge.Test.Assert.areEqual(d2[7], 4);
                    Bridge.Test.Assert.areEqual(d2[8], cc);
                    Bridge.Test.Assert.areEqual(d2[9], cc);
                }
    
                {
                    var s3 = System.Array.init(10, null);
                    for (var i6 = 0; i6 < s3.length; i6 = (i6 + 1) | 0) {
                        s3[i6] = i6;
                    }
                    s3[4] = null;
    
                    var d3 = System.Array.init(10, null);
                    for (var i7 = 0; i7 < d3.length; i7 = (i7 + 1) | 0) {
                        d3[i7] = cc;
                    }
    
                    System.Array.copy(s3, 2, d3, 5, 3);
                    Bridge.Test.Assert.true(System.Nullable.hasValue(d3[0]) && System.Nullable.getValue(d3[0]) === cc);
                    Bridge.Test.Assert.true(System.Nullable.hasValue(d3[1]) && System.Nullable.getValue(d3[1]) === cc);
                    Bridge.Test.Assert.true(System.Nullable.hasValue(d3[2]) && System.Nullable.getValue(d3[2]) === cc);
                    Bridge.Test.Assert.true(System.Nullable.hasValue(d3[3]) && System.Nullable.getValue(d3[3]) === cc);
                    Bridge.Test.Assert.true(System.Nullable.hasValue(d3[4]) && System.Nullable.getValue(d3[4]) === cc);
                    Bridge.Test.Assert.true(System.Nullable.hasValue(d3[5]) && System.Nullable.getValue(d3[5]) === 2);
                    Bridge.Test.Assert.true(System.Nullable.hasValue(d3[6]) && System.Nullable.getValue(d3[6]) === 3);
                    Bridge.Test.Assert.true(!System.Nullable.hasValue(d3[7]));
                    Bridge.Test.Assert.true(System.Nullable.hasValue(d3[8]) && System.Nullable.getValue(d3[8]) === cc);
                    Bridge.Test.Assert.true(System.Nullable.hasValue(d3[9]) && System.Nullable.getValue(d3[9]) === cc);
                }
    
                return;
            },
            testArrayConstructionMultidimArrays: function () {
                // This C# initialization syntax generates some peculiar looking IL.
                // Initializations of this form are handled specially on Desktop and
                // in .NET Native by UTC.
                var arr = System.Array.create(0, [[[[1, 2, 3], [1, 2, 3]], [[1, 2, 3], [1, 2, 3]]], [[[1, 2, 3], [1, 2, 3]], [[1, 2, 3], [1, 2, 3]]]], 2, 2, 2, 3);
                Bridge.Test.Assert.notNull(arr);
                Bridge.Test.Assert.areEqual(System.Array.get(arr, 0, 0, 0, 0), 1);
                Bridge.Test.Assert.areEqual(System.Array.get(arr, 0, 0, 0, 1), 2);
                Bridge.Test.Assert.areEqual(System.Array.get(arr, 0, 0, 0, 2), 3);
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.ArrayTests1.ArrayTestsSet2", $_);
    
    Bridge.apply($_.Bridge.ClientTest.ArrayTests1.ArrayTestsSet2, {
        f1: function (i) {
            return i === 4;
        },
        f2: function (i) {
            return i === 2 || i === 3;
        },
        f3: function (i) {
            return i === 0;
        },
        f4: function (i) {
            return i === -7;
        },
        f5: function (i) {
            return i === 3;
        },
        f6: function (i) {
            return i === -5;
        },
        f7: function () {
            System.Array.fill(null, null, 0, 0);
        },
        f8: function (i) {
            return i === 8;
        },
        f9: function (i) {
            return i === -1;
        },
        f10: function (i) {
            return (i % 2) !== 0;
        },
        f11: function (i) {
            return i === 7;
        },
        f12: function (i) {
            return i === 9;
        },
        f13: function (s) {
            return System.String.startsWith(s, "8");
        },
        f14: function (s) {
            return Bridge.referenceEquals(s, "X");
        },
        f15: function (i) {
            return i >= 43;
        },
        f16: function (i) {
            return i === 99;
        },
        f17: function (i) {
            return i === 43;
        },
        f18: function (i) {
            return i > 0;
        },
        f19: function (i) {
            return false;
        }
    });
    
    Bridge.define('Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.B1');
    
    Bridge.define('Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.B2');
    
    Bridge.define('Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.E1', {
        statics: {
            MinusTwo: -2
        },
        $enum: true
    });
    
    Bridge.define('Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.G', {
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.G(); }
        },
        x: 0,
        s: null,
        z: 0,
        constructor: function () {
        },
        $struct: true,
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 372029403;
            hash = hash * 23 + (this.x == null ? 0 : Bridge.getHashCode(this.x));
            hash = hash * 23 + (this.s == null ? 0 : Bridge.getHashCode(this.s));
            hash = hash * 23 + (this.z == null ? 0 : Bridge.getHashCode(this.z));
            return hash;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.G)) {
                return false;
            }
            return Bridge.equals(this.x, o.x) && Bridge.equals(this.s, o.s) && Bridge.equals(this.z, o.z);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.G();
            s.x = this.x;
            s.s = this.s;
            s.z = this.z;
            return s;
        }
    });
    
    Bridge.define('Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.I1', {
        $interface: true
    });
    
    Bridge.define('Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.I2', {
        $interface: true
    });
    
    Bridge.define('Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.IntegerComparer', {
        inherits: [System.Collections.Generic.IComparer$1(System.Int32),System.Collections.IEqualityComparer],
        compare: function (x, y) {
            return ((x - y) | 0);
        },
        equals: function (x, y) {
            return Bridge.cast(x, System.Int32) === Bridge.cast(y, System.Int32);
        },
        getHashCode: function (obj) {
            return Bridge.cast(obj, System.Int32) >> 2;
        }
    });
    
    Bridge.define('Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.NotInt32', {
        inherits: [System.IEquatable$1(System.Int32)],
        equalsT: function (other) {
            throw new System.NotImplementedException();
        }
    });
    
    Bridge.define('Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.S', {
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.S(); }
        },
        x: 0,
        constructor: function () {
        },
        $struct: true,
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 372029423;
            hash = hash * 23 + (this.x == null ? 0 : Bridge.getHashCode(this.x));
            return hash;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.S)) {
                return false;
            }
            return Bridge.equals(this.x, o.x);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.S();
            s.x = this.x;
            return s;
        }
    });
    
    Bridge.define('Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.StringComparer', {
        inherits: [System.Collections.Generic.IComparer$1(String)],
        compare: function (x, y) {
            if (Bridge.referenceEquals(x, y)) {
                return 0;
            }
            if (x == null) {
                return -1;
            }
            if (y == null) {
                return 1;
            }
            return System.String.compare(x, y);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BasicCSharp.Class68', {
        x: 0,
        y: 1,
        test: function () {
            // Multiple local vars correctly
            var x = 1, y = 2;
    
            var z = (x + y) | 0;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BasicCSharp.ClassA', {
        statics: {
            constructor: function () {
                Bridge.ClientTest.BasicCSharp.ClassA.staticString = "Defined string";
                Bridge.ClientTest.BasicCSharp.ClassA.staticInt = -340;
            },
            statitIntNotInitialized: 0,
            statitStringNotInitialized: null,
            staticInt: 0,
            staticString: null,
            CONST_CHAR: 81,
            CONST_DECIMAL: System.Decimal("3.123456789324324324"),
            staticMethod1: function (i, s, d) {
                Bridge.ClientTest.BasicCSharp.ClassA.statitIntNotInitialized = i;
                Bridge.ClientTest.BasicCSharp.ClassA.statitStringNotInitialized = s;
    
                return Bridge.merge(new Bridge.ClientTest.BasicCSharp.ClassA("constructor"), {
                    setDoubleA: d
                } );
            },
            staticMethod2: function (p) {
                if (p === void 0) { p = []; }
                var i = (Bridge.cast(p[0], System.Int32) + 1000) | 0;
                var s = Bridge.cast(p[1], String);
                var d = Bridge.cast(p[2], System.Double);
    
                return Bridge.ClientTest.BasicCSharp.ClassA.staticMethod1(i, s, d);
            },
            tryParse: function (o, i) {
                i.v = 3;
    
                return true;
            },
            getDefaultInt: function () {
                return Bridge.getDefaultValue(System.Int32);
            }
        },
        data: null,
        config: {
            properties: {
                NumberA: 0,
                StringA: null,
                BoolA: false,
                DoubleA: 0,
                DecimalA: System.Decimal(0.0)
            }
        },
        constructor: function () {
            this.setNumberA(10);
            this.setStringA("Str");
            this.setBoolA(true);
            this.setDoubleA(Number.POSITIVE_INFINITY);
            this.setDecimalA(System.Decimal.MinusOne);
            this.setData(Bridge.merge(new Bridge.ClientTest.BasicCSharp.ClassA.Aux1(), {
                setNumber: 700
            } ));
        },
        constructor$1: function (d) {
            Bridge.ClientTest.BasicCSharp.ClassA.prototype.$constructor.call(this);
    
            if (d == null) {
                throw new System.Exception("Related should not be null");
            }
    
            this.setData(d);
        },
        constructor$2: function (p) {
            if (p === void 0) { p = []; }
    
            Bridge.ClientTest.BasicCSharp.ClassA.prototype.$constructor.call(this);
    
            if (p == null || p.length < 6) {
                throw new System.Exception("Should pass six parameters");
            }
    
            if (Bridge.is(p[0], System.Int32)) {
                this.setNumberA(Bridge.cast(p[0], System.Int32));
            }
    
            if (Bridge.is(p[1], String)) {
                this.setStringA(Bridge.cast(p[1], String));
            }
    
            if (Bridge.is(p[2], Boolean)) {
                this.setBoolA(Bridge.cast(p[2], Boolean));
            }
    
            if (Bridge.is(p[3], System.Double)) {
                this.setDoubleA(Bridge.cast(p[3], System.Double));
            }
    
            if (Bridge.is(p[4], System.Decimal)) {
                this.setDecimalA(Bridge.cast(p[4], System.Decimal));
            }
    
            if (Bridge.is(p[5], Bridge.ClientTest.BasicCSharp.ClassA.Aux1)) {
                this.setData(Bridge.cast(p[5], Bridge.ClientTest.BasicCSharp.ClassA.Aux1));
            }
        },
        getData: function () {
            return this.data;
        },
        setData: function (value) {
            this.data = value;
        },
        method1: function () {
            var a1 = Bridge.merge(new Bridge.ClientTest.BasicCSharp.ClassA.Aux1(), {
                setNumber: 1
            } );
    
            return Bridge.merge(new Bridge.ClientTest.BasicCSharp.ClassA.Aux1(), {
                setNumber: 2,
                setRelated: a1
            } );
        },
        method2: function (a) {
            a.setRelated(a);
        },
        method3: function () {
            if (this.getData() != null) {
                return this.getData().toString();
            }
    
            return "no data";
        },
        method4: function (i, add) {
            i = (i + add) | 0;
            return i;
        },
        method5: function (i) {
            if (i === void 0) { i = -5; }
            return i;
        },
        method5$1: function (i, k) {
            if (i === void 0) { i = -50; }
            if (k === void 0) { k = -60; }
            return ((i + k) | 0);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BasicCSharp.ClassA.Aux1', {
        config: {
            properties: {
                Number: 0,
                Related: null
            }
        },
        toString: function () {
            return System.String.format("{0} Has related {1}", this.getNumber(), this.getRelated() != null ? this.getRelated().getNumber().toString() : "No");
        }
    });
    
    Bridge.define('Bridge.ClientTest.BasicCSharp.Data', {
        config: {
            properties: {
                Count: 0
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BasicCSharp.Point', {
        statics: {
            constructor: function () {
                Bridge.ClientTest.BasicCSharp.Point.staticInt = 500;
                Bridge.ClientTest.BasicCSharp.Point.staticString = "Initialized";
            },
            statitIntNotInitialized: 0,
            statitStringNotInitialized: null,
            staticInt: 0,
            staticString: null,
            CONST_CHAR: 87,
            test3: function () {
                return ((Bridge.ClientTest.BasicCSharp.Point.statitIntNotInitialized + Bridge.ClientTest.BasicCSharp.Point.staticInt) | 0);
            },
            getDefaultValue: function () { return new Bridge.ClientTest.BasicCSharp.Point(); }
        },
        x: 0,
        y: 0,
        constructor: function () {
        },
        test1: function () {
            return ((Bridge.ClientTest.BasicCSharp.Point.staticInt + this.x) | 0);
        },
        test2: function (p) {
            return Bridge.merge(new Bridge.ClientTest.BasicCSharp.Point(), {
                x: ((this.x + p.x) | 0),
                y: ((this.y + p.y) | 0)
            } );
        },
        $struct: true,
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 1554797180;
            hash = hash * 23 + (this.x == null ? 0 : Bridge.getHashCode(this.x));
            hash = hash * 23 + (this.y == null ? 0 : Bridge.getHashCode(this.y));
            return hash;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.BasicCSharp.Point)) {
                return false;
            }
            return Bridge.equals(this.x, o.x) && Bridge.equals(this.y, o.y);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.BasicCSharp.Point();
            s.x = this.x;
            s.y = this.y;
            return s;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BasicCSharp.Rectangle', {
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.BasicCSharp.Rectangle(); }
        },
        config: {
            init: function () {
                this.l = new Bridge.ClientTest.BasicCSharp.Point();
                this.t = new Bridge.ClientTest.BasicCSharp.Point();
            }
        },
        constructor$1: function (x, y) {
            // [#69]
            (new Bridge.ClientTest.BasicCSharp.Rectangle("constructor")).$clone(this);
    
            this.l.x = x;
            this.l.y = y;
        },
        constructor$2: function (x1, y1, x2, y2) {
            this.l.x = x1;
            this.l.y = y1;
            this.t.x = x2;
            this.t.y = y2;
        },
        constructor: function () {
        },
        $struct: true,
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 2001675717;
            hash = hash * 23 + (this.l == null ? 0 : Bridge.getHashCode(this.l));
            hash = hash * 23 + (this.t == null ? 0 : Bridge.getHashCode(this.t));
            return hash;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.BasicCSharp.Rectangle)) {
                return false;
            }
            return Bridge.equals(this.l, o.l) && Bridge.equals(this.t, o.t);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.BasicCSharp.Rectangle();
            s.l = this.l;
            s.t = this.t;
            return s;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BasicCSharp.TestAbstractClass', {
        statics: {
            testB: function () {
                var b = new Bridge.ClientTest.BasicCSharp.TestAbstractClass.B();
    
                Bridge.Test.Assert.true$1(b != null, "Instance of B created");
                Bridge.Test.Assert.areEqual$1("B", b.getString(), "b.GetString() = 'B'");
                Bridge.Test.Assert.areEqual$1(1, b.getData(), "b.Data = 1");
            },
            testC: function () {
                var c = new Bridge.ClientTest.BasicCSharp.TestAbstractClass.C();
    
                Bridge.Test.Assert.true$1(c != null, "Instance of C created");
                Bridge.Test.Assert.areEqual$1("C", c.getString(), "c.GetString() = 'C'");
                Bridge.Test.Assert.areEqual$1(-1, c.getData(), "c.Data = -1");
            },
            testBC: function () {
                var b = new Bridge.ClientTest.BasicCSharp.TestAbstractClass.B();
    
                Bridge.Test.Assert.true$1(b != null, "Instance of B created as instance of A");
                Bridge.Test.Assert.areEqual$1("B", b.getString(), "b.GetString() = 'B'");
                Bridge.Test.Assert.areEqual$1(1, b.getData(), "b.Data = 1");
    
                var c = new Bridge.ClientTest.BasicCSharp.TestAbstractClass.C();
                Bridge.Test.Assert.true$1(c != null, "Instance of C created as instance of A");
                Bridge.Test.Assert.areEqual$1("C", c.getString(), "c.GetString() = 'C'");
                Bridge.Test.Assert.areEqual$1(-1, c.getData(), "c.Data = -1");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BasicCSharp.TestAbstractClass.A', {
        config: {
            properties: {
                Data: 0
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BasicCSharp.TestEnum', {
        statics: {
            testParse: function () {
                Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Zero, System.Enum.parse(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, "Zero"), "Parse Digits.Zero");
                Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.BasicCSharp.TestEnum.Digits.One, System.Enum.parse(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, "One"), "Parse Digits.One");
                Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Two, System.Enum.parse(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, "Two"), "Parse Digits.Two");
                Bridge.Test.Assert.areEqual$1(3, System.Enum.parse(Bridge.ClientTest.BasicCSharp.TestEnum.Pets, "Dog, Cat"), "Parse Dog, Cat");
                Bridge.Test.Assert.areEqual$1(14, System.Enum.parse(Bridge.ClientTest.BasicCSharp.TestEnum.Pets, "Bird, Cat, Rabbit"), "Parse Bird, Cat, Rabbit");
    
                Bridge.Test.Assert.throws$5($_.Bridge.ClientTest.BasicCSharp.TestEnum.f1, "Parse ONE");
            },
            testParseIgnoreCase: function () {
                Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Zero, System.Enum.parse(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, "zero", true), "Parse Digits.Zero");
                Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.BasicCSharp.TestEnum.Digits.One, System.Enum.parse(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, "oNe", true), "Parse Digits.One");
                Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Two, System.Enum.parse(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, "TWO", true), "Parse Digits.Two");
    
                Bridge.Test.Assert.throws$5($_.Bridge.ClientTest.BasicCSharp.TestEnum.f2, "Parse ONN");
            },
            testToString: function () {
                Bridge.Test.Assert.areEqual$1("Zero", System.Enum.toString(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Zero), "ToString Digits.Zero");
                Bridge.Test.Assert.areEqual$1("One", System.Enum.toString(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, Bridge.ClientTest.BasicCSharp.TestEnum.Digits.One), "ToString Digits.One");
                Bridge.Test.Assert.areEqual$1("Two", System.Enum.toString(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Two), "ToString Digits.Two");
                Bridge.Test.Assert.areEqual$1("150", System.Enum.toString(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, 150), "ToString (Digits)150");
            },
            testGetValues: function () {
                Bridge.Test.Assert.areDeepEqual$1([Bridge.ClientTest.BasicCSharp.TestEnum.Abc.A, Bridge.ClientTest.BasicCSharp.TestEnum.Abc.B, Bridge.ClientTest.BasicCSharp.TestEnum.Abc.C], System.Enum.getValues(Bridge.ClientTest.BasicCSharp.TestEnum.Abc), "Abc values");
    
                Bridge.Test.Assert.areDeepEqual$1([Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Zero, Bridge.ClientTest.BasicCSharp.TestEnum.Digits.One, Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Two], System.Enum.getValues(Bridge.ClientTest.BasicCSharp.TestEnum.Digits), "Digits values");
            },
            testCompareTo: function () {
                Bridge.Test.Assert.areEqual$1(0, Bridge.compare(Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Two, Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Two), "CompareTo Digits.Two with Digits.Two");
                Bridge.Test.Assert.areEqual$1(-1, Bridge.compare(Bridge.ClientTest.BasicCSharp.TestEnum.Digits.One, Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Two), "CompareTo Digits.One with Digits.Two");
                Bridge.Test.Assert.areEqual$1(1, Bridge.compare(Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Two, Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Zero), "CompareTo Digits.Two with Digits.Zero");
            },
            testFormat: function () {
                Bridge.Test.Assert.areEqual$1("Two", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Two, "G"), "Format Digits.Two G");
                Bridge.Test.Assert.areEqual$1("Two", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Two, "g"), "Format Digits.Two g");
                Bridge.Test.Assert.areEqual$1("150", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, 150, "G"), "Format (Digits)150 G");
                Bridge.Test.Assert.areEqual$1("150", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, 150, "g"), "Format (Digits)150 g");
                Bridge.Test.Assert.areEqual$1("Dog, Cat", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Pets, 3, "G"), "Format Pets.Dog | Pets.Cat G");
                Bridge.Test.Assert.areEqual$1("Bird, Rabbit, Other", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Pets, 28, "g"), "Format Pets.Bird | Pets.Rabbit | Pets.Other g");
                Bridge.Test.Assert.areEqual$1("3", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Pets1, 3, "G"), "Format Pets1.Cat | Pets1.Dog G");
                Bridge.Test.Assert.areEqual$1("3", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Pets1, 3, "g"), "Format Pets1.Cat | Pets1.Dog g");
    
                Bridge.Test.Assert.areEqual$1("2", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Two, "X"), "Format Digits.Two X");
                Bridge.Test.Assert.areEqual$1("1", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, Bridge.ClientTest.BasicCSharp.TestEnum.Digits.One, "x"), "Format Digits.One x");
                Bridge.Test.Assert.areEqual$1("ff", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, 255, "X"), "Format (Digits)255 X");
                Bridge.Test.Assert.areEqual$1("ff", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, 255, "x"), "Format (Digits)255 x");
                Bridge.Test.Assert.areEqual$1("18", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Pets, 24, "X"), "Format Pets.Rabbit | Pets.Other X");
                Bridge.Test.Assert.areEqual$1("10", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Pets, Bridge.ClientTest.BasicCSharp.TestEnum.Pets.Other, "x"), "Format Pets.Other x");
    
                Bridge.Test.Assert.areEqual$1("2", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Two, "D"), "Format Digits.Two D");
                Bridge.Test.Assert.areEqual$1("1", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, Bridge.ClientTest.BasicCSharp.TestEnum.Digits.One, "d"), "Format Digits.One d");
                Bridge.Test.Assert.areEqual$1("255", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, 255, "D"), "Format (Digits)255 D");
                Bridge.Test.Assert.areEqual$1("255", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, 255, "d"), "Format (Digits)255 d");
                Bridge.Test.Assert.areEqual$1("24", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Pets, 24, "D"), "Format Pets.Rabbit | Pets.Other D");
                Bridge.Test.Assert.areEqual$1("16", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Pets, Bridge.ClientTest.BasicCSharp.TestEnum.Pets.Other, "d"), "Format Pets.Other d");
    
    
                Bridge.Test.Assert.areEqual$1("Dog, Cat", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Pets1, 3, "F"), "Format Pets1.Cat | Pets1.Dog F");
                Bridge.Test.Assert.areEqual$1("Dog, Cat", System.Enum.format(Bridge.ClientTest.BasicCSharp.TestEnum.Pets1, 3, "f"), "Format Pets1.Cat | Pets1.Dog f");
            },
            testGetName: function () {
                Bridge.Test.Assert.areEqual$1("Two", System.Enum.getName(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, 2), "GetName 2");
                Bridge.Test.Assert.areEqual$1("One", System.Enum.getName(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, 1), "GetName 1");
                Bridge.Test.Assert.areEqual$1(null, System.Enum.getName(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, 100), "GetName 100");
            },
            testGetNames: function () {
                Bridge.Test.Assert.areDeepEqual$1(["A", "B", "C"], System.Enum.getNames(Bridge.ClientTest.BasicCSharp.TestEnum.Abc), "Abc names");
    
                Bridge.Test.Assert.areDeepEqual$1(["Zero", "One", "Two"], System.Enum.getNames(Bridge.ClientTest.BasicCSharp.TestEnum.Digits), "Digits names");
            },
            testHasFlag: function () {
                Bridge.Test.Assert.areEqual$1(true, System.Enum.hasFlag((3), Bridge.ClientTest.BasicCSharp.TestEnum.Pets.Cat), "(Pets.Dog | Pets.Cat).HasFlag(Pets.Cat)");
                Bridge.Test.Assert.areEqual$1(true, System.Enum.hasFlag((3), Bridge.ClientTest.BasicCSharp.TestEnum.Pets.Dog), "(Pets.Dog | Pets.Cat).HasFlag(Pets.Dog)");
                Bridge.Test.Assert.areEqual$1(false, System.Enum.hasFlag((3), Bridge.ClientTest.BasicCSharp.TestEnum.Pets.Bird), "(Pets.Dog | Pets.Cat).HasFlag(Pets.Bird)");
                Bridge.Test.Assert.areEqual$1(true, System.Enum.hasFlag(Bridge.ClientTest.BasicCSharp.TestEnum.Pets.Dog, Bridge.ClientTest.BasicCSharp.TestEnum.Pets.Dog), "Pets.Dog.HasFlag(Pets.Dog)");
                Bridge.Test.Assert.areEqual$1(false, System.Enum.hasFlag(Bridge.ClientTest.BasicCSharp.TestEnum.Pets.Dog, Bridge.ClientTest.BasicCSharp.TestEnum.Pets.Cat), "Pets.Dog.HasFlag(Pets.Cat)");
            },
            testIsDefined: function () {
                Bridge.Test.Assert.areEqual$1(true, System.Enum.isDefined(Bridge.ClientTest.BasicCSharp.TestEnum.Pets, 1), "Enum.IsDefined(typeof(Pets), 1)");
                Bridge.Test.Assert.areEqual$1(false, System.Enum.isDefined(Bridge.ClientTest.BasicCSharp.TestEnum.Pets, 17), "Enum.IsDefined(typeof(Pets), 17)");
                Bridge.Test.Assert.areEqual$1(true, System.Enum.isDefined(Bridge.ClientTest.BasicCSharp.TestEnum.Pets, "Rabbit"), "Enum.IsDefined(typeof(Pets), \"Rabbit\")");
                Bridge.Test.Assert.areEqual$1(false, System.Enum.isDefined(Bridge.ClientTest.BasicCSharp.TestEnum.Pets, "Parrot"), "Enum.IsDefined(typeof(Pets), \"Parrot\")");
                Bridge.Test.Assert.areEqual$1(false, System.Enum.isDefined(Bridge.ClientTest.BasicCSharp.TestEnum.Pets, "RABBIT"), "Enum.IsDefined(typeof(Pets), \"RABBIT\")");
                Bridge.Test.Assert.areEqual$1(false, System.Enum.isDefined(Bridge.ClientTest.BasicCSharp.TestEnum.Pets, 3), "Enum.IsDefined(typeof(Pets), Pets.Dog | Pets.Cat)");
            },
            testTryParse: function () {
                var outVar = { v : new Bridge.ClientTest.BasicCSharp.TestEnum.Digits() };
                var outPets = { v : new Bridge.ClientTest.BasicCSharp.TestEnum.Pets() };
                Bridge.Test.Assert.areEqual$1(true, System.Enum.tryParse(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, "Zero", outVar), "TryParse Digits.Zero");
                Bridge.Test.Assert.areEqual(Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Zero, outVar.v);
                Bridge.Test.Assert.areEqual$1(true, System.Enum.tryParse(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, "One", outVar), "TryParse Digits.One");
                Bridge.Test.Assert.areEqual(Bridge.ClientTest.BasicCSharp.TestEnum.Digits.One, outVar.v);
                Bridge.Test.Assert.areEqual$1(true, System.Enum.tryParse(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, "Two", outVar), "TryParse Digits.Two");
                Bridge.Test.Assert.areEqual(Bridge.ClientTest.BasicCSharp.TestEnum.Digits.Two, outVar.v);
                Bridge.Test.Assert.areEqual$1(true, System.Enum.tryParse(Bridge.ClientTest.BasicCSharp.TestEnum.Pets, "Dog, Cat", outPets), "TryParse Dog, Cat");
                Bridge.Test.Assert.areEqual(3, outPets.v);
                Bridge.Test.Assert.areEqual$1(true, System.Enum.tryParse(Bridge.ClientTest.BasicCSharp.TestEnum.Pets, "Bird, Cat, Rabbit", outPets), "TryParse Bird, Cat, Rabbit");
                Bridge.Test.Assert.areEqual(14, outPets.v);
                Bridge.Test.Assert.areEqual$1(false, System.Enum.tryParse(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, "ONE", outVar), "TryParse ONE");
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.BasicCSharp.TestEnum", $_);
    
    Bridge.apply($_.Bridge.ClientTest.BasicCSharp.TestEnum, {
        f1: function () {
            var d = System.Enum.parse(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, "ONE");
        },
        f2: function () {
            var d = System.Enum.parse(Bridge.ClientTest.BasicCSharp.TestEnum.Digits, "ONN", true);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BasicCSharp.TestEnum.Abc', {
        statics: {
            A: -1,
            B: 0,
            C: 1
        },
        $enum: true
    });
    
    Bridge.define('Bridge.ClientTest.BasicCSharp.TestEnum.Digits', {
        statics: {
            Zero: 0,
            One: 1,
            Two: 2
        },
        $enum: true
    });
    
    Bridge.define('Bridge.ClientTest.BasicCSharp.TestEnum.Pets', {
        statics: {
            None: 0,
            Dog: 1,
            Cat: 2,
            Bird: 4,
            Rabbit: 8,
            Other: 16
        },
        $enum: true,
        $flags: true
    });
    
    Bridge.define('Bridge.ClientTest.BasicCSharp.TestEnum.Pets1', {
        statics: {
            None: 0,
            Dog: 1,
            Cat: 2,
            Bird: 4,
            Rabbit: 8,
            Other: 16
        },
        $enum: true
    });
    
    Bridge.define('Bridge.ClientTest.BasicCSharp.TestInheritance', {
        statics: {
            testA: function () {
                var a = new Bridge.ClientTest.BasicCSharp.TestInheritance.A(10);
    
                Bridge.Test.Assert.true$1(a != null, "Instance of A created");
                Bridge.Test.Assert.areEqual$1(10, a.getX(), "a.X = 10");
                Bridge.Test.Assert.areEqual$1(100, a.handleNumber(100), "a.HandleNumber(100) = 100");
                Bridge.Test.Assert.areEqual$1("Hundred", a.handleString("Hundred"), "a.HandleString('Hundred') = 'Hundred'");
            },
            testB: function () {
                var b = new Bridge.ClientTest.BasicCSharp.TestInheritance.B(10, 20);
    
                Bridge.Test.Assert.true$1(b != null, "Instance of B created");
                Bridge.Test.Assert.areEqual$1(10, b.getX(), "b.X = 10");
                Bridge.Test.Assert.areEqual$1(20, b.getY(), "b.Y = 20");
                Bridge.Test.Assert.areEqual$1(100, b.handleNumber$1(1), "b.HandleNumber(1) = 100");
                Bridge.Test.Assert.areEqual$1("Hundred", b.handleString("Hundred"), "b.HandleString('Hundred') = 'Hundred'");
            },
            testAB: function () {
                var b = new Bridge.ClientTest.BasicCSharp.TestInheritance.B(10, 20);
    
                Bridge.Test.Assert.true$1(b != null, "Instance of B created as A type");
                Bridge.Test.Assert.areEqual$1(10, b.getX(), "b.X = 10");
                Bridge.Test.Assert.areEqual$1(10, b.handleNumber(10), "b.HandleNumber(10) = 10");
                Bridge.Test.Assert.areEqual$1("Hundred", b.handleString("Hundred"), "b.HandleString('Hundred') = 'Hundred'");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BasicCSharp.TestInheritance.A', {
        config: {
            properties: {
                X: 0
            }
        },
        constructor: function (x) {
            this.setX(x);
        },
        handleNumber: function (i) {
            return i;
        },
        handleString: function (s) {
            return s;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BasicCSharp.TestInterfaces', {
        statics: {
            testInterfaceMethodAndProperty: function () {
                var a = new Bridge.ClientTest.BasicCSharp.TestInterfaces.A();
    
                Bridge.Test.Assert.true$1(a != null, "Instance of A created through ISimple interface");
                Bridge.Test.Assert.areEqual$1("A.ISimple", a.getString(), "a.GetString() = A.ISimple  through interface");
                Bridge.Test.Assert.areEqual$1(1, a.getData(), "a.Data = 1  through interface");
    
                var b = Bridge.as(a, Bridge.ClientTest.BasicCSharp.TestInterfaces.A);
                Bridge.Test.Assert.true$1(b != null, "Instance of ISimple as A");
                Bridge.Test.Assert.areEqual$1("A.ISimple", a.getString(), "a.GetString() = A.ISimple through instance");
                Bridge.Test.Assert.areEqual$1(1, a.getData(), "a.Data = 1 through instance");
            },
            testExplicitInterfaceMethodAndProperty: function () {
                var b = new Bridge.ClientTest.BasicCSharp.TestInterfaces.B();
                Bridge.Test.Assert.true$1(b != null, "Instance of B created through ISimple interface explicitly");
                Bridge.Test.Assert.areEqual$1("explicit B.ISimple", b.getString(), "b.GetString() = explicit B.ISimple");
                Bridge.Test.Assert.areEqual$1(2, b.getData(), "a.Data = 2");
            },
            testTwoInterfaces: function () {
                var c = new Bridge.ClientTest.BasicCSharp.TestInterfaces.C();
    
                Bridge.Test.Assert.true$1(c != null, "Instance of C created through ISimpleAsWell interface");
                Bridge.Test.Assert.areEqual$1("C.ISimpleAsWell", c.getStringAsWell(), "a.GetStringAsWell() = A.ISimple through instance");
                Bridge.Test.Assert.areEqual$1(4, c.getDataAsWell(), "c.DataAsWell = 4  through instance");
    
                var a = Bridge.as(c, Bridge.ClientTest.BasicCSharp.TestInterfaces.ISimple);
                Bridge.Test.Assert.true$1(a != null, "Instance of ISimple as C");
                Bridge.Test.Assert.areEqual$1("C.ISimple", a.getString(), "a.GetString() = C.ISimple  through interface");
                Bridge.Test.Assert.areEqual$1(3, a.getData(), "a.Data = 3 through interface");
    
                var b = Bridge.as(c, Bridge.ClientTest.BasicCSharp.TestInterfaces.ISimpleAsWell);
                Bridge.Test.Assert.true$1(b != null, "Instance of ISimpleAsWell as C");
                Bridge.Test.Assert.areEqual$1("C.ISimpleAsWell", b.getStringAsWell(), "b.GetStringAsWell() = C.ISimpleAsWell  through interface");
                Bridge.Test.Assert.areEqual$1(4, b.getDataAsWell(), "b.DataAsWell = 4 through interface");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BasicCSharp.TestInterfaces.ISimple', {
        $interface: true
    });
    
    Bridge.define('Bridge.ClientTest.BasicCSharp.TestInterfaces.ISimpleAsWell', {
        $interface: true
    });
    
    Bridge.define('Bridge.ClientTest.BasicCSharp.TestMethodParametersClass', {
        statics: {
            methodDefault: function (i) {
                if (i === void 0) { i = 5; }
                return i;
            },
            methodParams: function (n) {
                if (n === void 0) { n = []; }
                var sum = 0;
                for (var i = 0; i < n.length; i = (i + 1) | 0) {
                    sum = (sum + n[i]) | 0;
                }
    
                return sum;
            },
            test: function () {
                Bridge.Test.Assert.areEqual$1(5, Bridge.ClientTest.BasicCSharp.TestMethodParametersClass.methodDefault(), "Default parameter - 5");
                Bridge.Test.Assert.areEqual$1(10, Bridge.ClientTest.BasicCSharp.TestMethodParametersClass.methodDefault(10), "Default parameter - 10");
    
                Bridge.Test.Assert.areEqual$1(6, Bridge.ClientTest.BasicCSharp.TestMethodParametersClass.methodParams([1, 2, 3]), "params int[]");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BasicCSharp.TestOverloadInstanceMethods', {
        statics: {
            testInstance: function () {
                var i = new Bridge.ClientTest.BasicCSharp.TestOverloadInstanceMethods.Instance();
    
                Bridge.Test.Assert.true$1(i != null, "i created");
                Bridge.Test.Assert.areEqual$1("Foo(int x)", i.foo$2(1), "Instance Foo(int x)");
                Bridge.Test.Assert.areEqual$1("Foo(string s)", i.foo$5("string"), "Instance Foo(string s)");
                Bridge.Test.Assert.areEqual$1("Foo(double d)", i.foo(1.1), "Instance Foo(double d)");
                Bridge.Test.Assert.areEqual$1("Foo(int x, int y)", i.foo$4(1, 2), "Instance Foo(int x, int y)");
                Bridge.Test.Assert.areEqual$1("Foo(int x, double y)", i.foo$3(1, 1.1), "Instance Foo(int x, double y)");
                Bridge.Test.Assert.areEqual$1("Foo(double x, int y)", i.foo$1(1.1, 1), "Instance Foo(double x, int y)");
    
                Bridge.Test.Assert.areEqual$1(67, i.fooReturnType(1), "Instance char FooReturnType(int y)");
                Bridge.Test.Assert.areEqual$1("string FooReturnType(double d)", i.fooReturnType$1(1.1), "Instance string FooReturnType(double d)");
    
                Bridge.Test.Assert.areEqual$1("FooOptionalParameters(int x)", i.fooOptionalParameters(1), "Instance FooOptionalParameters(int x)");
                Bridge.Test.Assert.areEqual$1("FooOptionalParameters(int x, int y = 5)", i.fooOptionalParameters$1(1, 2), "Instance FooOptionalParameters(int x, int y = 5)");
    
                Bridge.Test.Assert.areEqual$1("FooMultipleOptionalParameters(int x, int y = 5)", i.fooMultipleOptionalParameters(1, 2), "Instance FooMultipleOptionalParameters(int x, int y = 5)");
                Bridge.Test.Assert.areEqual$1("FooMultipleOptionalParameters(int x, int y = 5, int z = 10)", i.fooMultipleOptionalParameters$1(1, 5, 2), "Instance FooMultipleOptionalParameters(int x, int y = 5, int z = 10)");
                Bridge.Test.Assert.areEqual$1("FooMultipleOptionalParameters(int x, int y = 5, int z = 10)", i.fooMultipleOptionalParameters$1(1, 2, 3), "Instance FooMultipleOptionalParameters(int x, int y = 5, int z = 10)");
                Bridge.Test.Assert.areEqual$1("FooMultipleOptionalParameters(int x, int y = 5, int z = 10)", i.fooMultipleOptionalParameters$1(1, 3, 2), "Instance FooMultipleOptionalParameters(int x, int y = 5, int z = 10)");
    
                Bridge.Test.Assert.areEqual$1("FooNamedArgument(int x)", i.fooNamedArgument$1(1), "Static FooNamedArgument(int x)");
                Bridge.Test.Assert.areEqual$1("FooNamedArgument(double d)", i.fooNamedArgument(1), "Static FooNamedArgument(double d)");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BasicCSharp.TestOverloadInstanceMethods.Instance', {
        foo$2: function (x) {
            return "Foo(int x)";
        },
        foo$5: function (s) {
            return "Foo(string s)";
        },
        foo: function (d) {
            return "Foo(double d)";
        },
        foo$4: function (x, y) {
            return "Foo(int x, int y)";
        },
        foo$3: function (x, y) {
            return "Foo(int x, double y)";
        },
        foo$1: function (x, y) {
            return "Foo(double x, int y)";
        },
        fooReturnType: function (x) {
            return 67;
        },
        fooReturnType$1: function (d) {
            return "string FooReturnType(double d)";
        },
        fooOptionalParameters$1: function (x, y) {
            if (y === void 0) { y = 5; }
            return "FooOptionalParameters(int x, int y = 5)";
        },
        fooOptionalParameters: function (x) {
            return "FooOptionalParameters(int x)";
        },
        fooMultipleOptionalParameters$1: function (x, y, z) {
            if (y === void 0) { y = 5; }
            if (z === void 0) { z = 10; }
            return "FooMultipleOptionalParameters(int x, int y = 5, int z = 10)";
        },
        fooMultipleOptionalParameters: function (x, y) {
            if (y === void 0) { y = 5; }
            return "FooMultipleOptionalParameters(int x, int y = 5)";
        },
        fooNamedArgument$1: function (x) {
            return "FooNamedArgument(int x)";
        },
        fooNamedArgument: function (d) {
            return "FooNamedArgument(double d)";
        }
    });
    
    Bridge.define('Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods', {
        statics: {
            testStatic: function () {
                Bridge.Test.Assert.areEqual$1("Foo(int x)", Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods.Static.foo$2(1), "Static Foo(int x)");
                Bridge.Test.Assert.areEqual$1("Foo(string s)", Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods.Static.foo$5("string"), "Static Foo(string s)");
                Bridge.Test.Assert.areEqual$1("Foo(double d)", Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods.Static.foo(1.1), "Static Foo(double d)");
                Bridge.Test.Assert.areEqual$1("Foo(int x, int y)", Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods.Static.foo$4(1, 2), "Static Foo(int x, int y)");
                Bridge.Test.Assert.areEqual$1("Foo(int x, double y)", Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods.Static.foo$3(1, 1.1), "Static Foo(int x, double y)");
                Bridge.Test.Assert.areEqual$1("Foo(double x, int y)", Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods.Static.foo$1(1.1, 1), "Static Foo(double x, int y)");
    
                Bridge.Test.Assert.areEqual$1(67, Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods.Static.fooReturnType(1), "Static char FooReturnType(int y)");
                Bridge.Test.Assert.areEqual$1("string FooReturnType(double d)", Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods.Static.fooReturnType$1(1.1), "Static string FooReturnType(double d)");
    
                Bridge.Test.Assert.areEqual$1("FooOptionalParameters(int x)", Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods.Static.fooOptionalParameters(1), "Static FooOptionalParameters(int x)");
                Bridge.Test.Assert.areEqual$1("FooOptionalParameters(int x, int y = 5)", Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods.Static.fooOptionalParameters$1(1, 2), "Static FooOptionalParameters(int x, int y = 5)");
    
                Bridge.Test.Assert.areEqual$1("FooMultipleOptionalParameters(int x, int y = 5)", Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods.Static.fooMultipleOptionalParameters(1, 2), "Static FooMultipleOptionalParameters(int x, int y = 5)");
                Bridge.Test.Assert.areEqual$1("FooMultipleOptionalParameters(int x, int y = 5, int z = 10)", Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods.Static.fooMultipleOptionalParameters$1(1, 5, 2), "Static FooMultipleOptionalParameters(int x, int y = 5, int z = 10)");
                Bridge.Test.Assert.areEqual$1("FooMultipleOptionalParameters(int x, int y = 5, int z = 10)", Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods.Static.fooMultipleOptionalParameters$1(1, 2, 3), "Static FooMultipleOptionalParameters(int x, int y = 5, int z = 10)");
                Bridge.Test.Assert.areEqual$1("FooMultipleOptionalParameters(int x, int y = 5, int z = 10)", Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods.Static.fooMultipleOptionalParameters$1(1, 3, 2), "Static FooMultipleOptionalParameters(int x, int y = 5, int z = 10)");
    
                Bridge.Test.Assert.areEqual$1("FooNamedArgument(int x)", Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods.Static.fooNamedArgument$1(1), "Static FooNamedArgument(int x)");
                Bridge.Test.Assert.areEqual$1("FooNamedArgument(double d)", Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods.Static.fooNamedArgument(1), "Static FooNamedArgument(double d)");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BasicCSharp.TestOverloadStaticMethods.Static', {
        statics: {
            foo$2: function (x) {
                return "Foo(int x)";
            },
            foo$5: function (s) {
                return "Foo(string s)";
            },
            foo: function (d) {
                return "Foo(double d)";
            },
            foo$4: function (x, y) {
                return "Foo(int x, int y)";
            },
            foo$3: function (x, y) {
                return "Foo(int x, double y)";
            },
            foo$1: function (x, y) {
                return "Foo(double x, int y)";
            },
            fooReturnType: function (x) {
                return 67;
            },
            fooReturnType$1: function (d) {
                return "string FooReturnType(double d)";
            },
            fooOptionalParameters$1: function (x, y) {
                if (y === void 0) { y = 5; }
                return "FooOptionalParameters(int x, int y = 5)";
            },
            fooOptionalParameters: function (x) {
                return "FooOptionalParameters(int x)";
            },
            fooMultipleOptionalParameters$1: function (x, y, z) {
                if (y === void 0) { y = 5; }
                if (z === void 0) { z = 10; }
                return "FooMultipleOptionalParameters(int x, int y = 5, int z = 10)";
            },
            fooMultipleOptionalParameters: function (x, y) {
                if (y === void 0) { y = 5; }
                return "FooMultipleOptionalParameters(int x, int y = 5)";
            },
            fooNamedArgument$1: function (x) {
                return "FooNamedArgument(int x)";
            },
            fooNamedArgument: function (d) {
                return "FooNamedArgument(double d)";
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BasicCSharp.TestReferenceTypes', {
        statics: {
            testInstanceConstructorsAndMethods: function () {
                // Check parameterless constructor
                var a = new Bridge.ClientTest.BasicCSharp.ClassA("constructor");
    
                // TEST
                Bridge.Test.Assert.areEqual$1(10, a.getNumberA(), "NumberA 10");
                Bridge.Test.Assert.areEqual$1("Str", a.getStringA(), "StringA Str");
                Bridge.Test.Assert.areEqual$1(true, a.getBoolA(), "BoolA true");
                Bridge.Test.Assert.true$1(a.getDoubleA() === Number.POSITIVE_INFINITY, "DoubleA Double.PositiveInfinity");
                Bridge.Test.Assert.areDeepEqual$1(System.Decimal(-1.0), a.getDecimalA(), "DecimalA Decimal.MinusOne");
                Bridge.Test.Assert.true$1(a.getData() != null, "Data not null");
                Bridge.Test.Assert.areEqual$1(700, a.getData().getNumber(), "Data.Number 700");
    
                // TEST
                // Check constructor with parameter
                Bridge.Test.Assert.throws$4(Bridge.ClientTest.BasicCSharp.TestSet1FailureHelper.testConstructor1Failure, "Related should not be null", "Related should not be null");
    
                // TEST
                // Check constructor with parameter
                Bridge.Test.Assert.throws$4(Bridge.ClientTest.BasicCSharp.TestSet1FailureHelper.testConstructor2Failure, "Should pass six parameters", "Should pass six parameters");
    
                a = new Bridge.ClientTest.BasicCSharp.ClassA("constructor$2", [150, "151", true, 1.53, System.Decimal(1.54), Bridge.merge(new Bridge.ClientTest.BasicCSharp.ClassA.Aux1(), {
                    setNumber: 155
                } )]);
    
                Bridge.Test.Assert.areEqual$1(150, a.getNumberA(), "NumberA 150");
                Bridge.Test.Assert.areEqual$1("151", a.getStringA(), "StringA 151");
                Bridge.Test.Assert.areEqual$1(true, a.getBoolA(), "BoolA true");
                Bridge.Test.Assert.areEqual$1(1.53, a.getDoubleA(), "DoubleA Double.PositiveInfinity");
                Bridge.Test.Assert.areDeepEqual$1(System.Decimal(1.54), a.getDecimalA(), "DecimalA 154");
                Bridge.Test.Assert.true$1(a.getData() != null, "Data not null");
                Bridge.Test.Assert.areEqual$1(155, a.getData().getNumber(), "Data.Number 155");
    
                // TEST
                // Check instance methods
                var b = a.method1();
    
                Bridge.Test.Assert.true$1(b != null, "b not null");
                Bridge.Test.Assert.areEqual$1(2, b.getNumber(), "b Number 2");
                Bridge.Test.Assert.true$1(b.getRelated() != null, "b.Related not null");
                Bridge.Test.Assert.areEqual$1(1, b.getRelated().getNumber(), "b.Related Number 1");
    
                a.setData(b);
                Bridge.Test.Assert.areEqual$1("2 Has related 1", a.method3(), "Method3 2 Has related 1");
                a.setData(null);
                Bridge.Test.Assert.areEqual$1("no data", a.method3(), "Method3 no data");
    
                // TEST
                // Check [#68]
                var c68 = new Bridge.ClientTest.BasicCSharp.Class68();
    
                Bridge.Test.Assert.areEqual$1(0, c68.x, "c68.x 0");
                Bridge.Test.Assert.areEqual$1(1, c68.y, "c68.y 1");
    
                // TEST
                // Check local vars do not get overridden by fields
                c68.test();
    
                Bridge.Test.Assert.areEqual$1(0, c68.x, "c68.x 0");
                Bridge.Test.Assert.areEqual$1(1, c68.y, "c68.y 1");
            },
            testStaticConstructorsAndMethods: function () {
                // TEST
                // Check static fields initialization
                Bridge.Test.Assert.areEqual$1(0, Bridge.ClientTest.BasicCSharp.ClassA.statitIntNotInitialized, "#74 StatitInt not initialized");
                Bridge.Test.Assert.areEqual$1(null, Bridge.ClientTest.BasicCSharp.ClassA.statitStringNotInitialized, "#74 StatitString not initialized");
                Bridge.Test.Assert.areEqual$1(81, Bridge.ClientTest.BasicCSharp.ClassA.CONST_CHAR, "#74 CONST_CHAR Q");
                Bridge.Test.Assert.areEqual$1(true, true, "#74 CONST_DECIMAL 3.123456789324324324m");
    
                // TEST
                // Check static constructor
                Bridge.Test.Assert.areEqual$1(-340, Bridge.ClientTest.BasicCSharp.ClassA.staticInt, "StatitInt initialized");
                Bridge.Test.Assert.areEqual$1("Defined string", Bridge.ClientTest.BasicCSharp.ClassA.staticString, "StatitString initialized");
    
                // TEST
                // Check static methods
                var a = Bridge.ClientTest.BasicCSharp.ClassA.staticMethod1(678, "ASD", Number.NaN);
    
                Bridge.Test.Assert.areEqual$1(678, Bridge.ClientTest.BasicCSharp.ClassA.statitIntNotInitialized, "StatitIntNotInitialized 678");
                Bridge.Test.Assert.areEqual$1("ASD", Bridge.ClientTest.BasicCSharp.ClassA.statitStringNotInitialized, "ClassA.StatitStringNotInitialized ASD");
                Bridge.Test.Assert.areDeepEqual$1(Number.NaN, a.getDoubleA(), "DoubleA double.NaN");
    
                a = Bridge.ClientTest.BasicCSharp.ClassA.staticMethod2([678, "QWE", 234]);
                Bridge.Test.Assert.areEqual$1(1678, Bridge.ClientTest.BasicCSharp.ClassA.statitIntNotInitialized, "StatitIntNotInitialized 1678");
                Bridge.Test.Assert.areEqual$1("QWE", Bridge.ClientTest.BasicCSharp.ClassA.statitStringNotInitialized, "ClassA.StatitStringNotInitialized QWE");
                Bridge.Test.Assert.areEqual$1(234, a.getDoubleA(), "DoubleA 234");
    
                Bridge.Test.Assert.throws$7(System.InvalidCastException, Bridge.ClientTest.BasicCSharp.TestSet1FailureHelper.staticMethod2Failure, "Cast exception should occur");
            },
            testMethodParameters: function () {
                // Check default parameters
                var ra = new Bridge.ClientTest.BasicCSharp.ClassA("constructor");
                var r = ra.method5(5);
    
                Bridge.Test.Assert.areEqual$1(5, r, "r 5");
                r = ra.method5(15);
                Bridge.Test.Assert.areEqual$1(15, r, "r 15");
                r = ra.method5$1(5, 6);
                Bridge.Test.Assert.areEqual$1(11, r, "r 11");
                r = ra.method5$1(-50, 6);
                Bridge.Test.Assert.areEqual$1(-44, r, "r -44");
    
                // Check referencing did not change data
                var a = new Bridge.ClientTest.BasicCSharp.ClassA("constructor");
                var b = a.method1();
                var c = b.getRelated();
    
                a.method2(b);
                Bridge.Test.Assert.true$1(b != null, "b not null");
                Bridge.Test.Assert.areEqual$1(2, b.getNumber(), "b Number 2");
                Bridge.Test.Assert.true$1(b.getRelated() != null, "b.Related not null");
                Bridge.Test.Assert.areEqual$1(2, b.getRelated().getNumber(), "b.Related Number 2");
    
                Bridge.Test.Assert.true$1(c != null, "c not null");
                Bridge.Test.Assert.areEqual$1(1, c.getNumber(), "c Number 1");
                Bridge.Test.Assert.true$1(c.getRelated() == null, "c.Related null");
    
                // Check value local parameter
                var input = 1;
                var result = a.method4(input, 4);
    
                Bridge.Test.Assert.areEqual$1(1, input, "input 1");
                Bridge.Test.Assert.areEqual$1(5, result, "result 5");
    
                // TEST
                // [#86]
                var di = Bridge.ClientTest.BasicCSharp.ClassA.getDefaultInt();
                Bridge.Test.Assert.areEqual$1(0, di, "di 0");
    
                // TEST
                // Check  "out parameter"
                // [#85]
                var i = { };
                var tryResult = Bridge.ClientTest.BasicCSharp.ClassA.tryParse("", i);
    
                Bridge.Test.Assert.true$1(tryResult, "tryResult");
                Bridge.Test.Assert.areEqual$1(3, i.v, "i 3");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BasicCSharp.TestSet1FailureHelper', {
        statics: {
            testConstructor1Failure: function () {
                new Bridge.ClientTest.BasicCSharp.ClassA("constructor$1", Bridge.cast(null, Bridge.ClientTest.BasicCSharp.ClassA.Aux1));
            },
            testConstructor2Failure: function () {
                var t = new Bridge.ClientTest.BasicCSharp.ClassA("constructor$2", System.Array.init(2, null));
            },
            staticMethod2Failure: function () {
                Bridge.ClientTest.BasicCSharp.ClassA.staticMethod2(["1", "some string", "345.345435"]);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks', {
        statics: {
            config: {
                properties: {
                    IsATry: false,
                    IsACatch: false,
                    IsBTry: false,
                    IsBCatch: false,
                    IsCTry: false,
                    IsCCatch: false,
                    IsDTry: false,
                    IsDCatch: false
                }
            },
            simpleTryCatch: function () {
                var result = Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.tryCatch("Good");
    
                Bridge.Test.Assert.areEqual$1("Good", result, "TryCatch() executes");
            },
            caughtExceptions: function () {
                Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.tryCatchWithCaughtException();
                Bridge.Test.Assert.true$1(true, "Exception catch");
    
                Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.tryCatchWithCaughtTypedException();
                Bridge.Test.Assert.true$1(true, "Typed exception catch");
    
                var exceptionMessage = Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.tryCatchWithCaughtArgumentException();
                Bridge.Test.Assert.areEqual$1("catch me", exceptionMessage, "Typed exception catch with exception message");
            },
            thrownExceptions: function () {
                // #230
                Bridge.Test.Assert.throws$4(Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.tryCatchWithNotCaughtTypedException, "catch me", "A.Typed exception is not Caught");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.getIsATry(), "A. exception not caught - try section called");
                Bridge.Test.Assert.true$1(!Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.getIsACatch(), "A. exception not caught - catch section not called");
    
                // #229
                Bridge.Test.Assert.throws$4(Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.tryCatchWithNotCaughtTypedExceptionAndArgument, "catch me", "[#229] B. Typed exception is not Caught; and argument");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.getIsBTry(), "[#229] B. exception not caught - try section called");
                Bridge.Test.Assert.true$1(!Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.getIsBCatch(), "B. exception not caught - catch section not called");
    
                // #231
                Bridge.Test.Assert.throws$4(Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.tryCatchWithRethrow, "catch me", "[#231] C. Rethrow");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.getIsCTry(), "C. exception caught and re-thrown - try section called");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.getIsCCatch(), "C. exception caught and re-thrown - catch section called");
    
                Bridge.Test.Assert.throws$2(Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.tryCatchWithRethrowEx, $_.Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.f1, "D. Rethrow with parameter");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.getIsDTry(), "D. exception caught and re-thrown  - try section called");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.getIsDCatch(), "D. exception caught and re-thrown  - catch section called");
            },
            bridge320: function () {
                var exceptionMessage = "";
    
                try {
                    "someString".SomeNotExistingMethod();
                }
                catch (ex) {
                    ex = System.Exception.create(ex);
                    exceptionMessage = ex.getMessage();
                }
    
                // var expectedMessage = Utilities.BrowserHelper.IsPhantomJs()
                //    ? "undefined is not a constructor (evaluating '\"someString\".SomeNotExistingMethod()')"
                //    : "\"someString\".SomeNotExistingMethod is not a function";
    
                Bridge.Test.Assert.true$1(System.String.contains(exceptionMessage,"SomeNotExistingMethod"), "ex.Message works on built-in JavaScript type");
            },
            bridge343: function () {
                var exceptionMessage = "";
    
                var i = 0;
    
                try {
                    var r = (Bridge.Int.div(10, i)) | 0;
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    var ex;
                    if (Bridge.is($e1, System.ArgumentException)) {
                    }
                    else {
                        ex = $e1;
                        exceptionMessage = ex.getMessage();
                    }
                }
    
                Bridge.Test.Assert.true$1(!System.String.isNullOrEmpty(exceptionMessage), "Double catch block with general Exception works");
            },
            tryCatch: function (s) {
                try {
                    return s;
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    return "";
                }
            },
            tryCatchWithCaughtException: function () {
                try {
                    throw new System.Exception();
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                }
            },
            tryCatchWithCaughtTypedException: function () {
                try {
                    throw new System.Exception();
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                }
            },
            tryCatchWithCaughtArgumentException: function () {
                try {
                    throw new System.ArgumentException("catch me");
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    var ex;
                    if (Bridge.is($e1, System.ArgumentException)) {
                        ex = $e1;
                        return ex.getMessage();
                    }
                    else {
                        throw $e1;
                    }
                }
            },
            tryCatchWithNotCaughtTypedException: function () {
                Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsATry(false);
                Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsACatch(false);
    
                try {
                    Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsATry(true);
                    throw new System.Exception("catch me");
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    if (Bridge.is($e1, System.ArgumentException)) {
                        Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsATry(true);
                    }
                    else {
                        throw $e1;
                    }
                }
    
                Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsATry(false);
            },
            tryCatchWithNotCaughtTypedExceptionAndArgument: function () {
                Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsBTry(false);
                Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsBCatch(false);
    
                try {
                    Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsBTry(true);
                    throw new System.Exception("catch me");
                    Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsBTry(false);
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    var ex;
                    if (Bridge.is($e1, System.InvalidCastException)) {
                        ex = $e1;
                        Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsBCatch(true);
                        var s = ex.getMessage();
                    }
                    else {
                        throw $e1;
                    }
                }
    
                Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsBTry(false);
            },
            tryCatchWithRethrow: function () {
                Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsCTry(false);
                Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsCCatch(false);
    
                try {
                    Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsCTry(true);
                    throw new System.InvalidOperationException("catch me");
                    Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsCTry(false);
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsCCatch(true);
                    throw $e1;
                }
    
                Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsCTry(false);
            },
            tryCatchWithRethrowEx: function () {
                Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsDTry(false);
                Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsDCatch(false);
    
                try {
                    Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsDTry(true);
                    throw new System.ArgumentException("catch me");
                    Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsDTry(false);
                }
                catch (ex) {
                    ex = System.Exception.create(ex);
                    Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsDCatch(true);
                    throw ex;
                }
    
                Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks.setIsDTry(false);
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks", $_);
    
    Bridge.apply($_.Bridge.ClientTest.BasicCSharp.TestTryCatchBlocks, {
        f1: function (error) {
            return Bridge.referenceEquals(error.toString(), "catch me");
        }
    });
    
    Bridge.define('Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks', {
        statics: {
            config: {
                properties: {
                    IsATry: false,
                    IsACatch: false,
                    IsAFinally: false,
                    IsBTry: false,
                    IsBCatch: false,
                    IsBFinally: false,
                    IsCTry: false,
                    IsCCatch: false,
                    IsCFinally: false,
                    IsDTry: false,
                    IsDCatch: false,
                    IsDFinally: false
                }
            },
            simpleTryCatchFinally: function () {
                var data = new Bridge.ClientTest.BasicCSharp.Data();
                Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.tryCatchFinally(data);
    
                Bridge.Test.Assert.areEqual$1(2, data.getCount(), "TryCatchFinally() executes");
            },
            caughtExceptions: function () {
                var data = new Bridge.ClientTest.BasicCSharp.Data();
                Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.tryCatchFinallyWithCaughtException(data);
    
                Bridge.Test.Assert.areEqual$1(7, data.getCount(), "Exception catch, Finally works");
    
                data = new Bridge.ClientTest.BasicCSharp.Data();
                Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.tryCatchFinallyWithCaughtTypedException(data);
    
                Bridge.Test.Assert.areEqual$1(7, data.getCount(), "Typed exception catch, Finally works");
    
                data = new Bridge.ClientTest.BasicCSharp.Data();
                var exceptionMessage = Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.tryCatchFinallyWithCaughtArgumentException(data);
    
                Bridge.Test.Assert.areEqual$1("catch me", exceptionMessage, "Typed exception catch with exception message");
                Bridge.Test.Assert.areEqual$1(7, data.getCount(), "Typed exception catch with exception message, Finally works");
            },
            thrownExceptions: function () {
                //#230
                Bridge.Test.Assert.throws$4(Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.tryCatchFinallyWithNotCaughtTypedException, "catch me", "A. Typed exception is not caught");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.getIsATry(), "A. exception not caught - try section called");
                Bridge.Test.Assert.true$1(!Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.getIsACatch(), "A. exception not caught - catch section not called");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.getIsAFinally(), "A. exception not caught - finally section called");
    
                //#229
                Bridge.Test.Assert.throws$4(Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.tryCatchWithNotCaughtTypedExceptionAndArgument, "catch me", "[#229] B. Typed exception is not caught; and argument");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.getIsBTry(), "B. exception not caught - try section called");
                Bridge.Test.Assert.true$1(!Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.getIsBCatch(), "B. exception not caught - catch section not called");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.getIsBFinally(), "B. exception not caught - finally section called");
    
                //#231
                Bridge.Test.Assert.throws$4(Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.tryCatchWithRethrow, "catch me", "[#231] C. Rethrow");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.getIsCTry(), "C. exception caught and re-thrown  - try section called");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.getIsCCatch(), "C. exception caught and re-thrown  - catch section called");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.getIsCFinally(), "C. exception caught and re-thrown  - finally section called");
    
                Bridge.Test.Assert.throws$2(Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.tryCatchWithRethrowEx, $_.Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.f1, "D. Rethrow with parameter");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.getIsDTry(), "D. exception caught and re-thrown  - try section called");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.getIsDCatch(), "D. exception caught and re-thrown  - catch section called");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.getIsDFinally(), "D. exception caught and re-thrown  - finally section called");
            },
            tryCatchFinally: function (data) {
                try {
                    data.setCount((data.getCount() + 1) | 0);
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                }
                finally {
                    data.setCount((data.getCount() + 1) | 0);
                }
            },
            tryCatchFinallyWithCaughtException: function (data) {
                try {
                    data.setCount((data.getCount() + 1) | 0);
                    throw new System.Exception();
                    data.setCount((data.getCount() - 1) | 0);
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    data.setCount((data.getCount() + 2) | 0);
                }
                finally {
                    data.setCount((data.getCount() + 4) | 0);
                }
            },
            tryCatchFinallyWithCaughtTypedException: function (data) {
                try {
                    data.setCount((data.getCount() + 1) | 0);
                    throw new System.Exception("catch me");
                    data.setCount((data.getCount() - 1) | 0);
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    data.setCount((data.getCount() + 2) | 0);
                }
                finally {
                    data.setCount((data.getCount() + 4) | 0);
                }
            },
            tryCatchFinallyWithCaughtArgumentException: function (data) {
                try {
                    data.setCount((data.getCount() + 1) | 0);
                    throw new System.ArgumentException("catch me");
                    data.setCount((data.getCount() - 1) | 0);
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    var ex;
                    if (Bridge.is($e1, System.ArgumentException)) {
                        ex = $e1;
                        data.setCount((data.getCount() + 2) | 0);
    
                        return ex.getMessage();
                    }
                    else {
                        throw $e1;
                    }
                }
                finally {
                    data.setCount((data.getCount() + 4) | 0);
                }
            },
            tryCatchFinallyWithNotCaughtTypedException: function () {
                Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsATry(false);
                Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsACatch(false);
                Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsAFinally(false);
    
                try {
                    Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsATry(true);
                    throw new System.Exception("catch me");
                    Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsATry(false);
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    if (Bridge.is($e1, System.ArgumentException)) {
                        Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsACatch(true);
                    }
                    else {
                        throw $e1;
                    }
                }
                finally {
                    Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsAFinally(true);
                }
            },
            tryCatchWithNotCaughtTypedExceptionAndArgument: function () {
                Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsBTry(false);
                Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsBCatch(false);
                Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsBFinally(false);
    
                try {
                    Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsBTry(true);
                    throw new System.Exception("catch me");
                    Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsBTry(false);
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    var ex;
                    if (Bridge.is($e1, System.InvalidCastException)) {
                        ex = $e1;
                        var s = ex.getMessage();
                        Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsBCatch(true);
                    }
                    else {
                        throw $e1;
                    }
                }
                finally {
                    Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsBFinally(true);
                }
            },
            tryCatchWithRethrow: function () {
                Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsCTry(false);
                Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsCCatch(false);
                Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsCFinally(false);
    
                try {
                    Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsCTry(true);
                    throw new System.InvalidOperationException("catch me");
                    Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsCTry(false);
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsCCatch(true);
                    throw $e1;
                }
                finally {
                    Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsCFinally(true);
                }
            },
            tryCatchWithRethrowEx: function () {
                Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsDTry(false);
                Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsDCatch(false);
                Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsDFinally(false);
    
                try {
                    Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsDTry(true);
                    throw new System.ArgumentException("catch me");
                    Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsDTry(false);
                }
                catch (ex) {
                    ex = System.Exception.create(ex);
                    Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsDCatch(true);
                    throw ex;
                }
                finally {
                    Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks.setIsDFinally(true);
                }
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks", $_);
    
    Bridge.apply($_.Bridge.ClientTest.BasicCSharp.TestTryCatchFinallyBlocks, {
        f1: function (error) {
            return Bridge.referenceEquals(error.toString(), "catch me");
        }
    });
    
    Bridge.define('Bridge.ClientTest.BasicCSharp.TestValueTypes', {
        statics: {
            testInstanceConstructorsAndMethods: function () {
                // Check parameterless constructor
                var a = new Bridge.ClientTest.BasicCSharp.Point();
    
                Bridge.Test.Assert.areEqual$1(0, a.x, "x 0");
                Bridge.Test.Assert.areEqual$1(0, a.y, "y 0");
    
                var r = new Bridge.ClientTest.BasicCSharp.Rectangle("constructor");
    
                Bridge.Test.Assert.areEqual$1(0, r.l.x, "r.l.x 0");
                Bridge.Test.Assert.areEqual$1(0, r.l.y, "r.l.y 0");
                Bridge.Test.Assert.areEqual$1(0, r.t.x, "r.t.x 0");
                Bridge.Test.Assert.areEqual$1(0, r.t.y, "r.t.y 0");
    
                r = new Bridge.ClientTest.BasicCSharp.Rectangle("constructor$1", 10, 20);
    
                Bridge.Test.Assert.areEqual$1(10, r.l.x, "r.l.x 10");
                Bridge.Test.Assert.areEqual$1(20, r.l.y, "r.l.y 20");
                Bridge.Test.Assert.areEqual$1(0, r.t.x, "r.t.x 0");
                Bridge.Test.Assert.areEqual$1(0, r.t.y, "r.t.y 0");
    
                r = new Bridge.ClientTest.BasicCSharp.Rectangle("constructor$2", 30, 40, 50, 60);
    
                Bridge.Test.Assert.areEqual$1(30, r.l.x, "r.l.x 30");
                Bridge.Test.Assert.areEqual$1(40, r.l.y, "r.l.y 40");
                Bridge.Test.Assert.areEqual$1(50, r.t.x, "r.t.x 50");
                Bridge.Test.Assert.areEqual$1(60, r.t.y, "r.t.y 60");
    
                var i = a.test1();
    
                Bridge.Test.Assert.areEqual$1(500, i, "i 500");
                a.x = 300;
                i = a.test1();
                Bridge.Test.Assert.areEqual$1(800, i, "i 800");
    
                a.y = 400;
    
                var b = Bridge.merge(new Bridge.ClientTest.BasicCSharp.Point(), {
                    x: 5,
                    y: 7
                } );
                var c = b.test2(a.$clone()).$clone();
    
                Bridge.Test.Assert.areEqual$1(305, c.x, "c.x 305");
                Bridge.Test.Assert.areEqual$1(407, c.y, "c.y 407");
            },
            testStaticConstructorsAndMethods: function () {
                Bridge.Test.Assert.areEqual$1(500, Bridge.ClientTest.BasicCSharp.Point.staticInt, "Point.StaticInt 500");
                Bridge.Test.Assert.areEqual$1("Initialized", Bridge.ClientTest.BasicCSharp.Point.staticString, "Point.StaticString Initialized");
                Bridge.Test.Assert.areEqual$1(0, Bridge.ClientTest.BasicCSharp.Point.statitIntNotInitialized, "Point.StatitIntNotInitialized 0");
                Bridge.Test.Assert.areEqual$1(null, Bridge.ClientTest.BasicCSharp.Point.statitStringNotInitialized, "Point.StatitStringNotInitialized null");
                Bridge.Test.Assert.areEqual$1(87, Bridge.ClientTest.BasicCSharp.Point.CONST_CHAR, "Point.CONST_CHAR W");
    
                Bridge.ClientTest.BasicCSharp.Point.statitIntNotInitialized = -1;
                Bridge.Test.Assert.areEqual$1(-1, Bridge.ClientTest.BasicCSharp.Point.statitIntNotInitialized, "Point.StatitIntNotInitialized -1");
    
                var i = Bridge.ClientTest.BasicCSharp.Point.test3();
                Bridge.Test.Assert.areEqual$1(499, i, "i 499");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BasicCSharp.TestVirtualMethods', {
        statics: {
            testB: function () {
                var a = new Bridge.ClientTest.BasicCSharp.TestVirtualMethods.A();
    
                Bridge.Test.Assert.true$1(a != null, "Instance of A created");
                Bridge.Test.Assert.areEqual$1("A", a.test(), "a.Test() = 'A'");
    
                var b = new Bridge.ClientTest.BasicCSharp.TestVirtualMethods.B();
    
                Bridge.Test.Assert.true$1(b != null, "Instance of B created");
                Bridge.Test.Assert.areEqual$1("B", b.test(), "b.Test() = 'B'");
                Bridge.Test.Assert.areEqual$1("A", b.testA(), "b.TestA() = 'A'");
    
                var c = new Bridge.ClientTest.BasicCSharp.TestVirtualMethods.B();
    
                Bridge.Test.Assert.true$1(c != null, "Instance of C created");
                Bridge.Test.Assert.areEqual$1("B", c.test(), "c.Test() = 'B'");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BasicCSharp.TestVirtualMethods.A', {
        test: function () {
            return "A";
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge069', {
        statics: {
            thisKeywordInStructConstructorWorks: function () {
                var p = new Bridge.ClientTest.BridgeIssues.Bridge069.Point69("constructor$1", 10);
                Bridge.Test.Assert.areEqual(10, p.y);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge069.Point69', {
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge069.Point69(); }
        },
        x: 0,
        y: 0,
        constructor$1: function (y1) {
            (new Bridge.ClientTest.BridgeIssues.Bridge069.Point69("constructor")).$clone(this);
            this.y = y1;
        },
        constructor: function () {
        },
        $struct: true,
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 1643959563;
            hash = hash * 23 + (this.x == null ? 0 : Bridge.getHashCode(this.x));
            hash = hash * 23 + (this.y == null ? 0 : Bridge.getHashCode(this.y));
            return hash;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.BridgeIssues.Bridge069.Point69)) {
                return false;
            }
            return Bridge.equals(this.x, o.x) && Bridge.equals(this.y, o.y);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.BridgeIssues.Bridge069.Point69();
            s.x = this.x;
            s.y = this.y;
            return s;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1000', {
        statics: {
            testStaticViaChild: function () {
                Bridge.Test.Assert.areEqual("Test", Bridge.ClientTest.BridgeIssues.Bridge1000.TestFixture$1(Object).run());
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1000.TestFixture$1', function (T) { return {
        statics: {
            run: function () {
                return "Test";
            }
        }
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1001', {
        statics: {
            testDefaultValues: function () {
                Bridge.Test.Assert.areEqual(2, Bridge.ClientTest.BridgeIssues.Bridge1001.Control.test);
                Bridge.Test.Assert.areEqual(2, Bridge.ClientTest.BridgeIssues.Bridge1001.Globals.myVar);
                Bridge.Test.Assert.areEqual(0, Bridge.ClientTest.BridgeIssues.Bridge1001.Globals.myVar1);
                Bridge.Test.Assert.areEqual(0, Bridge.ClientTest.BridgeIssues.Bridge1001.Globals.myVar2);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1001.Control', {
        statics: {
            test: 0,
            config: {
                init: function () {
                    this.test = Bridge.ClientTest.BridgeIssues.Bridge1001.Globals.myVar;
                }
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1001.Globals', {
        statics: {
            myVar: 2,
            myVar1: 0,
            myVar2: 0,
            myTextBox: null,
            config: {
                init: function () {
                    this.myVar1 = Bridge.ClientTest.BridgeIssues.Bridge1001.Control.test;
                    this.myVar2 = Bridge.ClientTest.BridgeIssues.Bridge1001.Globals.myVar1;
                }
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1003', {
        statics: {
            testGenericLambdasToLifting: function () {
                var test = new Bridge.ClientTest.BridgeIssues.Bridge1003$1(System.Int32)();
    
                var scope = $_.Bridge.ClientTest.BridgeIssues.Bridge1003$1;
                Bridge.Test.Assert.null(scope);
                Bridge.Test.Assert.areEqual(test.test1([1, 2, 3]), [1, 2, 3]);
                Bridge.Test.Assert.areEqual(test.test2(String, ["1", "2", "3"]), ["1", "2", "3"]);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1003$1', function (T) { return {
        test1: function (list) {
            return System.Linq.Enumerable.from(list).select(function (item) {
                return Bridge.cast(item, T);
            }).toArray();
        },
        test2: function (T1, list) {
            return System.Linq.Enumerable.from(list).select(function (item) {
                return Bridge.cast(item, T1);
            }).toArray();
        }
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1012', {
        statics: {
            DELTA: 3,
            testSleepZero: function () {
                var delay = 0;
                var maxDelay = 100;
    
                var stopwatch = new System.Diagnostics.Stopwatch();
                stopwatch.start();
    
                Bridge.sleep(delay);
    
                stopwatch.stop();
    
                Bridge.Test.Assert.true$1(stopwatch.milliseconds().gte(System.Int64(delay - Bridge.ClientTest.BridgeIssues.Bridge1012.DELTA)), ">= " + delay + ", elapsed " + stopwatch.milliseconds());
                Bridge.Test.Assert.true$1(stopwatch.milliseconds().lt(System.Int64(maxDelay)), "< " + maxDelay + ", elapsed " + stopwatch.milliseconds());
            },
            testSleepInt: function () {
                var delay = 100;
                var maxDelay = 200;
    
                var stopwatch = new System.Diagnostics.Stopwatch();
                stopwatch.start();
    
                Bridge.sleep(delay);
    
                stopwatch.stop();
    
                Bridge.Test.Assert.true$1(stopwatch.milliseconds().gte(System.Int64(delay - Bridge.ClientTest.BridgeIssues.Bridge1012.DELTA)), ">= " + delay + ", elapsed " + stopwatch.milliseconds());
                Bridge.Test.Assert.true$1(stopwatch.milliseconds().lt(System.Int64(maxDelay)), "< " + maxDelay + ", elapsed " + stopwatch.milliseconds());
            },
            testSleepTimeSpan: function () {
                var delay = 100;
                var maxDelay = 200;
    
                var stopwatch = new System.Diagnostics.Stopwatch();
                stopwatch.start();
    
                Bridge.sleep(null, System.TimeSpan.fromMilliseconds(delay));
    
                stopwatch.stop();
    
                Bridge.Test.Assert.true$1(stopwatch.milliseconds().gte(System.Int64(delay - Bridge.ClientTest.BridgeIssues.Bridge1012.DELTA)), ">= " + delay + ", elapsed " + stopwatch.milliseconds());
                Bridge.Test.Assert.true$1(stopwatch.milliseconds().lt(System.Int64(maxDelay)), "< " + maxDelay + ", elapsed " + stopwatch.milliseconds());
            },
            testSleepThrows: function () {
                Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, $_.Bridge.ClientTest.BridgeIssues.Bridge1012.f1, "-2");
                Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, $_.Bridge.ClientTest.BridgeIssues.Bridge1012.f2, "FromMilliseconds(-2)");
                Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, $_.Bridge.ClientTest.BridgeIssues.Bridge1012.f3, "(long)int.MaxValue + 1");
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.BridgeIssues.Bridge1012", $_);
    
    Bridge.apply($_.Bridge.ClientTest.BridgeIssues.Bridge1012, {
        f1: function () {
            Bridge.sleep(-2);
        },
        f2: function () {
            Bridge.sleep(null, System.TimeSpan.fromMilliseconds(-2));
        },
        f3: function () {
            Bridge.sleep(null, System.TimeSpan.fromMilliseconds(System.Int64([-2147483648,0])));
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1020', {
        statics: {
            testFlagEnumWithReference: function () {
                Bridge.Test.Assert.areEqual(Bridge.ClientTest.BridgeIssues.Bridge1020.TestEnum.FlagAlias, 1);
            },
            testEnumWithReference: function () {
                Bridge.Test.Assert.areEqual(Bridge.ClientTest.BridgeIssues.Bridge1020.CommonEnum.FlagAlias, 2);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1020.CommonEnum', {
        statics: {
            None: 0,
            Flag: 2,
            FlagAlias: 2
        },
        $enum: true
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1020.TestEnum', {
        statics: {
            None: 0,
            Flag: 1,
            FlagAlias: 1
        },
        $enum: true,
        $flags: true
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1024', {
        statics: {
            testConstructorOptionalParameter: function () {
                var obj = new Bridge.ClientTest.BridgeIssues.Bridge1024.ClassB();
                Bridge.Test.Assert.areEqual("classB", obj.getFieldA());
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1024.ClassC', {
        a: null,
        constructor: function (b) {
            this.a = b;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1026', {
        statics: {
            testReservedWordIfRefOut: function () {
                var $function = { };
                var i = { v : 1 };
                Bridge.ClientTest.BridgeIssues.Bridge1026.testFunction(i, $function);
                Bridge.Test.Assert.areEqual(2, i.v);
                Bridge.Test.Assert.areEqual("1", $function.v);
    
                var res = Bridge.ClientTest.BridgeIssues.Bridge1026.function($function.v);
                Bridge.Test.Assert.areEqual("11", res);
            },
            testFunction: function (i, $function) {
                $function.v = i.v.toString();
                i.v = (i.v + 1) | 0;
            },
            function: function ($function) {
                return $function + "1";
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1027', {
        statics: {
            testNonBridgeInherits: function () {
                var obj = new Bridge.ClientTest.BridgeIssues.Bridge1027.MyClass(11);
                Bridge.Test.Assert.areEqual(11, obj.number);
                Bridge.Test.Assert.areEqual(2, obj.foo());
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1027.MyClass', {
        inherits: [SomeExternalNamespace.SomeNonBridgeClass],
        number: 0,
        constructor: function (n) {
            this.number = n;
        },
        foo: function () {
            var r = SomeExternalNamespace.SomeNonBridgeClass.prototype.foo.call(this);
    
            return ((r + 1) | 0);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1029', {
        statics: {
            testNullableMethods: function () {
                var a = 1;
                var b = 1;
                Bridge.Test.Assert.true(System.Nullable.equals(a, b, function ($t, other) { return $t === other; }));
                Bridge.Test.Assert.areEqual("1", System.Nullable.toString(a));
                Bridge.Test.Assert.areEqual(1, System.Nullable.getHashCode(a));
                a = null;
                Bridge.Test.Assert.false(System.Nullable.equals(a, b, function ($t, other) { return $t === other; }));
                Bridge.Test.Assert.areEqual("", System.Nullable.toString(a));
                Bridge.Test.Assert.areEqual(0, System.Nullable.getHashCode(a));
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1039', {
        statics: {
            testMoreThanDecimalDigitsFromTotalHours: function () {
                var a = new Date(2015, 1 - 1, 1, 9);
                var b = new Date(2015, 1 - 1, 1, 12, 52);
    
                var value = System.Decimal(((Bridge.Date.subdd(b, a)).getTotalHours()));
    
                Bridge.Test.Assert.areEqual("3.866666666666667", Bridge.Int.format(value, 'G'));
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1041');
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal', {
        statics: {
            config: {
                properties: {
                    Prop1: System.Decimal(0.0)
                }
            },
            testPropertyOps: function () {
                var $t, $t1, $t2;
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.setProp1(System.Decimal(5.0));
    
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.setProp1(Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.getProp1().div(System.Decimal(2)));
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(2.5), Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.getProp1());
    
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.setProp1(Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.getProp1().add(System.Decimal(2)));
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(4.5), Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.getProp1());
    
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.setProp1(Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.getProp1().inc());
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(5.5), Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.getProp1());
    
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.setProp1(Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.getProp1().inc());
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(6.5), Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.getProp1());
    
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(3.25), Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.method(($t = Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.getProp1().div(System.Decimal(2)), Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.setProp1($t), $t)));
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(3.25), Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.getProp1());
    
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(4.25), Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.method(($t1 = Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.getProp1().add(System.Decimal(1)), Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.setProp1($t1), $t1)));
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(4.25), Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.getProp1());
    
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(4.25), Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.method(($t2 = Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.getProp1(), Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.setProp1($t2.inc()), $t2)));
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(5.25), Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.getProp1());
    
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(6.25), Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.method(($t2 = Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.getProp1(), Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.setProp1($t2.inc()), Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.getProp1())));
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(6.25), Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.getProp1());
            },
            testIndexerOps: function () {
                var $t, $t1, $t2;
                var app = new Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal();
                app.setItem(0, System.Decimal(5.0));
    
                app.setItem(0, app.getItem(0).div(System.Decimal(2)));
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(2.5), app.getItem(0));
    
                app.setItem(0, app.getItem(0).add(System.Decimal(2)));
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(4.5), app.getItem(0));
    
                app.setItem(0, app.getItem(0).inc());
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(5.5), app.getItem(0));
    
                app.setItem(0, app.getItem(0).inc());
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(6.5), app.getItem(0));
    
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(3.25), Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.method(($t = app.getItem(0).div(System.Decimal(2)), app.setItem(0, $t), $t)));
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(3.25), app.getItem(0));
    
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(4.25), Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.method(($t1 = app.getItem(0).add(System.Decimal(1)), app.setItem(0, $t1), $t1)));
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(4.25), app.getItem(0));
    
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(4.25), Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.method(($t2 = app.getItem(0), app.setItem(0, $t2.inc()), $t2)));
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(5.25), app.getItem(0));
    
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(6.25), Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.method(($t2 = app.getItem(0), app.setItem(0, $t2.inc()), app.getItem(0))));
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(6.25), app.getItem(0));
            },
            testDictOps: function () {
                var $t, $t1, $t2;
                var dict = Bridge.merge(new System.Collections.Generic.Dictionary$2(System.Int32,System.Decimal)(), [
                    [0, System.Decimal(5.0)]
                ] );
    
                dict.set(0, dict.get(0).div(System.Decimal(2)));
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(2.5), dict.get(0));
    
                dict.set(0, dict.get(0).add(System.Decimal(2)));
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(4.5), dict.get(0));
    
                dict.set(0, dict.get(0).inc());
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(5.5), dict.get(0));
    
                dict.set(0, dict.get(0).inc());
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(6.5), dict.get(0));
    
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(3.25), Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.method(($t = dict.get(0).div(System.Decimal(2)), dict.set(0, $t), $t)));
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(3.25), dict.get(0));
    
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(4.25), Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.method(($t1 = dict.get(0).add(System.Decimal(1)), dict.set(0, $t1), $t1)));
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(4.25), dict.get(0));
    
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(4.25), Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.method(($t2 = dict.get(0), dict.set(0, $t2.inc()), $t2)));
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(5.25), dict.get(0));
    
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(6.25), Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.method(($t2 = dict.get(0), dict.set(0, $t2.inc()), dict.get(0))));
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(6.25), dict.get(0));
            },
            testVariableOps: function () {
                var $t;
                var i1 = System.Decimal(5);
    
                i1 = i1.div(System.Decimal(2));
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(2.5), i1);
    
                i1 = i1.add(System.Decimal(2));
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(4.5), i1);
    
                i1 = i1.inc();
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(5.5), i1);
    
                i1 = i1.inc();
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(6.5), i1);
    
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(3.25), Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.method((i1 = i1.div(System.Decimal(2)))));
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(3.25), i1);
    
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(4.25), Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.method((i1 = i1.add(System.Decimal(1)))));
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(4.25), i1);
    
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(4.25), Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.method(($t = i1, i1 = i1.inc(), $t)));
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(5.25), i1);
    
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(6.25), Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.method((i1 = i1.inc())));
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Decimal.assertIsDecimalAndEqualTo(System.Decimal(6.25), i1);
            },
            method: function (i) {
                return i;
            },
            assertIsDecimalAndEqualTo: function (expected, actual, message) {
                if (message === void 0) { message = null; }
                Bridge.Test.Assert.true$1(Bridge.is(expected, System.Decimal), message);
                Bridge.Test.Assert.areStrictEqual$1(expected.toString(), actual.toString(), message);
            }
        },
        dict: null,
        config: {
            init: function () {
                this.dict = new System.Collections.Generic.Dictionary$2(System.Int32,System.Decimal)();
            }
        },
        getItem: function (i) {
            return this.dict.get(i);
        },
        setItem: function (i, value) {
            this.dict.set(i, value);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer', {
        statics: {
            config: {
                properties: {
                    Prop1: 0
                }
            },
            testPropertyOps: function () {
                var $t, $t1, $t2, $t3;
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.setProp1(5);
    
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.setProp1((Bridge.Int.div(Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.getProp1(), 2)) | 0);
                Bridge.Test.Assert.areEqual(2, Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.getProp1());
    
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.setProp1((Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.getProp1() + 2) | 0);
                Bridge.Test.Assert.areEqual(4, Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.getProp1());
    
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.setProp1((Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.getProp1() + 1) | 0);
                Bridge.Test.Assert.areEqual(5, Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.getProp1());
    
                Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.setProp1((Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.getProp1() + 1) | 0);
                Bridge.Test.Assert.areEqual(6, Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.getProp1());
    
                Bridge.Test.Assert.areEqual(3, Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.method(($t = (Bridge.Int.div(Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.getProp1(), 2)) | 0, Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.setProp1($t), $t)));
                Bridge.Test.Assert.areEqual(3, Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.getProp1());
    
                Bridge.Test.Assert.areEqual(4, Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.method(($t1 = (Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.getProp1() + 1) | 0, Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.setProp1($t1), $t1)));
                Bridge.Test.Assert.areEqual(4, Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.getProp1());
    
                Bridge.Test.Assert.areEqual(4, Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.method(Bridge.identity(Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.getProp1(), ($t2 = (Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.getProp1() + 1) | 0, Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.setProp1($t2), $t2))));
                Bridge.Test.Assert.areEqual(5, Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.getProp1());
    
                Bridge.Test.Assert.areEqual(6, Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.method((($t3 = (Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.getProp1() + 1) | 0, Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.setProp1($t3), $t3))));
                Bridge.Test.Assert.areEqual(6, Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.getProp1());
            },
            testIndexerOps: function () {
                var $t, $t1, $t2, $t3;
                var app = new Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer();
                app.setItem(0, 5);
    
                app.setItem(0, (Bridge.Int.div(app.getItem(0), 2)) | 0);
                Bridge.Test.Assert.areEqual(2, app.getItem(0));
    
                app.setItem(0, (app.getItem(0) + 2) | 0);
                Bridge.Test.Assert.areEqual(4, app.getItem(0));
    
                app.setItem(0, (app.getItem(0) + 1) | 0);
                Bridge.Test.Assert.areEqual(5, app.getItem(0));
    
                app.setItem(0, (app.getItem(0) + 1) | 0);
                Bridge.Test.Assert.areEqual(6, app.getItem(0));
    
                Bridge.Test.Assert.areEqual(3, Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.method(($t = (Bridge.Int.div(app.getItem(0), 2)) | 0, app.setItem(0, $t), $t)));
                Bridge.Test.Assert.areEqual(3, app.getItem(0));
    
                Bridge.Test.Assert.areEqual(4, Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.method(($t1 = (app.getItem(0) + 1) | 0, app.setItem(0, $t1), $t1)));
                Bridge.Test.Assert.areEqual(4, app.getItem(0));
    
                Bridge.Test.Assert.areEqual(4, Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.method(Bridge.identity(app.getItem(0), ($t2 = (app.getItem(0) + 1) | 0, app.setItem(0, $t2), $t2))));
                Bridge.Test.Assert.areEqual(5, app.getItem(0));
    
                Bridge.Test.Assert.areEqual(6, Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.method((($t3 = (app.getItem(0) + 1) | 0, app.setItem(0, $t3), $t3))));
                Bridge.Test.Assert.areEqual(6, app.getItem(0));
            },
            testDictOps: function () {
                var $t, $t1, $t2, $t3;
                var dict = Bridge.merge(new System.Collections.Generic.Dictionary$2(System.Int32,System.Int32)(), [
                    [0, 5]
                ] );
    
                dict.set(0, (Bridge.Int.div(dict.get(0), 2)) | 0);
                Bridge.Test.Assert.areEqual(2, dict.get(0));
    
                dict.set(0, (dict.get(0) + 2) | 0);
                Bridge.Test.Assert.areEqual(4, dict.get(0));
    
                dict.set(0, (dict.get(0) + 1) | 0);
                Bridge.Test.Assert.areEqual(5, dict.get(0));
    
                dict.set(0, (dict.get(0) + 1) | 0);
                Bridge.Test.Assert.areEqual(6, dict.get(0));
    
                Bridge.Test.Assert.areEqual(3, Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.method(($t = (Bridge.Int.div(dict.get(0), 2)) | 0, dict.set(0, $t), $t)));
                Bridge.Test.Assert.areEqual(3, dict.get(0));
    
                Bridge.Test.Assert.areEqual(4, Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.method(($t1 = (dict.get(0) + 1) | 0, dict.set(0, $t1), $t1)));
                Bridge.Test.Assert.areEqual(4, dict.get(0));
    
                Bridge.Test.Assert.areEqual(4, Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.method(Bridge.identity(dict.get(0), ($t2 = (dict.get(0) + 1) | 0, dict.set(0, $t2), $t2))));
                Bridge.Test.Assert.areEqual(5, dict.get(0));
    
                Bridge.Test.Assert.areEqual(6, Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.method((($t3 = (dict.get(0) + 1) | 0, dict.set(0, $t3), $t3))));
                Bridge.Test.Assert.areEqual(6, dict.get(0));
            },
            testVariableOps: function () {
                var i1 = 5;
    
                i1 = (Bridge.Int.div(i1, 2)) | 0;
                Bridge.Test.Assert.areEqual(2, i1);
    
                i1 = (i1 + 2) | 0;
                Bridge.Test.Assert.areEqual(4, i1);
    
                i1 = (i1 + 1) | 0;
                Bridge.Test.Assert.areEqual(5, i1);
    
                i1 = (i1 + 1) | 0;
                Bridge.Test.Assert.areEqual(6, i1);
    
                Bridge.Test.Assert.areEqual(3, Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.method((i1 = (Bridge.Int.div(i1, 2)) | 0)));
                Bridge.Test.Assert.areEqual(3, i1);
    
                Bridge.Test.Assert.areEqual(4, Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.method((i1 = (i1 + 1) | 0)));
                Bridge.Test.Assert.areEqual(4, i1);
    
                Bridge.Test.Assert.areEqual(4, Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.method(Bridge.identity(i1, (i1 = (i1 + 1) | 0))));
                Bridge.Test.Assert.areEqual(5, i1);
    
                Bridge.Test.Assert.areEqual(6, Bridge.ClientTest.BridgeIssues.Bridge1041.Bridge1041Integer.method(((i1 = (i1 + 1) | 0))));
                Bridge.Test.Assert.areEqual(6, i1);
            },
            method: function (i) {
                return i;
            }
        },
        dict: null,
        config: {
            init: function () {
                this.dict = new System.Collections.Generic.Dictionary$2(System.Int32,System.Int32)();
            }
        },
        getItem: function (i) {
            return this.dict.get(i);
        },
        setItem: function (i, value) {
            this.dict.set(i, value);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1051', {
        statics: {
            testInlinePopertyWithValue: function () {
                var Foo = function(){this.currentBar = false; this.setBar = function(value){this.currentBar = value;};};
    
                var foo = new Foo();
                foo.setBar(true);
                var baz = foo.currentBar;
                Bridge.Test.Assert.areEqual(true, baz);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1053', {
        statics: {
            testFieldPropertyWithInterface: function () {
                var Foo = function(){this.bar = null;};
                var foo = new Foo();
                var car = foo;
                foo.bar = "1";
                Bridge.Test.Assert.areEqual("1", foo.bar);
                Bridge.Test.Assert.areEqual("1", foo.bar);
                Bridge.Test.Assert.areEqual("1", car.bar);
                Bridge.Test.Assert.areEqual("1", car.bar);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1058', {
        statics: {
            testNameTrue: function () {
                Bridge.Test.Assert.areEqual("Bridge.ClientTest.BridgeIssues.Bridge1058.overlayType", Bridge.getTypeName(Bridge.ClientTest.BridgeIssues.Bridge1058.overlayType));
                Bridge.Test.Assert.areEqual("$Bridge1058.Bridge1058.class1", Bridge.getTypeName($Bridge1058.Bridge1058.class1));
                Bridge.Test.Assert.areEqual("Bridge1058.class2", Bridge.getTypeName(Bridge1058.class2));
            },
            testNameFales: function () {
                Bridge.Test.Assert.areEqual("Bridge.ClientTest.BridgeIssues.Bridge1058.OverlayType_B", Bridge.getTypeName(Bridge.ClientTest.BridgeIssues.Bridge1058.OverlayType_B));
                Bridge.Test.Assert.areEqual("$Bridge1058.Bridge1058.Class1_B", Bridge.getTypeName($Bridge1058.Bridge1058.Class1_B));
                Bridge.Test.Assert.areEqual("Bridge1058.Class2_B", Bridge.getTypeName(Bridge1058.Class2_B));
            }
        }
    });
    
    Bridge.define('$Bridge1058.Bridge1058.class1');
    
    Bridge.define('$Bridge1058.Bridge1058.Class1_B');
    
    Bridge.define('Bridge1058.class2');
    
    Bridge.define('Bridge1058.Class2_B');
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1058.overlayType', {
        statics: {
            CIRCLE: 0,
            MARKER: 1
        },
        $enum: true
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1058.OverlayType_B', {
        statics: {
            CIRCLE: 0,
            MARKER: 1
        },
        $enum: true
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1059', {
        statics: {
            testEnumNameModes: function () {
                var t1 = Bridge.ClientTest.BridgeIssues.Bridge1059.OverlayType1;
                Bridge.Test.Assert.areEqual(Bridge.ClientTest.BridgeIssues.Bridge1059.OverlayType1.cIRCLE, t1.cIRCLE);
                Bridge.Test.Assert.areEqual(Bridge.ClientTest.BridgeIssues.Bridge1059.OverlayType1.marker, t1.marker);
    
                var t2 = Bridge.ClientTest.BridgeIssues.Bridge1059.OverlayType2;
                Bridge.Test.Assert.areEqual(Bridge.ClientTest.BridgeIssues.Bridge1059.OverlayType2.CIRCLE, t2.CIRCLE);
                Bridge.Test.Assert.areEqual(Bridge.ClientTest.BridgeIssues.Bridge1059.OverlayType2.marker, t2.marker);
    
                var t3 = Bridge.ClientTest.BridgeIssues.Bridge1059.OverlayType3;
                Bridge.Test.Assert.areEqual(Bridge.ClientTest.BridgeIssues.Bridge1059.OverlayType3.circle, t3.circle);
                Bridge.Test.Assert.areEqual(Bridge.ClientTest.BridgeIssues.Bridge1059.OverlayType3.marker, t3.marker);
    
                var t4 = Bridge.ClientTest.BridgeIssues.Bridge1059.OverlayType4;
                Bridge.Test.Assert.areEqual(Bridge.ClientTest.BridgeIssues.Bridge1059.OverlayType4.CIRCLE, t4.CIRCLE);
                Bridge.Test.Assert.areEqual(Bridge.ClientTest.BridgeIssues.Bridge1059.OverlayType4.MARKER, t4.MARKER);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1059.OverlayType1', {
        statics: {
            cIRCLE: 1,
            marker: 2
        },
        $enum: true
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1059.OverlayType2', {
        statics: {
            CIRCLE: 1,
            marker: 2
        },
        $enum: true
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1059.OverlayType3', {
        statics: {
            circle: 1,
            marker: 2
        },
        $enum: true
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1059.OverlayType4', {
        statics: {
            CIRCLE: 1,
            MARKER: 2
        },
        $enum: true
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1061', {
        statics: {
            testIsDigitFromLinq: function () {
                Bridge.Test.Assert.true(System.Char.isDigit(49));
                Bridge.Test.Assert.true(System.Linq.Enumerable.from("1").any($_.Bridge.ClientTest.BridgeIssues.Bridge1061.f1));
    
                var s = "s1*";
                Bridge.Test.Assert.areEqual$1(1, System.Linq.Enumerable.from(s).count($_.Bridge.ClientTest.BridgeIssues.Bridge1061.f1), "String IsDigit");
                Bridge.Test.Assert.areEqual$1(1, System.Linq.Enumerable.from(s).count($_.Bridge.ClientTest.BridgeIssues.Bridge1061.f2), "String IsLetter");
                Bridge.Test.Assert.areEqual$1(2, System.Linq.Enumerable.from(s).count($_.Bridge.ClientTest.BridgeIssues.Bridge1061.f3), "String IsLetterOrDigit");
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.BridgeIssues.Bridge1061", $_);
    
    Bridge.apply($_.Bridge.ClientTest.BridgeIssues.Bridge1061, {
        f1: function (c) {
            return System.Char.isDigit(c);
        },
        f2: function (c) {
            return System.Char.isLetter(c);
        },
        f3: function (c) {
            return (System.Char.isDigit(c) || System.Char.isLetter(c));
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1065', {
        statics: {
            testDecimalLongWithDictionary: function () {
                var decimalDict = Bridge.merge(new System.Collections.Generic.Dictionary$2(System.Int64,System.Decimal)(), [
                    [System.Int64(0), System.Decimal(5)]
                ] );
                Bridge.Test.Assert.areEqual("System.Decimal", Bridge.getTypeName(decimalDict.get(System.Int64(0))));
                Bridge.Test.Assert.areEqual("5", Bridge.Int.format(decimalDict.get(System.Int64(0)), 'G'));
                decimalDict.set(System.Int64(0), System.Decimal(1));
                Bridge.Test.Assert.areEqual("System.Decimal", Bridge.getTypeName(decimalDict.get(System.Int64(0))));
                Bridge.Test.Assert.areEqual("1", Bridge.Int.format(decimalDict.get(System.Int64(0)), 'G'));
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1066', {
        statics: {
            testInlinePopertyWithValue: function () {
                var dict = new Bridge.ClientTest.BridgeIssues.Bridge1066.MyDictionary();
                Bridge.Test.Assert.notNull(dict.getAccessor);
                Bridge.Test.Assert.notNull(dict.setAccessor);
                Bridge.Test.Assert.areEqual(1, dict.getAccessor(0));
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1066.MyDictionary', {
        inherits: [System.Collections.Generic.Dictionary$2(System.Int32,System.Int32)],
        getAccessor: function (key) {
            return 1;
        },
        setAccessor: function (key, value) {
    
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1067', {
        statics: {
            testInlinePopertyWithValue: function () {
                var dict1 = new Bridge.ClientTest.BridgeIssues.Bridge1067.MyDictionary1();
                var dict2 = new Bridge.ClientTest.BridgeIssues.Bridge1067.MyDictionary2();
                Bridge.Test.Assert.null(dict1.getAccessor);
                Bridge.Test.Assert.null(dict1.setAccessor);
                Bridge.Test.Assert.null(dict2.getAccessor);
                Bridge.Test.Assert.null(dict2.setAccessor);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1067.MyDictionary1', {
        inherits: [System.Collections.Generic.Dictionary$2(System.Int32,System.Int32)],
    
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1067.MyDictionary2', {
        inherits: [System.Collections.Generic.Dictionary$2(System.Int32,System.Int32)],
    
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1071', {
        statics: {
            testParamsForCtor: function () {
                var b = new Bridge.ClientTest.BridgeIssues.Bridge1071.B();
                var test = new Bridge.ClientTest.BridgeIssues.Bridge1071.A$1(Bridge.ClientTest.BridgeIssues.Bridge1071.C)(b);
                var test2 = new Bridge.ClientTest.BridgeIssues.Bridge1071.A$2(Bridge.ClientTest.BridgeIssues.Bridge1071.C,Bridge.ClientTest.BridgeIssues.Bridge1071.D)(b);
    
                Bridge.Test.Assert.areEqual(1, test._argumentTypes.length);
                Bridge.Test.Assert.areEqual(2, test2._argumentTypes.length);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1071.A', {
        _b: null,
        _argumentTypes: null,
        constructor: function (b, argumentTypes) {
            if (argumentTypes === void 0) { argumentTypes = []; }
    
            this._b = b;
            this._argumentTypes = argumentTypes;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1071.B');
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1071.C');
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1071.D');
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1072', {
        statics: {
            testNameForProperty: function () {
                var c = new Bridge.ClientTest.BridgeIssues.Bridge1072.Class1();
    
                Bridge.Test.Assert.notNull(c.getAccessor);
                Bridge.Test.Assert.notNull(c.setAccessor);
    
                c.setAccessor(7);
                Bridge.Test.Assert.areEqual(7, c.getAccessor());
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1072.Class1', {
        data: 0,
        getAccessor: function () {
            return this.data;
        },
        setAccessor: function (value) {
            this.data = value;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1076', {
        statics: {
            testInlineConstantAsMemberReference: function () {
                Bridge.Test.Assert.areEqual("SomeV", "SomeV");
            },
            testInlineBridgeNumericConstantsAsMemberReference: function () {
                var s;
    
                s = Bridge.Int.format(System.Decimal.MaxValue, 'G');
                s = System.Single.format(3.40282347E+38, 'G');
                s = System.Double.format(System.Double.max, 'G');
                s = String.fromCharCode(65535);
    
                s = Bridge.Int.format(System.Decimal.MinValue, 'G');
                s = System.Single.format(-3.40282347E+38, 'G');
                s = System.Single.format(1.401298E-45, 'G');
                s = System.Double.format(System.Double.min, 'G');
                s = System.Double.format(4.94065645841247E-324, 'G');
                s = String.fromCharCode(0);
    
                s = (255).toString();
                s = (65535).toString();
                s = (4294967295).toString();
                s = System.UInt64.MaxValue.toString();
                s = (127).toString();
                s = (32767).toString();
                s = (2147483647).toString();
                s = System.Int64.MaxValue.toString();
    
                s = (0).toString();
                s = (0).toString();
                s = (0).toString();
                s = System.UInt64.MinValue.toString();
                s = (-128).toString();
                s = (-32768).toString();
                s = (-2147483648).toString();
                s = System.Int64.MinValue.toString();
    
                Bridge.Test.Assert.areEqual("-9223372036854775808", s);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1083', {
        statics: {
            testExternalEnum: function () {
                // simulate declaration of external enum 
                Bridge.ClientTest.BridgeIssues.Bridge1083.Foo = {};
                Bridge.ClientTest.BridgeIssues.Bridge1083.Foo.OK = 'OK';
                Bridge.ClientTest.BridgeIssues.Bridge1083.Foo.FAIL = 'FAIL';
    
                var status = Bridge.ClientTest.BridgeIssues.Bridge1083.Foo.OK;
    
                Bridge.Test.Assert.areEqual("OK", System.Enum.toString(Bridge.ClientTest.BridgeIssues.Bridge1083.Foo, status));
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1085', {
        statics: {
            testInlineArrayExpand: function () {
                var part1 = ["Hello", "World"];
                var part2 = ["Part", "Two"];
                var merged = [];
                merged.push("Lets", "Beginn");
                merged.push.apply(merged,part1);
                merged.push.apply(merged,part2);
    
                Bridge.Test.Assert.areEqual(["Lets", "Beginn", "Hello", "World", "Part", "Two"], merged);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1096', {
        statics: {
            testClippingIssues: function () {
                var v = 1;
                var result = ((v >>> 0) * 8) >>> 0;
                Bridge.Test.Assert.areEqual(8, result);
    
                var a = 1, b = 4;
                var res = (Bridge.Int.clip32(Math.ceil(a / 1.0)) * b) | 0;
                Bridge.Test.Assert.areEqual(4, res);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1098', {
        statics: {
            testInlineConstantAsMemberReference: function () {
                var max = 2147483647;
                Bridge.Test.Assert.areEqual(2147483647, max);
                var r = (max + 1) | 0;
                Bridge.Test.Assert.areEqual(-2147483648, r);
    
                var max1 = -2147483648;
                Bridge.Test.Assert.areEqual(-2147483648, max1);
                var r1 = (max1 - 1) | 0;
                Bridge.Test.Assert.areEqual(2147483647, r1);
    
                var max2 = 2147483647;
                Bridge.Test.Assert.areEqual(2147483647, max2);
                var r2 = Bridge.Int.check(max2 - 1, System.Int32);
                Bridge.Test.Assert.areEqual(2147483646, r2);
    
                var max3 = -2147483648;
                Bridge.Test.Assert.areEqual(-2147483648, max3);
                var r3 = Bridge.Int.check(max3 + 1, System.Int32);
                Bridge.Test.Assert.areEqual(-2147483647, r3);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1103', {
        statics: {
            testPropertyOps: function () {
                var res = "";
                if (true) {
                    var scope = { };
                    if (System.Decimal.tryParse("1.0", null, scope) && scope.v.equalsT(System.Decimal(1))) {
                        res += "first OK ";
                    }
                }
    
                if (true) {
                    var scope1 = { };
                    if (System.Decimal.tryParse("2.0", null, scope1) && scope1.v.equalsT(System.Decimal(2))) {
                        res += "second OK ";
                    }
                }
    
                Bridge.Test.Assert.areEqual("first OK second OK ", res);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1105', {
        statics: {
            testStaticInitForNestedClasses: function () {
                Bridge.Test.Assert.areEqual("test", Bridge.ClientTest.BridgeIssues.Bridge1105.Foo.items.getItem(0).value);
                Bridge.Test.Assert.areEqual("Value1", Bridge.ClientTest.BridgeIssues.Bridge1105.Foo1.defaultItem);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1105.Foo', {
        statics: {
            items: null,
            config: {
                init: function () {
                    this.items = Bridge.merge(new System.Collections.Generic.List$1(Bridge.ClientTest.BridgeIssues.Bridge1105.Foo.Item)(), [
        [new Bridge.ClientTest.BridgeIssues.Bridge1105.Foo.Item("test")]
    ] );
                }
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1105.Foo.Item', {
        value: null,
        constructor: function (value) {
            this.value = value;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1105.Foo1', {
        statics: {
            defaultItem: null,
            config: {
                init: function () {
                    this.defaultItem = Bridge.ClientTest.BridgeIssues.Bridge1105.Foo1.Item.value;
                }
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1105.Foo1.Item', {
        statics: {
            value: "Value1"
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1109', {
        statics: {
            testTemplateOnProperty: function () {
                var gamedata1 = 1;
                Bridge.Test.Assert.areEqual(1, gamedata1);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1110', {
        statics: {
            testOverflowForConditionInParenthesized: function () {
                var v = System.Int64(1);
                v = System.Int64((v.gt(System.Int64(1)) ? 1 : 0));
                var res = v.equals(System.Int64(1));
                Bridge.Test.Assert.false(res);
            },
            testOverflowForIndexer: function () {
                var data = [1];
                var v = System.Int64(data[0]);
                v = System.Int64((v.gt(System.Int64(1)) ? 1 : 0));
                var res = v.equals(System.Int64(1));
                Bridge.Test.Assert.false(res);
            },
            testOverflowForBitwise: function () {
                var v2 = 4294967295;
                var shifted = (v2 << 31) >>> 0;
                var res2 = shifted === 2147483648;
                Bridge.Test.Assert.true(res2);
    
                var v3 = 4294967295;
                var shifted3 = (v3 << 31) >>> 0;
                var res3 = shifted === 2147483648;
                Bridge.Test.Assert.true(res3);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1120', {
        statics: {
            testEnumDoesNotGenerateValuesAsPowerOfTwo: function () {
                Bridge.Test.Assert.areEqual$1(-10, -10, "-10");
                Bridge.Test.Assert.areEqual$1(-9, -9, "-9");
                Bridge.Test.Assert.areEqual$1(-8, -8, "-8");
                Bridge.Test.Assert.areEqual$1(1, 1, "1");
                Bridge.Test.Assert.areEqual$1(-9, -9, "-9");
                Bridge.Test.Assert.areEqual$1(0, 0, "0");
                Bridge.Test.Assert.areEqual$1(1, 1, "1");
            },
            testFlagEnumDoesNotGenerateValuesAsPowerOfTwo: function () {
                Bridge.Test.Assert.areEqual$1(0, 0, "0");
                Bridge.Test.Assert.areEqual$1(7, 7, "7");
                Bridge.Test.Assert.areEqual$1(8, 8, "8");
                Bridge.Test.Assert.areEqual$1(9, 9, "9");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1120.Baz', {
        statics: {
            a: 0,
            b: 7,
            c: 8,
            d: 9
        },
        $enum: true,
        $flags: true
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1120.Test', {
        statics: {
            M1: -10,
            M2: -9,
            M3: -8,
            M4: 1,
            M5: -9,
            M6: 0,
            M7: 1
        },
        $enum: true
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1128', {
        statics: {
            testNestedClassesWithInterface: function () {
                var res = Bridge.ClientTest.BridgeIssues.Bridge1128.Foo.items[0].value;
                Bridge.Test.Assert.areEqual("test", res);
    
                res = Bridge.ClientTest.BridgeIssues.Bridge1128.Foo1.items[0].value;
                Bridge.Test.Assert.areEqual("abc", res);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1128.Foo', {
        statics: {
            constructor: function () {
                System.Array.sort(Bridge.ClientTest.BridgeIssues.Bridge1128.Foo.items);
            },
            items: null,
            config: {
                init: function () {
                    this.items = [new Bridge.ClientTest.BridgeIssues.Bridge1128.Foo.Item("constructor$1", "test")];
                }
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1128.Foo.Item', {
        inherits: function () { return [System.IComparable$1(Bridge.ClientTest.BridgeIssues.Bridge1128.Foo.Item)]; },
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge1128.Foo.Item(); }
        },
        value: null,
        constructor$1: function (value) {
            this.value = value;
        },
        constructor: function () {
        },
        compareTo: function (other) {
            return System.String.compare(this.value, other.value);
        },
        $struct: true,
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + -1126420587;
            hash = hash * 23 + (this.value == null ? 0 : Bridge.getHashCode(this.value));
            return hash;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.BridgeIssues.Bridge1128.Foo.Item)) {
                return false;
            }
            return Bridge.equals(this.value, o.value);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.BridgeIssues.Bridge1128.Foo.Item();
            s.value = this.value;
            return s;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1128.Foo1', {
        statics: {
            constructor: function () {
                System.Array.sort(Bridge.ClientTest.BridgeIssues.Bridge1128.Foo1.items, new Bridge.ClientTest.BridgeIssues.Bridge1128.Foo1.Comparer()); // throws
            },
            items: null,
            config: {
                init: function () {
                    this.items = [new Bridge.ClientTest.BridgeIssues.Bridge1128.Foo1.Item("constructor$1", "test"), new Bridge.ClientTest.BridgeIssues.Bridge1128.Foo1.Item("constructor$1", "xyz"), new Bridge.ClientTest.BridgeIssues.Bridge1128.Foo1.Item("constructor$1", "abc")];
                }
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1128.Foo1.Item', {
        inherits: function () { return [System.IComparable$1(Bridge.ClientTest.BridgeIssues.Bridge1128.Foo1.Item)]; },
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge1128.Foo1.Item(); }
        },
        value: null,
        constructor$1: function (value) {
            this.value = value;
        },
        constructor: function () {
        },
        compareTo: function (other) {
            return System.String.compare(this.value, other.value);
        },
        $struct: true,
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + -1126420587;
            hash = hash * 23 + (this.value == null ? 0 : Bridge.getHashCode(this.value));
            return hash;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.BridgeIssues.Bridge1128.Foo1.Item)) {
                return false;
            }
            return Bridge.equals(this.value, o.value);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.BridgeIssues.Bridge1128.Foo1.Item();
            s.value = this.value;
            return s;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1130', {
        statics: {
            testUlongDivision: function () {
                var a = System.UInt64(System.Int64([0,8]));
                var b = System.UInt64(2656901066);
                var x = a.div(b);
                var y = System.UInt64(3850086465);
                var z = System.UInt64(2476925576);
                var res = (x.mul(y)).gt((z.shl(32)));
    
                Bridge.Test.Assert.false(res);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1134', {
        statics: {
            testJsonArrayParse: function () {
                var o = Bridge.merge(new Array(), JSON.parse("[1]"));
                Bridge.Test.Assert.true(o != null);
                Bridge.Test.Assert.areEqual(1, o.length);
                Bridge.Test.Assert.areEqual(1, o[0]);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1140', {
        statics: {
            testDefaultNullable: function () {
                var d = null;
                var m = null;
                var l = null;
                var c = null;
    
                Bridge.Test.Assert.areEqual$1(null, d, "double?");
                Bridge.Test.Assert.areEqual$1(null, m, "decimal?");
                Bridge.Test.Assert.areEqual$1(null, l, "long?");
                Bridge.Test.Assert.areEqual$1(null, c, "char?");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1141', {
        statics: {
            testLongDivisionInfiniteLoopFixed: function () {
                var m = System.UInt64.MaxValue;
                var m1 = System.UInt64([-2,-1]);
                var res1 = m.div(m1);
    
                Bridge.Test.Assert.areEqual$1("1", res1.toString(), "https://github.com/dcodeIO/long.js/issues/31");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1144', {
        statics: {
            testStringFormat: function () {
                var z = System.Decimal(-1.122);
                Bridge.Test.Assert.areEqual("-1.12", Bridge.Int.format(z, "##.##"));
                Bridge.Test.Assert.areEqual("-1.12", Bridge.Int.format(z, "##.00"));
                Bridge.Test.Assert.areEqual("-01.12", Bridge.Int.format(z, "00.##"));
    
                var x = System.Decimal(0.0);
                Bridge.Test.Assert.areEqual("0", Bridge.Int.format(x, "#0"));
                Bridge.Test.Assert.areEqual("", Bridge.Int.format(x, "##"));
                Bridge.Test.Assert.areEqual("", Bridge.Int.format(x, "##.##"));
                Bridge.Test.Assert.areEqual(".0", Bridge.Int.format(x, "##.0#"));
                Bridge.Test.Assert.areEqual(".00", Bridge.Int.format(x, "##.#0"));
                Bridge.Test.Assert.areEqual(".00", Bridge.Int.format(x, "##.00"));
    
                var y = System.Decimal(0.2);
                Bridge.Test.Assert.areEqual("", Bridge.Int.format(y, "##"));
                Bridge.Test.Assert.areEqual(".2", Bridge.Int.format(y, "##.##"));
                Bridge.Test.Assert.areEqual(".2", Bridge.Int.format(y, "##.0#"));
                Bridge.Test.Assert.areEqual(".20", Bridge.Int.format(y, "##.#0"));
                Bridge.Test.Assert.areEqual(".20", Bridge.Int.format(y, "##.00"));
    
                var d = System.Decimal(2.0);
                Bridge.Test.Assert.areEqual("2", Bridge.Int.format(d, "."));
                Bridge.Test.Assert.areEqual("2", Bridge.Int.format(d, ".#"));
                Bridge.Test.Assert.areEqual("2", Bridge.Int.format(d, ".##"));
                Bridge.Test.Assert.areEqual("%200", Bridge.Int.format(d, "%.##"));
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1146', {
        statics: {
            testLongIssues: function () {
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BridgeIssues.Bridge1146.intUintEquality(0, 0), "int == uint uses .Equals() between long: System.Int64(a).equals(System.Int64(b))");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BridgeIssues.Bridge1146.precedence(), "Correct order for `a += b >> 1` -> `(a + (b >>> 1))`");
            },
            intUintEquality: function (a, b) {
                return System.Int64(a).equals(System.Int64(b));
            },
            precedence: function () {
                var a = 1;
                var b = 2;
                a = (a + (b >>> 1)) >>> 0;
                return a === 2;
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1149', {
        statics: {
            bar_str: null,
            testBitwiseOrAnd: function () {
                Bridge.ClientTest.BridgeIssues.Bridge1149.bar_str = "";
                var foo = true;
                foo = !!(foo | Bridge.ClientTest.BridgeIssues.Bridge1149.bar());
                foo = !!(foo | Bridge.ClientTest.BridgeIssues.Bridge1149.bar());
    
                Bridge.Test.Assert.areEqual("barbar", Bridge.ClientTest.BridgeIssues.Bridge1149.bar_str);
            },
            bar: function () {
                Bridge.ClientTest.BridgeIssues.Bridge1149.bar_str += "bar";
                return false;
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1160', {
        statics: {
            testBitwiseOrAnd: function () {
                var x = new Bridge.ClientTest.BridgeIssues.Bridge1160A();
    
                var processor = x.getProcessor();
                Bridge.Test.Assert.areEqual("Hello", processor("Hello"));
                Bridge.Test.Assert.areEqual("Hello", x.getProcessor()("Hello"));
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1160A', {
        getProcessor: function () {
            return $_.Bridge.ClientTest.BridgeIssues.Bridge1160A.f1;
        }
    });
    
    Bridge.ns("Bridge.ClientTest.BridgeIssues.Bridge1160A", $_);
    
    Bridge.apply($_.Bridge.ClientTest.BridgeIssues.Bridge1160A, {
        f1: function (message) {
            return message;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1170', {
        statics: {
            testAsyncUsing: function () {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $task3, 
                    $jumpFromFinally, 
                    $returnValue, 
                    done, 
                    parent, 
                    parent2, 
                    _bridgeTmp_1, 
                    $async_e, 
                    c1, 
                    $async_e1, 
                    c11, 
                    c2, 
                    $async_e2, 
                    $async_e3, 
                    $async_e4, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11,12,14,15], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.Assert.async();
                                        parent = new Bridge.ClientTest.BridgeIssues.Bridge1170();
                                        parent2 = new Bridge.ClientTest.BridgeIssues.Bridge1170();
                                        
                                        _bridgeTmp_1 = new Bridge.ClientTest.BridgeIssues.Bridge1170.Class1("constructor$1", parent);
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        $task3 = System.Threading.Tasks.Task.delay(1);
                                        $step = 2;
                                        $task3.continueWith($asyncBody, true);
                                        return;
                                    }
                                    case 2: {
                                        $task3.getAwaitedResult();
                                        Bridge.Test.Assert.false(parent.isDisposed);
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        if (Bridge.hasValue(_bridgeTmp_1)) _bridgeTmp_1.dispose();
                                        
                                        if ($jumpFromFinally > -1) {
                                            $step = $jumpFromFinally;
                                            $jumpFromFinally = null;
                                        } else if ($async_e) {
                                            throw $async_e;
                                            return;
                                        } else if (Bridge.isDefined($returnValue)) {
                                            $tcs.setResult($returnValue);
                                            return;
                                        }
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        
                                        Bridge.Test.Assert.true(parent.isDisposed);
                                        
                                        parent.isDisposed = false;
                                        c1 = new Bridge.ClientTest.BridgeIssues.Bridge1170.Class1("constructor$1", parent);
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        $task2 = System.Threading.Tasks.Task.delay(1);
                                        $step = 6;
                                        $task2.continueWith($asyncBody, true);
                                        return;
                                    }
                                    case 6: {
                                        $task2.getAwaitedResult();
                                        Bridge.Test.Assert.false(c1.isDisposed);
                                        Bridge.Test.Assert.false(parent.isDisposed);
                                        $step = 7;
                                        continue;
                                    }
                                    case 7: {
                                        if (Bridge.hasValue(c1)) c1.dispose();
                                        
                                        if ($jumpFromFinally > -1) {
                                            $step = $jumpFromFinally;
                                            $jumpFromFinally = null;
                                        } else if ($async_e) {
                                            throw $async_e;
                                            return;
                                        } else if (Bridge.isDefined($returnValue)) {
                                            $tcs.setResult($returnValue);
                                            return;
                                        }
                                        $step = 8;
                                        continue;
                                    }
                                    case 8: {
                                        
                                        Bridge.Test.Assert.true(parent.isDisposed);
                                        
                                        parent.isDisposed = false;
                                        c11 = new Bridge.ClientTest.BridgeIssues.Bridge1170.Class1("constructor$1", parent);
                                        $step = 9;
                                        continue;
                                    }
                                    case 9: {
                                        c2 = new Bridge.ClientTest.BridgeIssues.Bridge1170.Class1("constructor$1", parent2);
                                        $step = 10;
                                        continue;
                                    }
                                    case 10: {
                                        $task1 = System.Threading.Tasks.Task.delay(1);
                                        $step = 11;
                                        $task1.continueWith($asyncBody, true);
                                        return;
                                    }
                                    case 11: {
                                        $task1.getAwaitedResult();
                                        Bridge.Test.Assert.false(c11.isDisposed);
                                        Bridge.Test.Assert.false(c2.isDisposed);
                                        $step = 12;
                                        continue;
                                    }
                                    case 12: {
                                        if (Bridge.hasValue(c2)) c2.dispose();
                                        
                                        if ($jumpFromFinally > -1) {
                                            $step = 14;
                                            continue;
                                        } else if ($async_e) {
                                            throw $async_e;
                                            return;
                                        } else if (Bridge.isDefined($returnValue)) {
                                            $step = 14;
                                            continue;
                                        }
                                        $step = 13;
                                        continue;
                                    }
    
                                    case 14: {
                                        if (Bridge.hasValue(c1)) c1.dispose();
                                        
                                        if ($jumpFromFinally > -1) {
                                            $step = $jumpFromFinally;
                                            $jumpFromFinally = null;
                                        } else if ($async_e) {
                                            throw $async_e;
                                            return;
                                        } else if (Bridge.isDefined($returnValue)) {
                                            $tcs.setResult($returnValue);
                                            return;
                                        }
                                        $step = 15;
                                        continue;
                                    }
                                    case 15: {
                                        
                                        Bridge.Test.Assert.true(parent.isDisposed);
                                        Bridge.Test.Assert.true(parent2.isDisposed);
                                        
                                        
                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ($step >= 1 && $step <= 2){
    
                                $step = 3;
                                $asyncBody();
                                return;
                            }
                            if ($step >= 5 && $step <= 6){
    
                                $step = 7;
                                $asyncBody();
                                return;
                            }
                            if ($step >= 10 && $step <= 11){
    
                                $step = 12;
                                $asyncBody();
                                return;
                            }
                            if ($step >= 9 && $step <= 13){
    
                                $step = 14;
                                $asyncBody();
                                return;
                            }
                            throw $async_e;
                        }
                    }, arguments);
    
                $asyncBody();
            },
            testAsyncUsingWithException: function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $returnValue, 
                    done, 
                    parent, 
                    _bridgeTmp_2, 
                    $async_e, 
                    e, 
                    $async_e1, 
                    $async_e2, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.Assert.async();
                                        parent = new Bridge.ClientTest.BridgeIssues.Bridge1170();
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        _bridgeTmp_2 = new Bridge.ClientTest.BridgeIssues.Bridge1170.Class1("constructor$1", parent);
                                        $step = 2;
                                        continue;
                                    }
                                    case 2: {
                                        $task1 = System.Threading.Tasks.Task.delay(1);
                                        $step = 3;
                                        $task1.continueWith($asyncBody, true);
                                        return;
                                    }
                                    case 3: {
                                        $task1.getAwaitedResult();
                                        throw new System.InvalidOperationException("Bridge1170 test");
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        if (Bridge.hasValue(_bridgeTmp_2)) _bridgeTmp_2.dispose();
                                        
                                        if ($jumpFromFinally > -1) {
                                            $step = $jumpFromFinally;
                                            $jumpFromFinally = null;
                                        } else if ($async_e) {
                                            throw $async_e;
                                            return;
                                        } else if (Bridge.isDefined($returnValue)) {
                                            $tcs.setResult($returnValue);
                                            return;
                                        }
                                        $step = 5;
                                        continue;
                                    }
                                    case 5: {
                                        $step = 7;
                                        continue;
                                    }
                                    case 6: {
                                        Bridge.Test.Assert.areEqual("Bridge1170 test", e.getMessage());
                                        $step = 7;
                                        continue;
                                    }
                                    case 7: {
                                        
                                        Bridge.Test.Assert.true(parent.isDisposed);
                                        
                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ($step >= 2 && $step <= 3){
    
                                $step = 4;
                                $asyncBody();
                                return;
                            }
                            if ( $step >= 1 && $step <= 5 ){
                                if (Bridge.is($async_e, System.InvalidOperationException)) {
                                    e = $async_e;
                                    $step = 6;
                                    $asyncBody();
                                    return;
                                }
                            }
                            throw $async_e;
                        }
                    }, arguments);
    
                $asyncBody();
            }
        },
        isDisposed: false
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1170.Class1', {
        inherits: [System.IDisposable],
        isDisposed: false,
        parent: null,
        constructor: function () {
        },
        constructor$1: function (parent) {
            this.parent = parent;
        },
        dispose: function () {
            if (this.parent != null) {
                this.parent.isDisposed = true;
            }
            this.isDisposed = true;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1171', {
        statics: {
            testLinqEnumerableInList: function () {
                var $t;
                var result = System.Array.init(2, null);
                result[0] = Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge1171.ObjectA(), {
                    setFieldA: null
                } );
                result[1] = Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge1171.ObjectA(), {
                    setFieldA: 2
                } );
    
                var query = System.Linq.Enumerable.from(result).where($_.Bridge.ClientTest.BridgeIssues.Bridge1171.f1).groupBy($_.Bridge.ClientTest.BridgeIssues.Bridge1171.f2);
                Bridge.Test.Assert.areEqual(1, query.count());
    
                $t = Bridge.getEnumerator(query);
                while ($t.moveNext()) {
                    var key = $t.getCurrent();
                    Bridge.Test.Assert.areEqual(1, new System.Collections.Generic.List$1(Bridge.ClientTest.BridgeIssues.Bridge1171.ObjectA)(key).getCount());
                }
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.BridgeIssues.Bridge1171", $_);
    
    Bridge.apply($_.Bridge.ClientTest.BridgeIssues.Bridge1171, {
        f1: function (x) {
            return System.Nullable.hasValue(x.getFieldA());
        },
        f2: function (x) {
            return System.Nullable.getValueOrDefault(x.getFieldA(), 0);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1171.ObjectA', {
        config: {
            properties: {
                FieldA: null
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1175', {
        statics: {
            testNullComparing: function () {
                var temp = { };
                var varNull = null;
                var varUndefined = temp["this-prop-undefined"];
    
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(varNull, varUndefined), "varNull == varUndefined");
                Bridge.Test.Assert.true$1(varNull == null, "varNull == null");
                Bridge.Test.Assert.true$1(varUndefined == null, "varUndefined == null");
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(undefined, varUndefined), "Script.Undefined == varUndefined");
    
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(varUndefined, varNull), "varUndefined == varNull");
                Bridge.Test.Assert.true$1(null == varNull, "null == varNull");
                Bridge.Test.Assert.true$1(null == varUndefined, "null == varUndefined");
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(varUndefined, undefined), "varUndefined == Script.Undefined");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1176', {
        statics: {
            testFunctionLifting: function () {
                var scope = $_.Bridge.ClientTest.BridgeIssues.Bridge1176;
                Bridge.Test.Assert.null$1(scope, "scope should not exists");
    
                var items = [new Bridge.ClientTest.BridgeIssues.Bridge1176.Item$1(System.Int32)(), new Bridge.ClientTest.BridgeIssues.Bridge1176.Item$1(System.Int32)()];
                var values = Bridge.ClientTest.BridgeIssues.Bridge1176.getItemValues(System.Int32, items);
                Bridge.Test.Assert.areEqual("Item, Item", values.join(", "));
            },
            getItemValues: function (TValue, items) {
                return System.Linq.Enumerable.from(items).select(function (item) {
                    return Bridge.ClientTest.BridgeIssues.Bridge1176.Item$1(TValue).op_Implicit(item);
                }).toArray();
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1176.Item$1', function (TValue) { return {
        statics: {
            op_Implicit: function (item) {
                return "Item";
            }
        }
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1177', {
        statics: {
            testImplicitCast: function () {
                var item = new Bridge.ClientTest.BridgeIssues.Bridge1177.Item("Test1");
                var s = Bridge.ClientTest.BridgeIssues.Bridge1177.Item.op_Implicit(item);
                Bridge.Test.Assert.areEqual("Test1", s);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1177.Item', {
        statics: {
            op_Implicit: function (item) {
                return item.value;
            }
        },
        value: null,
        constructor: function (value) {
            this.value = value;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1180', {
        statics: {
            testStructClone: function () {
                var list = new System.Collections.Generic.List$1(Bridge.ClientTest.BridgeIssues.Bridge1180.Vector2)();
                list.add(Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge1180.Vector2(), {
                    x: 0.0,
                    y: 1.0
                } ));
    
                var vec = list.getItem(0).$clone();
                vec.x = 5.0;
    
                Bridge.Test.Assert.areEqual(0, list.getItem(0).x);
                Bridge.Test.Assert.areEqual(5, vec.x);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1180.Vector2', {
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge1180.Vector2(); }
        },
        x: 0,
        y: 0,
        constructor: function () {
        },
        $struct: true,
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 1335531435;
            hash = hash * 23 + (this.x == null ? 0 : Bridge.getHashCode(this.x));
            hash = hash * 23 + (this.y == null ? 0 : Bridge.getHashCode(this.y));
            return hash;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.BridgeIssues.Bridge1180.Vector2)) {
                return false;
            }
            return Bridge.equals(this.x, o.x) && Bridge.equals(this.y, o.y);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.BridgeIssues.Bridge1180.Vector2();
            s.x = this.x;
            s.y = this.y;
            return s;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1184', {
        statics: {
            testGetTypeForNumberTypes: function () {
                var b = 1;
                Bridge.Test.Assert.areEqual(System.Byte, System.Byte);
    
                var sb = 1;
                Bridge.Test.Assert.areEqual(System.SByte, System.SByte);
    
                var s = 1;
                Bridge.Test.Assert.areEqual(System.Int16, System.Int16);
    
                var us = 1;
                Bridge.Test.Assert.areEqual(System.UInt16, System.UInt16);
    
                var i = 1;
                Bridge.Test.Assert.areEqual(System.Int32, System.Int32);
    
                var ui = 1;
                Bridge.Test.Assert.areEqual(System.UInt32, System.UInt32);
    
                var d = 1.1;
                Bridge.Test.Assert.areEqual(System.Double, System.Double);
    
                var f = 1.1;
                Bridge.Test.Assert.areEqual(System.Single, System.Single);
    
                var o = b;
                Bridge.Test.Assert.areEqual(System.Int32, Bridge.getType(o));
    
                o = f;
                Bridge.Test.Assert.areEqual(System.Double, Bridge.getType(o));
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1186', {
        statics: {
            testLambdasInField: function () {
                var c = new Bridge.ClientTest.BridgeIssues.Bridge1186();
                Bridge.Test.Assert.areEqual(1, c.list.getItem(0)(1));
                Bridge.Test.Assert.areEqual(3, c.list.getItem(1)(2));
            }
        },
        list: null,
        config: {
            init: function () {
                this.list = Bridge.merge(new System.Collections.Generic.List$1(Function)(), [
        [$_.Bridge.ClientTest.BridgeIssues.Bridge1186.f1],
        [$_.Bridge.ClientTest.BridgeIssues.Bridge1186.f2]
    ] );
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.BridgeIssues.Bridge1186", $_);
    
    Bridge.apply($_.Bridge.ClientTest.BridgeIssues.Bridge1186, {
        f1: function (value) {
            return value;
        },
        f2: function (value) {
            return ((value + 1) | 0);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1189', {
        statics: {
            testTaskNumber: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    done, 
                    resultLong, 
                    resultDecimal, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1,2], $step);
                            switch ($step) {
                                case 0: {
                                    done = Bridge.Test.Assert.async();
                                    $task2 = Bridge.ClientTest.BridgeIssues.Bridge1189.fooLong();
                                    $step = 1;
                                    $task2.continueWith($asyncBody, true);
                                    return;
                                }
                                case 1: {
                                    $taskResult2 = $task2.getAwaitedResult();
                                    resultLong = $taskResult2;
                                    Bridge.Test.Assert.true$1(System.Int64(-5).equals(resultLong), "Task<long>");
                                    
                                    $task1 = Bridge.ClientTest.BridgeIssues.Bridge1189.fooDecimal();
                                    $step = 2;
                                    $task1.continueWith($asyncBody, true);
                                    return;
                                }
                                case 2: {
                                    $taskResult1 = $task1.getAwaitedResult();
                                    resultDecimal = $taskResult1;
                                    Bridge.Test.Assert.true$1(System.Decimal(-7).equalsT(resultDecimal), "Task<decimal>");
                                    
                                    done();
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);
    
                $asyncBody();
            },
            fooLong: function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = System.Threading.Tasks.Task.delay(1);
                                        $step = 1;
                                        $task1.continueWith($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(System.Int64(-5));
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);
    
                $asyncBody();
                return $tcs.task;
            },
            fooDecimal: function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = System.Threading.Tasks.Task.delay(1);
                                        $step = 1;
                                        $task1.continueWith($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(System.Decimal(-7));
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);
    
                $asyncBody();
                return $tcs.task;
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1197', {
        statics: {
            testGetHashCodeOnDictionary: function () {
                var $t;
                var dict = new System.Collections.Generic.Dictionary$2(System.Int32,String)();
    
                // Calling GetHashCode() breaks the dictionary.
                var hash = Bridge.getHashCode(dict);
    
                // Count is still 0.
                Bridge.Test.Assert.areEqual(0, dict.getCount());
    
                $t = Bridge.getEnumerator(dict);
                while ($t.moveNext()) {
                    var item = $t.getCurrent();
                    Bridge.Test.Assert.fail$1("Dictionary should be empty");
                }
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1199', {
        statics: {
            testEventNameCase: function () {
                var wrong = new Bridge.ClientTest.BridgeIssues.Bridge1199.NotWorking$1(System.Int32)();
                wrong.IsNotWorking = Bridge.fn.combine(wrong.IsNotWorking, $_.Bridge.ClientTest.BridgeIssues.Bridge1199.f1);
                Bridge.Test.Assert.areEqual("somevalue", wrong.validate());
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.BridgeIssues.Bridge1199", $_);
    
    Bridge.apply($_.Bridge.ClientTest.BridgeIssues.Bridge1199, {
        f1: function () {
            return "somevalue";
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1199.NotWorking$1', function (T) { return {
        config: {
            events: {
                IsNotWorking: null
            }
        },
        validate: function () {
            return Bridge.staticEquals(this.IsNotWorking, null) ? "no subscribers" : this.IsNotWorking();
        }
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1202', {
        statics: {
            decimalField: System.Decimal(0.0),
            intField: 0,
            array: null,
            outMethod$1: function (value) {
                value.v = 3;
            },
            outMethod: function (value) {
                value.v = System.Decimal(7);
            },
            refMethod$1: function (value) {
                value.v = (value.v + 1) | 0;
            },
            refMethod: function (value) {
                value.v = value.v.inc();
            },
            testRefOutStaticIntField: function () {
                Bridge.ClientTest.BridgeIssues.Bridge1202.intField = 0;
    
                Bridge.ClientTest.BridgeIssues.Bridge1202.outMethod$1(Bridge.ref(Bridge.ClientTest.BridgeIssues.Bridge1202, "intField"));
                Bridge.Test.Assert.areEqual(3, Bridge.ClientTest.BridgeIssues.Bridge1202.intField);
    
                Bridge.ClientTest.BridgeIssues.Bridge1202.refMethod$1(Bridge.ref(Bridge.ClientTest.BridgeIssues.Bridge1202, "intField"));
                Bridge.Test.Assert.areEqual(4, Bridge.ClientTest.BridgeIssues.Bridge1202.intField);
            },
            testRefOutLocal1DIntArray: function () {
                var localArr = [0, 0];
    
                Bridge.ClientTest.BridgeIssues.Bridge1202.outMethod$1(Bridge.ref(localArr, 0));
                Bridge.Test.Assert.areEqual(3, localArr[0]);
    
                Bridge.ClientTest.BridgeIssues.Bridge1202.refMethod$1(Bridge.ref(localArr, 0));
                Bridge.Test.Assert.areEqual(4, localArr[0]);
    
                Bridge.ClientTest.BridgeIssues.Bridge1202.outMethod$1(Bridge.ref(localArr, localArr[1]));
                Bridge.Test.Assert.areEqual(3, localArr[localArr[1]]);
    
                Bridge.ClientTest.BridgeIssues.Bridge1202.refMethod$1(Bridge.ref(localArr, localArr[1]));
                Bridge.Test.Assert.areEqual(4, localArr[localArr[1]]);
            },
            testRefOutStatic1DIntArray: function () {
                Bridge.ClientTest.BridgeIssues.Bridge1202.array = [0, 0];
    
                Bridge.ClientTest.BridgeIssues.Bridge1202.outMethod$1(Bridge.ref(Bridge.ClientTest.BridgeIssues.Bridge1202.array, 0));
                Bridge.Test.Assert.areEqual(3, Bridge.ClientTest.BridgeIssues.Bridge1202.array[0]);
    
                Bridge.ClientTest.BridgeIssues.Bridge1202.refMethod$1(Bridge.ref(Bridge.ClientTest.BridgeIssues.Bridge1202.array, 0));
                Bridge.Test.Assert.areEqual(4, Bridge.ClientTest.BridgeIssues.Bridge1202.array[0]);
    
                Bridge.ClientTest.BridgeIssues.Bridge1202.outMethod$1(Bridge.ref(Bridge.ClientTest.BridgeIssues.Bridge1202.array, Bridge.ClientTest.BridgeIssues.Bridge1202.array[1]));
                Bridge.Test.Assert.areEqual(3, Bridge.ClientTest.BridgeIssues.Bridge1202.array[Bridge.ClientTest.BridgeIssues.Bridge1202.array[1]]);
    
                Bridge.ClientTest.BridgeIssues.Bridge1202.refMethod$1(Bridge.ref(Bridge.ClientTest.BridgeIssues.Bridge1202.array, Bridge.ClientTest.BridgeIssues.Bridge1202.array[1]));
                Bridge.Test.Assert.areEqual(4, Bridge.ClientTest.BridgeIssues.Bridge1202.array[Bridge.ClientTest.BridgeIssues.Bridge1202.array[1]]);
            },
            testRefOutLocal2DIntArray: function () {
                var array2D = System.Array.create(0, [[0, 0]], 1, 2);
    
                Bridge.ClientTest.BridgeIssues.Bridge1202.outMethod$1(Bridge.ref(array2D, [0, 0]));
                Bridge.Test.Assert.areEqual(3, array2D.get([0, 0]));
    
                Bridge.ClientTest.BridgeIssues.Bridge1202.refMethod$1(Bridge.ref(array2D, [0, 0]));
                Bridge.Test.Assert.areEqual(4, array2D.get([0, 0]));
    
                Bridge.ClientTest.BridgeIssues.Bridge1202.outMethod$1(Bridge.ref(array2D, [array2D.get([0, 1]), array2D.get([0, 1])]));
                Bridge.Test.Assert.areEqual(3, array2D.get([array2D.get([0, 1]), array2D.get([0, 1])]));
    
                Bridge.ClientTest.BridgeIssues.Bridge1202.refMethod$1(Bridge.ref(array2D, [array2D.get([0, 1]), array2D.get([0, 1])]));
                Bridge.Test.Assert.areEqual(4, array2D.get([array2D.get([0, 1]), array2D.get([0, 1])]));
            },
            testRefOutStaticDecimalField: function () {
                Bridge.ClientTest.BridgeIssues.Bridge1202.decimalField = System.Decimal(0);
    
                Bridge.ClientTest.BridgeIssues.Bridge1202.outMethod(Bridge.ref(Bridge.ClientTest.BridgeIssues.Bridge1202, "decimalField"));
                Bridge.Test.Assert.areEqual("7", Bridge.Int.format(Bridge.ClientTest.BridgeIssues.Bridge1202.decimalField, 'G'));
    
                Bridge.ClientTest.BridgeIssues.Bridge1202.refMethod(Bridge.ref(Bridge.ClientTest.BridgeIssues.Bridge1202, "decimalField"));
                Bridge.Test.Assert.areEqual("8", Bridge.Int.format(Bridge.ClientTest.BridgeIssues.Bridge1202.decimalField, 'G'));
            },
            testRefOutLocal1DDecimalArray: function () {
                var localArr = [System.Decimal(0), System.Decimal(0)];
    
                Bridge.ClientTest.BridgeIssues.Bridge1202.outMethod(Bridge.ref(localArr, 0));
                Bridge.Test.Assert.areEqual("7", Bridge.Int.format(localArr[0], 'G'));
    
                Bridge.ClientTest.BridgeIssues.Bridge1202.refMethod(Bridge.ref(localArr, 0));
                Bridge.Test.Assert.areEqual("8", Bridge.Int.format(localArr[0], 'G'));
            },
            testRefOutLocal2DDecimalArray: function () {
                var array2D = System.Array.create(System.Decimal(0.0), [[System.Decimal(0), System.Decimal(0)]], 1, 2);
    
                Bridge.ClientTest.BridgeIssues.Bridge1202.outMethod(Bridge.ref(array2D, [0, 0]));
                Bridge.Test.Assert.areEqual("7", Bridge.Int.format(array2D.get([0, 0]), 'G'));
    
                Bridge.ClientTest.BridgeIssues.Bridge1202.refMethod(Bridge.ref(array2D, [0, 0]));
                Bridge.Test.Assert.areEqual("8", Bridge.Int.format(array2D.get([0, 0]), 'G'));
            },
            testInlineOutStaticIntField: function () {
                var s = "1";
                var i = { };
                Bridge.ClientTest.BridgeIssues.Bridge1202.intField = 0;
    
                Bridge.Test.Assert.true(System.Int32.tryParse(s, i));
                Bridge.Test.Assert.areEqual(1, i.v);
    
                Bridge.Test.Assert.true(System.Int32.tryParse(s, Bridge.ref(Bridge.ClientTest.BridgeIssues.Bridge1202, "intField")));
                Bridge.Test.Assert.areEqual(1, Bridge.ClientTest.BridgeIssues.Bridge1202.intField);
            },
            testInlineOutStatic1DIntArray: function () {
                var s = "1";
                Bridge.ClientTest.BridgeIssues.Bridge1202.array = [0, 0];
    
                Bridge.Test.Assert.true(System.Int32.tryParse(s, Bridge.ref(Bridge.ClientTest.BridgeIssues.Bridge1202.array, 0)));
                Bridge.Test.Assert.areEqual(1, Bridge.ClientTest.BridgeIssues.Bridge1202.array[0]);
    
                Bridge.Test.Assert.true(System.Int32.tryParse(s, Bridge.ref(Bridge.ClientTest.BridgeIssues.Bridge1202.array, Bridge.ClientTest.BridgeIssues.Bridge1202.array[1])));
                Bridge.Test.Assert.areEqual(1, Bridge.ClientTest.BridgeIssues.Bridge1202.array[Bridge.ClientTest.BridgeIssues.Bridge1202.array[1]]);
            },
            testInlineOutLocal2DIntArray: function () {
                var s = "1";
                var array2D = System.Array.create(0, [[0, 0]], 1, 2);
    
                Bridge.Test.Assert.true(System.Int32.tryParse(s, Bridge.ref(array2D, [0, 0])));
                Bridge.Test.Assert.areEqual(1, array2D.get([0, 0]));
    
                Bridge.Test.Assert.true(System.Int32.tryParse(s, Bridge.ref(array2D, [array2D.get([0, 1]), array2D.get([0, 1])])));
                Bridge.Test.Assert.areEqual(1, array2D.get([array2D.get([0, 1]), array2D.get([0, 1])]));
            }
        }
    });
    
    (function(){
        var Bridge1203_a2 = function () {
        };
    })();
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1203', {
        statics: {
            initMethod1: function () {
                var Bridge1203_a1 = function () {
                };
            },
            testLiftedFunctionsInsideInitMethod: function () {
                var scope = $_.Bridge.ClientTest.BridgeIssues.Bridge1203;
                Bridge.Test.Assert.null$1(scope, "scope should not exists");
            }
        }
    });
    
    Bridge.ClientTest.BridgeIssues.Bridge1203.initMethod1();
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1206', {
        statics: {
            testDocumentURLProperty: function () {
                var raw = document.URL;
                var actual = document.URL;
    
                Bridge.Test.Assert.areEqual(raw, actual);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1217', {
        statics: {
            testTypeInferenceWithNamedArguments: function () {
                var r1 = Bridge.ClientTest.BridgeIssues.Bridge1217.getNavigatorToTest1(Bridge.ClientTest.BridgeIssues.Bridge1217.DemoNavigator, "", "", $_.Bridge.ClientTest.BridgeIssues.Bridge1217.f1);
                Bridge.Test.Assert.areEqual(Bridge.getTypeName(Bridge.ClientTest.BridgeIssues.Bridge1217.DemoNavigator), r1);
    
                var r2 = Bridge.ClientTest.BridgeIssues.Bridge1217.getNavigatorToTest1(Bridge.ClientTest.BridgeIssues.Bridge1217.DemoNavigator, "", "", $_.Bridge.ClientTest.BridgeIssues.Bridge1217.f1);
                Bridge.Test.Assert.areEqual(Bridge.getTypeName(Bridge.ClientTest.BridgeIssues.Bridge1217.DemoNavigator), r2);
    
                var r3 = Bridge.ClientTest.BridgeIssues.Bridge1217.getNavigatorToTest2(Bridge.ClientTest.BridgeIssues.Bridge1217.DemoNavigator, "", "", Bridge.cast(null, Bridge.ClientTest.BridgeIssues.Bridge1217.DemoNavigator));
                Bridge.Test.Assert.areEqual(Bridge.getTypeName(Bridge.ClientTest.BridgeIssues.Bridge1217.DemoNavigator), r3);
    
                var r4 = Bridge.ClientTest.BridgeIssues.Bridge1217.getNavigatorToTest2(Bridge.ClientTest.BridgeIssues.Bridge1217.DemoNavigator, "", "", Bridge.cast(null, Bridge.ClientTest.BridgeIssues.Bridge1217.DemoNavigator));
                Bridge.Test.Assert.areEqual(Bridge.getTypeName(Bridge.ClientTest.BridgeIssues.Bridge1217.DemoNavigator), r4);
            },
            getNavigatorToTest1: function (TNavigator, initialUrl, assert, navigatorGenerator) {
                return Bridge.getTypeName(TNavigator);
            },
            getNavigatorToTest2: function (TNavigator, initialUrl, assert, navigatorGenerator) {
                return Bridge.getTypeName(TNavigator);
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.BridgeIssues.Bridge1217", $_);
    
    Bridge.apply($_.Bridge.ClientTest.BridgeIssues.Bridge1217, {
        f1: function () {
            return Bridge.cast(null, Bridge.ClientTest.BridgeIssues.Bridge1217.DemoNavigator);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1217.Navigator');
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1219', {
        statics: {
            testLongJSON: function () {
                var x1 = new Bridge.ClientTest.BridgeIssues.Bridge1219.TestClass1();
                x1.setLongProperty(System.Int64(100));
                Bridge.Test.Assert.areEqual("{\"LongProperty\":100}", System.String.replaceAll(JSON.stringify(x1), " ", ""));
    
                var x2 = new Bridge.ClientTest.BridgeIssues.Bridge1219.TestClass2();
                x2.setULongProperty(System.UInt64(200));
                Bridge.Test.Assert.areEqual("{\"ULongProperty\":200}", System.String.replaceAll(JSON.stringify(x2), " ", ""));
    
                var x3 = new Bridge.ClientTest.BridgeIssues.Bridge1219.TestClass3();
                x3.setDecimalProperty(System.Decimal(300));
                Bridge.Test.Assert.areEqual("{\"DecimalProperty\":300}", System.String.replaceAll(JSON.stringify(x3), " ", ""));
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1219.TestClass1', {
        config: {
            properties: {
                LongProperty: System.Int64(0)
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1219.TestClass2', {
        config: {
            properties: {
                ULongProperty: System.UInt64(0)
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1219.TestClass3', {
        config: {
            properties: {
                DecimalProperty: System.Decimal(0.0)
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge122', {
        statics: {
            nx: 1,
            breaker: null,
            config: {
                init: function () {
                    this.breaker = System.Array.create(0, [[1, 2], [3, 4]], 2, 2);
                }
            },
            test2DArrayConstruction: function () {
                var x = 0;
                var y = 1;
    
                var retval = (x >= 0 && x < Bridge.ClientTest.BridgeIssues.Bridge122.nx && Bridge.ClientTest.BridgeIssues.Bridge122.breaker.length > ((((((x + 1) | 0)) * Bridge.ClientTest.BridgeIssues.Bridge122.nx) | 0))) ? Bridge.ClientTest.BridgeIssues.Bridge122.breaker.get([x, y]) : 0;
    
                Bridge.Test.Assert.areEqual(2, retval);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1220', {
        statics: {
            testConstInGenericClass: function () {
                Bridge.Test.Assert.areEqual(1, Bridge.ClientTest.BridgeIssues.Bridge1220.Class1$1(System.Int32).Const1);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1220.Class1$1', function (T) { return {
        statics: {
            Const1: 1
        }
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1226', {
        statics: {
            DELTA: 1E-15,
            assertValue: function (expected, actual, delta, message) {
                var $t;
                if (delta === void 0) { delta = 1E-15; }
                if (message === void 0) { message = null; }
                var e = System.Double.format(expected, 'G');
                var a = System.Double.format(actual, 'G');
    
                if (!isFinite(expected) || !isFinite(actual)) {
                    Bridge.Test.Assert.areEqual$1(e, a, message);
                    return;
                }
    
                var diff = expected - actual;
                if (diff > delta || diff < -delta) {
                    Bridge.Test.Assert.areEqual$1(e, a, message);
                }
                else  {
                    var m = ($t = message, $t != null ? $t : " " + (diff !== 0 ? "Diff: " + diff + "; Expected: " + e + "; Actual: " + a : ""));
                    Bridge.Test.Assert.true$1(true, m);
                }
            },
            testSinh: function () {
                Bridge.ClientTest.BridgeIssues.Bridge1226.assertValue(-3.626860407847019, Bridge.Math.sinh(-2));
                Bridge.ClientTest.BridgeIssues.Bridge1226.assertValue(-1.1752011936438014, Bridge.Math.sinh(-1));
                Bridge.ClientTest.BridgeIssues.Bridge1226.assertValue(-0.52109530549374738, Bridge.Math.sinh(-0.5));
                Bridge.ClientTest.BridgeIssues.Bridge1226.assertValue(0, Bridge.Math.sinh(0));
                Bridge.ClientTest.BridgeIssues.Bridge1226.assertValue(0.52109530549374738, Bridge.Math.sinh(0.5));
                Bridge.ClientTest.BridgeIssues.Bridge1226.assertValue(1.1752011936438014, Bridge.Math.sinh(1));
                Bridge.ClientTest.BridgeIssues.Bridge1226.assertValue(3.626860407847019, Bridge.Math.sinh(2));
                Bridge.ClientTest.BridgeIssues.Bridge1226.assertValue(Number.NaN, Bridge.Math.sinh(Number.NaN));
                Bridge.ClientTest.BridgeIssues.Bridge1226.assertValue(Number.NEGATIVE_INFINITY, Bridge.Math.sinh(Number.NEGATIVE_INFINITY));
                Bridge.ClientTest.BridgeIssues.Bridge1226.assertValue(Number.POSITIVE_INFINITY, Bridge.Math.sinh(Number.POSITIVE_INFINITY));
            },
            testCosh: function () {
                Bridge.ClientTest.BridgeIssues.Bridge1226.assertValue(3.7621956910836309, Bridge.Math.cosh(-2));
                Bridge.ClientTest.BridgeIssues.Bridge1226.assertValue(1.5430806348152439, Bridge.Math.cosh(-1));
                Bridge.ClientTest.BridgeIssues.Bridge1226.assertValue(1.12762596520638, Bridge.Math.cosh(-0.5));
                Bridge.ClientTest.BridgeIssues.Bridge1226.assertValue(1, Bridge.Math.cosh(0));
                Bridge.ClientTest.BridgeIssues.Bridge1226.assertValue(1.12762596520638, Bridge.Math.cosh(0.5));
                Bridge.ClientTest.BridgeIssues.Bridge1226.assertValue(1.5430806348152439, Bridge.Math.cosh(1));
                Bridge.ClientTest.BridgeIssues.Bridge1226.assertValue(3.7621956910836309, Bridge.Math.cosh(2));
                Bridge.ClientTest.BridgeIssues.Bridge1226.assertValue(Number.NaN, Bridge.Math.cosh(Number.NaN));
                Bridge.ClientTest.BridgeIssues.Bridge1226.assertValue(Number.POSITIVE_INFINITY, Bridge.Math.cosh(Number.NEGATIVE_INFINITY));
                Bridge.ClientTest.BridgeIssues.Bridge1226.assertValue(Number.POSITIVE_INFINITY, Bridge.Math.cosh(Number.POSITIVE_INFINITY));
            },
            testTanh: function () {
                Bridge.ClientTest.BridgeIssues.Bridge1226.assertValue(-0.964027580075817, Bridge.Math.tanh(-2));
                Bridge.ClientTest.BridgeIssues.Bridge1226.assertValue(-0.761594155955765, Bridge.Math.tanh(-1));
                Bridge.ClientTest.BridgeIssues.Bridge1226.assertValue(-0.46211715726001, Bridge.Math.tanh(-0.5));
                Bridge.ClientTest.BridgeIssues.Bridge1226.assertValue(0, Bridge.Math.tanh(0));
                Bridge.ClientTest.BridgeIssues.Bridge1226.assertValue(0.46211715726001, Bridge.Math.tanh(0.5));
                Bridge.ClientTest.BridgeIssues.Bridge1226.assertValue(0.761594155955765, Bridge.Math.tanh(1));
                Bridge.ClientTest.BridgeIssues.Bridge1226.assertValue(0.964027580075817, Bridge.Math.tanh(2));
                Bridge.ClientTest.BridgeIssues.Bridge1226.assertValue(Number.NaN, Bridge.Math.tanh(Number.NaN));
                Bridge.ClientTest.BridgeIssues.Bridge1226.assertValue(-1, Bridge.Math.tanh(Number.NEGATIVE_INFINITY));
                Bridge.ClientTest.BridgeIssues.Bridge1226.assertValue(1, Bridge.Math.tanh(Number.POSITIVE_INFINITY));
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1231', {
        statics: {
            testAutoGeneratedStructMethodName: function () {
                var struct1 = new Demo.Bridge1231.Class1$1.MyStruct(String)("constructor$1", 1);
                var struct2 = struct1.$clone();
                struct2.field = 2;
    
                Bridge.Test.Assert.areEqual(1, struct1.field);
                Bridge.Test.Assert.areEqual(2, struct2.field);
            }
        }
    });
    
    Bridge.define('Demo.Bridge1231.Class1$1', function (T) { return {
    
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1231.I1$1', function (T) { return {
        $interface: true
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1232', {
        statics: {
            testParamsInThisCtorInit: function () {
                var t1 = new Bridge.ClientTest.BridgeIssues.Bridge1232.ClassA("constructor$1", ["a", "b"]);
                Bridge.Test.Assert.areEqual$1(2, t1.getA().length, "Length ab");
                Bridge.Test.Assert.areEqual$1("a", t1.getA()[0], "First ab");
                Bridge.Test.Assert.areEqual$1("b", t1.getA()[1], "Second ab");
                Bridge.Test.Assert.areEqual$1(1, t1.getNumber(), "Number ab");
    
                var t2 = new Bridge.ClientTest.BridgeIssues.Bridge1232.ClassA("constructor$1", ["a", "b", "c"]);
                Bridge.Test.Assert.areEqual$1(3, t2.getA().length, "Length abc");
                Bridge.Test.Assert.areEqual$1("a", t2.getA()[0], "First abc");
                Bridge.Test.Assert.areEqual$1("b", t2.getA()[1], "Second abc");
                Bridge.Test.Assert.areEqual$1("c", t2.getA()[2], "Third abc");
                Bridge.Test.Assert.areEqual$1(1, t2.getNumber(), "Number abc");
    
                var t3 = new Bridge.ClientTest.BridgeIssues.Bridge1232.ClassA("constructor", 3, ["a", "b", "c", "d"]);
                Bridge.Test.Assert.areEqual$1(4, t3.getA().length, "Length abcd");
                Bridge.Test.Assert.areEqual$1("a", t3.getA()[0], "First abcd");
                Bridge.Test.Assert.areEqual$1("b", t3.getA()[1], "Second abcd");
                Bridge.Test.Assert.areEqual$1("c", t3.getA()[2], "Third abcd");
                Bridge.Test.Assert.areEqual$1("d", t3.getA()[3], "Forth abcd");
                Bridge.Test.Assert.areEqual$1(3, t3.getNumber(), "Number abcd");
            },
            testExtendedParamsInThisCtorInit: function () {
                var t1 = new Bridge.ClientTest.BridgeIssues.Bridge1232.ClassB("constructor$1", "a", ["b"]);
                Bridge.Test.Assert.areEqual$1(1, t1.getA().length, "Length ab");
                Bridge.Test.Assert.areEqual$1("b", t1.getA()[0], "First ab");
                Bridge.Test.Assert.areEqual$1("a", t1.getS(), "S ab");
                Bridge.Test.Assert.areEqual$1(1, t1.getNumber(), "Number ab");
    
                var t2 = new Bridge.ClientTest.BridgeIssues.Bridge1232.ClassB("constructor$2", ["a", "b", "c"]);
                Bridge.Test.Assert.areEqual$1(3, t2.getA().length, "Length abc");
                Bridge.Test.Assert.areEqual$1("a", t2.getA()[0], "First abc");
                Bridge.Test.Assert.areEqual$1("b", t2.getA()[1], "Second abc");
                Bridge.Test.Assert.areEqual$1("c", t2.getA()[2], "Third abc");
                Bridge.Test.Assert.areEqual$1(null, t2.getS(), "S abc");
                Bridge.Test.Assert.areEqual$1(1, t2.getNumber(), "Number abc");
    
                var t3 = new Bridge.ClientTest.BridgeIssues.Bridge1232.ClassB("constructor$1", "e", ["a", "b", "c", "d"]);
                Bridge.Test.Assert.areEqual$1(4, t3.getA().length, "Length abcd");
                Bridge.Test.Assert.areEqual$1("a", t3.getA()[0], "First abcd");
                Bridge.Test.Assert.areEqual$1("b", t3.getA()[1], "Second abcd");
                Bridge.Test.Assert.areEqual$1("c", t3.getA()[2], "Third abcd");
                Bridge.Test.Assert.areEqual$1("d", t3.getA()[3], "Forth abcd");
                Bridge.Test.Assert.areEqual$1("e", t3.getS(), "S abcd");
                Bridge.Test.Assert.areEqual$1(1, t3.getNumber(), "Number abcd");
    
                var t4 = new Bridge.ClientTest.BridgeIssues.Bridge1232.ClassB("constructor", 7, ["a", "b", "c", "d", "e"]);
                Bridge.Test.Assert.areEqual$1(5, t4.getA().length, "Length abcde");
                Bridge.Test.Assert.areEqual$1("a", t4.getA()[0], "First abcde");
                Bridge.Test.Assert.areEqual$1("b", t4.getA()[1], "Second abcde");
                Bridge.Test.Assert.areEqual$1("c", t4.getA()[2], "Third abcde");
                Bridge.Test.Assert.areEqual$1("d", t4.getA()[3], "Forth abcde");
                Bridge.Test.Assert.areEqual$1("e", t4.getA()[4], "Fifth abcde");
                Bridge.Test.Assert.areEqual$1(null, t4.getS(), "S abcde");
                Bridge.Test.Assert.areEqual$1(7, t4.getNumber(), "Number abcde");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1232.ClassA', {
        config: {
            properties: {
                A: null,
                Number: 0
            }
        },
        constructor: function (a, str) {
            if (str === void 0) { str = []; }
    
            this.setA(str);
            this.setNumber(a);
        },
        constructor$1: function (str) {
            if (str === void 0) { str = []; }
    
            Bridge.ClientTest.BridgeIssues.Bridge1232.ClassA.prototype.$constructor.call(this, 1, str);
    
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1232.ClassB', {
        config: {
            properties: {
                A: null,
                S: null,
                Number: 0
            }
        },
        constructor: function (a, str) {
            if (str === void 0) { str = []; }
    
            this.setA(str);
            this.setNumber(a);
        },
        constructor$2: function (str) {
            if (str === void 0) { str = []; }
    
            Bridge.ClientTest.BridgeIssues.Bridge1232.ClassB.prototype.$constructor.call(this, 1, str);
    
        },
        constructor$1: function (s, str) {
            if (str === void 0) { str = []; }
    
            Bridge.ClientTest.BridgeIssues.Bridge1232.ClassB.prototype.constructor$2.call(this, str);
    
            this.setS(s);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1241', {
        statics: {
            testMarkElement: function () {
                var root = document.getElementById("qunit-fixture");
    
                var markElement1 = document.createElement('mark');
                Bridge.Test.Assert.notNull$1(markElement1, "MarkElement created");
                Bridge.Test.Assert.areEqual(markElement1.tagName, "MARK");
    
                var p = document.createElement('p');
                root.appendChild(p);
    
                markElement1.id = "markElement1";
                p.appendChild(markElement1);
                markElement1.innerHTML = "I'm highlighted";
    
                var m1 = document.getElementById("markElement1");
                Bridge.Test.Assert.areEqual$1("I'm highlighted", m1.innerHTML, "m1.InnerHTML");
    
                var markElement2 = document.createElement('mark');
                markElement2.id = "markElement2";
                p.appendChild(markElement2);
                markElement2.innerHTML = "Me too";
    
                var m2 = document.getElementById("markElement2");
                Bridge.Test.Assert.areEqual$1("Me too", m2.innerHTML, "m2.InnerHTML");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1253', {
        statics: {
            testDefaultEnumMode: function () {
                var numbers = Bridge.ClientTest.BridgeIssues.Bridge1253.Numbers;
                Bridge.Test.Assert.areEqual(Bridge.ClientTest.BridgeIssues.Bridge1253.Numbers.ONE, numbers.ONE);
                Bridge.Test.Assert.areEqual(Bridge.ClientTest.BridgeIssues.Bridge1253.Numbers.TWO, numbers.TWO);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1253.Numbers', {
        statics: {
            ONE: 1,
            TWO: 2
        },
        $enum: true
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1256', {
        statics: {
            reservedWords: null,
            boolean: true,
            is: true,
            config: {
                init: function () {
                    this.reservedWords = ["abstract", "arguments", "as", "boolean", "break", "byte", "case", "catch", "char", "class", "continue", "const", "debugger", "default", "delete", "do", "double", "else", "enum", "eval", "export", "extends", "false", "final", "finally", "float", "for", "function", "goto", "if", "implements", "import", "in", "instanceof", "int", "interface", "let", "long", "namespace", "native", "new", "null", "package", "private", "protected", "public", "return", "short", "static", "super", "switch", "synchronized", "this", "throw", "throws", "transient", "true", "try", "typeof", "use", "var", "void", "volatile", "window", "while", "with", "yield"];
                }
            },
            isReservedWord: function (word) {
                {
                    return System.Linq.Enumerable.from(Bridge.ClientTest.BridgeIssues.Bridge1256.reservedWords).contains(word);
                }
            },
            testFields: function (o) {
                var $t;
                if (o == null) {
                    Bridge.Test.Assert.fail$1("Object cannot be null");
                    return;
                }
    
                $t = Bridge.getEnumerator(Bridge.ClientTest.BridgeIssues.Bridge1256.reservedWords);
                while ($t.moveNext()) {
                    var name = $t.getCurrent();
                    Bridge.Test.Assert.areEqual$1(true, o[name], "Expected true for property " + name);
                }
            },
            testMethods: function (o) {
                var $t;
                if (o == null) {
                    Bridge.Test.Assert.fail$1("Object cannot be null");
                    return;
                }
    
                $t = Bridge.getEnumerator(Bridge.ClientTest.BridgeIssues.Bridge1256.reservedWords);
                while ($t.moveNext()) {
                    var name = $t.getCurrent();
                    Bridge.Test.Assert.notNull$1(o[name], "Member " + name + " exists");
                }
            },
            let: function () {
                return 5;
            },
            testCaseBooleanIsLet: function () {
                var $let = 1;
                $let = 2;
                var scope = Bridge.ClientTest.BridgeIssues.Bridge1256;
    
                Bridge.Test.Assert.true(scope.boolean);
                Bridge.Test.Assert.true(scope.is);
                Bridge.Test.Assert.true(scope.let);
                Bridge.Test.Assert.true(Bridge.ClientTest.BridgeIssues.Bridge1256.boolean);
                Bridge.Test.Assert.true(Bridge.ClientTest.BridgeIssues.Bridge1256.is);
                Bridge.Test.Assert.areEqual(2, $let);
                Bridge.Test.Assert.areEqual(5, Bridge.ClientTest.BridgeIssues.Bridge1256.let());
            },
            testReservedFields: function () {
                var a = new Bridge.ClientTest.BridgeIssues.Bridge1256.ReservedFields();
    
                Bridge.ClientTest.BridgeIssues.Bridge1256.testFields(a);
            },
            testReservedMethods: function () {
                var a = new Bridge.ClientTest.BridgeIssues.Bridge1256.ReservedMethods();
    
                Bridge.ClientTest.BridgeIssues.Bridge1256.testMethods(a);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1256.ReservedFields', {
        abstract: true,
        arguments: true,
        as: true,
        boolean: true,
        break: true,
        byte: true,
        case: true,
        catch: true,
        char: true,
        class: true,
        continue: true,
        const: true,
        debugger: true,
        default: true,
        delete: true,
        do: true,
        double: true,
        else: true,
        enum: true,
        eval: true,
        export: true,
        extends: true,
        false: true,
        final: true,
        finally: true,
        float: true,
        for: true,
        function: true,
        goto: true,
        if: true,
        implements: true,
        import: true,
        in: true,
        instanceof: true,
        int: true,
        interface: true,
        let: true,
        long: true,
        namespace: true,
        native: true,
        new: true,
        null: true,
        package: true,
        private: true,
        protected: true,
        public: true,
        return: true,
        short: true,
        static: true,
        super: true,
        switch: true,
        synchronized: true,
        this: true,
        throw: true,
        throws: true,
        transient: true,
        true: true,
        try: true,
        typeof: true,
        use: true,
        var: true,
        void: true,
        volatile: true,
        window: true,
        while: true,
        with: true,
        yield: true
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1256.ReservedMethods', {
        abstract: function () {
            return 1;
        },
        arguments: function () {
            return 2;
        },
        as: function () {
            return 3;
        },
        boolean: function () {
            return 4;
        },
        break: function () {
            return 5;
        },
        byte: function () {
            return 6;
        },
        case: function () {
            return 7;
        },
        catch: function () {
            return 8;
        },
        char: function () {
            return 9;
        },
        class: function () {
            return 10;
        },
        continue: function () {
            return 11;
        },
        const: function () {
            return 12;
        },
        constructor$1: function () {
            return 13;
        },
        debugger: function () {
            return 14;
        },
        default: function () {
            return 15;
        },
        delete: function () {
            return 16;
        },
        do: function () {
            return 17;
        },
        double: function () {
            return 18;
        },
        else: function () {
            return 19;
        },
        enum: function () {
            return 20;
        },
        eval: function () {
            return 21;
        },
        export: function () {
            return 22;
        },
        extends: function () {
            return 23;
        },
        false: function () {
            return 24;
        },
        final: function () {
            return 25;
        },
        finally: function () {
            return 26;
        },
        float: function () {
            return 27;
        },
        for: function () {
            return 28;
        },
        function: function () {
            return 29;
        },
        goto: function () {
            return 30;
        },
        if: function () {
            return 31;
        },
        implements: function () {
            return 32;
        },
        import: function () {
            return 33;
        },
        in: function () {
            return 34;
        },
        instanceof: function () {
            return 35;
        },
        int: function () {
            return 36;
        },
        interface: function () {
            return 37;
        },
        let: function () {
            return 38;
        },
        long: function () {
            return 39;
        },
        namespace: function () {
            return 40;
        },
        native: function () {
            return 41;
        },
        new: function () {
            return 42;
        },
        null: function () {
            return 43;
        },
        package: function () {
            return 44;
        },
        private: function () {
            return 45;
        },
        protected: function () {
            return 46;
        },
        public: function () {
            return 47;
        },
        return: function () {
            return 48;
        },
        short: function () {
            return 49;
        },
        static: function () {
            return 50;
        },
        super: function () {
            return 51;
        },
        switch: function () {
            return 52;
        },
        synchronized: function () {
            return 53;
        },
        this: function () {
            return 54;
        },
        throw: function () {
            return 55;
        },
        throws: function () {
            return 56;
        },
        transient: function () {
            return 57;
        },
        true: function () {
            return 58;
        },
        try: function () {
            return 59;
        },
        typeof: function () {
            return 60;
        },
        use: function () {
            return 61;
        },
        var: function () {
            return 62;
        },
        void: function () {
            return 63;
        },
        volatile: function () {
            return 64;
        },
        window: function () {
            return 65;
        },
        while: function () {
            return 65;
        },
        with: function () {
            return 66;
        },
        yield: function () {
            return 67;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1260', {
        statics: {
            testStringTrim: function () {
                var s1 = "[Click me]";
                Bridge.Test.Assert.areEqual("Click me", System.String.trim(s1, [91, 93]));
    
                var s2 = "^Click me^";
                Bridge.Test.Assert.areEqual("Click me", System.String.trim(s2, [94]));
    
                var s3 = "\\Click me\\";
                Bridge.Test.Assert.areEqual("Click me", System.String.trim(s3, [92]));
            },
            testStringTrimStart: function () {
                var s1 = "[Click me]";
                Bridge.Test.Assert.areEqual("Click me]", System.String.trimStart(s1, [91, 93]));
    
                var s2 = "^Click me^";
                Bridge.Test.Assert.areEqual("Click me^", System.String.trimStart(s2, [94]));
    
                var s3 = "\\Click me\\";
                Bridge.Test.Assert.areEqual("Click me\\", System.String.trimStart(s3, [92]));
            },
            testStringTrimEnd: function () {
                var s1 = "[Click me]";
                Bridge.Test.Assert.areEqual("[Click me", System.String.trimEnd(s1, [91, 93]));
    
                var s2 = "^Click me^";
                Bridge.Test.Assert.areEqual("^Click me", System.String.trimEnd(s2, [94]));
    
                var s3 = "\\Click me\\";
                Bridge.Test.Assert.areEqual("\\Click me", System.String.trimEnd(s3, [92]));
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1264', {
        statics: {
            testDefaultGetHashCodeIsRepeatable: function () {
                var foo = new Bridge.ClientTest.BridgeIssues.Bridge1264.Foo();
                var h1 = Bridge.getHashCode(foo);
                var h2 = Bridge.getHashCode(foo);
    
                Bridge.Test.Assert.areEqual(h1, h2);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1264.Bar');
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1264.Foo', {
        _bck: null,
        config: {
            init: function () {
                this._bck = new Bridge.ClientTest.BridgeIssues.Bridge1264.Bar();
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1266', {
        statics: {
            testArrayToEnumerable: function () {
                var $t;
                var arr = [1, 2, 3];
                var x = System.Array.toEnumerable(System.Linq.Enumerable.from(arr).toArray());
                var index = 0;
                $t = Bridge.getEnumerator(x);
                while ($t.moveNext()) {
                    var i = $t.getCurrent();
                    Bridge.Test.Assert.areEqual(arr[Bridge.identity(index, (index = (index + 1) | 0))], i);
                }
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1296', {
        statics: {
            test: function (value) {
                return value;
            },
            testAnyNonExternal: function (value) {
                return value;
            },
            testImplicitOperator: function () {
                var id = Bridge.ClientTest.BridgeIssues.Bridge1296.MessageId.op_Explicit(12);
                Bridge.Test.Assert.areEqual(12, id.getValue());
    
                var returnedId = Bridge.ClientTest.BridgeIssues.Bridge1296.test(Bridge.ClientTest.BridgeIssues.Bridge1296.MessageId.op_Implicit(id));
                Bridge.Test.Assert.areEqual(12, returnedId);
            },
            testIgnoreCast: function () {
                var id = Bridge.ClientTest.BridgeIssues.Bridge1296.MessageId.op_Explicit(12);
                var returnedId = Bridge.ClientTest.BridgeIssues.Bridge1296.testAnyNonExternal(Bridge.ClientTest.BridgeIssues.Bridge1296.MessageId.op_Implicit(id));
                Bridge.Test.Assert.areEqual(12, returnedId);
            },
            testExternalImplicit: function () {
                var idAsBlah = Bridge.ClientTest.BridgeIssues.Bridge1296.BlahId.op_Implicit(Bridge.ClientTest.BridgeIssues.Bridge1296.MessageStructId.op_Implicit((new Bridge.ClientTest.BridgeIssues.Bridge1296.MessageStructId())));
                Bridge.Test.Assert.areEqual(123, idAsBlah.getValue());
    
                var idAsIgnoreCastBlah = Bridge.ClientTest.BridgeIssues.Bridge1296.MessageStructId.op_Implicit((new Bridge.ClientTest.BridgeIssues.Bridge1296.MessageStructId()));
                Bridge.Test.Assert.areEqual(123, idAsIgnoreCastBlah);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1296.AnyNonExternal$2', {
        statics: {
            op_Implicit: function (t) {
                throw new System.InvalidCastException();
            },
            op_Implicit$1: function (t) {
                throw new System.InvalidCastException();
            },
            op_Explicit: function (value) {
                throw new System.InvalidCastException();
            },
            op_Explicit$1: function (value) {
                throw new System.InvalidCastException();
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1296.BlahId', {
        statics: {
            op_Implicit: function (value) {
                return new Bridge.ClientTest.BridgeIssues.Bridge1296.BlahId(value);
            }
        },
        config: {
            properties: {
                Value: 0
            }
        },
        constructor: function (value) {
            this.setValue(value);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1296.MessageId', {
        statics: {
            op_Explicit: function (value) {
                return Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge1296.MessageId(), {
                    setValue: value
                } );
            },
            op_Implicit: function (id) {
                return id.getValue();
            },
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge1296.MessageId(); }
        },
        config: {
            properties: {
                Value: 0
            }
        },
        constructor: function () {
        },
        $struct: true,
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + -1223576436;
            hash = hash * 23 + (this.Value == null ? 0 : Bridge.getHashCode(this.Value));
            return hash;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.BridgeIssues.Bridge1296.MessageId)) {
                return false;
            }
            return Bridge.equals(this.Value, o.Value);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.BridgeIssues.Bridge1296.MessageId();
            s.Value = this.Value;
            return s;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1296.MessageStructId', {
        statics: {
            op_Implicit: function (id) {
                return 123;
            },
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge1296.MessageStructId(); }
        },
        $struct: true,
        $clone: function (to) { return this; }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1304', {
        statics: {
            output: null,
            clearOutput: function () {
                System.Console.output = "";
            },
            resetOutput: function () {
                System.Console.output = null;
            },
            testWriteFormatString: function () {
                System.Console.log(System.String.format("{0}", 1));
                Bridge.Test.Assert.areEqual("1", System.Console.output);
                Bridge.ClientTest.BridgeIssues.Bridge1304.clearOutput();
    
                System.Console.log(System.String.format("{0} {1}", 1, 2));
                Bridge.Test.Assert.areEqual("1 2", System.Console.output);
                Bridge.ClientTest.BridgeIssues.Bridge1304.clearOutput();
    
                System.Console.log(System.String.format("{0} {1} {2}", 1, 2, 3));
                Bridge.Test.Assert.areEqual("1 2 3", System.Console.output);
                Bridge.ClientTest.BridgeIssues.Bridge1304.clearOutput();
    
                System.Console.log(System.String.format("{0} {1} {2} {3}", 1, 2, 3, 4));
                Bridge.Test.Assert.areEqual("1 2 3 4", System.Console.output);
                Bridge.ClientTest.BridgeIssues.Bridge1304.clearOutput();
    
                System.Console.log(System.String.format("{0} {1} {2} {3} {4}", 1, 2, 3, 4, "5"));
                Bridge.Test.Assert.areEqual("1 2 3 4 5", System.Console.output);
            },
            testWriteLineFormatString: function () {
                System.Console.log(System.String.format("{0}", 1));
                Bridge.Test.Assert.areEqual("1", System.Console.output);
                Bridge.ClientTest.BridgeIssues.Bridge1304.clearOutput();
    
                System.Console.log(System.String.format("{0} {1}", 1, 2));
                Bridge.Test.Assert.areEqual("1 2", System.Console.output);
                Bridge.ClientTest.BridgeIssues.Bridge1304.clearOutput();
    
                System.Console.log(System.String.format("{0} {1} {2}", 1, 2, 3));
                Bridge.Test.Assert.areEqual("1 2 3", System.Console.output);
                Bridge.ClientTest.BridgeIssues.Bridge1304.clearOutput();
    
                System.Console.log(System.String.format("{0} {1} {2} {3}", 1, 2, 3, 4));
                Bridge.Test.Assert.areEqual("1 2 3 4", System.Console.output);
                Bridge.ClientTest.BridgeIssues.Bridge1304.clearOutput();
    
                System.Console.log(System.String.format("{0} {1} {2} {3} {4}", 1, 2, 3, 4, "5"));
                Bridge.Test.Assert.areEqual("1 2 3 4 5", System.Console.output);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1305', {
        statics: {
            currentInt: 0,
            currentDataClass: null,
            currentDataStruct: null,
            testAsyncIntReturnWithAssigmentFromResult: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    done, 
                    result, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1], $step);
                            switch ($step) {
                                case 0: {
                                    done = Bridge.Test.Assert.async();
                                    
                                    $task1 = Bridge.ClientTest.BridgeIssues.Bridge1305.testIntResult();
                                    $step = 1;
                                    $task1.continueWith($asyncBody, true);
                                    return;
                                }
                                case 1: {
                                    $taskResult1 = $task1.getAwaitedResult();
                                    result = $taskResult1;
                                    Bridge.Test.Assert.areEqual(10, result);
                                    Bridge.Test.Assert.areEqual(10, Bridge.ClientTest.BridgeIssues.Bridge1305.currentInt);
                                    
                                    done();
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);
    
                $asyncBody();
            },
            testAsyncDataClassReturnWithAssigmentFromResult: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    done, 
                    result, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1], $step);
                            switch ($step) {
                                case 0: {
                                    done = Bridge.Test.Assert.async();
                                    
                                    $task1 = Bridge.ClientTest.BridgeIssues.Bridge1305.testClassResult();
                                    $step = 1;
                                    $task1.continueWith($asyncBody, true);
                                    return;
                                }
                                case 1: {
                                    $taskResult1 = $task1.getAwaitedResult();
                                    result = $taskResult1;
                                    Bridge.Test.Assert.notNull(result);
                                    Bridge.Test.Assert.areEqual(11, result.getValue());
                                    Bridge.Test.Assert.notNull(Bridge.ClientTest.BridgeIssues.Bridge1305.currentDataClass);
                                    Bridge.Test.Assert.areEqual(11, Bridge.ClientTest.BridgeIssues.Bridge1305.currentDataClass.getValue());
                                    
                                    done();
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);
    
                $asyncBody();
            },
            testAsyncDataStructReturnWithAssigmentFromResult: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    done, 
                    result, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1], $step);
                            switch ($step) {
                                case 0: {
                                    done = Bridge.Test.Assert.async();
                                    
                                    $task1 = Bridge.ClientTest.BridgeIssues.Bridge1305.testStructResult();
                                    $step = 1;
                                    $task1.continueWith($asyncBody, true);
                                    return;
                                }
                                case 1: {
                                    $taskResult1 = $task1.getAwaitedResult();
                                    result = $taskResult1;
                                    Bridge.Test.Assert.notNull(result);
                                    Bridge.Test.Assert.areEqual(12, result.getValue());
                                    Bridge.Test.Assert.notNull(Bridge.ClientTest.BridgeIssues.Bridge1305.currentDataStruct);
                                    Bridge.Test.Assert.areEqual(12, Bridge.ClientTest.BridgeIssues.Bridge1305.currentDataStruct.getValue());
                                    
                                    done();
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);
    
                $asyncBody();
            },
            testIntResult: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = System.Threading.Tasks.Task.fromResult(10);
                                        $step = 1;
                                        $task1.continueWith($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(($t = $taskResult1, Bridge.ClientTest.BridgeIssues.Bridge1305.currentInt = $t, $t));
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);
    
                $asyncBody();
                return $tcs.task;
            },
            testClassResult: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = System.Threading.Tasks.Task.fromResult(Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge1305.DataClass(), {
                                            setValue: 11
                                        } ));
                                        $step = 1;
                                        $task1.continueWith($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(($t = $taskResult1, Bridge.ClientTest.BridgeIssues.Bridge1305.currentDataClass = $t, $t));
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);
    
                $asyncBody();
                return $tcs.task;
            },
            testStructResult: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $t, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = System.Threading.Tasks.Task.fromResult(Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge1305.DataStruct(), {
                                            setValue: 12
                                        } ));
                                        $step = 1;
                                        $task1.continueWith($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult(($t = $taskResult1, Bridge.ClientTest.BridgeIssues.Bridge1305.currentDataStruct = $t, $t));
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);
    
                $asyncBody();
                return $tcs.task;
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1305.DataClass', {
        config: {
            properties: {
                Value: 0
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1305.DataStruct', {
        config: {
            properties: {
                Value: 0
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1311', {
        statics: {
            testEnumNumberParsing: function () {
                var ec = System.Enum.parse(Bridge.ClientTest.BridgeIssues.Bridge1311.SimpleEnum, "C");
                Bridge.Test.Assert.areEqual$1(4, ec, "C");
    
                var e3 = System.Enum.parse(Bridge.ClientTest.BridgeIssues.Bridge1311.SimpleEnum, "3");
                Bridge.Test.Assert.areEqual$1(3, e3, "3");
    
    
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1311.SimpleEnum', {
        statics: {
            A: 0,
            B: 3,
            C: 4,
            D: 10
        },
        $enum: true
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1313', {
        statics: {
            testInterfaceDefaultParameter: function () {
                var value = new Bridge.ClientTest.BridgeIssues.Bridge1313.Class();
                Bridge.Test.Assert.areEqual(1, value.function(1));
            },
            testClassNotDefaultParameter: function () {
                var value = new Bridge.ClientTest.BridgeIssues.Bridge1313.Class();
                Bridge.Test.Assert.areEqual(2, value.function(2));
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1313.IInterface', {
        $interface: true
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1316', {
        statics: {
            testUseCase: function () {
                var v = 0;
                var s = v + "";
    
                Bridge.Test.Assert.areEqual("0", s);
            },
            testStringConcatObject: function () {
                var o1 = 3;
                var s1 = [o1].join('');
    
                Bridge.Test.Assert.areEqual("3", s1);
    
                var o2 = null;
                var s2 = [o2].join('');
    
                Bridge.Test.Assert.areEqual("", s2);
            },
            testStringConcatEnumerableString: function () {
                var e1 = ["1", "2"];
                var s1 = Bridge.toArray(e1).join('');
    
                Bridge.Test.Assert.areEqual$1("12", s1, "All not null");
    
                var e2 = ["3", null, "4"];
                var s2 = Bridge.toArray(e2).join('');
    
                Bridge.Test.Assert.areEqual$1("34", s2, "One is null");
    
                var e3 = [];
                var s3 = Bridge.toArray(e3).join('');
    
                Bridge.Test.Assert.areEqual$1("", s3, "Empty");
            },
            testStringConcatEnumerableGeneric: function () {
                var e1 = [1, "2"];
                var s1 = Bridge.toArray(e1).join('');
    
                Bridge.Test.Assert.areEqual$1("12", s1, "All not null");
    
                var e2 = ["3", null, 4];
                var s2 = Bridge.toArray(e2).join('');
    
                Bridge.Test.Assert.areEqual$1("34", s2, "One is null");
    
                var e3 = [];
                var s3 = Bridge.toArray(e3).join('');
    
                Bridge.Test.Assert.areEqual$1("", s3, "Empty");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1328', {
        statics: {
            testOptionalParamsForClasses: function () {
                var l1 = new Bridge.ClientTest.BridgeIssues.Bridge1328.ClassLink("url", "test", "some");
                Bridge.Test.Assert.areEqual("some", l1.name);
    
                var l2 = new Bridge.ClientTest.BridgeIssues.Bridge1328.ClassLink2("url2", "test2", void 0);
                Bridge.Test.Assert.notNull(l2.name);
    
                var l3 = new Bridge.ClientTest.BridgeIssues.Bridge1328.ClassLink3("url3", "test3", void 0);
                Bridge.Test.Assert.areEqual("url3", l3.getUrl());
                Bridge.Test.Assert.areEqual("test3", l3.getText());
                Bridge.Test.Assert.notNull(l3.name.$clone());
                Bridge.Test.Assert.areEqual(0, l3.name.getValue());
            },
            testOptionalParamsForStructs: function () {
                var l1 = new Bridge.ClientTest.BridgeIssues.Bridge1328.StructLink("constructor$1", "url", "test", "some");
                Bridge.Test.Assert.areEqual("some", l1.name);
    
                var l2 = new Bridge.ClientTest.BridgeIssues.Bridge1328.StructLink2("constructor$1", "url2", "test2", void 0);
                Bridge.Test.Assert.notNull(l2.name);
    
                var l3 = new Bridge.ClientTest.BridgeIssues.Bridge1328.StructLink3("constructor$1", "url3", "test3", void 0);
                Bridge.Test.Assert.areEqual("url3", l3.getUrl());
                Bridge.Test.Assert.areEqual("test3", l3.getText());
                Bridge.Test.Assert.notNull(l3.name.$clone());
                Bridge.Test.Assert.areEqual(0, l3.name.getValue());
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1328.ClassLink', {
        name: null,
        constructor: function (url, text, name) {
            if (name === void 0) { name = "some"; }
    
            this.name = name;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1328.ClassLink2', {
        config: {
            init: function () {
                this.name = new Bridge.ClientTest.BridgeIssues.Bridge1328.Optional2$1(String)();
            }
        },
        constructor: function (url, text, name) {
            if (name === void 0) { name = new Bridge.ClientTest.BridgeIssues.Bridge1328.Optional2$1(String)(); }
    
            this.name = name;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1328.ClassLink3', {
        config: {
            properties: {
                Url: null,
                Text: null
            },
            init: function () {
                this.name = new Bridge.ClientTest.BridgeIssues.Bridge1328.Optional3$1(System.Int32)();
            }
        },
        constructor: function (url, text, name) {
            if (name === void 0) { name = new Bridge.ClientTest.BridgeIssues.Bridge1328.Optional3$1(System.Int32)(); }
    
            this.name = name.$clone();
            this.setUrl(url);
            this.setText(text);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1328.Optional2$1', function (T) { return {
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge1328.Optional2$1(T)(); }
        },
        $struct: true,
        $clone: function (to) { return this; }
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1328.Optional3$1', function (T) { return {
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge1328.Optional3$1(T)(); }
        },
        config: {
            properties: {
                Value: Bridge.getDefaultValue(T)
            }
        },
        constructor$1: function (v) {
            Bridge.ClientTest.BridgeIssues.Bridge1328.Optional3$1(T).prototype.$constructor.call(this);
    
            this.setValue(v);
        },
        constructor: function () {
        },
        $struct: true,
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + -1469106983;
            hash = hash * 23 + (this.Value == null ? 0 : Bridge.getHashCode(this.Value));
            return hash;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.BridgeIssues.Bridge1328.Optional3$1(T))) {
                return false;
            }
            return Bridge.equals(this.Value, o.Value);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.BridgeIssues.Bridge1328.Optional3$1(T)();
            s.Value = this.Value;
            return s;
        }
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1328.StructLink', {
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge1328.StructLink(); }
        },
        name: null,
        constructor$1: function (url, text, name) {
            if (name === void 0) { name = "some"; }
    
            Bridge.ClientTest.BridgeIssues.Bridge1328.StructLink.prototype.$constructor.call(this);
    
            this.name = name;
        },
        constructor: function () {
        },
        $struct: true,
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 1552938783;
            hash = hash * 23 + (this.name == null ? 0 : Bridge.getHashCode(this.name));
            return hash;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.BridgeIssues.Bridge1328.StructLink)) {
                return false;
            }
            return Bridge.equals(this.name, o.name);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.BridgeIssues.Bridge1328.StructLink();
            s.name = this.name;
            return s;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1328.StructLink2', {
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge1328.StructLink2(); }
        },
        config: {
            init: function () {
                this.name = new Bridge.ClientTest.BridgeIssues.Bridge1328.Optional2$1(String)();
            }
        },
        constructor$1: function (url, text, name) {
            if (name === void 0) { name = new Bridge.ClientTest.BridgeIssues.Bridge1328.Optional2$1(String)(); }
    
            Bridge.ClientTest.BridgeIssues.Bridge1328.StructLink2.prototype.$constructor.call(this);
    
            this.name = name;
        },
        constructor: function () {
        },
        $struct: true,
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 344944561;
            hash = hash * 23 + (this.name == null ? 0 : Bridge.getHashCode(this.name));
            return hash;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.BridgeIssues.Bridge1328.StructLink2)) {
                return false;
            }
            return Bridge.equals(this.name, o.name);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.BridgeIssues.Bridge1328.StructLink2();
            s.name = this.name;
            return s;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1328.StructLink3', {
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge1328.StructLink3(); }
        },
        config: {
            properties: {
                Url: null,
                Text: null
            },
            init: function () {
                this.name = new Bridge.ClientTest.BridgeIssues.Bridge1328.Optional3$1(System.Int32)();
            }
        },
        constructor$1: function (url, text, name) {
            if (name === void 0) { name = new Bridge.ClientTest.BridgeIssues.Bridge1328.Optional3$1(System.Int32)(); }
    
            Bridge.ClientTest.BridgeIssues.Bridge1328.StructLink3.prototype.$constructor.call(this);
    
            this.name = name.$clone();
            this.setUrl(url);
            this.setText(text);
        },
        constructor: function () {
        },
        $struct: true,
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 344944560;
            hash = hash * 23 + (this.name == null ? 0 : Bridge.getHashCode(this.name));
            hash = hash * 23 + (this.Url == null ? 0 : Bridge.getHashCode(this.Url));
            hash = hash * 23 + (this.Text == null ? 0 : Bridge.getHashCode(this.Text));
            return hash;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.BridgeIssues.Bridge1328.StructLink3)) {
                return false;
            }
            return Bridge.equals(this.name, o.name) && Bridge.equals(this.Url, o.Url) && Bridge.equals(this.Text, o.Text);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.BridgeIssues.Bridge1328.StructLink3();
            s.name = this.name;
            s.Url = this.Url;
            s.Text = this.Text;
            return s;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1339', {
        statics: {
            testAccessingConstantsFromDerivedClass: function () {
                var s = "ing";
    
                Bridge.Test.Assert.areEqual("String", Bridge.ClientTest.BridgeIssues.Bridge1339.FooBase.Bar + s);
                Bridge.Test.Assert.areEqual("String", Bridge.ClientTest.BridgeIssues.Bridge1339.FooBase.Bar + s);
                Bridge.Test.Assert.areEqual("String", Bridge.ClientTest.BridgeIssues.Bridge1339.FooBase.Bar + s);
    
                Bridge.Test.Assert.areEqual("Doing", Bridge.ClientTest.BridgeIssues.Bridge1339.Foo3.Bar + s);
                Bridge.Test.Assert.areEqual("Doing", Bridge.ClientTest.BridgeIssues.Bridge1339.Foo3.Bar + s);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1339.FooBase', {
        statics: {
            Bar: "Str"
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1340', {
        statics: {
            testStructGenericMembersDefaultValue: function () {
                var o = new Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(System.Int32)("constructor");
    
                Bridge.Test.Assert.areEqual$1(0, o.getValue1(), "int 1");
                Bridge.Test.Assert.areEqual$1(0, o.value2, "int 2");
    
                var o1 = new Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(System.Decimal)("constructor");
    
                Bridge.Test.Assert.areEqual$1(System.Decimal(0.0), o1.getValue1(), "decimal 1");
                Bridge.Test.Assert.areEqual$1(System.Decimal(0.0), o1.value2, "decimal 2");
    
                var o2 = new Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(System.Int64)("constructor");
    
                Bridge.Test.Assert.areEqual$1(System.Int64(0), o2.getValue1(), "long 1");
                Bridge.Test.Assert.areEqual$1(System.Int64(0), o2.value2, "long 2");
    
                var o3 = new Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(Boolean)("constructor");
    
                Bridge.Test.Assert.areEqual$1(false, o3.getValue1(), "bool 1");
                Bridge.Test.Assert.areEqual$1(false, o3.value2, "bool 2");
    
                var o4 = new Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(String)("constructor");
    
                Bridge.Test.Assert.null$1(o4.getValue1(), "string 1");
                Bridge.Test.Assert.null$1(o4.value2, "string 2");
    
                var o5 = new Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(System.Int32))("constructor");
    
                Bridge.Test.Assert.notNull$1(o5.getValue1().$clone(), "Data<int> 1");
                Bridge.Test.Assert.areEqual$1(0, o5.getValue1().getValue1(), "Data<int>.Value1 1");
                Bridge.Test.Assert.areEqual$1(0, o5.getValue1().value2, "Data<int>.Value1 2");
                Bridge.Test.Assert.notNull$1(o5.value2.$clone(), "Data<int> 2");
                Bridge.Test.Assert.areEqual$1(0, o5.value2.getValue1(), "Data<int>.Value2 1");
                Bridge.Test.Assert.areEqual$1(0, o5.value2.value2, "Data<int>.Value2 2");
    
                var o6 = new Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(Bridge.ClientTest.BridgeIssues.Bridge1340.DataClass$1(System.Int32))("constructor");
    
                Bridge.Test.Assert.null$1(o6.getValue1(), "DataClass<int> 1");
                Bridge.Test.Assert.null$1(o6.value2, "DataClass<int> 2");
            },
            testStructTwoGenericMembersDefaultValue: function () {
                var o = new Bridge.ClientTest.BridgeIssues.Bridge1340.Data$2(System.Int32,System.Decimal)();
    
                Bridge.Test.Assert.areEqual$1(0, o.getValue1(), "int 1");
                Bridge.Test.Assert.areEqual$1(System.Decimal(0.0), o.value2, "decimal 2");
    
                var o1 = new Bridge.ClientTest.BridgeIssues.Bridge1340.Data$2(System.Int64,Boolean)();
    
                Bridge.Test.Assert.areEqual$1(System.Int64(0), o1.getValue1(), "long 1");
                Bridge.Test.Assert.areEqual$1(false, o1.value2, "bool 2");
    
                var o2 = new Bridge.ClientTest.BridgeIssues.Bridge1340.Data$2(System.Double,String)();
    
                Bridge.Test.Assert.areEqual$1(0, o2.getValue1(), "double 1");
                Bridge.Test.Assert.null$1(o2.value2, "string 2");
            },
            testClassGenericMembersDefaultValue: function () {
                var o = new Bridge.ClientTest.BridgeIssues.Bridge1340.DataClass$1(System.Int32)();
    
                Bridge.Test.Assert.areEqual$1(0, o.getValue1(), "int 1");
                Bridge.Test.Assert.areEqual$1(0, o.value2, "int 2");
    
                var o1 = new Bridge.ClientTest.BridgeIssues.Bridge1340.DataClass$1(System.Decimal)();
    
                Bridge.Test.Assert.areEqual$1(System.Decimal(0.0), o1.getValue1(), "decimal 1");
                Bridge.Test.Assert.areEqual$1(System.Decimal(0.0), o1.value2, "decimal 2");
    
                var o2 = new Bridge.ClientTest.BridgeIssues.Bridge1340.DataClass$1(System.Int64)();
    
                Bridge.Test.Assert.areEqual$1(System.Int64(0), o2.getValue1(), "long 1");
                Bridge.Test.Assert.areEqual$1(System.Int64(0), o2.value2, "long 2");
    
                var o3 = new Bridge.ClientTest.BridgeIssues.Bridge1340.DataClass$1(Boolean)();
    
                Bridge.Test.Assert.areEqual$1(false, o3.getValue1(), "bool 1");
                Bridge.Test.Assert.areEqual$1(false, o3.value2, "bool 2");
    
                var o4 = new Bridge.ClientTest.BridgeIssues.Bridge1340.DataClass$1(String)();
    
                Bridge.Test.Assert.null$1(o4.getValue1(), "string 1");
                Bridge.Test.Assert.null$1(o4.value2, "string 2");
    
                var o5 = new Bridge.ClientTest.BridgeIssues.Bridge1340.DataClass$1(Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(System.Int32))();
    
                Bridge.Test.Assert.notNull$1(o5.getValue1().$clone(), "Data<int> 1");
                Bridge.Test.Assert.areEqual$1(0, o5.getValue1().getValue1(), "Data<int>.Value1 1");
                Bridge.Test.Assert.areEqual$1(0, o5.getValue1().value2, "Data<int>.Value1 2");
                Bridge.Test.Assert.notNull$1(o5.value2.$clone(), "Data<int> 2");
                Bridge.Test.Assert.areEqual$1(0, o5.value2.getValue1(), "Data<int>.Value2 1");
                Bridge.Test.Assert.areEqual$1(0, o5.value2.value2, "Data<int>.Value2 2");
    
                var o6 = new Bridge.ClientTest.BridgeIssues.Bridge1340.DataClass$1(Bridge.ClientTest.BridgeIssues.Bridge1340.DataClass$1(System.Int32))();
    
                Bridge.Test.Assert.null$1(o6.getValue1(), "DataClass<int> 1");
                Bridge.Test.Assert.null$1(o6.value2, "DataClass<int> 2");
            },
            testClassTwoGenericMembersDefaultValue: function () {
                var o = new Bridge.ClientTest.BridgeIssues.Bridge1340.DataClass$2(System.Int32,System.Decimal)();
    
                Bridge.Test.Assert.areEqual$1(0, o.getValue1(), "int 1");
                Bridge.Test.Assert.areEqual$1(System.Decimal(0.0), o.value2, "decimal 2");
    
                var o1 = new Bridge.ClientTest.BridgeIssues.Bridge1340.DataClass$2(System.Int64,Boolean)();
    
                Bridge.Test.Assert.areEqual$1(System.Int64(0), o1.getValue1(), "long 1");
                Bridge.Test.Assert.areEqual$1(false, o1.value2, "bool 2");
    
                var o2 = new Bridge.ClientTest.BridgeIssues.Bridge1340.DataClass$2(System.Double,String)();
    
                Bridge.Test.Assert.areEqual$1(0, o2.getValue1(), "double 1");
                Bridge.Test.Assert.null$1(o2.value2, "string 2");
            },
            testClass1TwoGenericInheritedMembersDefaultValue: function () {
                var o = new Bridge.ClientTest.BridgeIssues.Bridge1340.DataClass1$2(System.Int32,System.Decimal)();
    
                Bridge.Test.Assert.areEqual$1(0, o.getValue1(), "int 1");
                Bridge.Test.Assert.areEqual$1(System.Decimal(0.0), o.value2, "decimal 2");
    
                var o1 = new Bridge.ClientTest.BridgeIssues.Bridge1340.DataClass1$2(System.Int64,Boolean)();
    
                Bridge.Test.Assert.areEqual$1(System.Int64(0), o1.getValue1(), "long 1");
                Bridge.Test.Assert.areEqual$1(false, o1.value2, "bool 2");
    
                var o2 = new Bridge.ClientTest.BridgeIssues.Bridge1340.DataClass1$2(System.Double,String)();
    
                Bridge.Test.Assert.areEqual$1(0, o2.getValue1(), "double 1");
                Bridge.Test.Assert.null$1(o2.value2, "string 2");
            },
            testClass2TwoGenericInheritedMembersDefaultValue: function () {
                var o = new Bridge.ClientTest.BridgeIssues.Bridge1340.DataClass2$2(System.Decimal,Boolean)();
    
                Bridge.Test.Assert.areEqual$1(0, o.getValue1(), "int 1");
                Bridge.Test.Assert.null$1(o.value2, "string 2");
            },
            testClass3TwoGenericInheritedMembersDefaultValue: function () {
                var o = new Bridge.ClientTest.BridgeIssues.Bridge1340.DataClass3$2(System.Int64,System.Decimal)();
    
                Bridge.Test.Assert.areEqual$1(0, o.getValue1(), "int 1");
                Bridge.Test.Assert.null$1(o.value2, "string 2");
                Bridge.Test.Assert.areEqual$1(System.Int64(0), o.getValue3(), "long 1");
                Bridge.Test.Assert.areEqual$1(System.Decimal(0.0), o.value4, "decimal 4");
            },
            testStructStaticIntArray: function () {
                Bridge.Test.Assert.areEqual(0, Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(System.Int32).array[0]);
                Bridge.Test.Assert.areEqual(0, Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(System.Int32).array[1]);
                Bridge.Test.Assert.areEqual(0, Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(System.Int32).array[2]);
    
                Bridge.Test.Assert.notNull(Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(System.Int32)).array[0].$clone());
                Bridge.Test.Assert.notNull(Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(System.Int32)).array[1].$clone());
                Bridge.Test.Assert.notNull(Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(System.Int32)).array[2].$clone());
    
                var o = new Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(System.Int32)("constructor");
                Bridge.Test.Assert.areEqual(0, o.returnArray()[0]);
                Bridge.Test.Assert.areEqual(0, o.returnArray()[1]);
                Bridge.Test.Assert.areEqual(0, o.returnArray()[2]);
    
                var o1 = new Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(System.Int32))("constructor");
                Bridge.Test.Assert.notNull(o1.returnArray()[0].$clone());
                Bridge.Test.Assert.notNull(o1.returnArray()[1].$clone());
                Bridge.Test.Assert.notNull(o1.returnArray()[2].$clone());
            },
            testStructStaticLongArray: function () {
                Bridge.Test.Assert.areEqual(System.Int64(0), Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(System.Int64).array[0]);
                Bridge.Test.Assert.areEqual(System.Int64(0), Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(System.Int64).array[1]);
                Bridge.Test.Assert.areEqual(System.Int64(0), Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(System.Int64).array[2]);
    
                Bridge.Test.Assert.notNull(Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(System.Int64)).array[0].$clone());
                Bridge.Test.Assert.notNull(Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(System.Int64)).array[1].$clone());
                Bridge.Test.Assert.notNull(Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(System.Int64)).array[2].$clone());
    
                var o = new Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(System.Int64)("constructor");
                Bridge.Test.Assert.areEqual(System.Int64(0), o.returnArray()[0]);
                Bridge.Test.Assert.areEqual(System.Int64(0), o.returnArray()[1]);
                Bridge.Test.Assert.areEqual(System.Int64(0), o.returnArray()[2]);
    
                var o1 = new Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(System.Int64))("constructor");
                Bridge.Test.Assert.notNull(o1.returnArray()[0].$clone());
                Bridge.Test.Assert.notNull(o1.returnArray()[1].$clone());
                Bridge.Test.Assert.notNull(o1.returnArray()[2].$clone());
            },
            testStructStaticStringArray: function () {
                Bridge.Test.Assert.null(Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(String).array[0]);
                Bridge.Test.Assert.null(Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(String).array[1]);
                Bridge.Test.Assert.null(Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(String).array[2]);
    
                Bridge.Test.Assert.notNull(Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(String)).array[0].$clone());
                Bridge.Test.Assert.notNull(Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(String)).array[1].$clone());
                Bridge.Test.Assert.notNull(Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(String)).array[2].$clone());
    
                var o = new Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(String)("constructor");
                Bridge.Test.Assert.null(o.returnArray()[0]);
                Bridge.Test.Assert.null(o.returnArray()[1]);
                Bridge.Test.Assert.null(o.returnArray()[2]);
    
                var o1 = new Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(String))("constructor");
                Bridge.Test.Assert.notNull(o1.returnArray()[0].$clone());
                Bridge.Test.Assert.notNull(o1.returnArray()[1].$clone());
                Bridge.Test.Assert.notNull(o1.returnArray()[2].$clone());
            },
            testStaticClassGenericMembersDefaultValue: function () {
                Bridge.Test.Assert.areEqual$1(0, Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass$1(System.Int32).getValue1(), "int 1");
                Bridge.Test.Assert.areEqual$1(0, Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass$1(System.Int32).value2, "int 2");
    
                Bridge.Test.Assert.areEqual$1(System.Decimal(0.0), Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass$1(System.Decimal).getValue1(), "decimal 1");
                Bridge.Test.Assert.areEqual$1(System.Decimal(0.0), Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass$1(System.Decimal).value2, "decimal 2");
    
                Bridge.Test.Assert.areEqual$1(System.Int64(0), Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass$1(System.Int64).getValue1(), "long 1");
                Bridge.Test.Assert.areEqual$1(System.Int64(0), Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass$1(System.Int64).value2, "long 2");
    
                Bridge.Test.Assert.areEqual$1(false, Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass$1(Boolean).getValue1(), "bool 1");
                Bridge.Test.Assert.areEqual$1(false, Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass$1(Boolean).value2, "bool 2");
    
                Bridge.Test.Assert.null$1(Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass$1(String).getValue1(), "string 1");
                Bridge.Test.Assert.null$1(Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass$1(String).value2, "string 2");
    
                Bridge.Test.Assert.notNull$1(Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass$1(Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(System.Int32)).getValue1().$clone(), "Data<int> 1");
                Bridge.Test.Assert.areEqual$1(0, Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass$1(Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(System.Int32)).getValue1().getValue1(), "Data<int>.Value1 1");
                Bridge.Test.Assert.areEqual$1(0, Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass$1(Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(System.Int32)).getValue1().value2, "Data<int>.Value1 2");
                Bridge.Test.Assert.notNull$1(Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass$1(Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(System.Int32)).value2.$clone(), "Data<int> 2");
                Bridge.Test.Assert.areEqual$1(0, Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass$1(Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(System.Int32)).value2.getValue1(), "Data<int>.Value2 1");
                Bridge.Test.Assert.areEqual$1(0, Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass$1(Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(System.Int32)).value2.value2, "Data<int>.Value2 2");
    
                Bridge.Test.Assert.null$1(Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass$1(Bridge.ClientTest.BridgeIssues.Bridge1340.DataClass$1(System.Int32)).getValue1(), "DataClass<int> 1");
                Bridge.Test.Assert.null$1(Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass$1(Bridge.ClientTest.BridgeIssues.Bridge1340.DataClass$1(System.Int32)).value2, "DataClass<int> 2");
            },
            testStaticClassTwoGenericMembersDefaultValue: function () {
                Bridge.Test.Assert.areEqual$1(0, Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass$2(System.Int32,System.Decimal).getValue1(), "int 1");
                Bridge.Test.Assert.areEqual$1(System.Decimal(0.0), Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass$2(System.Int32,System.Decimal).value2, "decimal 2");
    
                Bridge.Test.Assert.areEqual$1(System.Int64(0), Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass$2(System.Int64,Boolean).getValue1(), "long 1");
                Bridge.Test.Assert.areEqual$1(false, Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass$2(System.Int64,Boolean).value2, "bool 2");
    
                Bridge.Test.Assert.areEqual$1(0, Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass$2(System.Double,String).getValue1(), "double 1");
                Bridge.Test.Assert.null$1(Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass$2(System.Double,String).value2, "string 2");
            },
            testStaticClass1TwoGenericInheritedMembersDefaultValue: function () {
                Bridge.Test.Assert.areEqual$1(0, Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass$2(System.Int32,System.Decimal).getValue1(), "int 1");
                Bridge.Test.Assert.areEqual$1(System.Decimal(0.0), Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass$2(System.Int32,System.Decimal).value2, "decimal 2");
    
                Bridge.Test.Assert.areEqual$1(System.Int64(0), Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass$2(System.Int64,Boolean).getValue1(), "long 1");
                Bridge.Test.Assert.areEqual$1(false, Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass$2(System.Int64,Boolean).value2, "bool 2");
    
                Bridge.Test.Assert.areEqual$1(0, Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass$2(System.Double,String).getValue1(), "double 1");
                Bridge.Test.Assert.null$1(Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass$2(System.Double,String).value2, "string 2");
            },
            testStaticClass2TwoGenericInheritedMembersDefaultValue: function () {
                Bridge.Test.Assert.areEqual$1(0, Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass$2(System.Int32,String).getValue1(), "int 1");
                Bridge.Test.Assert.null$1(Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass$2(System.Int32,String).value2, "string 2");
            },
            testStaticClass3TwoGenericInheritedMembersDefaultValue: function () {
                Bridge.Test.Assert.areEqual$1(0, Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass$2(System.Int32,String).getValue1(), "int 1");
                Bridge.Test.Assert.null$1(Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass$2(System.Int32,String).value2, "string 2");
                Bridge.Test.Assert.areEqual$1(System.Int64(0), Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass3$2(System.Int64,System.Decimal).getValue3(), "long 1");
                Bridge.Test.Assert.areEqual$1(System.Decimal(0.0), Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass3$2(System.Int64,System.Decimal).value4, "decimal 4");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1', function (T) { return {
        statics: {
            array: null,
            config: {
                init: function () {
                    this.array = System.Array.init(3, function (){
        return Bridge.getDefaultValue(T);
    });
                }
            },
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(T)(); }
        },
        value2: Bridge.getDefaultValue(T),
        config: {
            properties: {
                Value1: Bridge.getDefaultValue(T)
            }
        },
        constructor$1: function (v1, v2) {
            Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(T).prototype.$constructor.call(this);
    
            this.setValue1(v1);
            this.value2 = v2;
        },
        constructor: function () {
        },
        returnArray: function () {
            return System.Array.init(3, function (){
                return Bridge.getDefaultValue(T);
            });
        },
        $struct: true,
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 2620942;
            hash = hash * 23 + (this.value2 == null ? 0 : Bridge.getHashCode(this.value2));
            hash = hash * 23 + (this.Value1 == null ? 0 : Bridge.getHashCode(this.Value1));
            return hash;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(T))) {
                return false;
            }
            return Bridge.equals(this.value2, o.value2) && Bridge.equals(this.Value1, o.Value1);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.BridgeIssues.Bridge1340.Data$1(T)();
            s.value2 = this.value2;
            s.Value1 = this.Value1;
            return s;
        }
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1340.Data$2', function (T, K) { return {
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge1340.Data$2(T,K)(); }
        },
        value2: Bridge.getDefaultValue(K),
        config: {
            properties: {
                Value1: Bridge.getDefaultValue(T)
            }
        },
        constructor: function () {
        },
        $struct: true,
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 2620942;
            hash = hash * 23 + (this.value2 == null ? 0 : Bridge.getHashCode(this.value2));
            hash = hash * 23 + (this.Value1 == null ? 0 : Bridge.getHashCode(this.Value1));
            return hash;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.BridgeIssues.Bridge1340.Data$2(T,K))) {
                return false;
            }
            return Bridge.equals(this.value2, o.value2) && Bridge.equals(this.Value1, o.Value1);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.BridgeIssues.Bridge1340.Data$2(T,K)();
            s.value2 = this.value2;
            s.Value1 = this.Value1;
            return s;
        }
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1340.DataClass$1', function (T) { return {
        value2: Bridge.getDefaultValue(T),
        config: {
            properties: {
                Value1: Bridge.getDefaultValue(T)
            }
        }
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1340.DataClass$2', function (T, K) { return {
        value2: Bridge.getDefaultValue(K),
        config: {
            properties: {
                Value1: Bridge.getDefaultValue(T)
            }
        }
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass$1', function (T) { return {
        statics: {
            value2: Bridge.getDefaultValue(T),
            config: {
                properties: {
                    Value1: Bridge.getDefaultValue(T)
                }
            }
        }
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass$2', function (T, K) { return {
        statics: {
            value2: Bridge.getDefaultValue(K),
            config: {
                properties: {
                    Value1: Bridge.getDefaultValue(T)
                }
            }
        }
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1341', {
        statics: {
            testPlainObject: function () {
                var o1 = { a: 1 };
                Bridge.Test.Assert.notNull$1(o1, "o1 not null");
                Bridge.Test.Assert.areEqual$1(1, o1.a, "o1.A == 1");
    
                Bridge.Test.Assert.null$1(o1.getHashCode, "o1 has no getHashCode");
                Bridge.Test.Assert.null$1(o1.toJSON, "o1 has no toJSON");
                Bridge.Test.Assert.null$1(o1.$constructor, "o1 has no $constructor");
                Bridge.Test.Assert.null$1(o1.equals, "o1 has no equals");
                Bridge.Test.Assert.notNull$1(o1.a, "o1 has a");
    
                var o2 = { a: 1, b: "2" };
                Bridge.Test.Assert.notNull$1(o2, "o2 not null");
                Bridge.Test.Assert.areEqual$1(1, o2.a, "o2.A == 1");
                Bridge.Test.Assert.areEqual$1("2", o2.b, "o2.B == \"2\"");
    
                var o3 = { a: 1, b: Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge1341.SomeStructA(), {
                    setValue1: 1
                } ) };
                Bridge.Test.Assert.notNull$1(o3, "o3 not null");
                Bridge.Test.Assert.areEqual$1(1, o3.a, "o3.A == 1");
                Bridge.Test.Assert.notNull$1(o3.b.$clone(), "o3.B not null");
                Bridge.Test.Assert.areEqual$1(1, o3.b.getValue1(), "o3.B.Value1 == 1");
    
                var o4 = { a: 1, b: Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge1341.SomeStructA(), {
                    setValue1: 1
                } ) };
                Bridge.Test.Assert.notNull$1(o4, "o4 not null");
                Bridge.Test.Assert.areEqual$1(1, o4.a, "o4.A == 1");
                Bridge.Test.Assert.notNull$1(o4.b.$clone(), "o4.B not null");
                Bridge.Test.Assert.areEqual$1(1, o4.b.getValue1(), "o4.B.Value1 == 1");
    
                var o5 = { a: 1, b: Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge1341.SomeClassB(), {
                    setValue1: 1,
                    setValue2: Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge1341.SomeStructA(), {
                        setValue1: 1
                    } )
                } ) };
                Bridge.Test.Assert.notNull$1(o5, "o5 not null");
                Bridge.Test.Assert.areEqual$1(1, o5.a, "o5.A == 1");
                Bridge.Test.Assert.notNull$1(o5.b, "o5.B not null");
                Bridge.Test.Assert.areEqual$1(1, o5.b.getValue1(), "o5.B.Value1 == 1");
                Bridge.Test.Assert.notNull$1(o5.b.getValue2().$clone(), "o5.B.Value2 not null");
                Bridge.Test.Assert.areEqual$1(1, o5.b.getValue2().getValue1(), "o5.B.Value2.Value1 == 1");
    
                Bridge.Test.Assert.null$1(o5.getHashCode, "o5 has no getHashCode");
                Bridge.Test.Assert.null$1(o5.toJSON, "o5 has no toJSON");
                Bridge.Test.Assert.null$1(o5.$constructor, "o5 has no $constructor");
                Bridge.Test.Assert.null$1(o5.equals, "o5 has no equals");
                Bridge.Test.Assert.notNull$1(o5.a, "o5 has a");
                Bridge.Test.Assert.notNull$1(o5.b, "o5 has b");
                Bridge.Test.Assert.notNull$1(o5.b.getValue1, "o5.B has getValue1");
            },
            testAnonymousTypeCreation: function () {
                var o1 = new $_.$AnonymousType$1(1);
                Bridge.Test.Assert.notNull$1(o1, "o1 not null");
                Bridge.Test.Assert.areEqual$1(1, o1.a, "o1.A == 1");
    
                Bridge.Test.Assert.notNull$1(o1.getHashCode, "o1 has getHashCode");
                Bridge.Test.Assert.notNull$1(o1.toJSON, "o1 has toJSON");
                Bridge.Test.Assert.notNull$1(o1.$constructor, "o1 has $constructor");
                Bridge.Test.Assert.notNull$1(o1.equals, "o1 has equals");
                Bridge.Test.Assert.notNull$1(o1.getA, "o1 has getA");
    
                var o2 = new $_.$AnonymousType$2(1, "2");
                Bridge.Test.Assert.notNull$1(o2, "o2 not null");
                Bridge.Test.Assert.areEqual$1(1, o2.a, "o2.A == 1");
                Bridge.Test.Assert.areEqual$1("2", o2.b, "o2.B == \"2\"");
    
                var o3 = new $_.$AnonymousType$3(1, Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge1341.SomeStructA(), {
                    setValue1: 1
                } ));
                Bridge.Test.Assert.notNull$1(o3, "o3 not null");
                Bridge.Test.Assert.areEqual$1(1, o3.a, "o3.A == 1");
                Bridge.Test.Assert.notNull$1(o3.b.$clone(), "o3.B not null");
                Bridge.Test.Assert.areEqual$1(1, o3.b.getValue1(), "o3.B.Value1 == 1");
    
                var o4 = new $_.$AnonymousType$3(1, Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge1341.SomeStructA(), {
                    setValue1: 1
                } ));
                Bridge.Test.Assert.notNull$1(o4, "o4 not null");
                Bridge.Test.Assert.areEqual$1(1, o4.a, "o4.A == 1");
                Bridge.Test.Assert.notNull$1(o4.b.$clone(), "o4.B not null");
                Bridge.Test.Assert.areEqual$1(1, o4.b.getValue1(), "o4.B.Value1 == 1");
    
                var o5 = new $_.$AnonymousType$4(1, Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge1341.SomeClassB(), {
                    setValue1: 1,
                    setValue2: Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge1341.SomeStructA(), {
                        setValue1: 1
                    } )
                } ));
                Bridge.Test.Assert.notNull$1(o5, "o5 not null");
                Bridge.Test.Assert.areEqual$1(1, o5.a, "o5.A == 1");
                Bridge.Test.Assert.notNull$1(o5.b, "o5.B not null");
                Bridge.Test.Assert.areEqual$1(1, o5.b.getValue1(), "o5.B.Value1 == 1");
                Bridge.Test.Assert.notNull$1(o5.b.getValue2().$clone(), "o5.B.Value2 not null");
                Bridge.Test.Assert.areEqual$1(1, o5.b.getValue2().getValue1(), "o5.B.Value2.Value1 == 1");
    
                Bridge.Test.Assert.notNull$1(o5.getHashCode, "o5 has getHashCode");
                Bridge.Test.Assert.notNull$1(o5.toJSON, "o5 has toJSON");
                Bridge.Test.Assert.notNull$1(o5.$constructor, "o5 has $constructor");
                Bridge.Test.Assert.notNull$1(o5.equals, "o5 has equals");
                Bridge.Test.Assert.notNull$1(o5.getA, "o5 has getA");
                Bridge.Test.Assert.notNull$1(o5.getB, "o5 has getB");
                Bridge.Test.Assert.notNull$1(o5.b.getValue1, "o5.B has getValue1");
            },
            testDiffStructHashCode: function () {
                var s = Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge1341.SomeStructA(), {
                    setValue1: 10
                } );
                var s1 = Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge1341.SomeStructA1(), {
                    setValue1: 10
                } );
    
                Bridge.Test.Assert.areNotEqual$1(Bridge.getHashCode(s), Bridge.getHashCode(s1), "Structs of diff types with same fields and values should give diff hash codes");
    
                var s2 = Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge1341.SomeStructA2(), {
                    setValue2: 10
                } );
    
                Bridge.Test.Assert.areNotEqual$1(Bridge.getHashCode(s), Bridge.getHashCode(s2), "Structs of diff types with same values should give diff hash codes");
            },
            testDiffAnonymousTypesHashCode: function () {
                var s = new $_.$AnonymousType$5(10);
                var s1 = new $_.$AnonymousType$6(10);
    
                Bridge.Test.Assert.areNotEqual$1(Bridge.getHashCode(s), Bridge.getHashCode(s1), "Same field values should give diff hash codes");
            },
            test: function (values) {
                var o1 = values[0];
                var o2 = values[1];
                var o3 = values[2];
                var o4 = values[3];
                var o5 = values[4];
                var o6 = values[5];
    
                Bridge.Test.Assert.areEqual$1(Bridge.getHashCode(o1), Bridge.getHashCode(o2), "GetHashCode o1 == o2");
                Bridge.Test.Assert.areNotEqual$1(Bridge.getHashCode(o1), Bridge.getHashCode(o3), "GetHashCode o1 != o3");
                Bridge.Test.Assert.areNotEqual$1(Bridge.getHashCode(o1), Bridge.getHashCode(o4), "GetHashCode o1 != o4");
                Bridge.Test.Assert.areEqual$1(Bridge.getHashCode(o1), Bridge.getHashCode(o5), "GetHashCode o1 == o5");
                Bridge.Test.Assert.areNotEqual$1(Bridge.getHashCode(o1), Bridge.getHashCode(o6), "GetHashCode o1 != o6");
    
                Bridge.Test.Assert.true$1(Bridge.equals(o1, o2), "Equals o1 == o2");
                Bridge.Test.Assert.false$1(Bridge.equals(o1, o3), "Equals o1 != o3");
                Bridge.Test.Assert.false$1(Bridge.equals(o1, o4), "Equals o1 != o4");
                Bridge.Test.Assert.true$1(Bridge.equals(o1, o5), "Equals o1 == o5");
                Bridge.Test.Assert.false$1(Bridge.equals(o1, o6), "Equals o1 != o6");
    
                Bridge.Test.Assert.true$1(Bridge.equals(o2, o1), "Equals o2 == o1");
                Bridge.Test.Assert.false$1(Bridge.equals(o3, o1), "Equals o3 != o1");
                Bridge.Test.Assert.false$1(Bridge.equals(o4, o1), "Equals o4 != o1");
                Bridge.Test.Assert.true$1(Bridge.equals(o5, o1), "Equals o5 == o1");
                Bridge.Test.Assert.false$1(Bridge.equals(o6, o1), "Equals o6 != o1");
            },
            test1AnonymousType: function () {
                var o1 = new $_.$AnonymousType$1(1);
                var o2 = new $_.$AnonymousType$1(1);
                var o3 = new $_.$AnonymousType$1(2);
                var o4 = new $_.$AnonymousType$7(1);
                var o5 = o1;
                var o6 = o3;
    
                var values = [o1, o2, o3, o4, o5, o6];
    
                Bridge.ClientTest.BridgeIssues.Bridge1341.test(values);
            },
            test2AnonymousType: function () {
                var o1 = new $_.$AnonymousType$2(1, "2");
                var o2 = new $_.$AnonymousType$2(1, "2");
                var o3 = new $_.$AnonymousType$2(1, "3");
                var o4 = new $_.$AnonymousType$8(1, "2");
                var o5 = o1;
                var o6 = o3;
    
                var values = [o1, o2, o3, o4, o5, o6];
    
                Bridge.ClientTest.BridgeIssues.Bridge1341.test(values);
            },
            test3AnonymousType: function () {
                var o1 = new $_.$AnonymousType$9(1, Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge1341.SomeClassA(), {
                    setValue1: 1
                } ));
                var o2 = o1;
                var o3 = new $_.$AnonymousType$9(1, Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge1341.SomeClassA(), {
                    setValue1: 1
                } ));
                var o4 = new $_.$AnonymousType$10(1, Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge1341.SomeClassA(), {
                    setValue1: 1
                } ));
                var o5 = o1;
                var o6 = o3;
    
                var values = [o1, o2, o3, o4, o5, o6];
    
                Bridge.ClientTest.BridgeIssues.Bridge1341.test(values);
            },
            test4AnonymousType: function () {
                var o1 = new $_.$AnonymousType$3(1, Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge1341.SomeStructA(), {
                    setValue1: 1
                } ));
                var o2 = new $_.$AnonymousType$3(1, Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge1341.SomeStructA(), {
                    setValue1: 1
                } ));
                var o3 = new $_.$AnonymousType$3(1, Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge1341.SomeStructA(), {
                    setValue1: 2
                } ));
                var o4 = new $_.$AnonymousType$11(1, Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge1341.SomeStructA(), {
                    setValue1: 1
                } ));
                var o5 = o1;
                var o6 = o3;
    
                var values = [o1, o2, o3, o4, o5, o6];
    
                Bridge.ClientTest.BridgeIssues.Bridge1341.test(values);
            },
            test5AnonymousType: function () {
                var o1 = new $_.$AnonymousType$4(1, Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge1341.SomeClassB(), {
                    setValue1: 1,
                    setValue2: Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge1341.SomeStructA(), {
                        setValue1: 1
                    } )
                } ));
                var o2 = o1;
                var o3 = new $_.$AnonymousType$4(1, Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge1341.SomeClassB(), {
                    setValue1: 1,
                    setValue2: Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge1341.SomeStructA(), {
                        setValue1: 1
                    } )
                } ));
                var o4 = new $_.$AnonymousType$12(1, Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge1341.SomeClassB(), {
                    setValue1: 1,
                    setValue2: Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge1341.SomeStructA(), {
                        setValue1: 1
                    } )
                } ));
                var o5 = o1;
                var o6 = o3;
    
                var values = [o1, o2, o3, o4, o5, o6];
    
                Bridge.ClientTest.BridgeIssues.Bridge1341.test(values);
            }
        }
    });
    
    Bridge.define("$AnonymousType$1", $_, {
        constructor: function (a) {
            this.a = a;
        },
        getA : function () {
            return this.a;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$1)) {
                return false;
            }
            return Bridge.equals(this.a, o.a);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 1276122535;
            hash = hash * 23 + (this.a == null ? 0 : Bridge.getHashCode(this.a));
            return hash;
        },
        toJSON: function () {
            return {
                a : this.a
            };
        }
    });
    
    Bridge.define("$AnonymousType$2", $_, {
        constructor: function (a, b) {
            this.a = a;
            this.b = b;
        },
        getA : function () {
            return this.a;
        },
        getB : function () {
            return this.b;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$2)) {
                return false;
            }
            return Bridge.equals(this.a, o.a) && Bridge.equals(this.b, o.b);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 1276122536;
            hash = hash * 23 + (this.a == null ? 0 : Bridge.getHashCode(this.a));
            hash = hash * 23 + (this.b == null ? 0 : Bridge.getHashCode(this.b));
            return hash;
        },
        toJSON: function () {
            return {
                a : this.a,
                b : this.b
            };
        }
    });
    
    Bridge.define("$AnonymousType$3", $_, {
        constructor: function (a, b) {
            this.a = a;
            this.b = b;
        },
        getA : function () {
            return this.a;
        },
        getB : function () {
            return this.b;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$3)) {
                return false;
            }
            return Bridge.equals(this.a, o.a) && Bridge.equals(this.b, o.b);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 1276122537;
            hash = hash * 23 + (this.a == null ? 0 : Bridge.getHashCode(this.a));
            hash = hash * 23 + (this.b == null ? 0 : Bridge.getHashCode(this.b));
            return hash;
        },
        toJSON: function () {
            return {
                a : this.a,
                b : this.b
            };
        }
    });
    
    Bridge.define("$AnonymousType$4", $_, {
        constructor: function (a, b) {
            this.a = a;
            this.b = b;
        },
        getA : function () {
            return this.a;
        },
        getB : function () {
            return this.b;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$4)) {
                return false;
            }
            return Bridge.equals(this.a, o.a) && Bridge.equals(this.b, o.b);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 1276122538;
            hash = hash * 23 + (this.a == null ? 0 : Bridge.getHashCode(this.a));
            hash = hash * 23 + (this.b == null ? 0 : Bridge.getHashCode(this.b));
            return hash;
        },
        toJSON: function () {
            return {
                a : this.a,
                b : this.b
            };
        }
    });
    
    Bridge.define("$AnonymousType$5", $_, {
        constructor: function (value1) {
            this.value1 = value1;
        },
        getValue1 : function () {
            return this.value1;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$5)) {
                return false;
            }
            return Bridge.equals(this.value1, o.value1);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 1276122539;
            hash = hash * 23 + (this.value1 == null ? 0 : Bridge.getHashCode(this.value1));
            return hash;
        },
        toJSON: function () {
            return {
                value1 : this.value1
            };
        }
    });
    
    Bridge.define("$AnonymousType$6", $_, {
        constructor: function (value2) {
            this.value2 = value2;
        },
        getValue2 : function () {
            return this.value2;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$6)) {
                return false;
            }
            return Bridge.equals(this.value2, o.value2);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 1276122540;
            hash = hash * 23 + (this.value2 == null ? 0 : Bridge.getHashCode(this.value2));
            return hash;
        },
        toJSON: function () {
            return {
                value2 : this.value2
            };
        }
    });
    
    Bridge.define("$AnonymousType$7", $_, {
        constructor: function (b) {
            this.b = b;
        },
        getB : function () {
            return this.b;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$7)) {
                return false;
            }
            return Bridge.equals(this.b, o.b);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 1276122541;
            hash = hash * 23 + (this.b == null ? 0 : Bridge.getHashCode(this.b));
            return hash;
        },
        toJSON: function () {
            return {
                b : this.b
            };
        }
    });
    
    Bridge.define("$AnonymousType$8", $_, {
        constructor: function (b, c) {
            this.b = b;
            this.c = c;
        },
        getB : function () {
            return this.b;
        },
        getC : function () {
            return this.c;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$8)) {
                return false;
            }
            return Bridge.equals(this.b, o.b) && Bridge.equals(this.c, o.c);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 1276122526;
            hash = hash * 23 + (this.b == null ? 0 : Bridge.getHashCode(this.b));
            hash = hash * 23 + (this.c == null ? 0 : Bridge.getHashCode(this.c));
            return hash;
        },
        toJSON: function () {
            return {
                b : this.b,
                c : this.c
            };
        }
    });
    
    Bridge.define("$AnonymousType$9", $_, {
        constructor: function (a, b) {
            this.a = a;
            this.b = b;
        },
        getA : function () {
            return this.a;
        },
        getB : function () {
            return this.b;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$9)) {
                return false;
            }
            return Bridge.equals(this.a, o.a) && Bridge.equals(this.b, o.b);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 1276122527;
            hash = hash * 23 + (this.a == null ? 0 : Bridge.getHashCode(this.a));
            hash = hash * 23 + (this.b == null ? 0 : Bridge.getHashCode(this.b));
            return hash;
        },
        toJSON: function () {
            return {
                a : this.a,
                b : this.b
            };
        }
    });
    
    Bridge.define("$AnonymousType$10", $_, {
        constructor: function (b, c) {
            this.b = b;
            this.c = c;
        },
        getB : function () {
            return this.b;
        },
        getC : function () {
            return this.c;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$10)) {
                return false;
            }
            return Bridge.equals(this.b, o.b) && Bridge.equals(this.c, o.c);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 784520983;
            hash = hash * 23 + (this.b == null ? 0 : Bridge.getHashCode(this.b));
            hash = hash * 23 + (this.c == null ? 0 : Bridge.getHashCode(this.c));
            return hash;
        },
        toJSON: function () {
            return {
                b : this.b,
                c : this.c
            };
        }
    });
    
    Bridge.define("$AnonymousType$11", $_, {
        constructor: function (b, a) {
            this.b = b;
            this.a = a;
        },
        getB : function () {
            return this.b;
        },
        getA : function () {
            return this.a;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$11)) {
                return false;
            }
            return Bridge.equals(this.b, o.b) && Bridge.equals(this.a, o.a);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + -1944362372;
            hash = hash * 23 + (this.b == null ? 0 : Bridge.getHashCode(this.b));
            hash = hash * 23 + (this.a == null ? 0 : Bridge.getHashCode(this.a));
            return hash;
        },
        toJSON: function () {
            return {
                b : this.b,
                a : this.a
            };
        }
    });
    
    Bridge.define("$AnonymousType$12", $_, {
        constructor: function (b, c) {
            this.b = b;
            this.c = c;
        },
        getB : function () {
            return this.b;
        },
        getC : function () {
            return this.c;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$12)) {
                return false;
            }
            return Bridge.equals(this.b, o.b) && Bridge.equals(this.c, o.c);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 1947320397;
            hash = hash * 23 + (this.b == null ? 0 : Bridge.getHashCode(this.b));
            hash = hash * 23 + (this.c == null ? 0 : Bridge.getHashCode(this.c));
            return hash;
        },
        toJSON: function () {
            return {
                b : this.b,
                c : this.c
            };
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1341.SomeClassA', {
        config: {
            properties: {
                Value1: 0
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1341.SomeClassB', {
        config: {
            properties: {
                Value1: 0,
                Value2: null
            },
            init: function () {
                this.Value2 = new Bridge.ClientTest.BridgeIssues.Bridge1341.SomeStructA();
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1341.SomeStructA', {
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge1341.SomeStructA(); }
        },
        config: {
            properties: {
                Value1: 0
            }
        },
        constructor: function () {
        },
        $struct: true,
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 593585434;
            hash = hash * 23 + (this.Value1 == null ? 0 : Bridge.getHashCode(this.Value1));
            return hash;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.BridgeIssues.Bridge1341.SomeStructA)) {
                return false;
            }
            return Bridge.equals(this.Value1, o.Value1);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.BridgeIssues.Bridge1341.SomeStructA();
            s.Value1 = this.Value1;
            return s;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1341.SomeStructA1', {
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge1341.SomeStructA1(); }
        },
        config: {
            properties: {
                Value1: 0
            }
        },
        constructor: function () {
        },
        $struct: true,
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + -776575217;
            hash = hash * 23 + (this.Value1 == null ? 0 : Bridge.getHashCode(this.Value1));
            return hash;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.BridgeIssues.Bridge1341.SomeStructA1)) {
                return false;
            }
            return Bridge.equals(this.Value1, o.Value1);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.BridgeIssues.Bridge1341.SomeStructA1();
            s.Value1 = this.Value1;
            return s;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1341.SomeStructA2', {
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge1341.SomeStructA2(); }
        },
        config: {
            properties: {
                Value2: 0
            }
        },
        constructor: function () {
        },
        $struct: true,
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + -1179859744;
            hash = hash * 23 + (this.Value2 == null ? 0 : Bridge.getHashCode(this.Value2));
            return hash;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.BridgeIssues.Bridge1341.SomeStructA2)) {
                return false;
            }
            return Bridge.equals(this.Value2, o.Value2);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.BridgeIssues.Bridge1341.SomeStructA2();
            s.Value2 = this.Value2;
            return s;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1343', {
        statics: {
            testDoubleTemplate: function () {
                var s1 = System.String.format("{0} {1}", 1, 2);
                var s2 = Bridge.getHashCode(System.String.format("{0} {1}", 1, 2));
    
                Bridge.Test.Assert.areEqual(Bridge.getHashCode(s1), s2);
            },
            testInlineInGetHashCode: function () {
                var s1 = new Bridge.ClientTest.BridgeIssues.Bridge1343.M().getHashCode();
                var s2 = new Bridge.ClientTest.BridgeIssues.Bridge1343.M().getHashCode();
    
                Bridge.Test.Assert.areEqual(s1, s2);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1343.M', {
        getHashCode: function () {
            return Bridge.getHashCode(System.String.format("{0} {1}", 1, 2));
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1344', {
        statics: {
            testLocalVariableWithNameProto: function () {
                var $__proto__ = "1";
                var r = $__proto__;
    
                Bridge.Test.Assert.areEqual$1("1", $__proto__, "$__proto__");
                Bridge.Test.Assert.areEqual$1("1", r, "r");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1355', {
        statics: {
            testLocalVariableWithNameWindow: function () {
                var $window = "1";
                var r = $window;
    
                Bridge.Test.Assert.areEqual$1("1", $window, "window");
                Bridge.Test.Assert.areEqual$1("1", r, "r");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1374', {
        statics: {
            config: {
                properties: {
                    Value: 0
                }
            },
            staticIntConverter: function (i) {
                return (((Bridge.ClientTest.BridgeIssues.Bridge1374.getValue() + i) | 0)).toString();
            },
            testConvertAllForIntListStaticMethod: function () {
                var l = [1, 2, 3];
    
                Bridge.ClientTest.BridgeIssues.Bridge1374.setValue(100);
    
                Bridge.Test.Assert.areDeepEqual(["101", "102", "103"], System.Array.convertAll(l, Bridge.ClientTest.BridgeIssues.Bridge1374.staticIntConverter));
            },
            testConvertAllForIntListInstanceMethod: function () {
                var l = [1, 2, 3];
    
                var t = Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge1374.ScopeContainer(), {
                    setValue: 10
                } );
    
                Bridge.Test.Assert.areDeepEqual(["11", "12", "13"], System.Array.convertAll(l, Bridge.fn.bind(t, t.instanceIntConverter)));
            },
            testConvertAllForIntListLambda: function () {
                var l = [1, 2, 3];
    
                Bridge.Test.Assert.areDeepEqual(["1", "2", "3"], System.Array.convertAll(l, $_.Bridge.ClientTest.BridgeIssues.Bridge1374.f1));
            },
            testConvertAllForNullConverter: function () {
                var l = [1, 2, 3];
    
                var converter = null;
    
                Bridge.Test.Assert.throws$7(System.ArgumentNullException, function () {
                    System.Array.convertAll(l, converter);
                }, "Null converter throws exception");
            },
            testConvertAllForNullArray: function () {
                var l = null;
    
                Bridge.Test.Assert.throws$7(System.ArgumentNullException, function () {
                    System.Array.convertAll(l, $_.Bridge.ClientTest.BridgeIssues.Bridge1374.f2);
                }, "Null array throws exception");
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.BridgeIssues.Bridge1374", $_);
    
    Bridge.apply($_.Bridge.ClientTest.BridgeIssues.Bridge1374, {
        f1: function (x) {
            return x.toString();
        },
        f2: function (x) {
            return x;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1374.ScopeContainer', {
        config: {
            properties: {
                Value: 0
            }
        },
        instanceIntConverter: function (i) {
            return (((this.getValue() + i) | 0)).toString();
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1378', {
        statics: {
            config: {
                properties: {
                    x: 0
                }
            },
            testAssigmentWithMinusOperator: function () {
                Bridge.ClientTest.BridgeIssues.Bridge1378.setx(1);
    
                var a = 4;
                var b = 2;
                Bridge.ClientTest.BridgeIssues.Bridge1378.setx(Bridge.ClientTest.BridgeIssues.Bridge1378.getx()-(a - b));
    
                Bridge.Test.Assert.areEqual(-1, Bridge.ClientTest.BridgeIssues.Bridge1378.getx());
            },
            testAssigmentWithPlusOperator: function () {
                Bridge.ClientTest.BridgeIssues.Bridge1378.setx(1);
    
                var a = 4;
                var b = 2;
                Bridge.ClientTest.BridgeIssues.Bridge1378.setx(Bridge.ClientTest.BridgeIssues.Bridge1378.getx()+(a + b));
    
                Bridge.Test.Assert.areEqual(7, Bridge.ClientTest.BridgeIssues.Bridge1378.getx());
            },
            testAssigmentWithOverloadMinusOperator: function () {
                var $int = new Bridge.ClientTest.BridgeIssues.Bridge1378.IntWrapper(1);
                $int = Bridge.ClientTest.BridgeIssues.Bridge1378.IntWrapper.op_Subtraction($int, ($int = Bridge.ClientTest.BridgeIssues.Bridge1378.IntWrapper.op_Subtraction($int, new Bridge.ClientTest.BridgeIssues.Bridge1378.IntWrapper(7))));
                Bridge.Test.Assert.areEqual(7, $int.toInt());
            },
            testAssigmentWithOverloadPlusOperator: function () {
                var $int = new Bridge.ClientTest.BridgeIssues.Bridge1378.IntWrapper(3);
                $int = Bridge.ClientTest.BridgeIssues.Bridge1378.IntWrapper.op_Addition($int, ($int = Bridge.ClientTest.BridgeIssues.Bridge1378.IntWrapper.op_Addition($int, new Bridge.ClientTest.BridgeIssues.Bridge1378.IntWrapper(1))));
                Bridge.Test.Assert.areEqual(7, $int.toInt());
            },
            testAssigmentWithConditionalPlusOperator: function () {
                var tabSize = 4;
                var tabLength1 = 0;
                var text = "        There is two tabs.";
    
                for (var i = 0; i < text.length; i = (i + 1) | 0) {
                    tabLength1 = (tabLength1 + ((text.charCodeAt(i) === 9) ? tabSize : 1)) | 0;
                }
    
                Bridge.Test.Assert.areEqual(26, tabLength1);
            },
            testAssigmentWithConditionalMinusOperator: function () {
                var tabSize = 5;
                var tabLength1 = 1;
                var text = "        There is two tabs.";
    
                for (var i = 0; i < text.length; i = (i + 1) | 0) {
                    tabLength1 = (tabLength1 - ((text.charCodeAt(i) === 9) ? tabSize : 1)) | 0;
                }
    
                Bridge.Test.Assert.areEqual(-25, tabLength1);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1378.IntWrapper', {
        statics: {
            op_Addition: function (a, b) {
                return new Bridge.ClientTest.BridgeIssues.Bridge1378.IntWrapper(((a.value + b.value) | 0));
            },
            op_Subtraction: function (a, b) {
                return new Bridge.ClientTest.BridgeIssues.Bridge1378.IntWrapper(((a.value - b.value) | 0));
            }
        },
        value: 0,
        constructor: function (value) {
            this.value = value;
        },
        toInt: function () {
            return this.value;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1385', {
        statics: {
            testIsTypedArray: function () {
                var value = new Uint8Array(3);
                Bridge.Test.Assert.true(Bridge.is(value, Array));
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1389', {
        statics: {
            testParamsIndexer: function () {
                var app = new Bridge.ClientTest.BridgeIssues.Bridge1389();
                var list = app.getItem(["1", "2", "3", "4", "5"]);
    
                Bridge.Test.Assert.notNull(list);
                Bridge.Test.Assert.areEqual(5, System.Linq.Enumerable.from(list).count());
                Bridge.Test.Assert.areEqual("1", System.Linq.Enumerable.from(list).first());
                Bridge.Test.Assert.areEqual("5", System.Linq.Enumerable.from(list).last());
            }
        },
        getItem: function (keys) {
            return keys;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1391', {
        statics: {
            builder: null,
            getBuilder: function () {
                var $t, $t1;
                return ($t = Bridge.ClientTest.BridgeIssues.Bridge1391.builder, $t != null ? $t : (($t1 = new System.Text.StringBuilder(), Bridge.ClientTest.BridgeIssues.Bridge1391.builder = $t1, $t1)));
            },
            testStaticCtorOrder: function () {
                Bridge.ClientTest.BridgeIssues.Bridge1391.getBuilder().clear();
    
                // Now, types with no Ready/Autorun methods intialized on-demand (when first time accessing the type)
                var f = new Bridge.ClientTest.BridgeIssues.Bridge1391.Foo();
                var b = new Bridge.ClientTest.BridgeIssues.Bridge1391.Bar();
                Bridge.Test.Assert.areEqual("FooBar", Bridge.ClientTest.BridgeIssues.Bridge1391.builder.toString());
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1391.Bar', {
        statics: {
            i: 0,
            config: {
                init: function () {
                    this.i = Bridge.ClientTest.BridgeIssues.Bridge1391.Bar.init();
                }
            },
            init: function () {
                Bridge.ClientTest.BridgeIssues.Bridge1391.getBuilder().append("Bar");
                return 0;
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1391.Foo', {
        statics: {
            constructor: function () {
                Bridge.ClientTest.BridgeIssues.Bridge1391.getBuilder().append("Foo");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1391Ready', {
        statics: {
            testStaticCtorOrderForClassHavingReady: function () {
                // Now, types with no Ready/Autorun methods intialized on-demand (when first time accessing the type)
                // However, classes with [Ready] initializes on Ready
                var r = Bridge.$N1391Result;
                Bridge.Test.Assert.areEqual$1("FooReadyBarReady", r, "Bridge.$N1391Result");
                Bridge.Test.Assert.areEqual$1("FooReadyBarReady", Bridge.ClientTest.BridgeIssues.Bridge1391ToRunInitializationOnReady.getBuilder().toString(), "Current builder's state");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1391ToRunInitializationOnReady', {
        statics: {
            builder: null,
            config: {
                init: function () {
                    Bridge.ready(this.runMe);
                }
            },
            getBuilder: function () {
                var $t, $t1;
                return ($t = Bridge.ClientTest.BridgeIssues.Bridge1391ToRunInitializationOnReady.builder, $t != null ? $t : (($t1 = new System.Text.StringBuilder(), Bridge.ClientTest.BridgeIssues.Bridge1391ToRunInitializationOnReady.builder = $t1, $t1)));
            },
            runMe: function () {
                Bridge.ClientTest.BridgeIssues.Bridge1391ToRunInitializationOnReady.getBuilder().clear();
    
                // Now, types with no Ready/Autorun methods intialized on-demand (when first time accessing the type)
                // However, classes with [Ready] initializes on Ready
                var f = new Bridge.ClientTest.BridgeIssues.Bridge1391ToRunInitializationOnReady.FooReady();
                var b = new Bridge.ClientTest.BridgeIssues.Bridge1391ToRunInitializationOnReady.BarReady();
    
                var r = Bridge.ClientTest.BridgeIssues.Bridge1391ToRunInitializationOnReady.getBuilder().toString();
    Bridge.$N1391Result =             r;
            }
        },
        $entryPoint: true
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1391ToRunInitializationOnReady.BarReady', {
        statics: {
            i: 0,
            config: {
                init: function () {
                    this.i = Bridge.ClientTest.BridgeIssues.Bridge1391ToRunInitializationOnReady.BarReady.initReady();
                }
            },
            initReady: function () {
                Bridge.ClientTest.BridgeIssues.Bridge1391ToRunInitializationOnReady.getBuilder().append("BarReady");
                return 0;
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1391ToRunInitializationOnReady.FooReady', {
        statics: {
            constructor: function () {
                Bridge.ClientTest.BridgeIssues.Bridge1391ToRunInitializationOnReady.getBuilder().append("FooReady");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1402', {
        statics: {
            testLongClipping: function () {
                var value = System.Int64.MaxValue;
                Bridge.Test.Assert.areEqual(255, System.Int64.clipu8(value.shr(2)));
                Bridge.Test.Assert.areEqual(-1, System.Int64.clip8(value.shr(2)));
                Bridge.Test.Assert.areEqual(-1, System.Int64.clip16(value.shr(2)));
                Bridge.Test.Assert.areEqual(65535, System.Int64.clipu16(value.shr(2)));
                Bridge.Test.Assert.areEqual(-1, System.Int64.clip32(value.shr(2)));
                Bridge.Test.Assert.areEqual(4294967295, System.Int64.clipu32(value.shr(2)));
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1410', {
        statics: {
            setX: function (value) {
            },
            getProp1: function () {
                return 5;
            },
            setProp1: function (value) {
    
            },
            method1: function () {
                return (Bridge.ClientTest.BridgeIssues.Bridge1410.setX(5.0), 5.0);
            },
            method2: function (i) {
                return i;
            },
            testSetterOnly: function () {
                Bridge.Test.Assert.areEqual(5, Bridge.ClientTest.BridgeIssues.Bridge1410.method1());
            },
            testIndexer: function () {
                var $t, $t1;
                var app = new Bridge.ClientTest.BridgeIssues.Bridge1410();
                Bridge.Test.Assert.areEqual(2, (app.setItem(0, 2), 2));
                Bridge.Test.Assert.areEqual(2, Bridge.ClientTest.BridgeIssues.Bridge1410.method2(($t = (Bridge.Int.div(app.getItem(0), 2)) | 0, app.setItem(0, $t), $t)));
                Bridge.Test.Assert.areEqual(6, Bridge.ClientTest.BridgeIssues.Bridge1410.method2(($t1 = (app.getItem(0) + 1) | 0, app.setItem(0, $t1), $t1)));
            },
            testAssigmentWithOp: function () {
                var $t, $t1;
                var result = "test_";
                var itm = "item";
                var handler = function () {
                    return (result = result + itm);
                };
    
                var str = handler();
                Bridge.Test.Assert.areEqual(str, result);
                Bridge.Test.Assert.areEqual("test_item", str);
    
                Bridge.Test.Assert.areEqual(2, (Bridge.ClientTest.BridgeIssues.Bridge1410.setProp1(2), 2));
                Bridge.Test.Assert.areEqual(2, Bridge.ClientTest.BridgeIssues.Bridge1410.method2(($t = (Bridge.Int.div(Bridge.ClientTest.BridgeIssues.Bridge1410.getProp1(), 2)) | 0, Bridge.ClientTest.BridgeIssues.Bridge1410.setProp1($t), $t)));
                Bridge.Test.Assert.areEqual(6, Bridge.ClientTest.BridgeIssues.Bridge1410.method2(($t1 = (Bridge.ClientTest.BridgeIssues.Bridge1410.getProp1() + 1) | 0, Bridge.ClientTest.BridgeIssues.Bridge1410.setProp1($t1), $t1)));
            }
        },
        getItem: function (v) {
            return 5;
        },
        setItem: function (v, value) {
    
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1411', {
        statics: {
            testTemplateCtorThing: function () {
                var c1 = 'test_string';
                Bridge.Test.Assert.areEqual("test_string", c1);
    
                var c2 = new Bridge.ClientTest.BridgeIssues.Bridge1411.Thing("constructor", 1);
                Bridge.Test.Assert.true(true);
            },
            testTemplateCtorDoodad: function () {
                var c1 = new Bridge.ClientTest.BridgeIssues.Bridge1411.Doodad("constructor");
                Bridge.Test.Assert.true(true);
                Bridge.Test.Assert.areDeepEqual(3, c1.getData());
    
                var c2 = new Bridge.ClientTest.BridgeIssues.Bridge1411.Doodad("constructor$1", 1);
                Bridge.Test.Assert.true(true);
                Bridge.Test.Assert.areDeepEqual(4, c2.getData());
            },
            testTemplateCtorGizmo: function () {
                var c1 = 'test_gizmo5';
                Bridge.Test.Assert.areEqual("test_gizmo5", c1);
    
                var c2 = 'test_gizmo6';
                Bridge.Test.Assert.areEqual("test_gizmo6", c2);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1411.Thing', {
        config: {
            properties: {
                Data: 0
            }
        },
        constructor: function (x) {
            // 2
            this.setData(2);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1411.Gizmo', {
        config: {
            properties: {
                Data: 0
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1428', {
        statics: {
            testEqOperatorWithNull: function () {
                var c = new Bridge.ClientTest.BridgeIssues.Bridge1428();
    
                var test = new System.Collections.Generic.List$1(Function)();
                test.add(Bridge.fn.bind(c, c.method1));
    
                Bridge.Test.Assert.areEqual(1, test.getCount());
                test.remove(Bridge.fn.bind(c, c.method1));
                Bridge.Test.Assert.areEqual(0, test.getCount());
    
                var l1 = Bridge.fn.bind(c, c.method1);
                var l2 = Bridge.fn.bind(c, c.method1);
    
                Bridge.Test.Assert.true(Bridge.staticEquals(l1, l2));
    
                l1 = Bridge.fn.bind(c, c.method1);
                l2 = Bridge.fn.bind(c, c.method2);
    
                Bridge.Test.Assert.false(Bridge.staticEquals(l1, l2));
            }
        },
        method1: function () {
        },
        method2: function () {
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1429', {
        statics: {
            testEqOperatorWithNull: function () {
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BridgeIssues.Bridge1429.op_Equality(new Bridge.ClientTest.BridgeIssues.Bridge1429(), null), "new Bridge1429() == null");
    
                var a = new Bridge.ClientTest.BridgeIssues.Bridge1429();
                var b = new Bridge.ClientTest.BridgeIssues.Bridge1429();
                var aa = a;
    
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BridgeIssues.Bridge1429.op_Equality(a, b), "a == b");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BridgeIssues.Bridge1429.op_Inequality(a, aa), "a != aa");
    
                var c = null;
                var d = null;
    
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BridgeIssues.Bridge1429.op_Inequality(c, d), "c != d");
            },
            op_Equality: function (a, b) {
                return true;
            },
            op_Inequality: function (a, b) {
                return true;
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1438', {
        statics: {
            testJSONParse: function () {
                var serialized = JSON.stringify(Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge1438.Foo(), {
                    setValue: 100
                } ));
    
                Bridge.Test.Assert.notNull$1(serialized, " serialized should not be null");
    
                var result = Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge1438.Foo(), JSON.parse(serialized));
    
                Bridge.Test.Assert.notNull$1(result, " result should not be null");
                Bridge.Test.Assert.areEqual$1("Bridge.ClientTest.BridgeIssues.Bridge1438.Foo", Bridge.getTypeName(result), "Check result type name");
                Bridge.Test.Assert.areEqual$1(100, result.getValue(), "result.Value = 100");
            },
            testJSONParseAsArray: function () {
                var serialized = JSON.stringify([Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge1438.Foo(), {
                    setValue: 101
                } )]);
    
                Bridge.Test.Assert.notNull$1(serialized, " serialized should not be null");
    
                var result = Bridge.merge(new Array(), JSON.parse(serialized), function(){return new Bridge.ClientTest.BridgeIssues.Bridge1438.Foo();});
    
                Bridge.Test.Assert.notNull$1(result, " result should not be null");
                Bridge.Test.Assert.areEqual$1("Array", Bridge.getTypeName(result), "Check result type name");
                Bridge.Test.Assert.areEqual$1(1, result.length, "Check result length");
                Bridge.Test.Assert.notNull$1(result[0], " result[0] should not be null");
                Bridge.Test.Assert.areEqual$1("Bridge.ClientTest.BridgeIssues.Bridge1438.Foo", Bridge.getTypeName(result[0]), "Check result[0] type name");
                Bridge.Test.Assert.areEqual$1(101, result[0].getValue(), "result[0].Value = 101");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1438.Foo', {
        config: {
            properties: {
                Value: 0
            }
        },
        someMethod: function () {
            return "I'm " + Bridge.getTypeName(Bridge.getType(this)) + " and my value is " + this.getValue();
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1448', {
        statics: {
            testPlainForNonAnonymous: function () {
                var a = Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge1448.A(), {
                    data: 5
                } );
    
                var plainee = Bridge.toPlain(a);
    
                Bridge.Test.Assert.notNull$1(plainee, "plainee not null");
                Bridge.Test.Assert.notNull$1(plainee.data, "plainee has data");
                Bridge.Test.Assert.areEqual$1(5, plainee.data, "plainee.Data == 5");
                Bridge.Test.Assert.null$1(plainee.getHashCode, "plainee has no getHashCode");
                Bridge.Test.Assert.null$1(plainee.toJSON, "plainee has no toJSON");
                Bridge.Test.Assert.null$1(plainee.$constructor, "plainee has no $constructor");
                Bridge.Test.Assert.null$1(plainee.equals, "plainee has no equals");
            },
            testObjectLiteralProperty: function () {
                var a = Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge1448.A(), {
                    data: 5
                } );
    
                var l = { v: { data: 5 } };
    
                var plainee = l.v;
    
                Bridge.Test.Assert.notNull$1(plainee, "plainee not null");
                Bridge.Test.Assert.notNull$1(plainee.data, "plainee has data");
                Bridge.Test.Assert.areEqual$1(5, plainee.data, "plainee.Data == 5");
                Bridge.Test.Assert.null$1(plainee.getHashCode, "plainee has no getHashCode");
                Bridge.Test.Assert.null$1(plainee.toJSON, "plainee has no toJSON");
                Bridge.Test.Assert.null$1(plainee.$constructor, "plainee has no $constructor");
                Bridge.Test.Assert.null$1(plainee.equals, "plainee has no equals");
            },
            testToObjectLiteralAlias: function () {
                var o1 = { a: 1 };
                Bridge.Test.Assert.notNull$1(o1, "o1 not null");
                Bridge.Test.Assert.areEqual$1(1, o1.a, "o1.A == 1");
    
                Bridge.Test.Assert.null$1(o1.getHashCode, "o1 has no getHashCode");
                Bridge.Test.Assert.null$1(o1.toJSON, "o1 has no toJSON");
                Bridge.Test.Assert.null$1(o1.$constructor, "o1 has no $constructor");
                Bridge.Test.Assert.null$1(o1.equals, "o1 has no equals");
                Bridge.Test.Assert.notNull$1(o1.a, "o1 has a");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1448.A', {
        data: 0,
        doSomething: function () {
            return this.data;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1448.Plainer');
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1459', {
        statics: {
            testHtmlElements: function () {
                var root = document.getElementById("qunit-fixture");
    
                var button = document.createElement('button');
                root.appendChild(button);
    
                Bridge.Test.Assert.notNull$1(button, "HTMLButtonElement created");
    
                var n = Bridge.as(button, Node);
                Bridge.Test.Assert.notNull$1(n, "Node");
    
                var el = Bridge.as(n, Element);
                Bridge.Test.Assert.notNull$1(el, "Element");
    
                var he = Bridge.as(el, HTMLElement);
                Bridge.Test.Assert.notNull$1(el, "HTMLElement");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge169', {
        statics: {
            number: 0,
            m1: function () {
                ($_.Bridge.ClientTest.BridgeIssues.Bridge169.f1)();
            },
            m2: function () {
                ($_.Bridge.ClientTest.BridgeIssues.Bridge169.f2)();
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.BridgeIssues.Bridge169", $_);
    
    Bridge.apply($_.Bridge.ClientTest.BridgeIssues.Bridge169, {
        f1: function () {
            Bridge.ClientTest.BridgeIssues.Bridge169.number = 1;
        },
        f2: function () {
            Bridge.ClientTest.BridgeIssues.Bridge169.number = 2;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge240A', {
        config: {
            properties: {
                Data: 0
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge266A', {
        statics: {
            test: function () {
                // Nothing gets written for Class1 in the output JavaScript due to the "new object()" argument.
                // If null is used instead (as commented-out) then it works as expected.
                // No compile error.
                return Bridge.ClientTest.BridgeIssues.Bridge266B.test("test", { });
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge266B', {
        statics: {
            test: function (arg1, arg2) {
                return arg2;
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge272', {
        statics: {
            test: function (i) {
                return i;
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge272.MyEnum', {
        statics: {
            Abc: 1,
            Def: 2,
            Ghi: 3
        },
        $enum: true
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge277', {
        statics: {
            Int: 0
        },
        $enum: true
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge294', {
        name: null,
        constructor: function (name) {
            this.name = name;
        },
        getName: function () {
            return this.name;
        },
        getNameThroughGeneric: function (T) {
            return this.name;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.IBridge304', {
        $interface: true
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge305', {
        inherits: [System.Collections.Generic.IEnumerable$1(String)],
        config: {
            properties: {
                Items: null
            }
        },
        constructor: function (items) {
            this.setItems(new System.Collections.Generic.List$1(String)(items));
        },
        getEnumerator: function () {
            return this.getEnumerator$1();
        },
        getEnumerator$1: function () {
            return this.getItems().getEnumerator();
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge306A.Props', {
        name: null,
        toString: function () {
            return this.name;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge306Component$1', function (TProps) { return {
        statics: {
            new: function (TComponent, props) {
                return Bridge.getTypeName(props) + ":" + props;
            }
        }
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge306B.Props', {
        name: null,
        toString: function () {
            return this.name;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge341A', {
        config: {
            properties: {
                Str: null
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge341B', {
        inherits: function () { return [System.IEquatable$1(Bridge.ClientTest.BridgeIssues.Bridge341B)]; },
        config: {
            properties: {
                Str: null
            }
        },
        equalsT: function (other) {
            if (other == null) {
                return false;
            }
            return Bridge.referenceEquals(this.getStr(), other.getStr());
        },
        getHashCode: function () {
            return Bridge.getHashCode(this.getStr());
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge342', {
        inherits: [System.Collections.Generic.IDictionary$2(System.Int32,String)],
        _backingDictionary: null,
        constructor: function () {
            Bridge.ClientTest.BridgeIssues.Bridge342.prototype.constructor$1.call(this, new System.Collections.Generic.Dictionary$2(System.Int32,String)());
    
        },
        constructor$1: function (initialValues) {
            this._backingDictionary = initialValues;
        },
        getItem: function (key) {
            return this._backingDictionary.get(key);
        },
        setItem: function (key, value) {
            this._backingDictionary.set(key, value);
        },
        getKeys: function () {
            return this._backingDictionary.getKeys();
        },
        getValues: function () {
            return this._backingDictionary.getValues();
        },
        getCount: function () {
            return this._backingDictionary.getCount();
        },
        getEnumerator: function () {
            return this.getEnumerator$1();
        },
        getEnumerator$1: function () {
            return this._backingDictionary.getEnumerator();
        },
        add: function (key, value) {
            this._backingDictionary.add(key, value);
        },
        remove: function (key) {
            return this._backingDictionary.remove(key);
        },
        containsKey: function (key) {
            return this._backingDictionary.containsKey(key);
        },
        tryGetValue: function (key, value) {
            return this._backingDictionary.tryGetValue(key, value);
        },
        clear: function () {
            this._backingDictionary.clear();
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge381', {
        statics: {
            testUseCase: function () {
                var s1 = ["a", "b"].join(",");
                Bridge.Test.Assert.areEqual$1("a,b", s1, "Join1");
    
                var animals = new System.Collections.Generic.List$1(Bridge.ClientTest.BridgeIssues.Bridge381.Animal)();
                animals.add(new Bridge.ClientTest.BridgeIssues.Bridge381.Animal("Squirrel", "Rodent"));
                animals.add(new Bridge.ClientTest.BridgeIssues.Bridge381.Animal("Gray Wolf", "Carnivora"));
                animals.add(new Bridge.ClientTest.BridgeIssues.Bridge381.Animal("Capybara", "Rodent"));
    
                var s2 = Bridge.toArray(animals).join(" ");
                Bridge.Test.Assert.areEqual$1("Squirrel Gray Wolf Capybara", s2, "Join2");
    
                var values = [null, "Cobb", 4189, 11434, 0.366];
                var s31 = values.join("|");
                Bridge.Test.Assert.areEqual$1("|Cobb|4189|11434|0.366", s31, "Join31");
    
                values[0] = "";
                var s32 = values.join("|");
                Bridge.Test.Assert.areEqual$1("|Cobb|4189|11434|0.366", s32, "Join32");
    
    
                var sArr = System.Array.init(10, null);
                for (var i = 0; i < 10; i = (i + 1) | 0) {
                    sArr[i] = System.String.format("{0,-3}", ((i * 5) | 0));
                }
    
                var s4 = sArr.join(":");
                Bridge.Test.Assert.areEqual$1("0  :5  :10 :15 :20 :25 :30 :35 :40 :45 ", s4, "Join4");
    
                var val = ["apple", "orange", "grape", "pear"];
                var s5 = val.slice(1, 1 + 2).join(", ");
                Bridge.Test.Assert.areEqual$1("orange, grape", s5, "Join5");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge381.Animal', {
        kind: null,
        order: null,
        constructor: function (kind, order) {
            this.kind = kind;
            this.order = order;
        },
        toString: function () {
            return this.kind;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge383', {
        statics: {
            doSomething: function (person) {
                return person.getName();
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge395', {
        config: {
            properties: {
                Id: null,
                data: 0
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge407', {
        statics: {
            op_Addition: function (x, y) {
                return Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge407(), {
                    setA: ((x.getA() + y.getA()) | 0)
                } );
            },
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge407(); }
        },
        config: {
            properties: {
                A: 0
            }
        },
        constructor: function () {
        },
        $struct: true,
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 1091152776;
            hash = hash * 23 + (this.A == null ? 0 : Bridge.getHashCode(this.A));
            return hash;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.BridgeIssues.Bridge407)) {
                return false;
            }
            return Bridge.equals(this.A, o.A);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.BridgeIssues.Bridge407();
            s.A = this.A;
            return s;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge418', {
        config: {
            properties: {
                Delegate: null
            }
        },
        callDelegate: function (data) {
            return this.getDelegate()(data);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge422', {
        statics: {
            first: 0,
            next: 100,
            afterNext: 101
        },
        $enum: true
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge436First', {
        toObject: function () {
            return "1";
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge439', {
        config: {
            events: {
                _dispatcher: null
            }
        },
        register: function (callback) {
            this.add_dispatcher(callback);
        },
        callDispatcher: function (s) {
            this._dispatcher(s);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge447', {
        statics: {
            Five: 5,
            Another: "Another",
            Ten: System.Decimal(10.0),
            checkInlineExpression: function () {
                Bridge.Test.Assert.areEqual$1("AnotherSome", "AnotherSome", "AnotherSome");
                Bridge.Test.Assert.areEqual$1(20, 20, "20");
                Bridge.Test.Assert.areEqual$1(System.Decimal(10.5), System.Decimal(10.5), "10.5m");
            },
            checkInlineCalls: function () {
                Bridge.Test.Assert.areEqual$1("AnotherSome", Bridge.ClientTest.BridgeIssues.Bridge447.getSum$2(Bridge.ClientTest.BridgeIssues.Bridge447.Another, "Some"), "AnotherSome");
                Bridge.Test.Assert.areEqual$1(20, Bridge.ClientTest.BridgeIssues.Bridge447.getSum$1(Bridge.ClientTest.BridgeIssues.Bridge447.Five, 15), "20");
                Bridge.Test.Assert.areEqual$1(System.Decimal(10.5), Bridge.ClientTest.BridgeIssues.Bridge447.getSum(Bridge.ClientTest.BridgeIssues.Bridge447.Ten, System.Decimal(0.5)), "10.5m");
            },
            getSum$1: function (a, b) {
                return ((a + b) | 0);
            },
            getSum$2: function (a, b) {
                return a + b;
            },
            getSum: function (a, b) {
                return a.add(b);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge467', {
        config: {
            properties: {
                MyProperty: 0
            }
        },
        equals: function (obj) {
            var other = Bridge.as(obj, Bridge.ClientTest.BridgeIssues.Bridge467);
            if (other == null) {
                return false;
            }
    
            if (this.getMyProperty() < 0 || other.getMyProperty() < 0) {
                return Bridge.referenceEquals(this, other);
            }
    
            return this.getMyProperty() === other.getMyProperty();
        },
        getHashCode: function () {
            return this.getMyProperty() < 0 ? Bridge.getHashCode(this) : Bridge.getHashCode(this.getMyProperty());
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge470', {
        inherits: function () { return [System.Collections.Generic.IEqualityComparer$1(Bridge.ClientTest.BridgeIssues.Bridge470)]; },
        statics: {
            isOdd: function (value) {
                return value % 2 !== 0;
            }
        },
        config: {
            properties: {
                Data: 0
            }
        },
        equals2: function (x, y) {
            return x.getData() === y.getData();
        },
        getHashCode2: function (obj) {
            return Bridge.getHashCode(obj.getData());
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge472', {
        statics: {
            test: function () {
                var magic1 = new System.Collections.Generic.List$1(String)();
                magic1.insert(magic1.getCount(), "first");
                magic1.insert(magic1.getCount(), "second");
    
                Bridge.Test.Assert.areEqual$1("first", magic1.getItem(0), "magic1[0]");
                Bridge.Test.Assert.areEqual$1("second", magic1.getItem(1), "magic1[1]");
    
                var magic2 = new System.Collections.Generic.List$1(String)();
                magic2.insertRange(magic2.getCount(), ["first", "second"]);
                magic2.insertRange(magic2.getCount(), ["third", "fourth"]);
    
                Bridge.Test.Assert.areEqual$1("first", magic2.getItem(0), "magic1[0]");
                Bridge.Test.Assert.areEqual$1("second", magic2.getItem(1), "magic1[1]");
                Bridge.Test.Assert.areEqual$1("third", magic2.getItem(2), "magic1[2]");
                Bridge.Test.Assert.areEqual$1("fourth", magic2.getItem(3), "magic1[3]");
    
                Bridge.Test.Assert.throws$5($_.Bridge.ClientTest.BridgeIssues.Bridge472.f1, "Insert at length + 1");
    
                Bridge.Test.Assert.throws$5($_.Bridge.ClientTest.BridgeIssues.Bridge472.f2, "Insert at -1");
    
                Bridge.Test.Assert.throws$5($_.Bridge.ClientTest.BridgeIssues.Bridge472.f3, "InsertRange at length + 1");
    
                Bridge.Test.Assert.throws$5($_.Bridge.ClientTest.BridgeIssues.Bridge472.f4, "InsertRange at -1");
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.BridgeIssues.Bridge472", $_);
    
    Bridge.apply($_.Bridge.ClientTest.BridgeIssues.Bridge472, {
        f1: function () {
            var magic = new System.Collections.Generic.List$1(String)();
            magic.insert(1, "first");
        },
        f2: function () {
            var magic = new System.Collections.Generic.List$1(String)();
            magic.insert(-1, "first");
        },
        f3: function () {
            var magic = new System.Collections.Generic.List$1(String)();
            magic.insertRange(1, ["first", "second"]);
        },
        f4: function () {
            var magic = new System.Collections.Generic.List$1(String)();
            magic.insertRange(-1, ["first", "second"]);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge479', {
        statics: {
            testUseCase: function () {
                var pair = new System.Collections.Generic.KeyValuePair$2(System.Int32,String)(1, "value");
                Bridge.Test.Assert.areEqual$1(1, pair.key, "Bridge479 Key");
                Bridge.Test.Assert.areEqual$1("value", pair.value, "Bridge479 Value");
                Bridge.Test.Assert.areEqual$1("[1, value]", pair.toString(), "Bridge479 ToString");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge485', {
        statics: {
            testUseCase: function () {
                var list = System.Linq.Enumerable.from([new $_.$AnonymousType$13("", "")]).skip(1).toList(Object);
                list.add(new $_.$AnonymousType$13("Ruth", "Babe"));
                list.add(new $_.$AnonymousType$13("Johnson", "Walter"));
                list.add(new $_.$AnonymousType$13("Cobb", "Ty"));
                list.add(new $_.$AnonymousType$13("Schmidt", "Mike"));
    
                var query = System.Linq.Enumerable.from(list).where($_.Bridge.ClientTest.BridgeIssues.Bridge485.f1).select($_.Bridge.ClientTest.BridgeIssues.Bridge485.f2);
    
                var s = JSON.stringify(query.toList(Object));
    
                Bridge.Test.Assert.areEqual$1("{\"items\":[{\"lastName\":\"Ruth\",\"firstName\":\"Babe\"},{\"lastName\":\"Cobb\",\"firstName\":\"Ty\"}]}", s, "#485");
            }
        }
    });
    
    Bridge.define("$AnonymousType$13", $_, {
        constructor: function (lastName, firstName) {
            this.lastName = lastName;
            this.firstName = firstName;
        },
        getLastName : function () {
            return this.lastName;
        },
        getFirstName : function () {
            return this.firstName;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$13)) {
                return false;
            }
            return Bridge.equals(this.lastName, o.lastName) && Bridge.equals(this.firstName, o.firstName);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + -781562958;
            hash = hash * 23 + (this.lastName == null ? 0 : Bridge.getHashCode(this.lastName));
            hash = hash * 23 + (this.firstName == null ? 0 : Bridge.getHashCode(this.firstName));
            return hash;
        },
        toJSON: function () {
            return {
                lastName : this.lastName,
                firstName : this.firstName
            };
        }
    });
    
    Bridge.ns("Bridge.ClientTest.BridgeIssues.Bridge485", $_);
    
    Bridge.apply($_.Bridge.ClientTest.BridgeIssues.Bridge485, {
        f1: function (p) {
            return p.lastName.length === 4;
        },
        f2: function (p) {
            return new $_.$AnonymousType$13(p.lastName, p.firstName);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge495', {
        statics: {
            testUseCase: function () {
                var root = document.getElementById("qunit-fixture");
    
                var button1 = document.createElement('button');
                button1.innerHTML = "Button 1";
                button1.id = "button1";
                button1.style.color = "green";
    
                root.appendChild(button1);
    
                var b1 = document.getElementById("button1");
                Bridge.Test.Assert.areEqual$1("green", b1.style.color, "b1.Style.Color green");
    
                var button2 = document.createElement('button');
                button2.innerHTML = "Button 2";
                button2.id = "button2";
                button2.style.backgroundColor = "yellow";
    
                root.appendChild(button2);
    
                var b2 = document.getElementById("button2");
                Bridge.Test.Assert.areEqual$1("yellow", b2.style.backgroundColor, "b2.Style.BackgroundColor HTMLColor.Yellow");
    
                var hexColor = "#FFEEAA";
                var divElement1 = document.createElement('div');
                divElement1.innerHTML = "Div 1";
                divElement1.id = "div1";
                divElement1.style.color = hexColor;
    
                root.appendChild(divElement1);
    
                var div1 = document.getElementById("div1");
                Bridge.Test.Assert.areEqual$1("rgb(255, 238, 170)", div1.style.color, "div1.Style.Color " + hexColor);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge501', {
        statics: {
            testUseCase: function () {
                var list = Bridge.merge(new System.Collections.Generic.List$1(System.Int32)(), [
                    [7]
                ] );
                var z = JSON.stringify(list); // this is ok
                Bridge.Test.Assert.areEqual$1("{\"items\":[7]}", z, "List<int>");
    
                var b = Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge501B(), [
                    [1],
                    [2]
                ] );
                var y = JSON.stringify(b); // wrong, missing items
                Bridge.Test.Assert.areEqual$1("{\"items\":[1,2]}", y, "Bridge501B");
    
                var a = Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge501A(), [
                    [7]
                ] ); // sine items is defined as member, push fails
                var x = JSON.stringify(a);
                Bridge.Test.Assert.areEqual$1("{\"items\":[7]}", x, "Bridge501A");
    
                var c = Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge501A(), JSON.parse(x));
                Bridge.Test.Assert.areEqual$1("12", c.items$1, "Bridge501A Parse c.Items");
                Bridge.Test.Assert.areEqual$1(7, c.getItem(0), "Bridge501A Parse c[0]");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge501A', {
        inherits: [System.Collections.Generic.List$1(System.Int32)],
        items$1: "12"
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge501B', {
        inherits: [System.Collections.Generic.List$1(System.Int32)]
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge502', {
        statics: {
            testUseCase: function () {
                var $t, $t1, $t2, $t3;
                var numbers = [1, 2, 3];
    
                var sum = 0;
    
                $t = Bridge.getEnumerator(numbers);
                while ($t.moveNext()) {
                    var a = $t.getCurrent();
                    sum = (sum + a) | 0;
                }
    
                $t1 = Bridge.getEnumerator(numbers);
                while ($t1.moveNext()) {
                    var a1 = $t1.getCurrent();
                    sum = (sum + a1) | 0;
                }
    
                $t2 = Bridge.getEnumerator(numbers);
                while ($t2.moveNext()) {
                    var a2 = $t2.getCurrent();
                    sum = (sum + a2) | 0;
                }
    
                $t3 = Bridge.getEnumerator(numbers);
                while ($t3.moveNext()) {
                    var a3 = $t3.getCurrent();
                    sum = (sum + a3) | 0;
                }
    
                Bridge.Test.Assert.areEqual$1(24, sum, "Bridge502 sum");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge503', {
        statics: {
            testUseCase: function () {
                var a = ["a", "b", "c"];
                var list = new System.Collections.Generic.List$1(String)(a);
    
                list.addRange(a);
    
                Bridge.Test.Assert.areEqual$1(3, a.length, "Bridge503: array.Length is correct");
                Bridge.Test.Assert.areEqual$1(6, list.getCount(), "Bridge503: list.Count is correct");
    
                list.clear();
    
                Bridge.Test.Assert.areEqual$1(3, a.length, "Bridge503: array.Length is correct");
                Bridge.Test.Assert.areEqual$1(0, list.getCount(), "Bridge503: list.Count is correct");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge508', {
        statics: {
            count: 0,
            config: {
                properties: {
                    QUnitAsyncDone: null
                }
            },
            testUseCase: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    result, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1], $step);
                            switch ($step) {
                                case 0: {
                                    Bridge.ClientTest.BridgeIssues.Bridge508.setQUnitAsyncDone(Bridge.Test.Assert.async());
                                    
                                    $task1 = Bridge.ClientTest.BridgeIssues.Bridge508.doSomethingAsync();
                                    $step = 1;
                                    $task1.continueWith($asyncBody, true);
                                    return;
                                }
                                case 1: {
                                    $taskResult1 = $task1.getAwaitedResult();
                                    result = $taskResult1;
                                    
                                    Bridge.Test.Assert.areEqual$1("A(0)A(1)B(0)B(1)B(2)", result, "#508 DoSomethingAsync");
                                    
                                    Bridge.ClientTest.BridgeIssues.Bridge508.getQUnitAsyncDone()();
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);
    
                $asyncBody();
            },
            doSomethingAsync: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $task3, 
                    $taskResult3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    result, 
                    i, 
                    np, 
                    np1, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5,6,7,8,9,10,11], $step);
                                switch ($step) {
                                    case 0: {
                                        result = "";
                                        
                                        i = 0;
                                        $task3 = Bridge.ClientTest.BridgeIssues.Bridge508.initPage();
                                        $step = 1;
                                        $task3.continueWith($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult3 = $task3.getAwaitedResult();
                                        np = $taskResult3;
                                        $step = 2;
                                        continue;
                                    }
                                    case 2: {
                                        if ( np != null ) {
                                            $step = 3;
                                            continue;
                                        }
                                        $step = 6;
                                        continue;
                                    }
                                    case 3: {
                                        result += System.String.format("A({0})", Bridge.identity(i, (i = (i + 1) | 0)));
                                    }
                                    case 4: {
                                        $task2 = Bridge.ClientTest.BridgeIssues.Bridge508.nextPage();
                                        $step = 5;
                                        $task2.continueWith($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $taskResult2 = $task2.getAwaitedResult();
                                        np = $taskResult2;
                                        $step = 2;
                                        continue;
                                    }
                                    case 6: {
                                        
                                        Bridge.ClientTest.BridgeIssues.Bridge508.count = 0;
                                        i = 0;
                                        $task1 = Bridge.ClientTest.BridgeIssues.Bridge508.initPage();
                                        $step = 7;
                                        $task1.continueWith($asyncBody);
                                        return;
                                    }
                                    case 7: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        np1 = $taskResult1;
                                        $step = 8;
                                        continue;
                                    }
                                    case 8: {
                                        if ( np1 != null ) {
                                            $step = 9;
                                            continue;
                                        }
                                        $step = 11;
                                        continue;
                                    }
                                    case 9: {
                                        result += System.String.format("B({0})", Bridge.identity(i, (i = (i + 1) | 0)));
                                    }
                                    case 10: {
                                        np1 = Bridge.ClientTest.BridgeIssues.Bridge508.nextPage1();
                                        $step = 8;
                                        continue;
                                    }
                                    case 11: {
                                        
                                        $tcs.setResult(result);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);
    
                $asyncBody();
                return $tcs.task;
            },
            initPage: function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = System.Threading.Tasks.Task.delay(0);
                                        $step = 1;
                                        $task1.continueWith($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        Bridge.ClientTest.BridgeIssues.Bridge508.count = (Bridge.ClientTest.BridgeIssues.Bridge508.count + 1) | 0;
                                        $tcs.setResult(Bridge.ClientTest.BridgeIssues.Bridge508.count < 2 ? new $_.$AnonymousType$14() : null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);
    
                $asyncBody();
                return $tcs.task;
            },
            nextPage: function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = System.Threading.Tasks.Task.delay(0);
                                        $step = 1;
                                        $task1.continueWith($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        Bridge.ClientTest.BridgeIssues.Bridge508.count = (Bridge.ClientTest.BridgeIssues.Bridge508.count + 1) | 0;
                                        $tcs.setResult(Bridge.ClientTest.BridgeIssues.Bridge508.count < 3 ? new $_.$AnonymousType$14() : null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);
    
                $asyncBody();
                return $tcs.task;
            },
            nextPage1: function () {
                Bridge.ClientTest.BridgeIssues.Bridge508.count = (Bridge.ClientTest.BridgeIssues.Bridge508.count + 1) | 0;
                return Bridge.ClientTest.BridgeIssues.Bridge508.count < 4 ? new $_.$AnonymousType$14() : null;
            }
        }
    });
    
    Bridge.define("$AnonymousType$14", $_, {
        constructor: function () {
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$14)) {
                return false;
            }
            return ;
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + -1184847485;
            return hash;
        },
        toJSON: function () {
            return {
    
            };
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge514', {
        statics: {
            testUseCase: function () {
                var d1 = 5.43;
                Bridge.Test.Assert.areEqual$1(1, Bridge.Int.sign(d1), "Bridge514 Sign(double 5.43)");
    
                var d2 = -7.1;
                Bridge.Test.Assert.areEqual$1(-1, Bridge.Int.sign(d2), "Bridge514 Sign(double -7.1)");
            },
            testRelated: function () {
                var d1 = System.Decimal(5.43);
                Bridge.Test.Assert.areEqual$1(1, d1.sign(), "Bridge514 Sign(decimal 5.43)");
    
                var d2 = System.Decimal(-7.1);
                Bridge.Test.Assert.areEqual$1(-1, d2.sign(), "Bridge514 Sign(decimal -7.1)");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge520', {
        statics: {
            testUseCase: function () {
                var s = new Bridge.ClientTest.BridgeIssues.Bridge520.Source();
                s.fire();
    
                Bridge.Test.Assert.areEqual$1(1, s.getCounter(), "Bridge520 Counter");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge520.Source', {
        config: {
            events: {
                Fired: null
            },
            properties: {
                Counter: 0
            }
        },
        fire: function () {
            var getEvt = $_.Bridge.ClientTest.BridgeIssues.Bridge520.Source.f1;
            var evt = getEvt(this);
    
            evt = Bridge.fn.combine(evt, Bridge.fn.bind(this, $_.Bridge.ClientTest.BridgeIssues.Bridge520.Source.f2));
    
            evt(this, new Object());
        }
    });
    
    Bridge.ns("Bridge.ClientTest.BridgeIssues.Bridge520.Source", $_);
    
    Bridge.apply($_.Bridge.ClientTest.BridgeIssues.Bridge520.Source, {
        f1: function (s) {
            return s.Fired;
        },
        f2: function (sender, args) {
            this.setCounter((this.getCounter() + 1) | 0);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge522', {
        statics: {
            testUseCase1: function () {
                var dc1 = new Bridge.ClientTest.BridgeIssues.Bridge522.DerivedClass1();
                dc1.addValue(5);
    
                Bridge.Test.Assert.areEqual$1(1, dc1.getValues().getCount(), "Bridge522 dc1.Count = 1");
    
                var dc2 = new Bridge.ClientTest.BridgeIssues.Bridge522.DerivedClass1();
                Bridge.Test.Assert.areEqual$1(0, dc2.getValues().getCount(), "Bridge522 dc2.Count = 0");
            },
            testUseCase2: function () {
                var dc1 = new Bridge.ClientTest.BridgeIssues.Bridge522.DerivedClass2();
                dc1.addValue(5);
    
                Bridge.Test.Assert.areEqual$1(1, dc1.getValues().getCount(), "Bridge522 dc1.Count = 1");
    
                var dc2 = new Bridge.ClientTest.BridgeIssues.Bridge522.DerivedClass2();
                Bridge.Test.Assert.areEqual$1(0, dc2.getValues().getCount(), "Bridge522 dc2.Count = 0");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge522.BaseClass', {
        values: null,
        config: {
            init: function () {
                this.values = new System.Collections.Generic.List$1(System.Int32)();
            }
        },
        addValue: function (a) {
            this.values.add(a);
        },
        getValues: function () {
            return this.values;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge532', {
        statics: {
            testUseCase: function () {
                var list = new System.Collections.Generic.List$1(System.Int32)([1, 2, 3, 4, 5, 6, 7, 8, 9]);
    
                Bridge.Test.Assert.areDeepEqual$1([1, 2], list.getRange(0, 2).toArray(), "Bridge532 (0, 2)");
                Bridge.Test.Assert.areDeepEqual$1([2, 3], list.getRange(1, 2).toArray(), "Bridge532 (1, 2)");
                Bridge.Test.Assert.areDeepEqual$1([7, 8, 9], list.getRange(6, 3).toArray(), "Bridge532 (6, 3)");
    
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge537', {
        statics: {
            testUseCase: function () {
                Bridge.Test.Assert.areEqual$1(2, Bridge.ClientTest.BridgeIssues.Bridge537B.testB1(), "Bridge537 TestB1");
    
                Bridge.Test.Assert.areEqual$1(1, Bridge.ClientTest.BridgeIssues.Bridge537B.testB2(), "Bridge537 TestB2");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge537A', {
        id: 0
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge538', {
        statics: {
            testUseCase: function () {
                var srcString = "123";
                var destString = "4";
    
                destString += String.fromCharCode(srcString.charCodeAt(2));
    
                Bridge.Test.Assert.areEqual$1("43", destString, "Bridge538 '43'");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge544', {
        statics: {
            testUseCase: function () {
                var o = Bridge.merge(new Boolean(), JSON.parse("true"));
                Bridge.Test.Assert.areEqual$1(true, o, "Bridge544 bool");
            },
            testRelated: function () {
                var i = Bridge.merge(new System.Int32(), JSON.parse("25"));
                Bridge.Test.Assert.areEqual$1(25, i, "Bridge544 int");
    
                var dbl = Bridge.merge(new System.Double(), JSON.parse("26.1"));
                Bridge.Test.Assert.areEqual$1(26.1, dbl, "Bridge544 double");
    
                var d = Bridge.merge(new System.Decimal(), JSON.parse("27.2"));
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(d, 27.2, "Bridge544 decimal");
    
                var s = Bridge.merge(new String(), JSON.parse("\"Some string\""));
                Bridge.Test.Assert.areEqual$1("Some string", s, "Bridge544 string");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge546', {
        statics: {
            testUseCase: function () {
                var date = new Date(2015, 1 - 1, 1, 0, 0, 0, 0);
    
                var i = 1;
                var d = new Date(date.valueOf() + Math.round((((10 + ((20 * i) | 0)) | 0)) * 6e4));
    
                Bridge.Test.Assert.areEqual$1(30, d.getMinutes(), "Bridge546 30 minutes");
            },
            testRelated: function () {
                var date = new Date(2015, 1 - 1, 1, 0, 0, 0, 0);
                var span1 = new System.TimeSpan(0, 15, 0);
                var span2 = new System.TimeSpan(0, 7, 0);
                var i = 1;
    
                var d1 = Bridge.Date.subdt(Bridge.Date.subdt(date, span1), span2);
                Bridge.Test.Assert.areEqual$1(38, d1.getMinutes(), "Bridge546 d1");
    
                var d2 = Bridge.Date.adddt(Bridge.Date.adddt(date, span1), span2);
                Bridge.Test.Assert.areEqual$1(22, d2.getMinutes(), "Bridge546 d2");
    
                var d3 = new Date(date.valueOf() + Math.round((((10 + ((20 * i) | 0)) | 0)) * 864e5));
                Bridge.Test.Assert.areEqual$1(31, d3.getDate(), "Bridge546 d3");
    
                var d4 = new Date(date.valueOf() + Math.round((((10 + ((20 * i) | 0)) | 0)) * 36e5));
                Bridge.Test.Assert.areEqual$1(6, d4.getHours(), "Bridge546 d4");
    
                var d5 = new Date(date.valueOf() + Math.round((((12 + ((20 * i) | 0)) | 0)) * 1e3));
                Bridge.Test.Assert.areEqual$1(32, d5.getSeconds(), "Bridge546 d5");
            }
        }
    });
    
    /** @namespace Bridge.ClientTest.BridgeIssues */
    
    /**
     * This test will check whether TypedArray types are emitted to JavaScript
     the right way. [#548]
     *
     * @public
     * @class Bridge.ClientTest.BridgeIssues.Bridge548
     */
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge548', {
        statics: {
            testUseCase: function () {
                var isSpecialTypeName = Bridge.ClientTest.Utilities.BrowserHelper.isPhantomJs();
    
                var v1 = new Float32Array(1);
                var thisType = "Float32Array";
                Bridge.Test.Assert.true$1(v1 != null, thisType + " created");
                var thisName = isSpecialTypeName ? "Object" : thisType;
                Bridge.Test.Assert.areEqual$1(thisName, Bridge.getTypeName(v1), thisType + " class name");
    
                var v2 = new Float64Array(1);
                thisType = "Float64Array";
                Bridge.Test.Assert.true$1(v2 != null, thisType + " created");
                thisName = isSpecialTypeName ? "Object" : thisType;
                Bridge.Test.Assert.areEqual$1(thisName, Bridge.getTypeName(v2), thisType + " class name");
    
                var v3 = new Int16Array(1);
                thisType = "Int16Array";
                Bridge.Test.Assert.true$1(v3 != null, thisType + " created");
                thisName = isSpecialTypeName ? "Object" : thisType;
                Bridge.Test.Assert.areEqual$1(thisName, Bridge.getTypeName(v3), thisType + " class name");
    
                var v4 = new Int32Array(1);
                thisType = "Int32Array";
                Bridge.Test.Assert.true$1(v4 != null, thisType + " created");
                thisName = isSpecialTypeName ? "Object" : thisType;
                Bridge.Test.Assert.areEqual$1(thisName, Bridge.getTypeName(v4), thisType + " class name");
    
                var v5 = new Int8Array(1);
                thisType = "Int8Array";
                Bridge.Test.Assert.true$1(v5 != null, thisType + " created");
                thisName = isSpecialTypeName ? "Object" : thisType;
                Bridge.Test.Assert.areEqual$1(thisName, Bridge.getTypeName(v5), thisType + " class name");
    
                var v6 = new Uint16Array(1);
                thisType = "Uint16Array";
                Bridge.Test.Assert.true$1(v6 != null, thisType + " created");
                thisName = isSpecialTypeName ? "Object" : thisType;
                Bridge.Test.Assert.areEqual$1(thisName, Bridge.getTypeName(v6), thisType + " class name");
    
                var v7 = new Uint32Array(1);
                thisType = "Uint32Array";
                Bridge.Test.Assert.true$1(v7 != null, thisType + " created");
                thisName = isSpecialTypeName ? "Object" : thisType;
                Bridge.Test.Assert.areEqual$1(thisName, Bridge.getTypeName(v7), thisType + " class name");
    
                var v8 = new Uint8Array(1);
                thisType = "Uint8Array";
                Bridge.Test.Assert.true$1(v8 != null, thisType + " created");
                thisName = isSpecialTypeName ? "Object" : thisType;
                Bridge.Test.Assert.areEqual$1(thisName, Bridge.getTypeName(v8), thisType + " class name");
    
                var v9 = new Uint8ClampedArray(1);
                thisType = "Uint8ClampedArray";
                Bridge.Test.Assert.true$1(v9 != null, thisType + " created");
                thisName = isSpecialTypeName ? "Object" : thisType;
                Bridge.Test.Assert.areEqual$1(thisName, Bridge.getTypeName(v9), thisType + " class name");
            }
        }
    });
    
    /**
     * This test will check whether TypedArray types correctly inherit from
     the prototype common methods and fields. [#549]
     *
     * @public
     * @class Bridge.ClientTest.BridgeIssues.Bridge549
     */
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge549', {
        statics: {
            testUseCase: function () {
                var isToStringToTypeNameLogic = !Bridge.ClientTest.Utilities.BrowserHelper.isChrome();
    
                var v1 = new Float32Array(10);
                Bridge.Test.Assert.true$1(v1 != null, "Float32Array created");
    
                v1[1] = 11;
                v1[5] = 5;
                v1[9] = 99;
                Bridge.Test.Assert.areEqual$1(11, v1[1], "Float32Array indexier works 1");
                Bridge.Test.Assert.areEqual$1(99, v1[9], "Float32Array indexier works 9");
    
                // Check just a select number of references inside the Prototype inheritance.
                Bridge.Test.Assert.true$1(v1.buffer != null, "Float32Array Buffer");
                Bridge.Test.Assert.areEqual$1(40, v1.byteLength, "Float32Array ByteLength");
                Bridge.Test.Assert.areEqual$1(0, v1.byteOffset, "Float32Array ByteOffset");
                Bridge.Test.Assert.areEqual$1(10, v1.length, "Float32Array Length");
    
                /* 
                 * Commented out. Reason: Only Firefox implements them.
                 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array
                var mA = v1.Join();
                v1.Reverse();
                var mB = v1.Slice();
                var mC = v1.Sort();
                 */
    
                var expectedToStringFloat32Array1 = isToStringToTypeNameLogic ? "[object Float32Array]" : "0,11,0,0,0,5,0,0,0,99";
                Bridge.Test.Assert.areEqual$1(expectedToStringFloat32Array1, v1.toLocaleString(), "Float32Array ToLocaleString");
                Bridge.Test.Assert.areEqual$1(expectedToStringFloat32Array1, v1.toString(), "Float32Array ToString");
    
                // Some browsers do not support SubArray() with no parameters.
                // At least 'begin' must be provided.
                var subArray11 = v1.subarray(1);
                var expectedToStringFloat32Array2 = isToStringToTypeNameLogic ? "[object Float32Array]" : "11,0,0,0,5,0,0,0,99";
                Bridge.Test.Assert.true$1(subArray11 != null, "Float32Array SubArray1");
                Bridge.Test.Assert.areEqual$1(9, subArray11.length, "Float32Array SubArray1 Length");
                Bridge.Test.Assert.areEqual$1(expectedToStringFloat32Array2, subArray11.toString(), "Float32Array SubArray1 ToString");
                Bridge.Test.Assert.areEqual$1(4, subArray11.byteOffset, "Float32Array SubArray1 ByteOffset");
    
                var subArray12 = subArray11.subarray(2, 6);
                var expectedToStringFloat32Array3 = isToStringToTypeNameLogic ? "[object Float32Array]" : "0,0,5,0";
                Bridge.Test.Assert.true$1(subArray12 != null, "Float32Array SubArray2");
                Bridge.Test.Assert.areEqual$1(4, subArray12.length, "Float32Array SubArray2 Length");
                Bridge.Test.Assert.areEqual$1(expectedToStringFloat32Array3, subArray12.toString(), "Float32Array SubArray2 ToString");
                Bridge.Test.Assert.areEqual$1(12, subArray12.byteOffset, "Float32Array SubArray2 ByteOffset");
    
                var v2 = new Float64Array(10);
                Bridge.Test.Assert.true$1(v2 != null, "Float64Array created");
    
                v2[1] = 11;
                v2[5] = 5;
                v2[9] = 99;
                Bridge.Test.Assert.areEqual$1(11, v2[1], "Float64Array indexier works 1");
                Bridge.Test.Assert.areEqual$1(99, v2[9], "Float64Array indexier works 9");
    
                Bridge.Test.Assert.true$1(v2.buffer != null, "Float64Array Buffer");
                Bridge.Test.Assert.areEqual$1(80, v2.byteLength, "Float64Array ByteLength");
                Bridge.Test.Assert.areEqual$1(0, v2.byteOffset, "Float64Array ByteOffset");
                Bridge.Test.Assert.areEqual$1(10, v2.length, "Float64Array Length");
    
                var expectedToStringFloat64Array1 = isToStringToTypeNameLogic ? "[object Float64Array]" : "0,11,0,0,0,5,0,0,0,99";
                Bridge.Test.Assert.areEqual$1(expectedToStringFloat64Array1, v2.toLocaleString(), "Float64Array ToLocaleString");
                Bridge.Test.Assert.areEqual$1(expectedToStringFloat64Array1, v2.toString(), "Float64Array ToString");
    
                var subArray21 = v2.subarray(1);
                var expectedToStringFloat64Array2 = isToStringToTypeNameLogic ? "[object Float64Array]" : "11,0,0,0,5,0,0,0,99";
                Bridge.Test.Assert.true$1(subArray21 != null, "Float64Array SubArray1");
                Bridge.Test.Assert.areEqual$1(9, subArray21.length, "Float64Array SubArray1 Length");
                Bridge.Test.Assert.areEqual$1(expectedToStringFloat64Array2, subArray21.toString(), "Float64Array SubArray1 ToString");
                Bridge.Test.Assert.areEqual$1(8, subArray21.byteOffset, "Float64Array SubArray1 ByteOffset");
    
                var subArray22 = subArray21.subarray(2, 6);
                var expectedToStringFloat64Array3 = isToStringToTypeNameLogic ? "[object Float64Array]" : "0,0,5,0";
                Bridge.Test.Assert.true$1(subArray22 != null, "Float64Array SubArray2");
                Bridge.Test.Assert.areEqual$1(4, subArray22.length, "Float64Array SubArray2 Length");
                Bridge.Test.Assert.areEqual$1(expectedToStringFloat64Array3, subArray22.toString(), "Float64Array SubArray2 ToString");
                Bridge.Test.Assert.areEqual$1(24, subArray22.byteOffset, "Float64Array SubArray2 ByteOffset");
    
                var v3 = new Int16Array(10);
                Bridge.Test.Assert.true$1(v3 != null, "Int16Array created");
    
                v3[1] = 11;
                v3[5] = 5;
                v3[9] = 99;
                Bridge.Test.Assert.areEqual$1(11, v3[1], "Int16Array indexier works 1");
                Bridge.Test.Assert.areEqual$1(99, v3[9], "Int16Array indexier works 9");
    
                Bridge.Test.Assert.true$1(v3.buffer != null, "Int16Array Buffer");
                Bridge.Test.Assert.areEqual$1(20, v3.byteLength, "Int16Array ByteLength");
                Bridge.Test.Assert.areEqual$1(0, v3.byteOffset, "Int16Array ByteOffset");
                Bridge.Test.Assert.areEqual$1(10, v3.length, "Int16Array Length");
    
                var expectedToStringInt16Array1 = isToStringToTypeNameLogic ? "[object Int16Array]" : "0,11,0,0,0,5,0,0,0,99";
                Bridge.Test.Assert.areEqual$1(expectedToStringInt16Array1, v3.toLocaleString(), "Int16Array ToLocaleString");
                Bridge.Test.Assert.areEqual$1(expectedToStringInt16Array1, v3.toString(), "Int16Array ToString");
    
                var subArray31 = v3.subarray(1);
                var expectedToStringInt16Array2 = isToStringToTypeNameLogic ? "[object Int16Array]" : "11,0,0,0,5,0,0,0,99";
                Bridge.Test.Assert.true$1(subArray31 != null, "Int16Array SubArray1");
                Bridge.Test.Assert.areEqual$1(9, subArray31.length, "Int16Array SubArray1 Length");
                Bridge.Test.Assert.areEqual$1(expectedToStringInt16Array2, subArray31.toString(), "Int16Array SubArray1 ToString");
                Bridge.Test.Assert.areEqual$1(2, subArray31.byteOffset, "Int16Array SubArray1 ByteOffset");
    
                var subArray32 = subArray31.subarray(2, 6);
                var expectedToStringInt16Array3 = isToStringToTypeNameLogic ? "[object Int16Array]" : "0,0,5,0";
                Bridge.Test.Assert.true$1(subArray32 != null, "Int16Array SubArray2");
                Bridge.Test.Assert.areEqual$1(4, subArray32.length, "Int16Array SubArray2 Length");
                Bridge.Test.Assert.areEqual$1(expectedToStringInt16Array3, subArray32.toString(), "Int16Array SubArray2 ToString");
                Bridge.Test.Assert.areEqual$1(6, subArray32.byteOffset, "Int16Array SubArray2 ByteOffset");
    
                var v4 = new Int32Array(10);
                Bridge.Test.Assert.true$1(v4 != null, "Int32Array created");
    
                v4[1] = 11;
                v4[5] = 5;
                v4[9] = 99;
                Bridge.Test.Assert.areEqual$1(11, v4[1], "Int32Array indexier works 1");
                Bridge.Test.Assert.areEqual$1(99, v4[9], "Int32Array indexier works 9");
    
                Bridge.Test.Assert.true$1(v4.buffer != null, "Int32Array Buffer");
                Bridge.Test.Assert.areEqual$1(40, v4.byteLength, "Int32Array ByteLength");
                Bridge.Test.Assert.areEqual$1(0, v4.byteOffset, "Int32Array ByteOffset");
                Bridge.Test.Assert.areEqual$1(10, v4.length, "Int32Array Length");
    
                var expectedToStringInt32Array1 = isToStringToTypeNameLogic ? "[object Int32Array]" : "0,11,0,0,0,5,0,0,0,99";
                Bridge.Test.Assert.areEqual$1(expectedToStringInt32Array1, v4.toLocaleString(), "Int32Array ToLocaleString");
                Bridge.Test.Assert.areEqual$1(expectedToStringInt32Array1, v4.toString(), "Int32Array ToString");
    
                var subArray41 = v4.subarray(1);
                var expectedToStringInt32Array2 = isToStringToTypeNameLogic ? "[object Int32Array]" : "11,0,0,0,5,0,0,0,99";
                Bridge.Test.Assert.true$1(subArray41 != null, "Int32Array SubArray1");
                Bridge.Test.Assert.areEqual$1(9, subArray41.length, "Int32Array SubArray1 Length");
                Bridge.Test.Assert.areEqual$1(expectedToStringInt32Array2, subArray41.toString(), "Int32Array SubArray1 ToString");
                Bridge.Test.Assert.areEqual$1(4, subArray41.byteOffset, "Int32Array SubArray1 ByteOffset");
    
                var subArray42 = subArray41.subarray(2, 6);
                var expectedToStringInt32Array3 = isToStringToTypeNameLogic ? "[object Int32Array]" : "0,0,5,0";
                Bridge.Test.Assert.true$1(subArray42 != null, "Int32Array SubArray2");
                Bridge.Test.Assert.areEqual$1(4, subArray42.length, "Int32Array SubArray2 Length");
                Bridge.Test.Assert.areEqual$1(expectedToStringInt32Array3, subArray42.toString(), "Int32Array SubArray2 ToString");
                Bridge.Test.Assert.areEqual$1(12, subArray42.byteOffset, "Int32Array SubArray2 ByteOffset");
    
                var v5 = new Int8Array(10);
                Bridge.Test.Assert.true$1(v5 != null, "Int8Array created");
    
                v5[1] = 11;
                v5[5] = 5;
                v5[9] = 99;
                Bridge.Test.Assert.areEqual$1(11, v5[1], "Int8Array indexier works 1");
                Bridge.Test.Assert.areEqual$1(99, v5[9], "Int8Array indexier works 9");
    
                Bridge.Test.Assert.true$1(v5.buffer != null, "Int8Array Buffer");
                Bridge.Test.Assert.areEqual$1(10, v5.byteLength, "Int8Array ByteLength");
                Bridge.Test.Assert.areEqual$1(0, v5.byteOffset, "Int8Array ByteOffset");
                Bridge.Test.Assert.areEqual$1(10, v5.length, "Int8Array Length");
    
                var expectedToStringInt8Array1 = isToStringToTypeNameLogic ? "[object Int8Array]" : "0,11,0,0,0,5,0,0,0,99";
                Bridge.Test.Assert.areEqual$1(expectedToStringInt8Array1, v5.toLocaleString(), "Int8Array ToLocaleString");
                Bridge.Test.Assert.areEqual$1(expectedToStringInt8Array1, v5.toString(), "Int8Array ToString");
    
                var subArray51 = v5.subarray(1);
                var expectedToStringInt8Array2 = isToStringToTypeNameLogic ? "[object Int8Array]" : "11,0,0,0,5,0,0,0,99";
                Bridge.Test.Assert.true$1(subArray51 != null, "Int8Array SubArray1");
                Bridge.Test.Assert.areEqual$1(9, subArray51.length, "Int8Array SubArray1 Length");
                Bridge.Test.Assert.areEqual$1(expectedToStringInt8Array2, subArray51.toString(), "Int8Array SubArray1 ToString");
                Bridge.Test.Assert.areEqual$1(1, subArray51.byteOffset, "Int8Array SubArray1 ByteOffset");
    
                var subArray52 = subArray51.subarray(2, 6);
                var expectedToStringInt8Array3 = isToStringToTypeNameLogic ? "[object Int8Array]" : "0,0,5,0";
                Bridge.Test.Assert.true$1(subArray52 != null, "Int8Array SubArray2");
                Bridge.Test.Assert.areEqual$1(4, subArray52.length, "Int8Array SubArray2 Length");
                Bridge.Test.Assert.areEqual$1(expectedToStringInt8Array3, subArray52.toString(), "Int8Array SubArray2 ToString");
                Bridge.Test.Assert.areEqual$1(3, subArray52.byteOffset, "Int8Array SubArray2 ByteOffset");
    
                var v6 = new Uint16Array(10);
                Bridge.Test.Assert.true$1(v6 != null, "Uint16Array created");
    
                v6[1] = 11;
                v6[5] = 5;
                v6[9] = 99;
                Bridge.Test.Assert.areEqual$1(11, v6[1], "Uint16Array indexier works 1");
                Bridge.Test.Assert.areEqual$1(99, v6[9], "Uint16Array indexier works 9");
    
                Bridge.Test.Assert.true$1(v6.buffer != null, "Uint16Array Buffer");
                Bridge.Test.Assert.areEqual$1(20, v6.byteLength, "Uint16Array ByteLength");
                Bridge.Test.Assert.areEqual$1(0, v6.byteOffset, "Uint16Array ByteOffset");
                Bridge.Test.Assert.areEqual$1(10, v6.length, "Uint16Array Length");
    
                var expectedToStringUint16Array1 = isToStringToTypeNameLogic ? "[object Uint16Array]" : "0,11,0,0,0,5,0,0,0,99";
                Bridge.Test.Assert.areEqual$1(expectedToStringUint16Array1, v6.toLocaleString(), "Uint16Array ToLocaleString");
                Bridge.Test.Assert.areEqual$1(expectedToStringUint16Array1, v6.toString(), "Uint16Array ToString");
    
                var subArray61 = v6.subarray(1);
                var expectedToStringUint16Array2 = isToStringToTypeNameLogic ? "[object Uint16Array]" : "11,0,0,0,5,0,0,0,99";
                Bridge.Test.Assert.true$1(subArray61 != null, "Uint16Array SubArray1");
                Bridge.Test.Assert.areEqual$1(9, subArray61.length, "Uint16Array SubArray1 Length");
                Bridge.Test.Assert.areEqual$1(expectedToStringUint16Array2, subArray61.toString(), "Uint16Array SubArray1 ToString");
                Bridge.Test.Assert.areEqual$1(2, subArray61.byteOffset, "Uint16Array SubArray1 ByteOffset");
    
                var subArray62 = subArray61.subarray(2, 6);
                var expectedToStringUint16Array3 = isToStringToTypeNameLogic ? "[object Uint16Array]" : "0,0,5,0";
                Bridge.Test.Assert.true$1(subArray62 != null, "Uint16Array SubArray2");
                Bridge.Test.Assert.areEqual$1(4, subArray62.length, "Uint16Array SubArray2 Length");
                Bridge.Test.Assert.areEqual$1(expectedToStringUint16Array3, subArray62.toString(), "Uint16Array SubArray2 ToString");
                Bridge.Test.Assert.areEqual$1(6, subArray62.byteOffset, "Uint16Array SubArray2 ByteOffset");
    
                var v7 = new Uint32Array(10);
                Bridge.Test.Assert.true$1(v7 != null, "Uint32Array created");
    
                v7[1] = 11;
                v7[5] = 5;
                v7[9] = 99;
                Bridge.Test.Assert.areEqual$1(11, v7[1], "Uint32Array indexier works 1");
                Bridge.Test.Assert.areEqual$1(99, v7[9], "Uint32Array indexier works 9");
    
                Bridge.Test.Assert.true$1(v7.buffer != null, "Uint32Array Buffer");
                Bridge.Test.Assert.areEqual$1(40, v7.byteLength, "Uint32Array ByteLength");
                Bridge.Test.Assert.areEqual$1(0, v7.byteOffset, "Uint32Array ByteOffset");
                Bridge.Test.Assert.areEqual$1(10, v7.length, "Uint32Array Length");
    
                var expectedToStringUint32Array1 = isToStringToTypeNameLogic ? "[object Uint32Array]" : "0,11,0,0,0,5,0,0,0,99";
                Bridge.Test.Assert.areEqual$1(expectedToStringUint32Array1, v7.toLocaleString(), "Uint32Array ToLocaleString");
                Bridge.Test.Assert.areEqual$1(expectedToStringUint32Array1, v7.toString(), "Uint32Array ToString");
    
                var subArray71 = v7.subarray(1);
                var expectedToStringUint32Array2 = isToStringToTypeNameLogic ? "[object Uint32Array]" : "11,0,0,0,5,0,0,0,99";
                Bridge.Test.Assert.true$1(subArray71 != null, "Uint32Array SubArray1");
                Bridge.Test.Assert.areEqual$1(9, subArray71.length, "Uint32Array SubArray1 Length");
                Bridge.Test.Assert.areEqual$1(expectedToStringUint32Array2, subArray71.toString(), "Uint32Array SubArray1 ToString");
                Bridge.Test.Assert.areEqual$1(4, subArray71.byteOffset, "Uint32Array SubArray1 ByteOffset");
    
                var subArray72 = subArray71.subarray(2, 6);
                var expectedToStringUint32Array3 = isToStringToTypeNameLogic ? "[object Uint32Array]" : "0,0,5,0";
                Bridge.Test.Assert.true$1(subArray72 != null, "Uint32Array SubArray2");
                Bridge.Test.Assert.areEqual$1(4, subArray72.length, "Uint32Array SubArray2 Length");
                Bridge.Test.Assert.areEqual$1(expectedToStringUint32Array3, subArray72.toString(), "Uint32Array SubArray2 ToString");
                Bridge.Test.Assert.areEqual$1(12, subArray72.byteOffset, "Uint32Array SubArray2 ByteOffset");
    
                var v8 = new Uint8Array(10);
                Bridge.Test.Assert.true$1(v8 != null, "Uint8Array created");
    
                v8[1] = 11;
                v8[5] = 5;
                v8[9] = 99;
                Bridge.Test.Assert.areEqual$1(11, v8[1], "Uint8Array indexier works 1");
                Bridge.Test.Assert.areEqual$1(99, v8[9], "Uint8Array indexier works 9");
    
                Bridge.Test.Assert.true$1(v8.buffer != null, "Uint8Array Buffer");
                Bridge.Test.Assert.areEqual$1(10, v8.byteLength, "Uint8Array ByteLength");
                Bridge.Test.Assert.areEqual$1(0, v8.byteOffset, "Uint8Array ByteOffset");
                Bridge.Test.Assert.areEqual$1(10, v8.length, "Uint8Array Length");
    
                var expectedToStringUint8Array1 = isToStringToTypeNameLogic ? "[object Uint8Array]" : "0,11,0,0,0,5,0,0,0,99";
                Bridge.Test.Assert.areEqual$1(expectedToStringUint8Array1, v8.toLocaleString(), "Uint8Array ToLocaleString");
                Bridge.Test.Assert.areEqual$1(expectedToStringUint8Array1, v8.toString(), "Uint8Array ToString");
    
                var subArray81 = v8.subarray(1);
                var expectedToStringUint8Array2 = isToStringToTypeNameLogic ? "[object Uint8Array]" : "11,0,0,0,5,0,0,0,99";
                Bridge.Test.Assert.true$1(subArray81 != null, "Uint8Array SubArray1");
                Bridge.Test.Assert.areEqual$1(9, subArray81.length, "Uint8Array SubArray1 Length");
                Bridge.Test.Assert.areEqual$1(expectedToStringUint8Array2, subArray81.toString(), "Uint8Array SubArray1 ToString");
                Bridge.Test.Assert.areEqual$1(1, subArray81.byteOffset, "Uint8Array SubArray1 ByteOffset");
    
                var subArray82 = subArray81.subarray(2, 6);
                var expectedToStringUint8Array3 = isToStringToTypeNameLogic ? "[object Uint8Array]" : "0,0,5,0";
                Bridge.Test.Assert.true$1(subArray82 != null, "Uint8Array SubArray2");
                Bridge.Test.Assert.areEqual$1(4, subArray82.length, "Uint8Array SubArray2 Length");
                Bridge.Test.Assert.areEqual$1(expectedToStringUint8Array3, subArray82.toString(), "Uint8Array SubArray2 ToString");
                Bridge.Test.Assert.areEqual$1(3, subArray82.byteOffset, "Uint8Array SubArray2 ByteOffset");
    
                var v9 = new Uint8ClampedArray(10);
                Bridge.Test.Assert.true$1(v9 != null, "Uint8ClampedArray created");
    
                v9[1] = 11;
                v9[5] = 5;
                v9[9] = 99;
                Bridge.Test.Assert.areEqual$1(11, v9[1], "Uint8ClampedArray indexier works 1");
                Bridge.Test.Assert.areEqual$1(99, v9[9], "Uint8ClampedArray indexier works 9");
    
                Bridge.Test.Assert.true$1(v9.buffer != null, "Uint8ClampedArray Buffer");
                Bridge.Test.Assert.areEqual$1(10, v9.byteLength, "Uint8ClampedArray ByteLength");
                Bridge.Test.Assert.areEqual$1(0, v9.byteOffset, "Uint8ClampedArray ByteOffset");
                Bridge.Test.Assert.areEqual$1(10, v9.length, "Uint8ClampedArray Length");
    
                var expectedToStringUint8ClampedArray1 = isToStringToTypeNameLogic ? "[object Uint8ClampedArray]" : "0,11,0,0,0,5,0,0,0,99";
                Bridge.Test.Assert.areEqual$1(expectedToStringUint8ClampedArray1, v9.toLocaleString(), "Uint8ClampedArray ToLocaleString");
                Bridge.Test.Assert.areEqual$1(expectedToStringUint8ClampedArray1, v9.toString(), "Uint8ClampedArray ToString");
    
                var subArray91 = v9.subarray(1);
                var expectedToStringUint8ClampedArray2 = isToStringToTypeNameLogic ? "[object Uint8ClampedArray]" : "11,0,0,0,5,0,0,0,99";
                Bridge.Test.Assert.true$1(subArray91 != null, "Uint8ClampedArray SubArray1");
                Bridge.Test.Assert.areEqual$1(9, subArray91.length, "Uint8ClampedArray SubArray1 Length");
                Bridge.Test.Assert.areEqual$1(expectedToStringUint8ClampedArray2, subArray91.toString(), "Uint8ClampedArray SubArray1 ToString");
                Bridge.Test.Assert.areEqual$1(1, subArray91.byteOffset, "Uint8ClampedArray SubArray1 ByteOffset");
    
                var subArray92 = subArray91.subarray(2, 6);
                var expectedToStringUint8ClampedArray3 = isToStringToTypeNameLogic ? "[object Uint8ClampedArray]" : "0,0,5,0";
                Bridge.Test.Assert.true$1(subArray92 != null, "Uint8ClampedArray SubArray2");
                Bridge.Test.Assert.areEqual$1(4, subArray92.length, "Uint8ClampedArray SubArray2 Length");
                Bridge.Test.Assert.areEqual$1(expectedToStringUint8ClampedArray3, subArray92.toString(), "Uint8ClampedArray SubArray2 ToString");
                Bridge.Test.Assert.areEqual$1(3, subArray92.byteOffset, "Uint8ClampedArray SubArray2 ByteOffset");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge550', {
        statics: {
            testMethod: function (array, name) {
                Bridge.Test.Assert.true$1(array != null, System.String.format("ArrayBufferView is an alias of {0}", name));
            },
            testUseCase: function () {
                var array1 = new Int8Array(1);
                Bridge.ClientTest.BridgeIssues.Bridge550.testMethod(array1, "Int8Array");
    
                var array2 = new Uint8Array(1);
                Bridge.ClientTest.BridgeIssues.Bridge550.testMethod(array2, "Uint8Array");
    
                var array3 = new Uint8ClampedArray(1);
                Bridge.ClientTest.BridgeIssues.Bridge550.testMethod(array3, "Uint8ClampedArray");
    
                var array4 = new Int16Array(1);
                Bridge.ClientTest.BridgeIssues.Bridge550.testMethod(array4, "Int16Array");
    
                var array5 = new Uint16Array(1);
                Bridge.ClientTest.BridgeIssues.Bridge550.testMethod(array5, "Uint16Array");
    
                var array6 = new Int32Array(1);
                Bridge.ClientTest.BridgeIssues.Bridge550.testMethod(array6, "Int32Array");
    
                var array7 = new Uint32Array(1);
                Bridge.ClientTest.BridgeIssues.Bridge550.testMethod(array7, "Uint32Array");
    
                var array8 = new Float32Array(1);
                Bridge.ClientTest.BridgeIssues.Bridge550.testMethod(array8, "Float32Array");
    
                var array9 = new Float64Array(1);
                Bridge.ClientTest.BridgeIssues.Bridge550.testMethod(array9, "Float64Array");
    
                var array10 = new DataView(array9.buffer);
                Bridge.ClientTest.BridgeIssues.Bridge550.testMethod(array10, "DataView");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge554', {
        statics: {
            testUseCase: function () {
                var s = "0123456789";
    
                Bridge.Test.Assert.areEqual$1("01234", System.String.remove(s, 5), "Remove(5)");
                Bridge.Test.Assert.areEqual$1("012345678", System.String.remove(s, 9), "Remove(9)");
                Bridge.Test.Assert.areEqual$1("03456789", System.String.remove(s, 1, 2), "Remove(1, 2)");
                Bridge.Test.Assert.areEqual$1("0", System.String.remove(s, 1, 9), "Remove(1, 9)");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge555', {
        statics: {
            testUseCase: function () {
                var s = "0123456789";
    
                Bridge.Test.Assert.areEqual$1("0123456789", s.substring(-1), "JsSubstring(-1)");
                Bridge.Test.Assert.areEqual$1("56789", s.substring(5), "JsSubstring(5)");
                Bridge.Test.Assert.areEqual$1("", s.substring(10), "JsSubstring(10)");
                Bridge.Test.Assert.areEqual$1("1", s.substring(1, 2), "JsSubstring(1, 2)");
                Bridge.Test.Assert.areEqual$1("123456789", s.substring(1, 10), "JsSubstring(1, 10)");
    
                Bridge.Test.Assert.areEqual$1("9", s.substr(-1), "Substring(-1)");
                Bridge.Test.Assert.areEqual$1("56789", s.substr(5), "Substring(5)");
                Bridge.Test.Assert.areEqual$1("", s.substr(10), "Substring(10)");
                Bridge.Test.Assert.areEqual$1("12", s.substr(1, 2), "Substring(1, 2)");
                Bridge.Test.Assert.areEqual$1("123456789", s.substr(1, 10), "Substring(1, 10)");
    
                Bridge.Test.Assert.areEqual$1("9", s.substr(-1), "Substr(-1)");
                Bridge.Test.Assert.areEqual$1("56789", s.substr(5), "Substr(5)");
                Bridge.Test.Assert.areEqual$1("", s.substr(10), "Substr(10)");
                Bridge.Test.Assert.areEqual$1("12", s.substr(1, 2), "Substr(1, 2)");
                Bridge.Test.Assert.areEqual$1("123456789", s.substr(1, 10), "Substr(1, 10)");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge558', {
        statics: {
            testUseCase: function () {
                var a = new Bridge.ClientTest.BridgeIssues.Bridge558A();
                var b = new Bridge.ClientTest.BridgeIssues.Bridge558B();
    
                Bridge.Test.Assert.areEqual$1(1, a.zz(1), "Bridge558 a.zz int");
                Bridge.Test.Assert.areEqual$1(2, a.zz$1(""), "Bridge558 a.zz string");
    
                Bridge.Test.Assert.areEqual$1(1, b.zz(1), "Bridge558 b.zz int");
                Bridge.Test.Assert.areEqual$1(2, b.zz$1(""), "Bridge558 b.zz string");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge558A', {
        zz: function (a) {
            return 1;
        },
        zz$1: function (a) {
            return 2;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge559', {
        statics: {
            testUseCase1: function () {
                var b = new Bridge.ClientTest.BridgeIssues.Bridge559B1("constructor$1", 1);
    
                Bridge.Test.Assert.areEqual$1(" -> Bridge559A1 -> Bridge559A1$1 -> Bridge559B1$1", b.result, "Bridge559 TestUseCase1");
            },
            testUseCase2: function () {
                var b = new Bridge.ClientTest.BridgeIssues.Bridge559B2("constructor$1", 1);
    
                Bridge.Test.Assert.areEqual$1(" ClassA ClassA$1 ClassB$1", b.result, "Bridge559 TestUseCase2");
            },
            testUseCase3: function () {
                var a = new Bridge.ClientTest.BridgeIssues.Bridge559A3("constructor", 1);
                var b = new Bridge.ClientTest.BridgeIssues.Bridge559A3("constructor", 2);
    
                var r = a.getData() + "|" + b.getData();
                Bridge.Test.Assert.areEqual$1("1|2", r, "Bridge559 TestUseCase3");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge559A1', {
        result: "",
        constructor: function () {
            this.result += " -> Bridge559A1";
        },
        constructor$1: function (a) {
            Bridge.ClientTest.BridgeIssues.Bridge559A1.prototype.$constructor.call(this);
    
            this.result += " -> Bridge559A1$1";
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge559A2', {
        result: "",
        constructor: function () {
            this.result += " ClassA";
        },
        constructor$1: function (a) {
            Bridge.ClientTest.BridgeIssues.Bridge559A2.prototype.$constructor.call(this);
    
            this.result += " ClassA$1";
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge559A3', {
        config: {
            properties: {
                Data: null
            }
        },
        constructor$1: function (value) {
            this.setData(value);
        },
        constructor: function (value) {
            Bridge.ClientTest.BridgeIssues.Bridge559A3.prototype.constructor$1.call(this, value.toString());
    
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge563', {
        statics: {
            tesForeach: function () {
                var $t, $t1, $t2, $t3;
                var keys = ["1", "2", "3"];
                var handlers = System.Array.init(3, null);
                var i = 0;
                var result = "";
    
                $t = Bridge.getEnumerator(keys);
                while ($t.moveNext()) {
                    (function () {
                        var itm = $t.getCurrent();
                        handlers[((i++) | 0)] = function () {
                            result += itm;
                        };
                    }).call(this);
                }
    
                $t1 = Bridge.getEnumerator(handlers);
                while ($t1.moveNext()) {
                    var handler = $t1.getCurrent();
                    handler();
                }
    
                Bridge.Test.Assert.areEqual$1("123", result, "Bridge563 No block foreach loop");
    
                i = 0;
                result = "";
    
                $t2 = Bridge.getEnumerator(keys);
                while ($t2.moveNext()) {
                    (function () {
                        var itm1 = $t2.getCurrent();
                        handlers[((i++) | 0)] = function () {
                            result += itm1;
                        };
                    }).call(this);
                }
    
                $t3 = Bridge.getEnumerator(handlers);
                while ($t3.moveNext()) {
                    var handler1 = $t3.getCurrent();
                    handler1();
                }
    
                Bridge.Test.Assert.areEqual$1("123", result, "Bridge563 block foreach loop");
            },
            tesFor: function () {
                var $t;
                var keys = ["1", "2", "3"];
                var handlers = System.Array.init(3, null);
                var i = 0;
                var result = "";
    
                for (var j = 0; j < keys.length; ((j++) | 0)) {
                    (function () {
                        var itm = keys[j];
                        handlers[((i++) | 0)] = function () {
                            result += itm;
                        };
                    }).call(this);
                }
    
                $t = Bridge.getEnumerator(handlers);
                while ($t.moveNext()) {
                    var handler = $t.getCurrent();
                    handler();
                }
    
                Bridge.Test.Assert.areEqual$1("123", result, "Bridge563 For loop");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge565', {
        statics: {
            testUseCase: function () {
                var t1 = new Function();
                Bridge.Test.Assert.true$1(t1 != null, "#565 t1");
    
                var t2 = new Object();
                Bridge.Test.Assert.true$1(t2 != null, "#565 t2");
    
                var t3 = new Object();
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(Object, Object), "#565 t3");
    
                var t4 = new Object();
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(Object, Object), "#565 t4");
    
                var t5 = new Object();
                Bridge.Test.Assert.true$1(t5 != null, "#565 t5");
    
                var t6 = new Object();
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(Object, Object), "#565 t6");
    
                var t7 = new Object();
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(Object, Object), "#565 t7");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge566', {
        statics: {
            testUseCase: function () {
                var ted = new Bridge.ClientTest.BridgeIssues.Bridge566B();
                Bridge.Test.Assert.areEqual$1("Ted", ted.getData(), "#566 Ted");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge566A', {
        config: {
            properties: {
                Data: null
            }
        },
        constructor: function () {
            this.setData(this.getName());
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge572', {
        statics: {
            testUseCase: function () {
                var d1 = new System.Collections.Generic.Dictionary$2(System.Int32,String)();
    
                var d = Bridge.as(d1, System.Collections.Generic.IDictionary$2(System.Int32,String));
    
                d.add(1, "One");
                d.add(2, "Two");
    
                Bridge.Test.Assert.areEqual$1("One", d.getItem(1), "#572 getItem One");
                Bridge.Test.Assert.areEqual$1("Two", d.getItem(2), "#572 getItem Two");
    
                d.setItem(1, "New one");
                d.setItem(2, "New two");
    
                Bridge.Test.Assert.areEqual$1("New one", d.getItem(1), "#572 setItem New one");
                Bridge.Test.Assert.areEqual$1("New two", d.getItem(2), "#572 setItem New two");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge577', {
        statics: {
            someMethodA: function (j) {
                return new Bridge.ClientTest.BridgeIssues.Bridge577.Bridge577UnitA();
            },
            someMethodB: function (j) {
                var v = new Bridge.ClientTest.BridgeIssues.Bridge577.Bridge577UnitB();
                v.setNumber(j);
    
                return v.$clone();
            },
            testUseCase: function () {
                var a = Bridge.ClientTest.BridgeIssues.Bridge577.someMethodA(1);
                Bridge.Test.Assert.notNull$1(a, "#577 Bridge577UnitA created");
    
                var b = Bridge.ClientTest.BridgeIssues.Bridge577.someMethodB(7).$clone();
                Bridge.Test.Assert.areEqual$1(7, b.getNumber(), "#577 Bridge577UnitB created");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge577.Bridge577UnitA', {
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge577.Bridge577UnitA(); }
        },
        $struct: true,
        $clone: function (to) { return this; }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge577.Bridge577UnitB', {
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge577.Bridge577UnitB(); }
        },
        config: {
            properties: {
                Number: 0
            }
        },
        constructor: function () {
        },
        $struct: true,
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 1430308972;
            hash = hash * 23 + (this.Number == null ? 0 : Bridge.getHashCode(this.Number));
            return hash;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.BridgeIssues.Bridge577.Bridge577UnitB)) {
                return false;
            }
            return Bridge.equals(this.Number, o.Number);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.BridgeIssues.Bridge577.Bridge577UnitB();
            s.Number = this.Number;
            return s;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge578', {
        statics: {
            testUseCase: function () {
                var s = "ab|abc&ab&abc|de&ef&";
    
                var r = System.String.split(s, [124, 38].map(function(i) {{ return String.fromCharCode(i); }}));
                var expected = ["ab", "abc", "ab", "abc", "de", "ef", ""];
    
                Bridge.Test.Assert.areDeepEqual$1(expected, r, "#578 Split(params char[] separator)");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge580', {
        statics: {
            testUseCase: function () {
                var arrs = ["s1", "s2"];
    
                var intIndex;
    
                var dst = System.Array.init(2, null);
                intIndex = 0;
                System.Array.copy(arrs, 0, dst, intIndex, arrs.length);
    
                Bridge.Test.Assert.areEqual$1(2, dst.length, "Bridge580 Length Int");
                Bridge.Test.Assert.areEqual$1(arrs[0], dst[0], "Bridge580 0 Int");
                Bridge.Test.Assert.areEqual$1(arrs[1], dst[1], "Bridge580 1 Int");
    
                dst = System.Array.init(3, null);
                intIndex = 1;
                System.Array.copy(arrs, 0, dst, intIndex, arrs.length);
    
                Bridge.Test.Assert.areEqual$1(3, dst.length, "Bridge580 Length 3 Int");
                Bridge.Test.Assert.areEqual$1(arrs[1], dst[2], "Bridge580 1_1 Int");
    
                var longIndex;
    
                dst = System.Array.init(2, null);
                longIndex = System.Int64(0);
                System.Array.copy(arrs, 0, dst, longIndex.toNumber(), arrs.length);
    
                Bridge.Test.Assert.areEqual$1(2, dst.length, "Bridge580 Length Long");
                Bridge.Test.Assert.areEqual$1(arrs[0], dst[0], "Bridge580 0 Long");
                Bridge.Test.Assert.areEqual$1(arrs[1], dst[1], "Bridge580 1 Long");
    
                dst = System.Array.init(3, null);
                longIndex = System.Int64(1);
                System.Array.copy(arrs, 0, dst, longIndex.toNumber(), arrs.length);
    
                Bridge.Test.Assert.areEqual$1(3, dst.length, "Bridge580 Length 1 Long");
                Bridge.Test.Assert.areEqual$1(arrs[1], dst[2], "Bridge580 1_1 Long");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge582', {
        statics: {
            testAddTimeSpan: function () {
                var today = new Date(2006, 1 - 1, 1);
                var duration = new System.TimeSpan(36, 0, 0, 0);
                var answer = new Date((today).getTime() + ((duration).ticks.div(10000).toNumber()));
    
                Bridge.Test.Assert.areEqual$1(2006, answer.getFullYear(), "Bridge582 TestAddTimeSpan Year");
                Bridge.Test.Assert.areEqual$1(2, (answer.getMonth() + 1), "Bridge582 TestAddTimeSpan Month");
                Bridge.Test.Assert.areEqual$1(6, answer.getDate(), "Bridge582 TestAddTimeSpan Day");
                Bridge.Test.Assert.areEqual$1(0, answer.getHours(), "Bridge582 TestAddTimeSpan Hours");
                Bridge.Test.Assert.areEqual$1(0, answer.getMinutes(), "Bridge582 TestAddTimeSpan Minutes");
                Bridge.Test.Assert.areEqual$1(0, answer.getSeconds(), "Bridge582 TestAddTimeSpan Seconds");
            },
            testAddTicks: function () {
                var dt = new Date(2001, 1 - 1, 1);
                dt = new Date(System.Int64((dt).getTime()).add((System.Int64(20000000)).div(10000)).toNumber());
    
                Bridge.Test.Assert.areEqual$1(2001, dt.getFullYear(), "Bridge582 TestAddTicks Year");
                Bridge.Test.Assert.areEqual$1(1, (dt.getMonth() + 1), "Bridge582 TestAddTicks Month");
                Bridge.Test.Assert.areEqual$1(1, dt.getDate(), "Bridge582 TestAddTicks Day");
                Bridge.Test.Assert.areEqual$1(0, dt.getHours(), "Bridge582 TestAddTicks Hour");
                Bridge.Test.Assert.areEqual$1(0, dt.getMinutes(), "Bridge582 TestAddTicks Minute");
                Bridge.Test.Assert.areEqual$1(2, dt.getSeconds(), "Bridge582 TestAddTicks Second");
            },
            testTicks: function () {
                var centuryBegin = new Date(2001, 1 - 1, 1);
                var currentDate = new Date(2007, 12 - 1, 14, 15, 23);
                var elapsedTicks = System.Int64((currentDate).getTime()).mul(10000).sub(System.Int64((centuryBegin).getTime()).mul(10000));
                var elapsedSpan = new System.TimeSpan(elapsedTicks);
    
                Bridge.Test.Assert.areEqual$1(System.Int64([1836507648,510687]), elapsedTicks, "Bridge582 TestTicks ticks");
                Bridge.Test.Assert.areEqual$1(219338580, elapsedSpan.getTotalSeconds(), "Bridge582 TestTicks seconds");
                Bridge.Test.Assert.areEqual$1(3655643, elapsedSpan.getTotalMinutes(), "Bridge582 TestTicks minutes");
                Bridge.Test.Assert.areEqual$1(2538, elapsedSpan.getDays(), "Bridge582 TestTicks days");
                Bridge.Test.Assert.areEqual$1(15, elapsedSpan.getHours(), "Bridge582 TestTicks hours");
                Bridge.Test.Assert.areEqual$1(23, elapsedSpan.getMinutes(), "Bridge582 TestTicks minutes");
                Bridge.Test.Assert.areEqual$1(0, elapsedSpan.getSeconds(), "Bridge582 TestTicks minutes");
            },
            testSubtractTimeSpan: function () {
                var date1 = new Date(1996, 6 - 1, 3, 22, 15, 0);
                var date2 = new Date(1996, 12 - 1, 6, 13, 2, 0);
                var date3 = new Date(1996, 10 - 1, 12, 8, 42, 0);
    
                var diff1 = Bridge.Date.subdd(date2, date1);
                Bridge.Test.Assert.true$1(diff1.equalsT(new System.TimeSpan(185, 14, 47, 0)), "Bridge582 TestSubtractTimeSpan diff1");
    
                var date4 = new Date(date3 - new Date((diff1).ticks.div(10000).toNumber()));
                Bridge.Test.Assert.true$1(Bridge.equalsT(date4, new Date(1996, 4 - 1, 9, 17, 55, 0)), "Bridge582 TestSubtractTimeSpan date4");
    
                var diff2 = Bridge.Date.subdd(date2, date3);
                Bridge.Test.Assert.true$1(diff2.equalsT(new System.TimeSpan(55, 4, 20, 0)), "Bridge582 TestSubtractTimeSpan diff2");
    
                var date5 = Bridge.Date.subdt(date1, diff2);
                Bridge.Test.Assert.true$1(Bridge.equalsT(date5, new Date(1996, 4 - 1, 9, 17, 55, 0)), "Bridge582 TestSubtractTimeSpan date5");
            },
            testTimeOfDay: function () {
                var date = new Date(2013, 9 - 1, 14, 9, 28, 0);
                Bridge.Test.Assert.true$1(Bridge.equalsT(new Date(date.getFullYear(), date.getMonth(), date.getDate()), new Date(2013, 9 - 1, 14)), "Bridge582 TestTimeOfDay Date 2013, 9, 14, 9, 28, 0");
                Bridge.Test.Assert.true$1(Bridge.Date.timeOfDay(date).equalsT(new System.TimeSpan(9, 28, 0)), "Bridge582 TestTimeOfDay TimeOfDay 2013, 9, 14, 9, 28, 0");
    
                date = new Date(2011, 5 - 1, 28, 10, 35, 0);
                Bridge.Test.Assert.true$1(Bridge.equalsT(new Date(date.getFullYear(), date.getMonth(), date.getDate()), new Date(2011, 5 - 1, 28)), "Bridge582 TestTimeOfDay Date 2011, 5, 28, 10, 35, 0");
                Bridge.Test.Assert.true$1(Bridge.Date.timeOfDay(date).equalsT(new System.TimeSpan(10, 35, 0)), "Bridge582 TestTimeOfDay TimeOfDay 2011, 5, 28, 10, 35, 0");
    
                date = new Date(1979, 12 - 1, 25, 14, 30, 0);
                Bridge.Test.Assert.true$1(Bridge.equalsT(new Date(date.getFullYear(), date.getMonth(), date.getDate()), new Date(1979, 12 - 1, 25)), "Bridge582 TestTimeOfDay Date 1979, 12, 25, 14, 30, 0");
                Bridge.Test.Assert.true$1(Bridge.Date.timeOfDay(date).equalsT(new System.TimeSpan(14, 30, 0)), "Bridge582 TestTimeOfDay TimeOfDay 1979, 12, 25, 14, 30, 0");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge583', {
        statics: {
            testUseCase: function () {
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.45), 1, 6), System.Decimal(1.4), "Bridge583 1");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.55), 1, 6), System.Decimal(1.6), "Bridge583 2");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 4, 6), System.Decimal(123.4568), "Bridge583 3");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 6, 6), System.Decimal(123.456789), "Bridge583 4");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 8, 6), System.Decimal(123.456789), "Bridge583 5");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(-123.456), 0, 6), System.Decimal(-123.0), "Bridge583 6");
    
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(1.45), 1, 0), 1.5, "Bridge583 Up 1");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(1.55), 1, 0), 1.6, "Bridge583 Up 2");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 4, 0), 123.4568, "Bridge583 Up 3");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 6, 0), 123.456789, "Bridge583 Up 4");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 8, 0), 123.456789, "Bridge583 Up 5");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(-123.456), 0, 0), -124.0, "Bridge583 Up 6");
    
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(1.45), 1, 4), 1.5, "Bridge583 AwayFromZero 1");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(1.55), 1, 4), 1.6, "Bridge583 AwayFromZero 2");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 4, 4), 123.4568, "Bridge583 AwayFromZero 3");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 6, 4), 123.456789, "Bridge583 AwayFromZero 4");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 8, 4), 123.456789, "Bridge583 AwayFromZero 5");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(-123.456), 0, 4), -123.0, "Bridge583 AwayFromZero 6");
    
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(1.45), 1, 1), 1.4, "Bridge583 Down 1");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(1.55), 1, 1), 1.5, "Bridge583 Down 2");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 4, 1), 123.4567, "Bridge583 Down 3");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 6, 1), 123.456789, "Bridge583 Down 4");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 8, 1), 123.456789, "Bridge583 Down 5");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(-123.456), 0, 1), -123.0, "Bridge583 Down 6");
    
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(1.45), 1, 2), 1.5, "Bridge583 InfinityPos 1");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(1.55), 1, 2), 1.6, "Bridge583 InfinityPos 2");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 4, 2), 123.4568, "Bridge583 InfinityPos 3");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 6, 2), 123.456789, "Bridge583 InfinityPos 4");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 8, 2), 123.456789, "Bridge583 InfinityPos 5");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(-123.456), 0, 2), -123.0, "Bridge583 InfinityPos 6");
    
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(1.45), 1, 3), 1.4, "Bridge583 InfinityNeg 1");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(1.55), 1, 3), 1.5, "Bridge583 InfinityNeg 2");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 4, 3), 123.4567, "Bridge583 InfinityNeg 3");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 6, 3), 123.456789, "Bridge583 InfinityNeg 4");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 8, 3), 123.456789, "Bridge583 InfinityNeg 5");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(-123.456), 0, 3), -124.0, "Bridge583 InfinityNeg 6");
    
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(1.45), 1, 5), 1.4, "Bridge583 TowardsZero 1");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(1.55), 1, 5), 1.5, "Bridge583 TowardsZero 2");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 4, 5), 123.4568, "Bridge583 TowardsZero 3");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 6, 5), 123.456789, "Bridge583 TowardsZero 4");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 8, 5), 123.456789, "Bridge583 TowardsZero 5");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(-123.456), 0, 5), -123.0, "Bridge583 TowardsZero 6");
    
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(1.45), 1, 6), 1.4, "Bridge583 ToEven 1");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(1.55), 1, 6), 1.6, "Bridge583 ToEven 2");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 4, 6), 123.4568, "Bridge583 ToEven 3");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 6, 6), 123.456789, "Bridge583 ToEven 4");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 8, 6), 123.456789, "Bridge583 ToEven 5");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(-123.456), 0, 6), -123.0, "Bridge583 ToEven 6");
    
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(1.45), 1, 7), 1.5, "Bridge583 Ceil 1");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(1.55), 1, 7), 1.6, "Bridge583 Ceil 2");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 4, 7), 123.4568, "Bridge583 Ceil 3");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 6, 7), 123.456789, "Bridge583 Ceil 4");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 8, 7), 123.456789, "Bridge583 Ceil 5");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(-123.456), 0, 7), -123.0, "Bridge583 Ceil 6");
    
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(1.45), 1, 8), 1.4, "Bridge583 Floor 1");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(1.55), 1, 8), 1.5, "Bridge583 Floor 2");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 4, 8), 123.4568, "Bridge583 Floor 3");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 6, 8), 123.456789, "Bridge583 Floor 4");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 8, 8), 123.456789, "Bridge583 Floor 5");
                Bridge.ClientTest.Utilities.DecimalHelper.assertIsDecimalAndEqualTo$1(System.Decimal.toDecimalPlaces(System.Decimal(-123.456), 0, 8), -123.0, "Bridge583 Floor 6");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge586', {
        statics: {
            testUseCase: function () {
                Bridge.Test.Assert.throws$5($_.Bridge.ClientTest.BridgeIssues.Bridge586.f1, "a.SomeDataStatic is external");
                Bridge.Test.Assert.throws$5($_.Bridge.ClientTest.BridgeIssues.Bridge586.f2, "a.DoSomethingStatic() is external");
    
                Bridge.Test.Assert.throws$5($_.Bridge.ClientTest.BridgeIssues.Bridge586.f3, "b.SomeDataStatic is external");
                Bridge.Test.Assert.throws$5($_.Bridge.ClientTest.BridgeIssues.Bridge586.f4, "b.DoSomethingStatic() is external");
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.BridgeIssues.Bridge586", $_);
    
    Bridge.apply($_.Bridge.ClientTest.BridgeIssues.Bridge586, {
        f1: function () {
            Bridge.ClientTest.BridgeIssues.Bridge586A.setSomeDataStatic(System.Decimal(4));
        },
        f2: function () {
            Bridge.ClientTest.BridgeIssues.Bridge586A.doSomethingStatic();
        },
        f3: function () {
            Bridge.ClientTest.BridgeIssues.Bridge586B.setSomeDataStatic(System.Decimal(4));
        },
        f4: function () {
            Bridge.ClientTest.BridgeIssues.Bridge586B.doSomethingStatic();
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge586A', {
        statics: {
    
        },
    
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge588', {
        statics: {
            testUseCase1: function () {
                Bridge.Test.Assert.areEqual$1(3, Bridge.ClientTest.BridgeIssues.Bridge588A.valeur3, "Bridge588 TestUseCase");
                Bridge.Test.Assert.areEqual$1("default", Bridge.ClientTest.BridgeIssues.Bridge588C.C1.getDefault().getValue().getName(), "Bridge588_2 TestUseCase");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge588A', {
        statics: {
            valeur3: 0,
            config: {
                init: function () {
                    this.valeur3 = Bridge.ClientTest.BridgeIssues.Bridge588A.add(Bridge.ClientTest.BridgeIssues.Bridge588B.Valeur2, 1);
                }
            },
            add: function (a, b) {
                return ((a + b) | 0);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge588B', {
        statics: {
            Valeur1: 1,
            Valeur2: 2
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge588C', {
        statics: {
            testUseCase2: function () {
                var c2 = new Bridge.ClientTest.BridgeIssues.Bridge588C.C2("C2 value");
                Bridge.Test.Assert.true$1(c2 != null, "Bridge588 C2");
                Bridge.Test.Assert.areEqual$1("C2 value", c2.getName(), "Bridge588 C2.Name");
    
                var c1 = new Bridge.ClientTest.BridgeIssues.Bridge588C.C1(c2);
                Bridge.Test.Assert.true$1(c1 != null, "Bridge588 C1");
                Bridge.Test.Assert.areEqual$1("C2 value", c1.getValue().getName(), "Bridge588 C1.Value.Name");
    
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BridgeIssues.Bridge588C.C1.getDefault() != null, "Bridge588 C1.Default");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BridgeIssues.Bridge588C.C1.getDefault().getValue() != null, "Bridge588 C1.Default.Value");
                Bridge.Test.Assert.areEqual$1("default", Bridge.ClientTest.BridgeIssues.Bridge588C.C1.getDefault().getValue().getName(), "Bridge588 C1.Default.Value.Name");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BridgeIssues.Bridge588C.C2.getDefault() != null, "Bridge588 C2.Default");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BridgeIssues.Bridge588C.C2.getDefault().getName() != null, "Bridge588 C2.Default.Name");
    
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge588C.C1', {
        statics: {
            _default: null,
            config: {
                init: function () {
                    this._default = new Bridge.ClientTest.BridgeIssues.Bridge588C.C1(Bridge.ClientTest.BridgeIssues.Bridge588C.C2.getDefault());
                }
            },
            getDefault: function () {
                return Bridge.ClientTest.BridgeIssues.Bridge588C.C1._default;
            }
        },
        config: {
            properties: {
                Value: null
            }
        },
        constructor: function (value) {
            this.setValue(value);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge588C.C2', {
        statics: {
            _default: null,
            config: {
                init: function () {
                    this._default = new Bridge.ClientTest.BridgeIssues.Bridge588C.C2("default");
                }
            },
            getDefault: function () {
                return Bridge.ClientTest.BridgeIssues.Bridge588C.C2._default;
            }
        },
        config: {
            properties: {
                Name: null
            }
        },
        constructor: function (name) {
            this.setName(name);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge592', {
        statics: {
            testUseCase: function () {
                var i8_1 = -2;
                var i8_2 = Bridge.Int.sxb(((i8_1 >> 4)) & 255);
                var u8_1 = 254;
                var u8_2 = ((u8_1 >> 4)) & 255;
    
                var i16_1 = -2;
                var i16_2 = Bridge.Int.sxs(((i16_1 >> 8)) & 65535);
                var u16_1 = 65534;
                var u16_2 = ((u16_1 >> 8)) & 65535;
    
                var i32_1 = -2;
                var i32_2 = i32_1 >> 16;
                var u32_1 = 4294967294;
                var u32_2 = u32_1 >>> 16;
    
                Bridge.Test.Assert.areEqual$1(-1, i8_2, "Bridge592 i8_2");
                Bridge.Test.Assert.areEqual$1(15, u8_2, "Bridge592 u8_2");
                Bridge.Test.Assert.areEqual$1(-1, i16_2, "Bridge592 i16_2");
                Bridge.Test.Assert.areEqual$1(255, u16_2, "Bridge592 u16_2");
                Bridge.Test.Assert.areEqual$1(-1, i32_2, "Bridge592 i32_2");
                Bridge.Test.Assert.areEqual$1(65535, u32_2, "Bridge592 u32_2");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge595', {
        statics: {
            testUseCase: function () {
                var buffer = new System.Text.StringBuilder();
                var a = new Bridge.ClientTest.BridgeIssues.Bridge595A(buffer);
                a.render();
                Bridge.Test.Assert.areEqual$1("Render0Render1", buffer.toString(), "Bridge595 A");
    
                buffer.clear();
                var b = new Bridge.ClientTest.BridgeIssues.Bridge595B(buffer);
                b.render();
                Bridge.Test.Assert.areEqual$1("Render0Render1", buffer.toString(), "Bridge595 B");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge595A', {
        buffer: null,
        constructor: function (buffer) {
            this.buffer = buffer;
        },
        render: function () {
            this.buffer.append("Render0");
            this.render$1(new Date());
        },
        render$1: function (when) {
            this.buffer.append("Render1");
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge595B', {
        statics: {
            render: function (buffer) {
                buffer.append("Render1");
            }
        },
        buffer: null,
        constructor: function (buffer) {
            this.buffer = buffer;
        },
        render: function () {
            this.buffer.append("Render0");
            Bridge.ClientTest.BridgeIssues.Bridge595B.render(this.buffer);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge597', {
        statics: {
            testUseCase: function () {
                var inst = new Bridge.ClientTest.BridgeIssues.Bridge597A();
                Bridge.Test.Assert.areEqual$1("0:a", inst.get(), "Bridge597 Without instance member access");
                Bridge.Test.Assert.areEqual$1("HI!:0:a", inst.getWithMember(), "Bridge597 With instance member access");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge597A', {
        _something: "HI!",
        get: function () {
            var items = ["a"];
            var mappedItemsWithoutInstanceMemberAccess = System.Linq.Enumerable.from(items).select($_.Bridge.ClientTest.BridgeIssues.Bridge597A.f1).toArray();
            return mappedItemsWithoutInstanceMemberAccess[0];
        },
        getWithMember: function () {
            var items = ["a"];
            var mappedItemsWithInstanceMemberAccess = System.Linq.Enumerable.from(items).select(Bridge.fn.bind(this, $_.Bridge.ClientTest.BridgeIssues.Bridge597A.f2)).toArray();
            return mappedItemsWithInstanceMemberAccess[0];
        }
    });
    
    Bridge.ns("Bridge.ClientTest.BridgeIssues.Bridge597A", $_);
    
    Bridge.apply($_.Bridge.ClientTest.BridgeIssues.Bridge597A, {
        f1: function (value, index) {
            return index + ":" + value;
        },
        f2: function (value, index) {
            return this._something + ":" + index + ":" + value;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge603', {
        statics: {
            testUseCase: function () {
                var c = Bridge.ClientTest.BridgeIssues.Bridge603A.op_Implicit(null);
                Bridge.Test.Assert.areEqual$1("[Null]", c.value, "Bridge603A TestUseCase Null");
    
                c = Bridge.ClientTest.BridgeIssues.Bridge603A.op_Implicit("Test");
                Bridge.Test.Assert.areEqual$1("Test", c.value, "Bridge603A TestUseCase String");
            },
            testRelated: function () {
                var b = Bridge.ClientTest.BridgeIssues.Bridge603B.op_Implicit$1(12345);
                Bridge.Test.Assert.areEqual$1(12345, b.intValue, "Bridge603B TestRelated Int");
    
                var c = Bridge.ClientTest.BridgeIssues.Bridge603B.op_Implicit$2(null);
                Bridge.Test.Assert.areEqual$1("[Null]", c.value, "Bridge603B TestRelated String Null");
    
                c = Bridge.ClientTest.BridgeIssues.Bridge603B.op_Implicit$2("Test");
                Bridge.Test.Assert.areEqual$1("Test", c.value, "Bridge603B TestRelated String");
    
                var d = Bridge.ClientTest.BridgeIssues.Bridge603B.op_Implicit(null);
                Bridge.Test.Assert.areEqual$1("[Null]", d.value, "Bridge603B TestRelated Bridge603Class Null");
    
                d = Bridge.ClientTest.BridgeIssues.Bridge603B.op_Implicit(Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge603Class(), {
                    setData: "Test 603B"
                } ));
                Bridge.Test.Assert.areEqual$1("Test 603B", d.value, "Bridge603B TestRelated Bridge603Class");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge603A', {
        statics: {
            op_Implicit: function (value) {
                var $t;
                value = ($t = value, $t != null ? $t : "[Null]");
                return new Bridge.ClientTest.BridgeIssues.Bridge603A("constructor$1", value);
            },
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge603A(); }
        },
        value: null,
        constructor$1: function (value) {
            this.value = value;
        },
        constructor: function () {
        },
        $struct: true,
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + -701022801;
            hash = hash * 23 + (this.value == null ? 0 : Bridge.getHashCode(this.value));
            return hash;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.BridgeIssues.Bridge603A)) {
                return false;
            }
            return Bridge.equals(this.value, o.value);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.BridgeIssues.Bridge603A();
            s.value = this.value;
            return s;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge603B', {
        statics: {
            op_Implicit$2: function (value) {
                var $t;
                value = ($t = value, $t != null ? $t : "[Null]");
                return new Bridge.ClientTest.BridgeIssues.Bridge603B("constructor$3", value);
            },
            op_Implicit$1: function (value) {
                return new Bridge.ClientTest.BridgeIssues.Bridge603B("constructor$2", value);
            },
            op_Implicit: function (value) {
                var $t;
                value = ($t = value, $t != null ? $t : Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge603Class(), {
                    setData: "[Null]"
                } ));
                return new Bridge.ClientTest.BridgeIssues.Bridge603B("constructor$1", value);
            },
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge603B(); }
        },
        value: null,
        intValue: 0,
        constructor$3: function (value) {
            this.value = value;
            this.intValue = 0;
        },
        constructor$2: function (value) {
            this.value = null;
            this.intValue = value;
        },
        constructor$1: function (value) {
            this.value = value.getData().toString();
            this.intValue = 0;
        },
        constructor: function () {
        },
        $struct: true,
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + -1104307328;
            hash = hash * 23 + (this.value == null ? 0 : Bridge.getHashCode(this.value));
            hash = hash * 23 + (this.intValue == null ? 0 : Bridge.getHashCode(this.intValue));
            return hash;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.BridgeIssues.Bridge603B)) {
                return false;
            }
            return Bridge.equals(this.value, o.value) && Bridge.equals(this.intValue, o.intValue);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.BridgeIssues.Bridge603B();
            s.value = this.value;
            s.intValue = this.intValue;
            return s;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge603Class', {
        config: {
            properties: {
                Data: null
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge606', {
        statics: {
            testUseCase: function () {
                var c = new Bridge.ClientTest.BridgeIssues.Bridge606C();
                c.example1("b", "a");
                Bridge.Test.Assert.areEqual$1("b", c.getX(), "Bridge606 C X");
                Bridge.Test.Assert.areEqual$1("a", c.getY(), "Bridge606 C Y");
    
                var b = new Bridge.ClientTest.BridgeIssues.Bridge606B("b", "a");
                Bridge.Test.Assert.areEqual$1("b", b.getX(), "Bridge606 B X");
                Bridge.Test.Assert.areEqual$1("a", b.getY(), "Bridge606 B Y");
    
                var s = Bridge.ClientTest.BridgeIssues.Bridge606A.example2("123", "b", "a");
                Bridge.Test.Assert.areEqual$1("123 - b - a", s, "Bridge606 123");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge606A', {
        statics: {
            example2: function (source, x, y) {
                return source + " - " + x + " - " + y;
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge606B', {
        config: {
            properties: {
                X: null,
                Y: null
            }
        },
        constructor: function (x, y) {
            this.setX(x);
            this.setY(y);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge606C', {
        config: {
            properties: {
                X: null,
                Y: null
            }
        },
        example1: function (x, y) {
            this.setX(x);
            this.setY(y);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge607', {
        statics: {
            testUseCase: function () {
                var c = new Bridge.ClientTest.BridgeIssues.Bridge607A$1(String)();
                var c1 = new Bridge.ClientTest.BridgeIssues.Bridge607B();
    
                Bridge.Test.Assert.true$1(c.equalsT(c), "Bridge607A c");
                Bridge.Test.Assert.false$1(c.equalsT(null), "Bridge607A null");
    
                Bridge.Test.Assert.true$1(c1.equalsT(c1), "Bridge607B c");
                Bridge.Test.Assert.false$1(c1.equalsT(null), "Bridge607B null");
    
                Bridge.Test.Assert.false$1(Bridge.equals(new Bridge.ClientTest.BridgeIssues.Bridge607C(), null), "Bridge607C null");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge607A$1', function (T) { return {
        inherits: function () { return [System.IEquatable$1(Bridge.ClientTest.BridgeIssues.Bridge607A$1(T))]; },
        equalsT: function (obj) {
            return Bridge.referenceEquals(this, obj);
        }
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge607B', {
        inherits: function () { return [System.IEquatable$1(Bridge.ClientTest.BridgeIssues.Bridge607B)]; },
        equalsT: function (other) {
            return Bridge.referenceEquals(this, other);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge607C', {
        inherits: function () { return [System.IEquatable$1(Bridge.ClientTest.BridgeIssues.Bridge607C)]; },
        equalsT: function (other) {
            return Bridge.equals(this, other);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge608', {
        statics: {
            testUseCase: function () {
                var s = new Bridge.ClientTest.BridgeIssues.Bridge608A("constructor$1", "test");
                var o = "test";
                Bridge.Test.Assert.true$1(s.equals(o), "Bridge608 Object");
                Bridge.Test.Assert.true$1(s.equals$1("test"), "Bridge608 String");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge608A', {
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge608A(); }
        },
        field: null,
        constructor$1: function (field) {
            this.field = field;
        },
        constructor: function () {
        },
        equals: function (obj) {
            return this.equals$1(obj.toString());
        },
        equals$1: function (other) {
            return Bridge.referenceEquals(other, this.field);
        },
        getHashCode: function () {
            return Bridge.getHashCode(this.field);
        },
        $struct: true,
        $clone: function (to) { return this; }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge615', {
        statics: {
            testUseCase: function () {
                var i = 0;
                var o = null;
    
                Bridge.Test.Assert.areEqual$1("object", Bridge.ClientTest.BridgeIssues.Bridge615A.method1$1(o), "Bridge615 object");
                Bridge.Test.Assert.areEqual$1("int", Bridge.ClientTest.BridgeIssues.Bridge615A.method1(i), "Bridge615 int");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge615A', {
        statics: {
            method1$1: function (o) {
                return "object";
            },
            method1: function (i) {
                return "int";
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge623', {
        statics: {
            testUseCase: function () {
                var func1 = $_.Bridge.ClientTest.BridgeIssues.Bridge623.f1;
    
                var point1 = new Bridge.ClientTest.BridgeIssues.Bridge623A(1, func1);
                var point2 = new Bridge.ClientTest.BridgeIssues.Bridge623A(2, func1);
    
                Bridge.Test.Assert.areEqual$1(1, point1.call(), "Bridge623A point1 func1");
                Bridge.Test.Assert.areEqual$1(2, point2.call(), "Bridge623A point2 func1");
    
                var point3 = new Bridge.ClientTest.BridgeIssues.Bridge623B1(3, func1);
                var point4 = new Bridge.ClientTest.BridgeIssues.Bridge623B1(4, func1);
    
                Bridge.Test.Assert.areEqual$1(3, point3.call(), "Bridge623B1 point3 func1");
                Bridge.Test.Assert.areEqual$1(4, point4.call(), "Bridge623B1 point4 func1");
    
                var func2 = $_.Bridge.ClientTest.BridgeIssues.Bridge623.f2;
    
                var point5 = new Bridge.ClientTest.BridgeIssues.Bridge623B1(5, func2);
                var point6 = new Bridge.ClientTest.BridgeIssues.Bridge623B1(6, func2);
    
                Bridge.Test.Assert.areEqual$1(10, point5.call(), "Bridge623B1 point5 func2");
                Bridge.Test.Assert.areEqual$1(12, point6.call(), "Bridge623B1 point6 func2");
    
                var func3 = $_.Bridge.ClientTest.BridgeIssues.Bridge623.f2;
    
                var point7 = new Bridge.ClientTest.BridgeIssues.Bridge623B2(7, func3);
                var point8 = new Bridge.ClientTest.BridgeIssues.Bridge623B2(8, func3);
    
                Bridge.Test.Assert.areEqual$1(1021, point7.call(), "Bridge623B2 point7 func3");
                Bridge.Test.Assert.areEqual$1(1024, point8.call(), "Bridge623B2 point8 func3");
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.BridgeIssues.Bridge623", $_);
    
    Bridge.apply($_.Bridge.ClientTest.BridgeIssues.Bridge623, {
        f1: function () {
            return (Bridge.caller[0] || this).foo;
        },
        f2: function () {
            return (Bridge.caller[0] || this).getFoo();
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge623A', {
        foo: 0,
        func: null,
        constructor: function (foo, func) {
            this.foo = foo;
            this.func = func;
        },
        call: function () {
            return this.func();
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge625', {
        statics: {
            testUseCase: function () {
                var list = [1, 2, 3];
    
                var d1 = System.Linq.Enumerable.from(list).toDictionary($_.Bridge.ClientTest.BridgeIssues.Bridge625.f1, null, System.Int32, System.Int32);
                Bridge.Test.Assert.true$1(true, "Bridge625 d1");
    
                var d2 = System.Linq.Enumerable.from(list).toDictionary($_.Bridge.ClientTest.BridgeIssues.Bridge625.f1, null, System.Int32, System.Int32, new Bridge.ClientTest.BridgeIssues.Bridge625A());
                Bridge.Test.Assert.true$1(true, "Bridge625 d2");
    
                var d3 = System.Linq.Enumerable.from(list).toDictionary($_.Bridge.ClientTest.BridgeIssues.Bridge625.f1, $_.Bridge.ClientTest.BridgeIssues.Bridge625.f2, System.Int32, System.Int32);
                Bridge.Test.Assert.true$1(true, "Bridge625 d3");
    
                var d4 = System.Linq.Enumerable.from(list).toDictionary($_.Bridge.ClientTest.BridgeIssues.Bridge625.f1, $_.Bridge.ClientTest.BridgeIssues.Bridge625.f2, System.Int32, System.Int32, new Bridge.ClientTest.BridgeIssues.Bridge625A());
                Bridge.Test.Assert.true$1(true, "Bridge625 d4");
    
                var content = new System.Collections.Generic.Dictionary$2(Date,Array)();
                var dict1 = System.Linq.Enumerable.from(content).where($_.Bridge.ClientTest.BridgeIssues.Bridge625.f3).toDictionary($_.Bridge.ClientTest.BridgeIssues.Bridge625.f4, $_.Bridge.ClientTest.BridgeIssues.Bridge625.f5, Date, Array);
                Bridge.Test.Assert.areEqual(0, dict1.getCount());
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.BridgeIssues.Bridge625", $_);
    
    Bridge.apply($_.Bridge.ClientTest.BridgeIssues.Bridge625, {
        f1: function (x) {
            return x;
        },
        f2: function (y) {
            return y;
        },
        f3: function (x) {
            return true;
        },
        f4: function (element) {
            return element.key;
        },
        f5: function (element) {
            return element.value;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge625A', {
        inherits: [System.Collections.Generic.IEqualityComparer$1(System.Int32)],
        equals2: function (x, y) {
            return x === y;
        },
        getHashCode2: function (obj) {
            return Bridge.getHashCode(obj);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge634', {
        statics: {
            testUseCase1: function () {
                var $t;
                var hashSet = new System.Collections.Generic.HashSet$1(String)("constructor");
    
                hashSet.add$1("a");
                hashSet.add$1("b");
                hashSet.add$1("c");
    
                var text = "";
    
                $t = Bridge.getEnumerator(hashSet);
                while ($t.moveNext()) {
                    var s = $t.getCurrent();
                    text += s;
                }
    
                Bridge.Test.Assert.areEqual$1("abc", text, "Bridge634: foreach works for HashSet");
            },
            testUseCase2: function () {
                var a = new Bridge.ClientTest.BridgeIssues.Bridge634A$1(String)();
                var a1 = new Bridge.ClientTest.BridgeIssues.Bridge634A$1.Nested(String)();
                var a2 = new Bridge.ClientTest.BridgeIssues.Bridge634A$1.Nested$1(String,System.Int32)();
                var a3 = new Bridge.ClientTest.BridgeIssues.Bridge634A$1.Nested.SubNested(String)();
                var a4 = new Bridge.ClientTest.BridgeIssues.Bridge634A$1.Nested.SubNested$1(String,System.Int32)();
                var a5 = new Bridge.ClientTest.BridgeIssues.Bridge634A$1.Nested$1.SubNested(String,System.Int32)();
                var a6 = new Bridge.ClientTest.BridgeIssues.Bridge634A$1.Nested$1.SubNested$1(String,System.Int32,System.Int32)();
    
                Bridge.Test.Assert.areEqual$1("Bridge.ClientTest.BridgeIssues.Bridge634A$1$String", Bridge.getTypeName(a), "Bridge634 A a");
                Bridge.Test.Assert.areEqual$1("Bridge.ClientTest.BridgeIssues.Bridge634A$1.Nested$String", Bridge.getTypeName(a1), "Bridge634 A a1");
                Bridge.Test.Assert.areEqual$1("Bridge.ClientTest.BridgeIssues.Bridge634A$1.Nested$1$String$System.Int32", Bridge.getTypeName(a2), "Bridge634 A a2");
                Bridge.Test.Assert.areEqual$1("Bridge.ClientTest.BridgeIssues.Bridge634A$1.Nested.SubNested$String", Bridge.getTypeName(a3), "Bridge634 A a3");
                Bridge.Test.Assert.areEqual$1("Bridge.ClientTest.BridgeIssues.Bridge634A$1.Nested.SubNested$1$String$System.Int32", Bridge.getTypeName(a4), "Bridge634 A a4");
                Bridge.Test.Assert.areEqual$1("Bridge.ClientTest.BridgeIssues.Bridge634A$1.Nested$1.SubNested$String$System.Int32", Bridge.getTypeName(a5), "Bridge634 A a5");
                Bridge.Test.Assert.areEqual$1("Bridge.ClientTest.BridgeIssues.Bridge634A$1.Nested$1.SubNested$1$String$System.Int32$System.Int32", Bridge.getTypeName(a6), "Bridge634 A a6");
    
                var b = new ClientTestLibraryCustom.Bridge634B$1(String)();
                var b1 = new ClientTestLibraryCustom.Bridge634B$1.Nested(String)();
                var b2 = new ClientTestLibraryCustom.Bridge634B$1.Nested$1(String,System.Int32)();
                var b3 = new ClientTestLibraryCustom.Bridge634B$1.Nested.SubNested(String)();
                var b4 = new ClientTestLibraryCustom.Bridge634B$1.Nested.SubNested$1(String,System.Int32)();
                var b5 = new ClientTestLibraryCustom.Bridge634B$1.Nested$1.SubNested(String,System.Int32)();
                var b6 = new ClientTestLibraryCustom.Bridge634B$1.Nested$1.SubNested$1(String,System.Int32,System.Int32)();
    
                Bridge.Test.Assert.areEqual$1("ClientTestLibraryCustom.Bridge634B$1$String", Bridge.getTypeName(b), "Bridge634 B b");
                Bridge.Test.Assert.areEqual$1("ClientTestLibraryCustom.Bridge634B$1.Nested$String", Bridge.getTypeName(b1), "Bridge634 B b1");
                Bridge.Test.Assert.areEqual$1("ClientTestLibraryCustom.Bridge634B$1.Nested$1$String$System.Int32", Bridge.getTypeName(b2), "Bridge634 B b2");
                Bridge.Test.Assert.areEqual$1("ClientTestLibraryCustom.Bridge634B$1.Nested.SubNested$String", Bridge.getTypeName(b3), "Bridge634 B b3");
                Bridge.Test.Assert.areEqual$1("ClientTestLibraryCustom.Bridge634B$1.Nested.SubNested$1$String$System.Int32", Bridge.getTypeName(b4), "Bridge634 B b4");
                Bridge.Test.Assert.areEqual$1("ClientTestLibraryCustom.Bridge634B$1.Nested$1.SubNested$String$System.Int32", Bridge.getTypeName(b5), "Bridge634 B b5");
                Bridge.Test.Assert.areEqual$1("ClientTestLibraryCustom.Bridge634B$1.Nested$1.SubNested$1$String$System.Int32$System.Int32", Bridge.getTypeName(b6), "Bridge634 B b6");
    
                var c = new Bridge.ClientTest.BridgeIssues.Bridge634C();
                var c1 = new Bridge.ClientTest.BridgeIssues.Bridge634C.Nested();
                var c2 = new Bridge.ClientTest.BridgeIssues.Bridge634C.Nested$1(System.Int32)();
                var c3 = new Bridge.ClientTest.BridgeIssues.Bridge634C.Nested.SubNested();
                var c4 = new Bridge.ClientTest.BridgeIssues.Bridge634C.Nested.SubNested$1(System.Int32)();
                var c5 = new Bridge.ClientTest.BridgeIssues.Bridge634C.Nested$1.SubNested(System.Int32)();
                var c6 = new Bridge.ClientTest.BridgeIssues.Bridge634C.Nested$1.SubNested$1(System.Int32,System.Int32)();
    
                Bridge.Test.Assert.areEqual$1("Bridge.ClientTest.BridgeIssues.Bridge634C", Bridge.getTypeName(c), "Bridge634 C c");
                Bridge.Test.Assert.areEqual$1("Bridge.ClientTest.BridgeIssues.Bridge634C.Nested", Bridge.getTypeName(c1), "Bridge634 C c1");
                Bridge.Test.Assert.areEqual$1("Bridge.ClientTest.BridgeIssues.Bridge634C.Nested$1$System.Int32", Bridge.getTypeName(c2), "Bridge634 C c2");
                Bridge.Test.Assert.areEqual$1("Bridge.ClientTest.BridgeIssues.Bridge634C.Nested.SubNested", Bridge.getTypeName(c3), "Bridge634 C c3");
                Bridge.Test.Assert.areEqual$1("Bridge.ClientTest.BridgeIssues.Bridge634C.Nested.SubNested$1$System.Int32", Bridge.getTypeName(c4), "Bridge634 C c4");
                Bridge.Test.Assert.areEqual$1("Bridge.ClientTest.BridgeIssues.Bridge634C.Nested$1.SubNested$System.Int32", Bridge.getTypeName(c5), "Bridge634 C c5");
                Bridge.Test.Assert.areEqual$1("Bridge.ClientTest.BridgeIssues.Bridge634C.Nested$1.SubNested$1$System.Int32$System.Int32", Bridge.getTypeName(c6), "Bridge634 C c6");
            },
            testUseCaseFor658: function () {
                var d = new Bridge634D();
                var d1 = new Bridge634D.Nested();
    
                Bridge.Test.Assert.areEqual$1("Bridge634D", Bridge.getTypeName(d), "Bridge634 D d");
                Bridge.Test.Assert.areEqual$1("Bridge634D.Nested", Bridge.getTypeName(d1), "Bridge634 D d1");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge634A$1', function (T) { return {
    
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge634A$1.Nested', function (T) { return {
    
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge634A$1.Nested.SubNested', function (T) { return {
    
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge634A$1.Nested.SubNested$1', function (T, T1) { return {
    
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge634A$1.Nested$1', function (T, T1) { return {
    
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge634A$1.Nested$1.SubNested', function (T, T1) { return {
    
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge634A$1.Nested$1.SubNested$1', function (T, T1, T2) { return {
    
    }; });
    
    Bridge.define('ClientTestLibraryCustom.Bridge634B$1', function (T) { return {
    
    }; });
    
    Bridge.define('ClientTestLibraryCustom.Bridge634B$1.Nested', function (T) { return {
    
    }; });
    
    Bridge.define('ClientTestLibraryCustom.Bridge634B$1.Nested.SubNested', function (T) { return {
    
    }; });
    
    Bridge.define('ClientTestLibraryCustom.Bridge634B$1.Nested.SubNested$1', function (T, T1) { return {
    
    }; });
    
    Bridge.define('ClientTestLibraryCustom.Bridge634B$1.Nested$1', function (T, T1) { return {
    
    }; });
    
    Bridge.define('ClientTestLibraryCustom.Bridge634B$1.Nested$1.SubNested', function (T, T1) { return {
    
    }; });
    
    Bridge.define('ClientTestLibraryCustom.Bridge634B$1.Nested$1.SubNested$1', function (T, T1, T2) { return {
    
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge634C');
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge634C.Nested');
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge634C.Nested.SubNested');
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge634C.Nested.SubNested$1', function (T1) { return {
    
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge634C.Nested$1', function (T1) { return {
    
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge634C.Nested$1.SubNested', function (T1) { return {
    
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge634C.Nested$1.SubNested$1', function (T1, T2) { return {
    
    }; });
    
    Bridge.define('Bridge634D');
    
    Bridge.define('Bridge634D.Nested');
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge635', {
        statics: {
            testUseCase: function () {
                var a = new Bridge.ClientTest.BridgeIssues.Bridge635A();
                var b = new Bridge.ClientTest.BridgeIssues.Bridge635B();
    
                Bridge.Test.Assert.areEqual$1("function", typeof a.internalFunc1, "Bridge635 A.internalFunc1");
                Bridge.Test.Assert.areEqual$1("A.Test1", a["internalFunc1"](), "Bridge635 A.internalFunc1 Invoke");
    
                Bridge.Test.Assert.areEqual$1("function", typeof b.internalFunc1, "Bridge635 B.internalFunc1");
                Bridge.Test.Assert.areEqual$1("B.Test1", b["internalFunc1"](), "Bridge635 B.internalFunc1 Invoke");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge635A', {
        internalFunc1: function () {
            return "A.Test1";
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge637', {
        statics: {
            testUseCase: function () {
                var Operator = 0;
                Bridge.Test.Assert.areEqual(Bridge.ClientTest.BridgeIssues.Bridge637.Operator.Add, Operator);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge637.Operator', {
        statics: {
            Add: 0
        },
        $enum: true
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge647', {
        statics: {
            testUseCase: function () {
                var a = { bar: 1 };
                Bridge.Test.Assert.areEqual$1(1, a.bar, "Bridge647 A");
    
                var b = { bar: 1, bar1: 12 };
                Bridge.Test.Assert.areEqual$1(1, b.bar, "Bridge647 B bar");
                Bridge.Test.Assert.areEqual$1(12, b.bar1, "Bridge647 B bar1");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge648', {
        statics: {
            testUseCase: function () {
                var wrappedString = new Bridge.ClientTest.BridgeIssues.Bridge648A("test");
                var stringArray = System.Array.init(0, null);
                stringArray.push(Bridge.ClientTest.BridgeIssues.Bridge648A.op_Implicit(wrappedString));
    
                Bridge.Test.Assert.areEqual("test", stringArray[0]);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge648A', {
        statics: {
            op_Implicit: function (value) {
                return value.getValue();
            }
        },
        config: {
            properties: {
                Value: null
            }
        },
        constructor: function (value) {
            this.setValue(value);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge652', {
        statics: {
            log: null,
            testUseCase: function () {
                Bridge.ClientTest.BridgeIssues.Bridge652.log = null;
                var c = new Bridge.ClientTest.BridgeIssues.Bridge652.Bridge652A1();
                Bridge.Test.Assert.areNotEqual$1(null, c.bar, "Bridge652A1 Bar NotNull");
                Bridge.Test.Assert.areEqual$1("Bridge652B1", Bridge.ClientTest.BridgeIssues.Bridge652.log, "Bridge652A1 log");
    
                Bridge.ClientTest.BridgeIssues.Bridge652.log = null;
                var d = new Bridge.ClientTest.BridgeIssues.Bridge652.Bridge652A2();
                Bridge.Test.Assert.areNotEqual$1(null, d.bar, "Bridge652A2 Bar NotNull");
                Bridge.Test.Assert.areEqual$1("Bridge652B2", Bridge.ClientTest.BridgeIssues.Bridge652.log, "Bridge652A2 log");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge652.Bridge652B1', {
        constructor: function () {
            Bridge.ClientTest.BridgeIssues.Bridge652.log = "Bridge652B1";
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge652.Bridge652C$1', function (T) { return {
        bar: Bridge.getDefaultValue(T),
        constructor: function () {
            this.bar = new T();
        }
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge652.Bridge652B2', {
        inherits: [System.IComparable],
        constructor: function () {
            Bridge.ClientTest.BridgeIssues.Bridge652.log = "Bridge652B2";
        },
        compareTo: function (obj) {
            return 0;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge652.Bridge652D$1', function (T) { return {
        bar: Bridge.getDefaultValue(T),
        constructor: function () {
            this.bar = new T();
        }
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge655', {
        statics: {
            testUseCase: function () {
                var item11 = $_.Bridge.ClientTest.BridgeIssues.Bridge655.f1;
                Bridge.Test.Assert.areEqual$1(false, Bridge.ClientTest.BridgeIssues.Bridge655A.isNullOrUndefined(item11), "Bridge655 IsNullOrUndefined11");
                Bridge.Test.Assert.areEqual$1(11, item11(), "Bridge655 item11");
    
                var item12 = $_.Bridge.ClientTest.BridgeIssues.Bridge655.f2;
                Bridge.Test.Assert.areEqual$1(false, Bridge.ClientTest.BridgeIssues.Bridge655A.isNullOrUndefined(item12), "Bridge655 IsNullOrUndefined12");
                Bridge.Test.Assert.areEqual$1(12, item12(12), "Bridge655 item12");
    
                var item21 = $_.Bridge.ClientTest.BridgeIssues.Bridge655.f3;
                Bridge.Test.Assert.areEqual$1(false, Bridge.ClientTest.BridgeIssues.Bridge655A.isNullOrUndefined$1(item21, 21), "Bridge655 IsNullOrUndefined21 false");
                Bridge.Test.Assert.areEqual$1(true, Bridge.ClientTest.BridgeIssues.Bridge655A.isNullOrUndefined$1(item21, 0), "Bridge655 IsNullOrUndefined21 true");
                Bridge.Test.Assert.areEqual$1(21, item21(), "Bridge655 item21");
    
                var item22 = $_.Bridge.ClientTest.BridgeIssues.Bridge655.f4;
                Bridge.Test.Assert.areEqual$1("false", Bridge.ClientTest.BridgeIssues.Bridge655A.isNullOrUndefined$2(item22, "22"), "Bridge655 IsNullOrUndefined22 false");
                Bridge.Test.Assert.areEqual$1("true", Bridge.ClientTest.BridgeIssues.Bridge655A.isNullOrUndefined$2(item22, ""), "Bridge655 IsNullOrUndefined22 true");
                Bridge.Test.Assert.areEqual$1(22, item22(19, "two"), "Bridge655 item22");
    
                var item32 = $_.Bridge.ClientTest.BridgeIssues.Bridge655.f5;
                Bridge.Test.Assert.areEqual$1("false", Bridge.ClientTest.BridgeIssues.Bridge655A.isNullOrUndefined$2(item32, "32"), "Bridge655 IsNullOrUndefined32 false");
                Bridge.Test.Assert.areEqual$1("true", Bridge.ClientTest.BridgeIssues.Bridge655A.isNullOrUndefined$2(item32, ""), "Bridge655 IsNullOrUndefined32 true");
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.BridgeIssues.Bridge655", $_);
    
    Bridge.apply($_.Bridge.ClientTest.BridgeIssues.Bridge655, {
        f1: function () {
            return 11;
        },
        f2: function (i) {
            return i;
        },
        f3: function () {
            return 21;
        },
        f4: function (i, s) {
            return ((i + s.length) | 0);
        },
        f5: function (i, s) {
            var b = i === s.length;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge655A', {
        statics: {
            isNullOrUndefined: function (subject) {
                return Bridge.referenceEquals(subject, undefined) || subject == null;
            },
            isNullOrUndefined$1: function (subject, i) {
                return Bridge.referenceEquals(subject, undefined) || subject == null || i === 0;
            },
            isNullOrUndefined$2: function (subject, s) {
                if (Bridge.referenceEquals(subject, undefined) || subject == null || System.String.isNullOrEmpty(s)) {
                    return "true";
                }
    
                return "false";
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge660', {
        statics: {
            testUseCase: function () {
                Bridge.Test.Assert.areEqual$1("Message", Bridge.ClientTest.BridgeIssues.Bridge660MessageStore._initialEditState.getContent().getText(), "Bridge660 Initialize static members before first access to the class");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge660MessageEditState', {
        config: {
            properties: {
                Content: null
            }
        },
        constructor: function (content) {
            this.setContent(content);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge660MessageStore', {
        statics: {
            _initialEditState: null,
            config: {
                init: function () {
                    this._initialEditState = new Bridge.ClientTest.BridgeIssues.Bridge660MessageEditState(new Bridge.ClientTest.BridgeIssues.Bridge660TextInputState("constructor", "Message"));
                }
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge660Optional$1', function (T) { return {
        statics: {
            config: {
                init: function () {
                    this._missing = new Bridge.ClientTest.BridgeIssues.Bridge660Optional$1(T)("constructor$2", Bridge.getDefaultValue(T), false);
                }
            },
            getMissing: function () {
                return Bridge.ClientTest.BridgeIssues.Bridge660Optional$1(T)._missing.$clone();
            },
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge660Optional$1(T)(); }
        },
        value: Bridge.getDefaultValue(T),
        isDefined: false,
        constructor$1: function (value) {
            Bridge.ClientTest.BridgeIssues.Bridge660Optional$1(T).prototype.constructor$2.call(this, value, value != null);
    
        },
        constructor$2: function (value, isDefined) {
            this.isDefined = (value != null);
            this.value = value;
        },
        constructor: function () {
        },
        getIsDefined: function () {
            return this.isDefined;
        },
        $struct: true,
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 390689245;
            hash = hash * 23 + (this.value == null ? 0 : Bridge.getHashCode(this.value));
            hash = hash * 23 + (this.isDefined == null ? 0 : Bridge.getHashCode(this.isDefined));
            return hash;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.BridgeIssues.Bridge660Optional$1(T))) {
                return false;
            }
            return Bridge.equals(this.value, o.value) && Bridge.equals(this.isDefined, o.isDefined);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.BridgeIssues.Bridge660Optional$1(T)();
            s.value = this.value;
            s.isDefined = this.isDefined;
            return s;
        }
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge660TextInputState', {
        config: {
            properties: {
                Text: null
            }
        },
        constructor: function (text) {
            Bridge.ClientTest.BridgeIssues.Bridge660TextInputState.prototype.constructor$1.call(this, text, Bridge.ClientTest.BridgeIssues.Bridge660Optional$1(String).getMissing());
    
        },
        constructor$1: function (text, validationError) {
            this.setText(text);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge661', {
        statics: {
            example1: function (exampleInput) {
                if (exampleInput === void 0) { exampleInput = 0; }
                return exampleInput === 0;
            },
            example2: function (exampleInput) {
                if (exampleInput === void 0) { exampleInput = 49; }
                return exampleInput === 49;
            },
            testUseCase: function () {
                Bridge.Test.Assert.areEqual$1(true, Bridge.ClientTest.BridgeIssues.Bridge661.example1(), "Bridge661 Example1 true default");
                Bridge.Test.Assert.areEqual$1(true, Bridge.ClientTest.BridgeIssues.Bridge661.example1(0), "Bridge661 Example1 true");
                Bridge.Test.Assert.areEqual$1(false, Bridge.ClientTest.BridgeIssues.Bridge661.example1(65), "Bridge661 Example1 false");
    
                Bridge.Test.Assert.areEqual$1(true, Bridge.ClientTest.BridgeIssues.Bridge661.example2(), "Bridge661 Example2 true default");
                Bridge.Test.Assert.areEqual$1(true, Bridge.ClientTest.BridgeIssues.Bridge661.example2(49), "Bridge661 Example2 true");
                Bridge.Test.Assert.areEqual$1(false, Bridge.ClientTest.BridgeIssues.Bridge661.example2(0), "Bridge661 Example2 false");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge664', {
        statics: {
            testUseCase: function () {
                var f = $_.Bridge.ClientTest.BridgeIssues.Bridge664.f1;
                // if cast will be emitted then exception will be thrown because Bridge664A is not emitted
                Bridge.Test.Assert.areEqual$1("test", f("test"), "Bridge664");
    
                Bridge.Test.Assert.throws$5($_.Bridge.ClientTest.BridgeIssues.Bridge664.f2, "Bridge664 Should throw exception");
    
    
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.BridgeIssues.Bridge664", $_);
    
    Bridge.apply($_.Bridge.ClientTest.BridgeIssues.Bridge664, {
        f1: function (s) {
            return s;
        },
        f2: function () {
            var b = { };
            var s = Bridge.cast(b, Bridge.ClientTest.BridgeIssues.Bridge664B);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge666', {
        statics: {
            testUseCase: function () {
                Bridge.Test.Assert.areEqual$1(360, Bridge.ClientTest.BridgeIssues.Bridge666.getSum(), "Bridge666 GetSum 360");
            },
            getSum: function () {
                var $t;
                var sum = 0;
                var numbers = [1, 2, 3];
    
                $t = Bridge.getEnumerator(numbers);
                while ($t.moveNext()) {
                    (function () {
                        var n = $t.getCurrent();
                        var func = function (i) {
                            var $t1;
                            var bigNumbers = [10, 20, 30];
                            $t1 = Bridge.getEnumerator(bigNumbers);
                            while ($t1.moveNext()) {
                                var bn = $t1.getCurrent();
                                sum = (sum + ((i * bn) | 0)) | 0;
                            }
                        };
    
                        func(n);
                    }).call(this);
                }
    
                return sum;
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge671', {
        statics: {
            testUseCase: function () {
                Bridge.Test.Assert.areEqual(1, new Bridge.ClientTest.BridgeIssues.Bridge671().invoke());
            }
        },
        one: 1,
        getOne: function () {
            return this.one;
        },
        invoke: function () {
            var b = new Bridge.ClientTest.BridgeIssues.Bridge671A(Bridge.fn.bind(this, this.getOne));
            return b.invoke();
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge671A', {
        func: null,
        constructor: function (func) {
            this.func = func;
        },
        invoke: function () {
            return this.func();
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge674', {
        statics: {
            testUseCase: function () {
                var o = undefined;
                Bridge.Test.Assert.throws$5(function () {
                    var s = Bridge.cast(o, String);
                }, "Unable to cast type 'null' to type String");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge675', {
        statics: {
            testUseCase: function () {
                var me = Bridge.global.Bridge.ClientTest.BridgeIssues.Bridge675;
                me.id = "str1";
                me.i1 = 1;
                me.i2 = 2;
    
                Bridge.Test.Assert.areEqual$1("str1", me.dynMethod(me.id), "Bridge675 DynMethod");
                Bridge.Test.Assert.areEqual$1("str1", Bridge.ClientTest.BridgeIssues.Bridge675.method1$1(me.id), "Bridge675 Method1 id");
                Bridge.Test.Assert.areEqual$1(3, Bridge.ClientTest.BridgeIssues.Bridge675.method1(me.i1, me.i2), "Bridge675 Method1 i1 i2");
            },
            dynMethod: function (s) {
                return s;
            },
            method1$1: function (s) {
                return s;
            },
            method1: function (i1, i2) {
                return ((i1 + i2) | 0);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge687', {
        statics: {
            testUseCase: function () {
                var c = new Bridge.ClientTest.BridgeIssues.Bridge687A(null);
                var case1 = false;
                if (c == null) {
                    case1 = true;
                }
                Bridge.Test.Assert.areEqual$1(false, case1, "Bridge687 case1");
    
                c = new Bridge.ClientTest.BridgeIssues.Bridge687A("test");
                var case2 = false;
                if (Bridge.referenceEquals(Bridge.ClientTest.BridgeIssues.Bridge687A.op_Implicit(c), "test")) {
                    case2 = true;
                }
                Bridge.Test.Assert.areEqual$1(true, case2, "Bridge687 case2");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge687A', {
        statics: {
            op_Implicit: function (value) {
                return value.getValue();
            }
        },
        config: {
            properties: {
                Value: null
            }
        },
        constructor: function (value) {
            this.setValue(value);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge689', {
        statics: {
            testUseCase: function () {
                var fn1 = function (value) { return parseInt(value); };
                Bridge.Test.Assert.areEqual$1(5, fn1("5"), "Bridge689 should equals 5");
    
                var fn2 = function (value) { return parseInt(value); };
                Bridge.Test.Assert.areEqual$1(6, fn2("6"), "Bridge689 should equals 6");
    
                //object a = 7;
                //Func<object, bool> fn3 = a.BridgeEquals;
                //Assert.AreEqual(fn3("7"), 7, "Bridge689 should equals 7");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge690', {
        statics: {
            testUseCaseForInstance: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    done, 
                    c, 
                    r, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1], $step);
                            switch ($step) {
                                case 0: {
                                    done = Bridge.Test.Assert.async();
                                    c = new Bridge.ClientTest.BridgeIssues.Bridge690A();
                                    $task1 = c.start();
                                    $step = 1;
                                    $task1.continueWith($asyncBody, true);
                                    return;
                                }
                                case 1: {
                                    $taskResult1 = $task1.getAwaitedResult();
                                    r = $taskResult1;
                                    
                                    Bridge.Test.Assert.areEqual$1(8, r, "Bridge690 TestUseCaseForInstance");
                                    done();
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);
    
                $asyncBody();
            },
            testUseCaseForStatic: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    done, 
                    r, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1], $step);
                            switch ($step) {
                                case 0: {
                                    done = Bridge.Test.Assert.async();
                                    $task1 = Bridge.ClientTest.BridgeIssues.Bridge690B.start();
                                    $step = 1;
                                    $task1.continueWith($asyncBody, true);
                                    return;
                                }
                                case 1: {
                                    $taskResult1 = $task1.getAwaitedResult();
                                    r = $taskResult1;
                                    
                                    Bridge.Test.Assert.areEqual$1(59, r, "Bridge690 TestUseCaseForStatic");
                                    done();
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);
    
                $asyncBody();
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge690A', {
        i3: 3,
        asyncSum: function (i1, i2) {
            var $step = 0,
                $task1, 
                $jumpFromFinally, 
                $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                $returnValue, 
                $async_e, 
                $asyncBody = Bridge.fn.bind(this, function () {
                    try {
                        for (;;) {
                            $step = System.Array.min([0,1], $step);
                            switch ($step) {
                                case 0: {
                                    $task1 = System.Threading.Tasks.Task.delay(100);
                                    $step = 1;
                                    $task1.continueWith($asyncBody);
                                    return;
                                }
                                case 1: {
                                    $task1.getAwaitedResult();
                                    $tcs.setResult(((((i1 + i2) | 0) + this.i3) | 0));
                                    return;
                                }
                                default: {
                                    $tcs.setResult(null);
                                    return;
                                }
                            }
                        }
                    } catch($async_e1) {
                        $async_e = System.Exception.create($async_e1);
                        $tcs.setException($async_e);
                    }
                }, arguments);
    
            $asyncBody();
            return $tcs.task;
        },
        start: function () {
            var $step = 0,
                $task1, 
                $taskResult1, 
                $jumpFromFinally, 
                $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                $returnValue, 
                $async_e, 
                $asyncBody = Bridge.fn.bind(this, function () {
                    try {
                        for (;;) {
                            $step = System.Array.min([0,1], $step);
                            switch ($step) {
                                case 0: {
                                    $task1 = this.asyncSum(2, 3);
                                    $step = 1;
                                    $task1.continueWith($asyncBody);
                                    return;
                                }
                                case 1: {
                                    $taskResult1 = $task1.getAwaitedResult();
                                    $tcs.setResult($taskResult1);
                                    return;
                                }
                                default: {
                                    $tcs.setResult(null);
                                    return;
                                }
                            }
                        }
                    } catch($async_e1) {
                        $async_e = System.Exception.create($async_e1);
                        $tcs.setException($async_e);
                    }
                }, arguments);
    
            $asyncBody();
            return $tcs.task;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge690B', {
        statics: {
            i3: 17,
            asyncSum: function (i1, i2) {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = System.Threading.Tasks.Task.delay(100);
                                        $step = 1;
                                        $task1.continueWith($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(((((i1 + i2) | 0) + Bridge.ClientTest.BridgeIssues.Bridge690B.i3) | 0));
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);
    
                $asyncBody();
                return $tcs.task;
            },
            start: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = Bridge.ClientTest.BridgeIssues.Bridge690B.asyncSum(19, 23);
                                        $step = 1;
                                        $task1.continueWith($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult($taskResult1);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);
    
                $asyncBody();
                return $tcs.task;
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge691', {
        statics: {
            testUseCase: function () {
                var pos = 0;
                var lines = ["", "", "str"];
                while (pos < lines.length) {
                    while (pos < lines.length && lines[pos].length === 0) {
                        pos = (pos + 1) | 0;
                    }
    
                    if (!(pos < lines.length)) {
                        break;
                    }
    
                    var a = $_.Bridge.ClientTest.BridgeIssues.Bridge691.f1;
    
                    if (pos > 0) {
                        break;
                    }
                }
    
                Bridge.Test.Assert.areEqual$1(2, pos, "Bridge691");
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.BridgeIssues.Bridge691", $_);
    
    Bridge.apply($_.Bridge.ClientTest.BridgeIssues.Bridge691, {
        f1: function (p) {
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge692', {
        statics: {
            testUseCase: function () {
                var a = new Bridge.ClientTest.BridgeIssues.Bridge692.A();
                Bridge.Test.Assert.areEqual$1(a, a, "Bridge692 A");
    
                var b1 = new Bridge.ClientTest.BridgeIssues.Bridge692.B1("constructor");
                Bridge.Test.Assert.areEqual$1(b1, b1, "Bridge692 B1");
    
                var b2 = new Bridge.ClientTest.BridgeIssues.Bridge692.B1("constructor");
                Bridge.Test.Assert.areEqual$1(b2, b2, "Bridge692 B2");
    
                var b3 = new Bridge.ClientTest.BridgeIssues.Bridge692.B3();
                Bridge.Test.Assert.areEqual$1(b3, b3, "Bridge692 B3");
    
                var c1 = new Bridge.ClientTest.BridgeIssues.Bridge692.C1("constructor");
                Bridge.Test.Assert.areNotStrictEqual$1(c1.$clone(), c1.$clone(), "Bridge692 C1");
    
                var c2 = new Bridge.ClientTest.BridgeIssues.Bridge692.C2("constructor");
                Bridge.Test.Assert.areNotStrictEqual$1(c2.$clone(), c2.$clone(), "Bridge692 C2");
    
                var c3 = new Bridge.ClientTest.BridgeIssues.Bridge692.C3();
                Bridge.Test.Assert.areNotStrictEqual$1(c3.$clone(), c3.$clone(), "Bridge692 C3");
    
                var c3_1 = new Bridge.ClientTest.BridgeIssues.Bridge692.C3();
                Bridge.Test.Assert.areNotStrictEqual$1(System.Nullable.lift1("$clone", c3_1), System.Nullable.lift1("$clone", c3_1), "Bridge692 C3_1");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge692.A', {
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge692.A(); }
        },
        $struct: true,
        $clone: function (to) { return this; }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge692.B1', {
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge692.B1(); }
        },
        field1: 0,
        constructor$1: function (f) {
            this.field1 = f;
        },
        constructor: function () {
        },
        $struct: true,
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + -1467239093;
            hash = hash * 23 + (this.field1 == null ? 0 : Bridge.getHashCode(this.field1));
            return hash;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.BridgeIssues.Bridge692.B1)) {
                return false;
            }
            return Bridge.equals(this.field1, o.field1);
        },
        $clone: function (to) { return this; }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge692.B2', {
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge692.B2(); }
        },
        field1: 0,
        constructor$1: function (f) {
            this.field1 = f;
        },
        constructor: function () {
        },
        getProp1: function () {
            return this.field1;
        },
        $struct: true,
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + -1063954566;
            hash = hash * 23 + (this.field1 == null ? 0 : Bridge.getHashCode(this.field1));
            return hash;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.BridgeIssues.Bridge692.B2)) {
                return false;
            }
            return Bridge.equals(this.field1, o.field1);
        },
        $clone: function (to) { return this; }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge692.B3', {
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge692.B3(); }
        },
        constructor: function () {
        },
        getProp1: function () {
            return 0;
        },
        $struct: true,
        $clone: function (to) { return this; }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge692.C1', {
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge692.C1(); }
        },
        field1: 0,
        constructor$1: function (i) {
            this.field1 = i;
        },
        constructor: function () {
        },
        getProp1: function () {
            return this.field1;
        },
        $struct: true,
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + -1467239094;
            hash = hash * 23 + (this.field1 == null ? 0 : Bridge.getHashCode(this.field1));
            return hash;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.BridgeIssues.Bridge692.C1)) {
                return false;
            }
            return Bridge.equals(this.field1, o.field1);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.BridgeIssues.Bridge692.C1();
            s.field1 = this.field1;
            return s;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge692.C2', {
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge692.C2(); }
        },
        field1: 0,
        constructor$1: function (i) {
            this.field1 = i;
        },
        constructor: function () {
        },
        getProp1: function () {
            return this.field1;
        },
        setProp1: function (value) {
    
        },
        $struct: true,
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + -1063954567;
            hash = hash * 23 + (this.field1 == null ? 0 : Bridge.getHashCode(this.field1));
            return hash;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.BridgeIssues.Bridge692.C2)) {
                return false;
            }
            return Bridge.equals(this.field1, o.field1);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.BridgeIssues.Bridge692.C2();
            s.field1 = this.field1;
            return s;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge692.C3', {
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge692.C3(); }
        },
        config: {
            properties: {
                Prop1: 0
            }
        },
        constructor: function () {
        },
        $struct: true,
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 1664928788;
            hash = hash * 23 + (this.Prop1 == null ? 0 : Bridge.getHashCode(this.Prop1));
            return hash;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.BridgeIssues.Bridge692.C3)) {
                return false;
            }
            return Bridge.equals(this.Prop1, o.Prop1);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.BridgeIssues.Bridge692.C3();
            s.Prop1 = this.Prop1;
            return s;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge693', {
        statics: {
            testUseCase: function () {
                var c = new Bridge.ClientTest.BridgeIssues.Bridge693B();
                Bridge.Test.Assert.areNotEqual$1(null, c, "Bridge693 not null");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge693A$1', function (T) { return {
        constructor: function (props) {
        }
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.IBridge693D', {
        $interface: true
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge694', {
        statics: {
            testUseCase: function () {
                var fruits = System.Array.init(3, null);
                fruits[0] = "mango";
                fruits[1] = "apple";
                fruits[2] = "lemon";
    
                var list = System.Linq.Enumerable.from(fruits).select(function(x) { return Bridge.cast(x, String); }).orderBy($_.Bridge.ClientTest.BridgeIssues.Bridge694.f1).select($_.Bridge.ClientTest.BridgeIssues.Bridge694.f1).toList(String);
                Bridge.Test.Assert.areEqual$1("apple", list.getItem(0), "Bridge694 apple");
                Bridge.Test.Assert.areEqual$1("lemon", list.getItem(1), "Bridge694 lemon");
                Bridge.Test.Assert.areEqual$1("mango", list.getItem(2), "Bridge694 mango");
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.BridgeIssues.Bridge694", $_);
    
    Bridge.apply($_.Bridge.ClientTest.BridgeIssues.Bridge694, {
        f1: function (fruit) {
            return fruit;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge696', {
        statics: {
            testUseCase: function () {
                var namedCallbacks = new System.Collections.Generic.Dictionary$2(String,Function)();
                namedCallbacks.add("Shout", $_.Bridge.ClientTest.BridgeIssues.Bridge696.f1);
                namedCallbacks.add("Whisper", $_.Bridge.ClientTest.BridgeIssues.Bridge696.f1);
    
                Bridge.Test.Assert.areEqual$1(6, namedCallbacks.get("Shout")("HELLO!"), "Bridge696 HELLO!");
                Bridge.Test.Assert.areEqual$1(5, namedCallbacks.get("Whisper")("HELLO"), "Bridge696 HELLO");
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.BridgeIssues.Bridge696", $_);
    
    Bridge.apply($_.Bridge.ClientTest.BridgeIssues.Bridge696, {
        f1: function (message) {
            return message.length;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge699', {
        statics: {
            testUseCase: function () {
                var blob1 = new Blob(["blobData1"], { type: "text/richtext", endings: "transparent" });
    
                Bridge.Test.Assert.areNotEqual$1(null, blob1, "blob1 is not null");
                Bridge.Test.Assert.areEqual$1(9, blob1.size, "blob1.Size equals 9");
                Bridge.Test.Assert.areEqual$1("text/richtext", blob1.type, "blob1.Type equals 'text/richtext'");
    
                var blob2 = new Blob(["data2"]);
                Bridge.Test.Assert.areNotEqual$1(null, blob2, "blob2 is not null");
                Bridge.Test.Assert.areEqual$1(5, blob2.size, "blob2.Size equals 5");
    
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge708', {
        statics: {
            testUseCase: function () {
                Bridge.Test.Assert.areEqual$1(12, Bridge.ClientTest.BridgeIssues.Bridge708.testIssue(), "Bridge708 TestIssue");
            },
            testIssue: function () {
                var sum = 0;
                var f = function () {
                    var $t;
                    $t = Bridge.getEnumerator([1, 2, 3]);
                    while ($t.moveNext()) {
                        (function () {
                            var n = $t.getCurrent();
                            var g = function (i) {
                                sum = (sum + i) | 0;
                            };
                            g(n);
                        }).call(this);
                    }
                    var h = function () {
                        sum = (sum * 2) | 0;
                    };
                    h();
                };
    
                f();
    
                return sum;
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge721', {
        statics: {
            testUseCase: function () {
                var testList = Bridge.merge(new System.Collections.Generic.List$1(System.Int32)(), [
                    [3]
                ] );
                Bridge.Test.Assert.areEqual$1("ThirdLoop", Bridge.ClientTest.BridgeIssues.Bridge721.check(testList), "Bridge721 ThirdLoop");
    
                testList = Bridge.merge(new System.Collections.Generic.List$1(System.Int32)(), [
                    [5]
                ] );
                Bridge.Test.Assert.areEqual$1("SecondLoop", Bridge.ClientTest.BridgeIssues.Bridge721.check(testList), "Bridge721 SecondLoop");
    
                testList = Bridge.merge(new System.Collections.Generic.List$1(System.Int32)(), [
                    [15]
                ] );
                Bridge.Test.Assert.areEqual$1("FirstLoop", Bridge.ClientTest.BridgeIssues.Bridge721.check(testList), "Bridge721 FirstLoop");
    
                testList = Bridge.merge(new System.Collections.Generic.List$1(System.Int32)(), [
                    [25]
                ] );
                Bridge.Test.Assert.areEqual$1("NoLoops", Bridge.ClientTest.BridgeIssues.Bridge721.check(testList), "Bridge721 NoLoops");
            },
            check: function (testList) {
                var $t, $t1, $t2;
                var i = 0;
                while (i < 20) {
                    var $t = (function () {
                        while (i < 10) {
                            var $t1 = (function () {
                                while (i < 5) {
                                    var $t2 = (function () {
                                        if (System.Linq.Enumerable.from(testList).any(function (x) {
                                            return x === i;
                                        })) {
                                            return {jump: 3, v: "ThirdLoop"};
                                        }
                                        i = (i + 1) | 0;
                                    }).call(this) || {};
                                    if($t2.jump == 3) return {jump: 3, v: $t2.v};
                                }
    
                                if (System.Linq.Enumerable.from(testList).any(function (x) {
                                    return x === i;
                                })) {
                                    return {jump: 3, v: "SecondLoop"};
                                }
                                i = (i + 1) | 0;
                            }).call(this) || {};
                            if($t1.jump == 3) return {jump: 3, v: $t1.v};
                        }
    
                        if (System.Linq.Enumerable.from(testList).any(function (x) {
                            return x === i;
                        })) {
                            return {jump: 3, v: "FirstLoop"};
                        }
                        i = (i + 1) | 0;
                    }).call(this) || {};
                    if($t.jump == 3) return $t.v;
                }
    
                return "NoLoops";
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge722', {
        statics: {
            m1: function (i) {
                return i;
            },
            testUseCase: function () {
                var $t;
                var c1 = new Bridge.ClientTest.BridgeIssues.Bridge722();
                var asset1 = 1;
                asset1 = (c1.setItem("path", 2), 2);
    
                Bridge.Test.Assert.areEqual$1(2, asset1, "Bridge722 asset1");
                Bridge.Test.Assert.areEqual$1(3, Bridge.ClientTest.BridgeIssues.Bridge722.m1((c1.setItem("path", 3), 3)), "Bridge722 M1 3");
                Bridge.Test.Assert.areEqual$1(4, Bridge.ClientTest.BridgeIssues.Bridge722.m1((asset1 = (c1.setItem("path", 4), 4))), "Bridge722 M1 4");
    
                var c2 = new $_.$AnonymousType$14();
                var asset2 = (c2.path = 5, 5);
                Bridge.Test.Assert.areEqual$1(5, asset2, "Bridge722 asset2");
                Bridge.Test.Assert.areEqual$1(5, c2.path, "Bridge722 c2");
    
                var c3 = new System.Collections.Generic.Dictionary$2(String,System.Int32)();
                var asset3 = (c3.set("path", 6), 6);
                Bridge.Test.Assert.areEqual$1(6, asset3, "Bridge722 asset3");
                Bridge.Test.Assert.areEqual$1(6, c3.get("path"), "Bridge722 c3");
    
                var data4 = [System.Decimal(1.0), System.Decimal(2.0), System.Decimal(3.0), System.Decimal(4.0), System.Decimal(7.0)];
                var c4 = new System.Collections.Generic.Dictionary$2(String,System.Decimal)();
                var asset4 = ($t = System.Linq.Enumerable.from(data4).select($_.Bridge.ClientTest.BridgeIssues.Bridge722.f1).last(), c4.set("path", $t), $t);
                Bridge.Test.Assert.areDeepEqual$1(System.Decimal(7.0), asset4, "Bridge722 asset4");
                Bridge.Test.Assert.areDeepEqual$1(System.Decimal(7.0), c4.get("path"), "Bridge722 c4");
            }
        },
        lastItem: 0,
        getItem: function (item) {
            return this.lastItem;
        },
        setItem: function (item, value) {
            this.lastItem = value;
        }
    });
    
    Bridge.ns("Bridge.ClientTest.BridgeIssues.Bridge722", $_);
    
    Bridge.apply($_.Bridge.ClientTest.BridgeIssues.Bridge722, {
        f1: function (x) {
            return x;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge726', {
        statics: {
            testUseCase: function () {
                var $t;
                var b = true;
                var t = [1, 2, 3];
    
                var sum = 0;
                if (b) {
                    $t = Bridge.getEnumerator(t);
                    while ($t.moveNext()) {
                        var i = $t.getCurrent();
                        sum = (sum + i) | 0;
                    }
                }
    
                Bridge.Test.Assert.areEqual$1(6, sum, "Bridge726");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge732', {
        statics: {
            testUseCase: function () {
                var decimalValue = System.Decimal(5.0);
                var assign = false;
                var test = assign ? decimalValue : System.Decimal(2);
                var test2 = test.mul(decimalValue);
    
                Bridge.Test.Assert.true$1(test2.equalsT(System.Decimal(10)), "Bridge732");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge733', {
        statics: {
            config: {
                properties: {
                    DateA: null
                },
                init: function () {
                    this.dateb = new Date(-864e13);
                    this.DateA = new Date(-864e13);
                }
            },
            testUseCase: function () {
                Bridge.Test.Assert.true$1(Bridge.equals(Bridge.ClientTest.BridgeIssues.Bridge733.getDateA(), new Date(-864e13)), "Bridge733 DateA");
                Bridge.Test.Assert.true$1(Bridge.equals(Bridge.ClientTest.BridgeIssues.Bridge733.dateb, new Date(-864e13)), "Bridge733 dateb");
    
                Bridge.ClientTest.BridgeIssues.Bridge733.dateb = new Date(); // to prevent warning that dateb is never assigned
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge743', {
        statics: {
            testInlineMethodsAsReference: function () {
                var aaa = 7;
                var fn1 = function (b) { return Bridge.equals(aaa, b); };
                Bridge.Test.Assert.true(fn1(7));
    
                fn1 = function (b) { return Bridge.equals(aaa, b); };
                Bridge.Test.Assert.true(fn1(7));
    
                var fn2 = function (a, b) { return Bridge.equals(a, b); };
                Bridge.Test.Assert.true(fn2(aaa, 7));
    
                fn2 = function (a, b) { return Bridge.equals(a, b); };
                Bridge.Test.Assert.true(fn2(aaa, 7));
    
                var list = Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                    ["1"],
                    ["2"],
                    ["3"]
                ] );
                var converted = Bridge.ClientTest.BridgeIssues.Bridge743ObjectExtention.convertAllItems(String, System.Int32, list, function (s) { return System.Int32.parse(s); });
                Bridge.Test.Assert.areEqual(converted.getItem(0), 1);
                Bridge.Test.Assert.areEqual(converted.getItem(1), 2);
                Bridge.Test.Assert.areEqual(converted.getItem(2), 3);
    
                Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.BridgeIssues.Bridge743.f1, $_.Bridge.ClientTest.BridgeIssues.Bridge743.f2);
    
                var action1 = function (str1, str2) { return str1 + ' ' + str2; };
                Bridge.Test.Assert.areEqual(action1("Hello", "world!"), "Hello world!");
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.BridgeIssues.Bridge743", $_);
    
    Bridge.apply($_.Bridge.ClientTest.BridgeIssues.Bridge743, {
        f1: function () {
            var list1 = Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                ["2147483648"]
            ] );
            var converted1 = Bridge.ClientTest.BridgeIssues.Bridge743ObjectExtention.convertAllItems(String, System.Int32, list1, function (s) { return System.Int32.parse(s); });
        },
        f2: function (e) {
            return Bridge.is(e, System.OverflowException);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge743ObjectExtention', {
        statics: {
            convertAllItems: function (T, T2, value, $function) {
                var $t;
                var result = new System.Collections.Generic.List$1(T2)();
                $t = Bridge.getEnumerator(value);
                while ($t.moveNext()) {
                    var item = $t.getCurrent();
                    result.add($function(item));
                }
                return result;
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge751', {
        statics: {
            testUseCase: function () {
                for (var i = 0; i < 5; i = (i + 1) | 0) {
                    var el = i;
                }
    
                var values = Bridge.merge(new System.Collections.Generic.List$1(System.Int32)(), [
                    [1],
                    [2]
                ] );
                var v1 = System.Linq.Enumerable.from(values).count($_.Bridge.ClientTest.BridgeIssues.Bridge751.f1);
    
                Bridge.Test.Assert.areEqual$1(1, v1, "Bridge751");
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.BridgeIssues.Bridge751", $_);
    
    Bridge.apply($_.Bridge.ClientTest.BridgeIssues.Bridge751, {
        f1: function (el1) {
            return el1 === 1;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge758', {
        statics: {
            testUseCase: function () {
                var list = new System.Collections.Generic.List$1(Date)();
                list.add(new Date(2015, 1 - 1, 2));
                list.add(new Date(2015, 1 - 1, 1));
                list.add(new Date(2015, 1 - 1, 3));
    
                list.sort();
                Bridge.Test.Assert.true$1(Bridge.equals(list.getItem(0), new Date(2015, 1 - 1, 1)), "Bridge758 2015/1/1");
                Bridge.Test.Assert.true$1(Bridge.equals(list.getItem(1), new Date(2015, 1 - 1, 2)), "Bridge758 2015/1/2");
                Bridge.Test.Assert.true$1(Bridge.equals(list.getItem(2), new Date(2015, 1 - 1, 3)), "Bridge758 2015/1/3");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge760', {
        statics: {
            testUseCase: function () {
                var $t;
                var a = null;
                var b = 10;
    
                var c = ($t = b, $t != null ? $t : Bridge.ClientTest.BridgeIssues.Bridge760.doSomething(a));
                Bridge.Test.Assert.areEqual$1(10, c, "Bridge760");
            },
            doSomething: function (test) {
                return System.Nullable.getValue(test);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge762', {
        statics: {
            testUseCase: function () {
                var test1 = null;
                var test2 = null;
                var test3 = null;
    
                var value1 = System.Nullable.getValueOrDefault(test1, 0);
                var value2 = System.Nullable.getValueOrDefault(test2, new Bridge.ClientTest.BridgeIssues.Bridge762A());
                var value3 = System.Nullable.getValueOrDefault(test3, new Bridge.ClientTest.BridgeIssues.Bridge762B()).$clone();
    
                Bridge.Test.Assert.areEqual$1(0, value1, "Bridge762 int");
                Bridge.Test.Assert.areNotEqual$1(null, value2, "Bridge762A struct");
                Bridge.Test.Assert.areNotEqual$1(null, value3.$clone(), "Bridge762B struct");
                Bridge.Test.Assert.areEqual$1(0, value3.getData(), "Bridge762B.Data struct");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge762A', {
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge762A(); }
        },
        $struct: true,
        $clone: function (to) { return this; }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge762B', {
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge762B(); }
        },
        config: {
            properties: {
                Data: 0
            }
        },
        constructor: function () {
        },
        $struct: true,
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + -1386632298;
            hash = hash * 23 + (this.Data == null ? 0 : Bridge.getHashCode(this.Data));
            return hash;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.BridgeIssues.Bridge762B)) {
                return false;
            }
            return Bridge.equals(this.Data, o.Data);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.BridgeIssues.Bridge762B();
            s.Data = this.Data;
            return s;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge772', {
        statics: {
            testUseCase: function () {
                //These arrays depend on "useTypedArray" bridge.json option
                var byteArray = System.Array.init(1, 0);
                var sbyteArray = System.Array.init(2, 0);
                var shortArray = System.Array.init(3, 0);
                var ushortArray = System.Array.init(4, 0);
                var intArray = System.Array.init(5, 0);
                var uintArray = System.Array.init(6, 0);
                var floatArray = System.Array.init(7, 0);
                var doubleArray = System.Array.init(8, 0);
    
                //These arrays do not depend on "useTypedArray" bridge.json option
                var stringArray = System.Array.init(9, null);
                var decimalArray = System.Array.init(10, System.Decimal(0.0));
    
                byteArray[0] = 1;
                sbyteArray[0] = 2;
                shortArray[0] = 3;
                ushortArray[0] = 4;
                intArray[0] = 5;
                uintArray[0] = 6;
                floatArray[0] = 7;
                doubleArray[0] = 8;
    
                stringArray[0] = "9";
                decimalArray[0] = System.Decimal(10.0);
    
                Bridge.Test.Assert.areEqual$1(1, byteArray[0], "get byteArray[0]");
                Bridge.Test.Assert.areEqual$1(2, sbyteArray[0], "get sbyteArray[0]");
                Bridge.Test.Assert.areEqual$1(3, shortArray[0], "get shortArray[0]");
                Bridge.Test.Assert.areEqual$1(4, ushortArray[0], "get ushortArray[0]");
                Bridge.Test.Assert.areEqual$1(5, intArray[0], "get intArray[0]");
                Bridge.Test.Assert.areEqual$1(6, uintArray[0], "get uintArray[0]");
                Bridge.Test.Assert.areEqual$1(7, floatArray[0], "get floatArray[0]");
                Bridge.Test.Assert.areEqual$1(8, doubleArray[0], "get doubleArray[0]");
    
                Bridge.Test.Assert.areEqual$1("9", stringArray[0], "get stringArray[0]");
                Bridge.Test.Assert.areEqual$1(System.Decimal(10.0), decimalArray[0], "get decimalArray[0]");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge777', {
        statics: {
            config: {
                properties: {
                    SomeProperty: null,
                    P1: null,
                    P2: null
                }
            },
            method: function (o) {
                return null;
            },
            testUseCase: function () {
                var $t;
                var o = new $_.$AnonymousType$14();
                o;
                {
                    var i = 555;
                    Bridge.Test.Assert.areEqual$1(555, i, "Bridge777 i");
                }
    
                Bridge.ClientTest.BridgeIssues.Bridge777.method((Bridge.ClientTest.BridgeIssues.Bridge777.setSomeProperty(o), o));
                {
                    Bridge.Test.Assert.notNull$1(Bridge.ClientTest.BridgeIssues.Bridge777.getSomeProperty(), "Bridge777 SomeProperty");
                }
    
                ($t = (Bridge.ClientTest.BridgeIssues.Bridge777.setP2(o), o), Bridge.ClientTest.BridgeIssues.Bridge777.setP1($t), $t);
                {
                    Bridge.Test.Assert.notNull$1(Bridge.ClientTest.BridgeIssues.Bridge777.getP1(), "Bridge777 P1");
                    Bridge.Test.Assert.notNull$1(Bridge.ClientTest.BridgeIssues.Bridge777.getP2(), "Bridge777 P2");
                }
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge782', {
        statics: {
            testUseCase: function () {
                var o = new $_.$AnonymousType$14();
                Bridge.Test.Assert.true$1(o.__foo == null, "Bridge782");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge785', {
        statics: {
            testUseCase: function () {
                {
                    var i = 1;
                    var j = i;
                    Bridge.Test.Assert.areEqual$1(1, j, "Bridge785 by name");
                }
                {
                    var i1 = 2;
                    var j1 = i1;
                    Bridge.Test.Assert.areEqual$1(2, j1, "Bridge785 by index");
                }
                {
                    var i2 = Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge785.DataClass(), {
                        setValue: 3
                    } );
                    var j2 = i2.getValue();
                    Bridge.Test.Assert.areEqual$1(3, j2, "Bridge785 by index for DataClass property");
                }
                {
                    var i3 = Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge785.DataClass(), {
                        setValue: 4
                    } );
                    var j3 = i3;
                    Bridge.Test.Assert.areEqual$1(i3, j3, "Bridge785 by index for DataClass");
                }
                {
                    var i4 = Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge785.DataClass(), {
                        setValue: 5
                    } );
                    var j4 = i4.getSomething(55).getValue();
                    Bridge.Test.Assert.areEqual$1(55, j4, "Bridge785 by index for DataClass method");
                }
                {
                    var i5 = Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge785.DataStruct(), {
                        setValue: 6
                    } );
                    var j5 = i5.getValue();
                    Bridge.Test.Assert.areEqual$1(6, j5, "Bridge785 by index for DataStruct property");
                }
                {
                    var i6 = Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge785.DataStruct(), {
                        setValue: 7
                    } );
                    var j6 = i6.getSomething(77).getValue();
                    Bridge.Test.Assert.areEqual$1(77, j6, "Bridge785 by index for DataStruct method");
                }
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge785.DataClass', {
        config: {
            properties: {
                Value: 0
            }
        },
        getSomething: function (i) {
            return Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge785.DataClass(), {
                setValue: i
            } );
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge785.DataStruct', {
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge785.DataStruct(); }
        },
        config: {
            properties: {
                Value: 0
            }
        },
        constructor: function () {
        },
        getSomething: function (i) {
            return Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge785.DataStruct(), {
                setValue: i
            } );
        },
        $struct: true,
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + -847529689;
            hash = hash * 23 + (this.Value == null ? 0 : Bridge.getHashCode(this.Value));
            return hash;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.BridgeIssues.Bridge785.DataStruct)) {
                return false;
            }
            return Bridge.equals(this.Value, o.Value);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.BridgeIssues.Bridge785.DataStruct();
            s.Value = this.Value;
            return s;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge786', {
        statics: {
            testUseCase: function () {
                Bridge.Test.Assert.areEqual$1("true", Bridge.ClientTest.BridgeIssues.Bridge786.get(true), "Bridge786 true");
                Bridge.Test.Assert.areEqual$1("false", Bridge.ClientTest.BridgeIssues.Bridge786.get(false), "Bridge786 false");
            },
            get: function ($throws) {
                return $throws ? "true" : "false";
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge788', {
        statics: {
            testUseCase: function () {
                Bridge.Test.Assert.true(Bridge.Validation.url("http://127.0.0.1"));
                Bridge.Test.Assert.false(Bridge.Validation.url("http://127.0.1"));
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge789', {
        statics: {
            testUseCase: function () {
                Bridge.Test.Assert.areNotEqual(null, Bridge.ClientTest.BridgeIssues.Bridge789.method1());
                Bridge.Test.Assert.areNotEqual(null, Bridge.ClientTest.BridgeIssues.Bridge789.method2().$clone());
                Bridge.Test.Assert.areEqual(0, Bridge.ClientTest.BridgeIssues.Bridge789.method2().field1);
            },
            method1: function (dt) {
                if (dt === void 0) { dt = new Date(-864e13); }
                return dt;
            },
            method2: function (s) {
                if (s === void 0) { s = new Bridge.ClientTest.BridgeIssues.Bridge789A(); }
                return s.$clone();
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge789A', {
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge789A(); }
        },
        field1: 0,
        constructor: function () {
        },
        $struct: true,
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 428277234;
            hash = hash * 23 + (this.field1 == null ? 0 : Bridge.getHashCode(this.field1));
            return hash;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.BridgeIssues.Bridge789A)) {
                return false;
            }
            return Bridge.equals(this.field1, o.field1);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.BridgeIssues.Bridge789A();
            s.field1 = this.field1;
            return s;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge793', {
        statics: {
            testUseCase: function () {
                var js = new System.Collections.Generic.List$1(String)();
                js.add("1");
                var test = new System.Collections.ObjectModel.ReadOnlyCollection$1(String)(js);
    
                Bridge.Test.Assert.areEqual$1(1, test.getCount(), "Bridge793 Count");
                Bridge.Test.Assert.areEqual$1("1", test.get(0), "Bridge793 [0]");
    
                var ilist = Bridge.cast(test, System.Collections.Generic.IList$1(String));
    
                Bridge.Test.Assert.throws$5(function () {
                    System.Array.setItem(ilist, 0, "0");
                }, "Bridge793 Setter should throw an exception");
                Bridge.Test.Assert.throws$5(function () {
                    System.Array.add(ilist, "1");
                }, "Bridge793 Add should throw an exception");
                Bridge.Test.Assert.throws$5(function () {
                    System.Array.removeAt(ilist, 0);
                }, "Bridge793 RemoveAt should throw an exception");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge795', {
        statics: {
            testUseCase: function () {
                var wrappedValue = new Bridge.ClientTest.BridgeIssues.Bridge795A("constructor$1", 1);
                var wrappedValueIsNull = (System.Nullable.lifteq(Bridge.ClientTest.BridgeIssues.Bridge795A.op_Equality, wrappedValue, null));
    
                Bridge.Test.Assert.areEqual$1(false, wrappedValueIsNull, "Bridge795");
            },
            testRelated: function () {
                var v1 = new Bridge.ClientTest.BridgeIssues.Bridge795B("constructor$1", 1);
                var v2 = new Bridge.ClientTest.BridgeIssues.Bridge795B("constructor$1", 2);
                var v3 = new Bridge.ClientTest.BridgeIssues.Bridge795B("constructor$1", 1);
    
                Bridge.Test.Assert.areEqual$1(false, Bridge.ClientTest.BridgeIssues.Bridge795B.op_Equality(v1, v2), "Bridge795 lift == 12");
                Bridge.Test.Assert.areEqual$1(true, Bridge.ClientTest.BridgeIssues.Bridge795B.op_Equality(v1, v3), "Bridge795 lift == 13");
                Bridge.Test.Assert.areEqual$1(true, Bridge.ClientTest.BridgeIssues.Bridge795B.op_Inequality(v1, v2), "Bridge795 lift != 12");
                Bridge.Test.Assert.areEqual$1(false, Bridge.ClientTest.BridgeIssues.Bridge795B.op_Inequality(v1, v3), "Bridge795 lift != 13");
                Bridge.Test.Assert.areEqual$1(false, Bridge.ClientTest.BridgeIssues.Bridge795B.op_GreaterThanOrEqual(v1, v2), "Bridge795 lift >= 12");
                Bridge.Test.Assert.areEqual$1(true, Bridge.ClientTest.BridgeIssues.Bridge795B.op_GreaterThanOrEqual(v2, v1), "Bridge795 lift >= 21");
                Bridge.Test.Assert.areEqual$1(true, Bridge.ClientTest.BridgeIssues.Bridge795B.op_GreaterThanOrEqual(v1, v3), "Bridge795 lift >= 13");
                Bridge.Test.Assert.areEqual$1(false, Bridge.ClientTest.BridgeIssues.Bridge795B.op_GreaterThan(v1, v2), "Bridge795 lift > 12");
                Bridge.Test.Assert.areEqual$1(true, Bridge.ClientTest.BridgeIssues.Bridge795B.op_GreaterThan(v2, v1), "Bridge795 lift > 21");
                Bridge.Test.Assert.areEqual$1(false, Bridge.ClientTest.BridgeIssues.Bridge795B.op_GreaterThan(v1, v3), "Bridge795 lift > 13");
                Bridge.Test.Assert.areEqual$1(true, Bridge.ClientTest.BridgeIssues.Bridge795B.op_LessThanOrEqual(v1, v2), "Bridge795 lift <= 12");
                Bridge.Test.Assert.areEqual$1(false, Bridge.ClientTest.BridgeIssues.Bridge795B.op_LessThanOrEqual(v2, v1), "Bridge795 lift <= 21");
                Bridge.Test.Assert.areEqual$1(true, Bridge.ClientTest.BridgeIssues.Bridge795B.op_LessThanOrEqual(v1, v3), "Bridge795 lift <= 13");
                Bridge.Test.Assert.areEqual$1(true, Bridge.ClientTest.BridgeIssues.Bridge795B.op_LessThan(v1, v2), "Bridge795 lift < 12");
                Bridge.Test.Assert.areEqual$1(false, Bridge.ClientTest.BridgeIssues.Bridge795B.op_LessThan(v2, v1), "Bridge795 lift < 21");
                Bridge.Test.Assert.areEqual$1(false, Bridge.ClientTest.BridgeIssues.Bridge795B.op_LessThan(v1, v3), "Bridge795 lift < 13");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge795A', {
        statics: {
            op_Equality: function (x, y) {
                return x.equals(y.$clone());
            },
            op_Inequality: function (x, y) {
                return !(Bridge.ClientTest.BridgeIssues.Bridge795A.op_Equality(x, y));
            },
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge795A(); }
        },
        config: {
            properties: {
                Value: 0
            }
        },
        constructor$1: function (value) {
            Bridge.ClientTest.BridgeIssues.Bridge795A.prototype.$constructor.call(this);
    
            this.setValue(value);
        },
        constructor: function () {
        },
        equals: function (o) {
            if (!(Bridge.is(o, Bridge.ClientTest.BridgeIssues.Bridge795A))) {
                return false;
            }
            return Bridge.cast(o, Bridge.ClientTest.BridgeIssues.Bridge795A).getValue() === this.getValue();
        },
        getHashCode: function () {
            return this.getValue();
        },
        $struct: true,
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.BridgeIssues.Bridge795A();
            s.Value = this.Value;
            return s;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge795B', {
        statics: {
            op_Equality: function (x, y) {
                return x.getValue() === y.getValue();
            },
            op_Inequality: function (x, y) {
                return !(Bridge.ClientTest.BridgeIssues.Bridge795B.op_Equality(x, y));
            },
            op_GreaterThanOrEqual: function (x, y) {
                return x.getValue() >= y.getValue();
            },
            op_GreaterThan: function (x, y) {
                return x.getValue() > y.getValue();
            },
            op_LessThanOrEqual: function (x, y) {
                return x.getValue() <= y.getValue();
            },
            op_LessThan: function (x, y) {
                return x.getValue() < y.getValue();
            },
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge795B(); }
        },
        config: {
            properties: {
                Value: 0
            }
        },
        constructor$1: function (value) {
            Bridge.ClientTest.BridgeIssues.Bridge795B.prototype.$constructor.call(this);
    
            this.setValue(value);
        },
        constructor: function () {
        },
        equals: function (o) {
            if (!(Bridge.is(o, Bridge.ClientTest.BridgeIssues.Bridge795B))) {
                return false;
            }
    
            return Bridge.cast(o, Bridge.ClientTest.BridgeIssues.Bridge795B).getValue() === this.getValue();
        },
        getHashCode: function () {
            return this.getValue();
        },
        $struct: true,
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.BridgeIssues.Bridge795B();
            s.Value = this.Value;
            return s;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge796', {
        statics: {
            testUseCase: function () {
                var b = { v : true };
    
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BridgeIssues.Bridge796.method1(true), "Bridge796 Method1");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BridgeIssues.Bridge796.method1_1(true), "Bridge796 Method1_1");
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BridgeIssues.Bridge796.method2(true), "Bridge796 Method2");
                Bridge.Test.Assert.false$1(Bridge.ClientTest.BridgeIssues.Bridge796.method3(b), "Bridge796 Method3");
                Bridge.Test.Assert.false$1(b.v, "Bridge796 Method3 b");
            },
            method1: function ($num) {
                return $num;
            },
            method1_1: function ($throws) {
                return $throws;
            },
            method2: function ($throws) {
                return $throws;
            },
            method3: function ($throws) {
                $throws.v = false;
                return $throws.v;
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge815', {
        statics: {
            testUseCase: function () {
                var a = new Bridge.ClientTest.BridgeIssues.Bridge815.A();
    
                a.method();
                Bridge.Test.Assert.areEqual$1(null, System.Nullable.lift1("$clone", a.getProperty()), "Bridge815 null");
    
                a.method(new Bridge.ClientTest.BridgeIssues.Bridge815.B("constructor$1", 1));
                Bridge.Test.Assert.true$1(System.Nullable.hasValue(a.getProperty()), "Bridge815 Property.HasValue");
                Bridge.Test.Assert.areEqual$1(1, System.Nullable.getValue(a.getProperty()).field, "Bridge815 Property.Value.field == 1");
    
                a.method2();
                Bridge.Test.Assert.true$1(System.Nullable.hasValue(a.getProperty()), "Bridge815 Method2 Property.HasValue");
                Bridge.Test.Assert.areEqual$1(0, System.Nullable.getValue(a.getProperty()).field, "Bridge815 Method2 Property.Value.field == 0");
    
                a.method2(new Bridge.ClientTest.BridgeIssues.Bridge815.B("constructor$1", 2));
                Bridge.Test.Assert.true$1(System.Nullable.hasValue(a.getProperty()), "Bridge815 Method2 Property.HasValue 2");
                Bridge.Test.Assert.areEqual$1(2, System.Nullable.getValue(a.getProperty()).field, "Bridge815 Method2 Property.Value.field == 2");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge815.A', {
        config: {
            properties: {
                Property: null
            }
        },
        method: function (param) {
            if (param === void 0) { param = null; }
            this.setProperty(System.Nullable.lift1("$clone", param));
        },
        method2: function (param) {
            if (param === void 0) { param = new Bridge.ClientTest.BridgeIssues.Bridge815.B(); }
            this.setProperty(param.$clone());
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge815.B', {
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge815.B(); }
        },
        field: 0,
        constructor$1: function (i) {
            this.field = i;
        },
        constructor: function () {
        },
        $struct: true,
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 372029408;
            hash = hash * 23 + (this.field == null ? 0 : Bridge.getHashCode(this.field));
            return hash;
        },
        equals: function (o) {
            if (!Bridge.is(o, Bridge.ClientTest.BridgeIssues.Bridge815.B)) {
                return false;
            }
            return Bridge.equals(this.field, o.field);
        },
        $clone: function (to) {
            var s = to || new Bridge.ClientTest.BridgeIssues.Bridge815.B();
            s.field = this.field;
            return s;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge816', {
        statics: {
            testUseCase: function () {
                var textArea = document.createElement('textarea');
                textArea.id = "textArea1";
                textArea.value = "Test";
    
                var root = document.getElementById("qunit-fixture");
                root.appendChild(textArea);
    
                var ta = document.getElementById("textArea1");
                Bridge.Test.Assert.areEqual$1("Test", ta.value, "Bridge816 textArea1.value");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge817', {
        statics: {
            testUseCase: function () {
                Bridge.Test.Assert.true$1((System.Char.isDigit(65) || System.Char.isLetter(65)), "Bridge817 IsLetterOrDigit");
                Bridge.Test.Assert.true$1((System.Char.isDigit("A".charCodeAt(0)) || System.Char.isLetter("A".charCodeAt(0))), "Bridge817 IsLetterOrDigit string");
    
                Bridge.Test.Assert.false$1(!(System.Char.isDigit(65) || System.Char.isLetter(65)), "Bridge817 IsLetterOrDigit !");
                Bridge.Test.Assert.false$1(!(System.Char.isDigit("A".charCodeAt(0)) || System.Char.isLetter("A".charCodeAt(0))), "Bridge817 IsLetterOrDigit string !");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge818', {
        statics: {
            testUseCase: function () {
                var z = 0;
                for (; ; ) {
                    z = (z + 1) | 0;
                    if (z === 10) {
                        break;
                    }
                }
                Bridge.Test.Assert.areEqual$1(10, z, "Bridge818 z");
    
                var i;
                var j;
                for (i = 0, j = 1; i < 10; i = (i + 1) | 0, j = (j + 1) | 0) {
    
                }
                Bridge.Test.Assert.areEqual$1(10, i, "Bridge818 i");
                Bridge.Test.Assert.areEqual$1(11, j, "Bridge818 j");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge821', {
        statics: {
            testUseCase: function () {
                var defaultCulture = System.Globalization.CultureInfo.getCurrentCulture();
    
                try {
                    var d = System.Decimal("443534569034876.12345678901235");
                    Bridge.Test.Assert.areEqual("443534569034876.12345678901235", Bridge.Int.format(d, 'G'));
                    Bridge.Test.Assert.areEqual("443534569034876,12345678901235", Bridge.Int.format(d, 'G', System.Globalization.CultureInfo.getCultureInfo("ru-RU")));
                    System.Globalization.CultureInfo.setCurrentCulture(System.Globalization.CultureInfo.getCultureInfo("ru-RU"));
                    Bridge.Test.Assert.areEqual("443534569034876,12345678901235", Bridge.Int.format(d, 'G'));
    
                    System.Globalization.CultureInfo.setCurrentCulture(defaultCulture);
    
                    var d1 = 1.25;
                    Bridge.Test.Assert.areEqual("1.25", System.Double.format(d1, 'G'));
                    Bridge.Test.Assert.areEqual("1,25", System.Double.format(d1, 'G', System.Globalization.CultureInfo.getCultureInfo("ru-RU")));
                    System.Globalization.CultureInfo.setCurrentCulture(System.Globalization.CultureInfo.getCultureInfo("ru-RU"));
                    Bridge.Test.Assert.areEqual("1,25", System.Double.format(d1, 'G'));
    
                    System.Globalization.CultureInfo.setCurrentCulture(defaultCulture);
    
                    var f = 1.25;
                    Bridge.Test.Assert.areEqual("1.25", System.Single.format(f, 'G'));
                    Bridge.Test.Assert.areEqual("1,25", System.Single.format(f, 'G', System.Globalization.CultureInfo.getCultureInfo("ru-RU")));
                    System.Globalization.CultureInfo.setCurrentCulture(System.Globalization.CultureInfo.getCultureInfo("ru-RU"));
                    Bridge.Test.Assert.areEqual("1,25", System.Single.format(f, 'G'));
                }
                finally {
                    System.Globalization.CultureInfo.setCurrentCulture(defaultCulture);
                }
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge823', {
        statics: {
            getTicksReturnsCorrectValue: function () {
                var val = System.Int64([1817194880,220]);
                var result = System.Int64([-57829376,2204230]);
    
                var ticks = System.Int64((new Date(val.toNumber())).getTime()).mul(10000);
                var ticksPlusOne = System.Int64((new Date(val.toNumber())).getTime()).mul(10000).add(System.Int64(1));
                var ticksString = System.Int64((new Date(val.toNumber())).getTime()).mul(10000).toString();
    
                Bridge.Test.Assert.areDeepEqual$1(result, ticks, "Ticks returning correct int value");
                Bridge.Test.Assert.areDeepEqual$1(result.add(System.Int64(1)), ticksPlusOne, "Adding to a Tick value is correct");
                Bridge.Test.Assert.areDeepEqual$1(result.toString(), ticksString, "Ticks returning correct value if .ToString() called on int");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge826', {
        statics: {
            echoDecimal: function (d) {
                if (d === void 0) { d = System.Decimal(42.0); }
                return d;
            },
            testUseCase: function () {
                var d = null;
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BridgeIssues.Bridge826.echoDecimal(Bridge.ClientTest.BridgeIssues.Bridge826A.op_Implicit$1(d)).equalsT(System.Decimal(0)), "Bridge826 decimal 0");
    
                d = Bridge.ClientTest.BridgeIssues.Bridge826A.op_Implicit(System.Decimal(1));
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BridgeIssues.Bridge826.echoDecimal(Bridge.ClientTest.BridgeIssues.Bridge826A.op_Implicit$1(d)).equalsT(System.Decimal(1)), "Bridge826 decimal 1");
    
                var i = null;
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BridgeIssues.Bridge826.echoDecimal(System.Decimal(Bridge.ClientTest.BridgeIssues.Bridge826B.op_Implicit$1(i))).equalsT(System.Decimal(0)), "Bridge826 int 0");
    
                i = Bridge.ClientTest.BridgeIssues.Bridge826B.op_Implicit(1);
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BridgeIssues.Bridge826.echoDecimal(System.Decimal(Bridge.ClientTest.BridgeIssues.Bridge826B.op_Implicit$1(i))).equalsT(System.Decimal(1)), "Bridge826 int 1");
    
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BridgeIssues.Bridge826.echoDecimal().equalsT(System.Decimal(42)), "Bridge826 42");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge826A', {
        statics: {
            op_Implicit: function (val) {
                return new Bridge.ClientTest.BridgeIssues.Bridge826A(val);
            },
            op_Implicit$1: function (val) {
                return val != null ? val._val : System.Decimal(0);
            }
        },
        _val: System.Decimal(0.0),
        constructor: function (val) {
            this._val = val;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge826B', {
        statics: {
            op_Implicit: function (val) {
                return new Bridge.ClientTest.BridgeIssues.Bridge826B(val);
            },
            op_Implicit$1: function (val) {
                return val != null ? val._val : 0;
            }
        },
        _val: 0,
        constructor: function (val) {
            this._val = val;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge830', {
        statics: {
            testMethod: function (method, throwException) {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    task, 
                    exception, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        if (method == null) {
                                            throw new System.ArgumentNullException("method");
                                        }
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        task = System.Threading.Tasks.Task.fromResult(new System.Exception("Success"));
                                        if (throwException) {
                                            throw new System.Exception("test");
                                        }
                                        
                                        $task1 = task;
                                        $step = 2;
                                        $task1.continueWith($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        $tcs.setResult($taskResult1);
                                        return;
                                    }
                                    case 3: {
                                        $tcs.setResult(new System.Exception("Fail: " + exception.getMessage()));
                                        return;
                                    }
                                    case 4: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 1 && $step <= 2 ){
                                exception = $async_e;
                                $step = 3;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);
    
                $asyncBody();
                return $tcs.task;
            },
            testUseCase: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $task2, 
                    $taskResult2, 
                    $jumpFromFinally, 
                    done, 
                    res, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1,2], $step);
                            switch ($step) {
                                case 0: {
                                    done = Bridge.Test.Assert.async();
                                    
                                    $task2 = Bridge.ClientTest.BridgeIssues.Bridge830.testMethod("", false);
                                    $step = 1;
                                    $task2.continueWith($asyncBody, true);
                                    return;
                                }
                                case 1: {
                                    $taskResult2 = $task2.getAwaitedResult();
                                    res = $taskResult2;
                                    Bridge.Test.Assert.areEqual("Success", res.getMessage());
                                    
                                    $task1 = Bridge.ClientTest.BridgeIssues.Bridge830.testMethod("", true);
                                    $step = 2;
                                    $task1.continueWith($asyncBody, true);
                                    return;
                                }
                                case 2: {
                                    $taskResult1 = $task1.getAwaitedResult();
                                    res = $taskResult1;
                                    Bridge.Test.Assert.areEqual("Fail: test", res.getMessage());
                                    
                                    done();
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);
    
                $asyncBody();
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge835', {
        statics: {
            testUseCase: function () {
                var arr = System.Array.create(new Bridge.ClientTest.BridgeIssues.Bridge835.Dot(), null, 10, 10);
                Bridge.Test.Assert.areNotEqual$1(null, arr, "Bridge835");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge835.Dot', {
        statics: {
            getDefaultValue: function () { return new Bridge.ClientTest.BridgeIssues.Bridge835.Dot(); }
        },
        $struct: true,
        $clone: function (to) { return this; }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge841', {
        statics: {
            testUseCase: function () {
                var $t;
                var testListA = Bridge.merge(new System.Collections.Generic.List$1(System.Int32)(), [
                    [1],
                    [2]
                ] );
    
                var result = 0;
                $t = Bridge.getEnumerator(testListA);
                while ($t.moveNext()) {
                    var item = $t.getCurrent();
                    var fn = $_.Bridge.ClientTest.BridgeIssues.Bridge841.f1;
    
                    switch (item) {
                        case 1: 
                            result = (result + 1) | 0;
                            break;
                        case 2: 
                            result = (result + 2) | 0;
                            break;
                    }
                }
    
                Bridge.Test.Assert.areEqual$1(3, result, "Bridge841");
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.BridgeIssues.Bridge841", $_);
    
    Bridge.apply($_.Bridge.ClientTest.BridgeIssues.Bridge841, {
        f1: function () {
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge844', {
        statics: {
            nullableAndSimpleDateTimeToStringEquals: function () {
                var dt1 = new Date();
                var dt2 = dt1;
    
                Bridge.Test.Assert.areEqual$1(System.Nullable.toString(dt2, function ($t) { return Bridge.Date.format($t); }), Bridge.Date.format(dt1), "Bridge844");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge849', {
        statics: {
            testUseCase: function () {
                Bridge.Test.Assert.areEqual$1(true, Bridge.ClientTest.BridgeIssues.Bridge849A.setToBlah(""), "Bridge849 true");
                Bridge.Test.Assert.areEqual$1(false, Bridge.ClientTest.BridgeIssues.Bridge849A.setToBlah("", false), "Bridge849 false");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge849A', {
        statics: {
            setToBlah: function (value, blah) {
                if (blah === void 0) { blah = true; }
                return blah;
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge857', {
        statics: {
            testUseCase: function () {
                Bridge.Test.Assert.areEqual$1(4294967295, Bridge.ClientTest.BridgeIssues.Bridge857A.All, "Bridge857 Bridge857A");
                Bridge.Test.Assert.areEqual$1(4294967295, Bridge.ClientTest.BridgeIssues.Bridge857B.All, "Bridge857 Bridge857B");
                Bridge.Test.Assert.areEqual$1(4294967295, Bridge.ClientTest.BridgeIssues.Bridge857C.All, "Bridge857 Bridge857C All");
                Bridge.Test.Assert.areEqual$1(0, Bridge.ClientTest.BridgeIssues.Bridge857C.All1, "Bridge857 Bridge857C All1");
                Bridge.Test.Assert.areEqual$1(1, Bridge.ClientTest.BridgeIssues.Bridge857C.All2, "Bridge857 Bridge857C All2");
                Bridge.Test.Assert.areEqual$1(4294967295, Bridge.ClientTest.BridgeIssues.Bridge857D.All, "Bridge857 Bridge857D All");
                Bridge.Test.Assert.areEqual$1(0, Bridge.ClientTest.BridgeIssues.Bridge857D.All1, "Bridge857 Bridge857D All1");
                Bridge.Test.Assert.areEqual$1(1, Bridge.ClientTest.BridgeIssues.Bridge857D.All2, "Bridge857 Bridge857D All2");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge857A', {
        statics: {
            All: 4294967295
        },
        $enum: true
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge857B', {
        statics: {
            All: 4294967295
        },
        $enum: true
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge857C', {
        statics: {
            All1: 0,
            All2: 1,
            All: 4294967295
        },
        $enum: true
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge857D', {
        statics: {
            All1: 0,
            All2: 1,
            All: 4294967295
        },
        $enum: true,
        $flags: true
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge861', {
        statics: {
            testUseCase: function () {
                var testA = Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge861A(), {
                    setMyId: 1
                } );
    
                testA.setDelegates(Bridge.fn.combine(testA.getDelegates(), $_.Bridge.ClientTest.BridgeIssues.Bridge861.f1));
    
                var testB = Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge861A(), {
                    setMyId: 2,
                    setDelegates: testA.getDelegates()
                } );
    
                testB.setDelegates(Bridge.fn.combine(testB.getDelegates(), $_.Bridge.ClientTest.BridgeIssues.Bridge861.f2));
                testB.invokeDelegates();
    
                Bridge.Test.Assert.areEqual(0, testB.getMyId());
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.BridgeIssues.Bridge861", $_);
    
    Bridge.apply($_.Bridge.ClientTest.BridgeIssues.Bridge861, {
        f1: function (data) {
            var $t;
            Bridge.identity(data.getMyId(), ($t = (data.getMyId() + 1) | 0, data.setMyId($t), $t));
        },
        f2: function (data) {
            data.setMyId(0);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge861A', {
        config: {
            properties: {
                MyId: 0,
                Delegates: null
            }
        },
        invokeDelegates: function () {
            if (!Bridge.staticEquals(this.getDelegates(), null)) {
                this.getDelegates()(this);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge863', {
        statics: {
            testUseCase: function () {
                var test = false;
                test = !!(test | true);
                Bridge.Test.Assert.areStrictEqual(true, test);
    
                test = false;
                test = !!(test & true);
                Bridge.Test.Assert.areStrictEqual(false, test);
    
                var test1 = false;
                test1 = System.Nullable.or(test1, true);
                Bridge.Test.Assert.areStrictEqual(true, test1);
    
                test1 = false;
                test1 = System.Nullable.and(test1, true);
                Bridge.Test.Assert.areStrictEqual(false, test1);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge874', {
        statics: {
            testUseCase: function () {
                var myValue = 1;
    
                switch (myValue) {
                    case 0: 
                        
                        myValue = 2;
                        
                        break;
                    case 1: 
                        
                        myValue = 3;
                        
                        break;
                }
    
                Bridge.Test.Assert.areEqual(3, myValue);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge881', {
        statics: {
            testUseCase: function () {
                var i = Bridge.ClientTest.BridgeIssues.Bridge881A.$Name;
                Bridge.Test.Assert.areEqual(Bridge.ClientTest.BridgeIssues.Bridge881A.$Name, i);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge881A', {
        statics: {
            $Name: 0
        },
        $enum: true
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge882', {
        statics: {
            testUseCase: function () {
                Bridge.Test.Assert.areEqual$1(6, Bridge.ClientTest.BridgeIssues.Bridge882_Static.getSum(), "Bridge882_Static.Sum");
                Bridge.Test.Assert.areEqual$1(18, Bridge.ClientTest.BridgeIssues.Bridge882_Static.Bridge882_A_Static.getSum(), "Bridge882_A_Static.Sum");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge882_Static', {
        statics: {
            constructor: function () {
                var $t;
                var a = [1, 2, 3];
    
                var s = 0;
                $t = Bridge.getEnumerator(a);
                while ($t.moveNext()) {
                    var v = $t.getCurrent();
                    s = (s + v) | 0;
                }
    
                Bridge.ClientTest.BridgeIssues.Bridge882_Static.setSum(s);
        },
        config: {
            properties: {
                Sum: 0
            }
        }
    }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge882_Static.Bridge882_A_Static', {
        statics: {
            constructor: function () {
                var $t;
                var a = [5, 6, 7];
    
                var s = 0;
                $t = Bridge.getEnumerator(a);
                while ($t.moveNext()) {
                    var v = $t.getCurrent();
                    s = (s + v) | 0;
                }
    
                Bridge.ClientTest.BridgeIssues.Bridge882_Static.Bridge882_A_Static.setSum(s);
        },
        config: {
            properties: {
                Sum: 0
            }
        }
    }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge883', {
        statics: {
            testUseCase: function () {
                Bridge.Test.Assert.notNull$1(new Bridge.ClientTest.BridgeIssues.Bridge883_1(), "Bridge883_1 created");
                Bridge.Test.Assert.areEqual$1(1, Bridge.ClientTest.BridgeIssues.Bridge883_3.main1(), "Bridge883_3.Main1");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge883_IInterface', {
        $interface: true
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge883_3', {
        statics: {
            main1: function () {
                var f = Bridge.ClientTest.BridgeIssues.Bridge883_4.field1;
                return f;
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge889', {
        statics: {
            count: function (arr) {
                if (arr === void 0) { arr = []; }
                return arr.length;
            },
            testUseCase: function () {
                Bridge.Test.Assert.areEqual(0, Bridge.ClientTest.BridgeIssues.Bridge889.count());
            },
            makeEnumerable: function (T, arr) {
                var $t;
                if (arr === void 0) { arr = []; }
                var $yield = [];
                $t = Bridge.getEnumerator(arr);
                while ($t.moveNext()) {
                    var x = $t.getCurrent();
                    $yield.push(x);
                }
                return System.Array.toEnumerable($yield);
            },
            testMakeEnumerable: function () {
                Bridge.Test.Assert.areEqual$1(0, System.Linq.Enumerable.from(Bridge.ClientTest.BridgeIssues.Bridge889.makeEnumerable(Object)).count(), "MakeEnumerable object 0");
                Bridge.Test.Assert.areEqual$1(2, System.Linq.Enumerable.from(Bridge.ClientTest.BridgeIssues.Bridge889.makeEnumerable(Object, [1, 2.0])).count(), "MakeEnumerable object 2");
    
                Bridge.Test.Assert.areEqual$1(0, System.Linq.Enumerable.from(Bridge.ClientTest.BridgeIssues.Bridge889.makeEnumerable(String)).count(), "MakeEnumerable string 0");
                Bridge.Test.Assert.areEqual$1(3, System.Linq.Enumerable.from(Bridge.ClientTest.BridgeIssues.Bridge889.makeEnumerable(String, ["a", "b", "c"])).count(), "MakeEnumerable string 3");
    
                Bridge.Test.Assert.areEqual$1(0, System.Linq.Enumerable.from(Bridge.ClientTest.BridgeIssues.Bridge889.makeEnumerable(System.Collections.Generic.IEnumerable$1(Object))).count(), "MakeEnumerable IEnumerable<object> 0");
                Bridge.Test.Assert.areEqual$1(1, System.Linq.Enumerable.from(Bridge.ClientTest.BridgeIssues.Bridge889.makeEnumerable(System.Collections.Generic.IEnumerable$1(Object), [[1, 2]])).count(), "MakeEnumerable IEnumerable<object> 1");
    
                Bridge.Test.Assert.areEqual$1(0, System.Linq.Enumerable.from(Bridge.ClientTest.BridgeIssues.Bridge889.makeEnumerable(System.Collections.Generic.List$1(System.Collections.Generic.List$1(Object)))).count(), "MakeEnumerable List<List<object>> 0");
                Bridge.Test.Assert.areEqual$1(2, System.Linq.Enumerable.from(Bridge.ClientTest.BridgeIssues.Bridge889.makeEnumerable(System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32)), [new System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32))(), new System.Collections.Generic.List$1(System.Collections.Generic.List$1(System.Int32))()])).count(), "MakeEnumerable List<List<object>> 2");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge892', {
        statics: {
            test: function (format, p) {
                if (p === void 0) { p = []; }
                var message = System.String.format.apply(System.String, [format].concat(p));
                return message;
            },
            testUseCase: function () {
                Bridge.Test.Assert.areEqual("Test One Two", Bridge.ClientTest.BridgeIssues.Bridge892.test("Test {0} {1}", ["One", "Two"]));
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge893', {
        statics: {
            enumToStringWorks: function () {
                Bridge.Test.Assert.areEqual("TestA1", System.Enum.toString(Bridge.ClientTest.BridgeIssues.Bridge893A, Bridge.ClientTest.BridgeIssues.Bridge893A.TestA1));
    
                var a = 100;
                Bridge.Test.Assert.areEqual("100", System.Enum.toString(Bridge.ClientTest.BridgeIssues.Bridge893A, a));
    
                Bridge.Test.Assert.areEqual("TestB3", System.Enum.toString(Bridge.ClientTest.BridgeIssues.Bridge893B, Bridge.ClientTest.BridgeIssues.Bridge893B.TestB3));
    
                var t = 3;
                Bridge.Test.Assert.areEqual("TestB1, TestB2", System.Enum.toString(Bridge.ClientTest.BridgeIssues.Bridge893B, t));
    
                var t1 = 6;
                Bridge.Test.Assert.areEqual("TestB2, TestB3", System.Enum.toString(Bridge.ClientTest.BridgeIssues.Bridge893B, t1));
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge893A', {
        statics: {
            TestA1: 0,
            TestA2: 1
        },
        $enum: true
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge893B', {
        statics: {
            TestB1: 1,
            TestB2: 2,
            TestB3: 4
        },
        $enum: true,
        $flags: true
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge898', {
        statics: {
            testDecimalConversion: function () {
                var check = true;
                var test = System.Decimal(check ? 1 : 2);
    
                Bridge.Test.Assert.true$1(test.equalsT(System.Decimal(1)), "One True");
                Bridge.Test.Assert.areEqual$1("System.Decimal", Bridge.getTypeName(test), "Is decimal");
            },
            testDoubleConversion: function () {
                var check = true;
                var test = check ? 1 : 2;
    
                Bridge.Test.Assert.true$1(test === 1, "One True");
                Bridge.Test.Assert.areEqual$1("Number", Bridge.getTypeName(test), "Is number");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge905', {
        statics: {
            dayOfWeekFixed: function () {
                var dictionary = new System.Collections.Generic.Dictionary$2(System.DayOfWeek,System.Int32)();
                dictionary.add(0, 1);
    
                Bridge.Test.Assert.areEqual$1(1, dictionary.get(0), "1");
                Bridge.Test.Assert.areEqual$1("Saturday", System.Enum.toString(System.DayOfWeek, (6)), "Saturday");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge906', {
        statics: {
            myfunc: function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = System.Threading.Tasks.Task.delay(1);
                                        $step = 1;
                                        $task1.continueWith($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);
    
                $asyncBody();
                return $tcs.task;
            },
            testIfAsyncMethod: function () {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $jumpFromFinally, 
                    asyncComplete, 
                    myvar, 
                    sum, 
                    $t, 
                    d, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1,2], $step);
                            switch ($step) {
                                case 0: {
                                    asyncComplete = Bridge.Test.Assert.async();
                                    
                                    myvar = [new $_.$AnonymousType$15(1), new $_.$AnonymousType$15(2)];
                                    sum = 0;
                                    $task2 = Bridge.ClientTest.BridgeIssues.Bridge906.myfunc();
                                    $step = 1;
                                    $task2.continueWith($asyncBody, true);
                                    return;
                                }
                                case 1: {
                                    $task2.getAwaitedResult();
                                    
                                    $t = Bridge.getEnumerator(myvar);
                                    while ($t.moveNext()) {
                                        d = $t.getCurrent();
                                        if (d.value > 0) {
                                            sum = (sum + d.value) | 0;
                                        }
                                    }
                                    
                                    $task1 = Bridge.ClientTest.BridgeIssues.Bridge906.myfunc();
                                    $step = 2;
                                    $task1.continueWith($asyncBody, true);
                                    return;
                                }
                                case 2: {
                                    $task1.getAwaitedResult();
                                    
                                    Bridge.Test.Assert.areEqual(3, sum);
                                    
                                    asyncComplete();
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);
    
                $asyncBody();
            },
            testIfElseAsyncMethod: function () {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $jumpFromFinally, 
                    asyncComplete, 
                    myvar, 
                    sum, 
                    $t, 
                    d, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1,2], $step);
                            switch ($step) {
                                case 0: {
                                    asyncComplete = Bridge.Test.Assert.async();
                                    
                                    myvar = [new $_.$AnonymousType$15(-3), new $_.$AnonymousType$15(2)];
                                    sum = 0;
                                    $task2 = Bridge.ClientTest.BridgeIssues.Bridge906.myfunc();
                                    $step = 1;
                                    $task2.continueWith($asyncBody, true);
                                    return;
                                }
                                case 1: {
                                    $task2.getAwaitedResult();
                                    
                                    $t = Bridge.getEnumerator(myvar);
                                    while ($t.moveNext()) {
                                        d = $t.getCurrent();
                                        if (d.value > 0) {
                                            sum = (sum + d.value) | 0;
                                        }
                                        else  {
                                            sum = (sum - d.value) | 0;
                                        }
                                    }
                                    
                                    $task1 = Bridge.ClientTest.BridgeIssues.Bridge906.myfunc();
                                    $step = 2;
                                    $task1.continueWith($asyncBody, true);
                                    return;
                                }
                                case 2: {
                                    $task1.getAwaitedResult();
                                    
                                    Bridge.Test.Assert.areEqual(5, sum);
                                    
                                    asyncComplete();
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);
    
                $asyncBody();
            }
        }
    });
    
    Bridge.define("$AnonymousType$15", $_, {
        constructor: function (value) {
            this.value = value;
        },
        getValue : function () {
            return this.value;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$15)) {
                return false;
            }
            return Bridge.equals(this.value, o.value);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 381236456;
            hash = hash * 23 + (this.value == null ? 0 : Bridge.getHashCode(this.value));
            return hash;
        },
        toJSON: function () {
            return {
                value : this.value
            };
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge907', {
        statics: {
            testStringSpitWithNullParameterFixed: function () {
                var s = "Hello World!";
                var res = System.String.split(s, Bridge.cast(null, Array), null, 1);
    
                Bridge.Test.Assert.areEqual$1(2, res.length, "Bridge907 instance Length");
                Bridge.Test.Assert.areEqual$1("Hello", res[0], "Bridge907 instance [0]");
                Bridge.Test.Assert.areEqual$1("World!", res[1], "Bridge907 instance [1]");
    
                var s1 = "Hi Man!";
                var res1 = System.String.split(s1, Bridge.cast(null, Array), null, 1);
    
                Bridge.Test.Assert.areEqual$1(2, res1.length, "Bridge907 static Length");
                Bridge.Test.Assert.areEqual$1("Hi", res1[0], "Bridge907 static [0]");
                Bridge.Test.Assert.areEqual$1("Man!", res1[1], "Bridge907 static [1]");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge912', {
        statics: {
            myfunc: function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = System.Threading.Tasks.Task.delay(1);
                                        $step = 1;
                                        $task1.continueWith($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(1);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);
    
                $asyncBody();
                return $tcs.task;
            },
            testAsyncMethodInBlock: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    asyncComplete, 
                    result, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1], $step);
                            switch ($step) {
                                case 0: {
                                    asyncComplete = Bridge.Test.Assert.async();
                                    result = 0;
                                    $task1 = Bridge.ClientTest.BridgeIssues.Bridge912.myfunc();
                                    $step = 1;
                                    $task1.continueWith($asyncBody, true);
                                    return;
                                }
                                case 1: {
                                    $taskResult1 = $task1.getAwaitedResult();
                                    result = $taskResult1;
                                    
                                    Bridge.Test.Assert.areEqual(1, result);
                                    
                                    asyncComplete();
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);
    
                $asyncBody();
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge913', {
        statics: {
            testNullableDateTimeGreaterThanWorks: function () {
                var a = new Date();
                var b = null;
    
                Bridge.Test.Assert.false$1(Bridge.Date.gt(a, b), "Bridge913 gt");
                Bridge.Test.Assert.false$1(Bridge.Date.lt(a, b), "Bridge913 lt");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge918', {
        statics: {
            testDynamicAsyncResult: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    asyncComplete, 
                    a, 
                    result, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1], $step);
                            switch ($step) {
                                case 0: {
                                    asyncComplete = Bridge.Test.Assert.async();
                                    a = new Bridge.ClientTest.BridgeIssues.Bridge918();
                                    $task1 = a.test();
                                    $step = 1;
                                    $task1.continueWith($asyncBody, true);
                                    return;
                                }
                                case 1: {
                                    $taskResult1 = $task1.getAwaitedResult();
                                    result = Bridge.cast($taskResult1, System.Int32);
                                    
                                    Bridge.Test.Assert.areEqual(1, result);
                                    
                                    asyncComplete();
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);
    
                $asyncBody();
            }
        },
        test: function () {
            var $step = 0,
                $task1, 
                $jumpFromFinally, 
                $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                $returnValue, 
                $async_e, 
                $asyncBody = Bridge.fn.bind(this, function () {
                    try {
                        for (;;) {
                            $step = System.Array.min([0,1], $step);
                            switch ($step) {
                                case 0: {
                                    $task1 = System.Threading.Tasks.Task.delay(1);
                                    $step = 1;
                                    $task1.continueWith($asyncBody);
                                    return;
                                }
                                case 1: {
                                    $task1.getAwaitedResult();
                                    $tcs.setResult(1);
                                    return;
                                }
                                default: {
                                    $tcs.setResult(null);
                                    return;
                                }
                            }
                        }
                    } catch($async_e1) {
                        $async_e = System.Exception.create($async_e1);
                        $tcs.setException($async_e);
                    }
                }, arguments);
    
            $asyncBody();
            return $tcs.task;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge922', {
        statics: {
            testLinqDecimal: function () {
                var a = [System.Decimal(1.0), System.Decimal(2.0), System.Decimal(3.0)];
    
                Bridge.Test.Assert.true(System.Linq.Enumerable.from(a).average().equalsT(System.Decimal(2)));
                Bridge.Test.Assert.true(System.Linq.Enumerable.from(a).sum().equalsT(System.Decimal(6)));
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge928', {
        statics: {
            testAsyncMethod: function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $returnValue, 
                    done, 
                    result, 
                    $async_e, 
                    $e1, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.Assert.async();
                                        result = false;
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = System.Threading.Tasks.Task.delay(1);
                                        $step = 2;
                                        $task1.continueWith($asyncBody, true);
                                        return;
                                    }
                                    case 2: {
                                        $task1.getAwaitedResult();
                                        $step = 3;
                                        continue;
                                    }
                                    case 3: {
                                        try {
                                            throw new System.Exception("test");
                                        }
                                        catch ($e1) {
                                            $e1 = System.Exception.create($e1);
                                        }
                                        
                                        result = true;
                                        
                                        if ($jumpFromFinally > -1) {
                                            $step = $jumpFromFinally;
                                            $jumpFromFinally = null;
                                        } else if ($async_e) {
                                            throw $async_e;
                                            return;
                                        } else if (Bridge.isDefined($returnValue)) {
                                            $tcs.setResult($returnValue);
                                            return;
                                        }
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        
                                        Bridge.Test.Assert.true(result);
                                        
                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ($step >= 1 && $step <= 2){
    
                                $step = 3;
                                $asyncBody();
                                return;
                            }
                            throw $async_e;
                        }
                    }, arguments);
    
                $asyncBody();
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge929', {
        statics: {
            testAsyncException: function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $returnValue, 
                    done, 
                    e, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.Assert.async();
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = Bridge.ClientTest.BridgeIssues.Bridge929.test();
                                        $step = 2;
                                        $task1.continueWith($asyncBody, true);
                                        return;
                                    }
                                    case 2: {
                                        $task1.getAwaitedResult();
                                        Bridge.Test.Assert.fail$1("Exception should be rethrowed in catch block");
                                        $step = 4;
                                        continue;
                                    }
                                    case 3: {
                                        Bridge.Test.Assert.areEqual("test", e.getMessage());
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        
                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 1 && $step <= 2 ){
                                e = $async_e;
                                $step = 3;
                                $asyncBody();
                                return;
                            }
                            throw $async_e;
                        }
                    }, arguments);
    
                $asyncBody();
            },
            test: function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $e1, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([1,2,3,4], $step);
                                switch ($step) {
    
                                    case 1: {
                                        $task1 = System.Threading.Tasks.Task.delay(1);
                                        $step = 2;
                                        $task1.continueWith($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task1.getAwaitedResult();
                                        throw new System.Exception("test");
                                        $step = 4;
                                        continue;
                                    }
                                    case 3: {
                                        try {
                                            throw new System.Exception("catch");
                                        }
                                        catch ($e1) {
                                            $e1 = System.Exception.create($e1);
                                        }
                                        throw $async_e;
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 1 && $step <= 2 ){
                                $step = 3;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);
    
                $asyncBody();
                return $tcs.task;
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge930', {
        statics: {
            test: function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        $task1 = System.Threading.Tasks.Task.fromResult(1);
                                        $step = 1;
                                        $task1.continueWith($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        throw new System.Exception("test");
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);
    
                $asyncBody();
                return $tcs.task;
            },
            test1: function () {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $task3, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    res, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4,5], $step);
                                switch ($step) {
                                    case 0: {
                                        res = true;
                                        $task3 = System.Threading.Tasks.Task.delay(1);
                                        $step = 1;
                                        $task3.continueWith($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task3.getAwaitedResult();
                                        
                                        if (res) {
                                            $step = 2;
                                            continue;
                                        } 
                                        $step = 4;
                                        continue;
                                    }
                                    case 2: {
                                        $task2 = Bridge.ClientTest.BridgeIssues.Bridge930.test();
                                        $step = 3;
                                        $task2.continueWith($asyncBody);
                                        return;
                                    }
                                    case 3: {
                                        $task2.getAwaitedResult();
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        
                                        $task1 = System.Threading.Tasks.Task.delay(1);
                                        $step = 5;
                                        $task1.continueWith($asyncBody);
                                        return;
                                    }
                                    case 5: {
                                        $task1.getAwaitedResult();
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);
    
                $asyncBody();
                return $tcs.task;
            },
            testAsyncException: function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $returnValue, 
                    done, 
                    e, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1,2,3,4], $step);
                                switch ($step) {
                                    case 0: {
                                        done = Bridge.Test.Assert.async();
                                        $step = 1;
                                        continue;
                                    }
                                    case 1: {
                                        $task1 = Bridge.ClientTest.BridgeIssues.Bridge930.test1();
                                        $step = 2;
                                        $task1.continueWith($asyncBody, true);
                                        return;
                                    }
                                    case 2: {
                                        $task1.getAwaitedResult();
                                        Bridge.Test.Assert.fail$1("await should throw an exception");
                                        $step = 4;
                                        continue;
                                    }
                                    case 3: {
                                        Bridge.Test.Assert.areEqual("test", e.getMessage());
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        
                                        done();
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 1 && $step <= 2 ){
                                e = $async_e;
                                $step = 3;
                                $asyncBody();
                                return;
                            }
                            throw $async_e;
                        }
                    }, arguments);
    
                $asyncBody();
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge933', {
        statics: {
            isRunning: false,
            testBooleanInIfStatement: function () {
                if (Bridge.ClientTest.BridgeIssues.Bridge933.isRunning) {
                    Bridge.Test.Assert.fail$1("IsRunning must be false");
                }
    
                Bridge.Test.Assert.false(Bridge.ClientTest.BridgeIssues.Bridge933.isRunning);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge952', {
        statics: {
            testDoubleMinValue: function () {
                Bridge.Test.Assert.areEqual$1(-1.7976931348623157E+308, System.Double.min, "Compare value");
                Bridge.Test.Assert.areEqual$1("-1.79769313486232E+308", System.Double.format(System.Double.min, 'G'), "Compare by ToString()");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge968', {
        statics: {
            testDecimalDoesNotParseIncorrectValue: function () {
                var d = { };
                var b = System.Decimal.tryParse("123e", null, d);
    
                Bridge.Test.Assert.false(b);
            },
            testDecimalParsesCorrectValues: function () {
                var d1 = System.Decimal("123e1");
                Bridge.Test.Assert.areEqual$1(System.Decimal(1230.0), d1, "123e1");
    
                var d2 = System.Decimal("123e+1");
                Bridge.Test.Assert.areEqual$1(System.Decimal(1230.0), d2, "123e+1");
    
                var d3 = System.Decimal("123e-1");
                Bridge.Test.Assert.areEqual$1(System.Decimal(12.3), d3, "123e-1");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge975', {
        statics: {
            testCastToLongWorksForBigNumberInIE: function () {
                var i = System.Int64([-1,2097151]);
    
                Bridge.Test.Assert.areEqual("9007199254740991", i.toString());
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge989', {
        statics: {
            dateTimeToISOStringWorks: function () {
                var d1 = new Date(2011, 10 - 1, 5, 14, 48);
                var d2 = Bridge.Date.toUTC(d1);
    
                // This is required to change d1 to UTC without changing time
                d1 = new Date(d1.getFullYear(), d1.getMonth() + (((d1.getMonth() + 1) - (d2.getMonth() + 1)) | 0), d1.getDate(), d1.getHours(), d1.getMinutes(), d1.getSeconds(), d1.getMilliseconds());
                d1 = new Date(d1.valueOf() + Math.round((((d1.getDate() - d2.getDate()) | 0)) * 864e5));
                d1 = new Date(d1.valueOf() + Math.round((((d1.getHours() - d2.getHours()) | 0)) * 36e5));
                d1 = new Date(d1.valueOf() + Math.round((((d1.getMinutes() - d2.getMinutes()) | 0)) * 6e4));
    
                Bridge.Test.Assert.areEqual("2011-10-05T14:48:00.000Z", d1.toISOString());
            },
            dateToISOStringWorks: function () {
                var d1 = new Date("05 October 2011 14:48 UTC");
    
                Bridge.Test.Assert.areEqual("2011-10-05T14:48:00.000Z", d1.toISOString());
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge991', {
        statics: {
            config: {
                properties: {
                    Prop: 0
                }
            },
            testMultiplyAssignment: function () {
                var dict = new System.Collections.Generic.Dictionary$2(System.Int32,System.Int32)();
                var i = 0;
    
                dict.set(0, (i = 1));
                Bridge.Test.Assert.areEqual(dict.get(0), 1);
                Bridge.Test.Assert.areEqual(i, 1);
    
                i = (dict.set(0, 2), 2);
                Bridge.Test.Assert.areEqual(dict.get(0), 2);
                Bridge.Test.Assert.areEqual(i, 2);
    
                dict.set(0, (Bridge.ClientTest.BridgeIssues.Bridge991.setProp(3), 3));
                Bridge.Test.Assert.areEqual(dict.get(0), 3);
                Bridge.Test.Assert.areEqual(Bridge.ClientTest.BridgeIssues.Bridge991.getProp(), 3);
    
                Bridge.ClientTest.BridgeIssues.Bridge991.setProp((dict.set(0, 4), 4));
                Bridge.Test.Assert.areEqual(dict.get(0), 4);
                Bridge.Test.Assert.areEqual(Bridge.ClientTest.BridgeIssues.Bridge991.getProp(), 4);
    
                dict.set(0, (Bridge.ClientTest.BridgeIssues.Bridge991.setProp(5), 5));
                Bridge.Test.Assert.areEqual(dict.get(0), 5);
                Bridge.Test.Assert.areEqual(Bridge.ClientTest.BridgeIssues.Bridge991.getProp(), 5);
    
                Bridge.ClientTest.BridgeIssues.Bridge991.setProp((dict.set(0, 6), 6));
                Bridge.Test.Assert.areEqual(dict.get(0), 6);
                Bridge.Test.Assert.areEqual(Bridge.ClientTest.BridgeIssues.Bridge991.getProp(), 6);
    
                dict.set(0, (dict.set(1, 7), 7));
                Bridge.Test.Assert.areEqual(dict.get(0), 7);
                Bridge.Test.Assert.areEqual(dict.get(1), 7);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge997', {
        statics: {
            testConvertAllForIntList: function () {
                var l = Bridge.merge(new System.Collections.Generic.List$1(System.Int32)(), [
                    [1],
                    [2],
                    [3]
                ] );
    
                Bridge.Test.Assert.areDeepEqual(["1", "2", "3"], l.convertAll(String, $_.Bridge.ClientTest.BridgeIssues.Bridge997.f1).toArray());
            },
            testConvertAllForNullConverter: function () {
                var l = Bridge.merge(new System.Collections.Generic.List$1(System.Int32)(), [
                    [1],
                    [2],
                    [3]
                ] );
    
                var converter = null;
    
                Bridge.Test.Assert.throws$5(function () {
                    l.convertAll(String, converter);
                }, "Null converter throws exception");
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.BridgeIssues.Bridge997", $_);
    
    Bridge.apply($_.Bridge.ClientTest.BridgeIssues.Bridge997, {
        f1: function (x) {
            return x.toString();
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge999', {
        statics: {
            testNestedLambdasToLifting: function () {
                var offset = 1;
                var f1 = $_.Bridge.ClientTest.BridgeIssues.Bridge999.f2;
    
                var f2 = function () {
                    return Bridge.toArray(System.Linq.Enumerable.from([4, 5, 6]).select(function (value) {
                        return ((value + offset) | 0);
                    })).join(", ");
                };
    
                var f3 = function () {
                    var f4 = function () {
                        return Bridge.toArray(System.Linq.Enumerable.from([7, 8, 9]).select(function (value) {
                            return ((value + offset) | 0);
                        })).join(", ");
                    };
    
                    return f4();
                };
    
                var f5 = $_.Bridge.ClientTest.BridgeIssues.Bridge999.f3;
    
                var scope = $_.Bridge.ClientTest.BridgeIssues.Bridge999;
    
                Bridge.Test.Assert.notNull$1(scope.f1, "scope.f1 should exists");
                Bridge.Test.Assert.notNull$1(scope.f2, "scope.f2 should exists");
                Bridge.Test.Assert.notNull$1(scope.f3, "scope.f3 should exists");
                Bridge.Test.Assert.null$1(scope.f4, "scope.f4 should be null");
                Bridge.Test.Assert.null$1(scope.f5, "scope.f5 should be null");
                Bridge.Test.Assert.areEqual$1(scope.f1(1), 1, "scope.f1(1) should be 1");
                Bridge.Test.Assert.areEqual$1(scope.f2(), "1, 2, 3", "scope.f2() should be 1, 2, 3");
                Bridge.Test.Assert.areEqual$1(scope.f3(), "6, 7, 8", "scope.f3() should be 6, 7, 8");
                Bridge.Test.Assert.areEqual$1(f1(), "1, 2, 3", "f1() should be 1, 2, 3");
                Bridge.Test.Assert.areEqual$1(f2(), "5, 6, 7", "f2() should be 5, 6, 7");
                Bridge.Test.Assert.areEqual$1(f3(), "8, 9, 10", "f3() should be 8, 9, 10");
                Bridge.Test.Assert.areEqual$1(f5(), "6, 7, 8", "f5() should be 6, 7, 8");
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.BridgeIssues.Bridge999", $_);
    
    Bridge.apply($_.Bridge.ClientTest.BridgeIssues.Bridge999, {
        f1: function (value) {
            return value;
        },
        f2: function () {
            return Bridge.toArray(System.Linq.Enumerable.from([1, 2, 3]).select($_.Bridge.ClientTest.BridgeIssues.Bridge999.f1)).join(", ");
        },
        f3: function () {
            var offset2 = 2;
            return Bridge.toArray(System.Linq.Enumerable.from([4, 5, 6]).select(function (value) {
                return ((value + offset2) | 0);
            })).join(", ");
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge999_1', {
        statics: {
            testNestedLambdasToLiftingInForeach: function () {
                var one = System.Linq.Enumerable.from((Bridge.merge(new System.Collections.Generic.List$1(System.Int32)(), [
                    [1]
                ] ))).select($_.Bridge.ClientTest.BridgeIssues.Bridge999_1.f1);
    
                var sum = 0;
    
                one.forEach(function (el) {
                    var list = System.Linq.Enumerable.from((Bridge.merge(new System.Collections.Generic.List$1(System.Int32)(), [
                        [3],
                        [5]
                    ] ))).select($_.Bridge.ClientTest.BridgeIssues.Bridge999_1.f1);
    
                    list.forEach(function (el2) {
                        sum = (sum + el2) | 0;
                    });
                });
    
                Bridge.Test.Assert.areEqual(8, sum);
    
                var scope = $_.Bridge.ClientTest.BridgeIssues.Bridge999_1;
    
                Bridge.Test.Assert.notNull$1(scope.f1, "scope.f1 should exists");
                Bridge.Test.Assert.null$1(scope.f2, "scope.f2 should be null");
                Bridge.Test.Assert.null$1(scope.f3, "scope.f3 should be null");
                Bridge.Test.Assert.areEqual$1(scope.f1(1), 1, "scope.f1(1) should be 1");
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.BridgeIssues.Bridge999_1", $_);
    
    Bridge.apply($_.Bridge.ClientTest.BridgeIssues.Bridge999_1, {
        f1: function (x) {
            return x;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.N1122', {
        statics: {
            assertNumber: function (expected, actual, message) {
                if (message === void 0) { message = null; }
                var a = actual != null ? actual.toString() : "null";
                var e = expected != null ? expected.toString() : "null";
    
                Bridge.Test.Assert.areEqual$1(e, a, message);
            },
            testClippingInDefaultOverflowMode: function () {
                var x = System.Double.max;
    
                var y1 = Bridge.Int.clip32(Math.floor(x / 0.2));
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(-2147483648, y1, "int");
    
                var y2 = Bridge.Int.clipu32(Math.floor(x / 0.2));
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(0, y2, "uint");
    
                var z1 = Bridge.Int.clip64(Math.floor(x / 0.2));
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(System.Int64.MinValue, z1, "long");
    
                var z2 = Bridge.Int.clipu64(Math.floor(x / 0.2));
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(System.UInt64.MinValue, z2, "ulong");
            },
            testIntegerDivisionInDefaultMode: function () {
                var x = 1.1;
    
                var y1 = Bridge.Int.clip32(1 / x);
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(0, y1, "int");
    
                var y2 = Bridge.Int.clipu32(1 / x);
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(0, y2, "uint");
    
                var z1 = Bridge.Int.clip64(1 / x);
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(System.Int64(0), z1, "long");
    
                var z2 = Bridge.Int.clipu64(1 / x);
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(System.UInt64(0), z2, "ulong");
            },
            testInfinityCastDefaultOverflowMode: function () {
                var pi = Number.POSITIVE_INFINITY;
    
                var y1 = Bridge.Int.clipu8(pi);
                var y2 = Bridge.Int.clip8(pi);
                var y3 = Bridge.Int.clip16(pi);
                var y4 = Bridge.Int.clipu16(pi);
                var y5 = Bridge.Int.clip32(pi);
                var y6 = Bridge.Int.clipu32(pi);
                var y7 = Bridge.Int.clip64(pi);
                var y8 = Bridge.Int.clipu64(pi);
    
                // https://msdn.microsoft.com/en-us/library/aa691289(v=vs.71).aspx
                // If the value of the operand is NaN or infinite, the result of the conversion is an unspecified value of the destination type.
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(0, y1, "PositiveInfinity -> byte");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(-128, y2, "PositiveInfinity -> sbyte");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(-32768, y3, "PositiveInfinity -> short");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(0, y4, "PositiveInfinity -> ushort");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(-2147483648, y5, "PositiveInfinity -> int");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(0, y6, "PositiveInfinity -> uint");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(System.Int64.MinValue, y7, "PositiveInfinity -> long");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(System.UInt64.MinValue, y8, "PositiveInfinity -> ulong");
    
                var ni = Number.NEGATIVE_INFINITY;
    
                var z1 = Bridge.Int.clipu8(ni);
                var z2 = Bridge.Int.clip8(ni);
                var z3 = Bridge.Int.clip16(ni);
                var z4 = Bridge.Int.clipu16(ni);
                var z5 = Bridge.Int.clip32(ni);
                var z6 = Bridge.Int.clipu32(ni);
                var z7 = Bridge.Int.clip64(ni);
                var z8 = Bridge.Int.clipu64(ni);
    
                // https://msdn.microsoft.com/en-us/library/aa691289(v=vs.71).aspx
                // If the value of the operand is NaN or infinite, the result of the conversion is an unspecified value of the destination type.
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(0, z1, "NegativeInfinity -> byte");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(-128, z2, "NegativeInfinity -> sbyte");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(-32768, z3, "NegativeInfinity -> short");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(0, z4, "NegativeInfinity -> ushort");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(-2147483648, z5, "NegativeInfinity -> int");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(0, z6, "NegativeInfinity -> uint");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(System.Int64.MinValue, z7, "NegativeInfinity -> long");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(System.UInt64.MinValue, z8, "NegativeInfinity -> ulong");
            },
            testInfinityCastWithNullable1DefaultOverflowMode: function () {
                var pi = Number.POSITIVE_INFINITY;
    
                var y1 = Bridge.Int.clipu8(pi);
                var y2 = Bridge.Int.clip8(pi);
                var y3 = Bridge.Int.clip16(pi);
                var y4 = Bridge.Int.clipu16(pi);
                var y5 = Bridge.Int.clip32(pi);
                var y6 = Bridge.Int.clipu32(pi);
                var y7 = Bridge.Int.clip64(pi);
                var y8 = Bridge.Int.clipu64(pi);
    
                // https://msdn.microsoft.com/en-us/library/aa691289(v=vs.71).aspx
                // If the value of the operand is NaN or infinite, the result of the conversion is an unspecified value of the destination type.
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(0, y1, "PositiveInfinity -> byte");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(-128, y2, "PositiveInfinity -> sbyte");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(-32768, y3, "PositiveInfinity -> short");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(0, y4, "PositiveInfinity -> ushort");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(-2147483648, y5, "PositiveInfinity -> int");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(0, y6, "PositiveInfinity -> uint");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(System.Int64.MinValue, y7, "PositiveInfinity -> long");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(System.UInt64.MinValue, y8, "PositiveInfinity -> ulong");
    
                var ni = Number.NEGATIVE_INFINITY;
    
                var z1 = Bridge.Int.clipu8(ni);
                var z2 = Bridge.Int.clip8(ni);
                var z3 = Bridge.Int.clip16(ni);
                var z4 = Bridge.Int.clipu16(ni);
                var z5 = Bridge.Int.clip32(ni);
                var z6 = Bridge.Int.clipu32(ni);
                var z7 = Bridge.Int.clip64(ni);
                var z8 = Bridge.Int.clipu64(ni);
    
                // https://msdn.microsoft.com/en-us/library/aa691289(v=vs.71).aspx
                // If the value of the operand is NaN or infinite, the result of the conversion is an unspecified value of the destination type.
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(0, z1, "NegativeInfinity -> byte");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(-128, z2, "NegativeInfinity -> sbyte");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(-32768, z3, "NegativeInfinity -> short");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(0, z4, "NegativeInfinity -> ushort");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(-2147483648, z5, "NegativeInfinity -> int");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(0, z6, "NegativeInfinity -> uint");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(System.Int64.MinValue, z7, "NegativeInfinity -> long");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(System.UInt64.MinValue, z8, "NegativeInfinity -> ulong");
            },
            testInfinityCastWithNullable2DefaultOverflowMode: function () {
                var pi = Number.POSITIVE_INFINITY;
    
                var y1 = Bridge.Int.clipu8(pi);
                var y2 = Bridge.Int.clip8(pi);
                var y3 = Bridge.Int.clip16(pi);
                var y4 = Bridge.Int.clipu16(pi);
                var y5 = Bridge.Int.clip32(pi);
                var y6 = Bridge.Int.clipu32(pi);
                var y7 = Bridge.Int.clip64(pi);
                var y8 = Bridge.Int.clipu64(pi);
    
                // https://msdn.microsoft.com/en-us/library/aa691289(v=vs.71).aspx
                // If the value of the operand is NaN or infinite, the result of the conversion is an unspecified value of the destination type.
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(0, System.Nullable.getValue(y1), "PositiveInfinity -> byte");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(-128, System.Nullable.getValue(y2), "PositiveInfinity -> sbyte");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(-32768, System.Nullable.getValue(y3), "PositiveInfinity -> short");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(0, System.Nullable.getValue(y4), "PositiveInfinity -> ushort");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(-2147483648, System.Nullable.getValue(y5), "PositiveInfinity -> int");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(0, System.Nullable.getValue(y6), "PositiveInfinity -> uint");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(System.Int64.MinValue, System.Nullable.getValue(y7), "PositiveInfinity -> long");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(System.UInt64.MinValue, System.Nullable.getValue(y8), "PositiveInfinity -> ulong");
    
                var ni = Number.NEGATIVE_INFINITY;
    
                var z1 = Bridge.Int.clipu8(ni);
                var z2 = Bridge.Int.clip8(ni);
                var z3 = Bridge.Int.clip16(ni);
                var z4 = Bridge.Int.clipu16(ni);
                var z5 = Bridge.Int.clip32(ni);
                var z6 = Bridge.Int.clipu32(ni);
                var z7 = Bridge.Int.clip64(ni);
                var z8 = Bridge.Int.clipu64(ni);
    
                // https://msdn.microsoft.com/en-us/library/aa691289(v=vs.71).aspx
                // If the value of the operand is NaN or infinite, the result of the conversion is an unspecified value of the destination type.
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(0, System.Nullable.getValue(z1), "NegativeInfinity -> byte");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(-128, System.Nullable.getValue(z2), "NegativeInfinity -> sbyte");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(-32768, System.Nullable.getValue(z3), "NegativeInfinity -> short");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(0, System.Nullable.getValue(z4), "NegativeInfinity -> ushort");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(-2147483648, System.Nullable.getValue(z5), "NegativeInfinity -> int");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(0, System.Nullable.getValue(z6), "NegativeInfinity -> uint");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(System.Int64.MinValue, System.Nullable.getValue(z7), "NegativeInfinity -> long");
                Bridge.ClientTest.BridgeIssues.N1122.assertNumber(System.UInt64.MinValue, System.Nullable.getValue(z8), "NegativeInfinity -> ulong");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Person383', {
        config: {
            properties: {
                Name: null
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.TestBridgeIssues', {
        statics: {
            n169: function () {
                // TEST
                Bridge.ClientTest.BridgeIssues.Bridge169.m1();
                Bridge.Test.Assert.areEqual$1(1, Bridge.ClientTest.BridgeIssues.Bridge169.number, "M1()");
    
                // TEST
                Bridge.ClientTest.BridgeIssues.Bridge169.m2();
                Bridge.Test.Assert.areEqual$1(2, Bridge.ClientTest.BridgeIssues.Bridge169.number, "M2()");
            },
            n240: function () {
                // TEST
                var b = new Bridge.ClientTest.BridgeIssues.Bridge240B();
                Bridge.Test.Assert.true$1(b != null, "Instance of B created");
                Bridge.Test.Assert.areEqual$1("B", b.getString(), "b.GetString() = 'B'");
                Bridge.Test.Assert.areEqual$1(1, b.getData(), "b.Data = 1");
            },
            n264: function () {
                // TEST
                var oldHash = Bridge.global.location.hash;
                Bridge.global.location.hash = "#new-hash";
                Bridge.Test.Assert.areEqual$1("#new-hash", Bridge.global.location.hash, "Setting Location.Hash works");
                Bridge.global.location.hash = oldHash; // to clean up the url
            },
            n266: function () {
                // TEST
                Bridge.Test.Assert.true$1(Bridge.ClientTest.BridgeIssues.Bridge266A.test() != null, "new object() call transpiled");
            },
            n272: function () {
                // TEST
                Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.BridgeIssues.Bridge272.MyEnum.Abc, Bridge.ClientTest.BridgeIssues.Bridge272.test(1), "Casted MyEnum.Abc");
                Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.BridgeIssues.Bridge272.MyEnum.Ghi, Bridge.ClientTest.BridgeIssues.Bridge272.test(3), "Casted MyEnum.Ghi");
                Bridge.Test.Assert.areEqual$1(4, Bridge.ClientTest.BridgeIssues.Bridge272.test(4), "Casted MyEnum.Abc");
            },
            n273: function () {
                // TEST
                var items = Bridge.merge(new System.Collections.Generic.List$1(System.Int32)(), [
                    [0],
                    [1],
                    [2],
                    [3],
                    [4]
                ] );
    
                var r = items.slice(-1).toArray();
                Bridge.Test.Assert.areEqual$1([4], r, "Slices start = -1");
    
                r = items.slice(1).toArray();
                Bridge.Test.Assert.areEqual$1([1, 2, 3, 4], r, "Slices start = 1");
    
                r = items.slice(-3, 4).toArray();
                Bridge.Test.Assert.areEqual$1([2, 3], r, "Slices start = -3, end = 3");
    
                r = items.slice(1, 3).toArray();
                Bridge.Test.Assert.areEqual$1([1, 2], r, "Slices start = 1, end = 2");
            },
            n277: function () {
                Bridge.Test.Assert.areEqual$1(0, Bridge.ClientTest.BridgeIssues.Bridge277.Int, "Enum member with reserved name initialized");
            },
            n294: function () {
                var c = new Bridge.ClientTest.BridgeIssues.Bridge294("Vlad");
    
                Bridge.Test.Assert.areEqual$1("Vlad", c.getName(), "Class method works");
                Bridge.Test.Assert.areEqual$1("Vlad", c.getNameThroughGeneric(System.Int32), "Generic class method works");
            },
            n304: function () {
                var c = new Bridge.ClientTest.BridgeIssues.Bridge304();
                var i = c;
    
                i.f("1");
                Bridge.Test.Assert.areEqual$1("1", c.getX(), "Interface method works");
    
                c.f$1();
                Bridge.Test.Assert.areEqual$1("void F()", c.getX(), "Class method works");
            },
            n305: function () {
                var $t;
                var c = new Bridge.ClientTest.BridgeIssues.Bridge305(["1", "2", "3"]);
    
                var result = "";
                $t = Bridge.getEnumerator(c);
                while ($t.moveNext()) {
                    var item = $t.getCurrent();
                    result = result + item;
                }
    
                Bridge.Test.Assert.areEqual$1("123", result, "IEnumerator works");
            },
            n306: function () {
                var b = Bridge.ClientTest.BridgeIssues.Bridge306B.new(Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge306B.Props(), {
                    name: "B"
                } ));
                Bridge.Test.Assert.areEqual$1("Bridge.ClientTest.BridgeIssues.Bridge306B.Props:B", b, "Bridge306B.New() works");
    
                var a = Bridge.ClientTest.BridgeIssues.Bridge306A.new(Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge306A.Props(), {
                    name: "A"
                } ));
                Bridge.Test.Assert.areEqual$1("Bridge.ClientTest.BridgeIssues.Bridge306A.Props:A", a, "Bridge306A.New() works");
            },
            n329: function () {
                var d1 = { };
                var b1 = Bridge.Date.tryParse("2001-01-01", null, d1, true);
                Bridge.Test.Assert.true$1(b1, "TryParse parsed '2001 - 01 - 01'");
                Bridge.Test.Assert.areEqual$1(2001, d1.v.getUTCFullYear(), "TryParse works Year");
                Bridge.Test.Assert.areEqual$1(1, (d1.v.getUTCMonth() + 1), "TryParse works Month");
                Bridge.Test.Assert.areEqual$1(1, d1.v.getUTCDay(), "TryParse works Day");
    
                var d2 = Bridge.Date.parse("2001-01-01", null, true);
                Bridge.Test.Assert.areEqual$1(Bridge.Date.format(d1.v), Bridge.Date.format(d2), "TryParse And Parse give the same result");
            },
            n335: function () {
                var l = new System.Collections.Generic.List$1(String)(["1", "2", "3", "1"]);
                Bridge.Test.Assert.areEqual$1(3, l.indexOf("1", 2), "IndexOf with startIndex used");
            },
            n336: function () {
                var l = new System.Collections.Generic.List$1(String)(["4"]);
    
                l.insertRange(0, ["1", "2"]);
                Bridge.Test.Assert.areEqual$1(["1", "2", "4"], l.toArray(), "InsertRange works (1)");
    
                l.insertRange(2, ["3"]);
                Bridge.Test.Assert.areEqual$1(["1", "2", "3", "4"], l.toArray(), "InsertRange works (2)");
            },
            n337: function () {
                var l = new System.Collections.Generic.List$1(String)(["1", "2"]);
    
                var b = l.remove("7");
                Bridge.Test.Assert.false$1(b, "Remove() not existing element returns false");
                Bridge.Test.Assert.areEqual$1(["1", "2"], l.toArray(), "Remove() not existing does not change the List");
    
                b = l.remove("2");
                Bridge.Test.Assert.true$1(b, "Remove() existing element returns true");
                Bridge.Test.Assert.areEqual$1(["1"], l.toArray(), "Remove() not existing changes the List");
            },
            n338: function () {
                var l = new System.Collections.Generic.List$1(String)(1000);
    
                var b = Bridge.is(l, System.Collections.Generic.IList$1(String));
    
                Bridge.Test.Assert.true$1(b, "List<T> declares it implemets IList<T>");
            },
            n339: function () {
                var c = new System.Collections.Generic.Comparer$1(System.Int32)(System.Collections.Generic.Comparer$1.$default.fn);
    
                Bridge.Test.Assert.true$1(c != null, "Comparer<int>.Default works");
                Bridge.Test.Assert.true$1(Bridge.is(c, System.Collections.Generic.IComparer$1(System.Int32)), "Comparer<T> declares it implemets IComparer<T>");
            },
            n340: function () {
                var c = new System.Collections.Generic.EqualityComparer$1(System.Int32)();
    
                Bridge.Test.Assert.true$1(c != null, "EqualityComparer<int>.Default works");
                Bridge.Test.Assert.true$1(c.equals2(10, 10), "EqualityComparer<int>.Default.Equals(10, 10) works");
                Bridge.Test.Assert.false$1(c.equals2(10, 11), "EqualityComparer<int>.Default.Equals(10, 11) works");
    
                var s = new System.Collections.Generic.EqualityComparer$1(String)();
                Bridge.Test.Assert.true$1(s != null, "EqualityComparer<string>.Default works");
                Bridge.Test.Assert.true$1(s.equals2("a", "a"), "EqualityComparer<string>.Default.Equals(\"a\", \"a\") works");
                Bridge.Test.Assert.false$1(s.equals2("a", "b"), "EqualityComparer<string>.Default.Equals(\"a\", \"b\") works");
            },
            n341: function () {
                var o11 = { };
                var o12 = { };
                var b1 = new System.Collections.Generic.EqualityComparer$1(Object)().equals2(o11, o12);
                Bridge.Test.Assert.false$1(b1, "EqualityComparer<object>.Default.Equals(o11, o12) works");
    
                var o21 = new $_.$AnonymousType$16(7);
                var o22 = new $_.$AnonymousType$16(7);
                var b2 = new System.Collections.Generic.EqualityComparer$1(Object)().equals2(o21, o22);
                Bridge.Test.Assert.true$1(b2, "EqualityComparer<object>.Default.Equals(o21, o22) works");
    
                var o31 = Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge341A(), {
                    setStr: "String"
                } );
                var o32 = Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge341A(), {
                    setStr: "String"
                } );
                var b3 = new System.Collections.Generic.EqualityComparer$1(Object)().equals2(o31, o32);
                Bridge.Test.Assert.false$1(b3, "EqualityComparer<object>.Default.Equals(o31, o32) works");
    
                var o41 = Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge341B(), {
                    setStr: "String"
                } );
                var o42 = Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge341B(), {
                    setStr: "String"
                } );
                var b4 = new System.Collections.Generic.EqualityComparer$1(Object)().equals2(o41, o42);
                Bridge.Test.Assert.true$1(b4, "EqualityComparer<object>.Default.Equals(o41, o42) works");
            },
            n342: function () {
                var dictionary = new Bridge.ClientTest.BridgeIssues.Bridge342("constructor$1", Bridge.merge(new System.Collections.Generic.Dictionary$2(System.Int32,String)(), [
                    [3, "b"],
                    [6, "z"],
                    [9, "x"]
                ] ));
    
                var interfacedDictionary = Bridge.cast(dictionary, System.Collections.Generic.IDictionary$2(System.Int32,String));
    
                Bridge.Test.Assert.areEqual$1("z", interfacedDictionary.getItem(6), "IDictionary getter works");
                Bridge.Test.Assert.throws$5(function () {
                    var r = interfacedDictionary.getItem(1);
                }, "IDictionary getter throws exception when incorrect key used");
            },
            n349: function () {
                var date = { };
                var culture = new System.Globalization.CultureInfo("ru-RU");
    
                Bridge.Test.Assert.true$1(culture != null, "Created CultureInfo(\"ru-RU\")");
    
                var parsed = Bridge.Date.tryParse("22.08.2015", culture, date);
                Bridge.Test.Assert.true$1(parsed, "Parsed \"22.08.2015\"");
                Bridge.Test.Assert.areEqual$1(2015, date.v.getFullYear(), "TryParse works Year");
                Bridge.Test.Assert.areEqual$1(8, (date.v.getMonth() + 1), "TryParse works Month");
                Bridge.Test.Assert.areEqual$1(22, date.v.getDate(), "TryParse works Day");
            },
            n377: function () {
                var objectLiteralInstance = { field1: "field1 value", field3: 7 };
    
                Bridge.Test.Assert.areEqual$1(true, objectLiteralInstance.hasOwnProperty("field1"), "ObjectLiteral's field with an explicit value is emitted");
                Bridge.Test.Assert.areEqual$1("field1 value", objectLiteralInstance.field1, "ObjectLiteral's field with an explicit value is emitted correctly");
    
                Bridge.Test.Assert.areEqual$1(true, objectLiteralInstance.hasOwnProperty("field3"), "ObjectLiteral's field with an explicit value is emitted");
                Bridge.Test.Assert.areEqual$1(7, objectLiteralInstance.field3, "ObjectLiteral's field with an explicit value is emitted correctly");
    
                Bridge.Test.Assert.areEqual$1(false, objectLiteralInstance.hasOwnProperty("field2"), "ObjectLiteral's field without an explicit value is not emitted");
                Bridge.Test.Assert.areEqual$1(false, objectLiteralInstance.hasOwnProperty("field4"), "ObjectLiteral's field without an explicit value is not emitted");
            },
            n383: function () {
                var person1 = Bridge.merge(new Bridge.ClientTest.BridgeIssues.Person383(), {
                    setName: "Johnny"
                } );
                var msg1 = Bridge.ClientTest.BridgeIssues.Bridge383.doSomething(person1);
    
                Bridge.Test.Assert.areEqual$1("Johnny", msg1, "Instance extention Johnny");
    
                var person2 = Bridge.merge(new Bridge.ClientTest.BridgeIssues.Person383(), {
                    setName: "Madison"
                } );
                var msg2 = Bridge.ClientTest.BridgeIssues.Bridge383.doSomething(person2);
    
                Bridge.Test.Assert.areEqual$1("Madison", msg2, "Static extention Madison");
            },
            n393: function () {
                var a = "testa";
                var b = "testa";
    
                var result = System.String.equals(a, b, 3);
    
                Bridge.Test.Assert.true$1(result, "testa testa StringComparison.InvariantCultureIgnoreCase");
    
                var a1 = "testa";
                var b1 = "testb";
    
                var result1 = System.String.equals(a1, b1, 3);
    
                Bridge.Test.Assert.false$1(result1, "testa testb StringComparison.InvariantCultureIgnoreCase");
            },
            n395: function () {
                var $t;
                var _dictOfTests = new System.Collections.Generic.Dictionary$2(String,Bridge.ClientTest.BridgeIssues.Bridge395)();
    
                var tests = [Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge395(), {
                    setId: "a"
                } ), Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge395(), {
                    setId: "b"
                } )];
    
                $t = Bridge.getEnumerator(tests);
                while ($t.moveNext()) {
                    var item = $t.getCurrent();
                    if (!_dictOfTests.containsKey(item.getId())) {
                        _dictOfTests.set(item.getId(), item);
                    }
                }
    
                Bridge.Test.Assert.areEqual$1(2, _dictOfTests.getCount(), "All items added");
                Bridge.Test.Assert.areEqual$1("a", _dictOfTests.get("a").getId(), "First element is a");
                Bridge.Test.Assert.areEqual$1("b", _dictOfTests.get("b").getId(), "Second element is b");
            },
            n406: function () {
                var TESTA = "TESTA";
                var TESTB = "TESTB";
                var TESTC = "TESTC";
                var TESTD = "TESTD";
                var TESTE = "TESTE";
                var TESTF = "TESTF";
                var TESTG = "TESTG";
    
                var test = TESTD;
                var result = null;
                switch (test) {
                    case TESTA: 
                        result = TESTA;
                        break;
                    case TESTB: 
                        result = TESTB;
                        break;
                    case TESTC: 
                        result = TESTC;
                        break;
                    case TESTD: 
                        result = TESTD;
                        break;
                    case TESTE: 
                        result = TESTE;
                        break;
                    case TESTF: 
                        result = TESTF;
                        break;
                    case TESTG: 
                        result = TESTG;
                        break;
                }
    
                Bridge.Test.Assert.areEqual$1("TESTD", result, "TESTD");
            },
            n407: function () {
                var vec = Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge407(), {
                    setA: 1
                } );
                vec = Bridge.ClientTest.BridgeIssues.Bridge407.op_Addition(vec.$clone(), Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge407(), {
                    setA: 2
                } ));
    
                Bridge.Test.Assert.areEqual$1(3, vec.getA(), "Vec.A = 3");
    
                var a = 2;
                a = (a + 5) | 0;
                Bridge.Test.Assert.areEqual$1(7, a, "a = 7");
            },
            n409: function () {
                var a = System.Decimal.round(System.Decimal(3.5), 6);
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(a, "4", "Math.Round(3.5M)");
    
                var b = System.Decimal.round(System.Decimal(4.5), 6);
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(b, "4", "Math.Round(4.5M)");
            },
            ensureNumber: function (actual, expected, message) {
                Bridge.Test.Assert.areEqual$1(expected, actual.toString(), message);
            },
            assertAlmostEqual: function (actual, expected, message) {
                var diff = expected - actual;
                if (diff < 0) {
                    diff = -diff;
                }
    
                Bridge.Test.Assert.true$1(diff < 1E-08, message + "actual: " + actual + "expeted:" + expected);
            },
            n410: function () {
                // Decimal consts
                var DecimalZero = System.Decimal.Zero;
                var DecimalOne = System.Decimal.One;
                var DecimalMinusOne = System.Decimal.MinusOne;
                var DecimalMaxValue = System.Decimal.MaxValue;
                var DecimalMinValue = System.Decimal.MinValue;
    
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(DecimalZero, "0", "DecimalZero");
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(DecimalOne, "1", "DecimalOne");
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(DecimalMinusOne, "-1", "DecimalMinusOne");
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(DecimalMaxValue, "7.9228162514264337593543950335e+28", "DecimalMaxValue");
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(DecimalMinValue, "-7.9228162514264337593543950335e+28", "DecimalMinValue");
    
                // Decimal consts in expressions
                var dz = System.Decimal(0.0);
                DecimalZero = System.Decimal.Zero.add(dz);
                DecimalOne = System.Decimal.One.add(dz);
                ;
                DecimalMinusOne = System.Decimal.MinusOne.add(dz);
                ;
                DecimalMaxValue = System.Decimal.MaxValue.add(dz);
                ;
                DecimalMinValue = System.Decimal.MinValue.add(dz);
                ;
    
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(DecimalZero, "0", "DecimalZeroin expression");
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(DecimalOne, "1", "DecimalOnein expression");
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(DecimalMinusOne, "-1", "DecimalMinusOnein expression");
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(DecimalMaxValue, "7.9228162514264337593543950335e+28", "DecimalMaxValuein expression");
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(DecimalMinValue, "-7.9228162514264337593543950335e+28", "DecimalMinValuein expression");
    
    
                var numberPositiveInfinity = Number.POSITIVE_INFINITY;
                var numberNegativeInfinity = Number.NEGATIVE_INFINITY;
                var numberNaN = NaN;
    
                // Double consts
                var DoubleMaxValue = System.Double.max;
                var DoubleMinValue = System.Double.min;
                var DoubleEpsilon = 4.94065645841247E-324;
                var DoubleNegativeInfinity = Number.NEGATIVE_INFINITY;
                var DoublePositiveInfinity = Number.POSITIVE_INFINITY;
                var DoubleNaN = Number.NaN;
    
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(DoubleMaxValue, "1.7976931348623157e+308", "DoubleMaxValue");
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(DoubleMinValue, "-1.7976931348623157e+308", "DoubleMinValue");
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(DoubleEpsilon, "5e-324", "DoubleEpsilon");
                Bridge.Test.Assert.areEqual$1(numberNegativeInfinity, DoubleNegativeInfinity, "DoubleNegativeInfinity");
                Bridge.Test.Assert.areEqual$1(numberPositiveInfinity, DoublePositiveInfinity, "DoublePositiveInfinity");
                Bridge.Test.Assert.areEqual$1(numberNaN, DoubleNaN, "DoubleNaN");
    
                // Double consts in expressions
                var dblz = 0.0;
                DoubleMaxValue = System.Double.max + dblz;
                DoubleMinValue = System.Double.min + dblz;
                DoubleEpsilon = 4.94065645841247E-324 + dblz;
                DoubleNegativeInfinity = Number.NEGATIVE_INFINITY + dblz;
                DoublePositiveInfinity = Number.POSITIVE_INFINITY + dblz;
                DoubleNaN = Number.NaN + dblz;
    
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(DoubleMaxValue, "1.7976931348623157e+308", "DoubleMaxValuein expression");
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(DoubleMinValue, "-1.7976931348623157e+308", "DoubleMinValuein expression");
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(DoubleEpsilon, "5e-324", "DoubleEpsilonin expression");
                Bridge.Test.Assert.areEqual$1(numberNegativeInfinity, DoubleNegativeInfinity, "DoubleNegativeInfinityin expression");
                Bridge.Test.Assert.areEqual$1(numberPositiveInfinity, DoublePositiveInfinity, "DoublePositiveInfinityin expression");
                Bridge.Test.Assert.areEqual$1(numberNaN, DoubleNaN, "DoubleNaNin expression");
    
                // Math consts
                var MathE = Math.E;
                var MathLN10 = Math.LN10;
                var MathLN2 = Math.LN2;
                var MathLOG2E = Math.LOG2E;
                var MathLOG10E = Math.LOG10E;
                var MathPI = Math.PI;
                var MathSQRT1_2 = Math.SQRT1_2;
                var MathSQRT2 = Math.SQRT2;
    
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(MathE, "2.718281828459045", "MathE");
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(MathLN10, "2.302585092994046", "MathLN10");
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(MathLN2, "0.6931471805599453", "MathLN2");
                //IE has Math.LOG2E defined as 1.4426950408889633 instead of standard 1.4426950408889634
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.assertAlmostEqual(MathLOG2E, 1.4426950408889634, "MathLOG2E");
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(MathLOG10E, "0.4342944819032518", "MathLOG10E");
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(MathPI, "3.141592653589793", "MathPI");
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(MathSQRT1_2, "0.7071067811865476", "MathSQRT1_2");
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(MathSQRT2, "1.4142135623730951", "MathSQRT2");
    
                // Math consts in expression
                MathE = Math.E + 0;
                MathLN10 = Math.LN10 + 0;
                MathLN2 = Math.LN2 + 0;
                MathLOG2E = Math.LOG2E + 0;
                MathLOG10E = Math.LOG10E + 0;
                MathPI = Math.PI + 0;
                MathSQRT1_2 = Math.SQRT1_2 + 0;
                MathSQRT2 = Math.SQRT2 + 0;
    
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(MathE, "2.718281828459045", "MathEin expression");
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(MathLN10, "2.302585092994046", "MathLN10in expression");
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(MathLN2, "0.6931471805599453", "MathLN2in expression");
                //IE has Math.LOG2E defined as 1.4426950408889633 instead of standard 1.4426950408889634
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.assertAlmostEqual(MathLOG2E, 1.4426950408889634, "MathLOG2Ein expression");
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(MathLOG10E, "0.4342944819032518", "MathLOG10Ein expression");
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(MathPI, "3.141592653589793", "MathPIin expression");
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(MathSQRT1_2, "0.7071067811865476", "MathSQRT1_2in expression");
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(MathSQRT2, "1.4142135623730951", "MathSQRT2in expression");
    
                // Single consts
                var SingleMaxValue = 3.40282347E+38;
                var SingleMinValue = -3.40282347E+38;
                var SingleEpsilon = 1.401298E-45;
                var SingleNaN = Number.NaN;
                var SingleNegativeInfinity = Number.NEGATIVE_INFINITY;
                var SinglePositiveInfinity = Number.POSITIVE_INFINITY;
    
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(SingleMaxValue, "3.40282347e+38", "SingleMaxValue");
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(SingleMinValue, "-3.40282347e+38", "SingleMinValue");
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(SingleEpsilon, "1.401298e-45", "SingleEpsilon");
                Bridge.Test.Assert.areEqual$1(numberNaN, SingleNaN, "SingleNaN");
                Bridge.Test.Assert.areEqual$1(numberNegativeInfinity, SingleNegativeInfinity, "SingleNegativeInfinity");
                Bridge.Test.Assert.areEqual$1(numberPositiveInfinity, SinglePositiveInfinity, "SinglePositiveInfinity");
    
                // Single consts in expression
                var fz = 0;
                SingleMaxValue = 3.40282347E+38 + fz;
                SingleMinValue = -3.40282347E+38 + fz;
                SingleEpsilon = 1.401298E-45 + fz;
                SingleNaN = Number.NaN + fz;
                SingleNegativeInfinity = Number.NEGATIVE_INFINITY + fz;
                SinglePositiveInfinity = Number.POSITIVE_INFINITY + fz;
    
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(SingleMaxValue, "3.40282347e+38", "SingleMaxValuein expression");
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(SingleMinValue, "-3.40282347e+38", "SingleMinValuein expression");
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(SingleEpsilon, "1.401298e-45", "SingleEpsilonin expression");
                Bridge.Test.Assert.areEqual$1(numberNaN, SingleNaN, "SingleNaNin expression");
                Bridge.Test.Assert.areEqual$1(numberNegativeInfinity, SingleNegativeInfinity, "SingleNegativeInfinityin expression");
                Bridge.Test.Assert.areEqual$1(numberPositiveInfinity, SinglePositiveInfinity, "SinglePositiveInfinityin expression");
            },
            n418: function () {
                var t = new Bridge.ClientTest.BridgeIssues.Bridge418();
                t.setDelegate(Bridge.fn.combine(t.getDelegate(), $_.Bridge.ClientTest.BridgeIssues.TestBridgeIssues.f1));
                var r = t.callDelegate(10);
    
                Bridge.Test.Assert.areEqual$1(20, r, "Delegate added and called var r = t.CallDelegate(10);");
            },
            n422: function () {
                var v0 = Bridge.ClientTest.BridgeIssues.Bridge422.first;
                var v100 = Bridge.ClientTest.BridgeIssues.Bridge422.next;
                var v101 = Bridge.ClientTest.BridgeIssues.Bridge422.afterNext;
    
                Bridge.Test.Assert.areEqual$1(0, v0, "Bridge422.first");
                Bridge.Test.Assert.areEqual$1(100, v100, "Bridge422.next");
                Bridge.Test.Assert.areEqual$1(101, v101, "Bridge422.afterNext");
            },
            n428: function () {
                var number2 = System.Decimal(11.37);
                var sum = "0.13 + " + number2;
    
                Bridge.Test.Assert.areEqual$1("0.13 + 11.37", sum, "0.13 + 11.37");
            },
            n435: function () {
                var i = 0;
                Bridge.Test.Assert.areEqual$1("0.000000E+000", System.Int32.format(i, "E"), "i.Format(\"E\")");
                Bridge.Test.Assert.areEqual$1("a", System.Int32.format(i, "a"), "Test custom formatting in \"use strict\" mode");
            },
            n436: function () {
                var b1 = new Bridge.ClientTest.BridgeIssues.Bridge436First();
                Bridge.Test.Assert.areEqual$1("1", b1.toObject(), "Bridge436First.ToObject()");
    
                var b2 = new Bridge.ClientTest.BridgeIssues.Bridge436Second();
                Bridge.Test.Assert.areEqual$1("12", b2.toObject(), "Bridge436Second.ToObject()");
    
                var b3 = new Bridge.ClientTest.BridgeIssues.Bridge436Third();
                Bridge.Test.Assert.areEqual$1("123", b3.toObject(), "Bridge436Third.ToObject()");
            },
            n438: function () {
                var magic = Bridge.merge(new System.Collections.Generic.List$1(System.Int32)(), [
                    [0],
                    [1],
                    [2],
                    [3],
                    [4]
                ] );
                var epic = magic.getRange(0, 3);
                Bridge.Test.Assert.areEqual$1("System.Collections.Generic.List$1$System.Int32", Bridge.getTypeName(Bridge.getType(epic)), "epic.GetType().GetClassName()");
            },
            n439: function () {
                var b = new Bridge.ClientTest.BridgeIssues.Bridge439();
                var accumulator = "";
                b.register(function (s) {
                    accumulator = accumulator + s;
                });
    
                b.callDispatcher("1");
                Bridge.Test.Assert.areEqual$1("1", accumulator, "accumulator 1");
    
                b.callDispatcher("2");
                Bridge.Test.Assert.areEqual$1("12", accumulator, "accumulator 12");
            },
            n442: function () {
                var a = System.Decimal(3.5);
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(a.round(), "4", "a.Round(3.5M)");
    
                var b = System.Decimal(4.5);
                Bridge.ClientTest.BridgeIssues.TestBridgeIssues.ensureNumber(b.round(), "4", "b.Round(4.5M)");
            },
            n460: function () {
                var number;
    
                number = -12345.6789;
                Bridge.Test.Assert.areEqual$1("-12345.6789", System.Double.format(number, "G", System.Globalization.CultureInfo.invariantCulture), "ToString(\"G\") for negative numbers in InvariantCulture");
            },
            n467: function () {
                var a = Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge467(), {
                    setMyProperty: -1
                } );
    
                var b = Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge467(), {
                    setMyProperty: -1
                } );
    
                Bridge.Test.Assert.areNotEqual$1(b.getHashCode(), a.getHashCode(), "Call to base.GetHashCode() causes compilation to fail");
            },
            n469: function () {
                var $t;
                var testList = new System.Collections.Generic.List$1(System.Int32)();
                testList.add(5);
    
                var count = 0;
    
                for (var i = 0; i < 10; i = (i + 1) | 0) {
                    var $t = (function () {
                        if (!System.Linq.Enumerable.from(testList).any(function (x) {
                            return x === i;
                        })) {
                            return {jump:1};
                        }
    
                        count = (count + 1) | 0;
                    }).call(this) || {};
                    if($t.jump == 1) continue;
                }
    
                Bridge.Test.Assert.areEqual$1(1, count, "\"continue\" generated correctly");
            },
            n470: function () {
                var a = Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge470(), {
                    setData: 1
                } );
                var b = Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge470(), {
                    setData: 2
                } );
                var c = Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge470(), {
                    setData: 3
                } );
    
                Bridge.Test.Assert.areEqual$1(false, Bridge.equals(a, b), "a.Equals(b)");
                Bridge.Test.Assert.areNotEqual$1(true, Bridge.equals(a, Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge470(), {
                    setData: 1
                } )), "a.Equals(new Bridge470 { Data = 1 })");
                Bridge.Test.Assert.areEqual$1(false, Bridge.equals(a, null), "a.Equals(null)");
    
                Bridge.Test.Assert.areEqual$1(true, a.equals2(b, b), "a.Equals(b, b)");
                Bridge.Test.Assert.areEqual$1(true, a.equals2(a, Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge470(), {
                    setData: 1
                } )), "a.Equals(a, new Bridge470 { Data = 1 })");
                Bridge.Test.Assert.areEqual$1(false, a.equals2(a, Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge470(), {
                    setData: 2
                } )), "a.Equals(a, new Bridge470 { Data = 2 })");
                Bridge.Test.Assert.areEqual$1(true, a.equals2(Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge470(), {
                    setData: 5
                } ), Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge470(), {
                    setData: 5
                } )), "new Bridge470 { Data = 5 }, new Bridge470 { Data = 5 }");
    
                Bridge.Test.Assert.areNotEqual$1(1, Bridge.getHashCode(a), "a.GetHashCode()");
                Bridge.Test.Assert.areNotEqual$1(3, Bridge.getHashCode(c), "c.GetHashCode()");
    
                Bridge.Test.Assert.areEqual$1(2, a.getHashCode2(b), "a.GetHashCode(b)");
                Bridge.Test.Assert.areEqual$1(3, c.getHashCode2(c), "c.GetHashCode(c)");
    
                var test1 = new System.Collections.Generic.List$1(Bridge.ClientTest.BridgeIssues.Bridge470)();
                test1.add(a);
                test1.add(b);
                test1.add(c);
    
                var comparer = new Bridge.ClientTest.BridgeIssues.Bridge470();
    
                // EqualityComparer's methods do not handle null values intentionally
                Bridge.Test.Assert.areEqual$1(true, System.Linq.Enumerable.from(test1).contains(a, comparer), "test1 Contains a");
                Bridge.Test.Assert.areEqual$1(true, System.Linq.Enumerable.from(test1).contains(b, comparer), "test1 Contains b");
                Bridge.Test.Assert.areEqual$1(true, System.Linq.Enumerable.from(test1).contains(c, comparer), "test1 Contains c");
                Bridge.Test.Assert.areEqual$1(false, System.Linq.Enumerable.from(test1).contains(Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge470(), {
                    setData: 4
                } ), comparer), "test1 Contains 4");
                Bridge.Test.Assert.areEqual$1(false, System.Linq.Enumerable.from(test1).contains(Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge470(), {
                    setData: 5
                } ), comparer), "test1 Contains 5");
            },
            n499: function () {
                var v1 = new System.Version("constructor");
                Bridge.Test.Assert.areEqual$1("System.Version", Bridge.getTypeName(v1), "#499 Version type name");
            }
        }
    });
    
    Bridge.define("$AnonymousType$16", $_, {
        constructor: function (i) {
            this.i = i;
        },
        geti : function () {
            return this.i;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$16)) {
                return false;
            }
            return Bridge.equals(this.i, o.i);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + -22048071;
            hash = hash * 23 + (this.i == null ? 0 : Bridge.getHashCode(this.i));
            return hash;
        },
        toJSON: function () {
            return {
                i : this.i
            };
        }
    });
    
    Bridge.ns("Bridge.ClientTest.BridgeIssues.TestBridgeIssues", $_);
    
    Bridge.apply($_.Bridge.ClientTest.BridgeIssues.TestBridgeIssues, {
        f1: function (i) {
            return ((i * 2) | 0);
        }
    });
    
    Bridge.define('Bridge.ClientTest.CheckedUncheckedTests', {
        statics: {
            assertEqual: function (expected, actual, message) {
                if (message === void 0) { message = null; }
                Bridge.Test.Assert.areEqual$1(expected.toString(), actual.toString(), message);
            },
            bypass: function (o) {
                return o;
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.CheckedUncheckedTests.CheckedInsideUncheckedTests', {
        statics: {
            testInt32: function () {
                var max = 2147483647;
    
                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;
    
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.Int.check(max + 1, System.Int32);
                }, "Through identifier +");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.identity(max2, (max2 = Bridge.Int.check(max2 + 1, System.Int32)));
                }, "Through identifier post++");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = ((max3 = Bridge.Int.check(max3 + 1, System.Int32)));
                }, "Through identifier ++pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.Int.check(2 * max, System.Int32);
                }, "Through identifier *");
    
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.Int.check(max + 1, System.Int32));
                }, "Through parameter +");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(max3, (max3 = Bridge.Int.check(max3 + 1, System.Int32))));
                }, "Through parameter post++");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(((max4 = Bridge.Int.check(max4 + 1, System.Int32))));
                }, "Through parameter ++pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.Int.check(2 * max, System.Int32));
                }, "Through parameter *");
    
                var min = -2147483648;
    
                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;
    
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.Int.check(min - 1, System.Int32);
                }, "Through identifier -");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.identity(min1, (min1 = Bridge.Int.check(min1 - 1, System.Int32)));
                }, "Through identifier post--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = ((min2 = Bridge.Int.check(min2 - 1, System.Int32)));
                }, "Through identifier pre--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.Int.check(-min, System.Int32);
                }, "Through identifier unary -");
    
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.Int.check(min - 1, System.Int32));
                }, "Through parameter -");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(min3, (min3 = Bridge.Int.check(min3 - 1, System.Int32))));
                }, "Through parameter post--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(((min4 = Bridge.Int.check(min4 - 1, System.Int32))));
                }, "Through parameter --pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.Int.check(-min, System.Int32));
                }, "Through parameter unary -");
            },
            testUInt32: function () {
                var max = 4294967295;
    
                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;
    
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.Int.check(max + 1, System.UInt32);
                }, "Through identifier +");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.identity(max1, (max1 = Bridge.Int.check(max1 + 1, System.UInt32)));
                }, "Through identifier post++");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = ((max2 = Bridge.Int.check(max2 + 1, System.UInt32)));
                }, "Through identifier ++pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.Int.check(2 * max, System.UInt32);
                }, "Through identifier *");
    
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.Int.check(max + 1, System.UInt32));
                }, "Through parameter +");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(max3, (max3 = Bridge.Int.check(max3 + 1, System.UInt32))));
                }, "Through parameter post++");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(((max4 = Bridge.Int.check(max4 + 1, System.UInt32))));
                }, "Through parameter ++pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.Int.check(2 * max, System.UInt32));
                }, "Through parameter *");
    
                var min = 0;
    
                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;
    
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.Int.check(min - 1, System.UInt32);
                }, "Through identifier -");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.identity(min1, (min1 = Bridge.Int.check(min1 - 1, System.UInt32)));
                }, "Through identifier post--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = ((min2 = Bridge.Int.check(min2 - 1, System.UInt32)));
                }, "Through identifier pre--");
    
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.Int.check(min - 1, System.UInt32));
                }, "Through parameter -");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(min3, (min3 = Bridge.Int.check(min3 - 1, System.UInt32))));
                }, "Through parameter post--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(((min4 = Bridge.Int.check(min4 - 1, System.UInt32))));
                }, "Through parameter --pre");
            },
            testLong: function () {
                var max = System.Int64.MaxValue;
    
                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;
    
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = max.add(System.Int64(1), 1);
                }, "Through identifier +");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var $t;
                    var r = ($t = max1, max1 = max1.inc(1), $t);
                }, "Through identifier post++");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = (max2 = max2.inc(1));
                }, "Through identifier ++pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = System.Int64(2).mul(max, 1);
                }, "Through identifier *");
    
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(max.add(System.Int64(1), 1));
                }, "Through parameter +");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var $t;
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = max3, max3 = max3.inc(1), $t));
                }, "Through parameter post++");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass((max4 = max4.inc(1)));
                }, "Through parameter ++pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(System.Int64(2).mul(max, 1));
                }, "Through parameter *");
    
                var min = System.Int64.MinValue;
    
                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;
    
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = min.sub(System.Int64(1), 1);
                }, "Through identifier -");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var $t;
                    var r = ($t = min1, min1 = min1.dec(1), $t);
                }, "Through identifier post--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = (min2 = min2.dec(1));
                }, "Through identifier pre--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = min.neg(1);
                }, "Through identifier unary -");
    
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(min.sub(System.Int64(1), 1));
                }, "Through parameter -");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var $t;
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = min3, min3 = min3.dec(1), $t));
                }, "Through parameter post--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass((min4 = min4.dec(1)));
                }, "Through parameter --pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(min.neg(1));
                }, "Through parameter unary -");
            },
            testULong: function () {
                var max = System.UInt64.MaxValue;
    
                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;
    
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = max.add(System.UInt64(1), 1);
                }, "Through identifier +");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var $t;
                    var r = ($t = max1, max1 = max1.inc(1), $t);
                }, "Through identifier post++");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = (max2 = max2.inc(1));
                }, "Through identifier ++pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = System.UInt64(2).mul(max, 1);
                }, "Through identifier *");
    
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(max.add(System.UInt64(1), 1));
                }, "Through parameter +");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var $t;
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = max3, max3 = max3.inc(1), $t));
                }, "Through parameter post++");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass((max4 = max4.inc(1)));
                }, "Through parameter ++pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(System.UInt64(2).mul(max, 1));
                }, "Through parameter *");
    
                var min = System.UInt64.MinValue;
    
                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;
    
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = min.sub(System.UInt64(1), 1);
                }, "Through identifier -");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var $t;
                    var r = ($t = min1, min1 = min1.dec(1), $t);
                }, "Through identifier post--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = (min2 = min2.dec(1));
                }, "Through identifier pre--");
    
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(min.sub(System.UInt64(1), 1));
                }, "Through parameter -");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var $t;
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = min3, min3 = min3.dec(1), $t));
                }, "Through parameter post--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass((min4 = min4.dec(1)));
                }, "Through parameter --pre");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.CheckedUncheckedTests.CheckedTests', {
        statics: {
            testInt32: function () {
                var max = 2147483647;
    
                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;
    
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.Int.check(max + 1, System.Int32);
                }, "Through identifier +");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.identity(max2, (max2 = Bridge.Int.check(max2 + 1, System.Int32)));
                }, "Through identifier post++");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = ((max3 = Bridge.Int.check(max3 + 1, System.Int32)));
                }, "Through identifier ++pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.Int.check(2 * max, System.Int32);
                }, "Through identifier *");
    
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.Int.check(max + 1, System.Int32));
                }, "Through parameter +");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(max3, (max3 = Bridge.Int.check(max3 + 1, System.Int32))));
                }, "Through parameter post++");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(((max4 = Bridge.Int.check(max4 + 1, System.Int32))));
                }, "Through parameter ++pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.Int.check(2 * max, System.Int32));
                }, "Through parameter *");
    
                var min = -2147483648;
    
                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;
    
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.Int.check(min - 1, System.Int32);
                }, "Through identifier -");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.identity(min1, (min1 = Bridge.Int.check(min1 - 1, System.Int32)));
                }, "Through identifier post--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = ((min2 = Bridge.Int.check(min2 - 1, System.Int32)));
                }, "Through identifier pre--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.Int.check(-min, System.Int32);
                }, "Through identifier unary -");
    
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.Int.check(min - 1, System.Int32));
                }, "Through parameter -");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(min3, (min3 = Bridge.Int.check(min3 - 1, System.Int32))));
                }, "Through parameter post--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(((min4 = Bridge.Int.check(min4 - 1, System.Int32))));
                }, "Through parameter --pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.Int.check(-min, System.Int32));
                }, "Through parameter unary -");
            },
            testUInt32: function () {
                var max = 4294967295;
    
                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;
    
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.Int.check(max + 1, System.UInt32);
                }, "Through identifier +");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.identity(max1, (max1 = Bridge.Int.check(max1 + 1, System.UInt32)));
                }, "Through identifier post++");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = ((max2 = Bridge.Int.check(max2 + 1, System.UInt32)));
                }, "Through identifier ++pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.Int.check(2 * max, System.UInt32);
                }, "Through identifier *");
    
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.Int.check(max + 1, System.UInt32));
                }, "Through parameter +");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(max3, (max3 = Bridge.Int.check(max3 + 1, System.UInt32))));
                }, "Through parameter post++");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(((max4 = Bridge.Int.check(max4 + 1, System.UInt32))));
                }, "Through parameter ++pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.Int.check(2 * max, System.UInt32));
                }, "Through parameter *");
    
                var min = 0;
    
                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;
    
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.Int.check(min - 1, System.UInt32);
                }, "Through identifier -");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = Bridge.identity(min1, (min1 = Bridge.Int.check(min1 - 1, System.UInt32)));
                }, "Through identifier post--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = ((min2 = Bridge.Int.check(min2 - 1, System.UInt32)));
                }, "Through identifier pre--");
    
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.Int.check(min - 1, System.UInt32));
                }, "Through parameter -");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(min3, (min3 = Bridge.Int.check(min3 - 1, System.UInt32))));
                }, "Through parameter post--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(((min4 = Bridge.Int.check(min4 - 1, System.UInt32))));
                }, "Through parameter --pre");
            },
            testLong: function () {
                var max = System.Int64.MaxValue;
    
                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;
    
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = max.add(System.Int64(1), 1);
                }, "Through identifier +");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var $t;
                    var r = ($t = max1, max1 = max1.inc(1), $t);
                }, "Through identifier post++");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = (max2 = max2.inc(1));
                }, "Through identifier ++pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = System.Int64(2).mul(max, 1);
                }, "Through identifier *");
    
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(max.add(System.Int64(1), 1));
                }, "Through parameter +");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var $t;
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = max3, max3 = max3.inc(1), $t));
                }, "Through parameter post++");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass((max4 = max4.inc(1)));
                }, "Through parameter ++pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(System.Int64(2).mul(max, 1));
                }, "Through parameter *");
    
                var min = System.Int64.MinValue;
    
                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;
    
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = min.sub(System.Int64(1), 1);
                }, "Through identifier -");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var $t;
                    var r = ($t = min1, min1 = min1.dec(1), $t);
                }, "Through identifier post--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = (min2 = min2.dec(1));
                }, "Through identifier pre--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = min.neg(1);
                }, "Through identifier unary -");
    
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(min.sub(System.Int64(1), 1));
                }, "Through parameter -");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var $t;
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = min3, min3 = min3.dec(1), $t));
                }, "Through parameter post--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass((min4 = min4.dec(1)));
                }, "Through parameter --pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(min.neg(1));
                }, "Through parameter unary -");
            },
            testULong: function () {
                var max = System.UInt64.MaxValue;
    
                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;
    
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = max.add(System.UInt64(1), 1);
                }, "Through identifier +");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var $t;
                    var r = ($t = max1, max1 = max1.inc(1), $t);
                }, "Through identifier post++");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = (max2 = max2.inc(1));
                }, "Through identifier ++pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = System.UInt64(2).mul(max, 1);
                }, "Through identifier *");
    
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(max.add(System.UInt64(1), 1));
                }, "Through parameter +");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var $t;
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = max3, max3 = max3.inc(1), $t));
                }, "Through parameter post++");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass((max4 = max4.inc(1)));
                }, "Through parameter ++pre");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(System.UInt64(2).mul(max, 1));
                }, "Through parameter *");
    
                var min = System.UInt64.MinValue;
    
                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;
    
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = min.sub(System.UInt64(1), 1);
                }, "Through identifier -");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var $t;
                    var r = ($t = min1, min1 = min1.dec(1), $t);
                }, "Through identifier post--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var r = (min2 = min2.dec(1));
                }, "Through identifier pre--");
    
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(min.sub(System.UInt64(1), 1));
                }, "Through parameter -");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    var $t;
                    Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = min3, min3 = min3.dec(1), $t));
                }, "Through parameter post--");
                Bridge.Test.Assert.throws$7(System.OverflowException, function () {
                    Bridge.ClientTest.CheckedUncheckedTests.bypass((min4 = min4.dec(1)));
                }, "Through parameter --pre");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.CheckedUncheckedTests.UncheckedInsideCheckedTests', {
        statics: {
            testInt32: function () {
                var max = 2147483647;
    
                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;
    
                var rMax1 = (max + 1) | 0;
                var rMax2 = Bridge.identity(max1, (max1 = (max1 + 1) | 0));
                var rMax3 = ((max2 = (max2 + 1) | 0));
                var rMax4 = (2 * max) | 0;
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", rMax1, "Through identifier +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("2147483647", rMax2, "Through identifier post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", rMax3, "Through identifier ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2", rMax4, "Through identifier *");
    
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", Bridge.ClientTest.CheckedUncheckedTests.bypass(((max + 1) | 0)), "Through parameter +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("2147483647", Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(max3, (max3 = (max3 + 1) | 0))), "Through parameter post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", Bridge.ClientTest.CheckedUncheckedTests.bypass(((max4 = (max4 + 1) | 0))), "Through parameter ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2", Bridge.ClientTest.CheckedUncheckedTests.bypass(((2 * max) | 0)), "Through parameter *");
    
                var min = -2147483648;
    
                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;
    
                var rMin1 = (min - 1) | 0;
                var rMin2 = Bridge.identity(min1, (min1 = (min1 - 1) | 0));
                var rMin3 = ((min2 = (min2 - 1) | 0));
                var rMin4 = (-min) | 0;
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("2147483647", rMin1, "Through identifier -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", rMin2, "Through identifier post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("2147483647", rMin3, "Through identifier --pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", rMin4, "Through identifier unary -");
    
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("2147483647", Bridge.ClientTest.CheckedUncheckedTests.bypass(((min - 1) | 0)), "Through parameter -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(min3, (min3 = (min3 - 1) | 0))), "Through parameter post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("2147483647", Bridge.ClientTest.CheckedUncheckedTests.bypass(((min4 = (min4 - 1) | 0))), "Through parameter --pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", Bridge.ClientTest.CheckedUncheckedTests.bypass(((-min) | 0)), "Through parameter unary -");
            },
            testUInt32: function () {
                var max = 4294967295;
    
                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;
    
                var rMax1 = (max + 1) >>> 0;
                var rMax2 = Bridge.identity(max1, (max1 = (max1 + 1) >>> 0));
                var rMax3 = ((max2 = (max2 + 1) >>> 0));
                var rMax4 = (2 * max) >>> 0;
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMax1, "Through identifier +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967295", rMax2, "Through identifier post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMax3, "Through identifier ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967294", rMax4, "Through identifier *");
    
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass(((max + 1) >>> 0)), "Through parameter +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967295", Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(max3, (max3 = (max3 + 1) >>> 0))), "Through parameter post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass(((max4 = (max4 + 1) >>> 0))), "Through parameter ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967294", Bridge.ClientTest.CheckedUncheckedTests.bypass(((2 * max) >>> 0)), "Through parameter *");
    
                var min = 0;
    
                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;
    
                var rMin1 = (min - 1) >>> 0;
                var rMin2 = Bridge.identity(min1, (min1 = (min1 - 1) >>> 0));
                var rMin3 = ((min2 = (min2 - 1) >>> 0));
                var rMin4 = System.Int64(min).neg();
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967295", rMin1, "Through identifier -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMin2, "Through identifier post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967295", rMin3, "Through identifier --pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMin4, "Through identifier unary -");
    
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967295", Bridge.ClientTest.CheckedUncheckedTests.bypass(((min - 1) >>> 0)), "Through parameter -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(min3, (min3 = (min3 - 1) >>> 0))), "Through parameter post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967295", Bridge.ClientTest.CheckedUncheckedTests.bypass(((min4 = (min4 - 1) >>> 0))), "Through parameter --pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass(System.Int64(min).neg()), "Through parameter unary -");
            },
            testLong: function () {
                var $t;
                var max = System.Int64.MaxValue;
    
                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;
    
                var rMax1 = max.add(System.Int64(1));
                var rMax2 = ($t = max1, max1 = max1.inc(), $t);
                var rMax3 = (max2 = max2.inc());
                var rMax4 = System.Int64(2).mul(max);
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", rMax1, "Through identifier +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("9223372036854775807", rMax2, "Through identifier post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", rMax3, "Through identifier ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2", rMax4, "Through identifier *");
    
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", Bridge.ClientTest.CheckedUncheckedTests.bypass(max.add(System.Int64(1))), "Through parameter +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("9223372036854775807", Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = max3, max3 = max3.inc(), $t)), "Through parameter post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", Bridge.ClientTest.CheckedUncheckedTests.bypass((max4 = max4.inc())), "Through parameter ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2", Bridge.ClientTest.CheckedUncheckedTests.bypass(System.Int64(2).mul(max)), "Through parameter *");
    
                var min = System.Int64.MinValue;
    
                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;
    
                var rMin1 = min.sub(System.Int64(1));
                var rMin2 = ($t = min1, min1 = min1.dec(), $t);
                var rMin3 = (min2 = min2.dec());
                var rMin4 = min.neg();
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("9223372036854775807", rMin1, "Through identifier -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", rMin2, "Through identifier post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("9223372036854775807", rMin3, "Through identifier --pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", rMin4, "Through identifier unary -");
    
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("9223372036854775807", Bridge.ClientTest.CheckedUncheckedTests.bypass(min.sub(System.Int64(1))), "Through parameter -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = min3, min3 = min3.dec(), $t)), "Through parameter post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("9223372036854775807", Bridge.ClientTest.CheckedUncheckedTests.bypass((min4 = min4.dec())), "Through parameter --pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", Bridge.ClientTest.CheckedUncheckedTests.bypass(min.neg()), "Through parameter unary -");
            },
            testULong: function () {
                var $t;
                var max = System.UInt64.MaxValue;
    
                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;
    
                var rMax1 = max.add(System.UInt64(1));
                var rMax2 = ($t = max1, max1 = max1.inc(), $t);
                var rMax3 = (max2 = max2.inc());
                var rMax4 = System.UInt64(2).mul(max);
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMax1, "Through identifier +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551615", rMax2, "Through identifier post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMax3, "Through identifier ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551614", rMax4, "Through identifier *");
    
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass(max.add(System.UInt64(1))), "Through parameter +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551615", Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = max3, max3 = max3.inc(), $t)), "Through parameter post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass((max4 = max4.inc())), "Through parameter ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551614", Bridge.ClientTest.CheckedUncheckedTests.bypass(System.UInt64(2).mul(max)), "Through parameter *");
    
                var min = System.UInt64.MinValue;
    
                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;
    
                var rMin1 = min.sub(System.UInt64(1));
                var rMin2 = ($t = min1, min1 = min1.dec(), $t);
                var rMin3 = (min2 = min2.dec());
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551615", rMin1, "Through identifier -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMin2, "Through identifier post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551615", rMin3, "Through identifier --pre");
    
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551615", Bridge.ClientTest.CheckedUncheckedTests.bypass(min.sub(System.UInt64(1))), "Through parameter -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = min3, min3 = min3.dec(), $t)), "Through parameter post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551615", Bridge.ClientTest.CheckedUncheckedTests.bypass((min4 = min4.dec())), "Through parameter --pre");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.CheckedUncheckedTests.UncheckedTests', {
        statics: {
            testInt32: function () {
                var max = 2147483647;
    
                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;
    
                var rMax1 = (max + 1) | 0;
                var rMax2 = Bridge.identity(max1, (max1 = (max1 + 1) | 0));
                var rMax3 = ((max2 = (max2 + 1) | 0));
                var rMax4 = (2 * max) | 0;
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", rMax1, "Through identifier +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("2147483647", rMax2, "Through identifier post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", rMax3, "Through identifier ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2", rMax4, "Through identifier *");
    
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", Bridge.ClientTest.CheckedUncheckedTests.bypass(((max + 1) | 0)), "Through parameter +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("2147483647", Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(max3, (max3 = (max3 + 1) | 0))), "Through parameter post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", Bridge.ClientTest.CheckedUncheckedTests.bypass(((max4 = (max4 + 1) | 0))), "Through parameter ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2", Bridge.ClientTest.CheckedUncheckedTests.bypass(((2 * max) | 0)), "Through parameter *");
    
                var min = -2147483648;
    
                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;
    
                var rMin1 = (min - 1) | 0;
                var rMin2 = Bridge.identity(min1, (min1 = (min1 - 1) | 0));
                var rMin3 = ((min2 = (min2 - 1) | 0));
                var rMin4 = (-min) | 0;
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("2147483647", rMin1, "Through identifier -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", rMin2, "Through identifier post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("2147483647", rMin3, "Through identifier --pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", rMin4, "Through identifier unary -");
    
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("2147483647", Bridge.ClientTest.CheckedUncheckedTests.bypass(((min - 1) | 0)), "Through parameter -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(min3, (min3 = (min3 - 1) | 0))), "Through parameter post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("2147483647", Bridge.ClientTest.CheckedUncheckedTests.bypass(((min4 = (min4 - 1) | 0))), "Through parameter --pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", Bridge.ClientTest.CheckedUncheckedTests.bypass(((-min) | 0)), "Through parameter unary -");
            },
            testUInt32: function () {
                var max = 4294967295;
    
                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;
    
                var rMax1 = (max + 1) >>> 0;
                var rMax2 = Bridge.identity(max1, (max1 = (max1 + 1) >>> 0));
                var rMax3 = ((max2 = (max2 + 1) >>> 0));
                var rMax4 = (2 * max) >>> 0;
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMax1, "Through identifier +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967295", rMax2, "Through identifier post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMax3, "Through identifier ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967294", rMax4, "Through identifier *");
    
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass(((max + 1) >>> 0)), "Through parameter +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967295", Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(max3, (max3 = (max3 + 1) >>> 0))), "Through parameter post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass(((max4 = (max4 + 1) >>> 0))), "Through parameter ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967294", Bridge.ClientTest.CheckedUncheckedTests.bypass(((2 * max) >>> 0)), "Through parameter *");
    
                var min = 0;
    
                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;
    
                var rMin1 = (min - 1) >>> 0;
                var rMin2 = Bridge.identity(min1, (min1 = (min1 - 1) >>> 0));
                var rMin3 = ((min2 = (min2 - 1) >>> 0));
                var rMin4 = System.Int64(min).neg();
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967295", rMin1, "Through identifier -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMin2, "Through identifier post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967295", rMin3, "Through identifier --pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMin4, "Through identifier unary -");
    
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967295", Bridge.ClientTest.CheckedUncheckedTests.bypass(((min - 1) >>> 0)), "Through parameter -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(min3, (min3 = (min3 - 1) >>> 0))), "Through parameter post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967295", Bridge.ClientTest.CheckedUncheckedTests.bypass(((min4 = (min4 - 1) >>> 0))), "Through parameter --pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass(System.Int64(min).neg()), "Through parameter unary -");
            },
            testLong: function () {
                var $t;
                var max = System.Int64.MaxValue;
    
                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;
    
                var rMax1 = max.add(System.Int64(1));
                var rMax2 = ($t = max1, max1 = max1.inc(), $t);
                var rMax3 = (max2 = max2.inc());
                var rMax4 = System.Int64(2).mul(max);
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", rMax1, "Through identifier +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("9223372036854775807", rMax2, "Through identifier post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", rMax3, "Through identifier ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2", rMax4, "Through identifier *");
    
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", Bridge.ClientTest.CheckedUncheckedTests.bypass(max.add(System.Int64(1))), "Through parameter +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("9223372036854775807", Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = max3, max3 = max3.inc(), $t)), "Through parameter post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", Bridge.ClientTest.CheckedUncheckedTests.bypass((max4 = max4.inc())), "Through parameter ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2", Bridge.ClientTest.CheckedUncheckedTests.bypass(System.Int64(2).mul(max)), "Through parameter *");
    
                var min = System.Int64.MinValue;
    
                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;
    
                var rMin1 = min.sub(System.Int64(1));
                var rMin2 = ($t = min1, min1 = min1.dec(), $t);
                var rMin3 = (min2 = min2.dec());
                var rMin4 = min.neg();
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("9223372036854775807", rMin1, "Through identifier -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", rMin2, "Through identifier post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("9223372036854775807", rMin3, "Through identifier --pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", rMin4, "Through identifier unary -");
    
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("9223372036854775807", Bridge.ClientTest.CheckedUncheckedTests.bypass(min.sub(System.Int64(1))), "Through parameter -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = min3, min3 = min3.dec(), $t)), "Through parameter post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("9223372036854775807", Bridge.ClientTest.CheckedUncheckedTests.bypass((min4 = min4.dec())), "Through parameter --pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", Bridge.ClientTest.CheckedUncheckedTests.bypass(min.neg()), "Through parameter unary -");
            },
            testULong: function () {
                var $t;
                var max = System.UInt64.MaxValue;
    
                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;
    
                var rMax1 = max.add(System.UInt64(1));
                var rMax2 = ($t = max1, max1 = max1.inc(), $t);
                var rMax3 = (max2 = max2.inc());
                var rMax4 = System.UInt64(2).mul(max);
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMax1, "Through identifier +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551615", rMax2, "Through identifier post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMax3, "Through identifier ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551614", rMax4, "Through identifier *");
    
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass(max.add(System.UInt64(1))), "Through parameter +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551615", Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = max3, max3 = max3.inc(), $t)), "Through parameter post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass((max4 = max4.inc())), "Through parameter ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551614", Bridge.ClientTest.CheckedUncheckedTests.bypass(System.UInt64(2).mul(max)), "Through parameter *");
    
                var min = System.UInt64.MinValue;
    
                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;
    
                var rMin1 = min.sub(System.UInt64(1));
                var rMin2 = ($t = min1, min1 = min1.dec(), $t);
                var rMin3 = (min2 = min2.dec());
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551615", rMin1, "Through identifier -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMin2, "Through identifier post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551615", rMin3, "Through identifier --pre");
    
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551615", Bridge.ClientTest.CheckedUncheckedTests.bypass(min.sub(System.UInt64(1))), "Through parameter -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = min3, min3 = min3.dec(), $t)), "Through parameter post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551615", Bridge.ClientTest.CheckedUncheckedTests.bypass((min4 = min4.dec())), "Through parameter --pre");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.CheckedUncheckedTests.WithNoUncheckedKeywordTests', {
        statics: {
            testInt32: function () {
                var max = 2147483647;
    
                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;
    
                var rMax1 = (max + 1) | 0;
                var rMax2 = Bridge.identity(max1, (max1 = (max1 + 1) | 0));
                var rMax3 = ((max2 = (max2 + 1) | 0));
                var rMax4 = (2 * max) | 0;
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", rMax1, "Through identifier +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("2147483647", rMax2, "Through identifier post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", rMax3, "Through identifier ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2", rMax4, "Through identifier *");
    
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", Bridge.ClientTest.CheckedUncheckedTests.bypass(((max + 1) | 0)), "Through parameter +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("2147483647", Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(max3, (max3 = (max3 + 1) | 0))), "Through parameter post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", Bridge.ClientTest.CheckedUncheckedTests.bypass(((max4 = (max4 + 1) | 0))), "Through parameter ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2", Bridge.ClientTest.CheckedUncheckedTests.bypass(((2 * max) | 0)), "Through parameter *");
    
                var min = -2147483648;
    
                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;
    
                var rMin1 = (min - 1) | 0;
                var rMin2 = Bridge.identity(min1, (min1 = (min1 - 1) | 0));
                var rMin3 = ((min2 = (min2 - 1) | 0));
                var rMin4 = (-min) | 0;
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("2147483647", rMin1, "Through identifier -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", rMin2, "Through identifier post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("2147483647", rMin3, "Through identifier --pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", rMin4, "Through identifier unary -");
    
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("2147483647", Bridge.ClientTest.CheckedUncheckedTests.bypass(((min - 1) | 0)), "Through parameter -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(min3, (min3 = (min3 - 1) | 0))), "Through parameter post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("2147483647", Bridge.ClientTest.CheckedUncheckedTests.bypass(((min4 = (min4 - 1) | 0))), "Through parameter --pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2147483648", Bridge.ClientTest.CheckedUncheckedTests.bypass(((-min) | 0)), "Through parameter unary -");
            },
            testUInt32: function () {
                var max = 4294967295;
    
                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;
    
                var rMax1 = (max + 1) >>> 0;
                var rMax2 = Bridge.identity(max1, (max1 = (max1 + 1) >>> 0));
                var rMax3 = ((max2 = (max2 + 1) >>> 0));
                var rMax4 = (2 * max) >>> 0;
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMax1, "Through identifier +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967295", rMax2, "Through identifier post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMax3, "Through identifier ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967294", rMax4, "Through identifier *");
    
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass(((max + 1) >>> 0)), "Through parameter +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967295", Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(max3, (max3 = (max3 + 1) >>> 0))), "Through parameter post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass(((max4 = (max4 + 1) >>> 0))), "Through parameter ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967294", Bridge.ClientTest.CheckedUncheckedTests.bypass(((2 * max) >>> 0)), "Through parameter *");
    
                var min = 0;
    
                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;
    
                var rMin1 = (min - 1) >>> 0;
                var rMin2 = Bridge.identity(min1, (min1 = (min1 - 1) >>> 0));
                var rMin3 = ((min2 = (min2 - 1) >>> 0));
                var rMin4 = System.Int64(min).neg();
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967295", rMin1, "Through identifier -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMin2, "Through identifier post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967295", rMin3, "Through identifier --pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMin4, "Through identifier unary -");
    
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967295", Bridge.ClientTest.CheckedUncheckedTests.bypass(((min - 1) >>> 0)), "Through parameter -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass(Bridge.identity(min3, (min3 = (min3 - 1) >>> 0))), "Through parameter post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("4294967295", Bridge.ClientTest.CheckedUncheckedTests.bypass(((min4 = (min4 - 1) >>> 0))), "Through parameter --pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass(System.Int64(min).neg()), "Through parameter unary -");
            },
            testLong: function () {
                var $t;
                var max = System.Int64.MaxValue;
    
                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;
    
                var rMax1 = max.add(System.Int64(1));
                var rMax2 = ($t = max1, max1 = max1.inc(), $t);
                var rMax3 = (max2 = max2.inc());
                var rMax4 = System.Int64(2).mul(max);
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", rMax1, "Through identifier +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("9223372036854775807", rMax2, "Through identifier post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", rMax3, "Through identifier ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2", rMax4, "Through identifier *");
    
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", Bridge.ClientTest.CheckedUncheckedTests.bypass(max.add(System.Int64(1))), "Through parameter +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("9223372036854775807", Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = max3, max3 = max3.inc(), $t)), "Through parameter post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", Bridge.ClientTest.CheckedUncheckedTests.bypass((max4 = max4.inc())), "Through parameter ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-2", Bridge.ClientTest.CheckedUncheckedTests.bypass(System.Int64(2).mul(max)), "Through parameter *");
    
                var min = System.Int64.MinValue;
    
                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;
    
                var rMin1 = min.sub(System.Int64(1));
                var rMin2 = ($t = min1, min1 = min1.dec(), $t);
                var rMin3 = (min2 = min2.dec());
                var rMin4 = min.neg();
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("9223372036854775807", rMin1, "Through identifier -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", rMin2, "Through identifier post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("9223372036854775807", rMin3, "Through identifier --pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", rMin4, "Through identifier unary -");
    
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("9223372036854775807", Bridge.ClientTest.CheckedUncheckedTests.bypass(min.sub(System.Int64(1))), "Through parameter -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = min3, min3 = min3.dec(), $t)), "Through parameter post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("9223372036854775807", Bridge.ClientTest.CheckedUncheckedTests.bypass((min4 = min4.dec())), "Through parameter --pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("-9223372036854775808", Bridge.ClientTest.CheckedUncheckedTests.bypass(min.neg()), "Through parameter unary -");
            },
            testULong: function () {
                var $t;
                var max = System.UInt64.MaxValue;
    
                var max1 = max;
                var max2 = max;
                var max3 = max;
                var max4 = max;
    
                var rMax1 = max.add(System.UInt64(1));
                var rMax2 = ($t = max1, max1 = max1.inc(), $t);
                var rMax3 = (max2 = max2.inc());
                var rMax4 = System.UInt64(2).mul(max);
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMax1, "Through identifier +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551615", rMax2, "Through identifier post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMax3, "Through identifier ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551614", rMax4, "Through identifier *");
    
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass(max.add(System.UInt64(1))), "Through parameter +");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551615", Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = max3, max3 = max3.inc(), $t)), "Through parameter post++");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass((max4 = max4.inc())), "Through parameter ++pre");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551614", Bridge.ClientTest.CheckedUncheckedTests.bypass(System.UInt64(2).mul(max)), "Through parameter *");
    
                var min = System.UInt64.MinValue;
    
                var min1 = min;
                var min2 = min;
                var min3 = min;
                var min4 = min;
    
                var rMin1 = min.sub(System.UInt64(1));
                var rMin2 = ($t = min1, min1 = min1.dec(), $t);
                var rMin3 = (min2 = min2.dec());
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551615", rMin1, "Through identifier -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", rMin2, "Through identifier post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551615", rMin3, "Through identifier --pre");
    
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551615", Bridge.ClientTest.CheckedUncheckedTests.bypass(min.sub(System.UInt64(1))), "Through parameter -");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("0", Bridge.ClientTest.CheckedUncheckedTests.bypass(($t = min3, min3 = min3.dec(), $t)), "Through parameter post--");
                Bridge.ClientTest.CheckedUncheckedTests.assertEqual("18446744073709551615", Bridge.ClientTest.CheckedUncheckedTests.bypass((min4 = min4.dec())), "Through parameter --pre");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.Collections.Generic.ComparerTests', {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.Collections.Generic.Comparer$1$Object", Bridge.getTypeName(System.Collections.Generic.Comparer$1(Object)), "GetClassName()");
    
            var comparer = new System.Collections.Generic.Comparer$1(Object)(System.Collections.Generic.Comparer$1.$default.fn);
            Bridge.Test.Assert.true$1(true, "is Comparer<object> should be true");
            Bridge.Test.Assert.true$1(Bridge.is(comparer, System.Collections.Generic.IComparer$1(Object)), "is IComparer<object> should be true");
    
            var comparer1 = new System.Collections.Generic.Comparer$1(System.Int32)(System.Collections.Generic.Comparer$1.$default.fn);
            Bridge.Test.Assert.true$1(true, "is Comparer<int> should be true");
            Bridge.Test.Assert.true$1(Bridge.is(comparer1, System.Collections.Generic.IComparer$1(System.Int32)), "is IComparer<int> should be true");
        },
        defaultComparerCanOrderNumbers: function () {
            Bridge.Test.Assert.areEqual$1(-1, new System.Collections.Generic.Comparer$1(System.Int32)(System.Collections.Generic.Comparer$1.$default.fn).compare(3, 8), "Compare(3, 8) should be -1");
            Bridge.Test.Assert.areEqual$1(0, new System.Collections.Generic.Comparer$1(System.Int32)(System.Collections.Generic.Comparer$1.$default.fn).compare(3, 3), "Compare(3, 3) should be 0");
            Bridge.Test.Assert.areEqual$1(1, new System.Collections.Generic.Comparer$1(System.Int32)(System.Collections.Generic.Comparer$1.$default.fn).compare(8, 3), "Compare(8, 3) should be 1");
        },
        defaultComparerCanOrderNullValues: function () {
            Bridge.Test.Assert.areEqual$1(1, new System.Collections.Generic.Comparer$1(System.Int32)(System.Collections.Generic.Comparer$1.$default.fn).compare(0, null), "Compare(0, null) should be 1");
            Bridge.Test.Assert.areEqual$1(-1, new System.Collections.Generic.Comparer$1(System.Int32)(System.Collections.Generic.Comparer$1.$default.fn).compare(null, 0), "Compare(null, 0) should be -1");
            Bridge.Test.Assert.areEqual$1(0, new System.Collections.Generic.Comparer$1(System.Int32)(System.Collections.Generic.Comparer$1.$default.fn).compare(null, null), "Compare(null, null) should be 0");
        },
        defaultComparerUsesCompareMethodIfClassImplementsIComparable: function () {
            Bridge.Test.Assert.areEqual$1(-1, new System.Collections.Generic.Comparer$1(Bridge.ClientTest.Collections.Generic.ComparerTests.C)(System.Collections.Generic.Comparer$1.$default.fn).compare(new Bridge.ClientTest.Collections.Generic.ComparerTests.C(3), new Bridge.ClientTest.Collections.Generic.ComparerTests.C(8)), "Compare(3, 8) should be -1");
            Bridge.Test.Assert.areEqual$1(0, new System.Collections.Generic.Comparer$1(Bridge.ClientTest.Collections.Generic.ComparerTests.C)(System.Collections.Generic.Comparer$1.$default.fn).compare(new Bridge.ClientTest.Collections.Generic.ComparerTests.C(3), new Bridge.ClientTest.Collections.Generic.ComparerTests.C(3)), "Compare(3, 3) should be 0");
            Bridge.Test.Assert.areEqual$1(1, new System.Collections.Generic.Comparer$1(Bridge.ClientTest.Collections.Generic.ComparerTests.C)(System.Collections.Generic.Comparer$1.$default.fn).compare(new Bridge.ClientTest.Collections.Generic.ComparerTests.C(8), new Bridge.ClientTest.Collections.Generic.ComparerTests.C(3)), "Compare(8, 3) should be 1");
        },
        createWorks: function () {
            var comparer = new System.Collections.Generic.Comparer$1(System.Int32)($_.Bridge.ClientTest.Collections.Generic.ComparerTests.f1);
            Bridge.Test.Assert.areEqual$1(42, comparer.compare(8, 3), "The result should be 42");
        }
    });
    
    Bridge.ns("Bridge.ClientTest.Collections.Generic.ComparerTests", $_);
    
    Bridge.apply($_.Bridge.ClientTest.Collections.Generic.ComparerTests, {
        f1: function (x, y) {
            Bridge.Test.Assert.areEqual$1(8, x, "x should be 8");
            Bridge.Test.Assert.areEqual$1(3, y, "y should be 3");
            return 42;
        }
    });
    
    Bridge.define('Bridge.ClientTest.Collections.Generic.ComparerTests.C', {
        inherits: function () { return [System.IComparable$1(Bridge.ClientTest.Collections.Generic.ComparerTests.C)]; },
        value: 0,
        constructor: function (value) {
            this.value = value;
        },
        compareTo: function (other) {
            return Bridge.compare(this.value, other.value);
        }
    });
    
    Bridge.define('Bridge.ClientTest.Collections.Generic.EqualityComparerTests', {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.Collections.Generic.EqualityComparer$1$Object", Bridge.getTypeName(System.Collections.Generic.EqualityComparer$1(Object)), "FullName should be correct");
            var dict = new System.Collections.Generic.EqualityComparer$1(Object)();
            Bridge.Test.Assert.true$1(Bridge.is(dict, System.Collections.Generic.EqualityComparer$1(Object)), "is EqualityComparer<object> should be true");
            Bridge.Test.Assert.true$1(Bridge.is(dict, System.Collections.Generic.IEqualityComparer$1(Object)), "is IEqualityComparer<object> should be true");
        },
        defaultComparerCanGetHashCodeOfNumber: function () {
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((12345)), new System.Collections.Generic.EqualityComparer$1(Object)().getHashCode2(12345));
        },
        defaultComparerReturnsZeroAsHashCodeForNullAndUndefined: function () {
            Bridge.Test.Assert.areEqual(0, new System.Collections.Generic.EqualityComparer$1(Object)().getHashCode2(null));
            Bridge.Test.Assert.areEqual(0, new System.Collections.Generic.EqualityComparer$1(Object)().getHashCode2(undefined));
        },
        defaultComparerCanDetermineEquality: function () {
            var o1 = { }, o2 = { };
    
            Bridge.Test.Assert.true$1(new System.Collections.Generic.EqualityComparer$1(Object)().equals2(null, null), "null, null");
            Bridge.Test.Assert.false$1(new System.Collections.Generic.EqualityComparer$1(Object)().equals2(null, o1), "null, o1");
            Bridge.Test.Assert.false$1(new System.Collections.Generic.EqualityComparer$1(Object)().equals2(o1, null), "o1, null");
            Bridge.Test.Assert.true$1(new System.Collections.Generic.EqualityComparer$1(Object)().equals2(o1, o1), "o1, o1");
            Bridge.Test.Assert.false$1(new System.Collections.Generic.EqualityComparer$1(Object)().equals2(o1, o2), "o1, o2");
        },
        defaultComparerInvokesOverriddenGetHashCode: function () {
            Bridge.Test.Assert.areEqual(42158, new System.Collections.Generic.EqualityComparer$1(Object)().getHashCode2(Bridge.merge(new Bridge.ClientTest.Collections.Generic.EqualityComparerTests.MyClass(), {
                hashCode: 42158
            } )));
        },
        defaultComparerInvokesOverriddenEquals: function () {
            var c = new Bridge.ClientTest.Collections.Generic.EqualityComparerTests.MyClass();
            var other = new Bridge.ClientTest.Collections.Generic.EqualityComparerTests.MyClass();
            c.shouldEqual = false;
            Bridge.Test.Assert.false(new System.Collections.Generic.EqualityComparer$1(Object)().equals2(c, other));
            Bridge.Test.Assert.areStrictEqual(other, c.other);
    
            c.shouldEqual = true;
            c.other = null;
            Bridge.Test.Assert.true(new System.Collections.Generic.EqualityComparer$1(Object)().equals2(c, other));
            Bridge.Test.Assert.areStrictEqual(other, c.other);
    
            c.shouldEqual = true;
            c.other = other;
            Bridge.Test.Assert.false(new System.Collections.Generic.EqualityComparer$1(Object)().equals2(c, null)); // We should not invoke our own equals so its return value does not matter.
            Bridge.Test.Assert.areEqual(other, c.other); // We should not invoke our own equals so the 'other' member should not be set.
        }
    });
    
    Bridge.define('Bridge.ClientTest.Collections.Generic.EqualityComparerTests.MyClass', {
        hashCode: 0,
        other: null,
        shouldEqual: false,
        getHashCode: function () {
            return this.hashCode;
        },
        equals: function (o) {
            this.other = o;
            return this.shouldEqual;
        }
    });
    
    Bridge.define('Bridge.ClientTest.Collections.Generic.GenericDictionaryTests', {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.Collections.Generic.Dictionary$2$System.Int32$String", Bridge.getTypeName(System.Collections.Generic.Dictionary$2(System.Int32,String)), "FullName should be correct");
            var dict = new System.Collections.Generic.Dictionary$2(System.Int32,String)();
            Bridge.Test.Assert.true$1(Bridge.is(dict, System.Collections.Generic.Dictionary$2(System.Int32,String)), "is Dictionary<int,string> should be true");
            Bridge.Test.Assert.true$1(Bridge.is(dict, System.Collections.Generic.IDictionary$2(System.Int32,String)), "is IDictionary<int,string> should be true");
            Bridge.Test.Assert.true$1(Bridge.is(dict, System.Collections.Generic.IEnumerable$1(System.Collections.Generic.KeyValuePair$2(System.Int32,String))), "is IEnumerable<KeyValuePair<int,string>> should be true");
        },
        defaultConstructorWorks: function () {
            var d = new System.Collections.Generic.Dictionary$2(System.Int32,String)();
            Bridge.Test.Assert.areEqual$1(0, d.getCount(), "Count is 0");
            Bridge.Test.Assert.areEqual$1("Bridge.CustomEnumerator", Bridge.getTypeName(d.getEnumerator()), "Enumerator should be Bridge.CustomEnumerator");
            Bridge.Test.Assert.areEqual$1("System.Collections.Generic.EqualityComparer$1$Object", Bridge.getTypeName(d.getComparer()), "Comparer should be Bridge.EqualityComparer$1$Object");
        },
        capacityConstructorWorks: function () {
            var d = new System.Collections.Generic.Dictionary$2(System.Int32, String)();
            Bridge.Test.Assert.areEqual(0, d.getCount());
            Bridge.Test.Assert.areEqual$1("Bridge.CustomEnumerator", Bridge.getTypeName(d.getEnumerator()), "Enumerator should be Bridge.CustomEnumerator");
            Bridge.Test.Assert.areEqual$1("System.Collections.Generic.EqualityComparer$1$Object", Bridge.getTypeName(d.getComparer()), "Comparer should be Bridge.EqualityComparer$1$Object");
        },
        capacityAndEqualityComparerWorks: function () {
            var c = new Bridge.ClientTest.Collections.Generic.GenericDictionaryTests.TestEqualityComparer();
            var d = new System.Collections.Generic.Dictionary$2(String, String)(null, c);
            Bridge.Test.Assert.areEqual(0, d.getCount());
            Bridge.Test.Assert.areStrictEqual(c, d.getComparer());
        },
        equalityComparerOnlyConstructorWorks: function () {
            var c = new Bridge.ClientTest.Collections.Generic.GenericDictionaryTests.TestEqualityComparer();
            var d = new System.Collections.Generic.Dictionary$2(String, System.Int32)(null, c);
            Bridge.Test.Assert.areEqual(0, d.getCount());
            Bridge.Test.Assert.areStrictEqual(c, d.getComparer());
        },
        countWorks: function () {
            var d = new System.Collections.Generic.Dictionary$2(System.Int32,String)();
            Bridge.Test.Assert.areEqual(0, d.getCount());
            d.add(1, "1");
            Bridge.Test.Assert.areEqual(1, d.getCount());
            d.add(2, "2");
            Bridge.Test.Assert.areEqual(2, d.getCount());
        },
        keysWorks: function () {
            var $t;
            var d = Bridge.merge(new System.Collections.Generic.Dictionary$2(String,String)(), [
                ["1", "a"],
                ["2", "b"]
            ] );
            var keys = d.getKeys();
            Bridge.Test.Assert.true(Bridge.is(keys, System.Collections.Generic.IEnumerable$1(String)));
            Bridge.Test.Assert.true(Bridge.is(keys, System.Collections.Generic.ICollection$1(String)));
            Bridge.Test.Assert.areEqual(2, System.Array.getCount(keys));
            Bridge.Test.Assert.true(System.Array.contains(keys, "1"));
            Bridge.Test.Assert.true(System.Array.contains(keys, "2"));
            Bridge.Test.Assert.false(System.Array.contains(keys, "a"));
    
            var count = 0;
            $t = Bridge.getEnumerator(d.getKeys());
            while ($t.moveNext()) {
                var key = $t.getCurrent();
                if (!Bridge.referenceEquals(key, "1") && !Bridge.referenceEquals(key, "2")) {
                    Bridge.Test.Assert.fail$1("Unexpected key " + key);
                }
                count = (count + 1) | 0;
            }
            Bridge.Test.Assert.areEqual(2, count);
        },
        valuesWorks: function () {
            var $t;
            var d = Bridge.merge(new System.Collections.Generic.Dictionary$2(System.Int32,String)(), [
                [1, "a"],
                [2, "b"]
            ] );
            var values = d.getValues();
            Bridge.Test.Assert.true(Bridge.is(values, System.Collections.Generic.IEnumerable$1(String)));
            Bridge.Test.Assert.true(Bridge.is(values, System.Collections.Generic.ICollection$1(String)));
            Bridge.Test.Assert.areEqual(2, System.Array.getCount(values));
            Bridge.Test.Assert.true(System.Array.contains(values, "a"));
            Bridge.Test.Assert.true(System.Array.contains(values, "b"));
            Bridge.Test.Assert.false(System.Array.contains(values, "1"));
    
            var count = 0;
            $t = Bridge.getEnumerator(d.getValues());
            while ($t.moveNext()) {
                var value = $t.getCurrent();
                if (!Bridge.referenceEquals(value, "a") && !Bridge.referenceEquals(value, "b")) {
                    Bridge.Test.Assert.fail$1("Unexpected key " + value);
                }
                count = (count + 1) | 0;
            }
            Bridge.Test.Assert.areEqual(2, count);
        },
        indexerGetterWorksForExistingItems: function () {
            var d = Bridge.merge(new System.Collections.Generic.Dictionary$2(System.Int32,String)(), [
                [1, "a"],
                [2, "b"]
            ] );
            Bridge.Test.Assert.areEqual("a", d.get(1));
        },
        indexerSetterWorks: function () {
            var d = Bridge.merge(new System.Collections.Generic.Dictionary$2(System.Int32,String)(), [
                [1, "a"],
                [2, "b"]
            ] );
            d.set(2, "c");
            d.set(3, "d");
            Bridge.Test.Assert.areEqual(d.getCount(), 3);
            Bridge.Test.Assert.areEqual("a", d.get(1));
            Bridge.Test.Assert.areEqual("c", d.get(2));
            Bridge.Test.Assert.areEqual("d", d.get(3));
        },
        indexerGetterThrowsForNonExistingItems: function () {
            var d = Bridge.merge(new System.Collections.Generic.Dictionary$2(System.Int32,String)(), [
                [1, "a"],
                [2, "b"]
            ] );
            try {
                var x = d.get(10);
                Bridge.Test.Assert.true(false);
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                if (Bridge.is($e1, System.Collections.Generic.KeyNotFoundException)) {
                }
                else {
                    throw $e1;
                }
            }
        },
        addWorks: function () {
            var d = Bridge.merge(new System.Collections.Generic.Dictionary$2(System.Int32,String)(), [
                [1, "a"],
                [2, "b"]
            ] );
            d.add(3, "c");
            Bridge.Test.Assert.areEqual(d.getCount(), 3);
            Bridge.Test.Assert.areEqual("a", d.get(1));
            Bridge.Test.Assert.areEqual("b", d.get(2));
            Bridge.Test.Assert.areEqual("c", d.get(3));
        },
        addThrowsIfItemAlreadyExists: function () {
            var d = Bridge.merge(new System.Collections.Generic.Dictionary$2(System.Int32,String)(), [
                [1, "a"],
                [2, "b"]
            ] );
            try {
                d.add(2, "b");
                Bridge.Test.Assert.true(false);
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                if (Bridge.is($e1, System.ArgumentException)) {
                }
                else {
                    throw $e1;
                }
            }
        },
        clearWorks: function () {
            var d = Bridge.merge(new System.Collections.Generic.Dictionary$2(System.Int32,String)(), [
                [1, "a"],
                [2, "b"]
            ] );
            d.clear();
            Bridge.Test.Assert.areEqual(0, d.getCount());
        },
        containsKeyWorks: function () {
            var d = Bridge.merge(new System.Collections.Generic.Dictionary$2(System.Int32,String)(), [
                [1, "a"],
                [2, "b"]
            ] );
            Bridge.Test.Assert.true(d.containsKey(1));
            Bridge.Test.Assert.false(d.containsKey(3));
        },
        enumeratingWorks: function () {
            var $t;
            var d = Bridge.merge(new System.Collections.Generic.Dictionary$2(String,String)(), [
                ["1", "a"],
                ["2", "b"]
            ] );
            var count = 0;
            $t = Bridge.getEnumerator(d);
            while ($t.moveNext()) {
                var kvp = $t.getCurrent();
                if (Bridge.referenceEquals(kvp.key, "1")) {
                    Bridge.Test.Assert.areEqual("a", kvp.value);
                }
                else  {
                    if (Bridge.referenceEquals(kvp.key, "2")) {
                        Bridge.Test.Assert.areEqual("b", kvp.value);
                    }
                    else  {
                        Bridge.Test.Assert.fail$1("Invalid key " + kvp.key);
                    }
                }
                count = (count + 1) | 0;
            }
            Bridge.Test.Assert.areEqual(2, count);
        },
        removeWorks: function () {
            var d = Bridge.merge(new System.Collections.Generic.Dictionary$2(System.Int32,String)(), [
                [1, "a"],
                [2, "b"]
            ] );
            Bridge.Test.Assert.areStrictEqual(true, d.remove(2));
            Bridge.Test.Assert.areStrictEqual(false, d.remove(3));
            Bridge.Test.Assert.areEqual(1, d.getCount());
            Bridge.Test.Assert.areEqual("a", d.get(1));
        },
        tryGetValueWithIntKeysWorks: function () {
            var d = Bridge.merge(new System.Collections.Generic.Dictionary$2(String,System.Int32)(), [
                ["a", 1],
                ["b", 2]
            ] );
            var i = { };
    
            Bridge.Test.Assert.true(d.tryGetValue("a", i));
            Bridge.Test.Assert.areEqual(1, i.v);
            Bridge.Test.Assert.false(d.tryGetValue("c", i));
            Bridge.Test.Assert.areEqual(0, i.v);
        },
        tryGetValueWithObjectKeysWorks: function () {
            var d = Bridge.merge(new System.Collections.Generic.Dictionary$2(String,Object)(), [
                ["a", 1],
                ["b", "X"]
            ] );
            var o = { };
    
            Bridge.Test.Assert.true(d.tryGetValue("a", o));
            Bridge.Test.Assert.areEqual(1, o.v);
            Bridge.Test.Assert.false(d.tryGetValue("c", o));
            Bridge.Test.Assert.areStrictEqual(null, o.v);
        },
        canUseCustomComparer: function () {
            var d = Bridge.merge(new System.Collections.Generic.Dictionary$2(String, System.Int32)(null, new Bridge.ClientTest.Collections.Generic.GenericDictionaryTests.TestEqualityComparer()), [
                ["a", 1],
                ["b", 2]
            ] );
            d.set("a2", 100);
            Bridge.Test.Assert.areEqual(100, d.get("a3"));
            Bridge.Test.Assert.areEqual(2, d.getCount());
        }
    });
    
    Bridge.define('Bridge.ClientTest.Collections.Generic.GenericDictionaryTests.TestEqualityComparer', {
        inherits: [System.Collections.Generic.EqualityComparer$1(String)],
        equals2: function (x, y) {
            return x.charCodeAt(0) === y.charCodeAt(0);
        },
        getHashCode2: function (obj) {
            return obj.charCodeAt(0);
        }
    });
    
    Bridge.define('Bridge.ClientTest.Collections.Generic.ICollectionTests', {
        arrayImplementsICollection: function () {
            Bridge.Test.Assert.true(Bridge.is(System.Array.init(1, 0), System.Collections.Generic.ICollection$1(System.Int32)));
        },
        customClassThatShouldImplementICollectionDoesSo: function () {
            Bridge.Test.Assert.true(Bridge.is(new Bridge.ClientTest.Collections.Generic.ICollectionTests.MyCollection(System.Array.init(0, null)), System.Collections.Generic.ICollection$1(String)));
        },
        arrayCastToICollectionCountWorks: function () {
            Bridge.Test.Assert.areEqual(3, System.Array.getCount(Bridge.cast(["x", "y", "z"], System.Collections.Generic.ICollection$1(String))));
        },
        classImplementingICollectionCountWorks: function () {
            Bridge.Test.Assert.areEqual(2, new Bridge.ClientTest.Collections.Generic.ICollectionTests.MyCollection(["x", "y"]).getCount());
        },
        classImplementingICollectionCastToICollectionCountWorks: function () {
            Bridge.Test.Assert.areEqual(3, System.Array.getCount(Bridge.cast(new Bridge.ClientTest.Collections.Generic.ICollectionTests.MyCollection(["x", "y", "z"]), System.Collections.Generic.ICollection$1(String))));
        },
        classImplementingICollectionAddWorks: function () {
            var c = new Bridge.ClientTest.Collections.Generic.ICollectionTests.MyCollection(["x", "y"]);
            c.add("z");
            Bridge.Test.Assert.areEqual(3, c.getCount());
            Bridge.Test.Assert.true(c.contains("z"));
        },
        classImplementingICollectionCastToICollectionAddWorks: function () {
            var c = new Bridge.ClientTest.Collections.Generic.ICollectionTests.MyCollection(["x", "y"]);
            System.Array.add(c, "z");
            Bridge.Test.Assert.areEqual(3, System.Array.getCount(c));
            Bridge.Test.Assert.true(System.Array.contains(c, "z"));
        },
        classImplementingICollectionClearWorks: function () {
            var c = new Bridge.ClientTest.Collections.Generic.ICollectionTests.MyCollection(["x", "y"]);
            c.clear();
            Bridge.Test.Assert.areEqual(0, c.getCount());
        },
        classImplementingICollectionCastToICollectionClearWorks: function () {
            var c = new Bridge.ClientTest.Collections.Generic.ICollectionTests.MyCollection(["x", "y"]);
            System.Array.clear(c, String);
            Bridge.Test.Assert.areEqual(0, System.Array.getCount(c));
        },
        arrayCastToICollectionContainsWorks: function () {
            var arr = [new Bridge.ClientTest.Collections.Generic.ICollectionTests.C(1), new Bridge.ClientTest.Collections.Generic.ICollectionTests.C(2), new Bridge.ClientTest.Collections.Generic.ICollectionTests.C(3)];
            Bridge.Test.Assert.true(System.Array.contains(arr, new Bridge.ClientTest.Collections.Generic.ICollectionTests.C(2)));
            Bridge.Test.Assert.false(System.Array.contains(arr, new Bridge.ClientTest.Collections.Generic.ICollectionTests.C(4)));
        },
        classImplementingICollectionContainsWorks: function () {
            var c = new Bridge.ClientTest.Collections.Generic.ICollectionTests.MyCollection(["x", "y"]);
            Bridge.Test.Assert.true(c.contains("x"));
            Bridge.Test.Assert.false(c.contains("z"));
        },
        classImplementingICollectionCastToICollectionContainsWorks: function () {
            var c = new Bridge.ClientTest.Collections.Generic.ICollectionTests.MyCollection(["x", "y"]);
            Bridge.Test.Assert.true(System.Array.contains(c, "x"));
            Bridge.Test.Assert.false(System.Array.contains(c, "z"));
        },
        classImplementingICollectionRemoveWorks: function () {
            var c = new Bridge.ClientTest.Collections.Generic.ICollectionTests.MyCollection(["x", "y"]);
            c.remove("x");
            Bridge.Test.Assert.areEqual(1, c.getCount());
            c.remove("y");
            Bridge.Test.Assert.areEqual(0, c.getCount());
        },
        classImplementingICollectionCastToICollectionRemoveWorks: function () {
            var c = new Bridge.ClientTest.Collections.Generic.ICollectionTests.MyCollection(["x", "y"]);
            System.Array.remove(c, "x");
            Bridge.Test.Assert.areEqual(1, System.Array.getCount(c));
            System.Array.remove(c, "y");
            Bridge.Test.Assert.areEqual(0, System.Array.getCount(c));
        }
    });
    
    Bridge.define('Bridge.ClientTest.Collections.Generic.ICollectionTests.C', {
        _i: 0,
        constructor: function (i) {
            this._i = i;
        },
        equals: function (o) {
            return Bridge.is(o, Bridge.ClientTest.Collections.Generic.ICollectionTests.C) && this._i === Bridge.cast(o, Bridge.ClientTest.Collections.Generic.ICollectionTests.C)._i;
        },
        getHashCode: function () {
            return this._i;
        }
    });
    
    Bridge.define('Bridge.ClientTest.Collections.Generic.ICollectionTests.MyCollection', {
        inherits: [System.Collections.Generic.ICollection$1(String)],
        config: {
            properties: {
                Items: null
            }
        },
        constructor: function (items) {
            this.setItems(new System.Collections.Generic.List$1(String)(items));
        },
        getCount: function () {
            return this.getItems().getCount();
        },
        getEnumerator: function () {
            return this.getEnumerator$1();
        },
        getEnumerator$1: function () {
            return this.getItems().getEnumerator();
        },
        add: function (item) {
            this.getItems().add(item);
        },
        clear: function () {
            this.getItems().clear();
        },
        contains: function (item) {
            return this.getItems().contains(item);
        },
        remove: function (item) {
            return this.getItems().remove(item);
        }
    });
    
    Bridge.define('Bridge.ClientTest.Collections.Generic.IDictionaryTests', {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.Collections.Generic.IDictionary$2$Object$Object", Bridge.getTypeName(System.Collections.Generic.IDictionary$2(Object,Object)), "FullName should be correct");
        },
        classImplementsInterfaces: function () {
            Bridge.Test.Assert.true(Bridge.is(new Bridge.ClientTest.Collections.Generic.IDictionaryTests.MyDictionary("constructor"), System.Collections.Generic.IDictionary$2(System.Int32,String)));
        },
        countWorks: function () {
            var d = new Bridge.ClientTest.Collections.Generic.IDictionaryTests.MyDictionary("constructor");
            Bridge.Test.Assert.areEqual(0, d.getCount());
    
            var d2 = new Bridge.ClientTest.Collections.Generic.IDictionaryTests.MyDictionary("constructor$1", Bridge.merge(new System.Collections.Generic.Dictionary$2(System.Int32,String)(), [
                [3, "c"]
            ] ));
            Bridge.Test.Assert.areEqual(1, d2.getCount());
    
            var d3 = new Bridge.ClientTest.Collections.Generic.IDictionaryTests.MyDictionary("constructor");
            Bridge.Test.Assert.areEqual(0, d3.getCount());
        },
        keysWorks: function () {
            var $t;
            var actualKeys = [3, 6, 9];
            var d = new Bridge.ClientTest.Collections.Generic.IDictionaryTests.MyDictionary("constructor$1", Bridge.merge(new System.Collections.Generic.Dictionary$2(System.Int32,String)(), [
                [3, "b"],
                [6, "z"],
                [9, "x"]
            ] ));
            var keys = d.getKeys();
            Bridge.Test.Assert.true$1(Bridge.is(keys, System.Collections.Generic.IEnumerable$1(System.Int32)), "IEnumerable<int>");
            Bridge.Test.Assert.true$1(true, "ICollection<int>");
    
            var i = 0;
            $t = Bridge.getEnumerator(keys);
            while ($t.moveNext()) {
                var key = $t.getCurrent();
                Bridge.Test.Assert.areEqual(actualKeys[i], key);
                i = (i + 1) | 0;
            }
            Bridge.Test.Assert.areEqual(actualKeys.length, i);
        },
        getItemWorks: function () {
            var d = new Bridge.ClientTest.Collections.Generic.IDictionaryTests.MyDictionary("constructor$1", Bridge.merge(new System.Collections.Generic.Dictionary$2(System.Int32,String)(), [
                [3, "b"],
                [6, "z"],
                [9, "x"]
            ] ));
    
            var di2 = Bridge.cast(d, System.Collections.Generic.IDictionary$2(System.Int32,String));
    
            Bridge.Test.Assert.areEqual("x", d.getItem(9));
            Bridge.Test.Assert.areEqual("z", di2.getItem(6));
    
            try {
                var x = d.getItem(1);
                Bridge.Test.Assert.fail$1("Should throw");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
            }
    
            try {
                var x1 = di2.getItem(1);
                Bridge.Test.Assert.fail$1("Should throw");
            }
            catch ($e2) {
                $e2 = System.Exception.create($e2);
            }
        },
        valuesWorks: function () {
            var $t;
            var actualValues = ["b", "z", "x"];
            var d2 = new Bridge.ClientTest.Collections.Generic.IDictionaryTests.MyDictionary("constructor$1", Bridge.merge(new System.Collections.Generic.Dictionary$2(System.Int32,String)(), [
                [3, "b"],
                [6, "z"],
                [9, "x"]
            ] ));
            var values = d2.getValues();
            Bridge.Test.Assert.true(Bridge.is(values, System.Collections.Generic.IEnumerable$1(String)));
    
            var i = 0;
    
            $t = Bridge.getEnumerator(values);
            while ($t.moveNext()) {
                var val = $t.getCurrent();
                Bridge.Test.Assert.areEqual(actualValues[i], val);
                i = (i + 1) | 0;
            }
            Bridge.Test.Assert.areEqual(actualValues.length, i);
        },
        containsKeyWorks: function () {
            var d = new Bridge.ClientTest.Collections.Generic.IDictionaryTests.MyDictionary("constructor$1", Bridge.merge(new System.Collections.Generic.Dictionary$2(System.Int32,String)(), [
                [3, "b"],
                [6, "z"],
                [9, "x"]
            ] ));
            var di2 = Bridge.cast(d, System.Collections.Generic.IDictionary$2(System.Int32,String));
    
            Bridge.Test.Assert.true(d.containsKey(9));
            Bridge.Test.Assert.true(di2.containsKey(3));
    
            Bridge.Test.Assert.false(d.containsKey(923));
            Bridge.Test.Assert.false(di2.containsKey(353));
        },
        tryGetValueWorks: function () {
            var d = new Bridge.ClientTest.Collections.Generic.IDictionaryTests.MyDictionary("constructor$1", Bridge.merge(new System.Collections.Generic.Dictionary$2(System.Int32,String)(), [
                [3, "b"],
                [6, "z"],
                [9, "x"]
            ] ));
            var di2 = Bridge.cast(d, System.Collections.Generic.IDictionary$2(System.Int32,String));
    
            var outVal = { };
    
            Bridge.Test.Assert.true(d.tryGetValue(9, outVal));
            Bridge.Test.Assert.areEqual("x", outVal.v);
    
            Bridge.Test.Assert.true(di2.tryGetValue(3, outVal));
            Bridge.Test.Assert.areEqual("b", outVal.v);
    
            outVal.v = "!!!";
            Bridge.Test.Assert.false(d.tryGetValue(923, outVal));
            Bridge.Test.Assert.areEqual(null, outVal.v);
    
            outVal.v = "!!!";
            Bridge.Test.Assert.false(di2.tryGetValue(353, outVal));
            Bridge.Test.Assert.areEqual(null, outVal.v);
        },
        addWorks: function () {
            var d = new Bridge.ClientTest.Collections.Generic.IDictionaryTests.MyDictionary("constructor");
            var di = Bridge.cast(d, System.Collections.Generic.IDictionary$2(System.Int32,String));
    
            d.add(5, "aa");
            Bridge.Test.Assert.areEqual("aa", d.getItem(5));
            Bridge.Test.Assert.areEqual(1, d.getCount());
    
            di.add(3, "bb");
            Bridge.Test.Assert.areEqual(di.getItem(3), "bb");
    
            var s = { };
            di.tryGetValue(3, s);
            Bridge.Test.Assert.areEqual("bb", s.v);
            Bridge.Test.Assert.areEqual(2, di.getCount());
    
            try {
                d.add(5, "zz");
                Bridge.Test.Assert.fail$1("Should throw");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
            }
        },
        clearWorks: function () {
            var d = new Bridge.ClientTest.Collections.Generic.IDictionaryTests.MyDictionary("constructor$1", Bridge.merge(new System.Collections.Generic.Dictionary$2(System.Int32,String)(), [
                [3, "b"],
                [6, "z"],
                [9, "x"]
            ] ));
    
            Bridge.Test.Assert.areEqual(3, d.getCount());
            d.clear();
            Bridge.Test.Assert.areEqual(0, d.getCount());
        },
        removeWorks: function () {
            var d = new Bridge.ClientTest.Collections.Generic.IDictionaryTests.MyDictionary("constructor$1", Bridge.merge(new System.Collections.Generic.Dictionary$2(System.Int32,String)(), [
                [3, "b"],
                [6, "z"],
                [9, "x"],
                [13, "y"]
            ] ));
            var di = Bridge.cast(d, System.Collections.Generic.IDictionary$2(System.Int32,String));
    
            Bridge.Test.Assert.areStrictEqual(true, d.remove(6));
            Bridge.Test.Assert.areEqual(3, d.getCount());
            Bridge.Test.Assert.false(d.containsKey(6));
    
            Bridge.Test.Assert.areStrictEqual(true, di.remove(3));
            Bridge.Test.Assert.areEqual(2, di.getCount());
            Bridge.Test.Assert.false(di.containsKey(3));
    
            Bridge.Test.Assert.true(di.containsKey(13));
        },
        setItemWorks: function () {
            var d = new Bridge.ClientTest.Collections.Generic.IDictionaryTests.MyDictionary("constructor$1", Bridge.merge(new System.Collections.Generic.Dictionary$2(System.Int32,String)(), [
                [3, "b"],
                [6, "z"],
                [9, "x"],
                [13, "y"]
            ] ));
            var di = Bridge.cast(d, System.Collections.Generic.IDictionary$2(System.Int32,String));
    
            d.setItem(3, "check");
            Bridge.Test.Assert.areEqual("check", d.getItem(3));
            Bridge.Test.Assert.false(d.containsKey(10));
    
            di.setItem(10, "stuff");
            Bridge.Test.Assert.areEqual("stuff", di.getItem(10));
            Bridge.Test.Assert.true(di.containsKey(10));
        }
    });
    
    Bridge.define('Bridge.ClientTest.Collections.Generic.IDictionaryTests.MyDictionary', {
        inherits: [System.Collections.Generic.IDictionary$2(System.Int32,String)],
        _backingDictionary: null,
        constructor: function () {
            Bridge.ClientTest.Collections.Generic.IDictionaryTests.MyDictionary.prototype.constructor$1.call(this, new System.Collections.Generic.Dictionary$2(System.Int32,String)());
    
        },
        constructor$1: function (initialValues) {
            this._backingDictionary = initialValues;
        },
        getItem: function (key) {
            return this._backingDictionary.get(key);
        },
        setItem: function (key, value) {
            this._backingDictionary.set(key, value);
        },
        getKeys: function () {
            return this._backingDictionary.getKeys();
        },
        getValues: function () {
            return this._backingDictionary.getValues();
        },
        getCount: function () {
            return this._backingDictionary.getCount();
        },
        getEnumerator: function () {
            return this.getEnumerator$1();
        },
        getEnumerator$1: function () {
            return this._backingDictionary.getEnumerator();
        },
        add: function (key, value) {
            this._backingDictionary.add(key, value);
        },
        remove: function (key) {
            return this._backingDictionary.remove(key);
        },
        containsKey: function (key) {
            return this._backingDictionary.containsKey(key);
        },
        tryGetValue: function (key, value) {
            return this._backingDictionary.tryGetValue(key, value);
        },
        clear: function () {
            this._backingDictionary.clear();
        }
    });
    
    Bridge.define('Bridge.ClientTest.Collections.Generic.IEnumerableTests', {
        arrayImplementsIEnumerable: function () {
            Bridge.Test.Assert.true(Bridge.is(System.Array.init(1, 0), System.Collections.Generic.IEnumerable$1(System.Int32)));
        },
        customClassThatShouldImplementIEnumerableDoesSo: function () {
            Bridge.Test.Assert.true(Bridge.is(new Bridge.ClientTest.Collections.Generic.IEnumerableTests.MyEnumerable(), System.Collections.Generic.IEnumerable$1(String)));
        },
        arrayGetEnumeratorMethodWorks: function () {
            var e = Bridge.getEnumerator(["x", "y", "z"]);
            Bridge.Test.Assert.true(e.moveNext());
            Bridge.Test.Assert.areEqual("x", e.getCurrent());
            Bridge.Test.Assert.true(e.moveNext());
            Bridge.Test.Assert.areEqual("y", e.getCurrent());
            Bridge.Test.Assert.true(e.moveNext());
            Bridge.Test.Assert.areEqual("z", e.getCurrent());
            Bridge.Test.Assert.false(e.moveNext());
        },
        arrayCastToIEnumerableCanBeEnumerated: function () {
            var enm = ["x", "y", "z"];
            var e = Bridge.getEnumerator(enm, "$1");
            Bridge.Test.Assert.true(e.moveNext());
            Bridge.Test.Assert.areEqual("x", e.getCurrent$1());
            Bridge.Test.Assert.true(e.moveNext());
            Bridge.Test.Assert.areEqual("y", e.getCurrent$1());
            Bridge.Test.Assert.true(e.moveNext());
            Bridge.Test.Assert.areEqual("z", e.getCurrent$1());
            Bridge.Test.Assert.false(e.moveNext());
        },
        classImplementingIEnumerableCanBeEnumerated: function () {
            var enm = new Bridge.ClientTest.Collections.Generic.IEnumerableTests.MyEnumerable();
            var e = enm.getEnumerator$1();
            Bridge.Test.Assert.true(e.moveNext());
            Bridge.Test.Assert.areEqual("x", e.getCurrent$1());
            Bridge.Test.Assert.true(e.moveNext());
            Bridge.Test.Assert.areEqual("y", e.getCurrent$1());
            Bridge.Test.Assert.true(e.moveNext());
            Bridge.Test.Assert.areEqual("z", e.getCurrent$1());
            Bridge.Test.Assert.false(e.moveNext());
        },
        classImplementingIEnumerableCastToIEnumerableCanBeEnumerated: function () {
            var enm = new Bridge.ClientTest.Collections.Generic.IEnumerableTests.MyEnumerable();
            var e = Bridge.getEnumerator(enm, "$1");
            Bridge.Test.Assert.true(e.moveNext());
            Bridge.Test.Assert.areEqual("x", e.getCurrent$1());
            Bridge.Test.Assert.true(e.moveNext());
            Bridge.Test.Assert.areEqual("y", e.getCurrent$1());
            Bridge.Test.Assert.true(e.moveNext());
            Bridge.Test.Assert.areEqual("z", e.getCurrent$1());
            Bridge.Test.Assert.false(e.moveNext());
        }
    });
    
    Bridge.define('Bridge.ClientTest.Collections.Generic.IEnumerableTests.MyEnumerable', {
        inherits: [System.Collections.Generic.IEnumerable$1(String)],
        getEnumerator$1: function () {
            var $yield = [];
            $yield.push("x");
            $yield.push("y");
            $yield.push("z");
            return System.Array.toEnumerator($yield);
        },
        getEnumerator: function () {
            return this.getEnumerator$1();
        }
    });
    
    Bridge.define('Bridge.ClientTest.Collections.Generic.IListTests', {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.Collections.Generic.IList$1$Object", Bridge.getTypeName(System.Collections.Generic.IList$1(Object)), "FullName should be correct");
    
            var iList = new System.Collections.Generic.List$1(Object)();
    
            Bridge.Test.Assert.true$1(Bridge.is(iList, System.Collections.Generic.IEnumerable$1(Object)), "Interfaces should contain IEnumerable");
            Bridge.Test.Assert.true$1(Bridge.is(iList, System.Collections.Generic.ICollection$1(Object)), "Interfaces should contain ICollection");
        },
        arrayImplementsIList: function () {
            Bridge.Test.Assert.true(Bridge.is(System.Array.init(1, 0), System.Collections.Generic.IList$1(System.Int32)));
        },
        customClassThatShouldImplementIListDoesSo: function () {
            Bridge.Test.Assert.true(Bridge.is(new Bridge.ClientTest.Collections.Generic.IListTests.MyList(System.Array.init(0, null)), System.Collections.Generic.IList$1(String)));
        },
        arrayCastToIListGetItemWorks: function () {
            var l = ["x", "y", "z"];
            Bridge.Test.Assert.areEqual("y", System.Array.getItem(l, 1));
        },
        classImplementingIListGetItemWorks: function () {
            var l = new Bridge.ClientTest.Collections.Generic.IListTests.MyList(["x", "y", "z"]);
            Bridge.Test.Assert.areEqual("y", l.getItem(1));
        },
        classImplementingIListCastToIListGetItemWorks: function () {
            var l = new Bridge.ClientTest.Collections.Generic.IListTests.MyList(["x", "y", "z"]);
            Bridge.Test.Assert.areEqual("y", System.Array.getItem(l, 1));
        },
        arrayCastToIListSetItemWorks: function () {
            var l = ["x", "y", "z"];
            System.Array.setItem(l, 1, "a");
            Bridge.Test.Assert.areEqual("a", System.Array.getItem(l, 1));
        },
        classImplementingIListSetItemWorks: function () {
            var l = new Bridge.ClientTest.Collections.Generic.IListTests.MyList(["x", "y", "z"]);
            l.setItem(1, "a");
            Bridge.Test.Assert.areEqual("a", l.getItem(1));
        },
        classImplementingIListCastToIListSetItemWorks: function () {
            var l = new Bridge.ClientTest.Collections.Generic.IListTests.MyList(["x", "y", "z"]);
            System.Array.setItem(l, 1, "a");
            Bridge.Test.Assert.areEqual("a", System.Array.getItem(l, 1));
        },
        arrayCastToIListIndexOfWorks: function () {
            var arr = [new Bridge.ClientTest.Collections.Generic.IListTests.C(1), new Bridge.ClientTest.Collections.Generic.IListTests.C(2), new Bridge.ClientTest.Collections.Generic.IListTests.C(3)];
            Bridge.Test.Assert.areEqual(1, System.Array.indexOf(arr, new Bridge.ClientTest.Collections.Generic.IListTests.C(2)));
            Bridge.Test.Assert.areEqual(-1, System.Array.indexOf(arr, new Bridge.ClientTest.Collections.Generic.IListTests.C(4)));
        },
        classImplementingIListIndexOfWorks: function () {
            var c = new Bridge.ClientTest.Collections.Generic.IListTests.MyList(["x", "y"]);
            Bridge.Test.Assert.areEqual(1, c.indexOf("y"));
            Bridge.Test.Assert.areEqual(-1, c.indexOf("z"));
        },
        classImplementingIListCastToIListIndexOfWorks: function () {
            var l = new Bridge.ClientTest.Collections.Generic.IListTests.MyList(["x", "y"]);
            Bridge.Test.Assert.areEqual(1, System.Array.indexOf(l, "y"));
            Bridge.Test.Assert.areEqual(-1, System.Array.indexOf(l, "z"));
        },
        classImplementingIListInsertWorks: function () {
            var l = new Bridge.ClientTest.Collections.Generic.IListTests.MyList(["x", "y"]);
            l.insert(1, "z");
            Bridge.Test.Assert.areDeepEqual(["x", "z", "y"], l.getItems().toArray());
        },
        classImplementingIListCastToIListInsertWorks: function () {
            var l = new Bridge.ClientTest.Collections.Generic.IListTests.MyList(["x", "y"]);
            System.Array.insert(l, 1, "z");
            Bridge.Test.Assert.areDeepEqual(["x", "z", "y"], Bridge.cast(l, Bridge.ClientTest.Collections.Generic.IListTests.MyList).getItems().toArray());
        },
        classImplementingIListRemoveAtWorks: function () {
            var l = new Bridge.ClientTest.Collections.Generic.IListTests.MyList(["x", "y", "z"]);
            l.removeAt(1);
            Bridge.Test.Assert.areDeepEqual(["x", "z"], l.getItems().toArray());
        },
        classImplementingIListCastToIListRemoveAtWorks: function () {
            var l = new Bridge.ClientTest.Collections.Generic.IListTests.MyList(["x", "y", "z"]);
            System.Array.removeAt(l, 1);
            Bridge.Test.Assert.areDeepEqual(["x", "z"], Bridge.cast(l, Bridge.ClientTest.Collections.Generic.IListTests.MyList).getItems().toArray());
        }
    });
    
    Bridge.define('Bridge.ClientTest.Collections.Generic.IListTests.C', {
        _i: 0,
        constructor: function (i) {
            this._i = i;
        },
        equals: function (o) {
            return Bridge.is(o, Bridge.ClientTest.Collections.Generic.IListTests.C) && this._i === Bridge.cast(o, Bridge.ClientTest.Collections.Generic.IListTests.C)._i;
        },
        getHashCode: function () {
            return this._i;
        }
    });
    
    Bridge.define('Bridge.ClientTest.Collections.Generic.IListTests.MyList', {
        inherits: [System.Collections.Generic.IList$1(String)],
        config: {
            properties: {
                Items: null
            }
        },
        constructor: function (items) {
            this.setItems(new System.Collections.Generic.List$1(String)(items));
        },
        getCount: function () {
            return this.getItems().getCount();
        },
        getItem: function (index) {
            return this.getItems().getItem(index);
        },
        setItem: function (index, value) {
            this.getItems().setItem(index, value);
        },
        getEnumerator: function () {
            return this.getEnumerator$1();
        },
        getEnumerator$1: function () {
            return this.getItems().getEnumerator();
        },
        add: function (item) {
            this.getItems().add(item);
        },
        clear: function () {
            this.getItems().clear();
        },
        contains: function (item) {
            return this.getItems().contains(item);
        },
        remove: function (item) {
            return this.getItems().remove(item);
        },
        indexOf: function (item) {
            return this.getItems().indexOf(item);
        },
        insert: function (index, item) {
            this.getItems().insert(index, item);
        },
        removeAt: function (index) {
            this.getItems().removeAt(index);
        }
    });
    
    Bridge.define('Bridge.ClientTest.Collections.Generic.IteratorBlockTests', {
        assertEqual: function (actual, expected, message) {
            if (message === void 0) { message = null; }
            Bridge.Test.Assert.areEqual$1(System.String.replaceAll(expected, "\r\n", "\n"), System.String.replaceAll(actual, "\r\n", "\n"), message);
        },
        typeReturnedByIteratorBlockReturningIEnumeratorImplementsThatInterfaceAndIDisposable: function () {
            var enm = new Bridge.ClientTest.Collections.Generic.IteratorBlockTests.C(new System.Text.StringBuilder()).getEnumerator(0);
            Bridge.Test.Assert.true(Bridge.is(enm, System.Collections.IEnumerator));
        },
        enumeratingIEnumeratorIteratorToEndWorks: function () {
            //TODO expected for v1: yield iterator works with no state machine
            var sb = new System.Text.StringBuilder();
            var enm = new Bridge.ClientTest.Collections.Generic.IteratorBlockTests.C(sb).getEnumerator(2);
    
            while (enm.moveNext()) {
                sb.appendLine("got " + enm.getCurrent$1());
            }
    
            this.assertEqual(sb.toString(), "yielding 0\nyielding 1\nyielding -1\nin finally\ngot 0\ngot 1\ngot -1\n");
        },
        prematureDisposalOfIEnumeratorIteratorExecutesFinallyBlocks: function () {
            //TODO expected for v1: yield iterator works with no state machine
    
            var sb = new System.Text.StringBuilder();
            var enm = new Bridge.ClientTest.Collections.Generic.IteratorBlockTests.C(sb).getEnumerator(5);
    
            for (var i = 0; i < 2; i = (i + 1) | 0) {
                enm.moveNext();
                sb.appendLine("got " + enm.getCurrent$1());
            }
            enm.dispose();
    
            this.assertEqual(sb.toString(), "yielding 0\nyielding 1\nyielding 2\nyielding 3\nyielding 4\nyielding -1\nin finally\ngot 0\ngot 1\n");
        },
        exceptionInIEnumeratorIteratorBodyExecutesFinallyBlocks: function () {
            //TODO expected for v1: yield iterator works with no state machine
    
            var sb = new System.Text.StringBuilder();
    
            try {
                var enm = new Bridge.ClientTest.Collections.Generic.IteratorBlockTests.C(sb).getEnumeratorThrows();
                for (var i = 0; i < 100; i = (i + 1) | 0) {
                    enm.moveNext();
                    sb.appendLine("got " + enm.getCurrent$1());
                }
                Bridge.Test.Assert.fail$1("Should have thrown an exception in the loop");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                sb.appendLine("caught exception");
            }
    
            this.assertEqual(sb.toString(), "yielding 1\nyielding 2\nthrowing\nin finally\ncaught exception\n");
        },
        typeReturnedByIteratorBlockReturningIEnumerableImplementsThatInterface: function () {
            var enm = new Bridge.ClientTest.Collections.Generic.IteratorBlockTests.C(new System.Text.StringBuilder()).getEnumerable(0);
            Bridge.Test.Assert.true(Bridge.is(enm, System.Collections.IEnumerable));
        },
        enumeratingIEnumerableIteratorToEndWorks: function () {
            var $t, $t1;
            //TODO expected for v1: yield iterator works with no state machine
    
            var sb = new System.Text.StringBuilder();
            var enm = new Bridge.ClientTest.Collections.Generic.IteratorBlockTests.C(sb).getEnumerable(2);
    
            $t = Bridge.getEnumerator(enm);
            while ($t.moveNext()) {
                var i = $t.getCurrent();
                sb.appendLine("got " + i);
            }
    
            sb.appendLine("-");
    
            $t1 = Bridge.getEnumerator(enm);
            while ($t1.moveNext()) {
                var i1 = $t1.getCurrent();
                sb.appendLine("got " + i1);
            }
    
            this.assertEqual(sb.toString(), "yielding 0\nyielding 1\nyielding -1\nin finally\ngot 0\ngot 1\ngot -1\n-\ngot 0\ngot 1\ngot -1\n");
        },
        prematureDisposalOfIEnumerableIteratorExecutesFinallyBlocks: function () {
            var $t;
            //TODO expected for v1: yield iterator works with no state machine
    
            var sb = new System.Text.StringBuilder();
            var n = 0;
            $t = Bridge.getEnumerator(new Bridge.ClientTest.Collections.Generic.IteratorBlockTests.C(sb).getEnumerable(5));
            while ($t.moveNext()) {
                var i = $t.getCurrent();
                sb.appendLine("got " + i);
                if (((n = (n + 1) | 0)) === 2) {
                    break;
                }
            }
    
            this.assertEqual(sb.toString(), "yielding 0\nyielding 1\nyielding 2\nyielding 3\nyielding 4\nyielding -1\nin finally\ngot 0\ngot 1\n");
        },
        exceptionInIEnumerableIteratorBodyExecutesFinallyBlocks: function () {
            //TODO expected for v1: yield iterator works with no state machine
    
            var sb = new System.Text.StringBuilder();
    
            try {
                var enumerable = new Bridge.ClientTest.Collections.Generic.IteratorBlockTests.C(sb).getEnumerableThrows(5);
    
                var enumerator = Bridge.getEnumerator(enumerable, "$1");
                for (var i = 0; i < 100; i = (i + 1) | 0) {
                    enumerator.moveNext();
                    sb.appendLine("got " + enumerator.getCurrent$1());
                }
                Bridge.Test.Assert.fail$1("Should have thrown");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                sb.appendLine("caught exception");
            }
    
            this.assertEqual(sb.toString(), "yielding 1\nyielding 2\nthrowing\nin finally\ncaught exception\n");
        },
        enumeratingAnIteratorBlockReturningIEnumerableMultipleTimesUsesTheInitialValuesForParameters: function () {
            var $t, $t1;
            var sb = new System.Text.StringBuilder();
    
            var enm = new Bridge.ClientTest.Collections.Generic.IteratorBlockTests.C(sb).getEnumerableMutateParameter(3);
            $t = Bridge.getEnumerator(enm);
            while ($t.moveNext()) {
                var i = $t.getCurrent();
                sb.appendLine(i.toString());
            }
            $t1 = Bridge.getEnumerator(enm);
            while ($t1.moveNext()) {
                var i1 = $t1.getCurrent();
                sb.appendLine(i1.toString());
            }
    
            this.assertEqual(sb.toString(), "3\n2\n1\n3\n2\n1\n");
        },
        differentGetEnumeratorCallsOnIteratorBlockReturningIEnumerableGetOwnCopiesOfLocals: function () {
            var sb = new System.Text.StringBuilder();
    
            var enumerable = new Bridge.ClientTest.Collections.Generic.IteratorBlockTests.C(sb).getEnumerableSimple(3);
            var enm1 = Bridge.getEnumerator(enumerable, "$1");
            var enm2 = Bridge.getEnumerator(enumerable, "$1");
    
            while (enm1.moveNext()) {
                enm2.moveNext();
                sb.appendLine(enm1.getCurrent$1().toString());
                sb.appendLine(enm2.getCurrent$1().toString());
            }
    
            this.assertEqual(sb.toString(), "0\n0\n1\n1\n2\n2\n-1\n-1\n");
        }
    });
    
    Bridge.define('Bridge.ClientTest.Collections.Generic.IteratorBlockTests.C', {
        _sb: null,
        constructor: function (sb) {
            this._sb = sb;
        },
        getEnumerator: function (n) {
            var $yield = [];
            try {
                for (var i = 0; i < n; i = (i + 1) | 0) {
                    this._sb.appendLine("yielding " + i);
                    $yield.push(i);
                }
                this._sb.appendLine("yielding -1");
                $yield.push(-1);
            }
            finally {
                this._sb.appendLine("in finally");
            }
            return System.Array.toEnumerator($yield);
        },
        getEnumeratorThrows: function () {
            var $yield = [];
            try {
                this._sb.appendLine("yielding 1");
                $yield.push(1);
                this._sb.appendLine("yielding 2");
                $yield.push(2);
                this._sb.appendLine("throwing");
                throw new System.Exception("test");
                this._sb.appendLine("yielding 3");
                $yield.push(3);
            }
            finally {
                this._sb.appendLine("in finally");
            }
            return System.Array.toEnumerator($yield);
        },
        getEnumerable: function (n) {
            var $yield = [];
            try {
                for (var i = 0; i < n; i = (i + 1) | 0) {
                    this._sb.appendLine("yielding " + i);
                    $yield.push(i);
                }
                this._sb.appendLine("yielding -1");
                $yield.push(-1);
            }
            finally {
                this._sb.appendLine("in finally");
            }
            n = 0; // Just to verify that the value of 'n' is not reused in the next call
            return System.Array.toEnumerable($yield);
        },
        getEnumerableThrows: function (n) {
            var $yield = [];
            try {
                this._sb.appendLine("yielding 1");
                $yield.push(1);
                this._sb.appendLine("yielding 2");
                $yield.push(2);
                this._sb.appendLine("throwing");
                throw new System.Exception("test");
                this._sb.appendLine("yielding 3");
                $yield.push(3);
            }
            finally {
                this._sb.appendLine("in finally");
            }
            return System.Array.toEnumerable($yield);
        },
        getEnumerableMutateParameter: function (n) {
            var $yield = [];
            for (; n > 0; n = (n - 1) | 0) {
                $yield.push(n);
            }
            return System.Array.toEnumerable($yield);
        },
        getEnumerableSimple: function (n) {
            var $yield = [];
            for (var i = 0; i < n; i = (i + 1) | 0) {
                $yield.push(i);
            }
            $yield.push(-1);
            return System.Array.toEnumerable($yield);
        }
    });
    
    Bridge.define('Bridge.ClientTest.Collections.Generic.ListTests', {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.Collections.Generic.List$1$System.Int32", Bridge.getTypeName(System.Collections.Generic.List$1(System.Int32)), "GetClassName()");
            var list = new System.Collections.Generic.List$1(System.Int32)();
            Bridge.Test.Assert.true$1(Bridge.is(list, System.Collections.Generic.List$1(System.Int32)), "is int[] should be true");
            Bridge.Test.Assert.true$1(Bridge.is(list, System.Collections.Generic.IList$1(System.Int32)), "is IList<int> should be true");
            Bridge.Test.Assert.true$1(Bridge.is(list, System.Collections.Generic.ICollection$1(System.Int32)), "is ICollection<int> should be true");
            Bridge.Test.Assert.true$1(Bridge.is(list, System.Collections.Generic.IEnumerable$1(System.Int32)), "is IEnumerable<int> should be true");
        },
        defaultConstructorWorks: function () {
            var l = new System.Collections.Generic.List$1(System.Int32)();
            Bridge.Test.Assert.areEqual(0, l.getCount());
        },
        constructorWithCapacityWorks: function () {
            var l = new System.Collections.Generic.List$1(System.Int32)(12);
            Bridge.Test.Assert.areEqual(0, l.getCount());
        },
        constructingFromArrayWorks: function () {
            var arr = [1, 4, 7, 8];
            var l = new System.Collections.Generic.List$1(System.Int32)(arr);
            Bridge.Test.Assert.false(Bridge.referenceEquals(l, arr));
            Bridge.Test.Assert.areDeepEqual(arr, l.toArray());
        },
        constructingFromListWorks: function () {
            var arr = new System.Collections.Generic.List$1(System.Int32)([1, 4, 7, 8]);
            var l = new System.Collections.Generic.List$1(System.Int32)(arr);
            Bridge.Test.Assert.false(Bridge.referenceEquals(l, arr));
            Bridge.Test.Assert.areDeepEqual(arr, l);
        },
        constructingFromIEnumerableWorks: function () {
            var enm = Bridge.cast(new System.Collections.Generic.List$1(System.Int32)([1, 4, 7, 8]), System.Collections.Generic.IEnumerable$1(System.Int32));
            var l = new System.Collections.Generic.List$1(System.Int32)(enm);
            Bridge.Test.Assert.false(Bridge.referenceEquals(l, enm));
            Bridge.Test.Assert.areDeepEqual([1, 4, 7, 8], l.toArray());
        },
        countWorks: function () {
            Bridge.Test.Assert.areEqual(0, new System.Collections.Generic.List$1(String)().getCount());
            Bridge.Test.Assert.areEqual(1, Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                ["x"]
            ] ).getCount());
            Bridge.Test.Assert.areEqual(2, Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                ["x"],
                ["y"]
            ] ).getCount());
        },
        indexingWorks: function () {
            Bridge.Test.Assert.areEqual("x", Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                ["x"],
                ["y"]
            ] ).getItem(0));
            Bridge.Test.Assert.areEqual("y", Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                ["x"],
                ["y"]
            ] ).getItem(1));
        },
        foreachWorks: function () {
            var $t;
            var result = "";
            $t = Bridge.getEnumerator(Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                ["x"],
                ["y"]
            ] ));
            while ($t.moveNext()) {
                var s = $t.getCurrent();
                result += s;
            }
            Bridge.Test.Assert.areEqual("xy", result);
        },
        getEnumeratorWorks: function () {
            var e = Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                ["x"],
                ["y"]
            ] ).getEnumerator();
            Bridge.Test.Assert.true(e.moveNext());
            Bridge.Test.Assert.areEqual("x", e.getCurrent$1());
            Bridge.Test.Assert.true(e.moveNext());
            Bridge.Test.Assert.areEqual("y", e.getCurrent$1());
            Bridge.Test.Assert.false(e.moveNext());
        },
        addWorks: function () {
            var l = Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                ["x"],
                ["y"]
            ] );
            l.add("a");
            Bridge.Test.Assert.areDeepEqual(["x", "y", "a"], l.toArray());
        },
        addRangeWorks: function () {
            var l = Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                ["x"],
                ["y"]
            ] );
            l.addRange(["a", "b", "c"]);
            Bridge.Test.Assert.areDeepEqual(["x", "y", "a", "b", "c"], l.toArray());
        },
        binarySearch1Works: function () {
            var arr = Bridge.merge(new System.Collections.Generic.List$1(System.Int32)(), [
                [1],
                [2],
                [3],
                [3],
                [4],
                [5]
            ] );
    
            Bridge.Test.Assert.areEqual(2, arr.binarySearch(3));
            Bridge.Test.Assert.true(arr.binarySearch(6) < 0);
        },
        binarySearch2Works: function () {
            var arr = Bridge.merge(new System.Collections.Generic.List$1(System.Int32)(), [
                [1],
                [2],
                [3],
                [3],
                [4],
                [5]
            ] );
    
            Bridge.Test.Assert.areEqual(3, arr.binarySearch(3, 2, 3));
            Bridge.Test.Assert.true(arr.binarySearch(2, 2, 4) < 0);
        },
        binarySearch3Works: function () {
            var arr = Bridge.merge(new System.Collections.Generic.List$1(System.Int32)(), [
                [1],
                [2],
                [3],
                [3],
                [4],
                [5]
            ] );
    
            Bridge.Test.Assert.areEqual(2, arr.binarySearch(3, new Bridge.ClientTest.Collections.Generic.ListTests.TestReverseComparer()));
            Bridge.Test.Assert.areEqual(-1, arr.binarySearch(6, new Bridge.ClientTest.Collections.Generic.ListTests.TestReverseComparer()));
        },
        binarySearch4Works: function () {
            var arr = Bridge.merge(new System.Collections.Generic.List$1(System.Int32)(), [
                [1],
                [2],
                [3],
                [3],
                [4],
                [5]
            ] );
    
            Bridge.Test.Assert.areEqual(3, arr.binarySearch(3, 2, 3, new Bridge.ClientTest.Collections.Generic.ListTests.TestReverseComparer()));
            Bridge.Test.Assert.true(arr.binarySearch(3, 2, 4, new Bridge.ClientTest.Collections.Generic.ListTests.TestReverseComparer()) < 0);
        },
        clearWorks: function () {
            var l = Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                ["x"],
                ["y"]
            ] );
            l.clear();
            Bridge.Test.Assert.areEqual(l.getCount(), 0);
        },
        containsWorks: function () {
            var list = Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                ["x"],
                ["y"]
            ] );
            Bridge.Test.Assert.true(list.contains("x"));
            Bridge.Test.Assert.false(list.contains("z"));
        },
        containsUsesEqualsMethod: function () {
            var l = Bridge.merge(new System.Collections.Generic.List$1(Bridge.ClientTest.Collections.Generic.ListTests.C)(), [
                [new Bridge.ClientTest.Collections.Generic.ListTests.C(1)],
                [new Bridge.ClientTest.Collections.Generic.ListTests.C(2)],
                [new Bridge.ClientTest.Collections.Generic.ListTests.C(3)]
            ] );
            Bridge.Test.Assert.true(l.contains(new Bridge.ClientTest.Collections.Generic.ListTests.C(2)));
            Bridge.Test.Assert.false(l.contains(new Bridge.ClientTest.Collections.Generic.ListTests.C(4)));
        },
        sliceWithoutEndWorks: function () {
            Bridge.Test.Assert.areDeepEqual(["c", "d"], Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                ["a"],
                ["b"],
                ["c"],
                ["d"]
            ] ).slice(2).toArray());
        },
        sliceWithEndWorks: function () {
            Bridge.Test.Assert.areDeepEqual(["b", "c"], Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                ["a"],
                ["b"],
                ["c"],
                ["d"]
            ] ).slice(1, 3).toArray());
        },
        foreachWithListItemCallbackWorks: function () {
            var result = "";
            Bridge.Linq.Enumerable.from(Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                ["a"],
                ["b"],
                ["c"]
            ] )).forEach(function (s) {
                result += s;
            });
            Bridge.Test.Assert.areEqual("abc", result);
        },
        foreachWithListCallbackWorks: function () {
            var result = "";
            Bridge.Linq.Enumerable.from(Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                ["a"],
                ["b"],
                ["c"]
            ] )).forEach(function (s, i) {
                result += s + i;
            });
            Bridge.Test.Assert.areEqual("a0b1c2", result);
        },
        indexOfWithoutStartIndexWorks: function () {
            Bridge.Test.Assert.areEqual(1, ["a", "b", "c", "b"].indexOf("b"));
        },
        indexOfWithoutStartIndexUsesEqualsMethod: function () {
            var l = Bridge.merge(new System.Collections.Generic.List$1(Bridge.ClientTest.Collections.Generic.ListTests.C)(), [
                [new Bridge.ClientTest.Collections.Generic.ListTests.C(1)],
                [new Bridge.ClientTest.Collections.Generic.ListTests.C(2)],
                [new Bridge.ClientTest.Collections.Generic.ListTests.C(3)]
            ] );
            Bridge.Test.Assert.areEqual(1, l.indexOf(new Bridge.ClientTest.Collections.Generic.ListTests.C(2)));
            Bridge.Test.Assert.areEqual(-1, l.indexOf(new Bridge.ClientTest.Collections.Generic.ListTests.C(4)));
        },
        indexOfWithStartIndexWorks: function () {
            Bridge.Test.Assert.areEqual(3, Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                ["a"],
                ["b"],
                ["c"],
                ["b"]
            ] ).indexOf("b", 2));
        },
        indexOfWithStartIndexUsesEqualsMethod: function () {
            Bridge.Test.Assert.areEqual(3, Bridge.merge(new System.Collections.Generic.List$1(Bridge.ClientTest.Collections.Generic.ListTests.C)(), [
                [new Bridge.ClientTest.Collections.Generic.ListTests.C(1)],
                [new Bridge.ClientTest.Collections.Generic.ListTests.C(2)],
                [new Bridge.ClientTest.Collections.Generic.ListTests.C(3)],
                [new Bridge.ClientTest.Collections.Generic.ListTests.C(2)]
            ] ).indexOf(new Bridge.ClientTest.Collections.Generic.ListTests.C(2), 2));
        },
        insertWorks: function () {
            var l = Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                ["x"],
                ["y"]
            ] );
            l.insert(1, "a");
            Bridge.Test.Assert.areDeepEqual(["x", "a", "y"], l.toArray());
        },
        insertRangeWorks: function () {
            var l = Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                ["x"],
                ["y"]
            ] );
    
            l.insertRange(1, ["a", "b"]);
            Bridge.Test.Assert.areDeepEqual(["x", "a", "b", "y"], l.toArray());
    
            l.insertRange(0, ["q", "q"]);
            Bridge.Test.Assert.areDeepEqual(["q", "q", "x", "a", "b", "y"], l.toArray());
        },
        joinWithoutDelimiterWorks: function () {
            Bridge.Test.Assert.areEqual("a,b,c,b", Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                ["a"],
                ["b"],
                ["c"],
                ["b"]
            ] ).join());
        },
        joinWithDelimiterWorks: function () {
            Bridge.Test.Assert.areEqual("a|b|c|b", Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                ["a"],
                ["b"],
                ["c"],
                ["b"]
            ] ).join("|"));
        },
        removeWorks: function () {
            var list = Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                ["a"],
                ["b"],
                ["c"],
                ["a"]
            ] );
            Bridge.Test.Assert.true(list.remove("a"));
            Bridge.Test.Assert.areDeepEqual(["b", "c", "a"], list.toArray());
        },
        removeReturnsFalseIfTheElementWasNotFound: function () {
            var list = Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                ["a"],
                ["b"],
                ["c"],
                ["a"]
            ] );
            Bridge.Test.Assert.false(list.remove("d"));
            Bridge.Test.Assert.areDeepEqual(["a", "b", "c", "a"], list.toArray());
        },
        removeCanRemoveNullItem: function () {
            var list = Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                ["a"],
                [null],
                ["c"],
                [null]
            ] );
            Bridge.Test.Assert.true(list.remove(null));
            Bridge.Test.Assert.areDeepEqual(["a", "c", null], list.toArray());
        },
        removeUsesEqualsMethod: function () {
            var list = Bridge.merge(new System.Collections.Generic.List$1(Bridge.ClientTest.Collections.Generic.ListTests.C)(), [
                [new Bridge.ClientTest.Collections.Generic.ListTests.C(1)],
                [new Bridge.ClientTest.Collections.Generic.ListTests.C(2)],
                [new Bridge.ClientTest.Collections.Generic.ListTests.C(3)]
            ] );
            list.remove(new Bridge.ClientTest.Collections.Generic.ListTests.C(2));
            Bridge.Test.Assert.areEqual(2, list.getCount());
            Bridge.Test.Assert.areEqual(1, list.getItem(0).i);
            Bridge.Test.Assert.areEqual(3, list.getItem(1).i);
        },
        removeAtWorks: function () {
            var list = Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                ["a"],
                ["b"],
                ["c"],
                ["a"]
            ] );
            list.removeAt(1);
            Bridge.Test.Assert.areDeepEqual(["a", "c", "a"], list.toArray());
        },
        removeRangeWorks: function () {
            var list = Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                ["a"],
                ["b"],
                ["c"],
                ["d"]
            ] );
            list.removeRange(1, 2);
            Bridge.Test.Assert.areDeepEqual(["a", "d"], list.toArray());
        },
        reverseWorks: function () {
            var list = Bridge.merge(new System.Collections.Generic.List$1(System.Int32)(), [
                [1],
                [3],
                [4],
                [1],
                [3],
                [2]
            ] );
            list.reverse();
            Bridge.Test.Assert.areDeepEqual([2, 3, 1, 4, 3, 1], list.toArray());
        },
        sortWithDefaultCompareWorks: function () {
            var list = Bridge.merge(new System.Collections.Generic.List$1(System.Int32)(), [
                [1],
                [6],
                [6],
                [4],
                [2]
            ] );
            list.sort();
            Bridge.Test.Assert.areDeepEqual([1, 2, 4, 6, 6], list.toArray());
        },
        sortWithCompareCallbackWorks: function () {
            var list = Bridge.merge(new System.Collections.Generic.List$1(System.Int32)(), [
                [1],
                [6],
                [6],
                [4],
                [2]
            ] );
            list.sort($_.Bridge.ClientTest.Collections.Generic.ListTests.f1);
            Bridge.Test.Assert.areDeepEqual([6, 6, 4, 2, 1], list.toArray());
        },
        sortWithIComparerWorks: function () {
            var list = Bridge.merge(new System.Collections.Generic.List$1(System.Int32)(), [
                [1],
                [6],
                [6],
                [4],
                [2]
            ] );
            list.sort(Bridge.fn.bind(new Bridge.ClientTest.Collections.Generic.ListTests.TestReverseComparer(), new Bridge.ClientTest.Collections.Generic.ListTests.TestReverseComparer().compare));
            Bridge.Test.Assert.areDeepEqual([6, 6, 4, 2, 1], list.toArray());
        },
        foreachWhenCastToIEnumerableWorks: function () {
            var $t;
            var list = Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                ["x"],
                ["y"]
            ] );
            var result = "";
            $t = Bridge.getEnumerator(list);
            while ($t.moveNext()) {
                var s = $t.getCurrent();
                result += s;
            }
            Bridge.Test.Assert.areEqual("xy", result);
        },
        iEnumerableGetEnumeratorWorks: function () {
            var l = Bridge.cast(Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                ["x"],
                ["y"]
            ] ), System.Collections.Generic.IEnumerable$1(String));
            var e = Bridge.getEnumerator(l, "$1");
            Bridge.Test.Assert.true(e.moveNext());
            Bridge.Test.Assert.areEqual("x", e.getCurrent$1());
            Bridge.Test.Assert.true(e.moveNext());
            Bridge.Test.Assert.areEqual("y", e.getCurrent$1());
            Bridge.Test.Assert.false(e.moveNext());
        },
        iCollectionCountWorks: function () {
            var l = Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                ["x"],
                ["y"],
                ["z"]
            ] );
            Bridge.Test.Assert.areEqual(3, System.Array.getCount(l));
        },
        iCollectionAddWorks: function () {
            var l = Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                ["x"],
                ["y"],
                ["z"]
            ] );
            System.Array.add(l, "a");
            Bridge.Test.Assert.areDeepEqual(["x", "y", "z", "a"], Bridge.cast(l, System.Collections.Generic.List$1(String)).toArray());
        },
        iCollectionClearWorks: function () {
            var l = Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                ["x"],
                ["y"],
                ["z"]
            ] );
            System.Array.clear(l, String);
            Bridge.Test.Assert.areDeepEqual(System.Array.init(0, null), Bridge.cast(l, System.Collections.Generic.List$1(String)).toArray());
        },
        iCollectionContainsWorks: function () {
            var l = Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                ["x"],
                ["y"],
                ["z"]
            ] );
            Bridge.Test.Assert.true(System.Array.contains(l, "y"));
            Bridge.Test.Assert.false(System.Array.contains(l, "a"));
        },
        iCollectionContainsUsesEqualsMethod: function () {
            var l = Bridge.merge(new System.Collections.Generic.List$1(Bridge.ClientTest.Collections.Generic.ListTests.C)(), [
                [new Bridge.ClientTest.Collections.Generic.ListTests.C(1)],
                [new Bridge.ClientTest.Collections.Generic.ListTests.C(2)],
                [new Bridge.ClientTest.Collections.Generic.ListTests.C(3)]
            ] );
            Bridge.Test.Assert.true(System.Array.contains(l, new Bridge.ClientTest.Collections.Generic.ListTests.C(2)));
            Bridge.Test.Assert.false(System.Array.contains(l, new Bridge.ClientTest.Collections.Generic.ListTests.C(4)));
        },
        iCollectionRemoveWorks: function () {
            var l = Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                ["x"],
                ["y"],
                ["z"]
            ] );
            Bridge.Test.Assert.true(System.Array.remove(l, "y"));
            Bridge.Test.Assert.false(System.Array.remove(l, "a"));
    
            var ll = Bridge.as(l, System.Collections.Generic.List$1(String));
            Bridge.Test.Assert.areDeepEqual(["x", "z"], ll.toArray());
        },
        iCollectionRemoveCanRemoveNullItem: function () {
            var list = Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                ["a"],
                [null],
                ["c"],
                [null]
            ] );
            Bridge.Test.Assert.true(System.Array.remove(list, null));
            Bridge.Test.Assert.areDeepEqual(["a", "c", null], Bridge.cast(list, System.Collections.Generic.List$1(String)).toArray());
        },
        iCollectionRemoveUsesEqualsMethod: function () {
            var list = Bridge.merge(new System.Collections.Generic.List$1(Bridge.ClientTest.Collections.Generic.ListTests.C)(), [
                [new Bridge.ClientTest.Collections.Generic.ListTests.C(1)],
                [new Bridge.ClientTest.Collections.Generic.ListTests.C(2)],
                [new Bridge.ClientTest.Collections.Generic.ListTests.C(3)]
            ] );
            System.Array.remove(list, new Bridge.ClientTest.Collections.Generic.ListTests.C(2));
            Bridge.Test.Assert.areEqual(2, System.Array.getCount(list));
            Bridge.Test.Assert.areEqual(1, System.Array.getItem(list, 0).i);
            Bridge.Test.Assert.areEqual(3, System.Array.getItem(list, 1).i);
        },
        iListIndexingWorks: function () {
            var l = Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                ["x"],
                ["y"],
                ["z"]
            ] );
            Bridge.Test.Assert.areEqual("y", System.Array.getItem(l, 1));
            System.Array.setItem(l, 1, "a");
            Bridge.Test.Assert.areDeepEqual(["x", "a", "z"], Bridge.cast(l, System.Collections.Generic.List$1(String)).toArray());
        },
        iListIndexOfWorks: function () {
            var l = Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                ["x"],
                ["y"],
                ["z"]
            ] );
            Bridge.Test.Assert.areEqual(1, System.Array.indexOf(l, "y"));
            Bridge.Test.Assert.areEqual(-1, System.Array.indexOf(l, "a"));
        },
        iListIndexOfUsesEqualsMethod: function () {
            var l = Bridge.merge(new System.Collections.Generic.List$1(Bridge.ClientTest.Collections.Generic.ListTests.C)(), [
                [new Bridge.ClientTest.Collections.Generic.ListTests.C(1)],
                [new Bridge.ClientTest.Collections.Generic.ListTests.C(2)],
                [new Bridge.ClientTest.Collections.Generic.ListTests.C(3)]
            ] );
            Bridge.Test.Assert.areEqual(1, System.Array.indexOf(l, new Bridge.ClientTest.Collections.Generic.ListTests.C(2)));
            Bridge.Test.Assert.areEqual(-1, System.Array.indexOf(l, new Bridge.ClientTest.Collections.Generic.ListTests.C(4)));
        },
        iListInsertWorks: function () {
            var l = Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                ["x"],
                ["y"],
                ["z"]
            ] );
            System.Array.insert(l, 1, "a");
            Bridge.Test.Assert.areDeepEqual(["x", "a", "y", "z"], Bridge.cast(l, System.Collections.Generic.List$1(String)).toArray());
        },
        iListRemoveAtWorks: function () {
            var l = Bridge.merge(new System.Collections.Generic.List$1(String)(), [
                ["x"],
                ["y"],
                ["z"]
            ] );
            System.Array.removeAt(l, 1);
            Bridge.Test.Assert.areDeepEqual(["x", "z"], Bridge.cast(l, System.Collections.Generic.List$1(String)).toArray());
        },
        toArrayWorks: function () {
            var l = new System.Collections.Generic.List$1(String)();
            l.add("a");
            l.add("b");
            var actual = l.toArray();
            Bridge.Test.Assert.false(Bridge.referenceEquals(l, actual));
            Bridge.Test.Assert.true(Bridge.is(actual, Array));
            Bridge.Test.Assert.areDeepEqual(["a", "b"], actual);
        }
    });
    
    Bridge.ns("Bridge.ClientTest.Collections.Generic.ListTests", $_);
    
    Bridge.apply($_.Bridge.ClientTest.Collections.Generic.ListTests, {
        f1: function (x, y) {
            return ((y - x) | 0);
        }
    });
    
    Bridge.define('Bridge.ClientTest.Collections.Generic.ListTests.C', {
        i: 0,
        constructor: function (i) {
            this.i = i;
        },
        equals: function (o) {
            return Bridge.is(o, Bridge.ClientTest.Collections.Generic.ListTests.C) && this.i === Bridge.cast(o, Bridge.ClientTest.Collections.Generic.ListTests.C).i;
        },
        getHashCode: function () {
            return this.i;
        }
    });
    
    Bridge.define('Bridge.ClientTest.Collections.Generic.ListTests.TestReverseComparer', {
        inherits: [System.Collections.Generic.IComparer$1(System.Int32)],
        compare: function (x, y) {
            return x === y ? 0 : (x > y ? -1 : 1);
        }
    });
    
    Bridge.define('Bridge.ClientTest.Collections.Generic.StackTests', {
        getStack: function () {
            return new System.Collections.Generic.Stack$1(String)("constructor$1", ["x", "y"]);
        },
        getArray: function () {
            return [8, 7, 4, 1];
        },
        getReversedArray: function () {
            return [1, 4, 7, 8];
        },
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.Collections.Generic.List$1$System.Int32", Bridge.getTypeName(System.Collections.Generic.List$1(System.Int32)), "GetClassName()");
            var stack = new System.Collections.Generic.Stack$1(System.Int32)("constructor");
            Bridge.Test.Assert.true$1(Bridge.is(stack, System.Collections.Generic.Stack$1(System.Int32)), "is Stack<int> should be true");
            Bridge.Test.Assert.true$1(Bridge.is(stack, System.Collections.ICollection), "is ICollection<int> should be true");
            Bridge.Test.Assert.true$1(Bridge.is(stack, System.Collections.Generic.IEnumerable$1(System.Int32)), "is IEnumerable<int> should be true");
        },
        defaultConstructorWorks: function () {
            var l = new System.Collections.Generic.Stack$1(System.Int32)("constructor");
            Bridge.Test.Assert.areEqual(0, l.getCount());
        },
        constructorWithCapacityWorks: function () {
            var l = new System.Collections.Generic.Stack$1(System.Int32)("constructor$2", 12);
            Bridge.Test.Assert.areEqual(0, l.getCount());
        },
        constructingFromArrayWorks: function () {
            var arr = this.getArray();
            var l = new System.Collections.Generic.Stack$1(System.Int32)("constructor$1", arr);
            Bridge.Test.Assert.false(Bridge.referenceEquals(l, arr));
            Bridge.Test.Assert.areDeepEqual(this.getReversedArray(), l.toArray());
        },
        constructingFromListWorks: function () {
            var arr = new System.Collections.Generic.Stack$1(System.Int32)("constructor$1", this.getArray());
            var l = new System.Collections.Generic.Stack$1(System.Int32)("constructor$1", arr);
            Bridge.Test.Assert.false(Bridge.referenceEquals(l, arr));
            Bridge.Test.Assert.areDeepEqual(this.getArray(), l.toArray());
        },
        constructingFromIEnumerableWorks: function () {
            var enm = Bridge.cast(new System.Collections.Generic.Stack$1(System.Int32)("constructor$1", this.getArray()), System.Collections.Generic.IEnumerable$1(System.Int32));
            var l = new System.Collections.Generic.List$1(System.Int32)(enm);
            Bridge.Test.Assert.false(Bridge.referenceEquals(l, enm));
            Bridge.Test.Assert.areDeepEqual(this.getReversedArray(), l.toArray());
        },
        countWorks: function () {
            Bridge.Test.Assert.areEqual(0, new System.Collections.Generic.Stack$1(String)("constructor").getCount());
            Bridge.Test.Assert.areEqual(1, new System.Collections.Generic.Stack$1(String)("constructor$1", ["x"]).getCount());
            Bridge.Test.Assert.areEqual(2, this.getStack().getCount());
        },
        foreachWorks: function () {
            var $t;
            var result = "";
            $t = Bridge.getEnumerator(this.getStack());
            while ($t.moveNext()) {
                var s = $t.getCurrent();
                result += s;
            }
            Bridge.Test.Assert.areEqual("yx", result);
        },
        pushWorks: function () {
            var l = this.getStack();
            l.push("a");
            Bridge.Test.Assert.areDeepEqual(["a", "y", "x"], l.toArray());
        },
        clearWorks: function () {
            var l = this.getStack();
            l.clear();
            Bridge.Test.Assert.areEqual(l.getCount(), 0);
        },
        containsWorks: function () {
            var list = this.getStack();
            Bridge.Test.Assert.true(list.contains("x"));
            Bridge.Test.Assert.false(list.contains("z"));
        },
        containsUsesEqualsMethod: function () {
            var l = new System.Collections.Generic.Stack$1(Bridge.ClientTest.Collections.Generic.StackTests.C)("constructor$1", [new Bridge.ClientTest.Collections.Generic.StackTests.C(1), new Bridge.ClientTest.Collections.Generic.StackTests.C(2), new Bridge.ClientTest.Collections.Generic.StackTests.C(3)]);
            Bridge.Test.Assert.true(l.contains(new Bridge.ClientTest.Collections.Generic.StackTests.C(2)));
            Bridge.Test.Assert.false(l.contains(new Bridge.ClientTest.Collections.Generic.StackTests.C(4)));
        },
        foreachWithListItemCallbackWorks: function () {
            var result = "";
            Bridge.Linq.Enumerable.from(new System.Collections.Generic.Stack$1(String)("constructor$1", ["a", "b", "c"])).forEach(function (s) {
                result += s;
            });
            Bridge.Test.Assert.areEqual("cba", result);
        },
        foreachWithListCallbackWorks: function () {
            var result = "";
            Bridge.Linq.Enumerable.from(new System.Collections.Generic.Stack$1(String)("constructor$1", ["a", "b", "c"])).forEach(function (s, i) {
                result += s + i;
            });
            Bridge.Test.Assert.areEqual("c0b1a2", result);
        },
        popWorks: function () {
            var list = this.getStack();
            Bridge.Test.Assert.areEqual("y", list.pop());
            Bridge.Test.Assert.areDeepEqual(["x"], list.toArray());
        },
        peekWorks: function () {
            var list = this.getStack();
            Bridge.Test.Assert.areEqual("y", list.peek());
            Bridge.Test.Assert.areDeepEqual(["y", "x"], list.toArray());
        },
        toArrayWorks: function () {
            var l = new System.Collections.Generic.Stack$1(String)("constructor");
            l.push("a");
            l.push("b");
    
            var actual = l.toArray();
    
            Bridge.Test.Assert.false(Bridge.referenceEquals(l, actual));
            Bridge.Test.Assert.true(Bridge.is(actual, Array));
            Bridge.Test.Assert.areDeepEqual(["b", "a"], actual);
        }
    });
    
    Bridge.define('Bridge.ClientTest.Collections.Generic.StackTests.C', {
        i: 0,
        constructor: function (i) {
            this.i = i;
        },
        equals: function (o) {
            return Bridge.is(o, Bridge.ClientTest.Collections.Generic.StackTests.C) && this.i === Bridge.cast(o, Bridge.ClientTest.Collections.Generic.StackTests.C).i;
        },
        getHashCode: function () {
            return this.i;
        }
    });
    
    Bridge.define('Bridge.ClientTest.Constants', {
        statics: {
            PREFIX_SYSTEM_CLASSES: "Simple types",
            PREFIX_SYSTEM_INTERFACES: "System interface",
            PREFIX_COLLECTIONS: "Collections",
            PREFIX_UTILITIES: "Utilities",
            PREFIX_EXCEPTIONS: "Exceptions",
            MODULE_DECIMAL: "Simple types",
            MODULE_DOUBLE: "Simple types",
            MODULE_INT16: "Simple types",
            MODULE_INT64: "Simple types",
            MODULE_SBYTE: "Simple types",
            MODULE_FLOAT: "Simple types",
            MODULE_UINT64: "Simple types",
            MODULE_UINT32: "Simple types",
            MODULE_OBJECT: "Simple types",
            MODULE_CHAR: "Simple types",
            MODULE_INT32: "Simple types",
            MODULE_UINT16: "Simple types",
            MODULE_BYTE: "Simple types",
            MODULE_TUPLE: "Simple types",
            MODULE_VERSION: "Simple types",
            MODULE_BASIC_CSHARP: "C#",
            MODULE_ISSUES: "Issues",
            MODULE_LINQ: "LINQ",
            MODULE_DATETIME: "Date and time",
            MODULE_NULLABLE: "Nullable",
            MODULE_STRING: "String",
            MODULE_REGEX: "Regex",
            MODULE_REGEX_JS: "RegexJS",
            MODULE_ENUM: "Enum",
            MODULE_GUID: "Guid",
            MODULE_MATH: "Math",
            MODULE_DECIMAL_MATH: "Decimal Math",
            MODULE_CONVERT: "Convert",
            MODULE_RANDOM: "Random",
            MODULE_ICOLLECTION: "Collections",
            MODULE_IDICTIONARY: "Collections",
            MODULE_LIST: "Collections",
            MODULE_ILIST: "Collections",
            MODULE_ITERATORBLOCK: "Collections",
            MODULE_ARRAY: "Collections",
            MODULE_IENUMERABLE: "Collections",
            MODULE_GENERICDICTIONARY: "Collections",
            MODULE_ICOMPARABLE: "System interface",
            MODULE_IEQUATABLE: "System interface",
            MODULE_COMPARER: "Comparer",
            MODULE_EQUALITYCOMPARER: "EqualityComparer",
            MODULE_NUMBERFORMATINFO: "NumberFormatInfo",
            MODULE_CULTUREINFO: "СultureInfo",
            MODULE_PROPERTYACCESSOR: "Property accessor",
            MODULE_NUMBERFORMATSPECIFIERS: "Number format specifiers",
            MODULE_RUNTIMEHELPERS: "Utilities",
            MODULE_ENVIRONMENT: "Utilities",
            MODULE_NOTSUPPORTEDEXCEPTION: "Exceptions",
            MODULE_KEYNOTFOUNDEXCEPTION: "Exceptions",
            MODULE_EXCEPTION: "Exceptions",
            MODULE_ARGUMENTNULLEXCEPTION: "Exceptions",
            MODULE_DIVIDEBYZEROEXCEPTION: "Exceptions",
            MODULE_NOTIMPLEMENTEDEXCEPTION: "Exceptions",
            MODULE_OVERFLOWEXCEPTION: "Exceptions",
            MODULE_OUTOFMEMORYEXCEPTION: "Exceptions",
            MODULE_INDEXOUTOFRANGEEXCEPTION: "Exceptions",
            MODULE_SYSTEMEXCEPTION: "Exceptions",
            MODULE_TIMOUTEXCEPTION: "Exceptions",
            MODULE_REGEXMATCHTIMEOUTEXCEPTION: "Exceptions",
            MODULE_ARITHMETICEXCEPTION: "Exceptions",
            MODULE_FORMATEXCEPTION: "Exceptions",
            MODULE_INVALIDOPERATIONEXCEPTION: "Exceptions",
            MODULE_INVALIDCASTEXCEPTION: "Exceptions",
            MODULE_ARGUMENTEXCEPTION: "Exceptions",
            MODULE_NULLREFERENCEEXCEPTION: "Exceptions",
            MODULE_ARGUMENTOUTOFRANGEEXCEPTION: "Exceptions",
            MODULE_THREADING: "Threading",
            MODULE_DIAGNOSTICS: "Diagnostics",
            MODULE_CHECKED_UNCKECKED: "Checked/Unckecked",
            MODULE_TYPE_SYSTEM: "Type system",
            IGNORE_DATE: null
        }
    });
    
    Bridge.define('Bridge.ClientTest.ConvertTests.ConvertConstants', {
        statics: {
            UINT64_MAX_STRING_BASE_16: "ffffffffffffffff",
            UINT64_MAX_STRING_BASE_8: "1777777777777777777777",
            UINT64_MAX_STRING_BASE_2: "1111111111111111111111111111111111111111111111111111111111111111",
            UINT64_OVERFLOW_MAX_STRING: "18446744073709551616",
            UINT64_OVERFLOW_MAX_STRING_BASE_16: "10000000000000000",
            UINT64_OVERFLOW_MAX_STRING_BASE_8: "7777777777777777777777777",
            UINT64_OVERFLOW_MAX_STRING_BASE_2: "11111111111111111111111111111111111111111111111111111111111111111",
            UINT64_OVERFLOW_MIN_STRING: "-1",
            INT64_MAX_STRING_BASE_16: "7fffffffffffffff",
            INT64_MAX_STRING_BASE_8: "777777777777777777777",
            INT64_MAX_STRING_BASE_2: "111111111111111111111111111111111111111111111111111111111111111",
            INT64_MIN_STRING_BASE_16: "8000000000000000",
            INT64_MIN_STRING_BASE_8: "1000000000000000000000",
            INT64_MIN_STRING_BASE_2: "1000000000000000000000000000000000000000000000000000000000000000",
            INT64_OVERFLOW_MAX_STRING: "9223372036854775808",
            INT64_OVERFLOW_MIN_STRING: "-9223372036854775809",
            UINT32_MAX_STRING_BASE_16: "ffffffff",
            UINT32_MAX_STRING_BASE_8: "37777777777",
            UINT32_MAX_STRING_BASE_2: "11111111111111111111111111111111",
            UINT32_OVERFLOW_MAX_STRING: "4294967296",
            UINT32_OVERFLOW_MAX_STRING_BASE_16: "100000000",
            UINT32_OVERFLOW_MAX_STRING_BASE_8: "77777777777",
            UINT32_OVERFLOW_MAX_STRING_BASE_2: "111111111111111111111111111111111",
            UINT32_OVERFLOW_MIN_STRING: "-1",
            INT32_MAX_STRING_BASE_16: "7fffffff",
            INT32_MAX_STRING_BASE_8: "17777777777",
            INT32_MAX_STRING_BASE_2: "1111111111111111111111111111111",
            INT32_MIN_STRING_BASE_16: "80000000",
            INT32_MIN_STRING_BASE_8: "20000000000",
            INT32_MIN_STRING_BASE_2: "10000000000000000000000000000000",
            INT32_OVERFLOW_MAX_STRING: "2147483648",
            INT32_OVERFLOW_MAX_STRING_BASE_16: "1ffffffff",
            INT32_OVERFLOW_MAX_STRING_BASE_8: "777777777777",
            INT32_OVERFLOW_MAX_STRING_BASE_2: "111111111111111111111111111111111",
            INT32_OVERFLOW_MIN_STRING: "-2147483649",
            UINT16_MAX_STRING_BASE_16: "ffff",
            UINT16_MAX_STRING_BASE_8: "177777",
            UINT16_MAX_STRING_BASE_2: "1111111111111111",
            UINT16_OVERFLOW_MAX_STRING: "65536",
            UINT16_OVERFLOW_MAX_STRING_BASE_16: "10000",
            UINT16_OVERFLOW_MAX_STRING_BASE_8: "777777",
            UINT16_OVERFLOW_MAX_STRING_BASE_2: "11111111111111111",
            UINT16_OVERFLOW_MIN_STRING: "-1",
            INT16_MAX_STRING_BASE_16: "7fff",
            INT16_MAX_STRING_BASE_8: "77777",
            INT16_MAX_STRING_BASE_2: "111111111111111",
            INT16_MIN_STRING_BASE_16: "8000",
            INT16_MIN_STRING_BASE_8: "100000",
            INT16_MIN_STRING_BASE_2: "1000000000000000",
            INT16_OVERFLOW_MAX_STRING: "32768",
            INT16_OVERFLOW_MAX_STRING_BASE_16: "1ffff",
            INT16_OVERFLOW_MAX_STRING_BASE_8: "777777",
            INT16_OVERFLOW_MAX_STRING_BASE_2: "11111111111111111",
            INT16_OVERFLOW_MIN_STRING: "-32769",
            UINT8_MAX_STRING_BASE_16: "ff",
            UINT8_MAX_STRING_BASE_8: "377",
            UINT8_MAX_STRING_BASE_2: "11111111",
            UINT8_OVERFLOW_MAX_STRING: "256",
            UINT8_OVERFLOW_MIN_STRING: "-1",
            INT8_MAX_STRING_BASE_16: "7f",
            INT8_MAX_STRING_BASE_8: "177",
            INT8_MAX_STRING_BASE_2: "1111111",
            INT8_MIN_STRING_BASE_16: "80",
            INT8_MIN_STRING_BASE_8: "200",
            INT8_MIN_STRING_BASE_2: "10000000",
            INT8_OVERFLOW_MAX_STRING: "128",
            INT8_OVERFLOW_MAX_STRING_BASE_16: "1ff",
            INT8_OVERFLOW_MAX_STRING_BASE_8: "777",
            INT8_OVERFLOW_MAX_STRING_BASE_2: "111111111",
            INT8_OVERFLOW_MIN_STRING: "-129",
            DECIMAL_MAX_STRING: "79228162514264337593543950335",
            DECIMAL_MIN_STRING: "-79228162514264337593543950335",
            DOUBLE_MAX_STRING: "1.7976931348623157e+308",
            DOUBLE_MIN_STRING: "-1.7976931348623157e+308",
            DOUBLE_EPSILON_STRING: "5e-324",
            SINGLE_MAX_STRING: "3.40282347e+38",
            SINGLE_MIN_STRING: "-3.40282347e+38",
            SINGLE_EPSILON_STRING: "1.401298e-45"
        }
    });
    
    Bridge.define('Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests', {
        statics: {
            roundtrip1: function () {
                var input = "test";
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verify(input, function (result) {
                    // See Freed, N. and N. Borenstein, RFC2045, Section 6.8 for a description of why this check is necessary.
                    Bridge.Test.Assert.areEqual(result.length, 3);
    
                    var triplet = (((result[0] << 16) | (result[1] << 8) | result[2])) >>> 0;
                    Bridge.Test.Assert.areEqual(triplet >>> 18, 45); // 't'
                    Bridge.Test.Assert.areEqual((((triplet << 14) >>> 0)) >>> 26, 30); // 'e'
                    Bridge.Test.Assert.areEqual((((triplet << 20) >>> 0)) >>> 26, 44); // 's'
                    Bridge.Test.Assert.areEqual((((triplet << 26) >>> 0)) >>> 26, 45); // 't'
    
                    Bridge.Test.Assert.areEqual(System.Convert.toBase64String(result, null, null, null), input);
                });
            },
            roundtrip2: function () {
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyRoundtrip("AAAA");
            },
            roundtrip3: function () {
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyRoundtrip("AAAAAAAA");
            },
            emptyString: function () {
                var input = "";
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verify(input, $_.Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.f1);
            },
            zeroLengthArray: function () {
                var input = "test";
                var inputChars = System.String.toCharArray(input, 0, input.length);
                var result = System.Convert.fromBase64CharArray(inputChars, 0, 0);
    
                Bridge.Test.Assert.notNull(result);
                Bridge.Test.Assert.areEqual(0, result.length);
            },
            roundtripWithPadding1: function () {
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyRoundtrip("abc=");
            },
            roundtripWithPadding2: function () {
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyRoundtrip("BQYHCA==");
            },
            partialRoundtripWithPadding1: function () {
                var input = "ab==";
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verify(input, function (result) {
                    Bridge.Test.Assert.areEqual(1, result.length);
    
                    var roundtrippedString = System.Convert.toBase64String(result, null, null, null);
                    Bridge.Test.Assert.areNotEqual(roundtrippedString, input);
                    Bridge.Test.Assert.areEqual(input.charCodeAt(0), roundtrippedString.charCodeAt(0));
                });
            },
            partialRoundtripWithPadding2: function () {
                var input = "789=";
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verify(input, function (result) {
                    Bridge.Test.Assert.areEqual(2, result.length);
    
                    var roundtrippedString = System.Convert.toBase64String(result, null, null, null);
                    Bridge.Test.Assert.areNotEqual(roundtrippedString, input);
                    Bridge.Test.Assert.areEqual(input.charCodeAt(0), roundtrippedString.charCodeAt(0));
                    Bridge.Test.Assert.areEqual(input.charCodeAt(1), roundtrippedString.charCodeAt(1));
                });
            },
            parseWithWhitespace: function () {
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyRoundtrip("abc= \t \r\n =", "bQ==");
            },
            roundtripWithWhitespace2: function () {
                var input = "abc=  \t\n\t\r ";
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyRoundtrip(input, input.trim());
            },
            roundtripWithWhitespace3: function () {
                var input = "abc \r\n\t   =  \t\n\t\r ";
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyRoundtrip(input, "abc=");
            },
            roundtripWithWhitespace4: function () {
                var expected = "test";
                var input = System.String.alignString(System.String.alignString(System.String.insert(1, expected, System.String.fromCharCount(32, 17)), 31, 32), -12, 32);
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyRoundtrip(input, expected, 3);
            },
            roundtripWithWhitespace5: function () {
                var expected = "test";
                var input = System.String.alignString(System.String.alignString(System.String.insert(2, expected, System.String.fromCharCount(9, 9)), 37, 9), -8, 9);
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyRoundtrip(input, expected, 3);
            },
            roundtripWithWhitespace6: function () {
                var expected = "test";
                var input = System.String.alignString(System.String.alignString(System.String.insert(2, expected, System.String.fromCharCount(13, 13)), 7, 13), -29, 13);
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyRoundtrip(input, expected, 3);
            },
            roundtripWithWhitespace7: function () {
                var expected = "test";
                var input = System.String.alignString(System.String.alignString(System.String.insert(2, expected, System.String.fromCharCount(10, 23)), 17, 10), -34, 10);
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyRoundtrip(input, expected, 3);
            },
            roundtripLargeString: function () {
                var input = System.String.fromCharCount(97, 10000);
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyRoundtrip(input, input);
            },
            invalidOffset: function () {
                var input = "test";
                var inputChars = System.String.toCharArray(input, 0, input.length);
    
                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.fromBase64CharArray(inputChars, -1, inputChars.length);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.f2);
                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.fromBase64CharArray(inputChars, inputChars.length, inputChars.length);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.f2);
            },
            invalidLength: function () {
                var input = "test";
                var inputChars = System.String.toCharArray(input, 0, input.length);
    
                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.fromBase64CharArray(inputChars, 0, -1);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.f2);
                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.fromBase64CharArray(inputChars, 0, ((inputChars.length + 1) | 0));
                }, $_.Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.f2);
                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.fromBase64CharArray(inputChars, 1, inputChars.length);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.f2);
    
            },
            invalidInput: function () {
                Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.f3, $_.Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.f4);
    
    
                // Input must be at least 4 characters long
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyInvalidInput("No");
    
                // Length of input must be a multiple of 4
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyInvalidInput("NoMore");
    
                // Input must not contain invalid characters
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyInvalidInput("2-34");
    
                // Input must not contain 3 or more padding characters in a row
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyInvalidInput("a===");
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyInvalidInput("abc=====");
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyInvalidInput("a===\r  \t  \n");
    
                // Input must not contain padding characters in the middle of the string
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyInvalidInput("No=n");
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyInvalidInput("abcdabc=abcd");
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyInvalidInput("abcdab==abcd");
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyInvalidInput("abcda===abcd");
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyInvalidInput("abcd====abcd");
            },
            invalidCharactersInInput: function () {
                var $t;
                var invalidChars = [30122, 62608, 13917, 19498, 2473, 40845, 35988, 2281, 51246, 36372];
    
                $t = Bridge.getEnumerator(invalidChars);
                while ($t.moveNext()) {
                    var ch = $t.getCurrent();
                    var builder = "abc";
                    var addingStr = String.fromCharCode.apply(null, [ch]);
                    System.String.insert(1, builder, addingStr);
                    Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verifyInvalidInput(builder);
                }
            },
            verifyRoundtrip: function (input, expected, expectedLengthBytes) {
                if (expected === void 0) { expected = null; }
                if (expectedLengthBytes === void 0) { expectedLengthBytes = null; }
                if (expected == null) {
                    expected = input;
                }
    
                Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.verify(input, function (result) {
                    if (System.Nullable.hasValue(expectedLengthBytes)) {
                        Bridge.Test.Assert.areEqual(System.Nullable.getValue(expectedLengthBytes), result.length);
                    }
                    Bridge.Test.Assert.areEqual(expected, System.Convert.toBase64String(result, null, null, null));
                    Bridge.Test.Assert.areEqual(expected, System.Convert.toBase64String(result, 0, result.length, null));
                });
            },
            verifyInvalidInput: function (input) {
                var inputChars = System.String.toCharArray(input, 0, input.length);
    
                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.fromBase64CharArray(inputChars, 0, inputChars.length);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.f5);
                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.fromBase64String(input);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests.f5);
    
            },
            verify: function (input, action) {
                if (action === void 0) { action = null; }
                if (!Bridge.staticEquals(action, null)) {
                    action(System.Convert.fromBase64CharArray(System.String.toCharArray(input, 0, input.length), 0, input.length));
                    action(System.Convert.fromBase64String(input));
                }
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests", $_);
    
    Bridge.apply($_.Bridge.ClientTest.ConvertTests.ConvertFromBase64Tests, {
        f1: function (result) {
            Bridge.Test.Assert.notNull(result);
            Bridge.Test.Assert.areEqual(0, result.length);
        },
        f2: function (err) {
            return Bridge.is(err, System.ArgumentOutOfRangeException);
        },
        f3: function () {
            System.Convert.fromBase64CharArray(null, 0, 3);
        },
        f4: function (err) {
            return Bridge.is(err, System.ArgumentNullException);
        },
        f5: function (err) {
            return Bridge.is(err, System.FormatException);
        }
    });
    
    Bridge.define('Bridge.ClientTest.ConvertTests.ConvertTestBase$1', function (TOutput) { return {
        /**
         * Verify that the provided convert delegate produces expectedValues given testValues.
         *
         * @instance
         * @protected
         * @this Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @memberof Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @param   {Function}           TInput            
         * @param   {System.Func}        convert           
         * @param   {Array.<TInput>}     testValues        
         * @param   {Array.<TOutput>}    expectedValues    
         * @param   {boolean}            useTrue
         * @return  {void}
         */
        verify: function (TInput, convert, testValues, expectedValues, useTrue) {
            if (useTrue === void 0) { useTrue = false; }
            if (expectedValues == null || testValues == null || expectedValues.length !== testValues.length) {
                Bridge.Test.Assert.fail$1("Test data should have the same lenght");
                return;
            }
    
            for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                var testValue = testValues[i];
    
                try {
                    var result = convert(testValue);
    
                    var expected = expectedValues[i];
    
                    if (useTrue) {
                        Bridge.Test.Assert.true$1(Bridge.equals(expected, result), "Test: " + testValue + " Expected: " + expected.toString() + " Result: " + result.toString());
                    }
                    else  {
                        Bridge.Test.Assert.areEqual(expected, result);
                    }
                }
                catch (ex) {
                    ex = System.Exception.create(ex);
                    Bridge.Test.Assert.fail$1("Exception occurred while Verify " + testValue + " Exception: " + ex.toString());
                }
            }
        },
        /**
         * Verify that the provided convert delegate produces expectedValues given testValues.
         The overloading should be used to test methods accepting objects.
         *
         * @instance
         * @protected
         * @this Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @memberof Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @param   {Function}           TInput            
         * @param   {System.Func}        convert           
         * @param   {Array.<TInput>}     testValues        
         * @param   {Array.<TOutput>}    expectedValues
         * @return  {void}
         */
        verifyViaObj: function (TInput, convert, testValues, expectedValues) {
            if (expectedValues == null || testValues == null || expectedValues.length !== testValues.length) {
                Bridge.Test.Assert.fail$1("Test data should have the same lenght");
                return;
            }
    
            for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                var testValue = testValues[i];
    
                try {
                    var result = convert(testValue);
    
                    var expected = expectedValues[i];
    
                    Bridge.Test.Assert.areEqual(expected, result);
                }
                catch (ex) {
                    ex = System.Exception.create(ex);
                    Bridge.Test.Assert.fail$1("Exception occurred while VerifyViaObj " + testValue + " Exception: " + ex.toString());
                }
            }
        },
        /**
         * Verify that the provided convert delegates produce expectedValues given testValues
         *
         * @instance
         * @protected
         * @this Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @memberof Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @param   {System.Func}        convert                      
         * @param   {System.Func}        convertWithFormatProvider    
         * @param   {Array.<string>}     testValues                   
         * @param   {Array.<TOutput>}    expectedValues               
         * @param   {boolean}            useTrue
         * @return  {void}
         */
        verifyFromString: function (convert, convertWithFormatProvider, testValues, expectedValues, useTrue) {
            if (useTrue === void 0) { useTrue = false; }
            this.verify(String, convert, testValues, expectedValues, useTrue);
            this.verify(String, function (input) {
                return convertWithFormatProvider(input, Bridge.ClientTest.ConvertTests.ConvertTestBase$1.TestFormatProvider(TOutput).s_instance);
            }, testValues, expectedValues, useTrue);
        },
        /**
         * Verify that the provided convert delegates produce expectedValues given testValues
         *
         * @instance
         * @protected
         * @this Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @memberof Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @param   {System.Func}        convert                      
         * @param   {System.Func}        convertWithFormatProvider    
         * @param   {Array.<Object>}     testValues                   
         * @param   {Array.<TOutput>}    expectedValues
         * @return  {void}
         */
        verifyFromObject: function (convert, convertWithFormatProvider, testValues, expectedValues) {
            this.verify(Object, convert, testValues, expectedValues);
            this.verify(Object, function (input) {
                return convertWithFormatProvider(input, Bridge.ClientTest.ConvertTests.ConvertTestBase$1.TestFormatProvider(TOutput).s_instance);
            }, testValues, expectedValues);
        },
        /**
         * Verify that the provided convert delegate produces expectedValues given testValues and testBases
         *
         * @instance
         * @protected
         * @this Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @memberof Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @param   {System.Func}        convert           
         * @param   {Array.<string>}     testValues        
         * @param   {Array.<number>}     testBases         
         * @param   {Array.<TOutput>}    expectedValues    
         * @param   {boolean}            useTrue
         * @return  {void}
         */
        verifyFromStringWithBase: function (convert, testValues, testBases, expectedValues, useTrue) {
            if (useTrue === void 0) { useTrue = false; }
            if (expectedValues == null || testBases == null || testValues == null || expectedValues.length !== testValues.length || testBases.length !== testValues.length) {
                Bridge.Test.Assert.fail$1("Test data should have the same lenghts");
                return;
            }
    
            for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                var testValue = testValues[i];
                var radix = testBases[i];
    
                try {
                    var result = convert(testValue, radix);
    
                    var expected = expectedValues[i];
    
                    if (useTrue) {
                        Bridge.Test.Assert.true$1(Bridge.equals(expected, result), "Test: " + testValue + " Radix: " + radix + " Expected: " + expected.toString() + " Result: " + result.toString());
                    }
                    else  {
                        Bridge.Test.Assert.areEqual(expected, result);
                    }
                }
                catch (ex) {
                    ex = System.Exception.create(ex);
                    Bridge.Test.Assert.fail$1("Exception occurred while VerifyFromStringWithBase " + testValue + " Radix: " + radix + " Exception: " + ex.toString());
                }
            }
        },
        /**
         * Verify that the provided convert delegate throws an exception of type TException given testValues and testBases
         *
         * @instance
         * @protected
         * @this Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @memberof Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @param   {Function}          TException    
         * @param   {System.Func}       convert       
         * @param   {Array.<string>}    testValues    
         * @param   {Array.<number>}    testBases
         * @return  {void}
         */
        verifyFromStringWithBaseThrows: function (TException, convert, testValues, testBases) {
            if (testBases == null || testValues == null || testBases.length !== testValues.length) {
                Bridge.Test.Assert.fail$1("Test data should have the same lenght");
                return;
            }
    
            for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                (function () {
                    try {
                        Bridge.Test.Assert.throws$2(function () {
                            convert(testValues[i], testBases[i]);
                        }, function (err) {
                            return Bridge.referenceEquals(Bridge.getTypeName(err), Bridge.getTypeName(TException));
                        }, "Value " + testValues[i] + " base " + testBases[i]);
                    }
                    catch (e) {
                        e = System.Exception.create(e);
                        var message = System.String.format("Expected {0} converting '{1}' (base {2}) to '{3}'", Bridge.getTypeName(TException), testValues[i], testBases[i], Bridge.getTypeName(TOutput));
                        throw new System.AggregateException(message, [e]);
                    }
                }).call(this);
            }
        },
        /**
         * Verify that the provided convert delegate throws an exception of type TException given testValues
         *
         * @instance
         * @protected
         * @this Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @memberof Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @param   {Function}          TException    
         * @param   {Function}          TInput        
         * @param   {System.Func}       convert       
         * @param   {Array.<TInput>}    testValues
         * @return  {void}
         */
        verifyThrows: function (TException, TInput, convert, testValues) {
            for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                (function () {
                    try {
                        Bridge.Test.Assert.throws$2(function () {
                            convert(testValues[i]);
                        }, function (err) {
                            return Bridge.referenceEquals(Bridge.getTypeName(err), Bridge.getTypeName(TException));
                        }, "Value " + testValues[i]);
                    }
                    catch (e) {
                        e = System.Exception.create(e);
                        var message = System.String.format("Expected {0} converting '{1}' ({2}) to {3}", Bridge.getTypeName(TException), testValues[i], Bridge.getTypeName(TInput), Bridge.getTypeName(TOutput));
                        throw new System.AggregateException(message, [e]);
                    }
                }).call(this);
            }
        },
        /**
         * Verify that the provided convert delegate throws an exception of type TException given testValues
         The overloading should be used to test methods accepting objects.
         *
         * @instance
         * @protected
         * @this Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @memberof Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @param   {Function}          TException    
         * @param   {Function}          TInput        
         * @param   {System.Func}       convert       
         * @param   {Array.<TInput>}    testValues
         * @return  {void}
         */
        verifyThrowsViaObj: function (TException, TInput, convert, testValues) {
            for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                (function () {
                    try {
                        Bridge.Test.Assert.throws$2(function () {
                            convert(testValues[i]);
                        }, function (err) {
                            return Bridge.referenceEquals(Bridge.getTypeName(err), Bridge.getTypeName(TException));
                        }, "Value " + testValues[i]);
                    }
                    catch (e) {
                        e = System.Exception.create(e);
                        var message = System.String.format("Expected {0} converting '{1}' ({2}) to {3}", Bridge.getTypeName(TException), testValues[i], Bridge.getTypeName(TInput), Bridge.getTypeName(TOutput));
                        throw new System.AggregateException(message, [e]);
                    }
                }).call(this);
            }
        },
        /**
         * Verify that the provided convert delegates throws an exception of type TException given testValues
         *
         * @instance
         * @protected
         * @this Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @memberof Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @param   {Function}          TException                   
         * @param   {System.Func}       convert                      
         * @param   {System.Func}       convertWithFormatProvider    
         * @param   {Array.<string>}    testValues
         * @return  {void}
         */
        verifyFromStringThrows: function (TException, convert, convertWithFormatProvider, testValues) {
            this.verifyThrows(TException, String, convert, testValues);
            this.verifyThrows(TException, String, function (input) {
                return convertWithFormatProvider(input, Bridge.ClientTest.ConvertTests.ConvertTestBase$1.TestFormatProvider(TOutput).s_instance);
            }, testValues);
        },
        /**
         * Verify that the provided convert delegates throw exception of type TException given testValues
         *
         * @instance
         * @protected
         * @this Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @memberof Bridge.ClientTest.ConvertTests.ConvertTestBase$1
         * @param   {Function}          TException                   
         * @param   {System.Func}       convert                      
         * @param   {System.Func}       convertWithFormatProvider    
         * @param   {Array.<Object>}    testValues
         * @return  {void}
         */
        verifyFromObjectThrows: function (TException, convert, convertWithFormatProvider, testValues) {
            this.verifyThrows(TException, Object, convert, testValues);
            this.verifyThrows(TException, Object, function (input) {
                return convertWithFormatProvider(input, Bridge.ClientTest.ConvertTests.ConvertTestBase$1.TestFormatProvider(TOutput).s_instance);
            }, testValues);
        }
    }; });
    
    /** @namespace Bridge.ClientTest.ConvertTests */
    
    /**
     * Helper class to test that the IFormatProvider is being called.
     *
     * @protected
     * @class Bridge.ClientTest.ConvertTests.ConvertTestBase$1.TestFormatProvider
     * @implements  System.IFormatProvider
     */
    Bridge.define('Bridge.ClientTest.ConvertTests.ConvertTestBase$1.TestFormatProvider', function (TOutput) { return {
        inherits: [System.IFormatProvider],
        statics: {
            s_instance: null,
            config: {
                init: function () {
                    this.s_instance = new Bridge.ClientTest.ConvertTests.ConvertTestBase$1.TestFormatProvider(TOutput)();
                }
            }
        },
        constructor: function () {
        },
        getFormat: function (formatType) {
            return this;
        },
        format: function (format, arg, formatProvider) {
            return arg.toString();
        },
        getAllDateTimePatterns: function (format, returnNull) {
            return "G";
        }
    }; });
    
    Bridge.define('Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests', {
        statics: {
            validOffsetIn: function () {
                var input = "test";
                var inputBytes = System.Convert.fromBase64String(input);
                var resultChars = System.Array.init(4, function (){
                    return new System.Char();
                });
                var fillCharCount = System.Convert.toBase64CharArray(inputBytes, 0, ((inputBytes.length - 1) | 0), resultChars, 0, null);
                Bridge.Test.Assert.areEqual(input.length, fillCharCount);
            },
            shortInputArray: function () {
                // Regression test for bug where a short input array caused an exception to be thrown
                var inputBuffer = [97, 98, 99];
                var ouputBuffer = System.Array.init(4, function (){
                    return new System.Char();
                });
                var c1 = System.Convert.toBase64CharArray(inputBuffer, 0, 3, ouputBuffer, 0, null);
                Bridge.Test.Assert.areEqual(4, c1);
    
                var c2 = System.Convert.toBase64CharArray(inputBuffer, 0, 2, ouputBuffer, 0, null);
                Bridge.Test.Assert.areEqual(4, c2);
    
            },
            validOffsetOut: function () {
                // Regression test for bug where offsetOut parameter was ignored
                var outputBuffer = System.String.toCharArray(("........"), 0, ("........").length);
                var inputBuffer = System.Array.init(6, 0);
                for (var i = 0; i < inputBuffer.length; inputBuffer[i] = (Bridge.identity(i, (i = (i + 1) | 0))) & 255) {
                    ;
                }
    
                // Convert the first half of the byte array, write to the first half of the char array
                var c = System.Convert.toBase64CharArray(inputBuffer, 0, 3, outputBuffer, 0, null);
                Bridge.Test.Assert.areEqual(4, c);
                Bridge.Test.Assert.areEqual("AAEC....", String.fromCharCode.apply(null, outputBuffer));
    
                // Convert the second half of the byte array, write to the second half of the char array
                c = System.Convert.toBase64CharArray(inputBuffer, 3, 3, outputBuffer, 4, null);
                Bridge.Test.Assert.areEqual(4, c);
                Bridge.Test.Assert.areEqual("AAECAwQF", String.fromCharCode.apply(null, outputBuffer));
            },
            invalidInputBuffer: function () {
                Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.f1, $_.Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.f2);
            },
            invalidOutputBuffer: function () {
                var inputChars = System.String.toCharArray(("test"), 0, ("test").length);
                var inputBytes = System.Convert.fromBase64CharArray(inputChars, 0, inputChars.length);
                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.toBase64CharArray(inputBytes, 0, inputBytes.length, null, 0, null);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.f2);
            },
            invalidOffsetIn: function () {
                var inputChars = System.String.toCharArray(("test"), 0, ("test").length);
                var inputBytes = System.Convert.fromBase64CharArray(inputChars, 0, inputChars.length);
                var outputBuffer = System.Array.init(4, function (){
                    return new System.Char();
                });
    
                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.toBase64CharArray(inputBytes, -1, inputBytes.length, outputBuffer, 0, null);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.f3);
                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.toBase64CharArray(inputBytes, inputBytes.length, inputBytes.length, outputBuffer, 0, null);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.f3);
            },
            invalidOffsetOut: function () {
                var inputChars = System.String.toCharArray(("test"), 0, ("test").length);
                var inputBytes = System.Convert.fromBase64CharArray(inputChars, 0, inputChars.length);
                var outputBuffer = System.Array.init(4, function (){
                    return new System.Char();
                });
    
                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.toBase64CharArray(inputBytes, 0, inputBytes.length, outputBuffer, -1, null);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.f3);
                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.toBase64CharArray(inputBytes, 0, inputBytes.length, outputBuffer, 1, null);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.f3);
            },
            invalidInputLength: function () {
                var inputChars = System.String.toCharArray(("test"), 0, ("test").length);
                var inputBytes = System.Convert.fromBase64CharArray(inputChars, 0, inputChars.length);
                var outputBuffer = System.Array.init(4, function (){
                    return new System.Char();
                });
    
                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.toBase64CharArray(inputBytes, 0, -1, outputBuffer, 0, null);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.f3);
                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.toBase64CharArray(inputBytes, 0, ((inputBytes.length + 1) | 0), outputBuffer, 0, null);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.f3);
                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.toBase64CharArray(inputBytes, 1, inputBytes.length, outputBuffer, 0, null);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests.f3);
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests", $_);
    
    Bridge.apply($_.Bridge.ClientTest.ConvertTests.ConvertToBase64CharArrayTests, {
        f1: function () {
            System.Convert.toBase64CharArray(null, 0, 1, System.Array.init(1, function (){
                return new System.Char();
            }), 0, null);
        },
        f2: function (err) {
            return Bridge.is(err, System.ArgumentNullException);
        },
        f3: function (err) {
            return Bridge.is(err, System.ArgumentOutOfRangeException);
        }
    });
    
    Bridge.define('Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests', {
        statics: {
            knownByteSequence: function () {
                var inputBytes = System.Array.init(4, 0);
                for (var i = 0; i < 4; i = (i + 1) | 0) {
                    inputBytes[i] = ((((i + 5) | 0))) & 255;
                }
    
                // The sequence of bits for this byte array is
                // 00000101000001100000011100001000
                // Encoding adds 16 bits of trailing bits to make this a multiple of 24 bits.
                // |        +         +         +         +    
                // 000001010000011000000111000010000000000000000000
                // which is, (Interesting, how do we distinguish between '=' and 'A'?)
                // 000001 010000 011000 000111 000010 000000 000000 000000
                // B      Q      Y      H      C      A      =      =
    
                Bridge.Test.Assert.areEqual("BQYHCA==", System.Convert.toBase64String(inputBytes, null, null, null));
            },
            zeroLength: function () {
                var inputBytes = System.Convert.fromBase64String("test");
                Bridge.Test.Assert.areEqual("", System.Convert.toBase64String(inputBytes, 0, 0, null));
            },
            invalidInputBuffer: function () {
                Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests.f1, $_.Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests.f2);
                Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests.f3, $_.Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests.f2);
            },
            invalidOffset: function () {
                var inputBytes = System.Convert.fromBase64String("test");
    
                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.toBase64String(inputBytes, -1, inputBytes.length, null);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests.f4);
                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.toBase64String(inputBytes, inputBytes.length, inputBytes.length, null);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests.f4);
            },
            invalidLength: function () {
                var inputBytes = System.Convert.fromBase64String("test");
    
                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.toBase64String(inputBytes, 0, -1, null);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests.f4);
                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.toBase64String(inputBytes, 0, ((inputBytes.length + 1) | 0), null);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests.f4);
                Bridge.Test.Assert.throws$1(function () {
                    System.Convert.toBase64String(inputBytes, 1, inputBytes.length, null);
                }, $_.Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests.f4);
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests", $_);
    
    Bridge.apply($_.Bridge.ClientTest.ConvertTests.ConvertToBase64StringTests, {
        f1: function () {
            System.Convert.toBase64String(null, null, null, null);
        },
        f2: function (err) {
            return Bridge.is(err, System.ArgumentNullException);
        },
        f3: function () {
            System.Convert.toBase64String(null, 0, 0, null);
        },
        f4: function (err) {
            return Bridge.is(err, System.ArgumentOutOfRangeException);
        }
    });
    
    Bridge.define('Bridge.ClientTest.ConvertTests.ConvertToStringTests', {
        statics: {
            fromBoxedObject: function () {
                var testValues = [true, false, System.Decimal.Zero, System.Decimal.One, System.Decimal.MinusOne, System.Decimal.MaxValue, System.Decimal.MinValue, System.Decimal("1.234567890123456789012345678", System.Globalization.NumberFormatInfo.invariantInfo), System.Decimal("1234.56", System.Globalization.NumberFormatInfo.invariantInfo), System.Decimal("-1234.56", System.Globalization.NumberFormatInfo.invariantInfo), -12.2364, -12.236465923406483, -1.7753E-83, 1.2345E+235, 120.0, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, Number.NaN, -12.2364, 0.0, 120.0, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, Number.NaN, -128, 0, 127, -32768, 0, 32767, -2147483648, 0, 2147483647, System.Int64.MinValue, System.Int64(0), System.Int64.MaxValue, 0, 100, 255, 0, 100, 65535, 0, 100, 4294967295, System.UInt64.MinValue, System.UInt64(100), System.UInt64.MaxValue];
    
                var expectedValues = ["True", "False", "0", "1", "-1", Bridge.ClientTest.ConvertTests.ConvertConstants.DECIMAL_MAX_STRING, Bridge.ClientTest.ConvertTests.ConvertConstants.DECIMAL_MIN_STRING, "1.234567890123456789012345678", "1234.56", "-1234.56", "-12.2364", "-12.2364659234065", "-1.7753e-83", "1.2345e+235", "120", "-Infinity", "Infinity", "NaN", "-12.2364", "0", "120", "-Infinity", "Infinity", "NaN", (-128).toString(), "0", (127).toString(), (-32768).toString(), "0", (32767).toString(), (-2147483648).toString(), "0", (2147483647).toString(), System.Int64.MinValue.toString(), "0", System.Int64.MaxValue.toString(), (0).toString(), "100", (255).toString(), (0).toString(), "100", (65535).toString(), (0).toString(), "100", (4294967295).toString(), System.UInt64.MinValue.toString(), "100", System.UInt64.MaxValue.toString()];
    
                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual$1(expectedValues[i].toLowerCase(), System.Convert.toString(testValues[i], System.Globalization.NumberFormatInfo.invariantInfo).toLowerCase(), "Index in testValues " + i);
                }
            },
            fromObject: function () {
                Bridge.Test.Assert.areEqual("Bridge.ClientTest.ConvertTests.ConvertToStringTests", System.Convert.toString(new Bridge.ClientTest.ConvertTests.ConvertToStringTests()));
            },
            fromDateTime: function () {
                var testValues = [new Date(2000, 8 - 1, 15, 16, 59, 59), new Date(1901, 1 - 1, 1, 1, 1, 1)];
                var expectedValues = ["08/15/2000 16:59:59", "01/01/1901 01:01:01"];
    
                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(Bridge.Date.format(testValues[i]), System.Convert.toString(testValues[i]));
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toString(testValues[i], System.Globalization.DateTimeFormatInfo.invariantInfo));
                }
            },
            fromChar: function () {
                var testValues = [97, 65, 64, 10];
                var expectedValues = ["a", "A", "@", "\n"];
    
                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toString(testValues[i], null, 4));
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toString(testValues[i], System.Globalization.CultureInfo.invariantCulture, 4));
                }
            },
            fromByteBase2: function () {
                var testValues = [0, 100, 255];
                var expectedValues = [(0).toString(), "1100100", Bridge.ClientTest.ConvertTests.ConvertConstants.UINT8_MAX_STRING_BASE_2];
    
                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toStringInBase(testValues[i], 2, 6));
                }
            },
            fromByteBase8: function () {
                var testValues = [0, 100, 255];
                var expectedValues = [(0).toString(), "144", Bridge.ClientTest.ConvertTests.ConvertConstants.UINT8_MAX_STRING_BASE_8];
    
                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toStringInBase(testValues[i], 8, 6));
                }
            },
            fromByteBase10: function () {
                var testValues = [0, 100, 255];
                var expectedValues = [(0).toString(), "100", (255).toString()];
    
                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toStringInBase(testValues[i], 10, 6));
                }
            },
            fromByteBase16: function () {
                var testValues = [0, 100, 255];
                var expectedValues = [(0).toString(), "64", Bridge.ClientTest.ConvertTests.ConvertConstants.UINT8_MAX_STRING_BASE_16];
    
                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toStringInBase(testValues[i], 16, 6));
                }
            },
            fromByteInvalidBase: function () {
                Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToStringTests.f1, $_.Bridge.ClientTest.ConvertTests.ConvertToStringTests.f2);
            },
            fromInt16Base2: function () {
                var testValues = [-32768, 0, 32767];
                var expectedValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.INT16_MIN_STRING_BASE_2, "0", Bridge.ClientTest.ConvertTests.ConvertConstants.INT16_MAX_STRING_BASE_2];
    
                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toStringInBase(testValues[i], 2, 7));
                }
            },
            fromInt16Base8: function () {
                var testValues = [-32768, 0, 32767];
                var expectedValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.INT16_MIN_STRING_BASE_8, "0", Bridge.ClientTest.ConvertTests.ConvertConstants.INT16_MAX_STRING_BASE_8];
    
                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toStringInBase(testValues[i], 8, 7));
                }
            },
            fromInt16Base10: function () {
                var testValues = [-32768, 0, 32767];
                var expectedValues = [(-32768).toString(), "0", (32767).toString()];
    
                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toStringInBase(testValues[i], 10, 7));
                }
            },
            fromInt16Base16: function () {
                var testValues = [-32768, 0, 32767];
                var expectedValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.INT16_MIN_STRING_BASE_16, "0", Bridge.ClientTest.ConvertTests.ConvertConstants.INT16_MAX_STRING_BASE_16];
    
                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toStringInBase(testValues[i], 16, 7));
                }
            },
            fromInt16InvalidBase: function () {
                Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToStringTests.f3, $_.Bridge.ClientTest.ConvertTests.ConvertToStringTests.f2);
            },
            fromInt32Base2: function () {
                var testValues = [-2147483648, 0, 2147483647];
                var expectedValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.INT32_MIN_STRING_BASE_2, "0", Bridge.ClientTest.ConvertTests.ConvertConstants.INT32_MAX_STRING_BASE_2];
    
                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toStringInBase(testValues[i], 2, 9));
                }
            },
            fromInt32Base8: function () {
                var testValues = [-2147483648, 0, 2147483647];
                var expectedValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.INT32_MIN_STRING_BASE_8, "0", Bridge.ClientTest.ConvertTests.ConvertConstants.INT32_MAX_STRING_BASE_8];
    
                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toStringInBase(testValues[i], 8, 9));
                }
            },
            fromInt32Base10: function () {
                var testValues = [-2147483648, 0, 2147483647];
                var expectedValues = [System.Int32.format(-2147483648, null), "0", System.Int32.format(2147483647, null)];
    
                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toStringInBase(testValues[i], 10, 9));
                }
            },
            fromInt32Base16: function () {
                var testValues = [-2147483648, 0, 2147483647];
                var expectedValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.INT32_MIN_STRING_BASE_16, "0", Bridge.ClientTest.ConvertTests.ConvertConstants.INT32_MAX_STRING_BASE_16];
    
                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toStringInBase(testValues[i], 16, 9));
                }
            },
            fromInt32InvalidBase: function () {
                Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToStringTests.f4, $_.Bridge.ClientTest.ConvertTests.ConvertToStringTests.f2);
            },
            fromInt64Base2: function () {
                var testValues = [System.Int64.MinValue, System.Int64(0), System.Int64.MaxValue];
                var expectedValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.INT64_MIN_STRING_BASE_2, "0", Bridge.ClientTest.ConvertTests.ConvertConstants.INT64_MAX_STRING_BASE_2];
    
                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toStringInBase(testValues[i], 2, 11));
                }
            },
            fromInt64Base8: function () {
                var testValues = [System.Int64.MinValue, System.Int64(0), System.Int64.MaxValue];
                var expectedValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.INT64_MIN_STRING_BASE_8, "0", Bridge.ClientTest.ConvertTests.ConvertConstants.INT64_MAX_STRING_BASE_8];
    
                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toStringInBase(testValues[i], 8, 11));
                }
            },
            fromInt64Base10: function () {
                var testValues = [System.Int64.MinValue, System.Int64(0), System.Int64.MaxValue];
                var expectedValues = [System.Int64.MinValue.toString(), "0", System.Int64.MaxValue.toString()];
    
                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toStringInBase(testValues[i], 10, 11));
                }
            },
            fromInt64Base16: function () {
                var testValues = [System.Int64.MinValue, System.Int64(0), System.Int64.MaxValue];
                var expectedValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.INT64_MIN_STRING_BASE_16, "0", Bridge.ClientTest.ConvertTests.ConvertConstants.INT64_MAX_STRING_BASE_16];
    
                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual(expectedValues[i], System.Convert.toStringInBase(testValues[i], 16, 11));
                }
            },
            fromInt64InvalidBase: function () {
                Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToStringTests.f5, $_.Bridge.ClientTest.ConvertTests.ConvertToStringTests.f2);
            },
            fromBoolean: function () {
                var testValues = [true, false];
                var expectedValues = ["True", "False"];
    
                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    var expected = expectedValues[i];
                    var actual = System.Convert.toString(testValues[i]);
                    Bridge.Test.Assert.areEqual(expected, actual);
                    actual = System.Convert.toString(testValues[i], System.Globalization.NumberFormatInfo.currentInfo);
                    Bridge.Test.Assert.areEqual(expected, actual);
                }
            },
            fromSByte: function () {
                var testValues = [-128, -1, 0, 1, 127];
    
                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    var result = System.Convert.toString(testValues[i]);
                    Bridge.Test.Assert.areEqual(testValues[i].toString(), result);
                    result = System.Convert.toString(testValues[i], System.Globalization.NumberFormatInfo.currentInfo);
                    Bridge.Test.Assert.areEqual(System.SByte.format(testValues[i], null, System.Globalization.NumberFormatInfo.currentInfo), result);
                }
            },
            fromByte: function () {
                var testValues = [0, 0, 1, 100, 255];
    
                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    var result = System.Convert.toString(testValues[i]);
                    Bridge.Test.Assert.areEqual(testValues[i].toString(), result);
                    result = System.Convert.toString(testValues[i], System.Globalization.NumberFormatInfo.currentInfo);
                    Bridge.Test.Assert.areEqual(System.Byte.format(testValues[i], null, System.Globalization.NumberFormatInfo.currentInfo), result);
                }
            },
            fromInt16Array: function () {
                var testValues = [-32768, -1000, -1, 0, 1, 1000, 32767];
    
                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    var result = System.Convert.toString(testValues[i]);
                    Bridge.Test.Assert.areEqual(testValues[i].toString(), result);
                    result = System.Convert.toString(testValues[i], System.Globalization.NumberFormatInfo.currentInfo);
                    Bridge.Test.Assert.areEqual(System.Int16.format(testValues[i], null, System.Globalization.NumberFormatInfo.currentInfo), result);
                }
            },
            fromUInt16Array: function () {
                var testValues = [0, 0, 1, 1000, 65535];
    
                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    var result = System.Convert.toString(testValues[i]);
                    Bridge.Test.Assert.areEqual(testValues[i].toString(), result);
                    result = System.Convert.toString(testValues[i], System.Globalization.NumberFormatInfo.currentInfo);
                    Bridge.Test.Assert.areEqual(System.UInt16.format(testValues[i], null, System.Globalization.NumberFormatInfo.currentInfo), result);
                }
            },
            fromInt32Array: function () {
                var testValues = [-2147483648, -1000, -1, 0, 1, 1000, 2147483647];
    
                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    var result = System.Convert.toString(testValues[i]);
                    Bridge.Test.Assert.areEqual(testValues[i].toString(), result);
                    result = System.Convert.toString(testValues[i], System.Globalization.NumberFormatInfo.currentInfo);
                    Bridge.Test.Assert.areEqual(System.Int32.format(testValues[i], null, System.Globalization.NumberFormatInfo.currentInfo), result);
                }
            },
            fromUInt32Array: function () {
                var testValues = [0, 0, 1, 1000, 4294967295];
    
                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    var result = System.Convert.toString(testValues[i]);
                    Bridge.Test.Assert.areEqual(testValues[i].toString(), result);
                    result = System.Convert.toString(testValues[i], System.Globalization.NumberFormatInfo.currentInfo);
                    Bridge.Test.Assert.areEqual(System.UInt32.format(testValues[i], null, System.Globalization.NumberFormatInfo.currentInfo), result);
                }
            },
            fromInt64Array: function () {
                var testValues = [System.Int64.MinValue, System.Int64(-1000), System.Int64(-1), System.Int64(0), System.Int64(1), System.Int64(1000), System.Int64.MaxValue];
    
                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    var result = System.Convert.toString(testValues[i]);
                    Bridge.Test.Assert.areEqual(testValues[i].toString(), result);
                    result = System.Convert.toString(testValues[i], System.Globalization.NumberFormatInfo.currentInfo);
                    Bridge.Test.Assert.areEqual(testValues[i].toString(null, System.Globalization.NumberFormatInfo.currentInfo), result);
                }
            },
            fromUInt64Array: function () {
                var testValues = [System.UInt64.MinValue, System.UInt64(0), System.UInt64(1), System.UInt64(1000), System.UInt64.MaxValue];
    
                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    var result = System.Convert.toString(testValues[i]);
                    Bridge.Test.Assert.areEqual(testValues[i].toString(), result);
                    result = System.Convert.toString(testValues[i], System.Globalization.NumberFormatInfo.currentInfo);
                    Bridge.Test.Assert.areEqual(testValues[i].toString(null, System.Globalization.NumberFormatInfo.currentInfo), result);
                }
            },
            fromSingleArray: function () {
                var testValues = [-3.40282347E+38, 0.0, 1.0, 1000.0, 3.40282347E+38, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, 1.401298E-45, Number.NaN];
                var expectedValues1 = [Bridge.ClientTest.ConvertTests.ConvertConstants.SINGLE_MIN_STRING, "0", "1", "1000", Bridge.ClientTest.ConvertTests.ConvertConstants.SINGLE_MAX_STRING, "-Infinity", "Infinity", Bridge.ClientTest.ConvertTests.ConvertConstants.SINGLE_EPSILON_STRING, "NaN"];
                var expectedValues2 = [Bridge.ClientTest.ConvertTests.ConvertConstants.SINGLE_MIN_STRING, "0", "1", "1000", Bridge.ClientTest.ConvertTests.ConvertConstants.SINGLE_MAX_STRING, "-Infinity", "Infinity", Bridge.ClientTest.ConvertTests.ConvertConstants.SINGLE_EPSILON_STRING, "NaN"];
    
                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    var result = System.Convert.toString(testValues[i]);
                    Bridge.Test.Assert.areEqual(expectedValues1[i], result);
    
                    result = System.Convert.toString(testValues[i], System.Globalization.NumberFormatInfo.currentInfo);
                    Bridge.Test.Assert.areEqual(expectedValues2[i], result);
                }
            },
            fromDoubleArray: function () {
                var testValues = [-System.Double.max, 0.0, 1.0, 1000.0, System.Double.max, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, 4.94065645841247E-324, Number.NaN];
                var expectedValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.DOUBLE_MIN_STRING, "0", "1", "1000", Bridge.ClientTest.ConvertTests.ConvertConstants.DOUBLE_MAX_STRING, "-Infinity", "Infinity", Bridge.ClientTest.ConvertTests.ConvertConstants.DOUBLE_EPSILON_STRING, "NaN"];
    
                // Vanila Test Cases
                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    var result = System.Convert.toString(testValues[i], System.Globalization.NumberFormatInfo.currentInfo);
                    Bridge.Test.Assert.areEqual(expectedValues[i], result);
                }
            },
            fromDecimalArray: function () {
                var testValues = [System.Decimal.MinValue, System.Decimal("-1.234567890123456789012345678", System.Globalization.NumberFormatInfo.invariantInfo), System.Decimal(0.0), System.Decimal(1.0), System.Decimal(1000.0), System.Decimal.MaxValue, System.Decimal.One, System.Decimal.Zero, System.Decimal.MinusOne];
                var expectedValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.DECIMAL_MIN_STRING, "-1.234567890123456789012345678", "0", "1", "1000", Bridge.ClientTest.ConvertTests.ConvertConstants.DECIMAL_MAX_STRING, "1", "0", "-1"];
    
                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    var result = System.Convert.toString(testValues[i]);
                    Bridge.Test.Assert.areEqual(expectedValues[i], result);
                }
            },
            fromDateTimeArray: function () {
                var testValues = [Bridge.Date.parse("08/15/2000 16:59:59", System.Globalization.DateTimeFormatInfo.invariantInfo), Bridge.Date.parse("01/01/0001 01:01:01", System.Globalization.DateTimeFormatInfo.invariantInfo)];
    
                var formatProvider = System.Globalization.DateTimeFormatInfo.invariantInfo;
    
                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    var result = System.Convert.toString(testValues[i]);
                    Bridge.Test.Assert.areEqual(Bridge.Date.format(testValues[i]), result);
                    result = System.Convert.toString(testValues[i], formatProvider);
                    var expected = Bridge.Date.format(testValues[i], null, formatProvider);
                    Bridge.Test.Assert.areEqual(expected, result);
                }
            },
            fromString: function () {
                var testValues = ["Hello", " ", "", "\u0000"];
    
                for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                    var result = System.Convert.toString(testValues[i]);
                    Bridge.Test.Assert.areEqual(testValues[i].toString(), result);
                    result = System.Convert.toString(testValues[i], System.Globalization.NumberFormatInfo.currentInfo);
                    Bridge.Test.Assert.areEqual(testValues[i].toString(), result);
                }
            },
            fromIFormattable: function () {
                var foo = new Bridge.ClientTest.ConvertTests.ConvertToStringTests.FooFormattable(3);
                var result = System.Convert.toString(foo);
                Bridge.Test.Assert.areEqual("FooFormattable: 3", result);
                result = System.Convert.toString(foo, System.Globalization.NumberFormatInfo.currentInfo);
                Bridge.Test.Assert.areEqual("System.Globalization.NumberFormatInfo: 3", result);
    
                foo = null;
                result = System.Convert.toString(foo, System.Globalization.NumberFormatInfo.currentInfo);
                Bridge.Test.Assert.areEqual("", result);
            },
            fromNonIConvertible: function () {
                var foo = new Bridge.ClientTest.ConvertTests.ConvertToStringTests.Foo(3);
                var result = System.Convert.toString(foo);
                Bridge.Test.Assert.areEqual("Bridge.ClientTest.ConvertTests.ConvertToStringTests.Foo", result);
                result = System.Convert.toString(foo, System.Globalization.NumberFormatInfo.currentInfo);
                Bridge.Test.Assert.areEqual("Bridge.ClientTest.ConvertTests.ConvertToStringTests.Foo", result);
    
                foo = null;
                result = System.Convert.toString(foo, System.Globalization.NumberFormatInfo.currentInfo);
                Bridge.Test.Assert.areEqual("", result);
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.ConvertTests.ConvertToStringTests", $_);
    
    Bridge.apply($_.Bridge.ClientTest.ConvertTests.ConvertToStringTests, {
        f1: function () {
            System.Convert.toStringInBase(255, 13, 6);
        },
        f2: function (err) {
            return Bridge.is(err, System.ArgumentException);
        },
        f3: function () {
            System.Convert.toStringInBase(32767, 0, 7);
        },
        f4: function () {
            System.Convert.toStringInBase(2147483647, 9, 9);
        },
        f5: function () {
            System.Convert.toStringInBase(System.Int64.MaxValue, 1, 11);
        }
    });
    
    Bridge.define('Bridge.ClientTest.ConvertTests.ConvertToStringTests.Foo', {
        _value: 0,
        constructor: function (value) {
            this._value = value;
        },
        toString$1: function (provider) {
            if (provider != null) {
                return System.String.format("{0}: {1}", provider, this._value);
            }
            else  {
                return System.String.format("Foo: {0}", this._value);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.ConvertTests.ConvertToStringTests.FooFormattable', {
        inherits: [System.IFormattable],
        _value: 0,
        constructor: function (value) {
            this._value = value;
        },
        toString$1: function (format, formatProvider) {
            if (formatProvider != null) {
                return System.String.format("{0}: {1}", Bridge.getTypeName(formatProvider), this._value);
            }
            else  {
                return System.String.format("FooFormattable: {0}", (this._value));
            }
        },
        format: function (format, formatProvider) {
            return this.toString$1(format, formatProvider);
        }
    });
    
    Bridge.define('Bridge.ClientTest.CultureInfoTests', {
        typePropertiesAreCorrect: function () {
            var culture = System.Globalization.CultureInfo.invariantCulture;
            Bridge.Test.Assert.areEqual("System.Globalization.CultureInfo", Bridge.getTypeName(System.Globalization.CultureInfo));
            Bridge.Test.Assert.true(true);
        },
        getFormatWorks: function () {
            var culture = System.Globalization.CultureInfo.invariantCulture;
            Bridge.Test.Assert.areEqual(null, culture.getFormat(System.Int32));
            Bridge.Test.Assert.areEqual(culture.numberFormat, culture.getFormat(System.Globalization.NumberFormatInfo));
            Bridge.Test.Assert.areEqual(culture.dateTimeFormat, culture.getFormat(System.Globalization.DateTimeFormatInfo));
        },
        invariantWorks: function () {
            var culture = System.Globalization.CultureInfo.invariantCulture;
            Bridge.Test.Assert.areEqual("iv", culture.name);
            Bridge.Test.Assert.areEqual(System.Globalization.DateTimeFormatInfo.invariantInfo, culture.dateTimeFormat);
            Bridge.Test.Assert.areEqual(System.Globalization.NumberFormatInfo.invariantInfo, culture.numberFormat);
        }
    });
    
    Bridge.define('Bridge.ClientTest.DecimalMathTests', {
        statics: {
            useLogging: false,
            jSMode: true,
            NoDotNetDiff: false,
            HasDotNetDiff: true,
            maxValue: System.Decimal(0.0),
            minValue: System.Decimal(0.0),
            inputAdd: null,
            inputSubtract: null,
            inputMultiply: null,
            inputDivide: null,
            inputRemainder: null,
            config: {
                init: function () {
                    this.maxValue = System.Decimal.MaxValue;
                    this.minValue = System.Decimal.MinValue;
                    this.inputAdd = System.Array.create(null, [[Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(47.0), System.Decimal(47.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(-47.0), System.Decimal(-47.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(-47.0), System.Decimal(-47.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(47.0), System.Decimal(47.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.33478923476"), System.Decimal(47.0), System.Decimal("443534569034923.33478923476")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.12345678901235"), System.Decimal(47.000000000001), System.Decimal("443534569034923.12345678901335")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.12345678901235"), System.Decimal("9436905724146.297872340425532"), System.Decimal("452971474759022.42132912943788")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("4435345690348766678656790453"), System.Decimal(17.0), System.Decimal("4435345690348766678656790470")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(17.2345324), System.Decimal("4435345690348766678656790453"), System.Decimal("4435345690348766678656790470.2")], [Bridge.ClientTest.DecimalMathTests.HasDotNetDiff, "0.00000000000005", System.Decimal("-943456769034871.4234"), System.Decimal("47.00000000003455"), System.Decimal("-943456769034824.4233999999654")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("6999545690348766678656790453"), System.Decimal(-13.0), System.Decimal("6999545690348766678656790440")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(11.0), System.Decimal("-6435345690348766678656790453"), System.Decimal("-6435345690348766678656790442")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, Bridge.ClientTest.DecimalMathTests.maxValue, Bridge.ClientTest.DecimalMathTests.minValue, System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal.MinusOne, Bridge.ClientTest.DecimalMathTests.maxValue, System.Decimal("79228162514264337593543950334")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, Bridge.ClientTest.DecimalMathTests.maxValue, System.Decimal.MinusOne, System.Decimal("79228162514264337593543950334")]], 15, 5);
                    this.inputSubtract = System.Array.create(null, [[Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(47.0), System.Decimal(-47.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(-47.0), System.Decimal(47.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(-47.0), System.Decimal(47.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(47.0), System.Decimal(-47.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.33478923476"), System.Decimal(47.0), System.Decimal("443534569034829.33478923476")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.12345678901235"), System.Decimal(47.000000000001), System.Decimal("443534569034829.12345678901135")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.12345678901235"), System.Decimal("9436905724146.297872340425532"), System.Decimal("434097663310729.82558444858682")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("4435345690348766678656790453"), System.Decimal(17.0), System.Decimal("4435345690348766678656790436")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(17.2345324), System.Decimal("4435345690348766678656790453"), System.Decimal("-4435345690348766678656790435.8")], [Bridge.ClientTest.DecimalMathTests.HasDotNetDiff, System.Decimal("-5E-14"), System.Decimal("-943456769034871.4234"), System.Decimal("47.00000000003455"), System.Decimal("-943456769034918.4234000000346")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("6999545690348766678656790453"), System.Decimal(-13.0), System.Decimal("6999545690348766678656790466")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(11.0), System.Decimal("-6435345690348766678656790453"), System.Decimal("6435345690348766678656790464")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, Bridge.ClientTest.DecimalMathTests.maxValue, Bridge.ClientTest.DecimalMathTests.maxValue, System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal.MinusOne, Bridge.ClientTest.DecimalMathTests.minValue, System.Decimal("79228162514264337593543950334")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, Bridge.ClientTest.DecimalMathTests.maxValue, System.Decimal.One, System.Decimal("79228162514264337593543950334")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, Bridge.ClientTest.DecimalMathTests.minValue, System.Decimal.MinusOne, System.Decimal("-79228162514264337593543950334")]], 16, 5);
                    this.inputMultiply = System.Array.create(null, [[Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(47.0), System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(-47.0), System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(-47.0), System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(47.0), System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(0.0), System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.33478923476"), System.Decimal(0.47), System.Decimal("208461247446391.8773509403372")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("43534569034876.12345678901235"), System.Decimal(47.000000000001), System.Decimal("2046124744639221.3370381184566")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("44.353456903487612345678901235"), System.Decimal("9436905724146.297872340425532"), System.Decimal("418559391338198.38088395328596")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("4435345690348766678656790453"), System.Decimal(0.17), System.Decimal("754008767359290335371654377.01")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(17.2345324), System.Decimal("443534569034876667865679045.37"), System.Decimal("7644110900551618662335084355.4")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("-943456769034871.4234"), System.Decimal("0.4700000000003455"), System.Decimal("-443424681446715.53331170154808")], [Bridge.ClientTest.DecimalMathTests.HasDotNetDiff, System.Decimal(-0.01), System.Decimal("6999545690348766678656790453"), System.Decimal(-0.13), System.Decimal("-909940939745339668225382758.9")], [Bridge.ClientTest.DecimalMathTests.HasDotNetDiff, System.Decimal(0.0001), System.Decimal(0.11), System.Decimal("-64353456903487666786567904.535"), System.Decimal("-7078880259383643346522469.4988")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, Bridge.ClientTest.DecimalMathTests.maxValue, System.Decimal.MinusOne, Bridge.ClientTest.DecimalMathTests.minValue], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal.MinusOne, Bridge.ClientTest.DecimalMathTests.minValue, Bridge.ClientTest.DecimalMathTests.maxValue], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, Bridge.ClientTest.DecimalMathTests.maxValue, System.Decimal.One, Bridge.ClientTest.DecimalMathTests.maxValue], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, Bridge.ClientTest.DecimalMathTests.minValue, System.Decimal.MinusOne, Bridge.ClientTest.DecimalMathTests.maxValue]], 17, 5);
                    this.inputDivide = System.Array.create(null, [[Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(47.0), System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(-47.0), System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(-47.0), System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(47.0), System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal.One, System.Decimal(2.0), System.Decimal(0.5)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(3.0), System.Decimal(4.0), System.Decimal(0.75)], [Bridge.ClientTest.DecimalMathTests.HasDotNetDiff, "-0.00000000000000000000000000003", System.Decimal(5.0), System.Decimal(6.0), System.Decimal("0.8333333333333333333333333333")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(7.0), System.Decimal(8.0), System.Decimal(0.875)], [Bridge.ClientTest.DecimalMathTests.HasDotNetDiff, "-0.0000000000000005", System.Decimal("443534569034876.33478923476"), System.Decimal(47.0), System.Decimal("9436905724146.304995515633191")], [Bridge.ClientTest.DecimalMathTests.HasDotNetDiff, "0.0000000000000002", System.Decimal("443534569034876.12345678901235"), System.Decimal(47.000000000001), System.Decimal("9436905724146.099713852443963")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.12345678901235"), System.Decimal("9436905724146.297872340425532"), System.Decimal("47.000000000000013082337857467")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("4435345690348766678656790453"), System.Decimal(17.0), System.Decimal("260902687667574510509222967.82")], [Bridge.ClientTest.DecimalMathTests.HasDotNetDiff, "0.0000000000000000000000000000142752779107986686908967873", System.Decimal(17.2345324), System.Decimal("4435345690348766678656790453"), System.Decimal("3.9000000000000004E-27")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("-943456769034871.4234"), System.Decimal("47.00000000003455"), System.Decimal("-20073548277322.933666106776439")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("6999545690348766678656790453"), System.Decimal(-13.0), System.Decimal("-538426591565289744512060804.08")], [Bridge.ClientTest.DecimalMathTests.HasDotNetDiff, "0.0000000000000000000000000000093098847039324132480985641", System.Decimal(11.0), System.Decimal("-6435345690348766678656790453"), System.Decimal("-1.7000000000000002E-27")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, Bridge.ClientTest.DecimalMathTests.maxValue, Bridge.ClientTest.DecimalMathTests.minValue, System.Decimal.MinusOne], [Bridge.ClientTest.DecimalMathTests.HasDotNetDiff, "-0.000000000000000000000000000012621774483536188886587657045", System.Decimal.MinusOne, Bridge.ClientTest.DecimalMathTests.minValue, System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, Bridge.ClientTest.DecimalMathTests.maxValue, System.Decimal.MinusOne, Bridge.ClientTest.DecimalMathTests.minValue], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, Bridge.ClientTest.DecimalMathTests.minValue, System.Decimal.MinusOne, Bridge.ClientTest.DecimalMathTests.maxValue]], 20, 5);
                    this.inputRemainder = System.Array.create(null, [[Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(47.0), System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(-47.0), System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(-47.0), System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(47.0), System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.33478923476"), System.Decimal(47.0), System.Decimal(14.33478923476)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.12345678901235"), System.Decimal(47.000000000001), System.Decimal(4.68655106486635)], [Bridge.ClientTest.DecimalMathTests.HasDotNetDiff, System.Decimal("4E-15"), System.Decimal("443534569034876.12345678901235"), System.Decimal("9436905724146.297872340425532"), System.Decimal(0.12345678901235)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("4435345690348766678656790453"), System.Decimal(17.0), System.Decimal(14.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(17.2345324), System.Decimal("4435345690348766678656790453"), System.Decimal(17.2345324)], [Bridge.ClientTest.DecimalMathTests.HasDotNetDiff, System.Decimal("1E-13"), System.Decimal("-943456769034871.4234"), System.Decimal("47.00000000003455"), System.Decimal(-43.8823070185248)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("6999545690348766678656790453"), System.Decimal(-13.0), System.Decimal.One], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(11.0), System.Decimal("-6435345690348766678656790453"), System.Decimal(11.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, Bridge.ClientTest.DecimalMathTests.maxValue, Bridge.ClientTest.DecimalMathTests.maxValue, System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal.MinusOne, Bridge.ClientTest.DecimalMathTests.minValue, System.Decimal.MinusOne], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, Bridge.ClientTest.DecimalMathTests.maxValue, System.Decimal.One, System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, Bridge.ClientTest.DecimalMathTests.minValue, System.Decimal.MinusOne, System.Decimal(0.0)]], 16, 5);
                }
            },
            testSubtractOperator: function () {
                Bridge.ClientTest.DecimalMathTests.runOperationSet$1(Bridge.ClientTest.DecimalMathTests.inputSubtract, "SubtractOperator", $_.Bridge.ClientTest.DecimalMathTests.f1);
            },
            testRemainderOperator: function () {
                Bridge.ClientTest.DecimalMathTests.runOperationSet$1(Bridge.ClientTest.DecimalMathTests.inputRemainder, "RemainderOperator", $_.Bridge.ClientTest.DecimalMathTests.f2);
            },
            testMultiplyOperator: function () {
                Bridge.ClientTest.DecimalMathTests.runOperationSet$1(Bridge.ClientTest.DecimalMathTests.inputMultiply, "MultiplyOperator", $_.Bridge.ClientTest.DecimalMathTests.f3);
            },
            testDivideOperator: function () {
                Bridge.ClientTest.DecimalMathTests.runOperationSet$1(Bridge.ClientTest.DecimalMathTests.inputDivide, "DivideOperator", $_.Bridge.ClientTest.DecimalMathTests.f4);
            },
            testAddOperator: function () {
                Bridge.ClientTest.DecimalMathTests.runOperationSet$1(Bridge.ClientTest.DecimalMathTests.inputAdd, "AddOperator", $_.Bridge.ClientTest.DecimalMathTests.f5);
            },
            testAddMethod: function () {
                Bridge.ClientTest.DecimalMathTests.runOperationSet$1(Bridge.ClientTest.DecimalMathTests.inputAdd, "AddMethod", $_.Bridge.ClientTest.DecimalMathTests.f5);
            },
            testDivideMethod: function () {
                Bridge.ClientTest.DecimalMathTests.runOperationSet$1(Bridge.ClientTest.DecimalMathTests.inputDivide, "DivideMethod", $_.Bridge.ClientTest.DecimalMathTests.f4);
            },
            testMultiplyMethod: function () {
                Bridge.ClientTest.DecimalMathTests.runOperationSet$1(Bridge.ClientTest.DecimalMathTests.inputMultiply, "MiltiplyMethod", $_.Bridge.ClientTest.DecimalMathTests.f3);
            },
            testRemainderMethod: function () {
                Bridge.ClientTest.DecimalMathTests.runOperationSet$1(Bridge.ClientTest.DecimalMathTests.inputRemainder, "RemainderMethod", $_.Bridge.ClientTest.DecimalMathTests.f2);
            },
            testSubtractMethod: function () {
                Bridge.ClientTest.DecimalMathTests.runOperationSet$1(Bridge.ClientTest.DecimalMathTests.inputSubtract, "SubtractMethod", $_.Bridge.ClientTest.DecimalMathTests.f1);
            },
            testCeilingMethod: function () {
                var input = System.Array.create(null, [[Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("-443534569034876.12345678901235"), System.Decimal(-443534569034876.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("-443534569034876.82345678901235"), System.Decimal(-443534569034876.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.12345678901235"), System.Decimal(443534569034877.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.62345678901235"), System.Decimal(443534569034877.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.49999999999999"), System.Decimal(443534569034877.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.50000000000001"), System.Decimal(443534569034877.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.99999999999999"), System.Decimal(443534569034877.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("4435345690348766678656790453"), System.Decimal("4435345690348766678656790453")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(17.9345324), System.Decimal(18.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("-0.9434567690348714234"), System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("6999545690348766678656790453"), System.Decimal("6999545690348766678656790453")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, Bridge.ClientTest.DecimalMathTests.maxValue, Bridge.ClientTest.DecimalMathTests.maxValue], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal.MinusOne, System.Decimal.MinusOne], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, Bridge.ClientTest.DecimalMathTests.minValue, Bridge.ClientTest.DecimalMathTests.minValue]], 15, 4);
    
                Bridge.ClientTest.DecimalMathTests.runOperationSet(input, "CeilingMethod", $_.Bridge.ClientTest.DecimalMathTests.f6);
            },
            testFloorMethod: function () {
                var input = System.Array.create(null, [[Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(0.0), System.Decimal(0.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("-443534569034876.12345678901235"), System.Decimal(-443534569034877.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("-443534569034876.82345678901235"), System.Decimal(-443534569034877.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.12345678901235"), System.Decimal(443534569034876.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.62345678901235"), System.Decimal(443534569034876.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.49999999999999"), System.Decimal(443534569034876.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.50000000000001"), System.Decimal(443534569034876.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("443534569034876.99999999999999"), System.Decimal(443534569034876.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("4435345690348766678656790453"), System.Decimal("4435345690348766678656790453")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal(17.9345324), System.Decimal(17.0)], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("-0.9434567690348714234"), System.Decimal.MinusOne], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal("6999545690348766678656790453"), System.Decimal("6999545690348766678656790453")], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, Bridge.ClientTest.DecimalMathTests.maxValue, Bridge.ClientTest.DecimalMathTests.maxValue], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, System.Decimal.MinusOne, System.Decimal.MinusOne], [Bridge.ClientTest.DecimalMathTests.NoDotNetDiff, null, Bridge.ClientTest.DecimalMathTests.minValue, Bridge.ClientTest.DecimalMathTests.minValue]], 15, 4);
    
                Bridge.ClientTest.DecimalMathTests.runOperationSet(input, "FloorMethod", $_.Bridge.ClientTest.DecimalMathTests.f7);
            },
            runOperationSet$1: function (input, name, operation) {
                var logger = new Bridge.ClientTest.DecimalMathTests.Logger();
                logger.onLogBegin(name);
    
                for (var i = System.Array.getLower(input, 0); i <= (System.Array.getLength(input, 0) - 1); i = (i + 1) | 0) {
                    var lowerBound = System.Array.getLower(input, 1);
                    var dotNetDiff = Bridge.ClientTest.DecimalMathTests.parseDotNetDiff(input, i, lowerBound);
    
                    var a = input.get([i, ((lowerBound + 2) | 0)]);
                    var b = input.get([i, ((lowerBound + 3) | 0)]);
                    var expected = input.get([i, ((lowerBound + 4) | 0)]);
                    var result = Bridge.ClientTest.DecimalMathTests.runOperation(Bridge.cast(a, System.Decimal), Bridge.cast(b, System.Decimal), operation);
    
                    logger.onLog([dotNetDiff, a, b, result]);
    
                    var diff = Bridge.ClientTest.DecimalMathTests.getDifference(expected, result);
                    var diffReport = Bridge.ClientTest.DecimalMathTests.getDifferenceReport(diff);
    
                    Bridge.ClientTest.DecimalMathTests.assertDecimal(dotNetDiff, expected, result, diffReport, System.String.format("{0} for row {1} with operand {2} and {3} .NetDiff {4}{5}", name, i, a, b, dotNetDiff, diffReport));
                }
    
                logger.onLogEnd();
            },
            runOperationSet: function (input, name, operation) {
                var logger = new Bridge.ClientTest.DecimalMathTests.Logger();
                logger.onLogBegin(name);
    
                for (var i = System.Array.getLower(input, 0); i <= (System.Array.getLength(input, 0) - 1); i = (i + 1) | 0) {
                    var lowerBound = System.Array.getLower(input, 1);
                    var dotNetDiff = Bridge.ClientTest.DecimalMathTests.parseDotNetDiff(input, i, lowerBound);
                    var a = input.get([i, ((lowerBound + 2) | 0)]);
                    var expected = input.get([i, ((lowerBound + 3) | 0)]);
                    var result = Bridge.ClientTest.DecimalMathTests.runOperation$1(Bridge.cast(a, System.Decimal), operation);
    
                    logger.onLog([dotNetDiff, a, result]);
    
                    var diff = Bridge.ClientTest.DecimalMathTests.getDifference(expected, result);
                    var diffReport = Bridge.ClientTest.DecimalMathTests.getDifferenceReport(diff);
    
                    Bridge.ClientTest.DecimalMathTests.assertDecimal(dotNetDiff, expected, result, diffReport, System.String.format("{0} for row {1} with operand {2} .NetDiff {3}{4}", name, i, a, dotNetDiff, diffReport));
                }
    
                logger.onLogEnd();
            },
            parseDotNetDiff: function (input, i, lowerBound) {
                var o = input.get([i, ((lowerBound + 1) | 0)]);
                if (o == null) {
                    return System.Decimal.lift(null);
                }
    
                if (Bridge.is(o, String)) {
                    return System.Decimal(o.toString());
                }
    
                var dotNetDiff = Bridge.cast(input.get([i, ((lowerBound + 1) | 0)]), System.Decimal, true);
                return dotNetDiff;
            },
            assertDecimal: function (dotNetDiff, expected, result, differenceReport, message) {
                if (Bridge.ClientTest.DecimalMathTests.jSMode) {
                    Bridge.ClientTest.DecimalMathTests.assertIsDecimalAndEqualTo(result, Bridge.cast(expected, System.Decimal).sub((System.Nullable.hasValue(dotNetDiff) ? System.Nullable.getValue(dotNetDiff) : System.Decimal(0.0))), message);
                }
                else  {
                    Bridge.ClientTest.DecimalMathTests.assertIsDecimalAndEqualTo(result, expected, message);
                }
            },
            assertIsDecimalAndEqualTo: function (actual, expected, message) {
                Bridge.Test.Assert.true$1(Bridge.is(actual, System.Decimal), "isDecimal " + message);
                Bridge.Test.Assert.areStrictEqual$1(expected.toString(), actual.toString(), "StrictEqual " + message);
            },
            getDifferenceReport: function (difference) {
                var differenceReport = difference.ne(System.Decimal(0.0)) ? "; result diff is " + Bridge.Int.format(difference, 'G') : "";
                return differenceReport;
            },
            getDifference: function (expected, result) {
                var difference;
                if ((Bridge.is(result, System.Decimal) || Bridge.is(result, System.Int32)) && (Bridge.is(expected, System.Decimal) || Bridge.is(expected, System.Int32))) {
                    difference = Bridge.cast(expected, System.Decimal).sub(Bridge.cast(result, System.Decimal));
                }
                else  {
                    difference = System.Decimal(0.0);
                }
    
                return difference;
            },
            runOperation: function (a, b, operation) {
                return operation(a, b);
            },
            runOperation$1: function (a, operation) {
                return operation(a);
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.DecimalMathTests", $_);
    
    Bridge.apply($_.Bridge.ClientTest.DecimalMathTests, {
        f1: function (a, b) {
            return a.sub(b);
        },
        f2: function (a, b) {
            return a.mod(b);
        },
        f3: function (a, b) {
            return a.mul(b);
        },
        f4: function (a, b) {
            return a.div(b);
        },
        f5: function (a, b) {
            return a.add(b);
        },
        f6: function (a) {
            return a.ceil();
        },
        f7: function (a) {
            return a.floor();
        }
    });
    
    Bridge.define('Bridge.ClientTest.DecimalMathTests.Logger', {
        statics: {
            convertParameters: function (parameters) {
                if (parameters === void 0) { parameters = []; }
                var result = System.Array.init(((parameters.length + 1) | 0), null);
    
                for (var i = 0; i < parameters.length; i = (i + 1) | 0) {
                    if (i === 0) {
                        var d = Bridge.cast(parameters[0], System.Decimal, true);
                        result[0] = System.Nullable.hasValue(d) ? "HasDotNetDiff" : "NoDotNetDiff";
                        result[1] = System.Nullable.hasValue(d) ? System.Nullable.toString(d, function ($t) { return Bridge.Int.format($t, 'G'); }) + "m" : "null";
    
                        continue;
                    }
    
                    var o = parameters[i];
                    var j = (i + 1) | 0;
                    if (Bridge.is(o, System.Decimal)) {
                        var d1 = Bridge.cast(o, System.Decimal);
                        if (d1.equalsT(Bridge.ClientTest.DecimalMathTests.maxValue)) {
                            result[j] = "DecimalMathTests.MaxValue";
                        }
                        else  {
                            if (d1.equalsT(Bridge.ClientTest.DecimalMathTests.minValue)) {
                                result[j] = "DecimalMathTests.MinValue";
                            }
                            else  {
                                if (d1.equalsT(System.Decimal.MinusOne)) {
                                    result[j] = "decimal.MinusOne";
                                }
                                else  {
                                    if (d1.equalsT(System.Decimal.One)) {
                                        result[j] = "decimal.One";
                                    }
                                    else  {
                                        result[j] = Bridge.Int.format(d1, 'G') + "m";
                                    }
                                }
                            }
                        }
                    }
                    else  {
                        result[j] = o;
                    }
                }
    
                return result;
            }
        },
        config: {
            properties: {
                Text: null
            }
        },
        constructor: function () {
            if (Bridge.ClientTest.DecimalMathTests.useLogging) {
                this.setText(new System.Text.StringBuilder());
            }
        },
        onLogBegin: function (name) {
            if (!Bridge.ClientTest.DecimalMathTests.useLogging) {
                return;
            }
    
            this.getText().appendLine("//------------------------------" + name + "------------------------------");
            this.getText().appendLine("object[,] input = new object[,]");
            this.getText().append("{");
        },
        onLog: function (parameters) {
            if (parameters === void 0) { parameters = []; }
            if (!Bridge.ClientTest.DecimalMathTests.useLogging) {
                return;
            }
    
            var sb = new System.Text.StringBuilder("{{");
            for (var i = 0; i < ((parameters.length + 1) | 0); i = (i + 1) | 0) {
                sb.append(" {");
                sb.append(i);
                sb.append("},");
            }
            sb.remove(((sb.getLength() - 1) | 0), 1);
            sb.append(" }},");
    
            var format = sb.toString();
    
            this.getText().appendLine();
            //Fix
            //this.Text.AppendFormat(format, ConvertParameters(parameters));
            var convertedParams = Bridge.ClientTest.DecimalMathTests.Logger.convertParameters(parameters);
            if (convertedParams.length === 4) {
                this.getText().appendFormat(format, convertedParams[0], convertedParams[1], convertedParams[2], convertedParams[3]);
            }
            if (convertedParams.length === 5) {
                this.getText().appendFormat(format, convertedParams[0], convertedParams[1], convertedParams[2], convertedParams[3], convertedParams[4]);
            }
        },
        onLogEnd: function () {
            if (!Bridge.ClientTest.DecimalMathTests.useLogging) {
                return;
            }
    
            var sb = this.getText();
    
            sb.remove(((sb.getLength() - 1) | 0), 1);
            sb.appendLine();
            sb.append("};");
    
            System.Console.log(sb.toString());
        }
    });
    
    Bridge.define('Bridge.ClientTest.Diagnostics.Contracts.ContractTests', {
        assertNoExceptions: function (block) {
            try {
                block();
                Bridge.Test.Assert.true$1(true, "No Exception thrown.");
            }
            catch (ex) {
                ex = System.Exception.create(ex);
                Bridge.Test.Assert.fail$1("Unexpected Exception " + ex);
            }
        },
        assertException: function (block, expectedKind, expectedMessage, expectedUserMessage, expectedInnerException) {
            try {
                block();
            }
            catch (ex) {
                ex = System.Exception.create(ex);
                var cex = Bridge.as(ex, System.Diagnostics.Contracts.ContractException);
                if (cex == null) {
                    Bridge.Test.Assert.fail$1("Unexpected Exception");
                }
    
                Bridge.Test.Assert.true$1(cex.getKind() === expectedKind, "Kind");
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(cex.getMessage(), expectedMessage), "Message");
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(cex.getUserMessage(), expectedUserMessage), "UserMessage");
                if (cex.getInnerException() != null) {
                    Bridge.Test.Assert.true$1(Bridge.equals(cex.getInnerException(), expectedInnerException), "InnerException");
                }
                else  {
                    if (cex.getInnerException() == null && expectedInnerException != null) {
                        Bridge.Test.Assert.fail$1("InnerException");
                    }
                }
            }
        },
        assume: function () {
            var a = 0;
            Bridge.Test.Assert.throws$2(function () {
                System.Diagnostics.Contracts.Contract.assert(5, function () { return a !== 0; });
            }, $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f1, "ContractException");
            this.assertNoExceptions(function () {
                System.Diagnostics.Contracts.Contract.assert(5, function () { return a === 0; });
            });
            this.assertException(function () {
                System.Diagnostics.Contracts.Contract.assert(5, function () { return a === 99; });
            }, System.Diagnostics.Contracts.ContractFailureKind.assume, "Contract 'a === 99' failed", null, null);
        },
        assumeWithUserMessage: function () {
            var a = 0;
            Bridge.Test.Assert.throws$2(function () {
                System.Diagnostics.Contracts.Contract.assert(5, function () { return a !== 0; }, "is not zero");
            }, $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f1, "ContractException");
            this.assertNoExceptions(function () {
                System.Diagnostics.Contracts.Contract.assert(5, function () { return a === 0; }, "is zero");
            });
            this.assertException(function () {
                System.Diagnostics.Contracts.Contract.assert(5, function () { return a === 99; }, "is 99");
            }, System.Diagnostics.Contracts.ContractFailureKind.assume, "Contract 'a === 99' failed: is 99", "is 99", null);
        },
        _Assert: function () {
            var a = 0;
            Bridge.Test.Assert.throws$2(function () {
                System.Diagnostics.Contracts.Contract.assert(4, function () { return a !== 0; });
            }, $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f1, "ContractException");
            this.assertNoExceptions(function () {
                System.Diagnostics.Contracts.Contract.assert(4, function () { return a === 0; });
            });
            this.assertException(function () {
                System.Diagnostics.Contracts.Contract.assert(4, function () { return a === 99; });
            }, System.Diagnostics.Contracts.ContractFailureKind.assert, "Contract 'a === 99' failed", null, null);
        },
        assertWithUserMessage: function () {
            var a = 0;
            Bridge.Test.Assert.throws$2(function () {
                System.Diagnostics.Contracts.Contract.assert(4, function () { return a !== 0; }, "is not zero");
            }, $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f1, "ContractException");
            this.assertNoExceptions(function () {
                System.Diagnostics.Contracts.Contract.assert(4, function () { return a === 0; }, "is zero");
            });
            this.assertException(function () {
                System.Diagnostics.Contracts.Contract.assert(4, function () { return a === 99; }, "is 99");
            }, System.Diagnostics.Contracts.ContractFailureKind.assert, "Contract 'a === 99' failed: is 99", "is 99", null);
        },
        requires: function () {
            var a = 0;
            Bridge.Test.Assert.throws$2(function () {
                System.Diagnostics.Contracts.Contract.assert(0, function () { return a !== 0; });
            }, $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f1, "ContractException");
            this.assertNoExceptions(function () {
                System.Diagnostics.Contracts.Contract.assert(0, function () { return a === 0; });
            });
            this.assertException(function () {
                System.Diagnostics.Contracts.Contract.assert(0, function () { return a === 99; });
            }, System.Diagnostics.Contracts.ContractFailureKind.precondition, "Contract 'a === 99' failed", null, null);
        },
        requiresWithUserMessage: function () {
            var a = 0;
            Bridge.Test.Assert.throws$2(function () {
                System.Diagnostics.Contracts.Contract.assert(0, function () { return a !== 0; }, "must not be zero");
            }, $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f1, "ContractException");
            this.assertNoExceptions(function () {
                System.Diagnostics.Contracts.Contract.assert(0, function () { return a === 0; }, "can only be zero");
            });
            this.assertException(function () {
                System.Diagnostics.Contracts.Contract.assert(0, function () { return a === 99; }, "can only be 99");
            }, System.Diagnostics.Contracts.ContractFailureKind.precondition, "Contract 'a === 99' failed: can only be 99", "can only be 99", null);
        },
        requiresWithTypeException: function () {
            var a = 0;
            Bridge.Test.Assert.throws$5(function () {
                System.Diagnostics.Contracts.Contract.requires(System.Exception, function () { return a !== 0; });
            }, "Exception");
            this.assertNoExceptions(function () {
                System.Diagnostics.Contracts.Contract.requires(System.Exception, function () { return a === 0; });
            });
        },
        requiredWithTypeExceptionAndUserMessage: function () {
            var a = 0;
            Bridge.Test.Assert.throws$5(function () {
                System.Diagnostics.Contracts.Contract.requires(System.Exception, function () { return a !== 0; }, "must not be zero");
            }, "Exception");
            this.assertNoExceptions(function () {
                System.Diagnostics.Contracts.Contract.requires(System.Exception, function () { return a === 0; }, "can only be zero");
            });
        },
        forAll: function () {
            Bridge.Test.Assert.throws$2($_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f2, $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f3, "ArgumentNullException");
            this.assertNoExceptions($_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f5);
            Bridge.Test.Assert.false(System.Diagnostics.Contracts.Contract.forAll(2, 5, $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f4));
            Bridge.Test.Assert.true(System.Diagnostics.Contracts.Contract.forAll(2, 5, $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f6));
        },
        forAllWithCollection: function () {
            Bridge.Test.Assert.throws$2($_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f7, $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f3, "ArgumentNullException");
            this.assertNoExceptions($_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f8);
            Bridge.Test.Assert.false(System.Diagnostics.Contracts.Contract.forAll$1([1, 2, 3], $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f4));
            Bridge.Test.Assert.true(System.Diagnostics.Contracts.Contract.forAll$1([1, 2, 3], $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f6));
        },
        exists: function () {
            Bridge.Test.Assert.throws$2($_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f9, $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f3, "ArgumentNullException");
            this.assertNoExceptions($_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f11);
            Bridge.Test.Assert.true(System.Diagnostics.Contracts.Contract.exists(1, 5, $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f10));
            Bridge.Test.Assert.false(System.Diagnostics.Contracts.Contract.exists(1, 5, $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f12));
        },
        existsWithCollection: function () {
            Bridge.Test.Assert.throws$2($_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f13, $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f3, "ArgumentNullException");
            this.assertNoExceptions($_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f14);
            Bridge.Test.Assert.true(System.Diagnostics.Contracts.Contract.exists$1([1, 2, 3], $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f10));
            Bridge.Test.Assert.false(System.Diagnostics.Contracts.Contract.exists$1([1, 2, 3], $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f12));
        }
    });
    
    Bridge.ns("Bridge.ClientTest.Diagnostics.Contracts.ContractTests", $_);
    
    Bridge.apply($_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests, {
        f1: function (error) {
            return Bridge.is(error, System.Diagnostics.Contracts.ContractException);
        },
        f2: function () {
            System.Diagnostics.Contracts.Contract.forAll(2, 5, null);
        },
        f3: function (error) {
            return Bridge.is(error, System.ArgumentNullException);
        },
        f4: function (s) {
            return s !== 3;
        },
        f5: function () {
            System.Diagnostics.Contracts.Contract.forAll(2, 5, $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f4);
        },
        f6: function (s) {
            return s !== 6;
        },
        f7: function () {
            System.Diagnostics.Contracts.Contract.forAll$1([1, 2, 3], null);
        },
        f8: function () {
            System.Diagnostics.Contracts.Contract.forAll$1([1, 2, 3], $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f4);
        },
        f9: function () {
            System.Diagnostics.Contracts.Contract.exists(1, 5, null);
        },
        f10: function (s) {
            return s === 3;
        },
        f11: function () {
            System.Diagnostics.Contracts.Contract.exists(1, 5, $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f10);
        },
        f12: function (s) {
            return s === 6;
        },
        f13: function () {
            System.Diagnostics.Contracts.Contract.exists$1([1, 2, 3], null);
        },
        f14: function () {
            System.Diagnostics.Contracts.Contract.exists$1([1, 2, 3], $_.Bridge.ClientTest.Diagnostics.Contracts.ContractTests.f10);
        }
    });
    
    Bridge.define('Bridge.ClientTest.Diagnostics.StopwatchTests', {
        defaultConstructorWorks: function () {
            var watch = new System.Diagnostics.Stopwatch();
            Bridge.Test.Assert.true$1(Bridge.is(watch, System.Diagnostics.Stopwatch), "is Stopwatch");
            Bridge.Test.Assert.false$1(watch.isRunning, "IsRunning");
        },
        constantsWorks: function () {
            Bridge.Test.Assert.true$1(System.Diagnostics.Stopwatch.frequency.gte(System.Int64(1000)), "Frequency");
            Bridge.Test.Assert.areEqual$1("boolean", typeof System.Diagnostics.Stopwatch.isHighResolution, "IsHighResolution");
        },
        startNewWorks: function () {
            var watch = System.Diagnostics.Stopwatch.startNew();
            Bridge.Test.Assert.true$1(Bridge.is(watch, System.Diagnostics.Stopwatch), "is Stopwatch");
            Bridge.Test.Assert.true$1(watch.isRunning, "IsRunning");
        },
        startAndStopWork: function () {
            var watch = new System.Diagnostics.Stopwatch();
            Bridge.Test.Assert.false(watch.isRunning);
            watch.start();
            Bridge.Test.Assert.true(watch.isRunning);
            watch.stop();
            Bridge.Test.Assert.false(watch.isRunning);
        },
        elapsedWorks: function () {
            var watch = new System.Diagnostics.Stopwatch();
            Bridge.Test.Assert.true(System.Int64(0).equals(watch.ticks()));
            Bridge.Test.Assert.true(System.Int64(0).equals(watch.milliseconds()));
            Bridge.Test.Assert.areEqual(new System.TimeSpan(), watch.timeSpan());
            watch.start();
            var before = new Date();
            var hasIncreased = false;
            while (System.TimeSpan.lt((Bridge.Date.subdd(new Date(), before)), System.TimeSpan.fromMilliseconds(200))) {
                if (watch.ticks().gt(System.Int64(0))) {
                    hasIncreased = true;
                }
            }
            watch.stop();
            Bridge.Test.Assert.true$1(hasIncreased, "Times should increase inside the loop");
            Bridge.Test.Assert.true$1(watch.milliseconds().gt(System.Int64(150)), "ElapsedMilliseconds > 150 Actual: " + watch.milliseconds());
            Bridge.Test.Assert.true$1(System.TimeSpan.eq(watch.timeSpan(), new System.TimeSpan(0, 0, 0, 0, System.Int64.clip32(watch.milliseconds()))), "Elapsed");
            var value = watch.ticks() / System.Int64.toNumber(System.Diagnostics.Stopwatch.frequency);
            Bridge.Test.Assert.true$1(value > 0.15 && value < 0.25, System.String.format("value > 0.15 && value < 0.25 Actual: {0}, Ticks: {1}", value, watch.ticks()));
        },
        getTimestampWorks: function () {
            var t1 = System.Diagnostics.Stopwatch.getTimestamp();
            Bridge.Test.Assert.true$1(Bridge.is(t1, System.Int64), "is long");
    
            var before = new Date();
            while (System.TimeSpan.lt((Bridge.Date.subdd(new Date(), before)), System.TimeSpan.fromMilliseconds(50))) {
            }
            var t2 = System.Diagnostics.Stopwatch.getTimestamp();
            Bridge.Test.Assert.true$1(t2.gt(t1), "Should increase");
        }
    });
    
    Bridge.define('Bridge.ClientTest.EnvironmentTests', {
        newLineIsAStringContainingOnlyTheNewLineChar: function () {
            Bridge.Test.Assert.areEqual("\n", '\n');
        }
    });
    
    Bridge.define('Bridge.ClientTest.Exceptions.AggregateExceptionTests', {
        statics: {
            DefaultMessage: "One or more errors occurred."
        },
        makeEnumerable: function (T, arr) {
            var $t;
            if (arr === void 0) { arr = []; }
            var $yield = [];
            $t = Bridge.getEnumerator(arr);
            while ($t.moveNext()) {
                var x = $t.getCurrent();
                $yield.push(x);
            }
            return System.Array.toEnumerable($yield);
        },
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.AggregateException", Bridge.getTypeName(System.AggregateException), "Name");
            var d = new System.AggregateException();
            Bridge.Test.Assert.true(Bridge.is(d, System.AggregateException));
            Bridge.Test.Assert.true(Bridge.is(d, System.Exception));
        },
        defaultConstructorWorks: function () {
            var ex = new System.AggregateException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.AggregateException), "is AggregateException");
            Bridge.Test.Assert.true$1(Bridge.is(ex.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "InnerExceptions is ReadOnlyCollection");
            Bridge.Test.Assert.areEqual$1(0, ex.innerExceptions.getCount(), "InnerExceptions.Length");
            Bridge.Test.Assert.true$1(ex.getInnerException() == null, "InnerException");
            Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests.DefaultMessage, ex.getMessage(), "Message");
        },
        constructorWithIEnumerableInnerExceptionsWorks: function () {
            var inner1 = new System.Exception("a");
            var inner2 = new System.Exception("b");
    
            var ex1 = new System.AggregateException(null, this.makeEnumerable(System.Exception));
            Bridge.Test.Assert.true$1(Bridge.is(ex1, System.AggregateException), "ex1 is AggregateException");
            Bridge.Test.Assert.true$1(ex1.getInnerException() == null, "ex1 InnerException");
            Bridge.Test.Assert.true$1(Bridge.is(ex1.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex1 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.Assert.areEqual$1(0, ex1.innerExceptions.getCount(), "ex1 InnerExceptions.Length");
            Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests.DefaultMessage, ex1.getMessage(), "ex1 Message");
    
            var ex2 = new System.AggregateException(null, this.makeEnumerable(System.Exception, [inner1]));
            Bridge.Test.Assert.true$1(Bridge.is(ex2, System.AggregateException), "ex2 is AggregateException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex2.getInnerException(), inner1), "ex2 InnerException");
            Bridge.Test.Assert.true$1(Bridge.is(ex2.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex2 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.Assert.areEqual$1(1, ex2.innerExceptions.getCount(), "ex2 InnerExceptions.Length");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex2.innerExceptions.get(0), inner1), "ex2 InnerExceptions[0]");
            Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests.DefaultMessage, ex2.getMessage(), "ex2 Message");
    
            var ex3 = new System.AggregateException(null, this.makeEnumerable(System.Exception, [inner1, inner2]));
            Bridge.Test.Assert.true$1(Bridge.is(ex3, System.AggregateException), "ex3 is AggregateException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex3.getInnerException(), inner1), "ex3 InnerException");
            Bridge.Test.Assert.true$1(Bridge.is(ex3.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex3 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.Assert.areEqual$1(2, ex3.innerExceptions.getCount(), "ex3 InnerExceptions.Length");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex3.innerExceptions.get(0), inner1), "ex3 InnerExceptions[0]");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex3.innerExceptions.get(1), inner2), "ex3 InnerExceptions[1]");
            Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests.DefaultMessage, ex3.getMessage(), "ex3 Message");
        },
        constructorWithInnerExceptionArrayWorks: function () {
            var inner1 = new System.Exception("a");
            var inner2 = new System.Exception("b");
    
            var ex1 = new System.AggregateException(null, System.Array.init(0, null));
            Bridge.Test.Assert.true$1(Bridge.is(ex1, System.AggregateException), "ex1 is AggregateException");
            Bridge.Test.Assert.true$1(ex1.getInnerException() == null, "ex1 InnerException");
            Bridge.Test.Assert.true$1(Bridge.is(ex1.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex1 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.Assert.areEqual$1(0, ex1.innerExceptions.getCount(), "ex1 InnerExceptions.Length");
            Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests.DefaultMessage, ex1.getMessage(), "ex1 Message");
    
            var ex2 = new System.AggregateException(null, [inner1]);
            Bridge.Test.Assert.true$1(Bridge.is(ex2, System.AggregateException), "ex2 is AggregateException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex2.getInnerException(), inner1), "ex2 InnerException");
            Bridge.Test.Assert.true$1(Bridge.is(ex2.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex2 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.Assert.areEqual$1(1, ex2.innerExceptions.getCount(), "ex2 InnerExceptions.Length");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex2.innerExceptions.get(0), inner1), "ex2 InnerExceptions[0]");
            Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests.DefaultMessage, ex2.getMessage(), "ex2 Message");
    
            var ex3 = new System.AggregateException(null, [inner1, inner2]);
            Bridge.Test.Assert.true$1(Bridge.is(ex3, System.AggregateException), "ex3 is AggregateException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex3.getInnerException(), inner1), "ex3 InnerException");
            Bridge.Test.Assert.true$1(Bridge.is(ex3.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex3 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.Assert.areEqual$1(2, ex3.innerExceptions.getCount(), "ex3 InnerExceptions.Length");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex3.innerExceptions.get(0), inner1), "ex3 InnerExceptions[0]");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex3.innerExceptions.get(1), inner2), "ex3 InnerExceptions[1]");
            Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.Exceptions.AggregateExceptionTests.DefaultMessage, ex3.getMessage(), "ex3 Message");
        },
        constructorWithMessageWorks: function () {
            var ex = new System.AggregateException("Some message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.AggregateException), "is AggregateException");
            Bridge.Test.Assert.true$1(Bridge.is(ex.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex1 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.Assert.areEqual$1(0, ex.innerExceptions.getCount(), "InnerExceptions.Length");
            Bridge.Test.Assert.true$1(ex.getInnerException() == null, "InnerException");
            Bridge.Test.Assert.areEqual$1("Some message", ex.getMessage(), "Message");
        },
        constructorWithMessageAndIEnumerableInnerExceptionsWorks: function () {
            var inner1 = new System.Exception("a");
            var inner2 = new System.Exception("b");
    
            var ex1 = new System.AggregateException("Message #1", this.makeEnumerable(System.Exception));
            Bridge.Test.Assert.true$1(Bridge.is(ex1, System.AggregateException), "ex1 is AggregateException");
            Bridge.Test.Assert.true$1(ex1.getInnerException() == null, "ex1 InnerException");
            Bridge.Test.Assert.true$1(Bridge.is(ex1.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex1 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.Assert.areEqual$1(0, ex1.innerExceptions.getCount(), "ex1 InnerExceptions.Length");
            Bridge.Test.Assert.areEqual$1("Message #1", ex1.getMessage(), "ex1 Message");
    
            var ex2 = new System.AggregateException("Message #2", this.makeEnumerable(System.Exception, [inner1]));
            Bridge.Test.Assert.true$1(Bridge.is(ex2, System.AggregateException), "ex2 is AggregateException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex2.getInnerException(), inner1), "ex2 InnerException");
            Bridge.Test.Assert.true$1(Bridge.is(ex2.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex2 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.Assert.areEqual$1(1, ex2.innerExceptions.getCount(), "ex2 InnerExceptions.Length");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex2.innerExceptions.get(0), inner1), "ex2 InnerExceptions[0]");
            Bridge.Test.Assert.areEqual$1("Message #2", ex2.getMessage(), "ex2 Message");
    
            var ex3 = new System.AggregateException("Message #3", this.makeEnumerable(System.Exception, [inner1, inner2]));
            Bridge.Test.Assert.true$1(Bridge.is(ex3, System.AggregateException), "ex3 is AggregateException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex3.getInnerException(), inner1), "ex3 InnerException");
            Bridge.Test.Assert.true$1(Bridge.is(ex3.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex3 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.Assert.areEqual$1(2, ex3.innerExceptions.getCount(), "ex3 InnerExceptions.Length");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex3.innerExceptions.get(0), inner1), "ex3 InnerExceptions[0]");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex3.innerExceptions.get(1), inner2), "ex3 InnerExceptions[1]");
            Bridge.Test.Assert.areEqual$1("Message #3", ex3.getMessage(), "ex3 Message");
        },
        constructorWithMessageAndInnerExceptionArrayWorks: function () {
            var inner1 = new System.Exception("a");
            var inner2 = new System.Exception("b");
    
            var ex1 = new System.AggregateException("Message #1", System.Array.init(0, null));
            Bridge.Test.Assert.true$1(Bridge.is(ex1, System.AggregateException), "ex1 is AggregateException");
            Bridge.Test.Assert.true$1(ex1.getInnerException() == null, "ex1 InnerException");
            Bridge.Test.Assert.true$1(Bridge.is(ex1.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex1 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.Assert.areEqual$1(0, ex1.innerExceptions.getCount(), "ex1 InnerExceptions.Length");
            Bridge.Test.Assert.areEqual$1("Message #1", ex1.getMessage(), "ex1 Message");
    
            var ex2 = new System.AggregateException("Message #2", [inner1]);
            Bridge.Test.Assert.true$1(Bridge.is(ex2, System.AggregateException), "ex2 is AggregateException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex2.getInnerException(), inner1), "ex2 InnerException");
            Bridge.Test.Assert.areEqual$1(1, ex2.innerExceptions.getCount(), "ex2 InnerExceptions.Length");
            Bridge.Test.Assert.true$1(Bridge.is(ex2.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex2 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex2.innerExceptions.get(0), inner1), "ex2 InnerExceptions[0]");
            Bridge.Test.Assert.areEqual$1("Message #2", ex2.getMessage(), "ex2 Message");
    
            var ex3 = new System.AggregateException("Message #3", [inner1, inner2]);
            Bridge.Test.Assert.true$1(Bridge.is(ex3, System.AggregateException), "ex3 is AggregateException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex3.getInnerException(), inner1), "ex3 InnerException");
            Bridge.Test.Assert.true$1(Bridge.is(ex3.innerExceptions, System.Collections.ObjectModel.ReadOnlyCollection$1(System.Exception)), "ex3 InnerExceptions is ReadOnlyCollection");
            Bridge.Test.Assert.areEqual$1(2, ex3.innerExceptions.getCount(), "ex3 InnerExceptions.Length");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex3.innerExceptions.get(0), inner1), "ex3 InnerExceptions[0]");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex3.innerExceptions.get(1), inner2), "ex3 InnerExceptions[1]");
            Bridge.Test.Assert.areEqual$1("Message #3", ex3.getMessage(), "ex3 Message");
        },
        flattenWorks: function () {
            var ex0 = new System.Exception("ex0"), ex1 = new System.Exception("ex1"), ex2 = new System.Exception("ex2"), ex3 = new System.Exception("ex3"), ex4 = new System.Exception("ex4"), ex5 = new System.Exception("ex5"), ex6 = new System.Exception("ex6");
    
            var ae = new System.AggregateException("The message", [ex0, ex1, new System.AggregateException(null, [ex2, new System.AggregateException(null, [new System.AggregateException("X"), new System.AggregateException(null, [ex3, ex4])])]), new System.AggregateException(null, [ex5, ex6])]);
    
            var actual = ae.flatten();
    
            Bridge.Test.Assert.true$1(Bridge.is(actual, System.AggregateException), "is AggregateException");
            Bridge.Test.Assert.areEqual$1("The message", actual.getMessage(), "message");
            Bridge.Test.Assert.areEqual$1(7, actual.innerExceptions.getCount(), "Count");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(actual.innerExceptions.get(0), ex0), "0");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(actual.innerExceptions.get(1), ex1), "1");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(actual.innerExceptions.get(2), ex2), "2");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(actual.innerExceptions.get(3), ex5), "5");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(actual.innerExceptions.get(4), ex6), "6");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(actual.innerExceptions.get(5), ex3), "3");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(actual.innerExceptions.get(6), ex4), "4");
        }
    });
    
    Bridge.define('Bridge.ClientTest.Exceptions.ArgumentExceptionTests', {
        statics: {
            DefaultMessage: "Value does not fall within the expected range."
        },
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.ArgumentException", Bridge.getTypeName(System.ArgumentException), "Name");
            var d = new System.ArgumentException();
            Bridge.Test.Assert.true(Bridge.is(d, System.ArgumentException));
            Bridge.Test.Assert.true(Bridge.is(d, System.Exception));
        },
        defaultConstructorWorks: function () {
            var ex = new System.ArgumentException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.ArgumentException), "is ArgumentException");
            Bridge.Test.Assert.areEqual$1(null, ex.getParamName(), "ParamName");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual(Bridge.ClientTest.Exceptions.ArgumentExceptionTests.DefaultMessage, ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.ArgumentException("The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.ArgumentException), "is ArgumentException");
            Bridge.Test.Assert.areEqual$1(null, ex.getParamName(), "ParamName");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.ArgumentException("The message", null, inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.ArgumentException), "is ArgumentException");
            Bridge.Test.Assert.areEqual$1(null, ex.getParamName(), "ParamName");
            Bridge.Test.Assert.areEqual$1(inner, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndParamNameWorks: function () {
            var ex = new System.ArgumentException("The message", "someParam");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.ArgumentException), "is ArgumentException");
            Bridge.Test.Assert.areEqual$1("someParam", ex.getParamName(), "ParamName");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndParamNameAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.ArgumentException("The message", "someParam", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.ArgumentException), "is ArgumentException");
            Bridge.Test.Assert.areEqual$1("someParam", ex.getParamName(), "ParamName");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual$1(inner, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        }
    });
    
    Bridge.define('Bridge.ClientTest.Exceptions.ArgumentNullExceptionTests', {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.ArgumentNullException", Bridge.getTypeName(System.ArgumentNullException), "Name");
            var d = new System.ArgumentNullException();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.ArgumentNullException), "is ArgumentNullException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.ArgumentException), "is ArgumentException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.ArgumentNullException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.ArgumentNullException), "is ArgumentNullException");
            Bridge.Test.Assert.areEqual$1(null, ex.getParamName(), "ParamName");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("Value cannot be null.", ex.getMessage());
        },
        constructorWithParamNameWorks: function () {
            var ex = new System.ArgumentNullException("someParam");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.ArgumentNullException), "is ArgumentNullException");
            Bridge.Test.Assert.areEqual$1("someParam", ex.getParamName(), "ParamName");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("Value cannot be null.\nParameter name: someParam", ex.getMessage());
        },
        constructorWithParamNameAndMessageWorks: function () {
            var ex = new System.ArgumentNullException("someParam", "The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.ArgumentNullException), "is ArgumentNullException");
            Bridge.Test.Assert.areEqual$1("someParam", ex.getParamName(), "ParamName");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.ArgumentNullException(null, "The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.ArgumentNullException), "is ArgumentException");
            Bridge.Test.Assert.areEqual$1(null, ex.getParamName(), "ParamName");
            Bridge.Test.Assert.areEqual$1(inner, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        }
    });
    
    Bridge.define('Bridge.ClientTest.Exceptions.ArgumentOutOfRangeExceptionTests', {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.ArgumentOutOfRangeException", Bridge.getTypeName(System.ArgumentOutOfRangeException), "Name");
            var d = new System.ArgumentOutOfRangeException();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.ArgumentOutOfRangeException), "is ArgumentOutOfRangeException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.ArgumentException), "is ArgumentException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.ArgumentOutOfRangeException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.ArgumentOutOfRangeException), "is ArgumentOutOfRangeException");
            Bridge.Test.Assert.areEqual$1(null, ex.getParamName(), "ParamName");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual$1(null, ex.getActualValue(), "ActualValue");
            Bridge.Test.Assert.areEqual("Value is out of range.", ex.getMessage());
        },
        constructorWithParamNameWorks: function () {
            var ex = new System.ArgumentOutOfRangeException("someParam");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.ArgumentOutOfRangeException), "is ArgumentOutOfRangeException");
            Bridge.Test.Assert.areEqual$1("someParam", ex.getParamName(), "ParamName");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual$1(null, ex.getActualValue(), "ActualValue");
            Bridge.Test.Assert.areEqual("Value is out of range.\nParameter name: someParam", ex.getMessage());
        },
        constructorWithParamNameAndMessageWorks: function () {
            var ex = new System.ArgumentOutOfRangeException("someParam", "The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.ArgumentOutOfRangeException), "is ArgumentOutOfRangeException");
            Bridge.Test.Assert.areEqual$1("someParam", ex.getParamName(), "ParamName");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual$1(null, ex.getActualValue(), "ActualValue");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.ArgumentOutOfRangeException(null, "The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.ArgumentOutOfRangeException), "is ArgumentOutOfRangeException");
            Bridge.Test.Assert.null$1(ex.getParamName(), "ParamName");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual$1(null, ex.getActualValue(), "ActualValue");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithParamNameAndActualValueAndMessageWorks: function () {
            var ex = new System.ArgumentOutOfRangeException("someParam", "The message", null, 42);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.ArgumentOutOfRangeException), "is ArgumentOutOfRangeException");
            Bridge.Test.Assert.areEqual$1("someParam", ex.getParamName(), "ParamName");
            Bridge.Test.Assert.null$1(ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual$1(42, ex.getActualValue(), "ActualValue");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        rangeErrorIsConvertedToArgumentOutOfRangeException: function () {
            var size = -1;
            try {
                var arr = System.Array.init(size, 0);
                Bridge.Test.Assert.fail$1("Should throw");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                var ex;
                if (Bridge.is($e1, System.ArgumentOutOfRangeException)) {
                    ex = $e1;
                    var inner = ex.getInnerException();
                    Bridge.Test.Assert.notNull$1(inner, "Inner Exception");
                }
                else {
                    ex = $e1;
                    Bridge.Test.Assert.fail$1("Expected ArgumentOutOfRangeException, got " + Bridge.getType(ex));
                }
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.Exceptions.ArithmeticExceptionTests', {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.ArithmeticException", Bridge.getTypeName(System.ArithmeticException), "Name");
            var d = new System.ArithmeticException();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.ArithmeticException), "is DivideByZeroException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.ArithmeticException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.ArithmeticException), "is ArithmeticException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("Overflow or underflow in the arithmetic operation.", ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.ArithmeticException("The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.ArithmeticException), "is OverflowException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.ArithmeticException("The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.ArithmeticException), "is OverflowException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        }
    });
    
    Bridge.define('Bridge.ClientTest.Exceptions.CommonExceptionTests', {
        throwingAndCatchingExceptionsWorks: function () {
            try {
                throw new Bridge.ClientTest.Exceptions.CommonExceptionTests.E2("The message");
                Bridge.Test.Assert.fail$1("Should not get to statement after throw");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                var e;
                if (Bridge.is($e1, Bridge.ClientTest.Exceptions.CommonExceptionTests.E2)) {
                    e = $e1;
                    Bridge.Test.Assert.areEqual("The message", e.getMessage());
                    return;
                }
                else {
                    throw $e1;
                }
            }
            Bridge.Test.Assert.fail$1("Should not get to statement after catch");
        },
        exceptionOfWrongTypeIsNotCaught: function () {
            try {
                throw new Bridge.ClientTest.Exceptions.CommonExceptionTests.E1("The message");
                Bridge.Test.Assert.fail$1("Should not get to statement after throw");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                var e;
                if (Bridge.is($e1, Bridge.ClientTest.Exceptions.CommonExceptionTests.E2)) {
                    Bridge.Test.Assert.fail$1("Should not catch E2");
                }
                else if (Bridge.is($e1, Bridge.ClientTest.Exceptions.CommonExceptionTests.E1)) {
                    e = $e1;
                    Bridge.Test.Assert.areEqual("The message", e.getMessage());
                    return;
                }
                else {
                    throw $e1;
                }
            }
            Bridge.Test.Assert.fail$1("Should not get to statement after catch");
        },
        canCatchExceptionAsBaseType: function () {
            try {
                throw new Bridge.ClientTest.Exceptions.CommonExceptionTests.E2("The message");
                Bridge.Test.Assert.fail$1("Should not get to statement after throw");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                var e;
                if (Bridge.is($e1, Bridge.ClientTest.Exceptions.CommonExceptionTests.E1)) {
                    e = $e1;
                    Bridge.Test.Assert.areEqual("The message", e.getMessage());
                    return;
                }
                else {
                    throw $e1;
                }
            }
            Bridge.Test.Assert.fail$1("Should not get to statement after catch");
        },
        canCatchStringAsException: function () {
            try {
                (function() {{ throw 'The message'; }})();
                Bridge.Test.Assert.fail$1("Should not get to statement after throw");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                var e;
                if (Bridge.is($e1, Bridge.ClientTest.Exceptions.CommonExceptionTests.E1)) {
                    Bridge.Test.Assert.fail$1("Should not catch E1");
                }
                else {
                    e = $e1;
                    Bridge.Test.Assert.areEqual("The message", e.getMessage());
                    return;
                }
            }
            Bridge.Test.Assert.fail$1("Should not get to statement after catch");
        },
        canCatchStringAsCatchAll: function () {
            try {
                (function() {{ throw 'The message'; }})();
                Bridge.Test.Assert.fail$1("Should not get to statement after throw");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                if (Bridge.is($e1, Bridge.ClientTest.Exceptions.CommonExceptionTests.E1)) {
                    Bridge.Test.Assert.fail$1("Should not catch E1");
                }
                else {
                    Bridge.Test.Assert.true(true);
                    return;
                }
            }
            Bridge.Test.Assert.fail$1("Should not get to statement after catch");
        }
    });
    
    Bridge.define('Bridge.ClientTest.Exceptions.CommonExceptionTests.E1', {
        inherits: [System.Exception],
        constructor: function (message) {
            System.Exception.prototype.$constructor.call(this, message);
    
        }
    });
    
    Bridge.define('Bridge.ClientTest.Exceptions.CultureNotFoundExceptionTests', {
        statics: {
            DefaultMessage: "Culture is not supported."
        },
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.Globalization.CultureNotFoundException", Bridge.getTypeName(System.Globalization.CultureNotFoundException), "Name");
            var d = new System.Globalization.CultureNotFoundException();
            Bridge.Test.Assert.true(Bridge.is(d, System.Globalization.CultureNotFoundException));
            Bridge.Test.Assert.true(Bridge.is(d, System.Exception));
        },
        defaultConstructorWorks: function () {
            var ex = new System.Globalization.CultureNotFoundException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Globalization.CultureNotFoundException), "is CultureNotFoundException");
            Bridge.Test.Assert.areEqual$1(null, ex.getParamName(), "ParamName");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual(Bridge.ClientTest.Exceptions.CultureNotFoundExceptionTests.DefaultMessage, ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.Globalization.CultureNotFoundException(null, null, "The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Globalization.CultureNotFoundException), "is CultureNotFoundException");
            Bridge.Test.Assert.areEqual$1(null, ex.getParamName(), "ParamName");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
            Bridge.Test.Assert.areEqual$1(null, ex.getInvalidCultureName(), "InvalidCultureName");
            Bridge.Test.Assert.areEqual$1(null, ex.getInvalidCultureId(), "InvalidCultureId");
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.Globalization.CultureNotFoundException(null, null, "The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Globalization.CultureNotFoundException), "is CultureNotFoundException");
            Bridge.Test.Assert.areEqual$1(null, ex.getParamName(), "ParamName");
            Bridge.Test.Assert.areEqual$1(inner, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
            Bridge.Test.Assert.areEqual$1(null, ex.getInvalidCultureName(), "InvalidCultureName");
            Bridge.Test.Assert.areEqual$1(null, ex.getInvalidCultureId(), "InvalidCultureId");
        },
        constructorWithMessageAndParamNameWorks: function () {
            var ex = new System.Globalization.CultureNotFoundException("someParam", null, "The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Globalization.CultureNotFoundException), "is CultureNotFoundException");
            Bridge.Test.Assert.areEqual$1("someParam", ex.getParamName(), "ParamName");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
            Bridge.Test.Assert.areEqual$1(null, ex.getInvalidCultureName(), "InvalidCultureName");
            Bridge.Test.Assert.areEqual$1(null, ex.getInvalidCultureId(), "InvalidCultureId");
        },
        constructorWithMessageAndCultureNameAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.Globalization.CultureNotFoundException(null, "fru", "The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Globalization.CultureNotFoundException), "is CultureNotFoundException");
            Bridge.Test.Assert.areEqual$1(null, ex.getParamName(), "ParamName");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual$1(inner, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
            Bridge.Test.Assert.areEqual$1("fru", ex.getInvalidCultureName(), "InvalidCultureName");
            Bridge.Test.Assert.null$1(ex.getInvalidCultureId(), "InvalidCultureId");
        },
        constructorWithParamNameAndCultureNameAndMessage: function () {
            var ex = new System.Globalization.CultureNotFoundException("SomeParam", "fru", "The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Globalization.CultureNotFoundException), "is CultureNotFoundException");
            Bridge.Test.Assert.areEqual$1("SomeParam", ex.getParamName(), "ParamName");
            Bridge.Test.Assert.null$1(ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
            Bridge.Test.Assert.areEqual$1("fru", ex.getInvalidCultureName(), "InvalidCultureName");
            Bridge.Test.Assert.areEqual$1(null, ex.getInvalidCultureId(), "InvalidCultureId");
        },
        constructorWithMessageAndCultureIdAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.Globalization.CultureNotFoundException(null, null, "The message", inner, 1);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Globalization.CultureNotFoundException), "is CultureNotFoundException");
            Bridge.Test.Assert.areEqual$1(null, ex.getParamName(), "ParamName");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual$1(inner, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
            Bridge.Test.Assert.areEqual$1(null, ex.getInvalidCultureName(), "InvalidCultureName");
            Bridge.Test.Assert.areEqual$1(1, ex.getInvalidCultureId(), "InvalidCultureId");
        },
        constructorWithParamNameAndCultureIdAndMessage: function () {
            var ex = new System.Globalization.CultureNotFoundException("SomeParam", null, "The message", null, 2);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Globalization.CultureNotFoundException), "is CultureNotFoundException");
            Bridge.Test.Assert.areEqual$1("SomeParam", ex.getParamName(), "ParamName");
            Bridge.Test.Assert.null$1(ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
            Bridge.Test.Assert.areEqual$1(null, ex.getInvalidCultureName(), "InvalidCultureName");
            Bridge.Test.Assert.areEqual$1(2, ex.getInvalidCultureId(), "InvalidCultureId");
        }
    });
    
    Bridge.define('Bridge.ClientTest.Exceptions.DivideByZeroExceptionTests', {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.DivideByZeroException", Bridge.getTypeName(System.DivideByZeroException), "Name");
            var d = new System.DivideByZeroException();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.DivideByZeroException), "is DivideByZeroException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.DivideByZeroException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.DivideByZeroException), "is DivideByZeroException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("Division by 0.", ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.DivideByZeroException("The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.DivideByZeroException), "is DivideByZeroException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.DivideByZeroException("The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.DivideByZeroException), "is DivideByZeroException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        }
    });
    
    Bridge.define('Bridge.ClientTest.Exceptions.ExceptionTests', {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.Exception", Bridge.getTypeName(System.Exception), "Name");
            var d = new System.Exception();
            Bridge.Test.Assert.true(Bridge.is(d, System.Exception));
        },
        defaultConstructorWorks: function () {
            var ex = new System.Exception();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Exception), "is Exception");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual(null, ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.Exception("The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Exception), "is Exception");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.Exception("The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Exception), "is Exception");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        messagePropertyCanBeOverridden: function () {
            var ex = Bridge.cast(new Bridge.ClientTest.Exceptions.ExceptionTests.MyException("Test message", null), System.Exception);
            Bridge.Test.Assert.areEqual("Test message", ex.getMessage());
        },
        innerExceptionPropertyCanBeOverridden: function () {
            var inner = new System.Exception("a");
            var ex = Bridge.cast(new Bridge.ClientTest.Exceptions.ExceptionTests.MyException("Test message", inner), System.Exception);
            Bridge.Test.Assert.true(Bridge.referenceEquals(ex.getInnerException(), inner));
        }
    });
    
    Bridge.define('Bridge.ClientTest.Exceptions.ExceptionTests.MyException', {
        inherits: [System.Exception],
        _message: null,
        _innerException: null,
        constructor: function (message, innerException) {
            System.Exception.prototype.$constructor.call(this);
    
            this._message = message;
            this._innerException = innerException;
        },
        getMessage: function () {
            return this._message;
        },
        getInnerException: function () {
            return this._innerException;
        }
    });
    
    Bridge.define('Bridge.ClientTest.Exceptions.FormatExceptionTests', {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.FormatException", Bridge.getTypeName(System.FormatException), "Name");
            var d = new System.FormatException();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.FormatException), "is FormatException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.FormatException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.FormatException), "is FormatException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("Invalid format.", ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.FormatException("The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.FormatException), "is FormatException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.FormatException("The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.FormatException), "is FormatException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        }
    });
    
    Bridge.define('Bridge.ClientTest.Exceptions.IndexOutOfRangeExceptionTests', {
        statics: {
            DefaultMessage: "Index was outside the bounds of the array."
        },
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.IndexOutOfRangeException", Bridge.getTypeName(System.IndexOutOfRangeException), "Name");
            var d = new System.IndexOutOfRangeException();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.IndexOutOfRangeException), "is IndexOutOfRangeException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.SystemException), "is SystemException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.IndexOutOfRangeException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.IndexOutOfRangeException), "is IndexOutOfRangeException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual(Bridge.ClientTest.Exceptions.IndexOutOfRangeExceptionTests.DefaultMessage, ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.IndexOutOfRangeException("The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.IndexOutOfRangeException), "is IndexOutOfRangeException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.IndexOutOfRangeException("The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.IndexOutOfRangeException), "is IndexOutOfRangeException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        }
    });
    
    Bridge.define('Bridge.ClientTest.Exceptions.InvalidCastExceptionTests', {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.InvalidCastException", Bridge.getTypeName(System.InvalidCastException), "Name");
            var d = new System.InvalidCastException();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.InvalidCastException), "is InvalidCastException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.InvalidCastException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.InvalidCastException), "is InvalidCastException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The cast is not valid.", ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.InvalidCastException("The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.InvalidCastException), "is InvalidCastException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.InvalidCastException("The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.InvalidCastException), "is InvalidCastException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        }
    });
    
    Bridge.define('Bridge.ClientTest.Exceptions.InvalidOperationExceptionTests', {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.InvalidOperationException", Bridge.getTypeName(System.InvalidOperationException), "Name");
            var d = new System.InvalidOperationException();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.InvalidOperationException), "is InvalidOperationException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.InvalidOperationException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.InvalidOperationException), "is InvalidOperationException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("Operation is not valid due to the current state of the object.", ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.InvalidOperationException("The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.InvalidOperationException), "is InvalidOperationException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.InvalidOperationException("The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.InvalidOperationException), "is InvalidOperationException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        }
    });
    
    Bridge.define('Bridge.ClientTest.Exceptions.KeyNotFoundExceptionTests', {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.Collections.Generic.KeyNotFoundException", Bridge.getTypeName(System.Collections.Generic.KeyNotFoundException), "Name");
            var d = new System.Collections.Generic.KeyNotFoundException();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Collections.Generic.KeyNotFoundException), "is KeyNotFoundException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.Collections.Generic.KeyNotFoundException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Collections.Generic.KeyNotFoundException), "is KeyNotFoundException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("Key not found.", ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.Collections.Generic.KeyNotFoundException("The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Collections.Generic.KeyNotFoundException), "is KeyNotFoundException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.Collections.Generic.KeyNotFoundException("The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Collections.Generic.KeyNotFoundException), "is KeyNotFoundException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        }
    });
    
    Bridge.define('Bridge.ClientTest.Exceptions.NotImplementedExceptionTests', {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.NotImplementedException", Bridge.getTypeName(System.NotImplementedException), "Name");
            var d = new System.NotImplementedException();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.NotImplementedException), "is NotImplementedException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.NotImplementedException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.NotImplementedException), "is NotImplementedException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The method or operation is not implemented.", ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.NotImplementedException("The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.NotImplementedException), "is NotImplementedException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.NotImplementedException("The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.NotImplementedException), "is NotImplementedException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        }
    });
    
    Bridge.define('Bridge.ClientTest.Exceptions.NotSupportedExceptionTests', {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.NotSupportedException", Bridge.getTypeName(System.NotSupportedException), "Name");
            var d = new System.NotSupportedException();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.NotSupportedException), "is NotSupportedException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.NotSupportedException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.NotSupportedException), "is NotSupportedException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("Specified method is not supported.", ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.NotSupportedException("The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.NotSupportedException), "is NotSupportedException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.NotSupportedException("The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.NotSupportedException), "is NotSupportedException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        }
    });
    
    Bridge.define('Bridge.ClientTest.Exceptions.NullReferenceExceptionTests', {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.NullReferenceException", Bridge.getTypeName(System.NullReferenceException), "Name");
            var d = new System.NullReferenceException();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.NullReferenceException), "is NullReferenceException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.NullReferenceException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.NullReferenceException), "is NullReferenceException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("Object is null.", ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.NullReferenceException("The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.NullReferenceException), "is NullReferenceException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.NullReferenceException("The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.NullReferenceException), "is NullReferenceException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        accessingAFieldOnANullObjectCausesANullReferenceException: function () {
            try {
                var d = null;
                var x = d.someField;
                Bridge.Test.Assert.fail$1("A NullReferenceException should have been thrown");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                var ex;
                if (Bridge.is($e1, System.NullReferenceException)) {
                    ex = $e1;
                    var inner = ex.getInnerException();
                    Bridge.Test.Assert.notNull$1(inner, "Inner Exception");
                }
                else {
                    ex = $e1;
                    Bridge.Test.Assert.fail$1("Expected NullReferenceException, got type " + Bridge.getType(ex));
                }
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.Exceptions.OperationCanceledExceptionTests', {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.OperationCanceledException", Bridge.getTypeName(System.OperationCanceledException), "Name");
            var d = new System.OperationCanceledException();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.OperationCanceledException), "is OperationCanceledException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.OperationCanceledException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.OperationCanceledException), "is OperationCanceledException");
            Bridge.Test.Assert.areEqual$1("Operation was canceled.", ex.getMessage(), "Message");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.cancellationToken, System.Threading.CancellationToken.none), "CancellationToken");
            Bridge.Test.Assert.null$1(ex.getInnerException(), "InnerException");
        },
        cancellationTokenOnlyConstructorWorks: function () {
            var ct = new System.Threading.CancellationToken();
            var ex = new System.OperationCanceledException(null, ct);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.OperationCanceledException), "is OperationCanceledException");
            Bridge.Test.Assert.areEqual$1("Operation was canceled.", ex.getMessage(), "Message");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.cancellationToken, ct), "CancellationToken");
            Bridge.Test.Assert.null$1(ex.getInnerException(), "InnerException");
        },
        messageOnlyConstructorWorks: function () {
            var ex = new System.OperationCanceledException("Some message", System.Threading.CancellationToken.none);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.OperationCanceledException), "is OperationCanceledException");
            Bridge.Test.Assert.areEqual$1("Some message", ex.getMessage(), "Message");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.cancellationToken, System.Threading.CancellationToken.none), "CancellationToken");
            Bridge.Test.Assert.null$1(ex.getInnerException(), "InnerException");
        },
        messageAndInnerExceptionConstructorWorks: function () {
            var innerException = new System.Exception();
            var ex = new System.OperationCanceledException("Some message", System.Threading.CancellationToken.none, innerException);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.OperationCanceledException), "is OperationCanceledException");
            Bridge.Test.Assert.areEqual$1("Some message", ex.getMessage(), "Message");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.cancellationToken, System.Threading.CancellationToken.none), "CancellationToken");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), innerException), "InnerException");
        },
        messageAndCancellationTokenConstructorWorks: function () {
            var ct = new System.Threading.CancellationToken();
            var ex = new System.OperationCanceledException("Some message", ct);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.OperationCanceledException), "is OperationCanceledException");
            Bridge.Test.Assert.areEqual$1("Some message", ex.getMessage(), "Message");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.cancellationToken, ct), "CancellationToken");
            Bridge.Test.Assert.null$1(ex.getInnerException(), "InnerException");
        },
        messageAndInnerExceptionAndCancellationTokenConstructorWorks: function () {
            var ct = new System.Threading.CancellationToken();
            var innerException = new System.Exception();
            var ex = new System.OperationCanceledException("Some message", ct, innerException);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.OperationCanceledException), "is OperationCanceledException");
            Bridge.Test.Assert.areEqual$1("Some message", ex.getMessage(), "Message");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.cancellationToken, ct), "CancellationToken");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), innerException), "InnerException");
        }
    });
    
    Bridge.define('Bridge.ClientTest.Exceptions.OutOfMemoryExceptionTests', {
        statics: {
            DefaultMessage: "Insufficient memory to continue the execution of the program."
        },
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.OutOfMemoryException", Bridge.getTypeName(System.OutOfMemoryException), "Name");
            var d = new System.OutOfMemoryException();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.OutOfMemoryException), "is OutOfMemoryException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.SystemException), "is SystemException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.OutOfMemoryException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.OutOfMemoryException), "is OutOfMemoryException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual(Bridge.ClientTest.Exceptions.OutOfMemoryExceptionTests.DefaultMessage, ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.OutOfMemoryException("The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.OutOfMemoryException), "is OutOfMemoryException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.OutOfMemoryException("The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.OutOfMemoryException), "is OutOfMemoryException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        }
    });
    
    Bridge.define('Bridge.ClientTest.Exceptions.OverflowExceptionTests', {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.OverflowException", Bridge.getTypeName(System.OverflowException), "Name");
            var d = new System.OverflowException();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.OverflowException), "is OverflowException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.OverflowException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.OverflowException), "is OverflowException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("Arithmetic operation resulted in an overflow.", ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.OverflowException("The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.OverflowException), "is OverflowException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.OverflowException("The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.OverflowException), "is OverflowException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        }
    });
    
    Bridge.define('Bridge.ClientTest.Exceptions.PromiseExceptionTests', {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("Bridge.PromiseException", Bridge.getTypeName(Bridge.PromiseException), "Name");
            var d = new Bridge.PromiseException(System.Array.init(0, null));
            Bridge.Test.Assert.true$1(Bridge.is(d, Bridge.PromiseException), "is PromiseException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        argumentsOnlyConstructorWorks: function () {
            var args = ["a", 1];
            var ex = new Bridge.PromiseException(args);
            Bridge.Test.Assert.true$1(Bridge.is(ex, Bridge.PromiseException), "is PromiseException");
            Bridge.Test.Assert.areEqual$1(args, ex.arguments, "Arguments");
            Bridge.Test.Assert.true$1(ex.getInnerException() == null, "InnerException");
            Bridge.Test.Assert.areEqual$1("a", ex.getMessage(), "Message");
        },
        argumentsAndMessageConstructorWorks: function () {
            var args = ["a", 1];
            var ex = new Bridge.PromiseException(args, "Some message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, Bridge.PromiseException), "is PromiseException");
            Bridge.Test.Assert.true$1(ex.getInnerException() == null, "InnerException");
            Bridge.Test.Assert.areEqual$1(args, ex.arguments, "Arguments");
            Bridge.Test.Assert.areEqual$1("Some message", ex.getMessage(), "Message");
        },
        argumentsAndMessageAndInnerExceptionConstructorWorks: function () {
            var inner = new System.Exception("a");
            var args = ["a", 1];
            var ex = new Bridge.PromiseException(args, "Some message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, Bridge.PromiseException), "is PromiseException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual$1(args, ex.arguments, "Arguments");
            Bridge.Test.Assert.areEqual$1("Some message", ex.getMessage(), "Message");
        }
    });
    
    Bridge.define('Bridge.ClientTest.Exceptions.RankExceptionTests', {
        statics: {
            DefaultMessage: "Attempted to operate on an array with the incorrect number of dimensions."
        },
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.RankException", Bridge.getTypeName(System.RankException), "Name");
            var d = new System.RankException();
            Bridge.Test.Assert.true(Bridge.is(d, System.RankException));
            Bridge.Test.Assert.true(Bridge.is(d, System.Exception));
        },
        defaultConstructorWorks: function () {
            var ex = new System.RankException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.RankException), "is ArgumentException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual(Bridge.ClientTest.Exceptions.RankExceptionTests.DefaultMessage, ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.RankException("The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.RankException), "is RankException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        }
    });
    
    Bridge.define('Bridge.ClientTest.Exceptions.RegexMatchTimeoutExceptionTests', {
        statics: {
            DefaultMessage1: "The operation has timed out.",
            DefaultMessage2: "The RegEx engine has timed out while trying to match a pattern to an input string. This can occur for many reasons, including very large inputs or excessive backtracking caused by nested quantifiers, back-references and other factors."
        },
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.RegexMatchTimeoutException", Bridge.getTypeName(System.RegexMatchTimeoutException), "Name");
            var d = new System.RegexMatchTimeoutException("constructor");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.RegexMatchTimeoutException), "is RegexMatchTimeoutException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.TimeoutException), "is TimeoutException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.SystemException), "is SystemException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.RegexMatchTimeoutException("constructor");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.RegexMatchTimeoutException), "is RegexMatchTimeoutException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual(Bridge.ClientTest.Exceptions.RegexMatchTimeoutExceptionTests.DefaultMessage1, ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.RegexMatchTimeoutException("constructor$1", "The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.RegexMatchTimeoutException), "is RegexMatchTimeoutException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.RegexMatchTimeoutException("constructor$2", "The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.RegexMatchTimeoutException), "is RegexMatchTimeoutException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithExceptionDetailsWorks: function () {
            var ex = new System.RegexMatchTimeoutException("constructor$3", "testInput", "testPattern", System.TimeSpan.fromSeconds(77));
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.RegexMatchTimeoutException), "is RegexMatchTimeoutException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual$1("testInput", ex.getInput(), "Input");
            Bridge.Test.Assert.areEqual$1("testPattern", ex.getPattern(), "Pattern");
            Bridge.Test.Assert.areEqual$1(System.TimeSpan.fromSeconds(77), ex.getMatchTimeout(), "MatchTimeout");
            Bridge.Test.Assert.areEqual(Bridge.ClientTest.Exceptions.RegexMatchTimeoutExceptionTests.DefaultMessage2, ex.getMessage());
        }
    });
    
    Bridge.define('Bridge.ClientTest.Exceptions.SystemExceptionTests', {
        statics: {
            DefaultMessage: "System error."
        },
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.SystemException", Bridge.getTypeName(System.SystemException), "Name");
            var d = new System.SystemException();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.SystemException), "is SystemException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.SystemException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.SystemException), "is SystemException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual(Bridge.ClientTest.Exceptions.SystemExceptionTests.DefaultMessage, ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.SystemException("The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.SystemException), "is SystemException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.SystemException("The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.SystemException), "is SystemException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        }
    });
    
    Bridge.define('Bridge.ClientTest.Exceptions.TaskCanceledExceptionTests', {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.Threading.Tasks.TaskCanceledException", Bridge.getTypeName(System.Threading.Tasks.TaskCanceledException), "Name");
            var d = new System.Threading.Tasks.TaskCanceledException();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Threading.Tasks.TaskCanceledException), "is TaskCanceledException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.OperationCanceledException), "is OperationCanceledException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.Threading.Tasks.TaskCanceledException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Threading.Tasks.TaskCanceledException), "is TaskCanceledException");
            Bridge.Test.Assert.areEqual$1("A task was canceled.", ex.getMessage(), "Message");
            Bridge.Test.Assert.null$1(ex.task, "Task");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.cancellationToken, System.Threading.CancellationToken.none), "CancellationToken");
            Bridge.Test.Assert.null$1(ex.getInnerException(), "InnerException");
        },
        messageOnlyConstructorWorks: function () {
            var ex = new System.Threading.Tasks.TaskCanceledException("Some message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Threading.Tasks.TaskCanceledException), "is TaskCanceledException");
            Bridge.Test.Assert.areEqual$1("Some message", ex.getMessage(), "Message");
            Bridge.Test.Assert.null$1(ex.task, "Task");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.cancellationToken, System.Threading.CancellationToken.none), "CancellationToken");
            Bridge.Test.Assert.null$1(ex.getInnerException(), "InnerException");
        },
        taskOnlyConstructorWorks: function () {
            var task = new System.Threading.Tasks.TaskCompletionSource().task;
            var ex = new System.Threading.Tasks.TaskCanceledException(null, task);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Threading.Tasks.TaskCanceledException), "is TaskCanceledException");
            Bridge.Test.Assert.areEqual$1("A task was canceled.", ex.getMessage(), "Message");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.task, task), "Task");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.cancellationToken, System.Threading.CancellationToken.none), "CancellationToken");
            Bridge.Test.Assert.null$1(ex.getInnerException(), "InnerException");
        },
        messageAndInnerExceptionConstructorWorks: function () {
            var innerException = new System.Exception();
            var ex = new System.Threading.Tasks.TaskCanceledException("Some message", null, innerException);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.Threading.Tasks.TaskCanceledException), "is TaskCanceledException");
            Bridge.Test.Assert.areEqual$1("Some message", ex.getMessage(), "Message");
            Bridge.Test.Assert.null$1(ex.task, "Task");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.cancellationToken, System.Threading.CancellationToken.none), "CancellationToken");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), innerException), "InnerException");
        }
    });
    
    Bridge.define('Bridge.ClientTest.Exceptions.TimeoutExceptionTests', {
        statics: {
            DefaultMessage: "The operation has timed out."
        },
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.TimeoutException", Bridge.getTypeName(System.TimeoutException), "Name");
            var d = new System.TimeoutException();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.TimeoutException), "is TimeoutException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.SystemException), "is SystemException");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.Exception), "is Exception");
        },
        defaultConstructorWorks: function () {
            var ex = new System.TimeoutException();
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.TimeoutException), "is TimeoutException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual(Bridge.ClientTest.Exceptions.TimeoutExceptionTests.DefaultMessage, ex.getMessage());
        },
        constructorWithMessageWorks: function () {
            var ex = new System.TimeoutException("The message");
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.TimeoutException), "is TimeoutException");
            Bridge.Test.Assert.areEqual$1(null, ex.getInnerException(), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        },
        constructorWithMessageAndInnerExceptionWorks: function () {
            var inner = new System.Exception("a");
            var ex = new System.TimeoutException("The message", inner);
            Bridge.Test.Assert.true$1(Bridge.is(ex, System.TimeoutException), "is TimeoutException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex.getInnerException(), inner), "InnerException");
            Bridge.Test.Assert.areEqual("The message", ex.getMessage());
        }
    });
    
    Bridge.define('Bridge.ClientTest.Format.DateTimeFormatInfoTests', {
        typePropertiesAreCorrect: function () {
            var format = System.Globalization.DateTimeFormatInfo.invariantInfo;
            Bridge.Test.Assert.areEqual("System.Globalization.DateTimeFormatInfo", Bridge.getTypeName(System.Globalization.DateTimeFormatInfo));
            Bridge.Test.Assert.true(true);
        },
        getFormatWorks: function () {
            var format = System.Globalization.DateTimeFormatInfo.invariantInfo;
            Bridge.Test.Assert.areEqual(null, format.getFormat(System.Int32));
            Bridge.Test.Assert.areEqual(format, format.getFormat(System.Globalization.DateTimeFormatInfo));
        },
        invariantWorks: function () {
            var format = System.Globalization.DateTimeFormatInfo.invariantInfo;
            Bridge.Test.Assert.areEqual("AM", format.amDesignator);
            Bridge.Test.Assert.areEqual("PM", format.pmDesignator);
    
            Bridge.Test.Assert.areEqual("/", format.dateSeparator);
            Bridge.Test.Assert.areEqual(":", format.timeSeparator);
    
            Bridge.Test.Assert.areEqual("dddd, dd MMMM yyyy HH:mm:ss", format.fullDateTimePattern);
            Bridge.Test.Assert.areEqual("yyyy MMMM", format.yearMonthPattern);
    
            Bridge.Test.Assert.areEqual("yyyy'-'MM'-'dd'T'HH':'mm':'ss", format.sortableDateTimePattern);
    
            Bridge.Test.Assert.areEqual("dddd, dd MMMM yyyy", format.longDatePattern);
            Bridge.Test.Assert.areEqual("MM/dd/yyyy", format.shortDatePattern);
    
            Bridge.Test.Assert.areEqual("HH:mm:ss", format.longTimePattern);
            Bridge.Test.Assert.areEqual("HH:mm", format.shortTimePattern);
    
            Bridge.Test.Assert.areEqual(0, format.firstDayOfWeek);
            Bridge.Test.Assert.areDeepEqual(["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], format.dayNames);
    
            Bridge.Test.Assert.areDeepEqual(["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""], format.monthNames);
        }
    });
    
    Bridge.define('Bridge.ClientTest.Format.NumberFormatInfoTests', {
        typePropertiesAreCorrect: function () {
            var format = System.Globalization.NumberFormatInfo.invariantInfo;
            Bridge.Test.Assert.areEqual("System.Globalization.NumberFormatInfo", Bridge.getTypeName(System.Globalization.NumberFormatInfo));
            Bridge.Test.Assert.true(true);
        },
        getFormatWorks: function () {
            var format = System.Globalization.NumberFormatInfo.invariantInfo;
            Bridge.Test.Assert.areEqual(null, format.getFormat(System.Int32));
            Bridge.Test.Assert.areEqual(format, format.getFormat(System.Globalization.NumberFormatInfo));
        },
        invariantWorks: function () {
            var format = System.Globalization.NumberFormatInfo.invariantInfo;
            Bridge.Test.Assert.areEqual("NaN", format.nanSymbol);
            Bridge.Test.Assert.areEqual("-", format.negativeSign);
            Bridge.Test.Assert.areEqual("+", format.positiveSign);
            Bridge.Test.Assert.areEqual("-Infinity", format.negativeInfinitySymbol);
            Bridge.Test.Assert.areEqual("Infinity", format.positiveInfinitySymbol);
    
            Bridge.Test.Assert.areEqual("%", format.percentSymbol);
            Bridge.Test.Assert.areDeepEqual([3], format.percentGroupSizes);
            Bridge.Test.Assert.areEqual(2, format.percentDecimalDigits);
            Bridge.Test.Assert.areEqual(".", format.percentDecimalSeparator);
            Bridge.Test.Assert.areEqual(",", format.percentGroupSeparator);
            Bridge.Test.Assert.areEqual(0, format.percentPositivePattern);
            Bridge.Test.Assert.areEqual(0, format.percentNegativePattern);
    
            Bridge.Test.Assert.areEqual("¤", format.currencySymbol);
            Bridge.Test.Assert.areDeepEqual([3], format.currencyGroupSizes);
            Bridge.Test.Assert.areEqual(2, format.currencyDecimalDigits);
            Bridge.Test.Assert.areEqual(".", format.currencyDecimalSeparator);
            Bridge.Test.Assert.areEqual(",", format.currencyGroupSeparator);
            Bridge.Test.Assert.areEqual(0, format.currencyNegativePattern);
            Bridge.Test.Assert.areEqual(0, format.currencyPositivePattern);
    
            Bridge.Test.Assert.areDeepEqual([3], format.numberGroupSizes);
            Bridge.Test.Assert.areEqual(2, format.numberDecimalDigits);
            Bridge.Test.Assert.areEqual(".", format.numberDecimalSeparator);
            Bridge.Test.Assert.areEqual(",", format.numberGroupSeparator);
        }
    });
    
    Bridge.define('Bridge.ClientTest.Format.NumberFormatSpecifiersTests', {
        currencyFormatSpecifierWorks: function () {
            var value = 12345.6789;
            Bridge.Test.Assert.areEqual("¤12,345.68", System.Double.format(value, "C"));
            Bridge.Test.Assert.areEqual("¤12,345.68", System.Double.format(value, "C2"));
            Bridge.Test.Assert.areEqual("¤12,345.679", System.Double.format(value, "C3"));
            Bridge.Test.Assert.areEqual("12 345,679 ₽", System.Double.format(value, "C3", System.Globalization.CultureInfo.getCultureInfo("ru-RU")));
        },
        decimalFormatSpecifierWorks: function () {
            var value = 12345;
            Bridge.Test.Assert.areEqual("12345", System.Double.format(value, "D"));
            Bridge.Test.Assert.areEqual("00012345", System.Double.format(value, "D8"));
            value = -12345;
            Bridge.Test.Assert.areEqual("-12345", System.Double.format(value, "D"));
            Bridge.Test.Assert.areEqual("-00012345", System.Double.format(value, "D8"));
        },
        exponentialFormatSpecifierWorks: function () {
            var value = 12345.6789;
            Bridge.Test.Assert.areEqual("1.234568E+004", System.Double.format(value, "E"));
            Bridge.Test.Assert.areEqual("1.2345678900E+004", System.Double.format(value, "E10"));
            Bridge.Test.Assert.areEqual("1.2346e+004", System.Double.format(value, "e4"));
            Bridge.Test.Assert.areEqual("1,234568E+004", System.Double.format(value, "E", System.Globalization.CultureInfo.getCultureInfo("ru-RU")));
        },
        fixedPointFormatSpecifierWorks: function () {
            var integerNumber = 17843;
            Bridge.Test.Assert.areEqual("17843.00", System.Int32.format(integerNumber, "F"));
    
            integerNumber = -29541;
            Bridge.Test.Assert.areEqual("-29541.000", System.Int32.format(integerNumber, "F3"));
    
            var doubleNumber = 18934.1879;
            Bridge.Test.Assert.areEqual("18934.19", System.Double.format(doubleNumber, "F"));
            Bridge.Test.Assert.areEqual("18934", System.Double.format(doubleNumber, "F0"));
    
            doubleNumber = -1898300.1987;
            Bridge.Test.Assert.areEqual("-1898300.2", System.Double.format(doubleNumber, "F1"));
            Bridge.Test.Assert.areEqual("-1898300,199", System.Double.format(doubleNumber, "F3", System.Globalization.CultureInfo.getCultureInfo("ru-RU")));
        },
        generalFormatSpecifierWorks: function () {
            var number = 12345.6789;
            Bridge.Test.Assert.areEqual("12345.6789", System.Double.format(number, "G"));
            Bridge.Test.Assert.areEqual("12345,6789", System.Double.format(number, "G", System.Globalization.CultureInfo.getCultureInfo("ru-RU")));
            Bridge.Test.Assert.areEqual("12345.68", System.Double.format(number, "G7"));
    
            number = 2.3E-06;
            Bridge.Test.Assert.areEqual("2.3E-06", System.Double.format(number, "G"));
            Bridge.Test.Assert.areEqual("2,3E-06", System.Double.format(number, "G", System.Globalization.CultureInfo.getCultureInfo("ru-RU")));
    
            number = 0.0023;
            Bridge.Test.Assert.areEqual("0.0023", System.Double.format(number, "G"));
    
            number = 1234;
            Bridge.Test.Assert.areEqual("1.2E+03", System.Double.format(number, "G2"));
    
            number = Math.PI;
            Bridge.Test.Assert.areEqual("3.1416", System.Double.format(number, "G5"));
        },
        numericFormatSpecifierWorks: function () {
            var dblValue = -12445.6789;
            Bridge.Test.Assert.areEqual("-12,445.68", System.Double.format(dblValue, "N"));
            Bridge.Test.Assert.areEqual("-12 445,7", System.Double.format(dblValue, "N1", System.Globalization.CultureInfo.getCultureInfo("ru-RU")));
    
            var intValue = 123456789;
            Bridge.Test.Assert.areEqual("123,456,789.0", System.Int32.format(intValue, "N1"));
        },
        percentFormatSpecifierWorks: function () {
            var number = 0.2468013;
            Bridge.Test.Assert.areEqual("24.68 %", System.Double.format(number, "P"));
            Bridge.Test.Assert.areEqual("24,68%", System.Double.format(number, "P", System.Globalization.CultureInfo.getCultureInfo("ru-RU")));
            Bridge.Test.Assert.areEqual("24.7 %", System.Double.format(number, "P1"));
        },
        roundTripFormatSpecifierWorks: function () {
            var value = Math.PI;
            Bridge.Test.Assert.areEqual("3.141592653589793", System.Double.format(value, "r"));
            Bridge.Test.Assert.areEqual("3,141592653589793", System.Double.format(value, "r", System.Globalization.CultureInfo.getCultureInfo("ru-RU")));
    
            value = 1.623E-21;
            Bridge.Test.Assert.areEqual("1.623E-21", System.Double.format(value, "r"));
        },
        hexadecimalFormatSpecifierWorks: function () {
            var value = 132190;
            Bridge.Test.Assert.areEqual("2045e", System.Int32.format(value, "x"));
            Bridge.Test.Assert.areEqual("2045E", System.Int32.format(value, "X"));
            Bridge.Test.Assert.areEqual("0002045E", System.Int32.format(value, "X8"));
    
            value = 123456789;
            Bridge.Test.Assert.areEqual("75BCD15", System.Int32.format(value, "X"));
            Bridge.Test.Assert.areEqual("75BCD15", System.Int32.format(value, "X2"));
        },
        customZeroFormatSpecifierWorks: function () {
            var value = 123;
            Bridge.Test.Assert.areEqual("00123", System.Double.format(value, "00000"));
    
            value = 1.2;
            Bridge.Test.Assert.areEqual("1.20", System.Double.format(value, "0.00"));
            Bridge.Test.Assert.areEqual("01.20", System.Double.format(value, "00.00"));
            Bridge.Test.Assert.areEqual("01,20", System.Double.format(value, "00.00", System.Globalization.CultureInfo.getCultureInfo("ru-RU")));
    
            value = 0.56;
            Bridge.Test.Assert.areEqual("0.6", System.Double.format(value, "0.0"));
    
            value = 1234567890;
            Bridge.Test.Assert.areEqual("1,234,567,890", System.Double.format(value, "0,0"));
            Bridge.Test.Assert.areEqual("1 234 567 890", System.Double.format(value, "0,0", System.Globalization.CultureInfo.getCultureInfo("ru-RU")));
    
            value = 1234567890.123456;
            Bridge.Test.Assert.areEqual("1,234,567,890.1", System.Double.format(value, "0,0.0"));
    
            value = 1234.56789;
            Bridge.Test.Assert.areEqual("1,234.57", System.Double.format(value, "0,0.00"));
        },
        customHashFormatSpecifierWorks: function () {
            var value = 1.2;
            Bridge.Test.Assert.areEqual("1.2", System.Double.format(value, "#.##"));
    
            value = 123;
            Bridge.Test.Assert.areEqual("123", System.Double.format(value, "#####"));
    
            value = 123456;
            Bridge.Test.Assert.areEqual("[12-34-56]", System.Double.format(value, "[##-##-##]"));
    
            value = 1234567890;
            Bridge.Test.Assert.areEqual("1234567890", System.Double.format(value, "#"));
            Bridge.Test.Assert.areEqual("(123) 456-7890", System.Double.format(value, "(###) ###-####"));
    
            value = 42;
            Bridge.Test.Assert.areEqual("My Number = 42", System.Double.format(value, "My Number = #"));
        },
        customDotFormatSpecifierWorks: function () {
            var value = 1.2;
            Bridge.Test.Assert.areEqual("1.20", System.Double.format(value, "0.00"));
            Bridge.Test.Assert.areEqual("01.20", System.Double.format(value, "00.00"));
            Bridge.Test.Assert.areEqual("01,20", System.Double.format(value, "00.00", System.Globalization.CultureInfo.getCultureInfo("ru-RU")));
    
            value = 0.086;
            Bridge.Test.Assert.areEqual("8.6%", System.Double.format(value, "#0.##%"));
        },
        customCommaFormatSpecifierWorks: function () {
            var value = 1234567890;
            Bridge.Test.Assert.areEqual("1,234,567,890", System.Double.format(value, "#,#"));
            Bridge.Test.Assert.areEqual("1,235", System.Double.format(value, "#,##0,,"));
    
            value = 1234567890;
            Bridge.Test.Assert.areEqual("1235", System.Double.format(value, "#,,"));
            Bridge.Test.Assert.areEqual("1", System.Double.format(value, "#,,,"));
            Bridge.Test.Assert.areEqual("1,235", System.Double.format(value, "#,##0,,"));
        },
        customPercentFormatSpecifierWorks: function () {
            var value = 0.086;
            Bridge.Test.Assert.areEqual("8.6%", System.Double.format(value, "#0.##%"));
        },
        customPerMileFormatSpecifierWorks: function () {
            var value = 0.00354;
            Bridge.Test.Assert.areEqual("3.54 ‰", System.Double.format(value, "#0.## " + String.fromCharCode(8240)));
        },
        customEscapeFormatSpecifierWorks: function () {
            var value = 123;
            Bridge.Test.Assert.areEqual("### 123 dollars and 00 cents ###", System.Int32.format(value, "\\#\\#\\# ##0 dollars and \\0\\0 cents \\#\\#\\#"));
            Bridge.Test.Assert.areEqual("### 123 dollars and 00 cents ###", System.Int32.format(value, "\\#\\#\\# ##0 dollars and \\0\\0 cents \\#\\#\\#"));
            Bridge.Test.Assert.areEqual("\\\\\\ 123 dollars and 00 cents \\\\\\", System.Int32.format(value, "\\\\\\\\\\\\ ##0 dollars and \\0\\0 cents \\\\\\\\\\\\"));
            Bridge.Test.Assert.areEqual("\\\\\\ 123 dollars and 00 cents \\\\\\", System.Int32.format(value, "\\\\\\\\\\\\ ##0 dollars and \\0\\0 cents \\\\\\\\\\\\"));
        },
        customSemicolonFormatSpecifierWorks: function () {
            var posValue = 1234;
            var negValue = -1234;
            var zeroValue = 0;
    
            var fmt2 = "##;(##)";
            var fmt3 = "##;(##);**Zero**";
    
            Bridge.Test.Assert.areEqual("1234", System.Double.format(posValue, fmt2));
            Bridge.Test.Assert.areEqual("(1234)", System.Double.format(negValue, fmt2));
            Bridge.Test.Assert.areEqual("**Zero**", System.Double.format(zeroValue, fmt3));
        }
    });
    
    Bridge.define('Bridge.ClientTest.Format.StringFormatTests', {
        simple: function () {
            var pricePerOunce = System.Decimal(17.36);
            var s = System.String.format("The current price is {0} per ounce.", pricePerOunce);
            Bridge.Test.Assert.areEqual("The current price is 17.36 per ounce.", s);
        },
        valueFormating: function () {
            var pricePerOunce = System.Decimal(17.36);
            var s = System.String.format("The current price is {0:C2} per ounce.", pricePerOunce);
            Bridge.Test.Assert.areEqual("The current price is ¤17.36 per ounce.", s);
        },
        spaceControlling: function () {
            var years = [2013, 2014, 2015];
            var population = [1025632, 1105967, 1148203];
            var s = System.String.format("{0,6} {1,15}", "Year", "Population");
            Bridge.Test.Assert.areEqual("  Year      Population", s);
    
            s = System.String.format("{0,6} {1,15:N0}", years[0], population[0]);
            Bridge.Test.Assert.areEqual("  2013       1,025,632", s);
    
            s = System.String.format("{0,6} {1,15:N0}", years[1], population[1]);
            Bridge.Test.Assert.areEqual("  2014       1,105,967", s);
    
            s = System.String.format("{0,6} {1,15:N0}", years[2], population[2]);
            Bridge.Test.Assert.areEqual("  2015       1,148,203", s);
        },
        aligment: function () {
            // Create array of 5-tuples with population data for three U.S. cities, 1940-1950.
            var cities = [{ item1: "Los Angeles", item2: new Date(1940, 1 - 1, 1), item3: 1504277, item4: new Date(1950, 1 - 1, 1), item5: 1970358 }, { item1: "New York", item2: new Date(1940, 1 - 1, 1), item3: 7454995, item4: new Date(1950, 1 - 1, 1), item5: 7891957 }, { item1: "Chicago", item2: new Date(1940, 1 - 1, 1), item3: 3396808, item4: new Date(1950, 1 - 1, 1), item5: 3620962 }, { item1: "Detroit", item2: new Date(1940, 1 - 1, 1), item3: 1623452, item4: new Date(1950, 1 - 1, 1), item5: 1849568 }];
    
            // Display header
            var header = System.String.format("{0,-12}{1,8}{2,12}{1,8}{2,12}{3,14}", "City", "Year", "Population", "Change (%)");
            Bridge.Test.Assert.areEqual("City            Year  Population    Year  Population    Change (%)", header);
    
            var output = System.String.format("{0,-12}{1,8:yyyy}{2,12:N0}{3,8:yyyy}{4,12:N0}{5,14:P1}", cities[0].item1, cities[0].item2, cities[0].item3, cities[0].item4, cities[0].item5, (((cities[0].item5 - cities[0].item3) | 0)) / cities[0].item3);
            Bridge.Test.Assert.areEqual("Los Angeles     1940   1,504,277    1950   1,970,358        31.0 %", output);
    
            output = System.String.format("{0,-12}{1,8:yyyy}{2,12:N0}{3,8:yyyy}{4,12:N0}{5,14:P1}", cities[1].item1, cities[1].item2, cities[1].item3, cities[1].item4, cities[1].item5, (((cities[1].item5 - cities[1].item3) | 0)) / cities[1].item3);
            Bridge.Test.Assert.areEqual("New York        1940   7,454,995    1950   7,891,957         5.9 %", output);
    
            output = System.String.format("{0,-12}{1,8:yyyy}{2,12:N0}{3,8:yyyy}{4,12:N0}{5,14:P1}", cities[2].item1, cities[2].item2, cities[2].item3, cities[2].item4, cities[2].item5, (((cities[2].item5 - cities[2].item3) | 0)) / cities[2].item3);
            Bridge.Test.Assert.areEqual("Chicago         1940   3,396,808    1950   3,620,962         6.6 %", output);
    
            output = System.String.format("{0,-12}{1,8:yyyy}{2,12:N0}{3,8:yyyy}{4,12:N0}{5,14:P1}", cities[3].item1, cities[3].item2, cities[3].item3, cities[3].item4, cities[3].item5, (((cities[3].item5 - cities[3].item3) | 0)) / cities[3].item3);
            Bridge.Test.Assert.areEqual("Detroit         1940   1,623,452    1950   1,849,568        13.9 %", output);
        },
        padIntegerWithLeadingZeros: function () {
            var byteValue = 254;
            var shortValue = 10342;
            var intValue = 1023983;
            var lngValue = System.Int64(6985321);
            var ulngValue = System.UInt64.MaxValue;
    
            Bridge.Test.Assert.areEqual("              00000254               000000FE", System.String.format("{0,22} {1,22}", System.Byte.format(byteValue, "D8"), System.Byte.format(byteValue, "X8")));
            Bridge.Test.Assert.areEqual("              00010342               00002866", System.String.format("{0,22} {1,22}", System.Int16.format(shortValue, "D8"), System.Int16.format(shortValue, "X8")));
            Bridge.Test.Assert.areEqual("              01023983               000F9FEF", System.String.format("{0,22} {1,22}", System.Int32.format(intValue, "D8"), System.Int32.format(intValue, "X8")));
            Bridge.Test.Assert.areEqual("              06985321               006A9669", System.String.format("{0,22} {1,22}", lngValue.toString("D8"), lngValue.toString("X8")));
            Bridge.Test.Assert.areEqual("  18446744073709551615       FFFFFFFFFFFFFFFF", System.String.format("{0,22} {1,22}", ulngValue.toString("D8"), ulngValue.toString("X8")));
            Bridge.Test.Assert.areEqual("              00000254               000000FE", System.String.format("{0,22:D8} {0,22:X8}", byteValue));
            Bridge.Test.Assert.areEqual("              00010342               00002866", System.String.format("{0,22:D8} {0,22:X8}", shortValue));
            Bridge.Test.Assert.areEqual("              01023983               000F9FEF", System.String.format("{0,22:D8} {0,22:X8}", intValue));
            Bridge.Test.Assert.areEqual("              06985321               006A9669", System.String.format("{0,22:D8} {0,22:X8}", lngValue));
            Bridge.Test.Assert.areEqual("  18446744073709551615       FFFFFFFFFFFFFFFF", System.String.format("{0,22:D8} {0,22:X8}", ulngValue));
        },
        padIntegerWithSpecificNumberLeadingZeros: function () {
            var value = 160934;
            var decimalLength = (System.Int32.format(value, "D").length + 5) | 0;
            var hexLength = (System.Int32.format(value, "X").length + 5) | 0;
            Bridge.Test.Assert.areEqual("00000160934", System.String.format(System.Int32.format(value, "D" + decimalLength.toString()), null));
            Bridge.Test.Assert.areEqual("00000274A6", System.String.format(System.Int32.format(value, "X" + hexLength.toString()), null));
        },
        padNumericWithLeadingZerosToLength: function () {
            var fmt = "00000000.##";
            var intValue = 1053240;
            var decValue = System.Decimal(103932.52);
            var dblValue = 9034521202.9321747;
    
            // Display the numbers using composite formatting.
            var formatString = " {0,15:" + fmt + "}";
            Bridge.Test.Assert.areEqual("        01053240", System.String.format(formatString, intValue));
            Bridge.Test.Assert.areEqual("     00103932.52", System.String.format(formatString, decValue));
            Bridge.Test.Assert.areEqual("   9034521202.93", System.String.format(formatString, dblValue));
        },
        padNumericWithSpecificNumberOfLeadingZeros: function () {
            var $t;
            var dblValues = [9034521202.9321747, System.Int64.toNumber(System.Int64([444586610,2]))];
            var result = ["  000009034521202.93", "          9034521202"];
            var i = 0;
            $t = Bridge.getEnumerator(dblValues);
            while ($t.moveNext()) {
                var dblValue = $t.getCurrent();
                var decSeparator = System.Globalization.NumberFormatInfo.currentInfo.numberDecimalSeparator;
                var fmt, formatString;
    
                if (System.String.contains(System.Double.format(dblValue, 'G'),decSeparator)) {
                    var digits = System.String.indexOf(System.Double.format(dblValue, 'G'), decSeparator);
                    fmt = System.String.fromCharCount(48, 5) + System.String.fromCharCount(35, digits) + ".##";
                }
                else  {
                    fmt = System.String.fromCharCount(48, System.Double.format(dblValue, 'G').length);
                }
                formatString = "{0,20:" + fmt + "}";
    
                Bridge.Test.Assert.areEqual(result[Bridge.identity(i, (i = (i + 1) | 0))], System.String.format(formatString, dblValue));
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.GuidTests', {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual(Bridge.getTypeName(System.Guid), "System.Guid");
    
            var o = System.Guid.empty;
            Bridge.Test.Assert.true(Bridge.is(o, System.Guid));
            Bridge.Test.Assert.true(Bridge.is(o, System.IComparable$1(System.Guid)));
            Bridge.Test.Assert.true(Bridge.is(o, System.IEquatable$1(System.Guid)));
    
            Bridge.Test.Assert.false(Bridge.is(1, System.Guid));
            Bridge.Test.Assert.false(Bridge.is("abcd", System.Guid));
            Bridge.Test.Assert.false(Bridge.is("{00000000-0000-0000-0000-000000000000}", System.Guid));
        },
        defaultValueWorks: function () {
            var result = Bridge.getDefaultValue(System.Guid);
            Bridge.Test.Assert.true(Bridge.is(result, System.Guid));
            Bridge.Test.Assert.areEqual(result.toString(), "00000000-0000-0000-0000-000000000000");
        },
        createInstanceWorks: function () {
            var result = Bridge.createInstance(System.Guid);
            Bridge.Test.Assert.true(Bridge.is(result, System.Guid));
            Bridge.Test.Assert.areEqual(result.toString(), "00000000-0000-0000-0000-000000000000");
        },
        defaultConstructorWorks: function () {
            var result = System.Guid.empty;
            Bridge.Test.Assert.true(Bridge.is(result, System.Guid));
            Bridge.Test.Assert.areEqual(result.toString(), "00000000-0000-0000-0000-000000000000");
        },
        emptyWorks: function () {
            Bridge.Test.Assert.areEqual(System.Guid.empty.toString(), "00000000-0000-0000-0000-000000000000");
        },
        toStringWithoutArgumentsWorks: function () {
            var guid = System.Guid.parse("223310CC-1F48-4489-B87E-88C779C77CB3");
            Bridge.Test.Assert.areEqual(guid.toString(), "223310cc-1f48-4489-b87e-88c779c77cb3");
        },
        byteArrayConstructorWorks: function () {
            var g = System.Guid.fromBytes([120, 149, 98, 168, 38, 122, 69, 97, 144, 50, 217, 26, 61, 84, 189, 104]);
            Bridge.Test.Assert.true$1(Bridge.is(g, System.Guid), "Should be Guid");
            Bridge.Test.Assert.areEqual$1(g.toString(), "789562a8-267a-4561-9032-d91a3d54bd68", "value");
            Bridge.Test.Assert.throws$4($_.Bridge.ClientTest.GuidTests.f1, System.ArgumentException, "Invalid array should throw");
        },
        int32Int16Int16ByteArrayConstructorWorks: function () {
            var g = System.Guid.fromBytes([(2023056040 >> 24) & 0xff, (2023056040 >> 16) & 0xff, (2023056040 >> 8) & 0xff, 2023056040 & 0xff, (9850 >> 8) & 0xff, 9850 & 0xff, (17761 >> 8) & 0xff, 17761 & 0xff].concat([144, 50, 217, 26, 61, 84, 189, 104]));
            Bridge.Test.Assert.true$1(Bridge.is(g, System.Guid), "Should be Guid");
            Bridge.Test.Assert.areEqual$1(g.toString(), "789562a8-267a-4561-9032-d91a3d54bd68", "value");
        },
        int32Int16Int16BytesConstructorWorks: function () {
            var g = System.Guid.fromBytes([(2023056040 >> 24) & 0xff, (2023056040 >> 16) & 0xff, (2023056040 >> 8) & 0xff, 2023056040 & 0xff, (9850 >> 8) & 0xff, 9850 & 0xff, (17761 >> 8) & 0xff, 17761 & 0xff, 144 & 0xff, 50 & 0xff, 217 & 0xff, 26 & 0xff, 61 & 0xff, 84 & 0xff, 189 & 0xff, 104 & 0xff]);
            Bridge.Test.Assert.true$1(Bridge.is(g, System.Guid), "Should be Guid");
            Bridge.Test.Assert.areEqual$1(g.toString(), "789562a8-267a-4561-9032-d91a3d54bd68", "value");
        },
        uInt32UInt16UInt16BytesConstructorWorks: function () {
            var g = System.Guid.fromBytes([(2023056040 >> 24) & 0xff, (2023056040 >> 16) & 0xff, (2023056040 >> 8) & 0xff, 2023056040 & 0xff, (9850 >> 8) & 0xff, 9850 & 0xff, (17761 >> 8) & 0xff, 17761 & 0xff, 144 & 0xff, 50 & 0xff, 217 & 0xff, 26 & 0xff, 61 & 0xff, 84 & 0xff, 189 & 0xff, 104 & 0xff]);
            Bridge.Test.Assert.true$1(Bridge.is(g, System.Guid), "Should be Guid");
            Bridge.Test.Assert.areEqual$1(g.toString(), "789562a8-267a-4561-9032-d91a3d54bd68", "value");
        },
        stringConstructorWorks: function () {
            var g1 = System.Guid.parse("A6993C0A-A8CB-45D9-994B-90E7203E4FC6");
            var g2 = System.Guid.parse("{A6993C0A-A8CB-45D9-994B-90E7203E4FC6}");
            var g3 = System.Guid.parse("(A6993C0A-A8CB-45D9-994B-90E7203E4FC6)");
            var g4 = System.Guid.parse("A6993C0AA8CB45D9994B90E7203E4FC6");
            Bridge.Test.Assert.true(Bridge.is(g1, System.Guid));
            Bridge.Test.Assert.true(Bridge.is(g2, System.Guid));
            Bridge.Test.Assert.true(Bridge.is(g3, System.Guid));
            Bridge.Test.Assert.true(Bridge.is(g4, System.Guid));
            Bridge.Test.Assert.areEqual$1(g1.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g1");
            Bridge.Test.Assert.areEqual$1(g2.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g2");
            Bridge.Test.Assert.areEqual$1(g3.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g3");
            Bridge.Test.Assert.areEqual$1(g4.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g4");
            Bridge.Test.Assert.throws$4($_.Bridge.ClientTest.GuidTests.f2, System.FormatException, "Invalid should throw");
        },
        parseWorks: function () {
            var g1 = System.Guid.parse("A6993C0A-A8CB-45D9-994B-90E7203E4FC6");
            var g2 = System.Guid.parse("{A6993C0A-A8CB-45D9-994B-90E7203E4FC6}");
            var g3 = System.Guid.parse("(A6993C0A-A8CB-45D9-994B-90E7203E4FC6)");
            var g4 = System.Guid.parse("A6993C0AA8CB45D9994B90E7203E4FC6");
            Bridge.Test.Assert.true(Bridge.is(g1, System.Guid));
            Bridge.Test.Assert.true(Bridge.is(g2, System.Guid));
            Bridge.Test.Assert.true(Bridge.is(g3, System.Guid));
            Bridge.Test.Assert.true(Bridge.is(g4, System.Guid));
            Bridge.Test.Assert.areEqual$1(g1.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g1");
            Bridge.Test.Assert.areEqual$1(g2.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g2");
            Bridge.Test.Assert.areEqual$1(g3.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g3");
            Bridge.Test.Assert.areEqual$1(g4.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g4");
            Bridge.Test.Assert.throws$4($_.Bridge.ClientTest.GuidTests.f2, System.FormatException, "Invalid should throw");
        },
        parseExactWorks: function () {
            var g1 = System.Guid.parse("A6993C0A-A8CB-45D9-994B-90E7203E4FC6", "D");
            var g2 = System.Guid.parse("{A6993C0A-A8CB-45D9-994B-90E7203E4FC6}", "B");
            var g3 = System.Guid.parse("(A6993C0A-A8CB-45D9-994B-90E7203E4FC6)", "P");
            var g4 = System.Guid.parse("A6993C0AA8CB45D9994B90E7203E4FC6", "N");
            Bridge.Test.Assert.true(Bridge.is(g1, System.Guid));
            Bridge.Test.Assert.true(Bridge.is(g2, System.Guid));
            Bridge.Test.Assert.true(Bridge.is(g3, System.Guid));
            Bridge.Test.Assert.true(Bridge.is(g4, System.Guid));
            Bridge.Test.Assert.areEqual$1(g1.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g1");
            Bridge.Test.Assert.areEqual$1(g2.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g2");
            Bridge.Test.Assert.areEqual$1(g3.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g3");
            Bridge.Test.Assert.areEqual$1(g4.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g4");
            Bridge.Test.Assert.throws$4($_.Bridge.ClientTest.GuidTests.f3, System.FormatException, "Invalid B should throw");
            Bridge.Test.Assert.throws$4($_.Bridge.ClientTest.GuidTests.f4, System.FormatException, "Invalid P should throw");
            Bridge.Test.Assert.throws$4($_.Bridge.ClientTest.GuidTests.f5, System.FormatException, "Invalid N should throw");
            Bridge.Test.Assert.throws$4($_.Bridge.ClientTest.GuidTests.f6, System.FormatException, "Invalid D should throw");
        },
        tryParseWorks: function () {
            var g1 = { }, g2 = { }, g3 = { }, g4 = { }, g5 = { };
            Bridge.Test.Assert.true$1(System.Guid.tryParse("A6993C0A-A8CB-45D9-994B-90E7203E4FC6", null, g1), "g1 result");
            Bridge.Test.Assert.true$1(System.Guid.tryParse("{A6993C0A-A8CB-45D9-994B-90E7203E4FC6}", null, g2), "g2 result");
            Bridge.Test.Assert.true$1(System.Guid.tryParse("(A6993C0A-A8CB-45D9-994B-90E7203E4FC6)", null, g3), "g3 result");
            Bridge.Test.Assert.true$1(System.Guid.tryParse("A6993C0AA8CB45D9994B90E7203E4FC6", null, g4), "g4 result");
            Bridge.Test.Assert.false$1(System.Guid.tryParse("x", null, g5), "Invalid should throw");
            Bridge.Test.Assert.true$1(Bridge.is(g1.v, System.Guid), "g1 is Guid");
            Bridge.Test.Assert.true$1(Bridge.is(g2.v, System.Guid), "g2 is Guid");
            Bridge.Test.Assert.true$1(Bridge.is(g3.v, System.Guid), "g3 is Guid");
            Bridge.Test.Assert.true$1(Bridge.is(g4.v, System.Guid), "g4 is Guid");
            Bridge.Test.Assert.true$1(Bridge.is(g5.v, System.Guid), "g5 is Guid");
            Bridge.Test.Assert.areEqual$1(g1.v.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g1");
            Bridge.Test.Assert.areEqual$1(g2.v.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g2");
            Bridge.Test.Assert.areEqual$1(g3.v.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g3");
            Bridge.Test.Assert.areEqual$1(g4.v.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g4");
            Bridge.Test.Assert.areEqual$1(g5.v.toString(), "00000000-0000-0000-0000-000000000000", "g5");
        },
        tryParseExactWorks: function () {
            var g1 = { }, g2 = { }, g3 = { }, g4 = { }, g5 = { }, g6 = { }, g7 = { }, g8 = { };
            Bridge.Test.Assert.true$1(System.Guid.tryParse("A6993C0A-A8CB-45D9-994B-90E7203E4FC6", "D", g1), "g1 result");
            Bridge.Test.Assert.true$1(System.Guid.tryParse("{A6993C0A-A8CB-45D9-994B-90E7203E4FC6}", "B", g2), "g2 result");
            Bridge.Test.Assert.true$1(System.Guid.tryParse("(A6993C0A-A8CB-45D9-994B-90E7203E4FC6)", "P", g3), "g3 result");
            Bridge.Test.Assert.true$1(System.Guid.tryParse("A6993C0AA8CB45D9994B90E7203E4FC6", "N", g4), "g4 result");
            Bridge.Test.Assert.false$1(System.Guid.tryParse("A6993C0A-A8CB-45D9-994B-90E7203E4FC6", "B", g5), "g5 result");
            Bridge.Test.Assert.false$1(System.Guid.tryParse("A6993C0A-A8CB-45D9-994B-90E7203E4FC6", "P", g6), "g6 result");
            Bridge.Test.Assert.false$1(System.Guid.tryParse("A6993C0A-A8CB-45D9-994B-90E7203E4FC6", "N", g7), "g7 result");
            Bridge.Test.Assert.false$1(System.Guid.tryParse("A6993C0AA8CB45D9994B90E7203E4FC6", "D", g8), "g8 result");
            Bridge.Test.Assert.true(Bridge.is(g1.v, System.Guid));
            Bridge.Test.Assert.true(Bridge.is(g2.v, System.Guid));
            Bridge.Test.Assert.true(Bridge.is(g3.v, System.Guid));
            Bridge.Test.Assert.true(Bridge.is(g4.v, System.Guid));
            Bridge.Test.Assert.true(Bridge.is(g5.v, System.Guid));
            Bridge.Test.Assert.true(Bridge.is(g6.v, System.Guid));
            Bridge.Test.Assert.true(Bridge.is(g7.v, System.Guid));
            Bridge.Test.Assert.true(Bridge.is(g8.v, System.Guid));
            Bridge.Test.Assert.areEqual$1(g1.v.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g1");
            Bridge.Test.Assert.areEqual$1(g2.v.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g2");
            Bridge.Test.Assert.areEqual$1(g3.v.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g3");
            Bridge.Test.Assert.areEqual$1(g4.v.toString(), "a6993c0a-a8cb-45d9-994b-90e7203e4fc6", "g4");
            Bridge.Test.Assert.areEqual$1(g5.v.toString(), "00000000-0000-0000-0000-000000000000", "g5");
            Bridge.Test.Assert.areEqual$1(g6.v.toString(), "00000000-0000-0000-0000-000000000000", "g6");
            Bridge.Test.Assert.areEqual$1(g7.v.toString(), "00000000-0000-0000-0000-000000000000", "g7");
            Bridge.Test.Assert.areEqual$1(g8.v.toString(), "00000000-0000-0000-0000-000000000000", "g8");
        },
        compareToWorks: function () {
            var g = System.Guid.parse("F3D8B3C0-88F0-4148-844C-232ED03C153C");
            Bridge.Test.Assert.areEqual$1(Bridge.compare(g, System.Guid.parse("F3D8B3C0-88F0-4148-844C-232ED03C153C")), 0, "equal");
            Bridge.Test.Assert.areNotEqual$1(Bridge.compare(g, System.Guid.parse("E4C221BE-9B39-4398-B82A-48BA4648CAE0")), 0, "not equal");
        },
        iComparableCompareToWorks: function () {
            var g = Bridge.cast(System.Guid.parse("F3D8B3C0-88F0-4148-844C-232ED03C153C"), System.IComparable$1(System.Guid));
            Bridge.Test.Assert.areEqual$1(Bridge.compare(g, System.Guid.parse("F3D8B3C0-88F0-4148-844C-232ED03C153C")), 0, "Equal");
            Bridge.Test.Assert.areNotEqual$1(Bridge.compare(g, System.Guid.parse("E4C221BE-9B39-4398-B82A-48BA4648CAE0")), 0, "Not equal");
        },
        equalsObjectWorks: function () {
            var g = System.Guid.parse("F3D8B3C0-88F0-4148-844C-232ED03C153C");
            Bridge.Test.Assert.true$1(Bridge.equals(g, System.Guid.parse("F3D8B3C0-88F0-4148-844C-232ED03C153C")), "Equal");
            Bridge.Test.Assert.false$1(Bridge.equals(g, System.Guid.parse("E4C221BE-9B39-4398-B82A-48BA4648CAE0")), "Not equal");
            Bridge.Test.Assert.false$1(Bridge.equals(g, "X"), "Not equal");
        },
        equalsGuidWorks: function () {
            var g = System.Guid.parse("F3D8B3C0-88F0-4148-844C-232ED03C153C");
            Bridge.Test.Assert.true$1(Bridge.equalsT(g, System.Guid.parse("F3D8B3C0-88F0-4148-844C-232ED03C153C")), "Equal");
            Bridge.Test.Assert.false$1(Bridge.equalsT(g, System.Guid.parse("E4C221BE-9B39-4398-B82A-48BA4648CAE0")), "Not equal");
        },
        iEquatableEqualsWorks: function () {
            var g = Bridge.cast(System.Guid.parse("F3D8B3C0-88F0-4148-844C-232ED03C153C"), System.IEquatable$1(System.Guid));
            Bridge.Test.Assert.true$1(Bridge.equalsT(g, System.Guid.parse("F3D8B3C0-88F0-4148-844C-232ED03C153C")), "Equal");
            Bridge.Test.Assert.false$1(Bridge.equalsT(g, System.Guid.parse("E4C221BE-9B39-4398-B82A-48BA4648CAE0")), "Not equal");
        },
        getHashCodeWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.getHashCode(System.Guid.parse("F3D8B3C0-88F0-4148-844C-232ED03C153C")), Bridge.getHashCode(System.Guid.parse("f3d8b3c0-88f0-4148-844c-232ed03c153c")));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode(System.Guid.parse("F3D8B3C0-88F0-4148-844C-232ED03C153C")), Bridge.getHashCode(System.Guid.parse("F3D8B3C0-88F0-4148-844C-232ED03C153D")));
        },
        equalityOperatorWorks: function () {
            Bridge.Test.Assert.true$1(System.Guid.parse("D311FC20-D7B6-40B6-88DB-9CD92AED6628") === System.Guid.parse("D311FC20-D7B6-40B6-88DB-9CD92AED6628"), "Equal");
            Bridge.Test.Assert.false$1(System.Guid.parse("D311FC20-D7B6-40B6-88DB-9CD92AED6628") === System.Guid.parse("A317804C-A583-4857-804F-A0D276008C82"), "Not equal");
        },
        inequalityOperatorWorks: function () {
            Bridge.Test.Assert.false$1(System.Guid.parse("D311FC20-D7B6-40B6-88DB-9CD92AED6628") !== System.Guid.parse("D311FC20-D7B6-40B6-88DB-9CD92AED6628"), "Equal");
            Bridge.Test.Assert.true$1(System.Guid.parse("D311FC20-D7B6-40B6-88DB-9CD92AED6628") !== System.Guid.parse("A317804C-A583-4857-804F-A0D276008C82"), "Not equal");
        },
        toStringWithFormatWorks: function () {
            var g = System.Guid.parse("DE33AC65-09CB-465C-AD7E-53124B2104E8");
            Bridge.Test.Assert.areEqual$1(System.Guid.format(g, "N"), "de33ac6509cb465cad7e53124b2104e8", "N");
            Bridge.Test.Assert.areEqual$1(System.Guid.format(g, "D"), "de33ac65-09cb-465c-ad7e-53124b2104e8", "D");
            Bridge.Test.Assert.areEqual$1(System.Guid.format(g, "B"), "{de33ac65-09cb-465c-ad7e-53124b2104e8}", "B");
            Bridge.Test.Assert.areEqual$1(System.Guid.format(g, "P"), "(de33ac65-09cb-465c-ad7e-53124b2104e8)", "P");
            Bridge.Test.Assert.areEqual$1(System.Guid.format(g, ""), "de33ac65-09cb-465c-ad7e-53124b2104e8", "empty");
            Bridge.Test.Assert.areEqual$1(System.Guid.format(g, null), "de33ac65-09cb-465c-ad7e-53124b2104e8", "null");
        },
        newGuidWorks: function () {
            var d = new System.Collections.Generic.Dictionary$2(String,Object)();
            for (var i = 0; i < 1000; i = (i + 1) | 0) {
                var g = System.Guid.newGuid();
                Bridge.Test.Assert.true$1(Bridge.is(g, System.Guid), "Generated Guid should be Guid");
                var s = System.Guid.format(g, "N");
                Bridge.Test.Assert.true$1(s.charCodeAt(16) === 56 || s.charCodeAt(16) === 57 || s.charCodeAt(16) === 97 || s.charCodeAt(16) === 98, "Should be standard guid");
                Bridge.Test.Assert.true$1(s.charCodeAt(12) === 52, "Should be type 4 guid");
                d.set(s, null);
            }
            Bridge.Test.Assert.areEqual$1(d.getCount(), 1000, "No duplicates should have been generated");
        },
        toByteArrayWorks: function () {
            var g = System.Guid.parse("8440F854-0C0B-4355-9722-1608D62E8F87");
            Bridge.Test.Assert.areEqual(System.Guid.getBytes(g), [132, 64, 248, 84, 12, 11, 67, 85, 151, 34, 22, 8, 214, 46, 143, 135]);
        }
    });
    
    Bridge.ns("Bridge.ClientTest.GuidTests", $_);
    
    Bridge.apply($_.Bridge.ClientTest.GuidTests, {
        f1: function () {
            System.Guid.fromBytes([120, 149, 98, 168, 38, 122]);
        },
        f2: function () {
            System.Guid.parse("x");
        },
        f3: function () {
            System.Guid.parse("A6993C0A-A8CB-45D9-994B-90E7203E4FC6", "B");
        },
        f4: function () {
            System.Guid.parse("A6993C0A-A8CB-45D9-994B-90E7203E4FC6", "P");
        },
        f5: function () {
            System.Guid.parse("A6993C0A-A8CB-45D9-994B-90E7203E4FC6", "N");
        },
        f6: function () {
            System.Guid.parse("A6993C0AA8CB45D9994B90E7203E4FC6", "D");
        }
    });
    
    Bridge.define('Bridge.ClientTest.IComparableTests', {
        callingMethodThroughIComparableInterfaceInvokesImplementingMethod: function () {
            var a = new Bridge.ClientTest.IComparableTests.MyComparable(), b = new Bridge.ClientTest.IComparableTests.MyComparable();
            a.result = 534;
            Bridge.Test.Assert.areEqual(534, Bridge.compare(Bridge.cast(a, System.IComparable$1(Bridge.ClientTest.IComparableTests.MyComparable)), b));
            Bridge.Test.Assert.areStrictEqual(b, a.other);
    
            a.result = -42;
            Bridge.Test.Assert.areEqual(-42, Bridge.compare(Bridge.cast(a, System.IComparable$1(Bridge.ClientTest.IComparableTests.MyComparable)), null));
            Bridge.Test.Assert.areStrictEqual(null, a.other);
    
            a.result = -534;
            Bridge.Test.Assert.areEqual(-534, a.compareTo(b));
            Bridge.Test.Assert.areStrictEqual(b, a.other);
    
            a.result = 42;
            Bridge.Test.Assert.areEqual(42, a.compareTo(null));
            Bridge.Test.Assert.areStrictEqual(null, a.other);
        }
    });
    
    Bridge.define('Bridge.ClientTest.IComparableTests.MyComparable', {
        inherits: function () { return [System.IComparable$1(Bridge.ClientTest.IComparableTests.MyComparable)]; },
        result: 0,
        other: null,
        compareTo: function (other) {
            this.other = other;
            return this.result;
        }
    });
    
    Bridge.define('Bridge.ClientTest.IEquatableTests', {
        callingMethodThroughIComparableInterfaceInvokesImplementingMethod: function () {
            var a = new Bridge.ClientTest.IEquatableTests.MyEquatable(), b = new Bridge.ClientTest.IEquatableTests.MyEquatable();
            a.result = true;
            Bridge.Test.Assert.true(Bridge.equalsT(Bridge.cast(a, System.IEquatable$1(Bridge.ClientTest.IEquatableTests.MyEquatable)), b));
            Bridge.Test.Assert.areStrictEqual(b, a.other);
            a.result = false;
            Bridge.Test.Assert.false(Bridge.equalsT(Bridge.cast(a, System.IEquatable$1(Bridge.ClientTest.IEquatableTests.MyEquatable)), b));
    
            a.result = true;
            Bridge.Test.Assert.true(Bridge.equalsT(Bridge.cast(a, System.IEquatable$1(Bridge.ClientTest.IEquatableTests.MyEquatable)), null));
            Bridge.Test.Assert.areStrictEqual(null, a.other);
            a.result = false;
            Bridge.Test.Assert.false(Bridge.equalsT(Bridge.cast(a, System.IEquatable$1(Bridge.ClientTest.IEquatableTests.MyEquatable)), null));
    
            a.result = true;
            Bridge.Test.Assert.true(a.equalsT(b));
            Bridge.Test.Assert.areStrictEqual(b, a.other);
            a.result = false;
            Bridge.Test.Assert.false(a.equalsT(b));
    
            a.result = true;
            Bridge.Test.Assert.true(a.equalsT(null));
            Bridge.Test.Assert.areStrictEqual(null, a.other);
            a.result = false;
            Bridge.Test.Assert.false(a.equalsT(null));
        }
    });
    
    Bridge.define('Bridge.ClientTest.IEquatableTests.MyEquatable', {
        inherits: function () { return [System.IEquatable$1(Bridge.ClientTest.IEquatableTests.MyEquatable)]; },
        result: false,
        other: null,
        equalsT: function (other) {
            this.other = other;
            return this.result;
        }
    });
    
    Bridge.define('Bridge.ClientTest.Linq.AnagramEqualityComparer', {
        inherits: [System.Collections.Generic.EqualityComparer$1(String)],
        equals2: function (x, y) {
            return Bridge.referenceEquals(this.getCanonicalString(x), this.getCanonicalString(y));
        },
        getHashCode2: function (obj) {
            return Bridge.getHashCode(this.getCanonicalString(obj));
        },
        getCanonicalString: function (word) {
            if (word == null) {
                return null;
            }
    
            var wordChars = System.String.toCharArray(word, 0, word.length);
            wordChars.sort();
    
            return String.fromCharCode.apply(null, wordChars);
        }
    });
    
    Bridge.define('Bridge.ClientTest.Linq.TestLinqAggregateOperators', {
        statics: {
            test: function () {
                var numbers = [2, 2, 3, 5, 5, -1, 2, -1];
                var words = ["one", "two", "three"];
                var doubles = [1.7, 2.3, 1.9, 4.1, 2.9];
    
                // TEST
                var uniqueNumbers = System.Linq.Enumerable.from(numbers).distinct().count();
                Bridge.Test.Assert.areEqual$1(4, uniqueNumbers, "Count() distinct numbers");
    
                // TEST
                var oddNumbers = System.Linq.Enumerable.from(numbers).count($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f1);
                Bridge.Test.Assert.areEqual$1(3, oddNumbers, "Count() odd numbers");
    
                // TEST
                var groupJoin = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Group.getGroups()).groupJoin(Bridge.ClientTest.Utilities.Person.getPersons(), $_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f2, $_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f3, $_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f4)).toArray();
    
                var groupJoinExpected = [new $_.$AnonymousType$17("A", 1), new $_.$AnonymousType$17("B", 4), new $_.$AnonymousType$17("C", 2), new $_.$AnonymousType$17("D", 0)];
    
                Bridge.Test.Assert.areDeepEqual$1(groupJoinExpected, groupJoin, "Count() within joint collections");
    
                // TEST
                var grouped = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).groupBy($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f3).select($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f5)).toArray();
    
                var groupedExpected = [new $_.$AnonymousType$17("A", 1), new $_.$AnonymousType$17("C", 2), new $_.$AnonymousType$17("B", 4), new $_.$AnonymousType$17(Bridge.cast(null, String), 1)];
    
                Bridge.Test.Assert.areDeepEqual$1(groupedExpected, grouped, "Count() within group");
    
                // TEST
                var numSum = System.Linq.Enumerable.from(numbers).sum();
                Bridge.Test.Assert.areEqual$1(17, numSum, "Sum() numbers");
    
                // TEST
                var totalChars = System.Linq.Enumerable.from(words).sum($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f6);
                Bridge.Test.Assert.areEqual$1(11, totalChars, "Sum() total chars");
    
                // TEST
                var groupedSum = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).groupBy($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f3).select($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f8)).toArray();
    
                var groupedSumExpected = [new $_.$AnonymousType$18("A", 300), new $_.$AnonymousType$18("C", 600), new $_.$AnonymousType$18("B", 2000), new $_.$AnonymousType$18(Bridge.cast(null, String), 3000)];
    
                Bridge.Test.Assert.areDeepEqual$1(groupedSumExpected, groupedSum, "Sum() within group");
    
                // TEST
                var minNum = System.Linq.Enumerable.from(numbers).min();
                Bridge.Test.Assert.areEqual$1(-1, minNum, "Min() number");
    
                // TEST
                var shortestWordLength = System.Linq.Enumerable.from(words).min($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f6);
                Bridge.Test.Assert.areEqual$1(3, shortestWordLength, "Min() for shortest word");
    
                // TEST
                var groupedMin = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).groupBy($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f3).select($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f9)).toArray();
    
                var groupedMinExpected = [new $_.$AnonymousType$19("A", 300), new $_.$AnonymousType$19("C", 100), new $_.$AnonymousType$19("B", 50), new $_.$AnonymousType$19(Bridge.cast(null, String), 3000)];
    
                Bridge.Test.Assert.areDeepEqual$1(groupedMinExpected, groupedMin, "Min() within group");
    
                // TEST
                var groupedMinWithLet = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).groupBy($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f3).select($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f10).select($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f12)).toArray();
    
                var groupedMinWithLetExpected = [new $_.$AnonymousType$21("A", ["Frank"]), new $_.$AnonymousType$21("C", ["Zeppa"]), new $_.$AnonymousType$21("B", ["Dora"]), new $_.$AnonymousType$21(Bridge.cast(null, String), ["Nemo"])];
    
                Bridge.Test.Assert.areDeepEqual$1(groupedMinWithLetExpected, groupedMinWithLet, "Min() within group with let");
    
                // TEST
                var maxNum = System.Linq.Enumerable.from(numbers).max();
                Bridge.Test.Assert.areEqual$1(5, maxNum, "Max() number");
    
                // TEST
                var longestWordLength = System.Linq.Enumerable.from(words).max($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f6);
                Bridge.Test.Assert.areEqual$1(5, longestWordLength, "Max() for longest word");
    
                // TEST
                var groupedMax = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).groupBy($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f3).select($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f13)).toArray();
    
                var groupedMaxExpected = [new $_.$AnonymousType$22("A", 300), new $_.$AnonymousType$22("C", 500), new $_.$AnonymousType$22("B", 700), new $_.$AnonymousType$22(Bridge.cast(null, String), 3000)];
    
                Bridge.Test.Assert.areDeepEqual$1(groupedMaxExpected, groupedMax, "Max() within group");
    
                // TEST
                var groupedMaxWithLet = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).groupBy($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f3).select($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f14).select($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f15)).toArray();
    
                var groupedMaxWithLetExpected = [new $_.$AnonymousType$21("A", ["Frank"]), new $_.$AnonymousType$21("C", ["Billy"]), new $_.$AnonymousType$21("B", ["John", "Mary"]), new $_.$AnonymousType$21(Bridge.cast(null, String), ["Nemo"])];
    
                Bridge.Test.Assert.areDeepEqual$1(groupedMaxWithLetExpected, groupedMaxWithLet, "Max() within group with let");
    
                // TEST
                var averageNum = System.Linq.Enumerable.from(numbers).average();
                Bridge.Test.Assert.areEqual$1(2.125, averageNum, "Average() number");
    
                // TEST
                var averageWordLengths = ["1", "22", "333", "4444", "55555"];
                var averageWordLength = System.Linq.Enumerable.from(averageWordLengths).average($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f6);
                Bridge.Test.Assert.areEqual$1(3, averageWordLength, "Average() for word lengths");
    
                // TEST
                var groupedAverage = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).groupBy($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f3).select($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f16)).toArray();
    
                var groupedAverageExpected = [{ group: "A", average: 300 }, { group: "C", average: 300 }, { group: "B", average: 500 }, { group: Bridge.cast(null, String), average: 3000 }];
    
                Bridge.Test.Assert.areDeepEqual$1(groupedAverageExpected, groupedAverage, "Average() within group");
    
                // TEST
                var doublesForAggregate = [1.0, 2.0, 3.0, 4.0, 5.0];
                var product = System.Linq.Enumerable.from(doublesForAggregate).aggregate($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f17);
                Bridge.Test.Assert.areEqual$1(120, product, "Aggregate() within doubles");
    
                // TEST
                var startBalance = 100.0;
                var attemptedWithdrawals = [20, 10, 40, 50, 10, 70, 30];
    
                var endBalance = System.Linq.Enumerable.from(attemptedWithdrawals).aggregate(startBalance, $_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f18);
    
                Bridge.Test.Assert.areEqual$1(20, endBalance, "Aggregate() balance");
            },
            bridge315: function () {
                var q = System.Linq.Enumerable.from("a,b,c,a".toUpperCase().split(",")).aggregate("", $_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f19);
    
                Bridge.Test.Assert.areStrictEqual$1("A C B A ", q, "Enumerable.Aggregate");
            }
        }
    });
    
    Bridge.define("$AnonymousType$17", $_, {
        constructor: function (group, personCount) {
            this.group = group;
            this.personCount = personCount;
        },
        getGroup : function () {
            return this.group;
        },
        getPersonCount : function () {
            return this.personCount;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$17)) {
                return false;
            }
            return Bridge.equals(this.group, o.group) && Bridge.equals(this.personCount, o.personCount);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 1544035870;
            hash = hash * 23 + (this.group == null ? 0 : Bridge.getHashCode(this.group));
            hash = hash * 23 + (this.personCount == null ? 0 : Bridge.getHashCode(this.personCount));
            return hash;
        },
        toJSON: function () {
            return {
                group : this.group,
                personCount : this.personCount
            };
        }
    });
    
    Bridge.define("$AnonymousType$18", $_, {
        constructor: function (group, sum) {
            this.group = group;
            this.sum = sum;
        },
        getGroup : function () {
            return this.group;
        },
        getSum : function () {
            return this.sum;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$18)) {
                return false;
            }
            return Bridge.equals(this.group, o.group) && Bridge.equals(this.sum, o.sum);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 428290623;
            hash = hash * 23 + (this.group == null ? 0 : Bridge.getHashCode(this.group));
            hash = hash * 23 + (this.sum == null ? 0 : Bridge.getHashCode(this.sum));
            return hash;
        },
        toJSON: function () {
            return {
                group : this.group,
                sum : this.sum
            };
        }
    });
    
    Bridge.define("$AnonymousType$19", $_, {
        constructor: function (group, min) {
            this.group = group;
            this.min = min;
        },
        getGroup : function () {
            return this.group;
        },
        getMin : function () {
            return this.min;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$19)) {
                return false;
            }
            return Bridge.equals(this.group, o.group) && Bridge.equals(this.min, o.min);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 1994374564;
            hash = hash * 23 + (this.group == null ? 0 : Bridge.getHashCode(this.group));
            hash = hash * 23 + (this.min == null ? 0 : Bridge.getHashCode(this.min));
            return hash;
        },
        toJSON: function () {
            return {
                group : this.group,
                min : this.min
            };
        }
    });
    
    Bridge.define("$AnonymousType$20", $_, {
        constructor: function (g, minCount) {
            this.g = g;
            this.minCount = minCount;
        },
        getg : function () {
            return this.g;
        },
        getminCount : function () {
            return this.minCount;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$20)) {
                return false;
            }
            return Bridge.equals(this.g, o.g) && Bridge.equals(this.minCount, o.minCount);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 784520984;
            hash = hash * 23 + (this.g == null ? 0 : Bridge.getHashCode(this.g));
            hash = hash * 23 + (this.minCount == null ? 0 : Bridge.getHashCode(this.minCount));
            return hash;
        },
        toJSON: function () {
            return {
                g : this.g,
                minCount : this.minCount
            };
        }
    });
    
    Bridge.define("$AnonymousType$21", $_, {
        constructor: function (group, name) {
            this.group = group;
            this.name = name;
        },
        getGroup : function () {
            return this.group;
        },
        getName : function () {
            return this.name;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$21)) {
                return false;
            }
            return Bridge.equals(this.group, o.group) && Bridge.equals(this.name, o.name);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + -1944362371;
            hash = hash * 23 + (this.group == null ? 0 : Bridge.getHashCode(this.group));
            hash = hash * 23 + (this.name == null ? 0 : Bridge.getHashCode(this.name));
            return hash;
        },
        toJSON: function () {
            return {
                group : this.group,
                name : this.name
            };
        }
    });
    
    Bridge.define("$AnonymousType$22", $_, {
        constructor: function (group, max) {
            this.group = group;
            this.max = max;
        },
        getGroup : function () {
            return this.group;
        },
        getMax : function () {
            return this.max;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$22)) {
                return false;
            }
            return Bridge.equals(this.group, o.group) && Bridge.equals(this.max, o.max);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 1947320398;
            hash = hash * 23 + (this.group == null ? 0 : Bridge.getHashCode(this.group));
            hash = hash * 23 + (this.max == null ? 0 : Bridge.getHashCode(this.max));
            return hash;
        },
        toJSON: function () {
            return {
                group : this.group,
                max : this.max
            };
        }
    });
    
    Bridge.define("$AnonymousType$23", $_, {
        constructor: function (g, maxCount) {
            this.g = g;
            this.maxCount = maxCount;
        },
        getg : function () {
            return this.g;
        },
        getmaxCount : function () {
            return this.maxCount;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$23)) {
                return false;
            }
            return Bridge.equals(this.g, o.g) && Bridge.equals(this.maxCount, o.maxCount);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + -781562957;
            hash = hash * 23 + (this.g == null ? 0 : Bridge.getHashCode(this.g));
            hash = hash * 23 + (this.maxCount == null ? 0 : Bridge.getHashCode(this.maxCount));
            return hash;
        },
        toJSON: function () {
            return {
                g : this.g,
                maxCount : this.maxCount
            };
        }
    });
    
    Bridge.ns("Bridge.ClientTest.Linq.TestLinqAggregateOperators", $_);
    
    Bridge.apply($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators, {
        f1: function (n) {
            return n % 2 === 1;
        },
        f2: function (g) {
            return g.getName();
        },
        f3: function (p) {
            return p.getGroup();
        },
        f4: function (g, pg) {
            return new $_.$AnonymousType$17(g.getName(), System.Linq.Enumerable.from(pg).count());
        },
        f5: function (g) {
            return new $_.$AnonymousType$17(g.key(), g.count());
        },
        f6: function (w) {
            return w.length;
        },
        f7: function (x) {
            return x.getCount();
        },
        f8: function (g) {
            return new $_.$AnonymousType$18(g.key(), g.sum($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f7));
        },
        f9: function (g) {
            return new $_.$AnonymousType$19(g.key(), g.min($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f7));
        },
        f10: function (g) {
            return new $_.$AnonymousType$20(g, g.min($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f7));
        },
        f11: function (x) {
            return x.getName();
        },
        f12: function (x0) {
            return new $_.$AnonymousType$21(x0.g.key(), x0.g.where(function (x) {
                return x.getCount() === x0.minCount;
            }).select($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f11).toArray());
        },
        f13: function (g) {
            return new $_.$AnonymousType$22(g.key(), g.max($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f7));
        },
        f14: function (g) {
            return new $_.$AnonymousType$23(g, g.max($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f7));
        },
        f15: function (x1) {
            return new $_.$AnonymousType$21(x1.g.key(), x1.g.where(function (x) {
                return x.getCount() === x1.maxCount;
            }).select($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f11).toArray());
        },
        f16: function (g) {
            return { group: g.key(), average: g.average($_.Bridge.ClientTest.Linq.TestLinqAggregateOperators.f7) };
        },
        f17: function (runningProduct, nextFactor) {
            return runningProduct * nextFactor;
        },
        f18: function (balance, nextWithdrawal) {
            return ((nextWithdrawal <= balance) ? (balance - nextWithdrawal) : balance);
        },
        f19: function (workingSentence, next) {
            return next + " " + workingSentence;
        }
    });
    
    Bridge.define('Bridge.ClientTest.Linq.TestLinqConversionOperators', {
        statics: {
            test: function () {
                // TEST
                var doubles = [1.7, 2.3, 1.9, 4.1, 2.9];
    
                var sameDoubles = System.Linq.Enumerable.from(doubles).select($_.Bridge.ClientTest.Linq.TestLinqConversionOperators.f1);
                var doublesArray = sameDoubles.toArray();
    
                Bridge.Test.Assert.true$1(System.String.contains(Bridge.getType(doublesArray).toString(),"function Array()"), "ToArray() conversion for doubles - check type name");
                Bridge.Test.Assert.areDeepEqual$1(doubles, doublesArray, "ToArray() conversion for doubles - check content");
    
                // TEST
                var words = ["1.one", "2.two", "3.three"];
    
                var wordList1 = System.Linq.Enumerable.from((System.Linq.Enumerable.from(words).orderByDescending($_.Bridge.ClientTest.Linq.TestLinqConversionOperators.f2))).toList(String);
                var wordListExpected1 = new System.Collections.Generic.List$1(String)(["3.three", "2.two", "1.one"]);
    
                Bridge.Test.Assert.areEqual$1("System.Collections.Generic.List$1$String", Bridge.ClientTest.Utilities.TypeHelper.getTypeName(wordList1), "ToList() conversion with explicit String type for string - check type name");
                Bridge.Test.Assert.areDeepEqual$1(wordListExpected1, wordList1, "ToList() conversion for strings with explicit String type - check content");
    
                // TEST
                var wordList2 = (System.Linq.Enumerable.from(words).orderByDescending($_.Bridge.ClientTest.Linq.TestLinqConversionOperators.f2)).toList(String);
                var wordListExpected2 = new System.Collections.Generic.List$1(String)(["3.three", "2.two", "1.one"]);
    
                Bridge.Test.Assert.areEqual$1("System.Collections.Generic.List$1$String", Bridge.ClientTest.Utilities.TypeHelper.getTypeName(wordList2), "ToList() conversion for string - check type name");
                Bridge.Test.Assert.areDeepEqual$1(wordListExpected2, wordList2, "ToList() conversion for strings - check content");
    
                // TEST
                var groups = Bridge.ClientTest.Utilities.Group.getGroups();
                var groupDictionary1 = (System.Linq.Enumerable.from(groups).select($_.Bridge.ClientTest.Linq.TestLinqConversionOperators.f3)).toDictionary($_.Bridge.ClientTest.Linq.TestLinqConversionOperators.f4, $_.Bridge.ClientTest.Linq.TestLinqConversionOperators.f3, String, Bridge.ClientTest.Utilities.Group);
                var expectedGroupDictionary1 = new System.Collections.Generic.Dictionary$2(String,Bridge.ClientTest.Utilities.Group)();
    
                expectedGroupDictionary1.add("A", Bridge.merge(new Bridge.ClientTest.Utilities.Group(), {
                    setName: "A",
                    setLimit: 1000
                } ));
                expectedGroupDictionary1.add("B", Bridge.merge(new Bridge.ClientTest.Utilities.Group(), {
                    setName: "B",
                    setLimit: 400
                } ));
                expectedGroupDictionary1.add("C", Bridge.merge(new Bridge.ClientTest.Utilities.Group(), {
                    setName: "C",
                    setLimit: 800
                } ));
                expectedGroupDictionary1.add("D", Bridge.merge(new Bridge.ClientTest.Utilities.Group(), {
                    setName: "D",
                    setLimit: 200
                } ));
                Bridge.Test.Assert.areEqual$1("System.Collections.Generic.Dictionary$2$String$Bridge.ClientTest.Utilities.Group", Bridge.ClientTest.Utilities.TypeHelper.getTypeName(groupDictionary1), "ToDictionary(keySelector, elementSelector) conversion for <string, Group> - check type name");
                Bridge.Test.Assert.areDeepEqual$1(expectedGroupDictionary1, groupDictionary1, "ToDictionary(keySelector, elementSelector) conversion for <string, Group> - check content");
    
                // TEST
                var comparer = new Bridge.ClientTest.Linq.TestLinqConversionOperatorsIEqualityComparer();
                var expectedGroupDictionary2 = new System.Collections.Generic.Dictionary$2(String, Bridge.ClientTest.Utilities.Group)(null, comparer);
    
                expectedGroupDictionary2.add("A", Bridge.merge(new Bridge.ClientTest.Utilities.Group(), {
                    setName: "A",
                    setLimit: 1000
                } ));
                expectedGroupDictionary2.add("B", Bridge.merge(new Bridge.ClientTest.Utilities.Group(), {
                    setName: "B",
                    setLimit: 400
                } ));
                expectedGroupDictionary2.add("C", Bridge.merge(new Bridge.ClientTest.Utilities.Group(), {
                    setName: "C",
                    setLimit: 800
                } ));
                expectedGroupDictionary2.add("D", Bridge.merge(new Bridge.ClientTest.Utilities.Group(), {
                    setName: "D",
                    setLimit: 200
                } ));
    
                var groupDictionary2 = (System.Linq.Enumerable.from(groups).select($_.Bridge.ClientTest.Linq.TestLinqConversionOperators.f3)).toDictionary($_.Bridge.ClientTest.Linq.TestLinqConversionOperators.f4, $_.Bridge.ClientTest.Linq.TestLinqConversionOperators.f3, String, Bridge.ClientTest.Utilities.Group, comparer);
    
                Bridge.Test.Assert.areEqual$1("System.Collections.Generic.Dictionary$2$String$Bridge.ClientTest.Utilities.Group", Bridge.ClientTest.Utilities.TypeHelper.getTypeName(groupDictionary2), "ToDictionary(keySelector, elementSelector, IEqualityComparer) conversion for <string, Group> - check type name");
                Bridge.Test.Assert.areDeepEqual$1(expectedGroupDictionary2, groupDictionary2, "ToDictionary(keySelector, elementSelector, IEqualityComparer) conversion for <string, Group> - check content");
    
                // TEST
                var groupDictionary3 = (System.Linq.Enumerable.from(groups).select($_.Bridge.ClientTest.Linq.TestLinqConversionOperators.f3)).toDictionary($_.Bridge.ClientTest.Linq.TestLinqConversionOperators.f4, null, String, Bridge.ClientTest.Utilities.Group);
    
                Bridge.Test.Assert.areEqual$1("System.Collections.Generic.Dictionary$2$String$Bridge.ClientTest.Utilities.Group", Bridge.ClientTest.Utilities.TypeHelper.getTypeName(groupDictionary3), "ToDictionary(keySelector) conversion for <string, Group> - check type name");
                Bridge.Test.Assert.areDeepEqual$1(expectedGroupDictionary1, groupDictionary3, "ToDictionary(keySelector) conversion for <string, Group> - check content");
    
                // TEST
                var numbers = [null, 1.0, "two", 3, "four", 5, "six", 7.0];
    
                var doubleNumbers = System.Linq.Enumerable.from(numbers).ofType(System.Double).toArray();
    
                Bridge.Test.Assert.areDeepEqual$1([1.0, 3, 5, 7.0], doubleNumbers, "Issue #218. OfType<double> should get only double type items");
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.Linq.TestLinqConversionOperators", $_);
    
    Bridge.apply($_.Bridge.ClientTest.Linq.TestLinqConversionOperators, {
        f1: function (d) {
            return d;
        },
        f2: function (w) {
            return w;
        },
        f3: function (g) {
            return g;
        },
        f4: function (g) {
            return g.getName();
        }
    });
    
    Bridge.define('Bridge.ClientTest.Linq.TestLinqConversionOperatorsIEqualityComparer', {
        inherits: [System.Collections.Generic.EqualityComparer$1(String)],
        equals2: function (x, y) {
            return System.String.equals(x, y);
        },
        getHashCode2: function (obj) {
            if (obj == null) {
                return 0;
            }
    
            return Bridge.getHashCode(obj);
        }
    });
    
    Bridge.define('Bridge.ClientTest.Linq.TestLinqElementOperators', {
        statics: {
            test: function () {
                // TEST
                var persons = Bridge.ClientTest.Utilities.Person.getPersons();
                var person3 = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).where($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f1)).first();
    
                Bridge.Test.Assert.areDeepEqual$1(Bridge.ClientTest.Utilities.Person.getPersons().getItem(2), person3, "First() with ID = 3");
                Bridge.Test.Assert.areDeepEqual$1(Bridge.ClientTest.Utilities.Person.getPersons().getItem(2), System.Linq.Enumerable.from(persons).first($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f2), "First() with ID = 3 by lambda");
                Bridge.Test.Assert.areDeepEqual$1(Bridge.ClientTest.Utilities.Person.getPersons().getItem(2), System.Linq.Enumerable.from(persons).where($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f2).first(), "First() with Where() with ID = 3 by lambda");
                Bridge.Test.Assert.areDeepEqual$1(Bridge.ClientTest.Utilities.Person.getPersons().getItem(1), System.Linq.Enumerable.from(persons).first($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f3), "First() with Group = 'C' by lambda");
                Bridge.Test.Assert.throws$5(Bridge.ClientTest.Linq.TestLinqElementOperators.throwExceptionOnFirst1, "First() should throw exception if no element found");
                Bridge.Test.Assert.throws$5(Bridge.ClientTest.Linq.TestLinqElementOperators.throwExceptionOnFirst2, "First() should throw exception on empty collection");
    
                // TEST
                Bridge.Test.Assert.areEqual$1(null, System.Linq.Enumerable.from(persons).firstOrDefault($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f4, null), "FirstOrDefault() unexisting element by lambda");
                Bridge.Test.Assert.areEqual$1(null, System.Linq.Enumerable.from(persons).where($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f4).firstOrDefault(null, null), "FirstOrDefault() with Where() unexisting element by lambda");
                Bridge.Test.Assert.areEqual$1(persons.getItem(7), System.Linq.Enumerable.from(persons).firstOrDefault($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f5, null), "FirstOrDefault() with Name = 'Nemo' by lambda");
                Bridge.Test.Assert.areEqual$1(persons.getItem(7), System.Linq.Enumerable.from(persons).where($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f5).firstOrDefault(null, null), "FirstOrDefault() with Where() with Name = 'Nemo' by lambda");
                Bridge.Test.Assert.areEqual$1(null, System.Linq.Enumerable.from(([])).firstOrDefault(null, null), "FirstOrDefault() within zero-length array by lambda");
    
                // TEST
                var lastPerson = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).select($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f6)).last();
    
                Bridge.Test.Assert.areDeepEqual$1(Bridge.ClientTest.Utilities.Person.getPersons().getItem(7), lastPerson, "Last() person");
                Bridge.Test.Assert.areDeepEqual$1(Bridge.ClientTest.Utilities.Person.getPersons().getItem(3), System.Linq.Enumerable.from(persons).last($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f7), "Last() with ID = 4 by lambda");
                Bridge.Test.Assert.areDeepEqual$1(Bridge.ClientTest.Utilities.Person.getPersons().getItem(6), System.Linq.Enumerable.from(persons).last($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f8), "Last() with Group = 'B' by lambda");
                Bridge.Test.Assert.throws$5(Bridge.ClientTest.Linq.TestLinqElementOperators.throwExceptionOnLast1, "Last() should throw exception if no element found");
                Bridge.Test.Assert.throws$5(Bridge.ClientTest.Linq.TestLinqElementOperators.throwExceptionOnLast2, "Last() should throw exception on empty collection");
    
                // TEST
                Bridge.Test.Assert.areEqual$1(null, System.Linq.Enumerable.from(persons).lastOrDefault($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f4, null), "LastOrDefault() unexisting element by lambda");
                Bridge.Test.Assert.areEqual$1(null, System.Linq.Enumerable.from(persons).where($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f4).lastOrDefault(null, null), "LastOrDefault() with Where() unexisting element by lambda");
                Bridge.Test.Assert.areEqual$1(persons.getItem(7), System.Linq.Enumerable.from(persons).lastOrDefault($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f5, null), "LastOrDefault() with Name = 'Nemo' by lambda");
                Bridge.Test.Assert.areEqual$1(null, System.Linq.Enumerable.from(([])).lastOrDefault(null, null), "LastOrDefault() within zero-length array by lambda");
    
                // TEST
                var numbers = [5, 4, 1, 3, 9, 8, 6, 7, 2, 0];
                var elementAt1 = (System.Linq.Enumerable.from(numbers).where($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f9)).elementAt(1);
    
                Bridge.Test.Assert.areEqual$1(8, elementAt1, "ElementAt() should return 8");
                Bridge.Test.Assert.throws$5(Bridge.ClientTest.Linq.TestLinqElementOperators.throwExceptionOnElementAt1, "ElementAt() should throw exception if no element found");
                Bridge.Test.Assert.throws$5(Bridge.ClientTest.Linq.TestLinqElementOperators.throwExceptionOnElementAt2, "ElementAt() should throw exception on empty collection");
    
                // TEST
                var elementAt1OrDefault = System.Linq.Enumerable.from(numbers).elementAtOrDefault(1, 0);
                Bridge.Test.Assert.areEqual$1(4, elementAt1OrDefault, "ElementAtOrDefault() should return 4");
    
                // TEST
                var elementAt2OrDefault = (System.Linq.Enumerable.from(numbers).where($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f9)).elementAtOrDefault(2, 0);
                Bridge.Test.Assert.areEqual$1(6, elementAt2OrDefault, "ElementAtOrDefault() should return 6");
    
                // TEST
                var elementAt100OrDefault = (System.Linq.Enumerable.from(numbers).where($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f9)).elementAtOrDefault(100, 0);
                Bridge.Test.Assert.areEqual$1(0, elementAt100OrDefault, "ElementAtOrDefault() should return 0");
            },
            throwExceptionOnFirst1: function () {
                var numbers = [3, 4];
    
                System.Linq.Enumerable.from(numbers).first($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f10);
            },
            throwExceptionOnFirst2: function () {
                var numbers = [];
    
                System.Linq.Enumerable.from(numbers).first();
            },
            throwExceptionOnLast1: function () {
                var numbers = [3, 4];
    
                System.Linq.Enumerable.from(numbers).last($_.Bridge.ClientTest.Linq.TestLinqElementOperators.f10);
            },
            throwExceptionOnLast2: function () {
                var numbers = [];
    
                System.Linq.Enumerable.from(numbers).last();
            },
            throwExceptionOnElementAt1: function () {
                var numbers = [3, 4];
    
                System.Linq.Enumerable.from(numbers).elementAt(3);
            },
            throwExceptionOnElementAt2: function () {
                var numbers = [];
    
                System.Linq.Enumerable.from(numbers).elementAt(1);
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.Linq.TestLinqElementOperators", $_);
    
    Bridge.apply($_.Bridge.ClientTest.Linq.TestLinqElementOperators, {
        f1: function (p) {
            return p.getID() === 3;
        },
        f2: function (x) {
            return x.getID() === 3;
        },
        f3: function (x) {
            return Bridge.referenceEquals(x.getGroup(), "C");
        },
        f4: function (x) {
            return x.getID() === -1;
        },
        f5: function (x) {
            return Bridge.referenceEquals(x.getName(), "Nemo");
        },
        f6: function (p) {
            return p;
        },
        f7: function (x) {
            return x.getID() === 4;
        },
        f8: function (x) {
            return Bridge.referenceEquals(x.getGroup(), "B");
        },
        f9: function (n) {
            return n > 5;
        },
        f10: function (x) {
            return x === 5;
        }
    });
    
    Bridge.define('Bridge.ClientTest.Linq.TestLinqGenerationOperators', {
        statics: {
            test: function () {
                // TEST
                var numbers = (System.Linq.Enumerable.range(0, 6).select($_.Bridge.ClientTest.Linq.TestLinqGenerationOperators.f1)).toArray();
                var numbersExpected = [new $_.$AnonymousType$24(0, false), new $_.$AnonymousType$24(1, true), new $_.$AnonymousType$24(2, false), new $_.$AnonymousType$24(3, true), new $_.$AnonymousType$24(4, false), new $_.$AnonymousType$24(5, true)];
    
                Bridge.Test.Assert.areDeepEqual$1(numbersExpected, numbers, "Range() 6 items from 0");
    
                // TEST
                var repeatNumbers = System.Linq.Enumerable.repeat(-3, 4).toArray();
                var repeatNumbersExpected = [-3, -3, -3, -3];
    
                Bridge.Test.Assert.areDeepEqual$1(repeatNumbersExpected, repeatNumbers, "Repeat() -3 four times");
            }
        }
    });
    
    Bridge.define("$AnonymousType$24", $_, {
        constructor: function (number, isOdd) {
            this.number = number;
            this.isOdd = isOdd;
        },
        getNumber : function () {
            return this.number;
        },
        getIsOdd : function () {
            return this.isOdd;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$24)) {
                return false;
            }
            return Bridge.equals(this.number, o.number) && Bridge.equals(this.isOdd, o.isOdd);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + -1184847484;
            hash = hash * 23 + (this.number == null ? 0 : Bridge.getHashCode(this.number));
            hash = hash * 23 + (this.isOdd == null ? 0 : Bridge.getHashCode(this.isOdd));
            return hash;
        },
        toJSON: function () {
            return {
                number : this.number,
                isOdd : this.isOdd
            };
        }
    });
    
    Bridge.ns("Bridge.ClientTest.Linq.TestLinqGenerationOperators", $_);
    
    Bridge.apply($_.Bridge.ClientTest.Linq.TestLinqGenerationOperators, {
        f1: function (n) {
            return new $_.$AnonymousType$24(n, n % 2 === 1);
        }
    });
    
    Bridge.define('Bridge.ClientTest.Linq.TestLinqGroupingOperators', {
        statics: {
            test: function () {
                // TEST
                var numbers = [2, 10, 3, 5, 30, 1, -15];
                var words = ["1.one", "3.three", "2.two", "22.twentytwo", "11.eleven", "30.thirty"];
    
                var numberGroups = (System.Linq.Enumerable.from(numbers).groupBy($_.Bridge.ClientTest.Linq.TestLinqGroupingOperators.f1).select($_.Bridge.ClientTest.Linq.TestLinqGroupingOperators.f2)).toArray();
    
                var numberGroupsExpected = [new $_.$AnonymousType$25(2, [2]), new $_.$AnonymousType$25(0, [10, 5, 30, -15]), new $_.$AnonymousType$25(3, [3]), new $_.$AnonymousType$25(1, [1])];
    
                Bridge.Test.Assert.areDeepEqual$1(numberGroupsExpected, numberGroups, "Group numbers by remainders");
    
                // TEST
                var wordGroups = (System.Linq.Enumerable.from(words).groupBy($_.Bridge.ClientTest.Linq.TestLinqGroupingOperators.f3).select($_.Bridge.ClientTest.Linq.TestLinqGroupingOperators.f4)).toArray();
    
                var wordGroupsExpected = [new $_.$AnonymousType$26(49, ["1.one", "11.eleven"]), new $_.$AnonymousType$26(51, ["3.three", "30.thirty"]), new $_.$AnonymousType$26(50, ["2.two", "22.twentytwo"])];
    
                Bridge.Test.Assert.areDeepEqual$1(wordGroupsExpected, wordGroups, "Group words by first letters");
    
                // TEST
                var personGroups = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).groupBy($_.Bridge.ClientTest.Linq.TestLinqGroupingOperators.f5).select($_.Bridge.ClientTest.Linq.TestLinqGroupingOperators.f7)).toArray();
    
                var personGroupsExpected = [new $_.$AnonymousType$27("A", ["Frank"]), new $_.$AnonymousType$27("C", ["Zeppa", "Billy"]), new $_.$AnonymousType$27("B", ["John", "Dora", "Ian", "Mary"]), new $_.$AnonymousType$27(Bridge.cast(null, String), ["Nemo"])];
    
                Bridge.Test.Assert.areDeepEqual$1(personGroupsExpected, personGroups, "Person group by Group field");
            },
            testComplexGrouping: function () {
                // TEST
                var numbers = [2, 10, 3, 5, 30, 1, -15];
                var words = ["1.one", "3.three", "2.two", "22.twentytwo", "11.eleven", "30.thirty"];
    
                var complexGrouping = (System.Linq.Enumerable.from(numbers).select(function (n) {
                    return { number: n, words: (System.Linq.Enumerable.from(words).where(function (w) {
                        return Bridge.referenceEquals(String.fromCharCode(w.charCodeAt(0)), n.toString());
                    }).groupBy($_.Bridge.ClientTest.Linq.TestLinqGroupingOperators.f3).select($_.Bridge.ClientTest.Linq.TestLinqGroupingOperators.f10)).toArray() };
                })).toArray();
    
                var complexGroupingExpected = Bridge.ClientTest.Linq.TestLinqGroupingOperators.getComplexGroupingExpectedResult();
                Bridge.Test.Assert.areDeepEqual$1(complexGroupingExpected, complexGrouping, "Complex grouping for numbers and words");
            },
            testAnagrams: function () {
                // TEST
                var anagrams = [" from ", " salt ", " earn ", " last ", " near ", " form "];
    
                var anagramsGroups = System.Linq.Enumerable.from(anagrams).groupBy($_.Bridge.ClientTest.Linq.TestLinqGroupingOperators.f11, null, null, new Bridge.ClientTest.Linq.AnagramEqualityComparer()).select($_.Bridge.ClientTest.Linq.TestLinqGroupingOperators.f12).toArray();
    
                var anagramsGroupsExpected = [new $_.$AnonymousType$28("from", [" from ", " form "]), new $_.$AnonymousType$28("salt", [" salt ", " last "]), new $_.$AnonymousType$28("earn", [" earn ", " near "])];
    
                Bridge.Test.Assert.areDeepEqual$1(anagramsGroupsExpected, anagramsGroups, "Anagram grouping with equality comparer");
    
                // TEST
                var anagramsGroups1 = System.Linq.Enumerable.from(anagrams).groupBy($_.Bridge.ClientTest.Linq.TestLinqGroupingOperators.f11, $_.Bridge.ClientTest.Linq.TestLinqGroupingOperators.f13, null, new Bridge.ClientTest.Linq.AnagramEqualityComparer()).select($_.Bridge.ClientTest.Linq.TestLinqGroupingOperators.f12).toArray();
                var anagramsGroupsExpected1 = [new $_.$AnonymousType$28("from", [" FROM ", " FORM "]), new $_.$AnonymousType$28("salt", [" SALT ", " LAST "]), new $_.$AnonymousType$28("earn", [" EARN ", " NEAR "])];
    
                Bridge.Test.Assert.areDeepEqual$1(anagramsGroupsExpected1, anagramsGroups1, "Anagram grouping with equality compare and upper case");
            },
            getComplexGroupingExpectedResult: function () {
                var complexGroupingExpected = [{ number: 2, words: [{ letter: 50, letterGroups: [{ letter: "2.two", letters: ["2.two"] }, { letter: "22.twentytwo", letters: ["22.twentytwo"] }] }] }, { number: 10, words: [] }, { number: 3, words: [{ letter: 51, letterGroups: [{ letter: "3.three", letters: ["3.three"] }, { letter: "30.thirty", letters: ["30.thirty"] }] }] }, { number: 5, words: [] }, { number: 30, words: [] }, { number: 1, words: [{ letter: 49, letterGroups: [{ letter: "1.one", letters: ["1.one"] }, { letter: "11.eleven", letters: ["11.eleven"] }] }] }, { number: -15, words: [] }];
    
                return complexGroupingExpected;
            }
        }
    });
    
    Bridge.define("$AnonymousType$25", $_, {
        constructor: function (remainder, numbers) {
            this.remainder = remainder;
            this.numbers = numbers;
        },
        getRemainder : function () {
            return this.remainder;
        },
        getNumbers : function () {
            return this.numbers;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$25)) {
                return false;
            }
            return Bridge.equals(this.remainder, o.remainder) && Bridge.equals(this.numbers, o.numbers);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 381236457;
            hash = hash * 23 + (this.remainder == null ? 0 : Bridge.getHashCode(this.remainder));
            hash = hash * 23 + (this.numbers == null ? 0 : Bridge.getHashCode(this.numbers));
            return hash;
        },
        toJSON: function () {
            return {
                remainder : this.remainder,
                numbers : this.numbers
            };
        }
    });
    
    Bridge.define("$AnonymousType$26", $_, {
        constructor: function (firstLetter, words) {
            this.firstLetter = firstLetter;
            this.words = words;
        },
        getFirstLetter : function () {
            return this.firstLetter;
        },
        getWords : function () {
            return this.words;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$26)) {
                return false;
            }
            return Bridge.equals(this.firstLetter, o.firstLetter) && Bridge.equals(this.words, o.words);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + -22048070;
            hash = hash * 23 + (this.firstLetter == null ? 0 : Bridge.getHashCode(this.firstLetter));
            hash = hash * 23 + (this.words == null ? 0 : Bridge.getHashCode(this.words));
            return hash;
        },
        toJSON: function () {
            return {
                firstLetter : this.firstLetter,
                words : this.words
            };
        }
    });
    
    Bridge.define("$AnonymousType$27", $_, {
        constructor: function (group, persons) {
            this.group = group;
            this.persons = persons;
        },
        getGroup : function () {
            return this.group;
        },
        getPersons : function () {
            return this.persons;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$27)) {
                return false;
            }
            return Bridge.equals(this.group, o.group) && Bridge.equals(this.persons, o.persons);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 1544035871;
            hash = hash * 23 + (this.group == null ? 0 : Bridge.getHashCode(this.group));
            hash = hash * 23 + (this.persons == null ? 0 : Bridge.getHashCode(this.persons));
            return hash;
        },
        toJSON: function () {
            return {
                group : this.group,
                persons : this.persons
            };
        }
    });
    
    Bridge.define("$AnonymousType$28", $_, {
        constructor: function (key, words) {
            this.key = key;
            this.words = words;
        },
        getKey : function () {
            return this.key;
        },
        getWords : function () {
            return this.words;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$28)) {
                return false;
            }
            return Bridge.equals(this.key, o.key) && Bridge.equals(this.words, o.words);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 428290624;
            hash = hash * 23 + (this.key == null ? 0 : Bridge.getHashCode(this.key));
            hash = hash * 23 + (this.words == null ? 0 : Bridge.getHashCode(this.words));
            return hash;
        },
        toJSON: function () {
            return {
                key : this.key,
                words : this.words
            };
        }
    });
    
    Bridge.ns("Bridge.ClientTest.Linq.TestLinqGroupingOperators", $_);
    
    Bridge.apply($_.Bridge.ClientTest.Linq.TestLinqGroupingOperators, {
        f1: function (n) {
            return n % 5;
        },
        f2: function (g) {
            return new $_.$AnonymousType$25(g.key(), g.toArray());
        },
        f3: function (w) {
            return w.charCodeAt(0);
        },
        f4: function (g) {
            return new $_.$AnonymousType$26(g.key(), g.toArray());
        },
        f5: function (p) {
            return p.getGroup();
        },
        f6: function (x) {
            return x.getName();
        },
        f7: function (g) {
            return new $_.$AnonymousType$27(g.key(), g.select($_.Bridge.ClientTest.Linq.TestLinqGroupingOperators.f6).toArray());
        },
        f8: function (l) {
            return l;
        },
        f9: function (mg) {
            return { letter: mg.key(), letters: mg.toArray() };
        },
        f10: function (g) {
            return { letter: g.key(), letterGroups: (System.Linq.Enumerable.from(g).groupBy($_.Bridge.ClientTest.Linq.TestLinqGroupingOperators.f8, $_.Bridge.ClientTest.Linq.TestLinqGroupingOperators.f8).select($_.Bridge.ClientTest.Linq.TestLinqGroupingOperators.f9)).toArray() };
        },
        f11: function (w) {
            return w.trim();
        },
        f12: function (x) {
            return new $_.$AnonymousType$28(x.key(), x.toArray());
        },
        f13: function (a) {
            return a.toUpperCase();
        }
    });
    
    Bridge.define('Bridge.ClientTest.Linq.TestLinqJoinOperators', {
        statics: {
            test: function () {
                // TEST
                var persons = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).join(Bridge.ClientTest.Utilities.Group.getGroups(), $_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f1, $_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f2, $_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f3)).toArray();
    
                var personsExpected = [new $_.$AnonymousType$29("Frank", 1000), new $_.$AnonymousType$29("Zeppa", 800), new $_.$AnonymousType$29("John", 400), new $_.$AnonymousType$29("Billy", 800), new $_.$AnonymousType$29("Dora", 400), new $_.$AnonymousType$29("Ian", 400), new $_.$AnonymousType$29("Mary", 400)];
    
                Bridge.Test.Assert.areDeepEqual$1(personsExpected, persons, "Join Persons and Groups");
    
                // TEST
                var personsByLambda = System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).join(Bridge.ClientTest.Utilities.Group.getGroups(), $_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f1, $_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f2, $_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f3).toArray();
    
                var personsByLambdaExpected = [new $_.$AnonymousType$29("Frank", 1000), new $_.$AnonymousType$29("Zeppa", 800), new $_.$AnonymousType$29("John", 400), new $_.$AnonymousType$29("Billy", 800), new $_.$AnonymousType$29("Dora", 400), new $_.$AnonymousType$29("Ian", 400), new $_.$AnonymousType$29("Mary", 400)];
    
                Bridge.Test.Assert.areDeepEqual$1(personsByLambdaExpected, personsByLambda, "Join Persons and Groups by lambda");
    
                // TEST
                var groupJoin = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Group.getGroups()).groupJoin(Bridge.ClientTest.Utilities.Person.getPersons(), $_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f2, $_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f1, $_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f5)).toArray();
    
                var groupJoinExpected = [new $_.$AnonymousType$27("A", ["Frank"]), new $_.$AnonymousType$27("B", ["John", "Dora", "Ian", "Mary"]), new $_.$AnonymousType$27("C", ["Zeppa", "Billy"]), new $_.$AnonymousType$27("D", [])];
    
                Bridge.Test.Assert.areDeepEqual$1(groupJoinExpected, groupJoin, "Grouped join Persons and Groups");
    
                // TEST
                var groupJoinWithDefault = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Group.getGroups()).groupJoin(Bridge.ClientTest.Utilities.Person.getPersons(), $_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f2, $_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f1, $_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f6).selectMany($_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f7, $_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f8)).toArray();
    
                var groupJoinWithDefaultExpected = [new $_.$AnonymousType$31("A", "Frank"), new $_.$AnonymousType$31("B", "John"), new $_.$AnonymousType$31("B", "Dora"), new $_.$AnonymousType$31("B", "Ian"), new $_.$AnonymousType$31("B", "Mary"), new $_.$AnonymousType$31("C", "Zeppa"), new $_.$AnonymousType$31("C", "Billy"), new $_.$AnonymousType$31("D", "")];
    
                Bridge.Test.Assert.areDeepEqual$1(groupJoinWithDefaultExpected, groupJoinWithDefault, "Grouped join Persons and Groups with DefaultIfEmpty");
    
                // TEST
                var groupJoinWithDefaultAndComplexEquals = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Group.getGroups()).groupJoin(Bridge.ClientTest.Utilities.Person.getPersons(), $_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f9, $_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f10, $_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f6).selectMany($_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f11, $_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f12).orderByDescending($_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f13).select($_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f14)).toArray();
    
                var groupJoinWithDefaultAndComplexEqualsExpected = [new $_.$AnonymousType$31("C", "Zeppa"), new $_.$AnonymousType$31("B", "Mary"), new $_.$AnonymousType$31("B", "John"), new $_.$AnonymousType$31("B", "Ian"), new $_.$AnonymousType$31("A", "Frank"), new $_.$AnonymousType$31("B", "Dora"), new $_.$AnonymousType$31("C", "Billy"), new $_.$AnonymousType$31("D", Bridge.cast(null, String))];
    
                Bridge.Test.Assert.areDeepEqual$1(groupJoinWithDefaultAndComplexEqualsExpected, groupJoinWithDefaultAndComplexEquals, "Issue #209. Grouped join Persons and Groups with DefaultIfEmpty, complex equals and ordering");
            }
        }
    });
    
    Bridge.define("$AnonymousType$29", $_, {
        constructor: function (name, limit) {
            this.name = name;
            this.limit = limit;
        },
        getName : function () {
            return this.name;
        },
        getLimit : function () {
            return this.limit;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$29)) {
                return false;
            }
            return Bridge.equals(this.name, o.name) && Bridge.equals(this.limit, o.limit);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 1994374565;
            hash = hash * 23 + (this.name == null ? 0 : Bridge.getHashCode(this.name));
            hash = hash * 23 + (this.limit == null ? 0 : Bridge.getHashCode(this.limit));
            return hash;
        },
        toJSON: function () {
            return {
                name : this.name,
                limit : this.limit
            };
        }
    });
    
    Bridge.define("$AnonymousType$30", $_, {
        constructor: function (g, pg) {
            this.g = g;
            this.pg = pg;
        },
        getg : function () {
            return this.g;
        },
        getpg : function () {
            return this.pg;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$30)) {
                return false;
            }
            return Bridge.equals(this.g, o.g) && Bridge.equals(this.pg, o.pg);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 784520985;
            hash = hash * 23 + (this.g == null ? 0 : Bridge.getHashCode(this.g));
            hash = hash * 23 + (this.pg == null ? 0 : Bridge.getHashCode(this.pg));
            return hash;
        },
        toJSON: function () {
            return {
                g : this.g,
                pg : this.pg
            };
        }
    });
    
    Bridge.define("$AnonymousType$31", $_, {
        constructor: function (groupName, personName) {
            this.groupName = groupName;
            this.personName = personName;
        },
        getGroupName : function () {
            return this.groupName;
        },
        getPersonName : function () {
            return this.personName;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$31)) {
                return false;
            }
            return Bridge.equals(this.groupName, o.groupName) && Bridge.equals(this.personName, o.personName);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + -1944362370;
            hash = hash * 23 + (this.groupName == null ? 0 : Bridge.getHashCode(this.groupName));
            hash = hash * 23 + (this.personName == null ? 0 : Bridge.getHashCode(this.personName));
            return hash;
        },
        toJSON: function () {
            return {
                groupName : this.groupName,
                personName : this.personName
            };
        }
    });
    
    Bridge.define("$AnonymousType$32", $_, {
        constructor: function (name, digit) {
            this.name = name;
            this.digit = digit;
        },
        getName : function () {
            return this.name;
        },
        getDigit : function () {
            return this.digit;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$32)) {
                return false;
            }
            return Bridge.equals(this.name, o.name) && Bridge.equals(this.digit, o.digit);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 1947320399;
            hash = hash * 23 + (this.name == null ? 0 : Bridge.getHashCode(this.name));
            hash = hash * 23 + (this.digit == null ? 0 : Bridge.getHashCode(this.digit));
            return hash;
        },
        toJSON: function () {
            return {
                name : this.name,
                digit : this.digit
            };
        }
    });
    
    Bridge.define("$AnonymousType$33", $_, {
        constructor: function (x3, ep) {
            this.x3 = x3;
            this.ep = ep;
        },
        getx3 : function () {
            return this.x3;
        },
        getep : function () {
            return this.ep;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$33)) {
                return false;
            }
            return Bridge.equals(this.x3, o.x3) && Bridge.equals(this.ep, o.ep);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + -781562956;
            hash = hash * 23 + (this.x3 == null ? 0 : Bridge.getHashCode(this.x3));
            hash = hash * 23 + (this.ep == null ? 0 : Bridge.getHashCode(this.ep));
            return hash;
        },
        toJSON: function () {
            return {
                x3 : this.x3,
                ep : this.ep
            };
        }
    });
    
    Bridge.ns("Bridge.ClientTest.Linq.TestLinqJoinOperators", $_);
    
    Bridge.apply($_.Bridge.ClientTest.Linq.TestLinqJoinOperators, {
        f1: function (p) {
            return p.getGroup();
        },
        f2: function (g) {
            return g.getName();
        },
        f3: function (p, g) {
            return new $_.$AnonymousType$29(p.getName(), g.getLimit());
        },
        f4: function (x) {
            return x.getName();
        },
        f5: function (g, pg) {
            return new $_.$AnonymousType$27(g.getName(), System.Linq.Enumerable.from(pg).select($_.Bridge.ClientTest.Linq.TestLinqJoinOperators.f4).toArray());
        },
        f6: function (g, pg) {
            return new $_.$AnonymousType$30(g, pg);
        },
        f7: function (x0) {
            return System.Linq.Enumerable.from(x0.pg).defaultIfEmpty(null);
        },
        f8: function (x1, ep) {
            return new $_.$AnonymousType$31(x1.g.getName(), ep != null ? ep.getName() : "");
        },
        f9: function (g) {
            return new $_.$AnonymousType$32(g.getName(), 1);
        },
        f10: function (p) {
            return new $_.$AnonymousType$32(p.getGroup(), 1);
        },
        f11: function (x2) {
            return System.Linq.Enumerable.from(x2.pg).defaultIfEmpty(null);
        },
        f12: function (x3, ep) {
            return new $_.$AnonymousType$33(x3, ep);
        },
        f13: function (x4) {
            return x4.ep != null ? x4.ep.getName() : null;
        },
        f14: function (x5) {
            return new $_.$AnonymousType$31(x5.x3.g != null ? x5.x3.g.getName() : null, x5.ep != null ? x5.ep.getName() : null);
        }
    });
    
    Bridge.define('Bridge.ClientTest.Linq.TestLinqMiscellaneousOperators', {
        statics: {
            test: function () {
                // TEST
                var numbersA = [4, 1, 3];
                var numbersB = [2, 3, 5];
    
                var concatNumbers = numbersA.concat(numbersB);
                Bridge.Test.Assert.areDeepEqual$1([4, 1, 3, 2, 3, 5], concatNumbers, "Concat() numbers");
    
                // TEST
                var names = System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).select($_.Bridge.ClientTest.Linq.TestLinqMiscellaneousOperators.f1);
                var cities = System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).select($_.Bridge.ClientTest.Linq.TestLinqMiscellaneousOperators.f2);
                var concatNames = names.concat(cities).toArray();
    
                Bridge.Test.Assert.areDeepEqual$1(["Frank", "Zeppa", "John", "Billy", "Dora", "Ian", "Mary", "Nemo", "Edmonton", "Tokyo", "Lisbon", "Paris", "Budapest", "Rome", "Dortmund", "Ocean"], concatNames, "Concat() two sequences");
    
                // TEST
                var a = ["a", "b", "z"];
                var b = ["a", "b", "z"];
    
                Bridge.Test.Assert.true$1(System.Linq.Enumerable.from(a).sequenceEqual(b), "SequenceEqual() for equal sequences");
    
                // TEST
                var c = ["a", "b", "z"];
                var d = ["a", "z", "b"];
    
                Bridge.Test.Assert.true$1(!System.Linq.Enumerable.from(c).sequenceEqual(d), "SequenceEqual() for not equal sequences");
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.Linq.TestLinqMiscellaneousOperators", $_);
    
    Bridge.apply($_.Bridge.ClientTest.Linq.TestLinqMiscellaneousOperators, {
        f1: function (p) {
            return p.getName();
        },
        f2: function (p) {
            return p.getCity();
        }
    });
    
    Bridge.define('Bridge.ClientTest.Linq.TestLinqOrderingOperators', {
        statics: {
            test: function () {
                // TEST
                var words = ["ab2", "ac", "a", "ab12", "", "ab", "bac", "z"];
                var sortedWords = (System.Linq.Enumerable.from(words).orderBy($_.Bridge.ClientTest.Linq.TestLinqOrderingOperators.f1)).toArray();
                Bridge.Test.Assert.areDeepEqual$1(["", "a", "ab", "ab12", "ab2", "ac", "bac", "z"], sortedWords, "Order by words");
    
                // TEST
                var sortedWordsByLength = (System.Linq.Enumerable.from(words).orderBy($_.Bridge.ClientTest.Linq.TestLinqOrderingOperators.f2)).toArray();
                Bridge.Test.Assert.areDeepEqual$1(["", "a", "z", "ac", "ab", "ab2", "bac", "ab12"], sortedWordsByLength, "Order by word length");
    
                // TEST
                var sortedPersonsByName = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).orderBy($_.Bridge.ClientTest.Linq.TestLinqOrderingOperators.f3).select($_.Bridge.ClientTest.Linq.TestLinqOrderingOperators.f3)).toArray();
                Bridge.Test.Assert.areDeepEqual$1(["Billy", "Dora", "Frank", "Ian", "John", "Mary", "Nemo", "Zeppa"], sortedPersonsByName, "Order by person names");
    
                // TODO test with System.StringComparison
    
                // TEST
                var doubles = [1.0, -0.7, 2.1, 0.9, 1.4, 2.9];
                var sortedDoubles = (System.Linq.Enumerable.from(doubles).orderByDescending($_.Bridge.ClientTest.Linq.TestLinqOrderingOperators.f4)).toArray();
                Bridge.Test.Assert.areDeepEqual$1([2.9, 2.1, 1.4, 1.0, 0.9, -0.7], sortedDoubles, "Order by descending double");
    
                // TEST
                var sortedPersonsByCountDesc = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).orderByDescending($_.Bridge.ClientTest.Linq.TestLinqOrderingOperators.f5).select($_.Bridge.ClientTest.Linq.TestLinqOrderingOperators.f5)).toArray();
                Bridge.Test.Assert.areDeepEqual$1([3000, 700, 700, 550, 500, 300, 100, 50], sortedPersonsByCountDesc, "Order by person count descending");
    
                // TEST
                var sortedWordsByLengthAndLetters = (System.Linq.Enumerable.from(words).orderBy($_.Bridge.ClientTest.Linq.TestLinqOrderingOperators.f2).thenBy($_.Bridge.ClientTest.Linq.TestLinqOrderingOperators.f1)).toArray();
                Bridge.Test.Assert.areDeepEqual$1(["", "a", "z", "ab", "ac", "ab2", "bac", "ab12"], sortedWordsByLengthAndLetters, "Order by word length then by letters");
    
                // TEST
                var sortedWordsByLengthAndLettersLambda = System.Linq.Enumerable.from(words).orderBy($_.Bridge.ClientTest.Linq.TestLinqOrderingOperators.f6).thenByDescending($_.Bridge.ClientTest.Linq.TestLinqOrderingOperators.f7).toArray();
                Bridge.Test.Assert.areDeepEqual$1(["", "z", "a", "ac", "ab", "bac", "ab2", "ab12"], sortedWordsByLengthAndLettersLambda, "Order by word length then by letters as lambda");
    
                // TEST
                // var numbers = new[] { 2, 4, 6, 1, 5, 7, 9, 0, 8, 3};
                var numbers = [2, 4, 6, 1, 5];
                var numbersReversed = System.Linq.Enumerable.from(numbers).reverse().toArray();
                Bridge.Test.Assert.areDeepEqual$1([5, 1, 6, 4, 2], numbersReversed, "Reverse() numbers");
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.Linq.TestLinqOrderingOperators", $_);
    
    Bridge.apply($_.Bridge.ClientTest.Linq.TestLinqOrderingOperators, {
        f1: function (word) {
            return word;
        },
        f2: function (word) {
            return word.length;
        },
        f3: function (p) {
            return p.getName();
        },
        f4: function (d) {
            return d;
        },
        f5: function (p) {
            return p.getCount();
        },
        f6: function (x) {
            return x.length;
        },
        f7: function (x) {
            return x;
        }
    });
    
    Bridge.define('Bridge.ClientTest.Linq.TestLinqPartitioningOperators', {
        statics: {
            test: function () {
                // TEST
                var numbers = [1, 3, 5, 7, 9];
                var firstTwo = System.Linq.Enumerable.from(numbers).take(2).toArray();
                Bridge.Test.Assert.areDeepEqual$1([1, 3], firstTwo, "Take() the first two array elements");
    
                // TEST
                var lastThree = Bridge.Linq.Enumerable.from(numbers).takeFromLast(3).toArray();
                Bridge.Test.Assert.areDeepEqual$1([5, 7, 9], lastThree, "TakeFromLast() the last three array elements");
    
                // TEST
                var exceptTwoLast = Bridge.Linq.Enumerable.from(numbers).takeExceptLast(2).toArray();
                Bridge.Test.Assert.areDeepEqual$1([1, 3, 5], exceptTwoLast, "TakeExceptLast() the first array elements except the last two");
    
                // TEST
                var takeWhileLessTwo = System.Linq.Enumerable.from(numbers).takeWhile($_.Bridge.ClientTest.Linq.TestLinqPartitioningOperators.f1).toArray();
                Bridge.Test.Assert.areDeepEqual$1([1], takeWhileLessTwo, "TakeWhile() less two");
    
                // TEST
                var takeWhileSome = System.Linq.Enumerable.from(numbers).takeWhile($_.Bridge.ClientTest.Linq.TestLinqPartitioningOperators.f2).toArray();
                Bridge.Test.Assert.areDeepEqual$1([1, 3, 5, 7], takeWhileSome, "TakeWhile() by value and index");
    
                // TEST
                var skipThree = System.Linq.Enumerable.from(numbers).skip(3).toArray();
                Bridge.Test.Assert.areDeepEqual$1([7, 9], skipThree, "Skip() the first three");
    
                // TEST
                var skipWhileLessNine = System.Linq.Enumerable.from(numbers).skipWhile($_.Bridge.ClientTest.Linq.TestLinqPartitioningOperators.f3).toArray();
                Bridge.Test.Assert.areDeepEqual$1([9], skipWhileLessNine, "SkipWhile() less then 9");
    
                // TEST
                var skipWhileSome = System.Linq.Enumerable.from(numbers).skipWhile($_.Bridge.ClientTest.Linq.TestLinqPartitioningOperators.f4).toArray();
                Bridge.Test.Assert.areDeepEqual$1([5, 7, 9], skipWhileSome, "SkipWhile() by value and index");
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.Linq.TestLinqPartitioningOperators", $_);
    
    Bridge.apply($_.Bridge.ClientTest.Linq.TestLinqPartitioningOperators, {
        f1: function (number) {
            return number < 2;
        },
        f2: function (number, index) {
            return ((number - index) | 0) <= 4;
        },
        f3: function (number) {
            return number < 9;
        },
        f4: function (number, index) {
            return number <= 3 && index < 2;
        }
    });
    
    Bridge.define('Bridge.ClientTest.Linq.TestLinqProjectionOperators', {
        statics: {
            test: function () {
                // TEST
                var numbers = [1, 3, 5, 7];
                var numberPlusOne = (System.Linq.Enumerable.from(numbers).select($_.Bridge.ClientTest.Linq.TestLinqProjectionOperators.f1)).toArray();
                Bridge.Test.Assert.areDeepEqual$1([2, 4, 6, 8], numberPlusOne, "A sequence of ints one higher than the numbers[]");
    
                // TEST
                var persons = Bridge.ClientTest.Utilities.Person.getPersons();
                var names = (System.Linq.Enumerable.from(persons).select($_.Bridge.ClientTest.Linq.TestLinqProjectionOperators.f2)).toArray();
                Bridge.Test.Assert.areDeepEqual$1(["Frank", "Zeppa", "John", "Billy", "Dora", "Ian", "Mary", "Nemo"], names, "Selects names as instance field");
    
                // TEST
                var strings = ["zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine"];
    
                var textNumbers = (System.Linq.Enumerable.from(numbers).select(function (n) {
                    return strings[n];
                })).toArray();
                Bridge.Test.Assert.areDeepEqual$1(["one", "three", "five", "seven"], textNumbers, "Selects names as items of another array");
    
                // TEST
                var anonimNames = (System.Linq.Enumerable.from(persons).select($_.Bridge.ClientTest.Linq.TestLinqProjectionOperators.f3)).toArray();
    
                var anonimNamesToCompare = [new $_.$AnonymousType$34("Frank"), new $_.$AnonymousType$34("Zeppa"), new $_.$AnonymousType$34("John"), new $_.$AnonymousType$34("Billy"), new $_.$AnonymousType$34("Dora"), new $_.$AnonymousType$34("Ian"), new $_.$AnonymousType$34("Mary"), new $_.$AnonymousType$34("Nemo")];
    
                Bridge.Test.Assert.areDeepEqual$1(anonimNamesToCompare, anonimNames, "Selects names as an anonymous type");
    
                // TEST
                numbers = [0, 1, 3, 3];
    
                var numberssInPlace = System.Linq.Enumerable.from(numbers).select($_.Bridge.ClientTest.Linq.TestLinqProjectionOperators.f4).toArray();
    
                var anonimNumbersToCompare = [new $_.$AnonymousType$35(0, true), new $_.$AnonymousType$35(1, true), new $_.$AnonymousType$35(3, false), new $_.$AnonymousType$35(3, true)];
    
                Bridge.Test.Assert.areDeepEqual$1(anonimNumbersToCompare, numberssInPlace, "Selects numbers as an anonymous type");
    
                // TEST
                var numbersA = [1, 5, 2];
                var numbersB = [3, 4, 2];
                var simplePairs = (System.Linq.Enumerable.from(numbersA).selectMany(function (a) {
                    return numbersB;
                }, $_.Bridge.ClientTest.Linq.TestLinqProjectionOperators.f5).where($_.Bridge.ClientTest.Linq.TestLinqProjectionOperators.f6).select($_.Bridge.ClientTest.Linq.TestLinqProjectionOperators.f7)).toArray();
    
                var expectedSimplePairs = [new $_.$AnonymousType$37(1, 3), new $_.$AnonymousType$37(1, 4), new $_.$AnonymousType$37(1, 2), new $_.$AnonymousType$37(2, 3), new $_.$AnonymousType$37(2, 4)];
    
                Bridge.Test.Assert.areDeepEqual$1(expectedSimplePairs, simplePairs, "Join two numeric arrays with one where clause");
    
                // TEST
                numbersA = [1, 5, 2, 4, 3];
                numbersB = [3, 4, 2, 5, 1];
    
                var pairs = (System.Linq.Enumerable.from(numbersA).where($_.Bridge.ClientTest.Linq.TestLinqProjectionOperators.f8).selectMany(function (a) {
                    return numbersB;
                }, $_.Bridge.ClientTest.Linq.TestLinqProjectionOperators.f5).where($_.Bridge.ClientTest.Linq.TestLinqProjectionOperators.f9).select($_.Bridge.ClientTest.Linq.TestLinqProjectionOperators.f10)).toArray();
    
                var expectedPairs = [new $_.$AnonymousType$38(8), new $_.$AnonymousType$38(7), new $_.$AnonymousType$38(6), new $_.$AnonymousType$38(3), new $_.$AnonymousType$38(7), new $_.$AnonymousType$38(6), new $_.$AnonymousType$38(5), new $_.$AnonymousType$38(5), new $_.$AnonymousType$38(4)];
    
                Bridge.Test.Assert.areDeepEqual$1(expectedPairs, pairs, "Join two numeric arrays with two where clauses");
    
                // TEST
                numbersA = [1, 5, 2, 4, 3];
                numbersB = [3, 4, 2, 5, 1];
    
                var manyNumbers = System.Linq.Enumerable.from(numbersA).selectMany(function (a, aIndex) {
                    return System.Linq.Enumerable.from(numbersB).where(function (b) {
                        return a === b && b > aIndex;
                    }).select(function (b) {
                        return new $_.$AnonymousType$39(a, b, aIndex);
                    });
                }).toArray();
    
                var expectedManyNumbers = [new $_.$AnonymousType$39(1, 1, 0), new $_.$AnonymousType$39(5, 5, 1), new $_.$AnonymousType$39(4, 4, 3)];
    
                Bridge.Test.Assert.areDeepEqual$1(expectedManyNumbers, manyNumbers, "SelectMany() two number arrays");
            }
        }
    });
    
    Bridge.define("$AnonymousType$34", $_, {
        constructor: function (name) {
            this.name = name;
        },
        getName : function () {
            return this.name;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$34)) {
                return false;
            }
            return Bridge.equals(this.name, o.name);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + -1184847483;
            hash = hash * 23 + (this.name == null ? 0 : Bridge.getHashCode(this.name));
            return hash;
        },
        toJSON: function () {
            return {
                name : this.name
            };
        }
    });
    
    Bridge.define("$AnonymousType$35", $_, {
        constructor: function (number, isIndex) {
            this.number = number;
            this.isIndex = isIndex;
        },
        getNumber : function () {
            return this.number;
        },
        getIsIndex : function () {
            return this.isIndex;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$35)) {
                return false;
            }
            return Bridge.equals(this.number, o.number) && Bridge.equals(this.isIndex, o.isIndex);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 381236458;
            hash = hash * 23 + (this.number == null ? 0 : Bridge.getHashCode(this.number));
            hash = hash * 23 + (this.isIndex == null ? 0 : Bridge.getHashCode(this.isIndex));
            return hash;
        },
        toJSON: function () {
            return {
                number : this.number,
                isIndex : this.isIndex
            };
        }
    });
    
    Bridge.define("$AnonymousType$36", $_, {
        constructor: function (a, b) {
            this.a = a;
            this.b = b;
        },
        geta : function () {
            return this.a;
        },
        getb : function () {
            return this.b;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$36)) {
                return false;
            }
            return Bridge.equals(this.a, o.a) && Bridge.equals(this.b, o.b);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + -22048069;
            hash = hash * 23 + (this.a == null ? 0 : Bridge.getHashCode(this.a));
            hash = hash * 23 + (this.b == null ? 0 : Bridge.getHashCode(this.b));
            return hash;
        },
        toJSON: function () {
            return {
                a : this.a,
                b : this.b
            };
        }
    });
    
    Bridge.define("$AnonymousType$37", $_, {
        constructor: function (a, b) {
            this.a = a;
            this.b = b;
        },
        getA : function () {
            return this.a;
        },
        getB : function () {
            return this.b;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$37)) {
                return false;
            }
            return Bridge.equals(this.a, o.a) && Bridge.equals(this.b, o.b);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 1544035872;
            hash = hash * 23 + (this.a == null ? 0 : Bridge.getHashCode(this.a));
            hash = hash * 23 + (this.b == null ? 0 : Bridge.getHashCode(this.b));
            return hash;
        },
        toJSON: function () {
            return {
                a : this.a,
                b : this.b
            };
        }
    });
    
    Bridge.define("$AnonymousType$38", $_, {
        constructor: function (sum) {
            this.sum = sum;
        },
        getSum : function () {
            return this.sum;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$38)) {
                return false;
            }
            return Bridge.equals(this.sum, o.sum);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 428290625;
            hash = hash * 23 + (this.sum == null ? 0 : Bridge.getHashCode(this.sum));
            return hash;
        },
        toJSON: function () {
            return {
                sum : this.sum
            };
        }
    });
    
    Bridge.define("$AnonymousType$39", $_, {
        constructor: function (a, b, i) {
            this.a = a;
            this.b = b;
            this.i = i;
        },
        getA : function () {
            return this.a;
        },
        getB : function () {
            return this.b;
        },
        getI : function () {
            return this.i;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$39)) {
                return false;
            }
            return Bridge.equals(this.a, o.a) && Bridge.equals(this.b, o.b) && Bridge.equals(this.i, o.i);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 1994374566;
            hash = hash * 23 + (this.a == null ? 0 : Bridge.getHashCode(this.a));
            hash = hash * 23 + (this.b == null ? 0 : Bridge.getHashCode(this.b));
            hash = hash * 23 + (this.i == null ? 0 : Bridge.getHashCode(this.i));
            return hash;
        },
        toJSON: function () {
            return {
                a : this.a,
                b : this.b,
                i : this.i
            };
        }
    });
    
    Bridge.ns("Bridge.ClientTest.Linq.TestLinqProjectionOperators", $_);
    
    Bridge.apply($_.Bridge.ClientTest.Linq.TestLinqProjectionOperators, {
        f1: function (n) {
            return ((n + 1) | 0);
        },
        f2: function (p) {
            return p.getName();
        },
        f3: function (p) {
            return new $_.$AnonymousType$34(p.getName());
        },
        f4: function (n, index) {
            return new $_.$AnonymousType$35(n, n === index);
        },
        f5: function (a, b) {
            return new $_.$AnonymousType$36(a, b);
        },
        f6: function (x0) {
            return x0.a < x0.b;
        },
        f7: function (x1) {
            return new $_.$AnonymousType$37(x1.a, x1.b);
        },
        f8: function (a) {
            return a > 1;
        },
        f9: function (x2) {
            return x2.b < 4 && x2.a > x2.b;
        },
        f10: function (x3) {
            return new $_.$AnonymousType$38(((x3.a + x3.b) | 0));
        }
    });
    
    Bridge.define('Bridge.ClientTest.Linq.TestLinqQuantifiers', {
        statics: {
            test: function () {
                // TEST
                var words = ["count", "tree", "mount", "five", "doubt"];
                var anyOu = System.Linq.Enumerable.from(words).any($_.Bridge.ClientTest.Linq.TestLinqQuantifiers.f1);
                Bridge.Test.Assert.true$1(anyOu, "Any() to return words containing 'ou'");
    
                // TEST
                var oddNumbers = [3, 7, 9, 5, 247, 1000001];
                var onlyOdd = System.Linq.Enumerable.from(oddNumbers).all($_.Bridge.ClientTest.Linq.TestLinqQuantifiers.f2);
                Bridge.Test.Assert.true$1(onlyOdd, "All() is odd");
    
                // TEST
                var someNumbers = [2, 3, 7, 9, 5, 247, 1000001];
                var notOnlyOdd = !System.Linq.Enumerable.from(someNumbers).all($_.Bridge.ClientTest.Linq.TestLinqQuantifiers.f2);
                Bridge.Test.Assert.true$1(notOnlyOdd, "All() is not only odd");
    
                // TEST
                var productGroups = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).groupBy($_.Bridge.ClientTest.Linq.TestLinqQuantifiers.f3).where($_.Bridge.ClientTest.Linq.TestLinqQuantifiers.f5).select($_.Bridge.ClientTest.Linq.TestLinqQuantifiers.f7)).toArray();
    
                var productGroupsExpected = [new $_.$AnonymousType$40("C", ["Zeppa", "Billy"]), new $_.$AnonymousType$40("B", ["John", "Dora", "Ian", "Mary"]), new $_.$AnonymousType$40(Bridge.cast(null, String), ["Nemo"])];
    
                Bridge.Test.Assert.areDeepEqual$1(productGroupsExpected, productGroups, "Any() to return a grouped array of names only for groups having any item with Count > 500");
            }
        }
    });
    
    Bridge.define("$AnonymousType$40", $_, {
        constructor: function (group, names) {
            this.group = group;
            this.names = names;
        },
        getGroup : function () {
            return this.group;
        },
        getNames : function () {
            return this.names;
        },
        equals: function (o) {
            if (!Bridge.is(o, $_.$AnonymousType$40)) {
                return false;
            }
            return Bridge.equals(this.group, o.group) && Bridge.equals(this.names, o.names);
        },
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 784520986;
            hash = hash * 23 + (this.group == null ? 0 : Bridge.getHashCode(this.group));
            hash = hash * 23 + (this.names == null ? 0 : Bridge.getHashCode(this.names));
            return hash;
        },
        toJSON: function () {
            return {
                group : this.group,
                names : this.names
            };
        }
    });
    
    Bridge.ns("Bridge.ClientTest.Linq.TestLinqQuantifiers", $_);
    
    Bridge.apply($_.Bridge.ClientTest.Linq.TestLinqQuantifiers, {
        f1: function (w) {
            return System.String.contains(w,"ou");
        },
        f2: function (n) {
            return n % 2 === 1;
        },
        f3: function (p) {
            return p.getGroup();
        },
        f4: function (p) {
            return p.getCount() >= 500;
        },
        f5: function (pGroup) {
            return pGroup.any($_.Bridge.ClientTest.Linq.TestLinqQuantifiers.f4);
        },
        f6: function (x) {
            return x.getName();
        },
        f7: function (pGroup) {
            return new $_.$AnonymousType$40(pGroup.key(), pGroup.select($_.Bridge.ClientTest.Linq.TestLinqQuantifiers.f6).toArray());
        }
    });
    
    Bridge.define('Bridge.ClientTest.Linq.TestLinqQueryExecution', {
        statics: {
            test: function () {
                // TEST
                var numbers = [5, 4, 1, 3, 9, 8, 6, 7, 2, 0];
                var i = 0;
    
                var aQuery = System.Linq.Enumerable.from(numbers).select(function (n) {
                    return ((i = (i + 1) | 0));
                });
                Bridge.Test.Assert.areEqual$1(0, i, "Query is not executed until you enumerate over them");
    
                // TEST
                aQuery.toList(System.Int32);
                Bridge.Test.Assert.areEqual$1(10, i, "Query is  executed after you enumerate over them");
    
                i = 0;
    
                // TEST
                var bQuery = (System.Linq.Enumerable.from(numbers).select(function (n) {
                    return ((i = (i + 1) | 0));
                })).max();
                Bridge.Test.Assert.areEqual$1(10, i, "Max() executes immediately");
    
                // TEST
                var smallNumbers = System.Linq.Enumerable.from(numbers).where($_.Bridge.ClientTest.Linq.TestLinqQueryExecution.f1);
                var smallerEvenNumbers = smallNumbers.where($_.Bridge.ClientTest.Linq.TestLinqQueryExecution.f2);
                Bridge.Test.Assert.areDeepEqual$1([2, 0], smallerEvenNumbers.toArray(), "Query in a query");
    
                // TEST
                Bridge.Linq.Enumerable.from(numbers).forEach(function (x, index) {
                    numbers[index] = (-numbers[index]) | 0;
                });
                Bridge.Test.Assert.areDeepEqual$1([-5, -4, -1, -3, -9, -8, -6, -7, -2, 0], System.Linq.Enumerable.from(numbers).toArray(), "ForEach()");
    
                // TEST
                Bridge.Test.Assert.areDeepEqual$1([-4, -8, -6, -2, 0], smallerEvenNumbers.toArray(), "Second query run on a modified source");
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.Linq.TestLinqQueryExecution", $_);
    
    Bridge.apply($_.Bridge.ClientTest.Linq.TestLinqQueryExecution, {
        f1: function (n) {
            return n <= 3;
        },
        f2: function (n) {
            return n % 2 === 0;
        }
    });
    
    Bridge.define('Bridge.ClientTest.Linq.TestLinqRestrictionOperators', {
        statics: {
            test: function () {
                // TEST
                var numbers = [5, 4, 1, 3, 9, 8, 6, 7, 2, 0];
                var filteredNumbers = (System.Linq.Enumerable.from(numbers).where($_.Bridge.ClientTest.Linq.TestLinqRestrictionOperators.f1)).toArray();
                Bridge.Test.Assert.areDeepEqual$1([5, 4, 1, 3, 6, 2, 0], filteredNumbers, "Where elements in integer array are below or equal 6");
    
                // TEST
                var filteredCounts = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).where($_.Bridge.ClientTest.Linq.TestLinqRestrictionOperators.f2).select($_.Bridge.ClientTest.Linq.TestLinqRestrictionOperators.f3)).toArray();
                Bridge.Test.Assert.areDeepEqual$1([300, 100, 500, 50], filteredCounts, "Where elements in Person array have Count below 501");
    
                // TEST
                filteredCounts = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).where($_.Bridge.ClientTest.Linq.TestLinqRestrictionOperators.f4).select($_.Bridge.ClientTest.Linq.TestLinqRestrictionOperators.f3)).toArray();
                Bridge.Test.Assert.areDeepEqual$1([300], filteredCounts, "Where elements in Person array have Count below 501 ang in group 'A'");
    
                // TEST
                var persons = Bridge.ClientTest.Utilities.Person.getPersons();
                var filteredPersonByCounts = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).where($_.Bridge.ClientTest.Linq.TestLinqRestrictionOperators.f2)).toArray();
    
                Bridge.Test.Assert.areDeepEqual$1([persons.getItem(0), persons.getItem(1), persons.getItem(3), persons.getItem(4)], filteredPersonByCounts, "Where elements in Person array have Count below 501. Returns Person instances");
    
                // TEST
                var filteredPersonByCountAndIndex = System.Linq.Enumerable.from(persons).where($_.Bridge.ClientTest.Linq.TestLinqRestrictionOperators.f5).toArray();
    
                Bridge.Test.Assert.areDeepEqual$1([persons.getItem(4)], filteredPersonByCountAndIndex, "Where elements in Person array have Count meet condition (p.Count < index * 100). Returns Person instances");
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.Linq.TestLinqRestrictionOperators", $_);
    
    Bridge.apply($_.Bridge.ClientTest.Linq.TestLinqRestrictionOperators, {
        f1: function (n) {
            return n <= 6;
        },
        f2: function (p) {
            return p.getCount() < 501;
        },
        f3: function (p) {
            return p.getCount();
        },
        f4: function (p) {
            return p.getCount() < 501 && Bridge.referenceEquals(p.getGroup(), "A");
        },
        f5: function (p, index) {
            return p.getCount() < ((index * 100) | 0);
        }
    });
    
    Bridge.define('Bridge.ClientTest.Linq.TestLinqSetOperators', {
        statics: {
            test: function () {
                // TEST
                var a = [1, 2];
                var b = [1, 2];
    
                var result = System.Linq.Enumerable.from(a).intersect(b).toArray();
    
                // TEST
                var numbers = [1, 2, 3, 3, 1, 5, 4, 2, 3];
    
                var uniqueNumbers = System.Linq.Enumerable.from(numbers).distinct().toArray();
                Bridge.Test.Assert.areDeepEqual$1([1, 2, 3, 5, 4], uniqueNumbers, "Distinct() to remove duplicate elements");
    
                // TEST
                var distinctPersonGroups = (System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).select($_.Bridge.ClientTest.Linq.TestLinqSetOperators.f1)).distinct().toArray();
                Bridge.Test.Assert.areDeepEqual$1(["A", "C", "B", null], distinctPersonGroups, "Distinct() to remove duplicate Group elements");
    
                // TEST
                var numbersA = [0, 2, 4, 5, 6, 8, 9];
                var numbersB = [1, 3, 5, 7, 8];
    
                var uniqueNumbersAB = System.Linq.Enumerable.from(numbersA).union(numbersB).toArray();
                Bridge.Test.Assert.areDeepEqual$1([0, 2, 4, 5, 6, 8, 9, 1, 3, 7], uniqueNumbersAB, "Union() to get unique number sequence");
    
                // TEST
                var nameChars = System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).select($_.Bridge.ClientTest.Linq.TestLinqSetOperators.f2);
                var cityChars = System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).select($_.Bridge.ClientTest.Linq.TestLinqSetOperators.f3);
                var uniqueFirstChars = nameChars.union(cityChars).toArray();
    
                Bridge.Test.Assert.areDeepEqual$1([70, 90, 74, 66, 68, 73, 77, 78, 69, 84, 76, 80, 82, 79], uniqueFirstChars, "Union to get unique first letters of Name and City");
    
                // TEST
                var commonNumbersCD = System.Linq.Enumerable.from(numbersA).intersect(numbersB).toArray();
                Bridge.Test.Assert.areDeepEqual$1([5, 8], commonNumbersCD, "Intersect() to get common number sequence");
    
                // TEST
                nameChars = System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).select($_.Bridge.ClientTest.Linq.TestLinqSetOperators.f2);
                cityChars = System.Linq.Enumerable.from(Bridge.ClientTest.Utilities.Person.getPersons()).select($_.Bridge.ClientTest.Linq.TestLinqSetOperators.f3);
    
                var commonFirstChars = System.Linq.Enumerable.from(nameChars).intersect(cityChars).toArray();
                Bridge.Test.Assert.areDeepEqual$1([66, 68], commonFirstChars, "Intersect() to get common first letters of Name and City");
    
                // TEST
                var exceptNumbersCD = System.Linq.Enumerable.from(numbersA).except(numbersB).toArray();
                Bridge.Test.Assert.areDeepEqual$1([0, 2, 4, 6, 9], exceptNumbersCD, "Except() to get numbers from first sequence and does not contain the second sequence numbers");
    
                // TEST
                var exceptFirstChars = nameChars.except(cityChars).toArray();
                Bridge.Test.Assert.areDeepEqual$1([70, 90, 74, 73, 77, 78], exceptFirstChars, "Except() to get letters from Name sequence and does not contain City letters");
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.Linq.TestLinqSetOperators", $_);
    
    Bridge.apply($_.Bridge.ClientTest.Linq.TestLinqSetOperators, {
        f1: function (p) {
            return p.getGroup();
        },
        f2: function (p) {
            return p.getName().charCodeAt(0);
        },
        f3: function (p) {
            return p.getCity().charCodeAt(0);
        }
    });
    
    Bridge.define('Bridge.ClientTest.MathTests', {
        assertAlmostEqual: function (d1, d2) {
            var diff = d2 - d1;
            if (diff < 0) {
                diff = -diff;
            }
            Bridge.Test.Assert.true(diff < 1E-08);
        },
        assertIsDecimalAndEqualTo: function (v, d, message) {
            if (message === void 0) { message = null; }
            Bridge.Test.Assert.areStrictEqual$1(true, Bridge.is(v, System.Decimal), message);
            Bridge.Test.Assert.areStrictEqual$1(d.toString(), v.toString(), message);
        },
        assertIsDoubleAndEqualTo: function (v, d, message) {
            if (message === void 0) { message = null; }
            Bridge.Test.Assert.areStrictEqual$1(true, Bridge.is(v, System.Double), message);
            Bridge.Test.Assert.areStrictEqual$1(d.toString(), v.toString(), message);
        },
        constantsWork: function () {
            this.assertAlmostEqual(Math.E, 2.7182818284590451);
            this.assertAlmostEqual(Math.LN2, 0.69314718055994529);
            this.assertAlmostEqual(Math.LN10, 2.3025850929940459);
            this.assertAlmostEqual(Math.LOG2E, 1.4426950408889634);
            this.assertAlmostEqual(Math.LOG10E, 0.43429448190325182);
            this.assertAlmostEqual(Math.PI, 3.1415926535897931);
            this.assertAlmostEqual(Math.SQRT1_2, 0.70710678118654757);
            this.assertAlmostEqual(Math.SQRT2, 1.4142135623730951);
        },
        absOfDoubleWorks: function () {
            Bridge.Test.Assert.areEqual(12.5, Math.abs(-12.5));
        },
        absOfIntWorks: function () {
            Bridge.Test.Assert.areEqual(12, Math.abs(-12));
        },
        absOfLongWorks: function () {
            Bridge.Test.Assert.areEqual(System.Int64(12), System.Int64(-12).abs());
        },
        absOfSbyteWorks: function () {
            Bridge.Test.Assert.areEqual(15, Math.abs(-15));
        },
        absOfShortWorks: function () {
            Bridge.Test.Assert.areEqual(15, Math.abs(-15));
        },
        absOfFloatWorks: function () {
            Bridge.Test.Assert.areEqual(17.5, Math.abs(-17.5));
        },
        absOfDecimalWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(-10.0).abs(), 10.0);
        },
        acosWorks: function () {
            this.assertAlmostEqual(Math.acos(0.5), 1.0471975511965979);
        },
        asinWorks: function () {
            this.assertAlmostEqual(Math.asin(0.5), 0.52359877559829893);
        },
        atanWorks: function () {
            this.assertAlmostEqual(Math.atan(0.5), 0.46364760900080609);
        },
        atan2Works: function () {
            this.assertAlmostEqual(Math.atan2(1, 2), 0.46364760900080609);
        },
        cosWorks: function () {
            this.assertAlmostEqual(Math.cos(0.5), 0.87758256189037276);
        },
        divRemWorks: function () {
            var resultInt = { };
    
            Bridge.Math.divRem(1, 2, resultInt);
            Bridge.Test.Assert.areEqual(1, resultInt.v);
    
            Bridge.Math.divRem(234, 157, resultInt);
            Bridge.Test.Assert.areEqual(77, resultInt.v);
    
            Bridge.Math.divRem(0, 20, resultInt);
            Bridge.Test.Assert.areEqual(0, resultInt.v);
    
            var resultLong = { };
    
            System.Int64.divRem(System.Int64(2), System.Int64(4), resultLong);
            Bridge.Test.Assert.true(System.Int64(2).equals(resultLong.v));
    
            System.Int64.divRem(System.Int64(2341), System.Int64(157), resultLong);
            Bridge.Test.Assert.true(System.Int64(143).equals(resultLong.v));
        },
        expWorks: function () {
            this.assertAlmostEqual(Math.exp(0.5), 1.6487212707001282);
        },
        floorOfDoubleWorks: function () {
            Bridge.Test.Assert.areEqual(3.0, Math.floor(3.6));
            Bridge.Test.Assert.areEqual(-4.0, Math.floor(-3.6));
        },
        floorOfDecimalWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(3.6).floor(), 3.0);
            this.assertIsDecimalAndEqualTo(System.Decimal(-3.6).floor(), -4.0);
        },
        logWorks: function () {
            this.assertAlmostEqual(Math.log(0.5), -0.69314718055994529);
        },
        maxOfByteWorks: function () {
            Bridge.Test.Assert.areEqual(3.0, Math.max(1, 3));
            Bridge.Test.Assert.areEqual(5.0, Math.max(5, 3));
        },
        maxOfDecimalWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal.max(System.Decimal(-14.5), System.Decimal(3.0)), 3.0);
            this.assertIsDecimalAndEqualTo(System.Decimal.max(System.Decimal(5.4), System.Decimal(3.0)), 5.4);
        },
        maxOfDoubleWorks: function () {
            Bridge.Test.Assert.areEqual(3.0, Math.max(1.0, 3.0));
            Bridge.Test.Assert.areEqual(4.0, Math.max(4.0, 3.0));
        },
        maxOfShortWorks: function () {
            Bridge.Test.Assert.areEqual(3, Math.max(1, 3));
            Bridge.Test.Assert.areEqual(4, Math.max(4, 3));
        },
        maxOfIntWorks: function () {
            Bridge.Test.Assert.areEqual(3, Math.max(1, 3));
            Bridge.Test.Assert.areEqual(4, Math.max(4, 3));
        },
        maxOfLongWorks: function () {
            Bridge.Test.Assert.areEqual(System.Int64(3), System.Int64.max(System.Int64(1), System.Int64(3)));
            Bridge.Test.Assert.areEqual(System.Int64(4), System.Int64.max(System.Int64(4), System.Int64(3)));
        },
        maxOfSByteWorks: function () {
            Bridge.Test.Assert.areEqual(3, Math.max(-1, 3));
            Bridge.Test.Assert.areEqual(5, Math.max(5, 3));
        },
        maxOfFloatWorks: function () {
            Bridge.Test.Assert.areEqual(3.0, Math.max(-14.5, 3.0));
            Bridge.Test.Assert.areEqual(5.4, Math.max(5.4, 3.0));
        },
        maxOfUShortWorks: function () {
            Bridge.Test.Assert.areEqual(3, Math.max(1, 3));
            Bridge.Test.Assert.areEqual(5, Math.max(5, 3));
        },
        maxOfUIntWorks: function () {
            Bridge.Test.Assert.areEqual(3, Math.max(1, 3));
            Bridge.Test.Assert.areEqual(5, Math.max(5, 3));
        },
        maxOfULongWorks: function () {
            Bridge.Test.Assert.true(System.UInt64(300).equals(System.UInt64.max(System.UInt64(100), System.UInt64(300))));
            Bridge.Test.Assert.true(System.UInt64(500).equals(System.UInt64.max(System.UInt64(500), System.UInt64(300))));
        },
        minOfByteWorks: function () {
            Bridge.Test.Assert.areEqual(1.0, Math.min(1, 3));
            Bridge.Test.Assert.areEqual(3.0, Math.min(5, 3));
        },
        minOfDecimalWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal.min(System.Decimal(-14.5), System.Decimal(3.0)), -14.5);
            this.assertIsDecimalAndEqualTo(System.Decimal.min(System.Decimal(5.4), System.Decimal(3.0)), 3.0);
        },
        minOfDoubleWorks: function () {
            Bridge.Test.Assert.areEqual(1.0, Math.min(1.0, 3.0));
            Bridge.Test.Assert.areEqual(3.0, Math.min(4.0, 3.0));
        },
        minOfShortWorks: function () {
            Bridge.Test.Assert.areEqual(1, Math.min(1, 3));
            Bridge.Test.Assert.areEqual(3, Math.min(4, 3));
        },
        minOfIntWorks: function () {
            Bridge.Test.Assert.areEqual(1, Math.min(1, 3));
            Bridge.Test.Assert.areEqual(3, Math.min(4, 3));
        },
        minOfLongWorks: function () {
            Bridge.Test.Assert.true(System.Int64(1).equals(System.Int64.min(System.Int64(1), System.Int64(3))));
            Bridge.Test.Assert.true(System.Int64(3).equals(System.Int64.min(System.Int64(4), System.Int64(3))));
        },
        minOfSByteWorks: function () {
            Bridge.Test.Assert.areEqual(-1, Math.min(-1, 3));
            Bridge.Test.Assert.areEqual(3, Math.min(5, 3));
        },
        minOfFloatWorks: function () {
            Bridge.Test.Assert.areEqual(-14.5, Math.min(-14.5, 3.0));
            Bridge.Test.Assert.areEqual(3.0, Math.min(5.4, 3.0));
        },
        minOfUShortWorks: function () {
            Bridge.Test.Assert.areEqual(1, Math.min(1, 3));
            Bridge.Test.Assert.areEqual(3, Math.min(5, 3));
        },
        minOfUIntWorks: function () {
            Bridge.Test.Assert.areEqual(1, Math.min(1, 3));
            Bridge.Test.Assert.areEqual(3, Math.min(5, 3));
        },
        minOfULongWorks: function () {
            Bridge.Test.Assert.true(System.UInt64(100).equals(System.UInt64.min(System.UInt64(100), System.UInt64(300))));
            Bridge.Test.Assert.true(System.UInt64(300).equals(System.UInt64.min(System.UInt64(500), System.UInt64(300))));
        },
        powWorks: function () {
            this.assertAlmostEqual(Math.pow(3, 0.5), 1.7320508075688772);
    
            this.assertAlmostEqual(Math.pow(3, 2), 9);
            this.assertAlmostEqual(Math.pow(2, 3), 8);
        },
        randomWorks: function () {
            for (var i = 0; i < 5; i = (i + 1) | 0) {
                var d = Math.random();
                Bridge.Test.Assert.true(d >= 0);
                Bridge.Test.Assert.true(d < 1);
            }
        },
        roundOfDoubleWorks: function () {
            Bridge.Test.Assert.areEqual(3.0, Bridge.Math.round(3.432, 0, 6));
            Bridge.Test.Assert.areEqual(4.0, Bridge.Math.round(3.6, 0, 6));
            Bridge.Test.Assert.areEqual(4.0, Bridge.Math.round(3.5, 0, 6));
            Bridge.Test.Assert.areEqual(4.0, Bridge.Math.round(4.5, 0, 6));
            Bridge.Test.Assert.areEqual(-4.0, Bridge.Math.round(-3.5, 0, 6));
            Bridge.Test.Assert.areEqual(-4.0, Bridge.Math.round(-4.5, 0, 6));
        },
        roundDecimalWithModeWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 6), 4, "3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 6), 4, "3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 6), 3, "3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 6), -3, "-3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 6), -4, "-3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 6), -4, "-3.8m");
    
    
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 0), 4, "Up 3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 0), 4, "Up 3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 0), 4, "Up 3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 0), -4, "Up -3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 0), -4, "Up -3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 0), -4, "Up -3.8m");
    
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 1), 3, "Down 3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 1), 3, "Down 3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 1), 3, "Down 3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 1), -3, "Down -3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 1), -3, "Down -3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 1), -3, "Down -3.8m");
    
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 2), 4, "InfinityPos 3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 2), 4, "InfinityPos 3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 2), 4, "InfinityPos 3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 2), -3, "InfinityPos -3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 2), -3, "InfinityPos -3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 2), -3, "InfinityPos -3.8m");
    
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 3), 3, "InfinityNeg 3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 3), 3, "InfinityNeg 3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 3), 3, "InfinityNeg 3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 3), -4, "InfinityNeg -3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 3), -4, "InfinityNeg -3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 3), -4, "InfinityNeg -3.8m");
    
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 5), 4, "TowardsZero 3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 5), 3, "TowardsZero 3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 5), 3, "TowardsZero 3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 5), -3, "TowardsZero -3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 5), -3, "TowardsZero -3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 5), -4, "TowardsZero -3.8m");
    
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 4), 4, "AwayFromZero 3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 4), 4, "AwayFromZero 3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 4), 3, "AwayFromZero 3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 4), -3, "AwayFromZero -3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 4), -4, "AwayFromZero -3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 4), -4, "AwayFromZero -3.8m");
    
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 7), 4, "Ceil 3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 7), 4, "Ceil 3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 7), 3, "Ceil 3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 7), -3, "Ceil -3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 7), -3, "Ceil -3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 7), -4, "Ceil -3.8m");
    
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 8), 4, "Floor 3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 8), 3, "Floor 3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 8), 3, "Floor 3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 8), -3, "Floor -3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 8), -4, "Floor -3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 8), -4, "Floor -3.8m");
    
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 6), 4, "ToEven 3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 6), 4, "ToEven 3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 6), 3, "ToEven 3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 6), -3, "ToEven -3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 6), -4, "ToEven -3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 6), -4, "ToEven -3.8m");
        },
        roundDecimalWithPrecisionAndModeWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.45), 1, 6), System.Decimal(1.4), "Bridge584 1");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.55), 1, 6), System.Decimal(1.6), "Bridge584 2");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 4, 6), System.Decimal(123.4568), "Bridge584 3");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 6, 6), System.Decimal(123.456789), "Bridge584 4");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 8, 6), System.Decimal(123.456789), "Bridge584 5");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(-123.456), 0, 6), System.Decimal(-123.0), "Bridge584 6");
    
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.45), 1, 0), 1.5, "Bridge584 Up 1");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.55), 1, 0), 1.6, "Bridge584 Up 2");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 4, 0), 123.4568, "Bridge584 Up 3");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 6, 0), 123.456789, "Bridge584 Up 4");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 8, 0), 123.456789, "Bridge584 Up 5");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(-123.456), 0, 0), -124.0, "Bridge584 Up 6");
    
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.45), 1, 4), 1.5, "Bridge584 AwayFromZero 1");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.55), 1, 4), 1.6, "Bridge584 AwayFromZero 2");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 4, 4), 123.4568, "Bridge584 AwayFromZero 3");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 6, 4), 123.456789, "Bridge584 AwayFromZero 4");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 8, 4), 123.456789, "Bridge584 AwayFromZero 5");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(-123.456), 0, 4), -123.0, "Bridge584 AwayFromZero 6");
    
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.45), 1, 1), 1.4, "Bridge584 Down 1");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.55), 1, 1), 1.5, "Bridge584 Down 2");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 4, 1), 123.4567, "Bridge584 Down 3");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 6, 1), 123.456789, "Bridge584 Down 4");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 8, 1), 123.456789, "Bridge584 Down 5");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(-123.456), 0, 1), -123.0, "Bridge584 Down 6");
    
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.45), 1, 2), 1.5, "Bridge584 InfinityPos 1");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.55), 1, 2), 1.6, "Bridge584 InfinityPos 2");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 4, 2), 123.4568, "Bridge584 InfinityPos 3");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 6, 2), 123.456789, "Bridge584 InfinityPos 4");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 8, 2), 123.456789, "Bridge584 InfinityPos 5");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(-123.456), 0, 2), -123.0, "Bridge584 InfinityPos 6");
    
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.45), 1, 3), 1.4, "Bridge584 InfinityNeg 1");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.55), 1, 3), 1.5, "Bridge584 InfinityNeg 2");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 4, 3), 123.4567, "Bridge584 InfinityNeg 3");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 6, 3), 123.456789, "Bridge584 InfinityNeg 4");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 8, 3), 123.456789, "Bridge584 InfinityNeg 5");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(-123.456), 0, 3), -124.0, "Bridge584 InfinityNeg 6");
    
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.45), 1, 5), 1.4, "Bridge584 TowardsZero 1");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.55), 1, 5), 1.5, "Bridge584 TowardsZero 2");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 4, 5), 123.4568, "Bridge584 TowardsZero 3");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 6, 5), 123.456789, "Bridge584 TowardsZero 4");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 8, 5), 123.456789, "Bridge584 TowardsZero 5");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(-123.456), 0, 5), -123.0, "Bridge584 TowardsZero 6");
    
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.45), 1, 6), 1.4, "Bridge584 ToEven 1");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.55), 1, 6), 1.6, "Bridge584 ToEven 2");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 4, 6), 123.4568, "Bridge584 ToEven 3");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 6, 6), 123.456789, "Bridge584 ToEven 4");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 8, 6), 123.456789, "Bridge584 ToEven 5");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(-123.456), 0, 6), -123.0, "Bridge584 ToEven 6");
    
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.45), 1, 7), 1.5, "Bridge584 Ceil 1");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.55), 1, 7), 1.6, "Bridge584 Ceil 2");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 4, 7), 123.4568, "Bridge584 Ceil 3");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 6, 7), 123.456789, "Bridge584 Ceil 4");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 8, 7), 123.456789, "Bridge584 Ceil 5");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(-123.456), 0, 7), -123.0, "Bridge584 Ceil 6");
    
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.45), 1, 8), 1.4, "Bridge584 Floor 1");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(1.55), 1, 8), 1.5, "Bridge584 Floor 2");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 4, 8), 123.4568, "Bridge584 Floor 3");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 6, 8), 123.456789, "Bridge584 Floor 4");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(123.456789), 8, 8), 123.456789, "Bridge584 Floor 5");
            this.assertIsDecimalAndEqualTo(System.Decimal.toDecimalPlaces(System.Decimal(-123.456), 0, 8), -123.0, "Bridge584 Floor 6");
        },
        roundDoubleWithModeWorks: function () {
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(3.8, 0, 6), 4, "3.8");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(3.5, 0, 6), 4, "3.5");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(3.2, 0, 6), 3, "3.2");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(-3.2, 0, 6), -3, "-3.2");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(-3.5, 0, 6), -4, "-3.5");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(-3.8, 0, 6), -4, "-3.8");
    
            //AssertIsDoubleAndEqualTo(Math.Round(3.8, MidpointRounding.Up), 4, "Up 3.8");
            //AssertIsDoubleAndEqualTo(Math.Round(3.5, MidpointRounding.Up), 4, "Up 3.5");
            //AssertIsDoubleAndEqualTo(Math.Round(3.2, MidpointRounding.Up), 4, "Up 3.2");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.2, MidpointRounding.Up), -4, "Up -3.2");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.5, MidpointRounding.Up), -4, "Up -3.5");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.8, MidpointRounding.Up), -4, "Up -3.8");
    
            //AssertIsDoubleAndEqualTo(Math.Round(3.8, MidpointRounding.Down), 3, "Down 3.8");
            //AssertIsDoubleAndEqualTo(Math.Round(3.5, MidpointRounding.Down), 3, "Down 3.5");
            //AssertIsDoubleAndEqualTo(Math.Round(3.2, MidpointRounding.Down), 3, "Down 3.2");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.2, MidpointRounding.Down), -3, "Down -3.2");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.5, MidpointRounding.Down), -3, "Down -3.5");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.8, MidpointRounding.Down), -3, "Down -3.8");
    
            //AssertIsDoubleAndEqualTo(Math.Round(3.8, MidpointRounding.InfinityPos), 4, "InfinityPos 3.8");
            //AssertIsDoubleAndEqualTo(Math.Round(3.5, MidpointRounding.InfinityPos), 4, "InfinityPos 3.5");
            //AssertIsDoubleAndEqualTo(Math.Round(3.2, MidpointRounding.InfinityPos), 4, "InfinityPos 3.2");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.2, MidpointRounding.InfinityPos), -3, "InfinityPos -3.2");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.5, MidpointRounding.InfinityPos), -3, "InfinityPos -3.5");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.8, MidpointRounding.InfinityPos), -3, "InfinityPos -3.8");
    
            //AssertIsDoubleAndEqualTo(Math.Round(3.8, MidpointRounding.InfinityNeg), 3, "InfinityNeg 3.8");
            //AssertIsDoubleAndEqualTo(Math.Round(3.5, MidpointRounding.InfinityNeg), 3, "InfinityNeg 3.5");
            //AssertIsDoubleAndEqualTo(Math.Round(3.2, MidpointRounding.InfinityNeg), 3, "InfinityNeg 3.2");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.2, MidpointRounding.InfinityNeg), -4, "InfinityNeg -3.2");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.5, MidpointRounding.InfinityNeg), -4, "InfinityNeg -3.5");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.8, MidpointRounding.InfinityNeg), -4, "InfinityNeg -3.8");
    
            //AssertIsDoubleAndEqualTo(Math.Round(3.8, MidpointRounding.TowardsZero), 4, "TowardsZero 3.8");
            //AssertIsDoubleAndEqualTo(Math.Round(3.5, MidpointRounding.TowardsZero), 3, "TowardsZero 3.5");
            //AssertIsDoubleAndEqualTo(Math.Round(3.2, MidpointRounding.TowardsZero), 3, "TowardsZero 3.2");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.2, MidpointRounding.TowardsZero), -3, "TowardsZero -3.2");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.5, MidpointRounding.TowardsZero), -3, "TowardsZero -3.5");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.8, MidpointRounding.TowardsZero), -4, "TowardsZero -3.8");
    
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(3.8, 0, 4), 4, "AwayFromZero 3.8");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(3.5, 0, 4), 4, "AwayFromZero 3.5");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(3.2, 0, 4), 3, "AwayFromZero 3.2");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(-3.2, 0, 4), -3, "AwayFromZero -3.2");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(-3.5, 0, 4), -4, "AwayFromZero -3.5");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(-3.8, 0, 4), -4, "AwayFromZero -3.8");
    
            //AssertIsDoubleAndEqualTo(Math.Round(3.8, MidpointRounding.Ceil), 4, "Ceil 3.8");
            //AssertIsDoubleAndEqualTo(Math.Round(3.5, MidpointRounding.Ceil), 4, "Ceil 3.5");
            //AssertIsDoubleAndEqualTo(Math.Round(3.2, MidpointRounding.Ceil), 3, "Ceil 3.2");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.2, MidpointRounding.Ceil), -3, "Ceil -3.2");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.5, MidpointRounding.Ceil), -3, "Ceil -3.5");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.8, MidpointRounding.Ceil), -4, "Ceil -3.8");
    
            //AssertIsDoubleAndEqualTo(Math.Round(3.8, MidpointRounding.Floor), 4, "Floor 3.8");
            //AssertIsDoubleAndEqualTo(Math.Round(3.5, MidpointRounding.Floor), 3, "Floor 3.5");
            //AssertIsDoubleAndEqualTo(Math.Round(3.2, MidpointRounding.Floor), 3, "Floor 3.2");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.2, MidpointRounding.Floor), -3, "Floor -3.2");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.5, MidpointRounding.Floor), -4, "Floor -3.5");
            //AssertIsDoubleAndEqualTo(Math.Round(-3.8, MidpointRounding.Floor), -4, "Floor -3.8");
    
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(3.8, 0, 6), 4, "ToEven 3.8");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(3.5, 0, 6), 4, "ToEven 3.5");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(3.2, 0, 6), 3, "ToEven 3.2");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(-3.2, 0, 6), -3, "ToEven -3.2");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(-3.5, 0, 6), -4, "ToEven -3.5");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(-3.8, 0, 6), -4, "ToEven -3.8");
        },
        roundDoubleWithPrecisionAndModeWorks: function () {
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(1.45, 1, 6), 1.4, "Bridge584 1");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(1.55, 1, 6), 1.6, "Bridge584 2");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(123.456789, 4, 6), 123.4568, "Bridge584 3");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(123.456789, 6, 6), 123.456789, "Bridge584 4");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(123.456789, 8, 6), 123.456789, "Bridge584 5");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(-123.456, 0, 6), -123, "Bridge584 6");
    
            //AssertIsDoubleAndEqualTo(Math.Round(1.45, 1, MidpointRounding.Up), 1.5, "Bridge584 Up 1");
            //AssertIsDoubleAndEqualTo(Math.Round(1.55, 1, MidpointRounding.Up), 1.6, "Bridge584 Up 2");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 4, MidpointRounding.Up), 123.4568, "Bridge584 Up 3");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 6, MidpointRounding.Up), 123.456789, "Bridge584 Up 4");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 8, MidpointRounding.Up), 123.456789, "Bridge584 Up 5");
            //AssertIsDoubleAndEqualTo(Math.Round(-123.456, 0, MidpointRounding.Up), -124.0, "Bridge584 Up 6");
    
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(1.45, 1, 4), 1.5, "Bridge584 AwayFromZero 1");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(1.55, 1, 4), 1.6, "Bridge584 AwayFromZero 2");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(123.456789, 4, 4), 123.4568, "Bridge584 AwayFromZero 3");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(123.456789, 6, 4), 123.456789, "Bridge584 AwayFromZero 4");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(123.456789, 8, 4), 123.456789, "Bridge584 AwayFromZero 5");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(-123.456, 0, 4), -123.0, "Bridge584 AwayFromZero 6");
    
            //AssertIsDoubleAndEqualTo(Math.Round(1.45, 1, MidpointRounding.Down), 1.4, "Bridge584 Down 1");
            //AssertIsDoubleAndEqualTo(Math.Round(1.55, 1, MidpointRounding.Down), 1.5, "Bridge584 Down 2");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 4, MidpointRounding.Down), 123.4567, "Bridge584 Down 3");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 6, MidpointRounding.Down), 123.456789, "Bridge584 Down 4");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 8, MidpointRounding.Down), 123.456789, "Bridge584 Down 5");
            //AssertIsDoubleAndEqualTo(Math.Round(-123.456, 0, MidpointRounding.Down), -123.0, "Bridge584 Down 6");
    
            //AssertIsDoubleAndEqualTo(Math.Round(1.45, 1, MidpointRounding.InfinityPos), 1.5, "Bridge584 InfinityPos 1");
            //AssertIsDoubleAndEqualTo(Math.Round(1.55, 1, MidpointRounding.InfinityPos), 1.6, "Bridge584 InfinityPos 2");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 4, MidpointRounding.InfinityPos), 123.4568, "Bridge584 InfinityPos 3");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 6, MidpointRounding.InfinityPos), 123.456789, "Bridge584 InfinityPos 4");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 8, MidpointRounding.InfinityPos), 123.456789, "Bridge584 InfinityPos 5");
            //AssertIsDoubleAndEqualTo(Math.Round(-123.456, 0, MidpointRounding.InfinityPos), -123.0, "Bridge584 InfinityPos 6");
    
            //AssertIsDoubleAndEqualTo(Math.Round(1.45, 1, MidpointRounding.InfinityNeg), 1.4, "Bridge584 InfinityNeg 1");
            //AssertIsDoubleAndEqualTo(Math.Round(1.55, 1, MidpointRounding.InfinityNeg), 1.5, "Bridge584 InfinityNeg 2");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 4, MidpointRounding.InfinityNeg), 123.4567, "Bridge584 InfinityNeg 3");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 6, MidpointRounding.InfinityNeg), 123.456789, "Bridge584 InfinityNeg 4");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 8, MidpointRounding.InfinityNeg), 123.456789, "Bridge584 InfinityNeg 5");
            //AssertIsDoubleAndEqualTo(Math.Round(-123.456, 0, MidpointRounding.InfinityNeg), -124.0, "Bridge584 InfinityNeg 6");
    
            //AssertIsDoubleAndEqualTo(Math.Round(1.45, 1, MidpointRounding.TowardsZero), 1.4, "Bridge584 TowardsZero 1");
            //AssertIsDoubleAndEqualTo(Math.Round(1.55, 1, MidpointRounding.TowardsZero), 1.5, "Bridge584 TowardsZero 2");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 4, MidpointRounding.TowardsZero), 123.4568, "Bridge584 TowardsZero 3");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 6, MidpointRounding.TowardsZero), 123.456789, "Bridge584 TowardsZero 4");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 8, MidpointRounding.TowardsZero), 123.456789, "Bridge584 TowardsZero 5");
            //AssertIsDoubleAndEqualTo(Math.Round(-123.456, 0, MidpointRounding.TowardsZero), -123.0, "Bridge584 TowardsZero 6");
    
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(1.45, 1, 6), 1.4, "Bridge584 ToEven 1");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(1.55, 1, 6), 1.6, "Bridge584 ToEven 2");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(123.456789, 4, 6), 123.4568, "Bridge584 ToEven 3");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(123.456789, 6, 6), 123.456789, "Bridge584 ToEven 4");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(123.456789, 8, 6), 123.456789, "Bridge584 ToEven 5");
            this.assertIsDoubleAndEqualTo(Bridge.Math.round(-123.456, 0, 6), -123.0, "Bridge584 ToEven 6");
    
            //AssertIsDoubleAndEqualTo(Math.Round(1.45, 1, MidpointRounding.Ceil), 1.5, "Bridge584 Ceil 1");
            //AssertIsDoubleAndEqualTo(Math.Round(1.55, 1, MidpointRounding.Ceil), 1.6, "Bridge584 Ceil 2");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 4, MidpointRounding.Ceil), 123.4568, "Bridge584 Ceil 3");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 6, MidpointRounding.Ceil), 123.456789, "Bridge584 Ceil 4");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 8, MidpointRounding.Ceil), 123.456789, "Bridge584 Ceil 5");
            //AssertIsDoubleAndEqualTo(Math.Round(-123.456, 0, MidpointRounding.Ceil), -123.0, "Bridge584 Ceil 6");
    
            //AssertIsDoubleAndEqualTo(Math.Round(1.45, 1, MidpointRounding.Floor), 1.4, "Bridge584 Floor 1");
            //AssertIsDoubleAndEqualTo(Math.Round(1.55, 1, MidpointRounding.Floor), 1.5, "Bridge584 Floor 2");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 4, MidpointRounding.Floor), 123.4568, "Bridge584 Floor 3");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 6, MidpointRounding.Floor), 123.456789, "Bridge584 Floor 4");
            //AssertIsDoubleAndEqualTo(Math.Round(123.456789, 8, MidpointRounding.Floor), 123.456789, "Bridge584 Floor 5");
            //AssertIsDoubleAndEqualTo(Math.Round(-123.456, 0, MidpointRounding.Floor), -123.0, "Bridge584 Floor 6");
        },
        jsRoundWorks: function () {
            Bridge.Test.Assert.areEqual(3.0, Math.round(3.432));
            Bridge.Test.Assert.areEqual(4.0, Math.round(3.6));
            Bridge.Test.Assert.areEqual(4.0, Math.round(3.5));
            Bridge.Test.Assert.areEqual(5.0, Math.round(4.5));
            Bridge.Test.Assert.areEqual(-3.0, Math.round(-3.5));
            Bridge.Test.Assert.areEqual(-4.0, Math.round(-4.5));
        },
        iEEERemainderWorks: function () {
            this.assertAlmostEqual(3.1 - (4.0 * Math.round(3.1 / 4.0)), -0.9);
            this.assertAlmostEqual(16.1 - (4.0 * Math.round(16.1 / 4.0)), 0.100000000000001);
            this.assertAlmostEqual(4.0 - (16.1 * Math.round(4.0 / 16.1)), 4.0);
            this.assertAlmostEqual(3.1 - (3.2 * Math.round(3.1 / 3.2)), -0.1);
            this.assertAlmostEqual(3.2 - (3.1 * Math.round(3.2 / 3.1)), 0.1);
        },
        sinWorks: function () {
            this.assertAlmostEqual(Math.sin(0.5), 0.479425538604203);
        },
        sqrtWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(3.0).sqrt(), "1.7320508075688772935274463415");
        },
        tanWorks: function () {
            this.assertAlmostEqual(Math.tan(0.5), 0.54630248984379048);
        }
    });
    
    Bridge.define('Bridge.ClientTest.MultidimArrayTests', {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("Array", Bridge.getTypeName(Array), "FullName should be Array");
            var arr = System.Array.create(0, null, 1, 1);
            Bridge.Test.Assert.true$1(Bridge.is(arr, Array), "is Array should be true");
            Bridge.Test.Assert.true$1(Bridge.is(arr, Array), "is int[,] should be true");
        },
        lengthWorks: function () {
            var arr = System.Array.create(0, null, 3, 2);
            Bridge.Test.Assert.areEqual(arr.length, 6);
        },
        getValueWorksForUninitializedElement: function () {
            var arr = System.Array.create(0, null, 2, 2);
            Bridge.Test.Assert.areStrictEqual(0, System.Array.get(arr, 0, 0));
        },
        getValueByIndexWorksForUninitializedElement: function () {
            var arr = System.Array.create(0, null, 2, 2);
            Bridge.Test.Assert.areStrictEqual(0, arr.get([0, 0]));
        },
        settingValueByIndexWorks: function () {
            var arr = System.Array.create(null, null, 3, 2);
            arr.set([0, 0], "a");
            arr.set([0, 1], "b");
            arr.set([1, 0], "c");
            arr.set([1, 1], "d");
            arr.set([2, 0], "e");
            arr.set([2, 1], "f");
            Bridge.Test.Assert.areEqual("a", arr.get([0, 0]));
            Bridge.Test.Assert.areEqual("b", arr.get([0, 1]));
            Bridge.Test.Assert.areEqual("c", arr.get([1, 0]));
            Bridge.Test.Assert.areEqual("d", arr.get([1, 1]));
            Bridge.Test.Assert.areEqual("e", arr.get([2, 0]));
            Bridge.Test.Assert.areEqual("f", arr.get([2, 1]));
        },
        setValueWorks: function () {
            var arr = System.Array.create(null, null, 3, 2);
            System.Array.set(arr, "a", 0, 0);
            System.Array.set(arr, "b", 0, 1);
            System.Array.set(arr, "c", 1, 0);
            System.Array.set(arr, "d", 1, 1);
            System.Array.set(arr, "e", 2, 0);
            System.Array.set(arr, "f", 2, 1);
            Bridge.Test.Assert.areEqual("a", arr.get([0, 0]));
            Bridge.Test.Assert.areEqual("b", arr.get([0, 1]));
            Bridge.Test.Assert.areEqual("c", arr.get([1, 0]));
            Bridge.Test.Assert.areEqual("d", arr.get([1, 1]));
            Bridge.Test.Assert.areEqual("e", arr.get([2, 0]));
            Bridge.Test.Assert.areEqual("f", arr.get([2, 1]));
        },
        setUpArray: function (values) {
            if (values === void 0) { values = []; }
            var arr = System.Array.create(0, null, values.length, 2);
    
            for (var i = 0; i < values.length; i = (i + 1) | 0) {
                var v = Bridge.as(values[i], Array);
                System.Array.set(arr, v[0], i, 0);
                System.Array.set(arr, v[1], i, 1);
            }
    
            return arr;
        },
        getValueWorks: function () {
            var arr = this.setUpArray([[1, 2], [3, 4], [5, 6]]);
            Bridge.Test.Assert.areEqual(1, System.Array.get(arr, 0, 0));
            Bridge.Test.Assert.areEqual(2, System.Array.get(arr, 0, 1));
            Bridge.Test.Assert.areEqual(3, System.Array.get(arr, 1, 0));
            Bridge.Test.Assert.areEqual(4, System.Array.get(arr, 1, 1));
            Bridge.Test.Assert.areEqual(5, System.Array.get(arr, 2, 0));
            Bridge.Test.Assert.areEqual(6, System.Array.get(arr, 2, 1));
        },
        gettingValueByIndexWorks: function () {
            var arr = this.setUpArray([[1, 2], [3, 4], [5, 6]]);
            Bridge.Test.Assert.areEqual(1, arr.get([0, 0]));
            Bridge.Test.Assert.areEqual(2, arr.get([0, 1]));
            Bridge.Test.Assert.areEqual(3, arr.get([1, 0]));
            Bridge.Test.Assert.areEqual(4, arr.get([1, 1]));
            Bridge.Test.Assert.areEqual(5, arr.get([2, 0]));
            Bridge.Test.Assert.areEqual(6, arr.get([2, 1]));
        },
        getLengthWorks: function () {
            var arr = System.Array.create(0, [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]], [[13, 14], [15, 16], [17, 18]], [[19, 20], [21, 22], [23, 24]]], 4, 3, 2);
            Bridge.Test.Assert.areEqual(System.Array.getLength(arr, 0), 4);
            Bridge.Test.Assert.areEqual(System.Array.getLength(arr, 1), 3);
            Bridge.Test.Assert.areEqual(System.Array.getLength(arr, 2), 2);
        },
        getLowerBoundWorks: function () {
            var arr = System.Array.create(0, [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]], [[13, 14], [15, 16], [17, 18]], [[19, 20], [21, 22], [23, 24]]], 4, 3, 2);
            Bridge.Test.Assert.areEqual(System.Array.getLower(arr, 0), 0);
            Bridge.Test.Assert.areEqual(System.Array.getLower(arr, 1), 0);
            Bridge.Test.Assert.areEqual(System.Array.getLower(arr, 2), 0);
        },
        getUpperBoundWorks: function () {
            var arr = System.Array.create(0, [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]], [[13, 14], [15, 16], [17, 18]], [[19, 20], [21, 22], [23, 24]]], 4, 3, 2);
            Bridge.Test.Assert.areEqual((System.Array.getLength(arr, 0) - 1), 3);
            Bridge.Test.Assert.areEqual((System.Array.getLength(arr, 1) - 1), 2);
            Bridge.Test.Assert.areEqual((System.Array.getLength(arr, 2) - 1), 1);
        },
        foreachWorks: function () {
            var $t;
            var arr = System.Array.create(0, [[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]], [[13, 14], [15, 16], [17, 18]], [[19, 20], [21, 22], [23, 24]]], 4, 3, 2);
            var actual = new System.Collections.Generic.List$1(System.Int32)();
            $t = Bridge.getEnumerator(arr);
            while ($t.moveNext()) {
                var i = $t.getCurrent();
                actual.add(i);
            }
            Bridge.Test.Assert.areEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], actual.toArray());
        },
        rankWorks: function () {
            Bridge.Test.Assert.areEqual(2, System.Array.getRank(System.Array.create(0, null, 0, 0)));
            Bridge.Test.Assert.areEqual(3, System.Array.getRank(System.Array.create(0, null, 0, 0, 0)));
        },
        getValueWithIndexOutOfRangeThrowsAnException: function () {
            var arr = System.Array.create(0, null, 2, 3, 4);
            var i = arr.get([1, 2, 3]);
            Bridge.Test.Assert.throws(function () {
                i = arr.get([2, 2, 1]);
            });
            Bridge.Test.Assert.throws(function () {
                i = arr.get([1, 3, 1]);
            });
            Bridge.Test.Assert.throws(function () {
                i = arr.get([1, 2, 4]);
            });
            Bridge.Test.Assert.throws(function () {
                i = arr.get([-1, 0, 0]);
            });
            Bridge.Test.Assert.throws(function () {
                i = arr.get([0, -1, 0]);
            });
            Bridge.Test.Assert.throws(function () {
                i = arr.get([0, 0, -1]);
            });
        },
        setValueWithIndexOutOfRangeThrowsAnException: function () {
            var arr = System.Array.create(0, null, 2, 3, 4);
            arr.set([1, 2, 3], 0);
            Bridge.Test.Assert.throws(function () {
                arr.set([2, 2, 1], 0);
            });
            Bridge.Test.Assert.throws(function () {
                arr.set([1, 3, 1], 0);
            });
            Bridge.Test.Assert.throws(function () {
                arr.set([1, 2, 4], 0);
            });
            Bridge.Test.Assert.throws(function () {
                arr.set([-1, 0, 0], 0);
            });
            Bridge.Test.Assert.throws(function () {
                arr.set([0, -1, 0], 0);
            });
            Bridge.Test.Assert.throws(function () {
                arr.set([0, 0, -1], 0);
            });
        }
    });
    
    Bridge.define('Bridge.ClientTest.NullableTests', {
        isOfType: function (T, value) {
            return Bridge.is(value, T);
        },
        typePropertiesAreCorrect: function () {
            var a = 3, b = null;
            Bridge.Test.Assert.areEqual$1("Boolean", Bridge.getTypeName(Boolean), "Open FullName");
            Bridge.Test.Assert.areEqual$1("System.Int32", Bridge.getTypeName(System.Int32), "Instantiated FullName");
            Bridge.Test.Assert.true$1(Bridge.is(a, System.Int32), "is int? #1");
            Bridge.Test.Assert.false$1(Bridge.is(b, System.Int32), "is int? #2");
    
            Bridge.Test.Assert.true$1(this.isOfType(System.Int32, 3), "IsOfType #1");
            Bridge.Test.Assert.false$1(this.isOfType(System.Int32, 3.14), "IsOfType #2");
            Bridge.Test.Assert.true$1(this.isOfType(System.TimeSpan, new System.TimeSpan(System.Int64(1))), "IsOfType #3");
            Bridge.Test.Assert.false$1(this.isOfType(System.TimeSpan, 3.14), "IsOfType #4");
        },
        convertingToNullableWorks: function () {
            var i = 3;
            var i1 = i;
            var i2 = i;
            Bridge.Test.Assert.areEqual(3, i1);
            Bridge.Test.Assert.areEqual(3, i2);
        },
        hasValueWorks: function () {
            var a = 3, b = null;
            Bridge.Test.Assert.true(System.Nullable.hasValue(a));
            Bridge.Test.Assert.false(System.Nullable.hasValue(b));
        },
        boxingWorks: function () {
            var a = 3, b = null;
            Bridge.Test.Assert.true(a != null);
            Bridge.Test.Assert.false(b != null);
        },
        unboxingWorks: function () {
            var a = 3, b = null;
            Bridge.Test.Assert.areEqual(3, System.Nullable.getValue(a));
            try {
                var x = System.Nullable.getValue(b);
                Bridge.Test.Assert.fail$1("Unboxing null should have thrown an exception");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                if (Bridge.is($e1, System.InvalidOperationException)) {
                }
                else {
                    throw $e1;
                }
            }
        },
        valueWorks: function () {
            var a = 3, b = null;
            Bridge.Test.Assert.areEqual(3, System.Nullable.getValue(a));
            try {
                var x = System.Nullable.getValue(b);
                Bridge.Test.Assert.fail$1("null.Value should have thrown an exception");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                if (Bridge.is($e1, System.InvalidOperationException)) {
                }
                else {
                    throw $e1;
                }
            }
        },
        unboxingValueOfWrongTypeThrowsAnException: function () {
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.NullableTests.f1);
        },
        getValueOrDefaultWithArgWorks: function () {
            var a = 3, b = null;
            Bridge.Test.Assert.areEqual(3, System.Nullable.getValueOrDefault(a, 1));
            Bridge.Test.Assert.areEqual(1, System.Nullable.getValueOrDefault(b, 1));
        },
        liftedEqualityWorks: function () {
            var a = 1, b = 1, c = 2, d = null, e = null;
            Bridge.Test.Assert.areStrictEqual(true, System.Nullable.eq(a, b));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.eq(a, c));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.eq(a, d));
            Bridge.Test.Assert.areStrictEqual(true, System.Nullable.eq(d, e));
        },
        liftedInequalityWorks: function () {
            var a = 1, b = 1, c = 2, d = null, e = null;
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.neq(a, b));
            Bridge.Test.Assert.areStrictEqual(true, System.Nullable.neq(a, c));
            Bridge.Test.Assert.areStrictEqual(true, System.Nullable.neq(a, d));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.neq(d, e));
        },
        liftedLessThanWorks: function () {
            var a = 1, b = 1, c = 2, d = null, e = null;
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.lt(a, b));
            Bridge.Test.Assert.areStrictEqual(true, System.Nullable.lt(a, c));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.lt(a, d));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.lt(d, e));
        },
        liftedGreaterThanWorks: function () {
            var a = 1, b = 1, c = 2, d = null, e = null;
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.gt(a, b));
            Bridge.Test.Assert.areStrictEqual(true, System.Nullable.gt(c, a));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.gt(a, d));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.gt(d, e));
        },
        liftedLessThanOrEqualWorks: function () {
            var a = 1, b = 1, c = 2, d = null, e = null;
            Bridge.Test.Assert.areStrictEqual(true, System.Nullable.lte(a, b));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.lte(c, a));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.lte(a, d));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.lte(d, e));
        },
        liftedGreaterThanOrEqualWorks: function () {
            var a = 1, b = 1, c = 2, d = null, e = null;
            Bridge.Test.Assert.areStrictEqual(true, System.Nullable.gte(a, b));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.gte(a, c));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.gte(a, d));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.gte(d, e));
        },
        liftedSubtractionWorks: function () {
            var a = 2, b = 3, c = null;
            Bridge.Test.Assert.areStrictEqual(-1, Bridge.Int.clip32(System.Nullable.sub(a, b)));
            Bridge.Test.Assert.areStrictEqual(null, Bridge.Int.clip32(System.Nullable.sub(a, c)));
        },
        liftedAdditionWorks: function () {
            var a = 2, b = 3, c = null;
            Bridge.Test.Assert.areStrictEqual(5, Bridge.Int.clip32(System.Nullable.add(a, b)));
            Bridge.Test.Assert.areStrictEqual(null, Bridge.Int.clip32(System.Nullable.add(a, c)));
        },
        liftedModWorks: function () {
            var a = 14, b = 3, c = null;
            Bridge.Test.Assert.areStrictEqual(2, System.Nullable.mod(a, b));
            Bridge.Test.Assert.areStrictEqual(null, System.Nullable.mod(a, c));
        },
        liftedFloatingPointDivisionWorks: function () {
            var a = 15, b = 3, c = null;
            Bridge.Test.Assert.areStrictEqual(5, System.Nullable.div(a, b));
            Bridge.Test.Assert.areStrictEqual(null, System.Nullable.div(a, c));
        },
        liftedIntegerDivisionWorks: function () {
            var a = 16, b = 3, c = null;
            Bridge.Test.Assert.areStrictEqual(5, Bridge.Int.clip32(Bridge.Int.div(a, b)));
            Bridge.Test.Assert.areStrictEqual(null, Bridge.Int.clip32(Bridge.Int.div(a, c)));
        },
        liftedMultiplicationWorks: function () {
            var a = 2, b = 3, c = null;
            Bridge.Test.Assert.areStrictEqual(6, Bridge.Int.clip32(System.Nullable.mul(a, b)));
            Bridge.Test.Assert.areStrictEqual(null, Bridge.Int.clip32(System.Nullable.mul(a, c)));
        },
        liftedBitwiseAndWorks: function () {
            var a = 6, b = 3, c = null;
            Bridge.Test.Assert.areStrictEqual(2, System.Nullable.band(a, b));
            Bridge.Test.Assert.areStrictEqual(null, System.Nullable.band(a, c));
        },
        liftedBitwiseOrWorks: function () {
            var a = 6, b = 3, c = null;
            Bridge.Test.Assert.areStrictEqual(7, System.Nullable.bor(a, b));
            Bridge.Test.Assert.areStrictEqual(null, System.Nullable.bor(a, c));
        },
        liftedBitwiseXorWorks: function () {
            var a = 6, b = 3, c = null;
            Bridge.Test.Assert.areStrictEqual(5, System.Nullable.xor(a, b));
            Bridge.Test.Assert.areStrictEqual(null, System.Nullable.xor(a, c));
        },
        liftedLeftShiftWorks: function () {
            var a = 6, b = 3, c = null;
            Bridge.Test.Assert.areStrictEqual(48, System.Nullable.sl(a, b));
            Bridge.Test.Assert.areStrictEqual(null, System.Nullable.sl(a, c));
        },
        liftedSignedRightShiftWorks: function () {
            var a = 48, b = 3, c = null;
            Bridge.Test.Assert.areStrictEqual(6, System.Nullable.sr(a, b));
            Bridge.Test.Assert.areStrictEqual(null, System.Nullable.sr(a, c));
        },
        liftedUnsignedRightShiftWorks: function () {
            var a = -48, b = 3, c = null;
            Bridge.Test.Assert.areStrictEqual(-6, System.Nullable.sr(a, b));
            Bridge.Test.Assert.areStrictEqual(null, System.Nullable.sr(a, c));
        },
        liftedBooleanAndWorks: function () {
            var a = true, b = true, c = false, d = false, e = null, f = null;
            Bridge.Test.Assert.areStrictEqual(true, System.Nullable.and(a, b));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.and(a, c));
            Bridge.Test.Assert.areStrictEqual(null, System.Nullable.and(a, e));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.and(c, a));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.and(c, d));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.and(c, e));
            Bridge.Test.Assert.areStrictEqual(null, System.Nullable.and(e, a));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.and(e, c));
            Bridge.Test.Assert.areStrictEqual(null, System.Nullable.and(e, f));
        },
        liftedBooleanOrWorks: function () {
            var a = true, b = true, c = false, d = false, e = null, f = null;
            Bridge.Test.Assert.areStrictEqual(true, System.Nullable.or(a, b));
            Bridge.Test.Assert.areStrictEqual(true, System.Nullable.or(a, c));
            Bridge.Test.Assert.areStrictEqual(true, System.Nullable.or(a, e));
            Bridge.Test.Assert.areStrictEqual(true, System.Nullable.or(c, a));
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.or(c, d));
            Bridge.Test.Assert.areStrictEqual(null, System.Nullable.or(c, e));
            Bridge.Test.Assert.areStrictEqual(true, System.Nullable.or(e, a));
            Bridge.Test.Assert.areStrictEqual(null, System.Nullable.or(e, c));
            Bridge.Test.Assert.areStrictEqual(null, System.Nullable.or(e, f));
        },
        liftedBooleanNotWorks: function () {
            var a = true, b = false, c = null;
            Bridge.Test.Assert.areStrictEqual(false, System.Nullable.not(a));
            Bridge.Test.Assert.areStrictEqual(true, System.Nullable.not(b));
            Bridge.Test.Assert.areStrictEqual(null, System.Nullable.not(c));
        },
        liftedNegationWorks: function () {
            var a = 3, b = null;
            Bridge.Test.Assert.areStrictEqual(-3, Bridge.Int.clip32(System.Nullable.neg(a)));
            Bridge.Test.Assert.areStrictEqual(null, Bridge.Int.clip32(System.Nullable.neg(b)));
        },
        liftedUnaryPlusWorks: function () {
            var a = 3, b = null;
            Bridge.Test.Assert.areStrictEqual(3, System.Nullable.pos(a));
            Bridge.Test.Assert.areStrictEqual(null, System.Nullable.pos(b));
        },
        liftedOnesComplementWorks: function () {
            var a = 3, b = null;
            Bridge.Test.Assert.areStrictEqual(-4, System.Nullable.bnot(a));
            Bridge.Test.Assert.areStrictEqual(null, System.Nullable.bnot(b));
        },
        coalesceWorks: function () {
            var $t, $t1, $t2, $t3, $t4;
            var v1 = null, v2 = 1, v3 = 0, v4 = 2;
            var s1 = null, s2 = "x";
            Bridge.Test.Assert.areStrictEqual(null, ($t = v1, $t != null ? $t : v1));
            Bridge.Test.Assert.areStrictEqual(1, ($t1 = v1, $t1 != null ? $t1 : v2));
            Bridge.Test.Assert.areStrictEqual(0, ($t2 = v3, $t2 != null ? $t2 : v4));
            Bridge.Test.Assert.areStrictEqual(null, ($t3 = s1, $t3 != null ? $t3 : s1));
            Bridge.Test.Assert.areStrictEqual("x", ($t4 = s1, $t4 != null ? $t4 : s2));
        }
    });
    
    Bridge.ns("Bridge.ClientTest.NullableTests", $_);
    
    Bridge.apply($_.Bridge.ClientTest.NullableTests, {
        f1: function () {
            var o = "x";
            var x = Bridge.cast(o, System.Int32);
        }
    });
    
    Bridge.define('Bridge.ClientTest.PropertyAccessorTests', {
        accessorsCanBeInvokedInstance: function () {
            var c = new Bridge.ClientTest.PropertyAccessorTests.C1();
    
            c.setP1(42);
            Bridge.Test.Assert.areEqual$1(41, c.f1, "F1 value");
    
            c.f1 = 15;
            Bridge.Test.Assert.areEqual$1(16, c.getP1(), "P1 value");
    
            c.f2 = 17;
            Bridge.Test.Assert.areEqual$1(18, c.getP2(), "P2 value");
    
            c.setP3(12);
            Bridge.Test.Assert.areEqual$1(11, c.f3, "F3 value");
        },
        accessorsCanBeInvokedStatic: function () {
            Bridge.ClientTest.PropertyAccessorTests.C1.setPS1(42);
            Bridge.Test.Assert.areEqual$1(41, Bridge.ClientTest.PropertyAccessorTests.C1.fS1, "FS1 value");
    
            Bridge.ClientTest.PropertyAccessorTests.C1.fS1 = 15;
            Bridge.Test.Assert.areEqual$1(16, Bridge.ClientTest.PropertyAccessorTests.C1.getPS1(), "PS1 value");
    
            Bridge.ClientTest.PropertyAccessorTests.C1.fS2 = 17;
            Bridge.Test.Assert.areEqual$1(18, Bridge.ClientTest.PropertyAccessorTests.C1.getPS2(), "PS2 value");
    
            Bridge.ClientTest.PropertyAccessorTests.C1.setPS3(12);
            Bridge.Test.Assert.areEqual$1(11, Bridge.ClientTest.PropertyAccessorTests.C1.fS3, "FS3 value");
        },
        accessorsCanBeInvokedGeneric: function () {
            var c = new Bridge.ClientTest.PropertyAccessorTests.C2$1(System.Int32)();
    
            c.setP1(42);
            Bridge.Test.Assert.areEqual$1(41, c.f1, "F1 value");
    
            c.f1 = 15;
            Bridge.Test.Assert.areEqual$1(16, c.getP1(), "P1 value");
    
            c.f2 = 17;
            Bridge.Test.Assert.areEqual$1(18, c.getP2(), "P2 value");
    
            c.setP3(12);
            Bridge.Test.Assert.areEqual$1(11, c.f3, "F3 value");
        },
        accessorsCanBeInvokedGenericStatic: function () {
            Bridge.ClientTest.PropertyAccessorTests.C2$1(System.Int32).setPS1(42);
            Bridge.Test.Assert.areEqual$1(41, Bridge.ClientTest.PropertyAccessorTests.C2$1(System.Int32).fS1, "FS1 value");
    
            Bridge.ClientTest.PropertyAccessorTests.C2$1(System.Int32).fS1 = 15;
            Bridge.Test.Assert.areEqual$1(16, Bridge.ClientTest.PropertyAccessorTests.C2$1(System.Int32).getPS1(), "PS1 value");
    
            Bridge.ClientTest.PropertyAccessorTests.C2$1(System.Int32).fS2 = 17;
            Bridge.Test.Assert.areEqual$1(18, Bridge.ClientTest.PropertyAccessorTests.C2$1(System.Int32).getPS2(), "PS2 value");
    
            Bridge.ClientTest.PropertyAccessorTests.C2$1(System.Int32).setPS3(12);
            Bridge.Test.Assert.areEqual$1(11, Bridge.ClientTest.PropertyAccessorTests.C2$1(System.Int32).fS3, "FS3 value");
        },
        baseAccessorsCanBeInvoked: function () {
            var d = new Bridge.ClientTest.PropertyAccessorTests.D3();
    
            d.setP1(42);
            Bridge.Test.Assert.areEqual$1(41, d.f1, "F1 value");
    
            d.f1 = 15;
            Bridge.Test.Assert.areEqual$1(16, d.getP1(), "P1 value");
    
            d.f2 = 17;
            Bridge.Test.Assert.areEqual$1(18, d.getP2(), "P2 value");
    
            d.setP3(12);
            Bridge.Test.Assert.areEqual$1(11, d.f3, "F3 value");
        },
        baseAccessorsCanBeInvokedGeneric: function () {
            var d = new Bridge.ClientTest.PropertyAccessorTests.D4$1(System.Int32)();
    
            d.setP1(42);
            Bridge.Test.Assert.areEqual$1(41, d.f1, "F1 value");
    
            d.f1 = 15;
            Bridge.Test.Assert.areEqual$1(16, d.getP1(), "P1 value");
    
            d.f2 = 17;
            Bridge.Test.Assert.areEqual$1(18, d.getP2(), "P2 value");
    
            d.setP3(12);
            Bridge.Test.Assert.areEqual$1(11, d.f3, "F3 value");
        }
    });
    
    Bridge.define('Bridge.ClientTest.PropertyAccessorTests.B3', {
        f1: 0,
        f2: 0,
        f3: 0,
        getP1: function () {
            return this.f1;
        },
        setP1: function (value) {
            this.f1 = value;
        },
        getP2: function () {
            return this.f2;
        },
        setP3: function (value) {
            this.f3 = value;
        }
    });
    
    Bridge.define('Bridge.ClientTest.PropertyAccessorTests.B4$1', function (T) { return {
        f1: Bridge.getDefaultValue(T),
        f2: Bridge.getDefaultValue(T),
        f3: Bridge.getDefaultValue(T),
        getP1: function () {
            return this.f1;
        },
        setP1: function (value) {
            this.f1 = value;
        },
        getP2: function () {
            return this.f2;
        },
        setP3: function (value) {
            this.f3 = value;
        }
    }; });
    
    Bridge.define('Bridge.ClientTest.PropertyAccessorTests.C1', {
        statics: {
            fS1: 0,
            fS2: 0,
            fS3: 0,
            getPS1: function () {
                return ((Bridge.ClientTest.PropertyAccessorTests.C1.fS1 + 1) | 0);
            },
            setPS1: function (value) {
                Bridge.ClientTest.PropertyAccessorTests.C1.fS1 = (value - 1) | 0;
            },
            getPS2: function () {
                return ((Bridge.ClientTest.PropertyAccessorTests.C1.fS2 + 1) | 0);
            },
            setPS3: function (value) {
                Bridge.ClientTest.PropertyAccessorTests.C1.fS3 = (value - 1) | 0;
            }
        },
        f1: 0,
        f2: 0,
        f3: 0,
        getP1: function () {
            return ((this.f1 + 1) | 0);
        },
        setP1: function (value) {
            this.f1 = (value - 1) | 0;
        },
        getP2: function () {
            return ((this.f2 + 1) | 0);
        },
        setP3: function (value) {
            this.f3 = (value - 1) | 0;
        }
    });
    
    Bridge.define('Bridge.ClientTest.PropertyAccessorTests.C2$1', function (T) { return {
        statics: {
            fS1: Bridge.getDefaultValue(T),
            fS2: Bridge.getDefaultValue(T),
            fS3: Bridge.getDefaultValue(T),
            getPS1: function () {
                return ((Bridge.ClientTest.PropertyAccessorTests.C2$1(T).fS1 + 1) | 0);
            },
            setPS1: function (value) {
                Bridge.ClientTest.PropertyAccessorTests.C2$1(T).fS1 = value - 1;
            },
            getPS2: function () {
                return ((Bridge.ClientTest.PropertyAccessorTests.C2$1(T).fS2 + 1) | 0);
            },
            setPS3: function (value) {
                Bridge.ClientTest.PropertyAccessorTests.C2$1(T).fS3 = value - 1;
            }
        },
        f1: Bridge.getDefaultValue(T),
        f2: Bridge.getDefaultValue(T),
        f3: Bridge.getDefaultValue(T),
        getP1: function () {
            return ((this.f1 + 1) | 0);
        },
        setP1: function (value) {
            this.f1 = value - 1;
        },
        getP2: function () {
            return ((this.f2 + 1) | 0);
        },
        setP3: function (value) {
            this.f3 = value - 1;
        }
    }; });
    
    Bridge.define('Bridge.ClientTest.RandomTests', {
        statics: {
            ITERATIONS: 100,
            unseeded: function () {
                var r = new System.Random("constructor");
    
                for (var i = 0; i < Bridge.ClientTest.RandomTests.ITERATIONS; i = (i + 1) | 0) {
                    var x = r.next$1(20);
                    Bridge.Test.Assert.true$1(x >= 0 && x < 20, x + " under 20 - Next(maxValue)");
                }
    
                for (var i1 = 0; i1 < Bridge.ClientTest.RandomTests.ITERATIONS; i1 = (i1 + 1) | 0) {
                    var x1 = r.next$2(20, 30);
                    Bridge.Test.Assert.true$1(x1 >= 20 && x1 < 30, x1 + " between 20 and 30 - Next(minValue, maxValue)");
                }
    
                for (var i2 = 0; i2 < Bridge.ClientTest.RandomTests.ITERATIONS; i2 = (i2 + 1) | 0) {
                    var x2 = r.nextDouble();
                    Bridge.Test.Assert.true$1(x2 >= 0.0 && x2 < 1.0, x2 + " between 0.0 and 1.0  - NextDouble()");
                }
            },
            seeded: function () {
                var seed = System.Int64.clip32(System.Int64((new Date()).getTime()).mul(10000));
    
                var r1 = new System.Random("constructor$1", seed);
                var r2 = new System.Random("constructor$1", seed);
    
                var b1 = System.Array.init(Bridge.ClientTest.RandomTests.ITERATIONS, 0);
                r1.nextBytes(b1);
    
                var b2 = System.Array.init(Bridge.ClientTest.RandomTests.ITERATIONS, 0);
                r2.nextBytes(b2);
    
                for (var i = 0; i < b1.length; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual$1(b1[i], b2[i], "NextBytes()");
                }
    
                for (var i1 = 0; i1 < b1.length; i1 = (i1 + 1) | 0) {
                    var x1 = r1.next();
                    var x2 = r2.next();
    
                    Bridge.Test.Assert.areEqual$1(x1, x2, "Next()");
                }
            },
            sample: function () {
                var r = new Bridge.ClientTest.RandomTests.SubRandom();
    
                for (var i = 0; i < Bridge.ClientTest.RandomTests.ITERATIONS; i = (i + 1) | 0) {
                    var d = r.exposeSample();
                    Bridge.Test.Assert.true$1(d >= 0.0 && d < 1.0, d + " between 0.0 and 1.0  - ExposeSample()");
                }
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.RandomTests.SubRandom', {
        inherits: [System.Random],
        exposeSample: function () {
            return this.sample();
        }
    });
    
    Bridge.define('Bridge.ClientTest.SimpleTypes.BooleanTests', {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.true(Bridge.is(true, Boolean));
            Bridge.Test.Assert.areEqual("Boolean", Bridge.getTypeName(Boolean));
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueIsFalse: function () {
            Bridge.Test.Assert.areEqual(false, this.getDefaultValue(Boolean));
        },
        creatingInstanceReturnsFalse: function () {
            Bridge.Test.Assert.areEqual(false, Bridge.createInstance(Boolean));
        },
        defaultConstructorReturnsFalse: function () {
            Bridge.Test.Assert.areEqual(false, new Boolean());
        },
        getHashCodeWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((true)), Bridge.getHashCode((true)));
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((false)), Bridge.getHashCode((false)));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode((true)), Bridge.getHashCode((false)));
        },
        objectEqualsWorks: function () {
            Bridge.Test.Assert.true(Bridge.equals((true), true));
            Bridge.Test.Assert.false(Bridge.equals((true), false));
            Bridge.Test.Assert.false(Bridge.equals((false), true));
            Bridge.Test.Assert.true(Bridge.equals((false), false));
        },
        boolEqualsWorks: function () {
            Bridge.Test.Assert.true((true) === true);
            Bridge.Test.Assert.false((true) === false);
            Bridge.Test.Assert.false((false) === true);
            Bridge.Test.Assert.true((false) === false);
    
            Bridge.Test.Assert.true(Bridge.equalsT(true, true));
            Bridge.Test.Assert.false(Bridge.equalsT(true, false));
            Bridge.Test.Assert.false(Bridge.equalsT(false, true));
            Bridge.Test.Assert.true(Bridge.equalsT(false, false));
        },
        logicalExclusiveOrWorks: function () {
            Bridge.Test.Assert.true(true);
            Bridge.Test.Assert.false(false);
            Bridge.Test.Assert.false(false);
            var t = true;
            var f = false;
            Bridge.Test.Assert.true(t ^ f);
            Bridge.Test.Assert.false(f ^ f);
            Bridge.Test.Assert.false(t ^ t);
        },
        logicalAndWorks: function () {
            Bridge.Test.Assert.false(false);
            Bridge.Test.Assert.false(false);
            Bridge.Test.Assert.true(true);
            var t = true;
            var f = false;
            Bridge.Test.Assert.false(!!(t & f));
            Bridge.Test.Assert.false(!!(f & f));
            Bridge.Test.Assert.true(!!(t & t));
        },
        logicalNegationWorks: function () {
            Bridge.Test.Assert.false(false);
            Bridge.Test.Assert.true(true);
            var t = true;
            var f = false;
            Bridge.Test.Assert.false(!t);
            Bridge.Test.Assert.true(!f);
        },
        conditionalOperatorWorks: function () {
            var t = true;
            var f = false;
            Bridge.Test.Assert.false(!t ? true : false);
            Bridge.Test.Assert.true(!f ? true : false);
        },
        conditionalAndWorks: function () {
            var counterAnd = new Bridge.ClientTest.SimpleTypes.BooleanTests.Counter();
    
            Bridge.Test.Assert.true(counterAnd.increment() && counterAnd.increment());
            Bridge.Test.Assert.areEqual$1(2, counterAnd.getCount(), "1. Counter 2");
            Bridge.Test.Assert.false(counterAnd.increment() && counterAnd.increment(false));
            Bridge.Test.Assert.areEqual$1(4, counterAnd.getCount(), "2. Counter 4");
    
            Bridge.Test.Assert.false(counterAnd.increment(false) && counterAnd.increment());
            Bridge.Test.Assert.areEqual$1(5, counterAnd.getCount(), "3. Counter 5");
            Bridge.Test.Assert.false(counterAnd.increment(false) && counterAnd.increment(false));
            Bridge.Test.Assert.areEqual$1(6, counterAnd.getCount(), "4. Counter 6");
    
            var t = true;
            var f = false;
    
            Bridge.Test.Assert.true(t && counterAnd.increment());
            Bridge.Test.Assert.areEqual$1(7, counterAnd.getCount(), "5. Counter 7");
            Bridge.Test.Assert.false(t && counterAnd.increment(false));
            Bridge.Test.Assert.areEqual$1(8, counterAnd.getCount(), "6. Counter 8");
    
            Bridge.Test.Assert.false(f && counterAnd.increment());
            Bridge.Test.Assert.areEqual$1(8, counterAnd.getCount(), "7. Counter 8");
            Bridge.Test.Assert.false(f && counterAnd.increment(false));
            Bridge.Test.Assert.areEqual$1(8, counterAnd.getCount(), "8. Counter 8");
        },
        conditionalOrWorks: function () {
            var counterOr = new Bridge.ClientTest.SimpleTypes.BooleanTests.Counter();
    
            Bridge.Test.Assert.true(counterOr.increment() || counterOr.increment());
            Bridge.Test.Assert.areEqual$1(1, counterOr.getCount(), "1. Counter 1");
            Bridge.Test.Assert.true(counterOr.increment() || counterOr.increment(false));
            Bridge.Test.Assert.areEqual$1(2, counterOr.getCount(), "2. Counter 2");
    
            Bridge.Test.Assert.true(counterOr.increment(false) || counterOr.increment());
            Bridge.Test.Assert.areEqual$1(4, counterOr.getCount(), "3. Counter 4");
            Bridge.Test.Assert.false(counterOr.increment(false) || counterOr.increment(false));
            Bridge.Test.Assert.areEqual$1(6, counterOr.getCount(), "4. Counter 6");
    
            var t = true;
            var f = false;
    
            Bridge.Test.Assert.true(t || counterOr.increment());
            Bridge.Test.Assert.areEqual$1(6, counterOr.getCount(), "5. Counter 6");
            Bridge.Test.Assert.true(t || counterOr.increment(false));
            Bridge.Test.Assert.areEqual$1(6, counterOr.getCount(), "6. Counter 6");
    
            Bridge.Test.Assert.true(f || counterOr.increment());
            Bridge.Test.Assert.areEqual$1(7, counterOr.getCount(), "7. Counter 7");
            Bridge.Test.Assert.false(f || counterOr.increment(false));
            Bridge.Test.Assert.areEqual$1(8, counterOr.getCount(), "8. Counter 8");
        },
        equalityWorks: function () {
            Bridge.Test.Assert.true(true);
            Bridge.Test.Assert.false(false);
            Bridge.Test.Assert.false(false);
            Bridge.Test.Assert.true(true);
    
            var t = true;
            var t1 = true;
            var f = false;
            var f1 = false;
            Bridge.Test.Assert.true(t === t1);
            Bridge.Test.Assert.false(t === f);
            Bridge.Test.Assert.false(f === t);
            Bridge.Test.Assert.true(f === f1);
        },
        inequalityWorks: function () {
            Bridge.Test.Assert.false(false);
            Bridge.Test.Assert.true(true);
            Bridge.Test.Assert.true(true);
            Bridge.Test.Assert.false(false);
    
            var t = true;
            var t1 = true;
            var f = false;
            var f1 = false;
            Bridge.Test.Assert.false(t !== t1);
            Bridge.Test.Assert.true(t !== f);
            Bridge.Test.Assert.true(f !== t);
            Bridge.Test.Assert.false(f !== f1);
        },
        compareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare((true), true) === 0);
            Bridge.Test.Assert.true(Bridge.compare((true), false) > 0);
            Bridge.Test.Assert.true(Bridge.compare((false), true) < 0);
            Bridge.Test.Assert.true(Bridge.compare((false), false) === 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare(true, true) === 0);
            Bridge.Test.Assert.true(Bridge.compare(true, false) > 0);
            Bridge.Test.Assert.true(Bridge.compare(false, true) < 0);
            Bridge.Test.Assert.true(Bridge.compare(false, false) === 0);
        },
        parseWorks: function () {
            Bridge.Test.Assert.areStrictEqual$1(System.Boolean.parse("true"), true, "true");
            Bridge.Test.Assert.areStrictEqual$1(System.Boolean.parse("TRue"), true, "TRue");
            Bridge.Test.Assert.areStrictEqual$1(System.Boolean.parse("TRUE"), true, "TRUE");
            Bridge.Test.Assert.areStrictEqual$1(System.Boolean.parse("  true\t"), true, "true with spaces");
    
            Bridge.Test.Assert.areStrictEqual$1(System.Boolean.parse("false"), false, "false");
            Bridge.Test.Assert.areStrictEqual$1(System.Boolean.parse("FAlse"), false, "FAlse");
            Bridge.Test.Assert.areStrictEqual$1(System.Boolean.parse("FALSE"), false, "FALSE");
            Bridge.Test.Assert.areStrictEqual$1(System.Boolean.parse("  false\t"), false, "false with spaces");
    
            Bridge.Test.Assert.throws$6(System.ArgumentNullException, $_.Bridge.ClientTest.SimpleTypes.BooleanTests.f1);
            Bridge.Test.Assert.throws$6(System.FormatException, $_.Bridge.ClientTest.SimpleTypes.BooleanTests.f2);
            Bridge.Test.Assert.throws$6(System.FormatException, $_.Bridge.ClientTest.SimpleTypes.BooleanTests.f3);
            Bridge.Test.Assert.throws$6(System.FormatException, $_.Bridge.ClientTest.SimpleTypes.BooleanTests.f4);
            Bridge.Test.Assert.throws$6(System.FormatException, $_.Bridge.ClientTest.SimpleTypes.BooleanTests.f5);
            Bridge.Test.Assert.throws$6(System.FormatException, $_.Bridge.ClientTest.SimpleTypes.BooleanTests.f6);
            Bridge.Test.Assert.throws$6(System.FormatException, $_.Bridge.ClientTest.SimpleTypes.BooleanTests.f7);
            Bridge.Test.Assert.throws$6(System.FormatException, $_.Bridge.ClientTest.SimpleTypes.BooleanTests.f8);
            Bridge.Test.Assert.throws$6(System.FormatException, $_.Bridge.ClientTest.SimpleTypes.BooleanTests.f9);
            Bridge.Test.Assert.throws$6(System.FormatException, $_.Bridge.ClientTest.SimpleTypes.BooleanTests.f10);
            Bridge.Test.Assert.throws$6(System.FormatException, $_.Bridge.ClientTest.SimpleTypes.BooleanTests.f11);
            Bridge.Test.Assert.throws$6(System.FormatException, $_.Bridge.ClientTest.SimpleTypes.BooleanTests.f12);
            Bridge.Test.Assert.throws$6(System.FormatException, $_.Bridge.ClientTest.SimpleTypes.BooleanTests.f13);
        },
        tryParseWorks: function () {
            // Success cases
            this.verifyBooleanTryParse(1, "True", true, true);
            this.verifyBooleanTryParse(2, "true", true, true);
            this.verifyBooleanTryParse(3, "TRUE", true, true);
            this.verifyBooleanTryParse(4, "tRuE", true, true);
            this.verifyBooleanTryParse(5, "False", false, true);
            this.verifyBooleanTryParse(6, "false", false, true);
            this.verifyBooleanTryParse(7, "FALSE", false, true);
            this.verifyBooleanTryParse(8, "fAlSe", false, true);
            this.verifyBooleanTryParse(9, "  True  ", true, true);
            this.verifyBooleanTryParse(10, "False  ", false, true);
            this.verifyBooleanTryParse(11, "True\u0000", true, true);
            this.verifyBooleanTryParse(12, "False\u0000", false, true);
            this.verifyBooleanTryParse(13, "True\u0000    ", true, true);
            this.verifyBooleanTryParse(14, " \u0000 \u0000  True   \u0000 ", true, true);
            this.verifyBooleanTryParse(15, "  False \u0000\u0000\u0000  ", false, true);
    
            // Fail cases
            this.verifyBooleanTryParse(16, null, false, false);
            this.verifyBooleanTryParse(17, "", false, false);
            this.verifyBooleanTryParse(18, " ", false, false);
            this.verifyBooleanTryParse(19, "Garbage", false, false);
            this.verifyBooleanTryParse(20, "True\u0000Garbage", false, false);
            this.verifyBooleanTryParse(21, "True\u0000True", false, false);
            this.verifyBooleanTryParse(22, "True True", false, false);
            this.verifyBooleanTryParse(23, "True False", false, false);
            this.verifyBooleanTryParse(24, "False True", false, false);
            this.verifyBooleanTryParse(25, "Fa lse", false, false);
            this.verifyBooleanTryParse(26, "T", false, false);
            this.verifyBooleanTryParse(27, "0", false, false);
            this.verifyBooleanTryParse(28, "1", false, false);
        },
        boolStringWorks: function () {
            Bridge.Test.Assert.areEqual("True", System.Boolean.trueString);
            Bridge.Test.Assert.areEqual("False", System.Boolean.falseString);
        },
        verifyBooleanTryParse: function (i, value, expectedResult, expectedReturn) {
            var result = { };
    
            var returnValue = System.Boolean.tryParse(value, result);
            Bridge.Test.Assert.areEqual$1(expectedReturn, returnValue, i + " Return value: " + value);
            Bridge.Test.Assert.areEqual$1(expectedResult, result.v, i + " Result: " + value);
        }
    });
    
    Bridge.ns("Bridge.ClientTest.SimpleTypes.BooleanTests", $_);
    
    Bridge.apply($_.Bridge.ClientTest.SimpleTypes.BooleanTests, {
        f1: function () {
            var b = System.Boolean.parse(null);
        },
        f2: function () {
            var b = System.Boolean.parse("");
        },
        f3: function () {
            var b = System.Boolean.parse(" ");
        },
        f4: function () {
            var b = System.Boolean.parse("Garbage");
        },
        f5: function () {
            var b = System.Boolean.parse("True\u0000Garbage");
        },
        f6: function () {
            var b = System.Boolean.parse("True\u0000True");
        },
        f7: function () {
            var b = System.Boolean.parse("True True");
        },
        f8: function () {
            var b = System.Boolean.parse("True False");
        },
        f9: function () {
            var b = System.Boolean.parse("False True");
        },
        f10: function () {
            var b = System.Boolean.parse("Fa lse");
        },
        f11: function () {
            var b = System.Boolean.parse("T");
        },
        f12: function () {
            var b = System.Boolean.parse("0");
        },
        f13: function () {
            var b = System.Boolean.parse("1");
        }
    });
    
    Bridge.define('Bridge.ClientTest.SimpleTypes.BooleanTests.Counter', {
        config: {
            properties: {
                Count: 0
            }
        },
        increment: function (r) {
            if (r === void 0) { r = true; }
            this.setCount((this.getCount() + 1) | 0);
    
            return r;
        }
    });
    
    Bridge.define('Bridge.ClientTest.SimpleTypes.ByteTests', {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.true(Bridge.is(0, System.Byte));
            Bridge.Test.Assert.false(Bridge.is(0.5, System.Byte));
            Bridge.Test.Assert.false(Bridge.is(-1, System.Byte));
            Bridge.Test.Assert.false(Bridge.is(256, System.Byte));
            Bridge.Test.Assert.areEqual("System.Byte", Bridge.getTypeName(System.Byte));
            var b = 0;
            Bridge.Test.Assert.true(Bridge.is(b, System.Byte));
            Bridge.Test.Assert.true(Bridge.is(b, System.IComparable$1(System.Byte)));
            Bridge.Test.Assert.true(Bridge.is(b, System.IEquatable$1(System.Byte)));
            Bridge.Test.Assert.true(Bridge.is(b, System.IFormattable));
        },
        castsWork: function () {
            var i1 = -1, i2 = 0, i3 = 234, i4 = 255, i5 = 256;
            var ni1 = -1, ni2 = 0, ni3 = 234, ni4 = 255, ni5 = 256, ni6 = null;
    
            Bridge.Test.Assert.areStrictEqual$1(255, (i1 & 255), "-1 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(0, (i2 & 255), "0 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(234, (i3 & 255), "234 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(255, (i4 & 255), "255 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(0, (i5 & 255), "256 unchecked");
    
            Bridge.Test.Assert.areStrictEqual$1(255, Bridge.Int.clipu8(ni1), "nullable -1 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(0, Bridge.Int.clipu8(ni2), "nullable 0 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(234, Bridge.Int.clipu8(ni3), "nullable 234 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(255, Bridge.Int.clipu8(ni4), "nullable 255 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(0, Bridge.Int.clipu8(ni5), "nullable 256 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(null, Bridge.Int.clipu8(ni6), "null unchecked");
    
            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(i1, System.Byte);
            }, $_.Bridge.ClientTest.SimpleTypes.ByteTests.f1);
            Bridge.Test.Assert.areStrictEqual$1(0, Bridge.Int.check(i2, System.Byte), "0 checked");
            Bridge.Test.Assert.areStrictEqual$1(234, Bridge.Int.check(i3, System.Byte), "234 checked");
            Bridge.Test.Assert.areStrictEqual$1(255, Bridge.Int.check(i4, System.Byte), "256 checked");
            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(i5, System.Byte);
            }, $_.Bridge.ClientTest.SimpleTypes.ByteTests.f1);
    
            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(ni1, System.Byte);
            }, $_.Bridge.ClientTest.SimpleTypes.ByteTests.f1);
            Bridge.Test.Assert.areStrictEqual$1(0, Bridge.Int.check(ni2, System.Byte), "nullable 0 checked");
            Bridge.Test.Assert.areStrictEqual$1(234, Bridge.Int.check(ni3, System.Byte), "nullable 234 checked");
            Bridge.Test.Assert.areStrictEqual$1(255, Bridge.Int.check(ni4, System.Byte), "nullable 255 checked");
            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(ni5, System.Byte);
            }, $_.Bridge.ClientTest.SimpleTypes.ByteTests.f1);
            Bridge.Test.Assert.areStrictEqual$1(null, Bridge.Int.check(ni6, System.Byte), "null checked");
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueIs0: function () {
            Bridge.Test.Assert.areStrictEqual(0, this.getDefaultValue(System.Byte));
        },
        defaultConstructorReturnsZero: function () {
            Bridge.Test.Assert.areStrictEqual(0, Number());
        },
        creatingInstanceReturnsZero: function () {
            Bridge.Test.Assert.areEqual(0, Bridge.createInstance(System.Byte));
        },
        constantsWork: function () {
            Bridge.Test.Assert.areEqual(0, 0);
            Bridge.Test.Assert.areEqual(255, 255);
        },
        formatWorks: function () {
            Bridge.Test.Assert.areEqual("12", System.Byte.format((18), "x"));
        },
        iFormattableToStringWorks: function () {
            Bridge.Test.Assert.areEqual("12", System.Byte.format((18), "x"));
        },
        tryParseWorks: function () {
            var numberResult = { };
            var result = System.Byte.tryParse("234", numberResult);
            Bridge.Test.Assert.true(result);
            Bridge.Test.Assert.areEqual(234, numberResult.v);
    
            result = System.Byte.tryParse("", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);
    
            result = System.Byte.tryParse(null, numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);
    
            result = System.Byte.tryParse("notanumber", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);
    
            result = System.Byte.tryParse("54768", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(54768, numberResult.v);
    
            result = System.Byte.tryParse("-1", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(-1, numberResult.v);
    
            result = System.Byte.tryParse("2.5", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);
        },
        parseWorks: function () {
            Bridge.Test.Assert.areEqual(234, System.Byte.parse("234"));
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.ByteTests.f2);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.ByteTests.f3);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.ByteTests.f4);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.ByteTests.f5);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.ByteTests.f6);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.ByteTests.f7);
        },
        toStringWithoutRadixWorks: function () {
            Bridge.Test.Assert.areEqual("123", (123).toString());
        },
        toStringWithRadixWorks: function () {
            Bridge.Test.Assert.areEqual("123", (123).toString(10));
            Bridge.Test.Assert.areEqual("12", (18).toString(16));
        },
        getHashCodeWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((0)), Bridge.getHashCode((0)));
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((1)), Bridge.getHashCode((1)));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode((1)), Bridge.getHashCode((0)));
        },
        equalsWorks: function () {
            Bridge.Test.Assert.true(Bridge.equals((0), 0));
            Bridge.Test.Assert.false(Bridge.equals((1), 0));
            Bridge.Test.Assert.false(Bridge.equals((0), 1));
            Bridge.Test.Assert.true(Bridge.equals((1), 1));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.Assert.true((0) === 0);
            Bridge.Test.Assert.false((1) === 0);
            Bridge.Test.Assert.false((0) === 1);
            Bridge.Test.Assert.true((1) === 1);
    
            Bridge.Test.Assert.true(Bridge.equalsT(0, 0));
            Bridge.Test.Assert.false(Bridge.equalsT(1, 0));
            Bridge.Test.Assert.false(Bridge.equalsT(0, 1));
            Bridge.Test.Assert.true(Bridge.equalsT(1, 1));
        },
        compareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare((0), 0) === 0);
            Bridge.Test.Assert.true(Bridge.compare((1), 0) > 0);
            Bridge.Test.Assert.true(Bridge.compare((0), 1) < 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare(0, 0) === 0);
            Bridge.Test.Assert.true(Bridge.compare(1, 0) > 0);
            Bridge.Test.Assert.true(Bridge.compare(0, 1) < 0);
        }
    });
    
    Bridge.ns("Bridge.ClientTest.SimpleTypes.ByteTests", $_);
    
    Bridge.apply($_.Bridge.ClientTest.SimpleTypes.ByteTests, {
        f1: function (err) {
            return Bridge.is(err, System.OverflowException);
        },
        f2: function () {
            System.Byte.parse("");
        },
        f3: function () {
            System.Byte.parse(null);
        },
        f4: function () {
            System.Byte.parse("notanumber");
        },
        f5: function () {
            System.Byte.parse("54768");
        },
        f6: function () {
            System.Byte.parse("-1");
        },
        f7: function () {
            System.Byte.parse("2.5");
        }
    });
    
    Bridge.define('Bridge.ClientTest.SimpleTypes.CharTests', {
        typePropertiesAreInt32: function () {
            Bridge.Test.Assert.true(Bridge.is(0, System.Char));
            Bridge.Test.Assert.false(Bridge.is(0.5, System.Char));
            Bridge.Test.Assert.false(Bridge.is(-1, System.Char));
            Bridge.Test.Assert.false(Bridge.is(65536, System.Char));
            Bridge.Test.Assert.areEqual("System.Char", Bridge.getTypeName(System.Char));
        },
        castsWork: function () {
            var i1 = -1, i2 = 0, i3 = 234, i4 = 65535, i5 = 65536;
            var ni1 = -1, ni2 = 0, ni3 = 234, ni4 = 65535, ni5 = 65536, ni6 = null;
    
            Bridge.Test.Assert.areStrictEqual$1(65535, (i1 & 65535), "-1 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(0, (i2 & 65535), "0 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(234, (i3 & 65535), "234 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(65535, (i4 & 65535), "65535 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(0, (i5 & 65535), "65536 unchecked");
    
            Bridge.Test.Assert.areStrictEqual$1(65535, Bridge.Int.clipu16(ni1), "nullable -1 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(0, Bridge.Int.clipu16(ni2), "nullable 0 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(234, Bridge.Int.clipu16(ni3), "nullable 234 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(65535, Bridge.Int.clipu16(ni4), "nullable 65535 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(0, Bridge.Int.clipu16(ni5), "nullable 65536 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(null, Bridge.Int.clipu16(ni6), "null unchecked");
    
            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(i1, System.Char);
            }, $_.Bridge.ClientTest.SimpleTypes.CharTests.f1);
            Bridge.Test.Assert.areStrictEqual$1(0, Bridge.Int.check(i2, System.Char), "0 checked");
            Bridge.Test.Assert.areStrictEqual$1(234, Bridge.Int.check(i3, System.Char), "234 checked");
            Bridge.Test.Assert.areStrictEqual$1(65535, Bridge.Int.check(i4, System.Char), "65535 checked");
            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(i5, System.Char);
            }, $_.Bridge.ClientTest.SimpleTypes.CharTests.f1);
    
            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(ni1, System.Char);
            }, $_.Bridge.ClientTest.SimpleTypes.CharTests.f1);
            Bridge.Test.Assert.areStrictEqual$1(0, Bridge.Int.check(ni2, System.Char), "nullable 0 checked");
            Bridge.Test.Assert.areStrictEqual$1(234, Bridge.Int.check(ni3, System.Char), "nullable 234 checked");
            Bridge.Test.Assert.areStrictEqual$1(65535, Bridge.Int.check(ni4, System.Char), "nullable 65535 checked");
            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(ni5, System.Char);
            }, $_.Bridge.ClientTest.SimpleTypes.CharTests.f1);
            Bridge.Test.Assert.areStrictEqual$1(null, Bridge.Int.check(ni6, System.Char), "null checked");
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueWorks: function () {
            Bridge.Test.Assert.areEqual(0, this.getDefaultValue(System.Char));
        },
        defaultConstructorReturnsZero: function () {
            Bridge.Test.Assert.areStrictEqual(0, Number());
        },
        creatingInstanceReturnsZero: function () {
            Bridge.Test.Assert.areStrictEqual(0, Bridge.createInstance(System.Char));
        },
        constantsWork: function () {
            Bridge.Test.Assert.areEqual(0, 0);
            Bridge.Test.Assert.areEqual(65535, 65535);
        },
        charComparisonWorks: function () {
            var a = 97, a2 = 97, b = 98;
            Bridge.Test.Assert.true(a === a2);
            Bridge.Test.Assert.false(a === b);
            Bridge.Test.Assert.false(a !== a2);
            Bridge.Test.Assert.true(a !== b);
            Bridge.Test.Assert.false(a < a2);
            Bridge.Test.Assert.true(a < b);
        },
        parseWorks: function () {
            Bridge.Test.Assert.areEqual$1(97, System.Char.charCodeAt("a", 0), "Parse 1");
            Bridge.Test.Assert.throws$5($_.Bridge.ClientTest.SimpleTypes.CharTests.f2, "Parse 2");
            Bridge.Test.Assert.throws$5($_.Bridge.ClientTest.SimpleTypes.CharTests.f3, "Parse 3");
            Bridge.Test.Assert.throws$5($_.Bridge.ClientTest.SimpleTypes.CharTests.f4, "Parse 4");
        },
        formatWorks: function () {
            Bridge.Test.Assert.areEqual("0023", System.Char.format((35), "x4"));
        },
        iFormattableToStringWorks: function () {
            Bridge.Test.Assert.areEqual("0023", System.Char.format((35), "x4"));
        },
        toStringWorks: function () {
            Bridge.Test.Assert.areEqual("A", String.fromCharCode((65)));
        },
        getHashCodeWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((48)), Bridge.getHashCode((48)));
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((49)), Bridge.getHashCode((49)));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode((49)), Bridge.getHashCode((48)));
        },
        equalsWorks: function () {
            Bridge.Test.Assert.true(Bridge.equals((48), 48));
            Bridge.Test.Assert.false(Bridge.equals((49), 48));
            Bridge.Test.Assert.false(Bridge.equals((48), 49));
            Bridge.Test.Assert.true(Bridge.equals((49), 49));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.Assert.true((48) === 48);
            Bridge.Test.Assert.false((49) === 48);
            Bridge.Test.Assert.false((48) === 49);
            Bridge.Test.Assert.true((49) === 49);
        },
        compareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare((49), 48) > 0);
            Bridge.Test.Assert.true(Bridge.compare((48), 49) < 0);
            Bridge.Test.Assert.true(Bridge.compare((48), 48) === 0);
            Bridge.Test.Assert.true(Bridge.compare((49), 49) === 0);
        },
        isLowerWorks: function () {
            Bridge.Test.Assert.true$1(Bridge.isLower(97), "#1");
            Bridge.Test.Assert.false$1(Bridge.isLower(65), "#2");
            Bridge.Test.Assert.false$1(Bridge.isLower(51), "#3");
        },
        isUpperWorks: function () {
            Bridge.Test.Assert.true$1(Bridge.isUpper(65), "#1");
            Bridge.Test.Assert.false$1(Bridge.isUpper(97), "#2");
            Bridge.Test.Assert.false$1(Bridge.isUpper(51), "#3");
        },
        toLowerWorks: function () {
            Bridge.Test.Assert.areEqual(97, String.fromCharCode(65).toLowerCase().charCodeAt(0));
            Bridge.Test.Assert.areEqual(97, String.fromCharCode(97).toLowerCase().charCodeAt(0));
            Bridge.Test.Assert.areEqual(51, String.fromCharCode(51).toLowerCase().charCodeAt(0));
        },
        toUpperWorks: function () {
            Bridge.Test.Assert.areEqual(65, String.fromCharCode(65).toUpperCase().charCodeAt(0));
            Bridge.Test.Assert.areEqual(65, String.fromCharCode(97).toUpperCase().charCodeAt(0));
            Bridge.Test.Assert.areEqual(51, String.fromCharCode(51).toUpperCase().charCodeAt(0));
        },
        isDigitWorks: function () {
            Bridge.Test.Assert.true$1(System.Char.isDigit(48), "#1");
            Bridge.Test.Assert.false$1(System.Char.isDigit(46), "#2");
            Bridge.Test.Assert.false$1(System.Char.isDigit(65), "#3");
        },
        isWhiteSpaceWorks: function () {
            Bridge.Test.Assert.true$1(System.Char.isWhiteSpace(String.fromCharCode(32)), "#1");
            Bridge.Test.Assert.true$1(System.Char.isWhiteSpace(String.fromCharCode(10)), "#2");
            Bridge.Test.Assert.false$1(System.Char.isWhiteSpace(String.fromCharCode(65)), "#3");
        },
        isDigitWithStringAndIndexWorks: function () {
            Bridge.Test.Assert.true$1(System.Char.isDigit("abc0def".charCodeAt(3)), "#1");
            Bridge.Test.Assert.true$1(System.Char.isDigit("1".charCodeAt(0)), "#2");
            Bridge.Test.Assert.true$1(System.Char.isDigit("abcdef5".charCodeAt(6)), "#3");
            Bridge.Test.Assert.true$1(System.Char.isDigit("9abcdef".charCodeAt(0)), "#4");
            Bridge.Test.Assert.false$1(System.Char.isDigit(".012345".charCodeAt(0)), "#5");
            Bridge.Test.Assert.false$1(System.Char.isDigit("012345.".charCodeAt(6)), "#6");
            Bridge.Test.Assert.false$1(System.Char.isDigit("012.345".charCodeAt(3)), "#7");
        },
        isWhiteSpaceWithStringAndIndexWorks: function () {
            Bridge.Test.Assert.true$1(System.Char.isWhiteSpace("abc def".charAt(3)), "#1");
            Bridge.Test.Assert.true$1(System.Char.isWhiteSpace("\t".charAt(0)), "#2");
            Bridge.Test.Assert.true$1(System.Char.isWhiteSpace("abcdef\r".charAt(6)), "#3");
            Bridge.Test.Assert.true$1(System.Char.isWhiteSpace("\nabcdef".charAt(0)), "#4");
            Bridge.Test.Assert.false$1(System.Char.isWhiteSpace(".\r\n     ".charAt(0)), "#5");
            Bridge.Test.Assert.false$1(System.Char.isWhiteSpace("\r\n    .".charAt(6)), "#6");
            Bridge.Test.Assert.false$1(System.Char.isWhiteSpace("\r  .\n  ".charAt(3)), "#7");
        }
    });
    
    Bridge.ns("Bridge.ClientTest.SimpleTypes.CharTests", $_);
    
    Bridge.apply($_.Bridge.ClientTest.SimpleTypes.CharTests, {
        f1: function (err) {
            return Bridge.is(err, System.OverflowException);
        },
        f2: function () {
            System.Char.charCodeAt(null, 0);
        },
        f3: function () {
            System.Char.charCodeAt("", 0);
        },
        f4: function () {
            System.Char.charCodeAt("ab", 0);
        }
    });
    
    Bridge.define('Bridge.ClientTest.SimpleTypes.DecimalTests', {
        assertIsDecimalAndEqualTo: function (v, d, message) {
            if (message === void 0) { message = null; }
            Bridge.Test.Assert.areStrictEqual$1(true, Bridge.is(v, System.Decimal), message);
            Bridge.Test.Assert.areStrictEqual$1(System.Double.format(d, 'G'), v.toString(), message);
        },
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.true(Bridge.is(System.Decimal(0.5), System.Decimal));
            Bridge.Test.Assert.areEqual("System.Decimal", Bridge.getTypeName(System.Decimal));
            var d = System.Decimal(0.0);
            Bridge.Test.Assert.true(Bridge.is(d, System.Decimal));
            Bridge.Test.Assert.true(Bridge.is(d, System.IFormattable));
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueIs0: function () {
            this.assertIsDecimalAndEqualTo(this.getDefaultValue(System.Decimal), 0);
        },
        creatingInstanceReturnsZero: function () {
            this.assertIsDecimalAndEqualTo(Bridge.createInstance(System.Decimal), 0);
        },
        constantsWork: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal.One, 1);
            this.assertIsDecimalAndEqualTo(System.Decimal.Zero, 0);
            this.assertIsDecimalAndEqualTo(System.Decimal.MinusOne, -1);
        },
        defaultConstructorReturnsZero: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(0), 0);
        },
        convertingConstructorsWork: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(0.5), 0.5);
            this.assertIsDecimalAndEqualTo(System.Decimal(1.5), 1.5);
            this.assertIsDecimalAndEqualTo(System.Decimal(2), 2);
            this.assertIsDecimalAndEqualTo(System.Decimal(System.Int64(3)), 3);
            this.assertIsDecimalAndEqualTo(System.Decimal(4), 4);
            this.assertIsDecimalAndEqualTo(System.Decimal(System.UInt64(5)), 5);
        },
        formatWorks: function () {
            Bridge.Test.Assert.areEqual("123", Bridge.Int.format(System.Decimal(291.0), "x"));
        },
        iFormattableToStringWorks: function () {
            Bridge.Test.Assert.areEqual("123", Bridge.Int.format(System.Decimal(291.0), "x"));
        },
        toStringWithoutRadixWorks: function () {
            Bridge.Test.Assert.areEqual("123", Bridge.Int.format(System.Decimal(123.0), 'G'));
        },
        addWithStringWorks: function () {
            var d1 = System.Decimal(1.0);
            var s1 = d1 + "#";
    
            Bridge.Test.Assert.areEqual$1("1#", s1, "decimal?");
    
            var d2 = System.Decimal(2.0);
            var s2 = d2 + "!";
    
            Bridge.Test.Assert.areEqual$1("2!", s2, "decimal");
        },
        conversionsToDecimalWork: function () {
            var x = 0;
            Bridge.Test.Assert.areDeepEqual(System.Decimal(1.0), System.Decimal((((((x + 1) | 0))) & 255)));
            Bridge.Test.Assert.areDeepEqual(System.Decimal(2.0), System.Decimal(Bridge.Int.sxb(((((x + 2) | 0))) & 255)));
            Bridge.Test.Assert.areDeepEqual(System.Decimal(3.0), System.Decimal(Bridge.Int.sxs(((((x + 3) | 0))) & 65535)));
            Bridge.Test.Assert.areDeepEqual(System.Decimal(4.0), System.Decimal((((((x + 4) | 0))) & 65535)));
            Bridge.Test.Assert.areDeepEqual(System.Decimal(5.0), System.Decimal((((((x + 5) | 0))) & 65535)));
            Bridge.Test.Assert.areDeepEqual(System.Decimal(6.0), System.Decimal((((x + 6) | 0))));
            Bridge.Test.Assert.areDeepEqual(System.Decimal(7.0), System.Decimal((((((x + 7) | 0))) >>> 0)));
            Bridge.Test.Assert.areDeepEqual(System.Decimal(8.0), System.Decimal(System.Int64((((x + 8) | 0)))));
            Bridge.Test.Assert.areDeepEqual(System.Decimal(9.0), System.Decimal(Bridge.Int.clipu64((((x + 9) | 0)))));
            Bridge.Test.Assert.areDeepEqual(System.Decimal(10.5), System.Decimal((x + 10.5)));
            Bridge.Test.Assert.areDeepEqual(System.Decimal(11.5), System.Decimal((x + 11.5)));
        },
        conversionsFromDecimalWork: function () {
            var x = 0;
            Bridge.Test.Assert.areEqual(1, System.Decimal.toInt(System.Decimal((((x + 1) | 0))), System.Byte));
            Bridge.Test.Assert.areEqual(2, System.Decimal.toInt(System.Decimal((((x + 2) | 0))), System.SByte));
            Bridge.Test.Assert.areEqual(3, System.Decimal.toInt(System.Decimal((((x + 3) | 0))), System.Int16));
            Bridge.Test.Assert.areEqual(4, System.Decimal.toInt(System.Decimal((((x + 4) | 0))), System.UInt16));
            Bridge.Test.Assert.areEqual(5, System.Decimal.toInt(System.Decimal((((x + 5) | 0))), System.Char));
            Bridge.Test.Assert.areEqual(6, System.Decimal.toInt(System.Decimal((((x + 6) | 0))), System.Int32));
            Bridge.Test.Assert.areEqual(7, System.Decimal.toInt(System.Decimal((((x + 7) | 0))), System.UInt32));
            Bridge.Test.Assert.true(System.Int64(8).equals(System.Decimal.toInt(System.Decimal((((x + 8) | 0))), System.Int64)));
            Bridge.Test.Assert.true(System.UInt64(9).equals(System.Decimal.toInt(System.Decimal((((x + 9) | 0))), System.UInt64)));
            Bridge.Test.Assert.areEqual(10.5, System.Decimal.toFloat(System.Decimal((x + 10.5))));
            Bridge.Test.Assert.areEqual(11.5, System.Decimal.toFloat(System.Decimal((x + 11.5))));
        },
        operatorsWork: function () {
            var $t;
            var x = System.Decimal(3);
            this.assertIsDecimalAndEqualTo(x.clone(), 3);
            this.assertIsDecimalAndEqualTo(x.neg(), -3);
            this.assertIsDecimalAndEqualTo(x.add(System.Decimal(4.0)), 7);
            this.assertIsDecimalAndEqualTo(x.sub(System.Decimal(2.0)), 1);
            this.assertIsDecimalAndEqualTo(($t = x, x = x.inc(), $t), 3);
            this.assertIsDecimalAndEqualTo((x = x.inc()), 5);
            this.assertIsDecimalAndEqualTo(($t = x, x = x.dec(), $t), 5);
            this.assertIsDecimalAndEqualTo((x = x.dec()), 3);
            this.assertIsDecimalAndEqualTo(x.mul(System.Decimal(3.0)), 9);
            this.assertIsDecimalAndEqualTo(x.div(System.Decimal(2.0)), 1.5);
            this.assertIsDecimalAndEqualTo(System.Decimal(14.0).mod(x), 2);
            Bridge.Test.Assert.true(x.equalsT(System.Decimal(3.0)));
            Bridge.Test.Assert.false(x.equalsT(System.Decimal(4.0)));
            Bridge.Test.Assert.false(x.ne(System.Decimal(3.0)));
            Bridge.Test.Assert.true(x.ne(System.Decimal(4.0)));
            Bridge.Test.Assert.true(x.gt(System.Decimal(1.0)));
            Bridge.Test.Assert.false(x.gt(System.Decimal(3.0)));
            Bridge.Test.Assert.true(x.gte(System.Decimal(3.0)));
            Bridge.Test.Assert.false(x.gte(System.Decimal(4.0)));
            Bridge.Test.Assert.true(x.lt(System.Decimal(4.0)));
            Bridge.Test.Assert.false(x.lt(System.Decimal(3.0)));
            Bridge.Test.Assert.true(x.lte(System.Decimal(3.0)));
            Bridge.Test.Assert.false(x.lte(System.Decimal(2.0)));
        },
        addWorks: function () {
            Bridge.Test.Assert.areDeepEqual(System.Decimal(7.0), System.Decimal(3.0).add(System.Decimal(4.0)));
        },
        ceilingWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(3.4).ceil(), 4);
        },
        divideWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(3.0).div(System.Decimal(4.0)), 0.75);
        },
        floorWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(3.2).floor(), 3);
        },
        remainderWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(14.0).mod(System.Decimal(3.0)), 2);
        },
        multiplyWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(3.0).mul(System.Decimal(2.0)), 6);
        },
        negateWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(0).sub(System.Decimal(3.0)), -3);
        },
        roundWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 6), 3);
        },
        roundWithModeWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 0), 4, "Up 3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 0), 4, "Up 3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 0), 4, "Up 3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 0), -4, "Up -3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 0), -4, "Up -3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 0), -4, "Up -3.8m");
    
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 1), 3, "Down 3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 1), 3, "Down 3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 1), 3, "Down 3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 1), -3, "Down -3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 1), -3, "Down -3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 1), -3, "Down -3.8m");
    
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 2), 4, "InfinityPos 3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 2), 4, "InfinityPos 3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 2), 4, "InfinityPos 3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 2), -3, "InfinityPos -3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 2), -3, "InfinityPos -3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 2), -3, "InfinityPos -3.8m");
    
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 3), 3, "InfinityNeg 3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 3), 3, "InfinityNeg 3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 3), 3, "InfinityNeg 3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 3), -4, "InfinityNeg -3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 3), -4, "InfinityNeg -3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 3), -4, "InfinityNeg -3.8m");
    
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 5), 4, "TowardsZero 3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 5), 3, "TowardsZero 3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 5), 3, "TowardsZero 3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 5), -3, "TowardsZero -3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 5), -3, "TowardsZero -3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 5), -4, "TowardsZero -3.8m");
    
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 4), 4, "AwayFromZero 3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 4), 4, "AwayFromZero 3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 4), 3, "AwayFromZero 3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 4), -3, "AwayFromZero -3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 4), -4, "AwayFromZero -3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 4), -4, "AwayFromZero -3.8m");
    
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 7), 4, "Ceil 3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 7), 4, "Ceil 3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 7), 3, "Ceil 3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 7), -3, "Ceil -3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 7), -3, "Ceil -3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 7), -4, "Ceil -3.8m");
    
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 8), 4, "Floor 3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 8), 3, "Floor 3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 8), 3, "Floor 3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 8), -3, "Floor -3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 8), -4, "Floor -3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 8), -4, "Floor -3.8m");
    
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.8), 6), 4, "ToEven 3.8m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.5), 6), 4, "ToEven 3.5m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(3.2), 6), 3, "ToEven 3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.2), 6), -3, "ToEven -3.2m");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.5), 6), -4, "ToEven -3.5");
            this.assertIsDecimalAndEqualTo(System.Decimal.round(System.Decimal(-3.8), 6), -4, "ToEven -3.8m");
        },
        subtractWorks: function () {
            this.assertIsDecimalAndEqualTo(System.Decimal(7.0).sub(System.Decimal(3.0)), 4);
        },
        getHashCodeWorks: function () {
            Bridge.Test.Assert.areDeepEqual(Bridge.getHashCode((System.Decimal(0.0))), Bridge.getHashCode((System.Decimal(0.0))));
            Bridge.Test.Assert.areDeepEqual(Bridge.getHashCode((System.Decimal(1.0))), Bridge.getHashCode((System.Decimal(1.0))));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode((System.Decimal(1.0))), Bridge.getHashCode((System.Decimal(0.0))));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode((System.Decimal(0.5))), Bridge.getHashCode((System.Decimal(0.0))));
        },
        objectEqualsWorks: function () {
            Bridge.Test.Assert.true(Bridge.equals((System.Decimal(0.0)), System.Decimal(0.0)));
            Bridge.Test.Assert.false(Bridge.equals((System.Decimal(1.0)), System.Decimal(0.0)));
            Bridge.Test.Assert.false(Bridge.equals((System.Decimal(0.0)), System.Decimal(0.5)));
            Bridge.Test.Assert.true(Bridge.equals((System.Decimal(1.0)), System.Decimal(1.0)));
            Bridge.Test.Assert.false(Bridge.equals((System.Decimal(0.0)), System.Decimal.MaxValue));
        },
        decimalEqualsWorks: function () {
            Bridge.Test.Assert.true((System.Decimal(0.0)).equalsT(System.Decimal(0.0)));
            Bridge.Test.Assert.false((System.Decimal(1.0)).equalsT(System.Decimal(0.0)));
            Bridge.Test.Assert.false((System.Decimal(0.0)).equalsT(System.Decimal(0.5)));
            Bridge.Test.Assert.true((System.Decimal(1.0)).equalsT(System.Decimal(1.0)));
            Bridge.Test.Assert.false((System.Decimal(0.0)).equalsT(System.Decimal.MaxValue));
        },
        compareToWorks: function () {
            Bridge.Test.Assert.true((System.Decimal(0.0)).compareTo(System.Decimal(0.0)) === 0);
            Bridge.Test.Assert.true((System.Decimal(1.0)).compareTo(System.Decimal(0.0)) > 0);
            Bridge.Test.Assert.true((System.Decimal(0.0)).compareTo(System.Decimal(0.5)) < 0);
            Bridge.Test.Assert.true((System.Decimal(1.0)).compareTo(System.Decimal(1.0)) === 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare(System.Decimal(0.0), System.Decimal(0.0)) === 0);
            Bridge.Test.Assert.true(Bridge.compare(System.Decimal(1.0), System.Decimal(0.0)) > 0);
            Bridge.Test.Assert.true(Bridge.compare(System.Decimal(0.0), System.Decimal(0.5)) < 0);
            Bridge.Test.Assert.true(Bridge.compare(System.Decimal(1.0), System.Decimal(1.0)) === 0);
        },
        fullCoalesceWorks: function () {
            var a = System.Decimal(1.0);
            var b = a.equalsT(System.Decimal(1.0)) ? System.Decimal(2.0) : System.Decimal(3.0);
    
            this.assertIsDecimalAndEqualTo(b, 2);
        },
        shortCoalesceWorks: function () {
            var $t, $t1;
            var c = System.Decimal(1.0);
            var d = ($t = c, $t != null ? $t : System.Decimal(2.0));
    
            this.assertIsDecimalAndEqualTo(d, 1);
    
            var e = System.Decimal(3);
            var f = ($t1 = e, $t1 != null ? $t1 : System.Decimal(0));
    
            this.assertIsDecimalAndEqualTo(f, 3);
        }
    });
    
    Bridge.define('Bridge.ClientTest.SimpleTypes.DoubleTests', {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.true(Bridge.is(0.5, System.Double));
            Bridge.Test.Assert.areEqual("System.Double", Bridge.getTypeName(System.Double));
            var d = 0.0;
            Bridge.Test.Assert.true(Bridge.is(d, System.Double));
            Bridge.Test.Assert.true(Bridge.is(d, System.IFormattable));
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueIs0: function () {
            Bridge.Test.Assert.areStrictEqual(0, this.getDefaultValue(System.Double));
        },
        creatingInstanceReturnsZero: function () {
            Bridge.Test.Assert.areEqual(0, Bridge.createInstance(System.Double));
        },
        constantsWork: function () {
            var zero = 0;
            Bridge.Test.Assert.true$1(System.Double.max > Bridge.cast(1.7E+308, System.Double), "MaxValue should be correct");
            Bridge.Test.Assert.areEqual$1(4.94065645841247E-324, 4.94065645841247E-324, "MinValue should be correct");
            Bridge.Test.Assert.true$1(isNaN(Number.NaN), "NaN should be correct");
            Bridge.Test.Assert.areStrictEqual$1(1 / zero, Number.POSITIVE_INFINITY, "PositiveInfinity should be correct");
            Bridge.Test.Assert.areStrictEqual$1(-1 / zero, Number.NEGATIVE_INFINITY, "NegativeInfinity should be correct");
        },
        defaultConstructorReturnsZero: function () {
            Bridge.Test.Assert.areStrictEqual(0, Number());
        },
        formatWorks: function () {
            Bridge.Test.Assert.areEqual("123", System.Double.format((291.0), "x"));
        },
        iFormattableToStringWorks: function () {
            Bridge.Test.Assert.areEqual("123", System.Double.format((291.0), "x"));
        },
        toStringWorks: function () {
            Bridge.Test.Assert.areEqual("123", System.Double.format((123.0), 'G'));
        },
        toExponentialWorks: function () {
            Bridge.Test.Assert.areEqual("1.23e+2", (123.0).toExponential());
        },
        toExponentialWithFractionalDigitsWorks: function () {
            Bridge.Test.Assert.areEqual("1.2e+2", (123.0).toExponential(1));
        },
        toFixed: function () {
            Bridge.Test.Assert.areEqual("123", (123.0).toFixed());
        },
        toFixedWithFractionalDigitsWorks: function () {
            Bridge.Test.Assert.areEqual("123.0", (123.0).toFixed(1));
        },
        toPrecisionWorks: function () {
            Bridge.Test.Assert.areEqual("12345", (12345.0).toPrecision());
        },
        toPrecisionWithPrecisionWorks: function () {
            Bridge.Test.Assert.areEqual("1.2e+4", (12345.0).toPrecision(2));
        },
        isPositiveInfinityWorks: function () {
            var inf = "Infinity";
            Bridge.Test.Assert.false$1((-inf === Number.POSITIVE_INFINITY), "-inf");
            Bridge.Test.Assert.false$1((0.0 === Number.POSITIVE_INFINITY), "0.0");
            Bridge.Test.Assert.false$1((Number.NaN === Number.POSITIVE_INFINITY), "Double.NaN");
        },
        isNegativeInfinityWorks: function () {
            var inf = "Infinity";
            Bridge.Test.Assert.false((inf === Number.NEGATIVE_INFINITY));
            Bridge.Test.Assert.true((-inf === Number.NEGATIVE_INFINITY));
            Bridge.Test.Assert.false((0.0 === Number.NEGATIVE_INFINITY));
            Bridge.Test.Assert.false((Number.NaN === Number.NEGATIVE_INFINITY));
        },
        isInfinityWorks: function () {
            var inf = "Infinity";
            Bridge.Test.Assert.true((Math.abs(inf) === Number.POSITIVE_INFINITY));
            Bridge.Test.Assert.true((Math.abs(-inf) === Number.POSITIVE_INFINITY));
            Bridge.Test.Assert.false((Math.abs(0.0) === Number.POSITIVE_INFINITY));
            Bridge.Test.Assert.false((Math.abs(Number.NaN) === Number.POSITIVE_INFINITY));
        },
        isFiniteWorks: function () {
            var zero = 0, one = 1;
            Bridge.Test.Assert.true(isFinite(one));
            Bridge.Test.Assert.false(isFinite(one / zero));
            Bridge.Test.Assert.false(isFinite(zero / zero));
        },
        isNaNWorks: function () {
            var zero = 0, one = 1;
            Bridge.Test.Assert.false(isNaN(one));
            Bridge.Test.Assert.false(isNaN(one / zero));
            Bridge.Test.Assert.true(isNaN(zero / zero));
        },
        getHashCodeWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((0.0)), Bridge.getHashCode((0.0)));
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((1.0)), Bridge.getHashCode((1.0)));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode((1.0)), Bridge.getHashCode((0.0)));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode((0.5)), Bridge.getHashCode((0.0)));
        },
        objectEqualsWorks: function () {
            Bridge.Test.Assert.true(Bridge.equals((0.0), 0.0));
            Bridge.Test.Assert.false(Bridge.equals((1.0), 0.0));
            Bridge.Test.Assert.false(Bridge.equals((0.0), 0.5));
            Bridge.Test.Assert.true(Bridge.equals((1.0), 1.0));
        },
        doubleEqualsWorks: function () {
            Bridge.Test.Assert.true((0.0) === 0.0);
            Bridge.Test.Assert.false((1.0) === 0.0);
            Bridge.Test.Assert.false((0.0) === 0.5);
            Bridge.Test.Assert.true((1.0) === 1.0);
        },
        compareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare((0.0), 0.0) === 0);
            Bridge.Test.Assert.true(Bridge.compare((1.0), 0.0) > 0);
            Bridge.Test.Assert.true(Bridge.compare((0.0), 0.5) < 0);
            Bridge.Test.Assert.true(Bridge.compare((1.0), 1.0) === 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare(0.0, 0.0) === 0);
            Bridge.Test.Assert.true(Bridge.compare(1.0, 0.0) > 0);
            Bridge.Test.Assert.true(Bridge.compare(0.0, 0.5) < 0);
            Bridge.Test.Assert.true(Bridge.compare(1.0, 1.0) === 0);
        }
    });
    
    Bridge.define('Bridge.ClientTest.SimpleTypes.EnumTests', {
        typePropertiesAreCorrect: function () {
            //Assert.AreEqual("System.Enum", typeof(Enum).GetClassName());
            Bridge.Test.Assert.areEqual("Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum", Bridge.getTypeName(Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum));
            Bridge.Test.Assert.true(Bridge.hasValue(Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum.FirstValue));
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueOfEnumClassIsNull: function () {
            Bridge.Test.Assert.areStrictEqual(null, this.getDefaultValue(System.Enum));
        },
        defaultValueOfEnumTypeIsFirstValue: function () {
            Bridge.Test.Assert.areStrictEqual(Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum.FirstValue, this.getDefaultValue(Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum));
        },
        defaultConstructorOfEnumTypeReturnsZero: function () {
            Bridge.Test.Assert.areStrictEqual(0, new Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum().valueOf());
        },
        firstValueOfEnumIsZero: function () {
            Bridge.Test.Assert.areStrictEqual(Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum.FirstValue, Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum.FirstValue);
        },
        creatingInstanceOfEnumTypeReturnsZero: function () {
            Bridge.Test.Assert.areStrictEqual(Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum.FirstValue, Bridge.createInstance(Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum));
        },
        defaultExpressionWithEnumReturnsZero: function () {
            Bridge.Test.Assert.areStrictEqual(Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum.FirstValue, Bridge.getDefaultValue(Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum));
        },
        getHashCodeWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.getHashCode(Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum.FirstValue), Bridge.getHashCode(Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum.FirstValue));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode(Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum.SecondValue), Bridge.getHashCode(Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum.FirstValue));
        },
        equalsWorks: function () {
            Bridge.Test.Assert.true(Bridge.equals(Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum.FirstValue, Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum.FirstValue));
            Bridge.Test.Assert.false(Bridge.equals(Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum.FirstValue, Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum.SecondValue));
        }
    });
    
    Bridge.define('Bridge.ClientTest.SimpleTypes.EnumTests.FlagsEnum', {
        statics: {
            None: 0,
            FirstValue: 1,
            SecondValue: 2,
            ThirdValue: 4
        },
        $enum: true,
        $flags: true
    });
    
    Bridge.define('Bridge.ClientTest.SimpleTypes.EnumTests.TestEnum', {
        statics: {
            FirstValue: 0,
            SecondValue: 1,
            ThirdValue: 2
        },
        $enum: true
    });
    
    Bridge.define('Bridge.ClientTest.SimpleTypes.Int16Tests', {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.true(Bridge.is(0, System.Int16));
            Bridge.Test.Assert.false(Bridge.is(0.5, System.Int16));
            Bridge.Test.Assert.false(Bridge.is(-32769, System.Int16));
            Bridge.Test.Assert.false(Bridge.is(32768, System.Int16));
            Bridge.Test.Assert.areEqual("System.Int16", Bridge.getTypeName(System.Int16));
    
            var s = 0;
            Bridge.Test.Assert.true(Bridge.is(s, System.Int16));
            Bridge.Test.Assert.true(Bridge.is(s, System.IComparable$1(System.Int16)));
            Bridge.Test.Assert.true(Bridge.is(s, System.IEquatable$1(System.Int16)));
            Bridge.Test.Assert.true(Bridge.is(s, System.IFormattable));
    
        },
        castsWork: function () {
            var i1 = -32769, i2 = -32768, i3 = 5754, i4 = 32767, i5 = 32768;
            var ni1 = -32769, ni2 = -32768, ni3 = 5754, ni4 = 32767, ni5 = 32768, ni6 = null;
    
            Bridge.Test.Assert.areStrictEqual$1(32767, Bridge.Int.sxs(i1 & 65535), "-32769 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(-32768, Bridge.Int.sxs(i2 & 65535), "-32768 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(5754, Bridge.Int.sxs(i3 & 65535), "5754 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(32767, Bridge.Int.sxs(i4 & 65535), "32767 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(-32768, Bridge.Int.sxs(i5 & 65535), "32768 unchecked");
    
            Bridge.Test.Assert.areStrictEqual$1(32767, Bridge.Int.clip16(ni1), "nullable -32769 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(-32768, Bridge.Int.clip16(ni2), "nullable -32768 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(5754, Bridge.Int.clip16(ni3), "nullable 5754 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(32767, Bridge.Int.clip16(ni4), "nullable 32767 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(-32768, Bridge.Int.clip16(ni5), "nullable 32768 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(null, Bridge.Int.clip16(ni6), "null unchecked");
    
            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(i1, System.Int16);
            }, $_.Bridge.ClientTest.SimpleTypes.Int16Tests.f1);
            Bridge.Test.Assert.areStrictEqual$1(-32768, Bridge.Int.check(i2, System.Int16), "-32768 checked");
            Bridge.Test.Assert.areStrictEqual$1(5754, Bridge.Int.check(i3, System.Int16), "5754 checked");
            Bridge.Test.Assert.areStrictEqual$1(32767, Bridge.Int.check(i4, System.Int16), "32767 checked");
            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(i5, System.Int16);
            }, $_.Bridge.ClientTest.SimpleTypes.Int16Tests.f1);
    
            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(ni1, System.Int16);
            }, $_.Bridge.ClientTest.SimpleTypes.Int16Tests.f1);
            Bridge.Test.Assert.areStrictEqual$1(-32768, Bridge.Int.check(ni2, System.Int16), "nullable -32768 checked");
            Bridge.Test.Assert.areStrictEqual$1(5754, Bridge.Int.check(ni3, System.Int16), "nullable 5754 checked");
            Bridge.Test.Assert.areStrictEqual$1(32767, Bridge.Int.check(ni4, System.Int16), "nullable 32767 checked");
            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(ni5, System.Int16);
            }, $_.Bridge.ClientTest.SimpleTypes.Int16Tests.f1);
            Bridge.Test.Assert.areStrictEqual$1(null, Bridge.Int.check(ni6, System.Int16), "null checked");
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueIs0: function () {
            Bridge.Test.Assert.areStrictEqual(0, this.getDefaultValue(System.Int16));
        },
        defaultConstructorReturnsZero: function () {
            Bridge.Test.Assert.areStrictEqual(0, Number());
        },
        creatingInstanceReturnsZero: function () {
            Bridge.Test.Assert.areStrictEqual(0, Bridge.createInstance(System.Int16));
        },
        constantsWork: function () {
            Bridge.Test.Assert.areEqual(-32768, -32768);
            Bridge.Test.Assert.areEqual(32767, 32767);
        },
        formatWorks: function () {
            Bridge.Test.Assert.areEqual("123", System.Int16.format((291), "x"));
        },
        iFormattableToStringWorks: function () {
            Bridge.Test.Assert.areEqual("123", System.Int16.format((291), "x"));
        },
        tryParseWorks: function () {
            var numberResult = { };
            var result = System.Int16.tryParse("234", numberResult);
            Bridge.Test.Assert.true(result);
            Bridge.Test.Assert.areEqual(234, numberResult.v);
    
            result = System.Int16.tryParse("", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);
    
            result = System.Int16.tryParse(null, numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);
    
            result = System.Int16.tryParse("notanumber", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);
    
            result = System.Int16.tryParse("54768", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(54768, numberResult.v);
    
            result = System.Int16.tryParse("-55678", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(-55678, numberResult.v);
    
            result = System.Int16.tryParse("2.5", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);
        },
        parseWorks: function () {
            Bridge.Test.Assert.areEqual(234, System.Int16.parse("234"));
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.Int16Tests.f2);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.Int16Tests.f3);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.Int16Tests.f4);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.Int16Tests.f5);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.Int16Tests.f6);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.Int16Tests.f7);
        },
        toStringWithoutRadixWorks: function () {
            Bridge.Test.Assert.areEqual("123", (123).toString());
        },
        toStringWithRadixWorks: function () {
            Bridge.Test.Assert.areEqual("123", (123).toString(10));
            Bridge.Test.Assert.areEqual("123", (291).toString(16));
        },
        getHashCodeWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((0)), Bridge.getHashCode((0)));
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((1)), Bridge.getHashCode((1)));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode((1)), Bridge.getHashCode((0)));
        },
        equalsWorks: function () {
            Bridge.Test.Assert.true(Bridge.equals((0), 0));
            Bridge.Test.Assert.false(Bridge.equals((1), 0));
            Bridge.Test.Assert.false(Bridge.equals((0), 1));
            Bridge.Test.Assert.true(Bridge.equals((1), 1));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.Assert.true((0) === 0);
            Bridge.Test.Assert.false((1) === 0);
            Bridge.Test.Assert.false((0) === 1);
            Bridge.Test.Assert.true((1) === 1);
    
            Bridge.Test.Assert.true(Bridge.equalsT(0, 0));
            Bridge.Test.Assert.false(Bridge.equalsT(1, 0));
            Bridge.Test.Assert.false(Bridge.equalsT(0, 1));
            Bridge.Test.Assert.true(Bridge.equalsT(1, 1));
        },
        compareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare((0), 0) === 0);
            Bridge.Test.Assert.true(Bridge.compare((1), 0) > 0);
            Bridge.Test.Assert.true(Bridge.compare((0), 1) < 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare(0, 0) === 0);
            Bridge.Test.Assert.true(Bridge.compare(1, 0) > 0);
            Bridge.Test.Assert.true(Bridge.compare(0, 1) < 0);
        }
    });
    
    Bridge.ns("Bridge.ClientTest.SimpleTypes.Int16Tests", $_);
    
    Bridge.apply($_.Bridge.ClientTest.SimpleTypes.Int16Tests, {
        f1: function (err) {
            return Bridge.is(err, System.OverflowException);
        },
        f2: function () {
            System.Int16.parse("");
        },
        f3: function () {
            System.Int16.parse(null);
        },
        f4: function () {
            System.Int16.parse("notanumber");
        },
        f5: function () {
            System.Int16.parse("54768");
        },
        f6: function () {
            System.Int16.parse("-55678");
        },
        f7: function () {
            System.Int16.parse("2.5");
        }
    });
    
    Bridge.define('Bridge.ClientTest.SimpleTypes.Int32Tests', {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.true(Bridge.is(0, System.Int32));
            Bridge.Test.Assert.false(Bridge.is(0.5, System.Int32));
            Bridge.Test.Assert.false(Bridge.is(System.Int64([2147483647,-1]), System.Int32));
            Bridge.Test.Assert.false(Bridge.is(2147483648, System.Int32));
            Bridge.Test.Assert.areEqual("System.Int32", Bridge.getTypeName(System.Int32));
    
            var i = 0;
            Bridge.Test.Assert.true(Bridge.is(i, System.Int32));
            Bridge.Test.Assert.true(Bridge.is(i, System.IComparable$1(System.Int32)));
            Bridge.Test.Assert.true(Bridge.is(i, System.IEquatable$1(System.Int32)));
            Bridge.Test.Assert.true(Bridge.is(i, System.IFormattable));
        },
        castsWork: function () {
            var i1 = System.Int64([2147483647,-1]), i2 = System.Int64.lift(-2147483648), i3 = System.Int64(5754), i4 = System.Int64(2147483647), i5 = System.Int64(2147483648);
            var ni1 = System.Int64([2147483647,-1]), ni2 = System.Int64.lift(-2147483648), ni3 = System.Int64(5754), ni4 = System.Int64(2147483647), ni5 = System.Int64(2147483648), ni6 = System.Int64.lift(null);
    
            Bridge.Test.Assert.areStrictEqual$1(2147483647, System.Int64.clip32(System.Nullable.getValue(i1)), "-2147483649 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(-2147483648, System.Int64.clip32(System.Nullable.getValue(i2)), "-2147483648 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(5754, System.Int64.clip32(System.Nullable.getValue(i3)), "5754 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(2147483647, System.Int64.clip32(System.Nullable.getValue(i4)), "2147483647 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(-2147483648, System.Int64.clip32(System.Nullable.getValue(i5)), "2147483648 unchecked");
    
            Bridge.Test.Assert.areStrictEqual$1(2147483647, System.Int64.clip32(ni1), "nullable -2147483649 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(-2147483648, System.Int64.clip32(ni2), "nullable -2147483648 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(5754, System.Int64.clip32(ni3), "nullable 5754 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(2147483647, System.Int64.clip32(ni4), "nullable 2147483647 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(-2147483648, System.Int64.clip32(ni5), "nullable 2147483648 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(null, System.Int64.clip32(ni6), "null unchecked");
    
            Bridge.Test.Assert.throws$1(function () {
                var b = System.Int64.check(System.Nullable.getValue(i1), System.Int32);
            }, $_.Bridge.ClientTest.SimpleTypes.Int32Tests.f1);
            Bridge.Test.Assert.areStrictEqual$1(-2147483648, System.Int64.check(System.Nullable.getValue(i2), System.Int32), "-2147483648 checked");
            Bridge.Test.Assert.areStrictEqual$1(5754, System.Int64.check(System.Nullable.getValue(i3), System.Int32), "5754 checked");
            Bridge.Test.Assert.areStrictEqual$1(2147483647, System.Int64.check(System.Nullable.getValue(i4), System.Int32), "2147483647 checked");
            Bridge.Test.Assert.throws$1(function () {
                var b = System.Int64.check(System.Nullable.getValue(i5), System.Int32);
            }, $_.Bridge.ClientTest.SimpleTypes.Int32Tests.f1);
    
            Bridge.Test.Assert.throws$1(function () {
                var b = System.Int64.check(ni1, System.Int32);
            }, $_.Bridge.ClientTest.SimpleTypes.Int32Tests.f1);
            Bridge.Test.Assert.areStrictEqual$1(-2147483648, System.Int64.check(ni2, System.Int32), "nullable -2147483648 checked");
            Bridge.Test.Assert.areStrictEqual$1(5754, System.Int64.check(ni3, System.Int32), "nullable 5754 checked");
            Bridge.Test.Assert.areStrictEqual$1(2147483647, System.Int64.check(ni4, System.Int32), "nullable 2147483647 checked");
            Bridge.Test.Assert.throws$1(function () {
                var b = System.Int64.check(ni5, System.Int32);
            }, $_.Bridge.ClientTest.SimpleTypes.Int32Tests.f1);
            Bridge.Test.Assert.areStrictEqual$1(null, System.Int64.check(ni6, System.Int32), "null checked");
        },
        typeIsWorksForInt32: function () {
            Bridge.Test.Assert.false(Bridge.is(null, System.Int32));
            Bridge.Test.Assert.false(Bridge.is(1.5, System.Int32));
            Bridge.Test.Assert.false(Bridge.is({ }, System.Int32));
            Bridge.Test.Assert.true(Bridge.is(1, System.Int32));
        },
        typeAsWorksForInt32: function () {
            Bridge.Test.Assert.false((Bridge.as(null, System.Int32, true)) != null);
            Bridge.Test.Assert.false((Bridge.as({ }, System.Int32, true)) != null);
            Bridge.Test.Assert.false((Bridge.as(1.5, System.Int32, true)) != null);
            Bridge.Test.Assert.true((Bridge.as(1, System.Int32, true)) != null);
        },
        unboxingWorksForInt32: function () {
            var _null = null;
            var o = { };
            var d = 1.5;
            var i = 1;
            Bridge.Test.Assert.areEqual(null, Bridge.cast(_null, System.Int32, true));
            Bridge.Test.Assert.throws$5(function () {
                var _ = Bridge.cast(o, System.Int32, true);
            }, "Cannot cast object to int?");
            Bridge.Test.Assert.throws$5(function () {
                var _ = Bridge.cast(d, System.Int32, true);
            }, "Cannot cast decimal to int?");
            Bridge.Test.Assert.areEqual(1, Bridge.cast(i, System.Int32, true));
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueIs0: function () {
            Bridge.Test.Assert.areStrictEqual(0, this.getDefaultValue(System.Int32));
        },
        defaultConstructorReturnsZero: function () {
            Bridge.Test.Assert.areStrictEqual(0, Number());
        },
        creatingInstanceReturnsZero: function () {
            Bridge.Test.Assert.areStrictEqual(0, Bridge.createInstance(System.Int32));
        },
        constantsWork: function () {
            Bridge.Test.Assert.areEqual(-2147483648, -2147483648);
            Bridge.Test.Assert.areEqual(2147483647, 2147483647);
        },
        formatWorks: function () {
            Bridge.Test.Assert.areEqual("123", System.Int32.format((291), "x"));
        },
        iFormattableToStringWorks: function () {
            Bridge.Test.Assert.areEqual("123", System.Int32.format((291), "x"));
        },
        tryParseWorks: function () {
            var numberResult = { };
            var result = System.Int32.tryParse("57574", numberResult);
            Bridge.Test.Assert.true(result);
            Bridge.Test.Assert.areEqual(57574, numberResult.v);
    
            result = System.Int32.tryParse("-14", numberResult);
            Bridge.Test.Assert.true(result);
            Bridge.Test.Assert.areEqual(-14, numberResult.v);
    
            result = System.Int32.tryParse("", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);
    
            result = System.Int32.tryParse(null, numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);
    
            result = System.Int32.tryParse("notanumber", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);
    
            result = System.Int32.tryParse("2.5", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);
        },
        parseWorks: function () {
            Bridge.Test.Assert.areEqual(57574, System.Int32.parse("57574"));
            Bridge.Test.Assert.areEqual(-14, System.Int32.parse("-14"));
    
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.Int32Tests.f2);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.Int32Tests.f3);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.Int32Tests.f4);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.Int32Tests.f5);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.Int32Tests.f6);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.Int32Tests.f7);
        },
        toStringWithoutRadixWorks: function () {
            Bridge.Test.Assert.areEqual("123", (123).toString());
        },
        toStringWithRadixWorks: function () {
            Bridge.Test.Assert.areEqual("123", (123).toString(10));
            Bridge.Test.Assert.areEqual("123", (291).toString(16));
        },
        getHashCodeWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((0)), Bridge.getHashCode((0)));
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((1)), Bridge.getHashCode((1)));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode((1)), Bridge.getHashCode((0)));
        },
        equalsWorks: function () {
            Bridge.Test.Assert.true(Bridge.equals((0), 0));
            Bridge.Test.Assert.false(Bridge.equals((1), 0));
            Bridge.Test.Assert.false(Bridge.equals((0), 1));
            Bridge.Test.Assert.true(Bridge.equals((1), 1));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.Assert.true((0) === 0);
            Bridge.Test.Assert.false((1) === 0);
            Bridge.Test.Assert.false((0) === 1);
            Bridge.Test.Assert.true((1) === 1);
    
            Bridge.Test.Assert.true(Bridge.equalsT(0, 0));
            Bridge.Test.Assert.false(Bridge.equalsT(1, 0));
            Bridge.Test.Assert.false(Bridge.equalsT(0, 1));
            Bridge.Test.Assert.true(Bridge.equalsT(1, 1));
        },
        compareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare((0), 0) === 0);
            Bridge.Test.Assert.true(Bridge.compare((1), 0) > 0);
            Bridge.Test.Assert.true(Bridge.compare((0), 1) < 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare(0, 0) === 0);
            Bridge.Test.Assert.true(Bridge.compare(1, 0) > 0);
            Bridge.Test.Assert.true(Bridge.compare(0, 1) < 0);
        },
        integerDivisionWorks: function () {
            var a = 17, b = 4, c = 0;
            Bridge.Test.Assert.areEqual(4, ((Bridge.Int.div(a, b)) | 0));
            Bridge.Test.Assert.areEqual(-4, ((Bridge.Int.div(((-a) | 0), b)) | 0));
            Bridge.Test.Assert.areEqual(-4, ((Bridge.Int.div(a, ((-b) | 0))) | 0));
            Bridge.Test.Assert.areEqual(4, ((Bridge.Int.div(((-a) | 0), ((-b) | 0))) | 0));
            Bridge.Test.Assert.throws(function () {
                var x = (Bridge.Int.div(a, c)) | 0;
            });
        },
        integerModuloWorks: function () {
            var a = 17, b = 4, c = 0;
            Bridge.Test.Assert.areEqual(1, a % b);
            Bridge.Test.Assert.areEqual(-1, ((-a) | 0) % b);
            Bridge.Test.Assert.areEqual(1, a % ((-b) | 0));
            Bridge.Test.Assert.areEqual(-1, ((-a) | 0) % ((-b) | 0));
            //Assert.Throws(() => { var x = a % c; });
        },
        integerDivisionByZeroThrowsDivideByZeroException: function () {
            var a = 17, b = 0;
            Bridge.Test.Assert.throws(function () {
                var x = (Bridge.Int.div(a, b)) | 0;
            });
        },
        doublesAreTruncatedWhenConvertedToIntegers: function () {
            var d1 = 4.5;
            var d2 = null;
            var d3 = 8.5;
            Bridge.Test.Assert.areEqual(4, Bridge.Int.clip32(d1));
            Bridge.Test.Assert.areEqual(-4, Bridge.Int.clip32(-d1));
            Bridge.Test.Assert.areEqual(null, Bridge.Int.clip32(d2));
            Bridge.Test.Assert.areEqual(8, Bridge.Int.clip32(System.Nullable.getValue(d3)));
            Bridge.Test.Assert.areEqual(-8, Bridge.Int.clip32(System.Nullable.getValue(System.Nullable.neg(d3))));
            Bridge.Test.Assert.areEqual(8, Bridge.Int.clip32(d3));
            Bridge.Test.Assert.areEqual(-8, Bridge.Int.clip32(System.Nullable.neg(d3)));
        }
    });
    
    Bridge.ns("Bridge.ClientTest.SimpleTypes.Int32Tests", $_);
    
    Bridge.apply($_.Bridge.ClientTest.SimpleTypes.Int32Tests, {
        f1: function (err) {
            return Bridge.is(err, System.OverflowException);
        },
        f2: function () {
            System.Int32.parse("");
        },
        f3: function () {
            System.Int32.parse(null);
        },
        f4: function () {
            System.Int32.parse("notanumber");
        },
        f5: function () {
            System.Int32.parse("2147483648");
        },
        f6: function () {
            System.Int32.parse("-2147483649");
        },
        f7: function () {
            System.Int32.parse("2.5");
        }
    });
    
    Bridge.define('Bridge.ClientTest.SimpleTypes.Int64Tests', {
        assertLong: function (expected, actual, message, checkedType) {
            if (message === void 0) { message = ""; }
            if (checkedType === void 0) { checkedType = "System.Int64"; }
            if (message == null) {
                message = "";
            }
    
            var typeMessage = message + "Type is " + checkedType;
            Bridge.Test.Assert.areEqual$1(checkedType, Bridge.getTypeName(Bridge.getType(actual)), typeMessage);
    
            Bridge.Test.Assert.areEqual$1(expected.toString(), actual.toString(), message);
        },
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.true(Bridge.is(System.Int64(0), System.Int64));
            Bridge.Test.Assert.false(Bridge.is(0.5, System.Int64));
            Bridge.Test.Assert.false(Bridge.is(1E+100, System.Int64));
            Bridge.Test.Assert.areEqual("System.Int64", Bridge.getTypeName(System.Int64));
    
            var l = System.Int64(0);
            Bridge.Test.Assert.true(Bridge.is(l, System.Int64));
            Bridge.Test.Assert.true(Bridge.is(l, System.IComparable$1(System.Int64)));
            Bridge.Test.Assert.true(Bridge.is(l, System.IEquatable$1(System.Int64)));
            Bridge.Test.Assert.true(Bridge.is(l, System.IFormattable));
        },
        minMaxValuesAreCorrect: function () {
            this.assertLong("-9223372036854775808", System.Int64.MinValue);
            this.assertLong("9223372036854775807", System.Int64.MaxValue);
        },
        castsWork: function () {
            var i3 = System.UInt64(5754), i4 = System.UInt64(System.Int64([-808,2147483647])), i5 = System.UInt64([-1816395584,-517669143]);
            var ni3 = System.UInt64(5754), ni4 = System.UInt64(System.Int64([-808,2147483647])), ni5 = System.UInt64([-1816395584,-517669143]), ni6 = System.UInt64.lift(null);
    
            Bridge.Test.Assert.true$1(System.Int64(5754).equals(System.Int64.clip64(i3)), "5754 unchecked");
            Bridge.Test.Assert.true$1(System.Int64([-808,2147483647]).equals(System.Int64.clip64(i4)), "9223372036854775000 unchecked");
            Bridge.Test.Assert.true$1(System.Int64.clip64(i5).lt(System.Int64(0)), "16223372036854776000 unchecked");
    
            Bridge.Test.Assert.true$1(System.Nullable.lifteq("equals", System.Int64(5754), System.Int64.clip64(ni3)), "nullable 5754 unchecked");
            Bridge.Test.Assert.true$1(System.Nullable.lifteq("equals", System.Int64([-808,2147483647]), System.Int64.clip64(ni4)), "nullable 9223372036854775000 unchecked");
            Bridge.Test.Assert.true$1(System.Nullable.liftcmp("lt", System.Int64.clip64(ni5), System.Int64(0)), "nullable 16223372036854776000 unchecked");
            Bridge.Test.Assert.true$1(System.Nullable.lifteq("equals", System.Int64.lift(null), System.Int64.clip64(ni6)), "null unchecked");
    
            Bridge.Test.Assert.true$1(System.Int64(5754).equals(System.Int64.check(i3, System.Int64)), "5754 checked");
            Bridge.Test.Assert.true$1(System.Int64([-808,2147483647]).equals(System.Int64.check(i4, System.Int64)), "9223372036854775000 checked");
    
            Bridge.Test.Assert.true$1(System.Nullable.lifteq("equals", System.Int64(5754), System.Int64.check(ni3, System.Int64)), "nullable 5754 checked");
            Bridge.Test.Assert.true$1(System.Nullable.lifteq("equals", System.Int64([-808,2147483647]), System.Int64.check(ni4, System.Int64)), "nullable 9223372036854775000 checked");
            Bridge.Test.Assert.true$1(System.Nullable.lifteq("equals", System.Int64.lift(null), System.Int64.check(ni6, System.Int64)), "null checked");
        },
        overflowWorks: function () {
            var min = System.Int64.MinValue;
            var max = System.Int64.MaxValue;
    
            Bridge.Test.Assert.true$1((max.add(System.Int64(1))).equals(min), "max + 1 unchecked");
            Bridge.Test.Assert.true$1((min.sub(System.Int64(1))).equals(max), "min - 1 unchecked");
            Bridge.Test.Assert.true$1(min.neg().equals(min), "-min unchecked");
    
            Bridge.Test.Assert.throws$1(function () {
                var l = max.add(System.Int64(1), 1);
            }, $_.Bridge.ClientTest.SimpleTypes.Int64Tests.f1);
            Bridge.Test.Assert.throws$1(function () {
                var l = min.sub(System.Int64(1), 1);
            }, $_.Bridge.ClientTest.SimpleTypes.Int64Tests.f1);
            Bridge.Test.Assert.throws$1(function () {
                var l = max.mul(min, 1);
            }, $_.Bridge.ClientTest.SimpleTypes.Int64Tests.f1);
            Bridge.Test.Assert.throws$1(function () {
                var l = max.mul(max, 1);
            }, $_.Bridge.ClientTest.SimpleTypes.Int64Tests.f1);
            Bridge.Test.Assert.throws$1(function () {
                var l = min.mul(min, 1);
            }, $_.Bridge.ClientTest.SimpleTypes.Int64Tests.f1);
            Bridge.Test.Assert.throws$1(function () {
                var l = min.neg(1);
            }, $_.Bridge.ClientTest.SimpleTypes.Int64Tests.f1);
        },
        combinedTypesOperationsWork: function () {
            var ub = 1;
            var sb = 2;
            var us = 3;
            var ss = 4;
            var ui = 5;
            var si = 6;
            var ul = System.UInt64(7);
    
            var l1 = System.Int64(256);
            var l2 = System.Int64(128);
            var l3 = System.Int64(65536);
            var l4 = System.Int64(32768);
            var l5 = System.Int64([0,1]);
            var l6 = System.Int64([-2147483648,0]);
            var l7 = System.Int64(1);
    
            this.assertLong("257", System.Int64(ub).add(l1));
            this.assertLong("130", System.Int64(sb).add(l2));
            this.assertLong("65539", System.Int64(us).add(l3));
            this.assertLong("32772", System.Int64(ss).add(l4));
            this.assertLong("4294967301", System.Int64(ui).add(l5));
            this.assertLong("2147483654", System.Int64(si).add(l6));
            this.assertLong("8", System.Int64.clip64(ul).add(l7));
    
            var dcml = System.Decimal(11.0);
            var dbl = 12.0;
            var flt = 13;
    
            var l = System.Int64(100);
    
            this.assertLong("111", dcml.add(System.Decimal(l)), null, "System.Decimal");
            this.assertLong("112", dbl + System.Int64.toNumber(l), null, "System.Int32");
            this.assertLong("113", flt + System.Int64.toNumber(l), null, "System.Int32");
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueIs0: function () {
            Bridge.Test.Assert.true(System.Int64(0).equals(this.getDefaultValue(System.Int64)));
        },
        defaultConstructorReturnsZero: function () {
            Bridge.Test.Assert.true(System.Int64(0).equals(new System.Int64()));
        },
        creatingInstanceReturnsZero: function () {
            Bridge.Test.Assert.true(System.Int64(0).equals(Bridge.createInstance(System.Int64)));
        },
        formatWorks: function () {
            Bridge.Test.Assert.areEqual("123", (System.Int64(291)).format("x"));
        },
        iFormattableToStringWorks: function () {
            Bridge.Test.Assert.areEqual("123", (System.Int64(291)).toString("x"));
        },
        tryParseWorks: function () {
            var numberResult = { };
            var result = System.Int64.tryParse("57574", numberResult);
            Bridge.Test.Assert.true(result);
            Bridge.Test.Assert.true(System.Int64(57574).equals(numberResult.v));
    
            result = System.Int64.tryParse("-14", numberResult);
            Bridge.Test.Assert.true(result);
            Bridge.Test.Assert.true(System.Int64(-14).equals(numberResult.v));
    
            result = System.Int64.tryParse("", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.true(System.Int64(0).equals(numberResult.v));
    
            result = System.Int64.tryParse(null, numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.true(System.Int64(0).equals(numberResult.v));
    
            result = System.Int64.tryParse("notanumber", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.true(System.Int64(0).equals(numberResult.v));
    
            result = System.Int64.tryParse("2.5", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.true(System.Int64(0).equals(numberResult.v));
    
            result = System.Int64.tryParse("-10000000000000000000", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.true(numberResult.v.equals(System.Int64(0)));
    
            result = System.Int64.tryParse("10000000000000000000", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.true(numberResult.v.equals(System.Int64(0)));
        },
        parseWorks: function () {
            Bridge.Test.Assert.true(System.Int64([568732647,3]).equals(System.Int64.parse("13453634535")));
            Bridge.Test.Assert.true(System.Int64([-1258093817,-54542]).equals(System.Int64.parse("-234253069384953")));
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.Int64Tests.f2);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.Int64Tests.f3);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.Int64Tests.f4);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.Int64Tests.f5);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.Int64Tests.f6);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.Int64Tests.f7);
        },
        castingOfLargeDoublesToInt64Works: function () {
            var d1 = 5000000000.5, d2 = -d1;
            Bridge.Test.Assert.true$1(System.Int64([705032704,1]).equals(Bridge.Int.clip64(d1)), "Positive");
            Bridge.Test.Assert.true$1(System.Int64([-705032704,-2]).equals(Bridge.Int.clip64(d2)), "Negative");
        },
        divisionOfLargeInt64Works: function () {
            var v1 = System.Int64([-1539607552,11]), v2 = v1.neg(), v3 = System.Int64(3);
            Bridge.Test.Assert.true$1(System.Int64([-513202518,3]).equals((v1.div(v3))), "Positive");
            Bridge.Test.Assert.true$1(System.Int64([513202518,-4]).equals((v2.div(v3))), "Negative");
        },
        toStringWithoutRadixWorks: function () {
            Bridge.Test.Assert.areEqual("123", (System.Int64(123)).toString());
        },
        toStringWithRadixWorks: function () {
            Bridge.Test.Assert.areEqual("123", (System.Int64(123)).toString(10));
            Bridge.Test.Assert.areEqual("123", (System.Int64(291)).toString(16));
        },
        getHashCodeWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((System.Int64(0))), Bridge.getHashCode((System.Int64(0))));
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((System.Int64(1))), Bridge.getHashCode((System.Int64(1))));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode((System.Int64(1))), Bridge.getHashCode((System.Int64(0))));
            Bridge.Test.Assert.true(System.Int64(Bridge.getHashCode(System.Int64([0,1]))).lte(System.Int64([-1,0])));
        },
        equalsWorks: function () {
            Bridge.Test.Assert.true(Bridge.equals((System.Int64(0)), System.Int64(0)));
            Bridge.Test.Assert.false(Bridge.equals((System.Int64(1)), System.Int64(0)));
            Bridge.Test.Assert.false(Bridge.equals((System.Int64(0)), System.Int64(1)));
            Bridge.Test.Assert.true(Bridge.equals((System.Int64(1)), System.Int64(1)));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.Assert.true((System.Int64(0)).equalsT(System.Int64(0)));
            Bridge.Test.Assert.false((System.Int64(1)).equalsT(System.Int64(0)));
            Bridge.Test.Assert.false((System.Int64(0)).equalsT(System.Int64(1)));
            Bridge.Test.Assert.true((System.Int64(1)).equalsT(System.Int64(1)));
    
            Bridge.Test.Assert.true(Bridge.equalsT(System.Int64(0), System.Int64(0)));
            Bridge.Test.Assert.false(Bridge.equalsT(System.Int64(1), System.Int64(0)));
            Bridge.Test.Assert.false(Bridge.equalsT(System.Int64(0), System.Int64(1)));
            Bridge.Test.Assert.true(Bridge.equalsT(System.Int64(1), System.Int64(1)));
        },
        compareToWorks: function () {
            Bridge.Test.Assert.true((System.Int64(0)).compareTo(System.Int64(0)) === 0);
            Bridge.Test.Assert.true((System.Int64(1)).compareTo(System.Int64(0)) > 0);
            Bridge.Test.Assert.true((System.Int64(0)).compareTo(System.Int64(1)) < 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare(System.Int64(0), System.Int64(0)) === 0);
            Bridge.Test.Assert.true(Bridge.compare(System.Int64(1), System.Int64(0)) > 0);
            Bridge.Test.Assert.true(Bridge.compare(System.Int64(0), System.Int64(1)) < 0);
        },
        shiftWorks: function () {
            var x = System.Int64(1);
    
            Bridge.Test.Assert.true(System.Int64(2).equals(x.shl(1)));
    
            Bridge.Test.Assert.true(System.Int64(256).equals(x.shl(8)));
            Bridge.Test.Assert.true(System.Int64(65536).equals(x.shl(16)));
            Bridge.Test.Assert.true(System.Int64(8388608).equals(x.shl(23)));
            Bridge.Test.Assert.true(System.Int64(16777216).equals(x.shl(24)));
            Bridge.Test.Assert.true(System.Int64(33554432).equals(x.shl(25)));
            Bridge.Test.Assert.true(System.Int64([0,1]).equals(x.shl(32)));
            Bridge.Test.Assert.true(System.Int64([0,32768]).equals(x.shl(47)));
            Bridge.Test.Assert.true(System.Int64([0,65536]).equals(x.shl(48)));
            Bridge.Test.Assert.true(System.Int64([0,131072]).equals(x.shl(49)));
            Bridge.Test.Assert.true(System.Int64([0,-2147483648]).equals(x.shl(63)));
            Bridge.Test.Assert.true(System.Int64(1).equals(x.shl(64)));
    
            var t = System.Int64(1);
            Bridge.Test.Assert.true(System.Int64(0).equals(t.shr(1)));
    
            var y = x.shl(63);
            Bridge.Test.Assert.true(System.Int64([0,-2147483648]).equals(y));
            Bridge.Test.Assert.true(System.Int64([0,-1073741824]).equals(y.shr(1)));
            Bridge.Test.Assert.true(System.Int64([0,-536870912]).equals(y.shr(2)));
            Bridge.Test.Assert.true(System.Int64([0,-268435456]).equals(y.shr(3)));
            Bridge.Test.Assert.true(System.Int64([0,-8388608]).equals(y.shr(8)));
            Bridge.Test.Assert.true(System.Int64([0,-2097152]).equals(y.shr(10)));
            Bridge.Test.Assert.true(System.Int64([0,-524288]).equals(y.shr(12)));
            Bridge.Test.Assert.true(System.Int64([0,-65536]).equals(y.shr(15)));
            Bridge.Test.Assert.true(System.Int64([0,-32768]).equals(y.shr(16)));
            Bridge.Test.Assert.true(System.Int64([0,-256]).equals(y.shr(23)));
            Bridge.Test.Assert.true(System.Int64([0,-128]).equals(y.shr(24)));
            Bridge.Test.Assert.true(System.Int64([0,-64]).equals(y.shr(25)));
            Bridge.Test.Assert.true(System.Int64(-2147483648).equals(y.shr(32)));
            Bridge.Test.Assert.true(System.Int64(-65536).equals(y.shr(47)));
            Bridge.Test.Assert.true(System.Int64(-32768).equals(y.shr(48)));
            Bridge.Test.Assert.true(System.Int64(-16384).equals(y.shr(49)));
            Bridge.Test.Assert.true(System.Int64(-1).equals(y.shr(63)));
            Bridge.Test.Assert.true(System.Int64([0,-2147483648]).equals(y.shr(64)));
        }
    });
    
    Bridge.ns("Bridge.ClientTest.SimpleTypes.Int64Tests", $_);
    
    Bridge.apply($_.Bridge.ClientTest.SimpleTypes.Int64Tests, {
        f1: function (err) {
            return Bridge.is(err, System.OverflowException);
        },
        f2: function () {
            System.Int64.parse("");
        },
        f3: function () {
            System.Int64.parse(null);
        },
        f4: function () {
            System.Int64.parse("notanumber");
        },
        f5: function () {
            System.Int64.parse("2.5");
        },
        f6: function () {
            System.Int64.parse("-10000000000000000000");
        },
        f7: function () {
            System.Int64.parse("10000000000000000000");
        }
    });
    
    Bridge.define('Bridge.ClientTest.SimpleTypes.JsDateTimeTests', {
        statics: {
            dateTimes: function () {
                // TEST
                // [#83] by C#
                var str = "2015-03-24T10:48:09.1500225+03:00";
                var bridgeDate = Bridge.Date.parse(str);
                var bridgeDate1 = new Date(str);
    
                Bridge.Test.Assert.areDeepEqual$1(bridgeDate1, bridgeDate, "[#83] C# bridgeDate = bridgeDate1");
    
                // TEST
                // [#83] by JavaScript code. This is to check the same issue as above and just to check another way of calling QUnit from JavaScript
                //Script.Write<dynamic>("var str = \"2015-03-24T10:48:09.1500225+03:00\";");
                //Script.Write<dynamic>("var bridgeDate2 = Bridge.Date.parse(str);");
                //Script.Write<dynamic>("var jsDate = new Date(Date.parse(str));");
                //Script.Write<dynamic>("var format = \"yyyy-MM-dd hh:mm:ss\";");
    
                //Script.Write<dynamic>("assert.deepEqual(Bridge.Date.format(bridgeDate2, format), Bridge.Date.format(jsDate, format), \"[#83] js\");");
            }
        },
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual("Date", Bridge.getTypeName(Date));
            var o = new Date();
            Bridge.Test.Assert.true$1(Bridge.is(o, Date), "o is DateTime");
        },
        defaultConstructorReturnsTodaysDate: function () {
            var dt = new Date();
            Bridge.Test.Assert.true(dt.getFullYear() > 2011);
        },
        creatingInstanceReturnsDateZero: function () {
            var fullYear = Bridge.createInstance(Date).getFullYear();
            Bridge.Test.Assert.true$1(1971 >= fullYear, "1971 >= " + fullYear);
        },
        millisecondSinceEpochConstructorWorks: function () {
            var dt = new Date(System.Int64([250327040,10]).toNumber());
            Bridge.Test.Assert.areEqual(1971, dt.getFullYear());
        },
        stringConstructorWorks: function () {
            var dt = new Date("Aug 12, 2012");
            Bridge.Test.Assert.areEqual(2012, dt.getFullYear());
            Bridge.Test.Assert.areEqual(8, (dt.getMonth() + 1));
            Bridge.Test.Assert.areEqual(12, dt.getDate());
        },
        yMDConstructorWorks: function () {
            var dt = new Date(2011, 7 - 1, 12);
            Bridge.Test.Assert.areEqual(2011, dt.getFullYear());
            Bridge.Test.Assert.areEqual(7, (dt.getMonth() + 1));
            Bridge.Test.Assert.areEqual(12, dt.getDate());
        },
        yMDHConstructorWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13);
            Bridge.Test.Assert.areEqual(2011, dt.getFullYear());
            Bridge.Test.Assert.areEqual(7, (dt.getMonth() + 1));
            Bridge.Test.Assert.areEqual(12, dt.getDate());
            Bridge.Test.Assert.areEqual(13, dt.getHours());
        },
        yMDHNConstructorWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42);
            Bridge.Test.Assert.areEqual(2011, dt.getFullYear());
            Bridge.Test.Assert.areEqual(7, (dt.getMonth() + 1));
            Bridge.Test.Assert.areEqual(12, dt.getDate());
            Bridge.Test.Assert.areEqual(13, dt.getHours());
            Bridge.Test.Assert.areEqual(42, dt.getMinutes());
        },
        yMDHNSConstructorWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56);
            Bridge.Test.Assert.areEqual(2011, dt.getFullYear());
            Bridge.Test.Assert.areEqual(7, (dt.getMonth() + 1));
            Bridge.Test.Assert.areEqual(12, dt.getDate());
            Bridge.Test.Assert.areEqual(13, dt.getHours());
            Bridge.Test.Assert.areEqual(42, dt.getMinutes());
            Bridge.Test.Assert.areEqual(56, dt.getSeconds());
        },
        yMDHNSUConstructorWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            Bridge.Test.Assert.areEqual(2011, dt.getFullYear());
            Bridge.Test.Assert.areEqual(7, (dt.getMonth() + 1));
            Bridge.Test.Assert.areEqual(12, dt.getDate());
            Bridge.Test.Assert.areEqual(13, dt.getHours());
            Bridge.Test.Assert.areEqual(42, dt.getMinutes());
            Bridge.Test.Assert.areEqual(56, dt.getSeconds());
            Bridge.Test.Assert.areEqual(345, dt.getMilliseconds());
        },
        nowWorks: function () {
            var dt = new Date();
            Bridge.Test.Assert.true(dt.getFullYear() > 2011);
        },
        uTCNowWorks: function () {
            var UTC = Bridge.Date.utcNow();
            var local = new Date();
            Bridge.Test.Assert.true(Math.abs((Bridge.Date.subdd(new Date(local.getUTCFullYear(), (local.getUTCMonth() + 1) - 1, local.getUTCDate(), local.getUTCHours(), local.getUTCMinutes(), local.getUTCSeconds(), local.getUTCMilliseconds()), UTC)).getTotalMinutes()) < 1000);
        },
        toUniversalWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            var UTC = Bridge.Date.toUTC(dt);
            Bridge.Test.Assert.areEqual(UTC.getFullYear(), dt.getUTCFullYear());
            Bridge.Test.Assert.areEqual((UTC.getMonth() + 1), (dt.getUTCMonth() + 1));
            Bridge.Test.Assert.areEqual(UTC.getDate(), dt.getUTCDate());
            Bridge.Test.Assert.areEqual(UTC.getHours(), dt.getUTCHours());
            Bridge.Test.Assert.areEqual(UTC.getMinutes(), dt.getUTCMinutes());
            Bridge.Test.Assert.areEqual(UTC.getSeconds(), dt.getUTCSeconds());
            Bridge.Test.Assert.areEqual(UTC.getMilliseconds(), dt.getUTCMilliseconds());
        },
        toLocalWorks: function () {
            var UTC = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            var dt = Bridge.Date.toLocal(UTC);
            Bridge.Test.Assert.areEqual(UTC.getFullYear(), dt.getUTCFullYear());
            Bridge.Test.Assert.areEqual((UTC.getMonth() + 1), (dt.getUTCMonth() + 1));
            Bridge.Test.Assert.areEqual(UTC.getDate(), dt.getUTCDate());
            Bridge.Test.Assert.areEqual(UTC.getHours(), dt.getUTCHours());
            Bridge.Test.Assert.areEqual(UTC.getMinutes(), dt.getUTCMinutes());
            Bridge.Test.Assert.areEqual(UTC.getSeconds(), dt.getUTCSeconds());
            Bridge.Test.Assert.areEqual(UTC.getMilliseconds(), dt.getUTCMilliseconds());
        },
        todayWorks: function () {
            var dt = Bridge.Date.today();
            Bridge.Test.Assert.true(dt.getFullYear() > 2011);
            Bridge.Test.Assert.areEqual(0, dt.getHours());
            Bridge.Test.Assert.areEqual(0, dt.getMinutes());
            Bridge.Test.Assert.areEqual(0, dt.getSeconds());
            Bridge.Test.Assert.areEqual(0, dt.getMilliseconds());
        },
        formatWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13);
            Bridge.Test.Assert.areEqual("2011-07-12", Bridge.Date.format(dt, "yyyy-MM-dd"));
        },
        localeFormatWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13);
            Bridge.Test.Assert.areEqual("2011-07-12", Bridge.Date.format(dt, "yyyy-MM-dd"));
        },
        getFullYearWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            Bridge.Test.Assert.areEqual(2011, dt.getFullYear());
        },
        getMonthWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            Bridge.Test.Assert.areEqual(7, (dt.getMonth() + 1));
        },
        getDateWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            Bridge.Test.Assert.areEqual(12, dt.getDate());
        },
        getHoursWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            Bridge.Test.Assert.areEqual(13, dt.getHours());
        },
        getMinutesWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            Bridge.Test.Assert.areEqual(42, dt.getMinutes());
        },
        getSecondsWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            Bridge.Test.Assert.areEqual(56, dt.getSeconds());
        },
        getMillisecondsWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            Bridge.Test.Assert.areEqual(345, dt.getMilliseconds());
        },
        getDayWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42, 56, 345);
            Bridge.Test.Assert.areEqual(2, dt.getDay());
        },
        getTimeWorks: function () {
            var dt = new Date(System.Int64(Date.UTC(1970, 1 - 1, 2)).toNumber());
            Bridge.Test.Assert.true(System.Int64(86400000).equals(System.Int64((dt).getTime())));
        },
        valueOfWorks: function () {
            var dt = new Date(System.Int64(Date.UTC(1970, 1 - 1, 2)).toNumber());
            Bridge.Test.Assert.areEqual(86400000, dt.valueOf());
        },
        getTimezoneOffsetWorks: function () {
            var dt = new Date(System.Int64(0).toNumber());
            Bridge.Test.Assert.areEqual(((Bridge.Int.div(Bridge.cast((new Date(1970, 1 - 1, 1).valueOf()), System.Int32), 60000)) | 0), dt.getTimezoneOffset());
        },
        getUTCFullYearWorks: function () {
            var dt = new Date(System.Int64(Date.UTC(2011, 7 - 1, 12, 13, 42, 56, 345)).toNumber());
            Bridge.Test.Assert.areEqual(2011, dt.getUTCFullYear());
        },
        getUtcMonthWorks: function () {
            var dt = new Date(System.Int64(Date.UTC(2011, 7 - 1, 12, 13, 42, 56, 345)).toNumber());
            Bridge.Test.Assert.areEqual(7, (dt.getUTCMonth() + 1));
        },
        getUTCDateWorks: function () {
            var dt = new Date(System.Int64(Date.UTC(2011, 7 - 1, 12, 13, 42, 56, 345)).toNumber());
            Bridge.Test.Assert.areEqual(12, dt.getUTCDate());
        },
        getUTCHoursWorks: function () {
            var dt = new Date(System.Int64(Date.UTC(2011, 7 - 1, 12, 13, 42, 56, 345)).toNumber());
            Bridge.Test.Assert.areEqual(13, dt.getUTCHours());
        },
        getUTCMinutesWorks: function () {
            var dt = new Date(System.Int64(Date.UTC(2011, 7 - 1, 12, 13, 42, 56, 345)).toNumber());
            Bridge.Test.Assert.areEqual(42, dt.getUTCMinutes());
        },
        getUTCSecondsWorks: function () {
            var dt = new Date(System.Int64(Date.UTC(2011, 7 - 1, 12, 13, 42, 56, 345)).toNumber());
            Bridge.Test.Assert.areEqual(56, dt.getUTCSeconds());
        },
        getUTCMillisecondsWorks: function () {
            var dt = new Date(System.Int64(Date.UTC(2011, 7 - 1, 12, 13, 42, 56, 345)).toNumber());
            Bridge.Test.Assert.areEqual(345, dt.getUTCMilliseconds());
        },
        getUTCDayWorks: function () {
            var dt = new Date(System.Int64(Date.UTC(2011, 7 - 1, 12, 13, 42, 56, 345)).toNumber());
            Bridge.Test.Assert.areEqual(2, dt.getUTCDay());
        },
        parseWorks: function () {
            var dt = Bridge.Date.parse("Aug 12, 2012");
            Bridge.Test.Assert.areEqual(2012, dt.getFullYear());
            Bridge.Test.Assert.areEqual(8, (dt.getMonth() + 1));
            Bridge.Test.Assert.areEqual(12, dt.getDate());
        },
        parseExactWorks: function () {
            var dt = Bridge.Date.parseExact("2012-12-08", "yyyy-dd-MM");
            Bridge.Test.Assert.areEqual(2012, dt.getFullYear());
            Bridge.Test.Assert.areEqual(8, (dt.getMonth() + 1));
            Bridge.Test.Assert.areEqual(12, dt.getDate());
        },
        parseExactWithCultureWorks: function () {
            var dt = Bridge.Date.parseExact("2012-12-08", "yyyy-dd-MM", System.Globalization.CultureInfo.invariantCulture);
            Bridge.Test.Assert.areEqual(2012, dt.getFullYear());
            Bridge.Test.Assert.areEqual(8, (dt.getMonth() + 1));
            Bridge.Test.Assert.areEqual(12, dt.getDate());
        },
        parseExactUTCWorks: function () {
            //var dt = DateTime.ParseExactUTC("2012-12-08", "yyyy-dd-MM");
            var dt = Bridge.Date.parseExact("2012-12-08", "yyyy-dd-MM", null, true);
            Bridge.Test.Assert.areEqual(2012, dt.getUTCFullYear());
            Bridge.Test.Assert.areEqual(8, (dt.getUTCMonth() + 1));
            Bridge.Test.Assert.areEqual(12, dt.getUTCDate());
        },
        parseExactUTCWithCultureWorks: function () {
            var dt = Bridge.Date.parseExact("2012-12-08", "yyyy-dd-MM", System.Globalization.CultureInfo.invariantCulture, true);
            //var dt = DateTime.ParseExact("2012-12-08", "yyyy-dd-MM", CultureInfo.InvariantCulture);
            Bridge.Test.Assert.areEqual(2012, dt.getUTCFullYear());
            Bridge.Test.Assert.areEqual(8, (dt.getUTCMonth() + 1));
            Bridge.Test.Assert.areEqual(12, dt.getUTCDate());
        },
        toDateStringWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42);
            var s = dt.toDateString();
            Bridge.Test.Assert.true(System.String.indexOf(s, "2011") >= 0 && System.String.indexOf(s, "42") < 0);
        },
        toTimeStringWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42);
            var s = dt.toTimeString();
            Bridge.Test.Assert.true(System.String.indexOf(s, "2011") < 0 && System.String.indexOf(s, "42") >= 0);
        },
        toUTCStringWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42);
            var s = dt.toUTCString();
            Bridge.Test.Assert.true(System.String.indexOf(s, "2011") >= 0 && System.String.indexOf(s, "42") >= 0);
        },
        toLocaleDateStringWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42);
            var s = dt.toLocaleDateString();
            Bridge.Test.Assert.true(System.String.indexOf(s, "2011") >= 0 && System.String.indexOf(s, "42") < 0);
        },
        toLocaleTimeStringWorks: function () {
            var dt = new Date(2011, 7 - 1, 12, 13, 42);
            var s = dt.toLocaleTimeString();
            Bridge.Test.Assert.true(System.String.indexOf(s, "2011") < 0 && System.String.indexOf(s, "42") >= 0);
        },
        assertDateUTC: function (dt, year, month, day, hours, minutes, seconds, milliseconds) {
            Bridge.Test.Assert.areEqual(year, dt.getUTCFullYear());
            Bridge.Test.Assert.areEqual(month, (dt.getUTCMonth() + 1));
            Bridge.Test.Assert.areEqual(day, dt.getUTCDate());
            Bridge.Test.Assert.areEqual(hours, dt.getUTCHours());
            Bridge.Test.Assert.areEqual(minutes, dt.getUTCMinutes());
            Bridge.Test.Assert.areEqual(seconds, dt.getUTCSeconds());
            Bridge.Test.Assert.areEqual(milliseconds, dt.getUTCMilliseconds());
        },
        subtractingDatesWorks: function () {
            var ts = Bridge.Date.subdd(new Date(2011, 7 - 1, 12), new Date(2011, 7 - 1, 11));
            Bridge.Test.Assert.areEqual(86400000, ts.getTotalMilliseconds());
        },
        subtractMethodReturningTimeSpanWorks: function () {
            Bridge.Test.Assert.areDeepEqual(new System.TimeSpan(1, 0, 0, 0), Bridge.Date.subdd(new Date(2011, 6 - 1, 12), new Date(2011, 6 - 1, 11)));
            Bridge.Test.Assert.areDeepEqual(new System.TimeSpan(1, 2, 0, 0), Bridge.Date.subdd(new Date(2011, 6 - 1, 12, 15, 0, 0), new Date(2011, 6 - 1, 11, 13, 0, 0)));
        },
        dateEqualityWorks: function () {
            Bridge.Test.Assert.true(Bridge.equals(new Date(2011, 7 - 1, 12), new Date(2011, 7 - 1, 12)));
            Bridge.Test.Assert.false(Bridge.equals(new Date(2011, 7 - 1, 12), new Date(2011, 7 - 1, 13)));
            Bridge.Test.Assert.areStrictEqual(false, Bridge.equals(new Date(2011, 7 - 1, 12), null));
            Bridge.Test.Assert.areStrictEqual(false, Bridge.equals(null, new Date(2011, 7 - 1, 12)));
            Bridge.Test.Assert.areStrictEqual(true, Bridge.equals(null, null));
        },
        dateInequalityWorks: function () {
            Bridge.Test.Assert.false(!Bridge.equals(new Date(2011, 7 - 1, 12), new Date(2011, 7 - 1, 12)));
            Bridge.Test.Assert.true(!Bridge.equals(new Date(2011, 7 - 1, 12), new Date(2011, 7 - 1, 13)));
            Bridge.Test.Assert.areStrictEqual(true, !Bridge.equals(new Date(2011, 7 - 1, 12), null));
            Bridge.Test.Assert.areStrictEqual(true, !Bridge.equals(null, new Date(2011, 7 - 1, 12)));
            Bridge.Test.Assert.areStrictEqual(false, !Bridge.equals(null, null));
        },
        dateLessThanWorks: function () {
            Bridge.Test.Assert.true(Bridge.Date.lt(new Date(2011, 7 - 1, 11), new Date(2011, 7 - 1, 12)));
            Bridge.Test.Assert.false(Bridge.Date.lt(new Date(2011, 7 - 1, 12), new Date(2011, 7 - 1, 12)));
            Bridge.Test.Assert.false(Bridge.Date.lt(new Date(2011, 7 - 1, 13), new Date(2011, 7 - 1, 12)));
        },
        dateLessEqualWorks: function () {
            Bridge.Test.Assert.true(Bridge.Date.lte(new Date(2011, 7 - 1, 11), new Date(2011, 7 - 1, 12)));
            Bridge.Test.Assert.true(Bridge.Date.lte(new Date(2011, 7 - 1, 12), new Date(2011, 7 - 1, 12)));
            Bridge.Test.Assert.false(Bridge.Date.lte(new Date(2011, 7 - 1, 13), new Date(2011, 7 - 1, 12)));
        },
        dateGreaterThanWorks: function () {
            Bridge.Test.Assert.false(Bridge.Date.gt(new Date(2011, 7 - 1, 11), new Date(2011, 7 - 1, 12)));
            Bridge.Test.Assert.false(Bridge.Date.gt(new Date(2011, 7 - 1, 12), new Date(2011, 7 - 1, 12)));
            Bridge.Test.Assert.true(Bridge.Date.gt(new Date(2011, 7 - 1, 13), new Date(2011, 7 - 1, 12)));
        },
        dateGreaterEqualWorks: function () {
            Bridge.Test.Assert.false(Bridge.Date.gte(new Date(2011, 7 - 1, 11), new Date(2011, 7 - 1, 12)));
            Bridge.Test.Assert.true(Bridge.Date.gte(new Date(2011, 7 - 1, 12), new Date(2011, 7 - 1, 12)));
            Bridge.Test.Assert.true(Bridge.Date.gte(new Date(2011, 7 - 1, 13), new Date(2011, 7 - 1, 12)));
        },
        getHashCodeWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.getHashCode(new Date(System.Int64(0).toNumber())), Bridge.getHashCode(new Date(System.Int64(0).toNumber())));
            Bridge.Test.Assert.areEqual(Bridge.getHashCode(new Date(System.Int64(1).toNumber())), Bridge.getHashCode(new Date(System.Int64(1).toNumber())));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode(new Date(System.Int64(1).toNumber())), Bridge.getHashCode(new Date(System.Int64(0).toNumber())));
            Bridge.Test.Assert.true(System.Int64(Bridge.getHashCode(new Date(3000, 1 - 1, 1))).lt(System.Int64([-1,0])));
        },
        equalsWorks: function () {
            Bridge.Test.Assert.true(Bridge.equals(new Date(System.Int64(0).toNumber()), new Date(System.Int64(0).toNumber())));
            Bridge.Test.Assert.false(Bridge.equals(new Date(System.Int64(1).toNumber()), new Date(System.Int64(0).toNumber())));
            Bridge.Test.Assert.false(Bridge.equals(new Date(System.Int64(0).toNumber()), new Date(System.Int64(1).toNumber())));
            Bridge.Test.Assert.true(Bridge.equals(new Date(System.Int64(1).toNumber()), new Date(System.Int64(1).toNumber())));
        },
        dateTimeEqualsWorks: function () {
            Bridge.Test.Assert.true(Bridge.equalsT(new Date(System.Int64(0).toNumber()), new Date(System.Int64(0).toNumber())));
            Bridge.Test.Assert.false(Bridge.equalsT(new Date(System.Int64(1).toNumber()), new Date(System.Int64(0).toNumber())));
            Bridge.Test.Assert.false(Bridge.equalsT(new Date(System.Int64(0).toNumber()), new Date(System.Int64(1).toNumber())));
            Bridge.Test.Assert.true(Bridge.equalsT(new Date(System.Int64(1).toNumber()), new Date(System.Int64(1).toNumber())));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.Assert.true(Bridge.equalsT(Bridge.cast(new Date(System.Int64(0).toNumber()), System.IEquatable$1(Date)), new Date(System.Int64(0).toNumber())));
            Bridge.Test.Assert.false(Bridge.equalsT(Bridge.cast(new Date(System.Int64(1).toNumber()), System.IEquatable$1(Date)), new Date(System.Int64(0).toNumber())));
            Bridge.Test.Assert.false(Bridge.equalsT(Bridge.cast(new Date(System.Int64(0).toNumber()), System.IEquatable$1(Date)), new Date(System.Int64(1).toNumber())));
            Bridge.Test.Assert.true(Bridge.equalsT(Bridge.cast(new Date(System.Int64(1).toNumber()), System.IEquatable$1(Date)), new Date(System.Int64(1).toNumber())));
        },
        compareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare(new Date(System.Int64(0).toNumber()), new Date(System.Int64(0).toNumber())) === 0);
            Bridge.Test.Assert.true(Bridge.compare(new Date(System.Int64(1).toNumber()), new Date(System.Int64(0).toNumber())) > 0);
            Bridge.Test.Assert.true(Bridge.compare(new Date(System.Int64(0).toNumber()), new Date(System.Int64(1).toNumber())) < 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare(Bridge.cast(new Date(System.Int64(0).toNumber()), System.IComparable$1(Date)), new Date(System.Int64(0).toNumber())) === 0);
            Bridge.Test.Assert.true(Bridge.compare(Bridge.cast(new Date(System.Int64(1).toNumber()), System.IComparable$1(Date)), new Date(System.Int64(0).toNumber())) > 0);
            Bridge.Test.Assert.true(Bridge.compare(Bridge.cast(new Date(System.Int64(0).toNumber()), System.IComparable$1(Date)), new Date(System.Int64(1).toNumber())) < 0);
        }
    });
    
    Bridge.define('Bridge.ClientTest.SimpleTypes.ObjectTests', {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.true(true);
            Bridge.Test.Assert.areEqual("Object", Bridge.getTypeName(Object));
        },
        canGetHashCodeForObject: function () {
            var o = { };
            var c = Bridge.getHashCode(o);
            Bridge.Test.Assert.true(Bridge.is(c, System.Int32));
        },
        repeatedCallsToGetHashCodeReturnsSameValue: function () {
            var o = { };
            Bridge.Test.Assert.areEqual(Bridge.getHashCode(o), Bridge.getHashCode(o));
        },
        objectIsEqualToItself: function () {
            var o = { };
            Bridge.Test.Assert.true(Bridge.equals(o, o));
        },
        objectIsNotEqualToOtherObject: function () {
            Bridge.Test.Assert.false(Bridge.equals({ }, { }));
        },
        staticEqualsWorks: function () {
            var o1 = { }, o2 = { };
            Bridge.Test.Assert.true(Bridge.equals(null, null));
            Bridge.Test.Assert.false(Bridge.equals(null, o1));
            Bridge.Test.Assert.false(Bridge.equals(o1, null));
            Bridge.Test.Assert.true(Bridge.equals(o1, o1));
            Bridge.Test.Assert.false(Bridge.equals(o1, o2));
        },
        referenceEqualsWorks: function () {
            var o1 = { }, o2 = { }, n = null;
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(n, n), "n, n");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(n, undefined), "n, Script.Undefined");
            Bridge.Test.Assert.false$1(Bridge.referenceEquals(o1, o2), "o1, o2");
            Bridge.Test.Assert.false$1(Bridge.referenceEquals(o1, n), "o1, n");
            Bridge.Test.Assert.false$1(Bridge.referenceEquals(o1, undefined), "o1, Script.Undefined");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(o1, o1), "o1, o1");
        },
        toStringOverride: function () {
            var c1 = new Bridge.ClientTest.SimpleTypes.ObjectTests.C1(), c2 = new Bridge.ClientTest.SimpleTypes.ObjectTests.C2();
            Bridge.Test.Assert.areEqual$1("test", c1.toString(), "#1");
            Bridge.Test.Assert.areEqual$1("test", c2.toString(), "#1");
        }
    });
    
    Bridge.define('Bridge.ClientTest.SimpleTypes.ObjectTests.C1', {
        toString: function () {
            return "test";
        }
    });
    
    Bridge.define('Bridge.ClientTest.SimpleTypes.SByteTests', {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.true(Bridge.is(0, System.SByte));
            Bridge.Test.Assert.false(Bridge.is(0.5, System.SByte));
            Bridge.Test.Assert.false(Bridge.is(-129, System.SByte));
            Bridge.Test.Assert.false(Bridge.is(128, System.SByte));
            Bridge.Test.Assert.areEqual("System.SByte", Bridge.getTypeName(System.SByte));
    
            var b = 0;
            Bridge.Test.Assert.true(Bridge.is(b, System.SByte));
            Bridge.Test.Assert.true(Bridge.is(b, System.IFormattable));
        },
        castsWork: function () {
            var i1 = -129, i2 = -128, i3 = 80, i4 = 127, i5 = 128;
            var ni1 = -129, ni2 = -128, ni3 = 80, ni4 = 127, ni5 = 128, ni6 = null;
    
            Bridge.Test.Assert.areStrictEqual$1(127, Bridge.Int.sxb(i1 & 255), "-129 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(-128, Bridge.Int.sxb(i2 & 255), "-128 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(80, Bridge.Int.sxb(i3 & 255), "80 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(127, Bridge.Int.sxb(i4 & 255), "127 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(-128, Bridge.Int.sxb(i5 & 255), "128 unchecked");
    
            Bridge.Test.Assert.areStrictEqual$1(127, Bridge.Int.clip8(ni1), "nullable -129 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(-128, Bridge.Int.clip8(ni2), "nullable -128 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(80, Bridge.Int.clip8(ni3), "nullable 80 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(127, Bridge.Int.clip8(ni4), "nullable 127 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(-128, Bridge.Int.clip8(ni5), "nullable 128 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(null, Bridge.Int.clip8(ni6), "null unchecked");
    
            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(i1, System.SByte);
            }, $_.Bridge.ClientTest.SimpleTypes.SByteTests.f1);
            Bridge.Test.Assert.areStrictEqual$1(-128, Bridge.Int.check(i2, System.SByte), "-128 checked");
            Bridge.Test.Assert.areStrictEqual$1(80, Bridge.Int.check(i3, System.SByte), "80 checked");
            Bridge.Test.Assert.areStrictEqual$1(127, Bridge.Int.check(i4, System.SByte), "127 checked");
            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(i5, System.SByte);
            }, $_.Bridge.ClientTest.SimpleTypes.SByteTests.f1);
    
            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(ni1, System.SByte);
            }, $_.Bridge.ClientTest.SimpleTypes.SByteTests.f1);
            Bridge.Test.Assert.areStrictEqual$1(-128, Bridge.Int.check(ni2, System.SByte), "nullable -128 checked");
            Bridge.Test.Assert.areStrictEqual$1(80, Bridge.Int.check(ni3, System.SByte), "nullable 80 checked");
            Bridge.Test.Assert.areStrictEqual$1(127, Bridge.Int.check(ni4, System.SByte), "nullable 127 checked");
            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(ni5, System.SByte);
            }, $_.Bridge.ClientTest.SimpleTypes.SByteTests.f1);
            Bridge.Test.Assert.areStrictEqual$1(null, Bridge.Int.check(ni6, System.SByte), "null checked");
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueIs0: function () {
            Bridge.Test.Assert.areStrictEqual(0, this.getDefaultValue(System.SByte));
        },
        defaultConstructorReturnsZero: function () {
            Bridge.Test.Assert.areStrictEqual(0, Number());
        },
        creatingInstanceReturnsZero: function () {
            Bridge.Test.Assert.areStrictEqual(0, Bridge.createInstance(System.SByte));
        },
        constantsWork: function () {
            Bridge.Test.Assert.areEqual(-128, -128);
            Bridge.Test.Assert.areEqual(127, 127);
        },
        formatWorks: function () {
            Bridge.Test.Assert.areEqual("12", System.SByte.format((18), "x"));
        },
        iFormattableToStringWorks: function () {
            Bridge.Test.Assert.areEqual("12", System.SByte.format((18), "x"));
        },
        tryParseWorks: function () {
            var numberResult = { };
            var result = System.SByte.tryParse("124", numberResult);
            Bridge.Test.Assert.true(result);
            Bridge.Test.Assert.areEqual(124, numberResult.v);
    
            result = System.SByte.tryParse("-123", numberResult);
            Bridge.Test.Assert.true(result);
            Bridge.Test.Assert.areEqual(-123, numberResult.v);
    
            result = System.SByte.tryParse("", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);
    
            result = System.SByte.tryParse(null, numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);
    
            result = System.SByte.tryParse("notanumber", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);
    
            result = System.SByte.tryParse("54768", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(54768, numberResult.v);
    
            result = System.SByte.tryParse("2.5", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);
        },
        parseWorks: function () {
            Bridge.Test.Assert.areEqual(124, System.SByte.parse("124"));
            Bridge.Test.Assert.areEqual(-123, System.SByte.parse("-123"));
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.SByteTests.f2);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.SByteTests.f3);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.SByteTests.f4);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.SByteTests.f5);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.SByteTests.f6);
        },
        toStringWithoutRadixWorks: function () {
            Bridge.Test.Assert.areEqual("123", (123).toString());
        },
        toStringWithRadixWorks: function () {
            Bridge.Test.Assert.areEqual("123", (123).toString(10));
            Bridge.Test.Assert.areEqual("12", (18).toString(16));
        },
        getHashCodeWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((0)), Bridge.getHashCode((0)));
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((1)), Bridge.getHashCode((1)));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode((1)), Bridge.getHashCode((0)));
        },
        equalsWorks: function () {
            Bridge.Test.Assert.true(Bridge.equals((0), 0));
            Bridge.Test.Assert.false(Bridge.equals((1), 0));
            Bridge.Test.Assert.false(Bridge.equals((0), 1));
            Bridge.Test.Assert.true(Bridge.equals((1), 1));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.Assert.true((0) === 0);
            Bridge.Test.Assert.false((1) === 0);
            Bridge.Test.Assert.false((0) === 1);
            Bridge.Test.Assert.true((1) === 1);
    
            Bridge.Test.Assert.true(Bridge.equalsT(0, 0));
            Bridge.Test.Assert.false(Bridge.equalsT(1, 0));
            Bridge.Test.Assert.false(Bridge.equalsT(0, 1));
            Bridge.Test.Assert.true(Bridge.equalsT(1, 1));
        },
        compareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare((0), 0) === 0);
            Bridge.Test.Assert.true(Bridge.compare((1), 0) > 0);
            Bridge.Test.Assert.true(Bridge.compare((0), 1) < 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare(0, 0) === 0);
            Bridge.Test.Assert.true(Bridge.compare(1, 0) > 0);
            Bridge.Test.Assert.true(Bridge.compare(0, 1) < 0);
        }
    });
    
    Bridge.ns("Bridge.ClientTest.SimpleTypes.SByteTests", $_);
    
    Bridge.apply($_.Bridge.ClientTest.SimpleTypes.SByteTests, {
        f1: function (err) {
            return Bridge.is(err, System.OverflowException);
        },
        f2: function () {
            System.SByte.parse("");
        },
        f3: function () {
            System.SByte.parse(null);
        },
        f4: function () {
            System.SByte.parse("notanumber");
        },
        f5: function () {
            System.SByte.parse("54768");
        },
        f6: function () {
            System.SByte.parse("2.5");
        }
    });
    
    Bridge.define('Bridge.ClientTest.SimpleTypes.SingleTests', {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.true(Bridge.is(0.5, System.Single));
            Bridge.Test.Assert.areEqual("System.Single", Bridge.getTypeName(System.Single));
    
            var f = 0.0;
            Bridge.Test.Assert.true(Bridge.is(f, System.Single));
            Bridge.Test.Assert.true(Bridge.is(f, System.IFormattable));
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueIs0: function () {
            Bridge.Test.Assert.areStrictEqual(0, this.getDefaultValue(System.Single));
        },
        creatingInstanceReturnsZero: function () {
            Bridge.Test.Assert.areEqual(0, Bridge.createInstance(System.Single));
        },
        constantsWork: function () {
            var zero = 0;
            Bridge.Test.Assert.true$1(Bridge.cast(-3.40282347E+38, System.Single) < -3.4E+38 && Bridge.cast(-3.40282347E+38, System.Single) > -3.5E+38, "MinValue should be correct");
            Bridge.Test.Assert.true$1(Bridge.cast(3.40282347E+38, System.Single) > 3.4E+38 && Bridge.cast(3.40282347E+38, System.Single) < 3.5E+38, "MaxValue should be correct");
            Bridge.Test.Assert.areEqual$1(1.401298E-45, 1.401298E-45, "Epsilon should be correct");
            Bridge.Test.Assert.true$1(isNaN(Number.NaN), "NaN should be correct");
            Bridge.Test.Assert.areStrictEqual$1(1 / zero, Number.POSITIVE_INFINITY, "PositiveInfinity should be correct");
            Bridge.Test.Assert.areStrictEqual$1(-1 / zero, Number.NEGATIVE_INFINITY, "NegativeInfinity should be correct");
        },
        defaultConstructorReturnsZero: function () {
            Bridge.Test.Assert.areStrictEqual(0, Number());
        },
        formatWorks: function () {
            Bridge.Test.Assert.areEqual("123", System.Single.format((291.0), "x"));
        },
        iFormattableToStringWorks: function () {
            Bridge.Test.Assert.areEqual("123", System.Single.format((291.0), "x"));
        },
        toStringWorks: function () {
            Bridge.Test.Assert.areEqual("123", System.Single.format((123.0), 'G'));
        },
        toExponentialWorks: function () {
            Bridge.Test.Assert.areEqual("1.23e+2", (123.0).toExponential());
        },
        toExponentialWithFractionalDigitsWorks: function () {
            Bridge.Test.Assert.areEqual("1.2e+2", (123.0).toExponential(1));
        },
        toFixed: function () {
            Bridge.Test.Assert.areEqual("123", (123.0).toFixed());
        },
        toFixedWithFractionalDigitsWorks: function () {
            Bridge.Test.Assert.areEqual("123.0", (123.0).toFixed(1));
        },
        toPrecisionWorks: function () {
            Bridge.Test.Assert.areEqual("12345", (12345.0).toPrecision());
        },
        toPrecisionWithPrecisionWorks: function () {
            Bridge.Test.Assert.areEqual("1.2e+4", (12345.0).toPrecision(2));
        },
        isPositiveInfinityWorks: function () {
            var inf = "Infinity";
            // TODO Bug
            //Assert.True (float.IsPositiveInfinity(inf));
            Bridge.Test.Assert.false((-inf === Number.POSITIVE_INFINITY));
            Bridge.Test.Assert.false((0.0 === Number.POSITIVE_INFINITY));
            Bridge.Test.Assert.false((Number.NaN === Number.POSITIVE_INFINITY));
        },
        isNegativeInfinityWorks: function () {
            var inf = "Infinity";
            Bridge.Test.Assert.false((inf === Number.NEGATIVE_INFINITY));
            Bridge.Test.Assert.true((-inf === Number.NEGATIVE_INFINITY));
            Bridge.Test.Assert.false((0.0 === Number.NEGATIVE_INFINITY));
            Bridge.Test.Assert.false((Number.NaN === Number.NEGATIVE_INFINITY));
        },
        isInfinityWorks: function () {
            var inf = "Infinity";
            Bridge.Test.Assert.true((Math.abs(inf) === Number.POSITIVE_INFINITY));
            Bridge.Test.Assert.true((Math.abs(-inf) === Number.POSITIVE_INFINITY));
            Bridge.Test.Assert.false((Math.abs(0.0) === Number.POSITIVE_INFINITY));
            Bridge.Test.Assert.false((Math.abs(Number.NaN) === Number.POSITIVE_INFINITY));
        },
        isFiniteWorks: function () {
            var zero = 0, one = 1;
            Bridge.Test.Assert.true(isFinite(one));
            Bridge.Test.Assert.false(isFinite(one / zero));
            Bridge.Test.Assert.false(isFinite(zero / zero));
        },
        isNaNWorks: function () {
            var zero = 0, one = 1;
            Bridge.Test.Assert.false(isNaN(one));
            Bridge.Test.Assert.false(isNaN(one / zero));
            Bridge.Test.Assert.true(isNaN(zero / zero));
        },
        getHashCodeWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((0.0)), Bridge.getHashCode((0.0)));
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((1.0)), Bridge.getHashCode((1.0)));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode((1.0)), Bridge.getHashCode((0.0)));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode((0.5)), Bridge.getHashCode((0.0)));
        },
        equalsWorks: function () {
            Bridge.Test.Assert.true(Bridge.equals((0.0), 0.0));
            Bridge.Test.Assert.false(Bridge.equals((1.0), 0.0));
            Bridge.Test.Assert.false(Bridge.equals((0.0), 0.5));
            Bridge.Test.Assert.true(Bridge.equals((1.0), 1.0));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.Assert.true((0.0) === 0.0);
            Bridge.Test.Assert.false((1.0) === 0.0);
            Bridge.Test.Assert.false((0.0) === 0.5);
            Bridge.Test.Assert.true((1.0) === 1.0);
    
            Bridge.Test.Assert.true(Bridge.equalsT(0.0, 0.0));
            Bridge.Test.Assert.false(Bridge.equalsT(1.0, 0.0));
            Bridge.Test.Assert.false(Bridge.equalsT(0.0, 0.5));
            Bridge.Test.Assert.true(Bridge.equalsT(1.0, 1.0));
        },
        compareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare((0.0), 0.0) === 0);
            Bridge.Test.Assert.true(Bridge.compare((1.0), 0.0) > 0);
            Bridge.Test.Assert.true(Bridge.compare((0.0), 0.5) < 0);
            Bridge.Test.Assert.true(Bridge.compare((1.0), 1.0) === 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare(0.0, 0.0) === 0);
            Bridge.Test.Assert.true(Bridge.compare(1.0, 0.0) > 0);
            Bridge.Test.Assert.true(Bridge.compare(0.0, 0.5) < 0);
            Bridge.Test.Assert.true(Bridge.compare(1.0, 1.0) === 0);
        }
    });
    
    Bridge.define('Bridge.ClientTest.SimpleTypes.StringTests', {
        statics: {
            strings: function () {
                var $t;
                // In PhantomJS some correct tests failed. We will skip them in this environment.
                var isPhantomJs = Bridge.ClientTest.Utilities.BrowserHelper.isPhantomJs();
    
                //var expectedCount = isPhantomJs ? 28 : 48;
                //assert.Expect(expectedCount);
    
                // TEST ToLower, ToLowerCase, ToLocaleLowerCase
                var s = ("HELLO").toLowerCase();
                Bridge.Test.Assert.areEqual$1("hello", s, "'HELLO'.ToLower()");
    
                s = "HELLO".toLowerCase();
                Bridge.Test.Assert.areEqual$1("hello", s, "'HELLO'.ToLowerCase()");
    
                s = "HELLO".toLocaleLowerCase();
                Bridge.Test.Assert.areEqual$1("hello", s, "'HELLO'.ToLocaleLowerCase()");
    
                // TEST ToUpper, ToUpperCase, ToLocaleUpperCase
                s = ("hello").toUpperCase();
                Bridge.Test.Assert.areEqual$1("HELLO", s, "'hello'.ToUpper()");
    
                s = "hello".toUpperCase();
                Bridge.Test.Assert.areEqual$1("HELLO", s, "'hello'.ToUpperCase()");
    
                s = "HELLO".toLocaleUpperCase();
                Bridge.Test.Assert.areEqual$1("HELLO", s, "'hello'.ToLocaleUpperCase()");
    
                s = "Hello Bridge.NET";
                // TEST String(string) constructor
                Bridge.Test.Assert.areEqual$1(s, String(s), "new String('" + s + "')");
    
                // TEST String(char, count) constructor
                Bridge.Test.Assert.areEqual$1("----", System.String.fromCharCount(45, 4), "new String('-',4)");
    
                // TEST IndexOfAny
                var anyOf = [120, 98, 105];
                var sAnyOf = "['x','b','i']";
    
                Bridge.Test.Assert.areEqual$1(8, System.String.indexOfAny(s, anyOf), "'" + s + "'.IndexOfAny(" + sAnyOf + ")");
                Bridge.Test.Assert.throws$5(function () {
                    System.String.indexOfAny(s, anyOf, 18, 8);
                }, "'" + s + "'.IndexOfAny(" + sAnyOf + ")");
                Bridge.Test.Assert.throws$5(function () {
                    System.String.indexOfAny(s, null);
                }, "'" + s + "'.IndexOfAny(null)");
    
                s = "";
                Bridge.Test.Assert.areEqual$1(-1, System.String.indexOfAny(s, anyOf), "String.Empty.IndexOfAny(" + sAnyOf + ")");
    
                s = null;
                Bridge.Test.Assert.areEqual$1(-1, System.String.indexOfAny(s, anyOf), "null.IndexOfAny(" + sAnyOf + ")");
    
                // TEST IndexOf
                s = "Hello Bridge.NET";
    
                Bridge.Test.Assert.areEqual$1(1, System.String.indexOf(s, String.fromCharCode(101)), "'" + s + "'.IndexOf('e')");
                Bridge.Test.Assert.areEqual$1(11, System.String.indexOf(s, "e."), "'" + s + "'.IndexOf('e.')");
                Bridge.Test.Assert.areEqual$1(11, System.String.indexOf(s, String.fromCharCode(101), 6, 8), "'" + s + "'.IndexOf('e', 6, 8)");
                Bridge.Test.Assert.throws$5(function () {
                    System.String.indexOf(s, null);
                }, "'" + s + "'.IndexOf(null)");
    
                if (!isPhantomJs) {
                    Bridge.Test.Assert.areEqual$1(11, System.String.indexOf(s, "E", 6, 8, 1), "'" + s + "'.IndexOf('E', 6, 8, StringComparison.CurrentCultureIgnoreCase)");
                }
    
                s = "";
                Bridge.Test.Assert.areEqual$1(-1, System.String.indexOf(s, String.fromCharCode(101)), "String.Empty.IndexOf('e')");
    
                s = null;
                Bridge.Test.Assert.areEqual$1(-1, System.String.indexOf(s, String.fromCharCode(101)), "null.IndexOf('e')");
    
                // TEST Compare
                var s1 = "Animal";
                var s2 = "animal";
    
                Bridge.Test.Assert.areEqual$1(0, System.String.compare(s1, s2, true), "String.Compare('" + s1 + "', '" + s2 + "', true)");
    
                if (!isPhantomJs) {
                    Bridge.Test.Assert.areEqual$1(1, System.String.compare(s1, s2, false), "String.Compare('" + s1 + "', '" + s2 + "', false)");
                }
    
                if (!isPhantomJs) {
                    var threeIs = System.Array.init(3, null);
                    threeIs[0] = "i";
                    threeIs[1] = "ı";
                    threeIs[2] = "I";
    
                    var scValues = [0, 1, 2, 3, 4, 5];
    
                    var expected = [-1, -1, 1, -1, 0, 1, -1, -1, 1, -1, 0, 1, -1, 1, 1, 0, 0, 0];
                    var expectedIndex = 0;
    
                    $t = Bridge.getEnumerator(scValues);
                    while ($t.moveNext()) {
                        var sc = $t.getCurrent();
                        Bridge.ClientTest.SimpleTypes.StringTests.test(0, 1, sc, threeIs, expected, Bridge.identity(expectedIndex, (expectedIndex = (expectedIndex + 1) | 0)));
                        Bridge.ClientTest.SimpleTypes.StringTests.test(0, 2, sc, threeIs, expected, Bridge.identity(expectedIndex, (expectedIndex = (expectedIndex + 1) | 0)));
                        Bridge.ClientTest.SimpleTypes.StringTests.test(1, 2, sc, threeIs, expected, Bridge.identity(expectedIndex, (expectedIndex = (expectedIndex + 1) | 0)));
                    }
                }
    
                // TEST Contains
                s = "Hello Bridge.NET";
    
                Bridge.Test.Assert.areEqual$1(true, System.String.contains(s,"Bridge"), "'" + s + "'.Contains('Bridge')");
                Bridge.Test.Assert.areEqual$1(true, System.String.contains(s,""), "'" + s + "'.Contains(String.Empty)");
                Bridge.Test.Assert.areEqual$1(false, System.String.contains("","Bridge"), "String.Empty.Contains('Bridge')");
                Bridge.Test.Assert.throws$5(function () {
                    System.String.contains(s,null);
                }, "null.Contains('Bridge')");
    
                // TEST Concat
                s = [s, "2", "3", "4"].join('');
                Bridge.Test.Assert.areEqual$1("Hello Bridge.NET234", s, "string.Concat()");
    
                s = [null, true, 3, false].join('');
                Bridge.Test.Assert.areEqual$1("true3false", s, "string.Concat()");
    
                s = ["1", "2", "3", "4", "5"].toString().split(',').join('');
                Bridge.Test.Assert.areEqual$1("12345", s, "string.Concat()");
    
                s = [1, null, 2, null, 3].toString().split(',').join('');
                Bridge.Test.Assert.areEqual$1("123", s, "string.Concat()");
            },
            test: function (x, y, comparison, testI, expected, expectedIndex) {
                var cmpValue = 0;
                cmpValue = System.String.compare(testI[x], testI[y], comparison);
                Bridge.Test.Assert.areEqual$1(expected[expectedIndex], cmpValue, "String.Compare('" + testI[x] + "', '" + testI[y] + "'," + comparison + ")");
            },
            enumerable: function () {
                var $t;
                var a;
                var i = 0;
                var result = System.Array.init(5, function (){
                    return new System.Char();
                });
                $t = Bridge.getEnumerator("danny");
                while ($t.moveNext()) {
                    var c = $t.getCurrent();
                    a = c;
                    result[i] = a;
    
                    i = (i + 1) | 0;
                }
    
                Bridge.Test.Assert.areEqual(100, result[0]);
                Bridge.Test.Assert.areEqual(97, result[1]);
                Bridge.Test.Assert.areEqual(110, result[2]);
                Bridge.Test.Assert.areEqual(110, result[3]);
                Bridge.Test.Assert.areEqual(121, result[4]);
            }
        },
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual("String", Bridge.getTypeName(String));
            var s = "X";
            Bridge.Test.Assert.true(Bridge.is(s, String));
        },
        stringInterfaces: function () {
            var s = "X";
            Bridge.Test.Assert.true$1(true, "string is object");
            Bridge.Test.Assert.true(Bridge.is(s, System.IComparable$1(String)));
            Bridge.Test.Assert.true(Bridge.is(s, System.IEquatable$1(String)));
        },
        defaultConstructorWorks: function () {
            Bridge.Test.Assert.areEqual("", String());
        },
        copyConstructorWorks: function () {
            Bridge.Test.Assert.areEqual("abcd", String("abcd"));
        },
        charAndCountConstructorWorks: function () {
            Bridge.Test.Assert.areEqual("xxxxx", System.String.fromCharCount(120, 5));
        },
        charArrayConstructorWorks: function () {
            Bridge.Test.Assert.areEqual("abC", String.fromCharCode.apply(null, [97, 98, 67]));
        },
        emptyFieldWorks: function () {
            Bridge.Test.Assert.areEqual("", "");
        },
        lengthPropertyWorks: function () {
            Bridge.Test.Assert.areEqual(4, ("abcd").length);
        },
        charAtWorks: function () {
            Bridge.Test.Assert.areEqual("c", ("abcd").charAt(2));
        },
        charCodeAtWorks: function () {
            Bridge.Test.Assert.areEqual(99, ("abcd").charCodeAt(2));
        },
        compareWorks: function () {
            Bridge.Test.Assert.true(System.String.compare("abcd", "abcd") === 0);
            Bridge.Test.Assert.true(System.String.compare("abcd", "abcb") > 0);
            Bridge.Test.Assert.true(System.String.compare("abcd", "abce") < 0);
        },
        compareWithIgnoreCaseArgWorks: function () {
            Bridge.Test.Assert.true(System.String.compare("abcd", "abcd", false) === 0);
            Bridge.Test.Assert.true(System.String.compare("abcd", "abcb", false) > 0);
            Bridge.Test.Assert.true(System.String.compare("abcd", "abce", false) < 0);
            Bridge.Test.Assert.true(System.String.compare("abcd", "ABCD", true) === 0);
            Bridge.Test.Assert.true(System.String.compare("abcd", "ABCB", true) > 0);
            Bridge.Test.Assert.true(System.String.compare("abcd", "ABCE", true) < 0);
        },
        concatWorks: function () {
            Bridge.Test.Assert.areEqual("ab", ["a", "b"].join(''));
            Bridge.Test.Assert.areEqual("abc", ["a", "b", "c"].join(''));
            Bridge.Test.Assert.areEqual("abcd", ["a", "b", "c", "d"].join(''));
            Bridge.Test.Assert.areEqual("abcde", ["a", "b", "c", "d", "e"].toString().split(',').join(''));
            Bridge.Test.Assert.areEqual("abcdef", ["a", "b", "c", "d", "e", "f"].toString().split(',').join(''));
            Bridge.Test.Assert.areEqual("abcdefg", ["a", "b", "c", "d", "e", "f", "g"].toString().split(',').join(''));
            Bridge.Test.Assert.areEqual("abcdefgh", ["a", "b", "c", "d", "e", "f", "g", "h"].toString().split(',').join(''));
            Bridge.Test.Assert.areEqual("abcdefghi", ["a", "b", "c", "d", "e", "f", "g", "h", "i"].toString().split(',').join(''));
        },
        concatWithObjectsWorks: function () {
            Bridge.Test.Assert.areEqual("1", [1].join(''));
            Bridge.Test.Assert.areEqual("12", [1, 2].join(''));
            Bridge.Test.Assert.areEqual("123", [1, 2, 3].join(''));
            Bridge.Test.Assert.areEqual("1234", [1, 2, 3, 4].join(''));
            Bridge.Test.Assert.areEqual("12345", [1, 2, 3, 4, 5].toString().split(',').join(''));
            Bridge.Test.Assert.areEqual("123456", [1, 2, 3, 4, 5, 6].toString().split(',').join(''));
            Bridge.Test.Assert.areEqual("1234567", [1, 2, 3, 4, 5, 6, 7].toString().split(',').join(''));
            Bridge.Test.Assert.areEqual("12345678", [1, 2, 3, 4, 5, 6, 7, 8].toString().split(',').join(''));
            Bridge.Test.Assert.areEqual("123456789", [1, 2, 3, 4, 5, 6, 7, 8, 9].toString().split(',').join(''));
        },
        endsWithCharWorks: function () {
            Bridge.Test.Assert.true(System.String.endsWith(("abcd"), "d"));
            Bridge.Test.Assert.false(System.String.endsWith(("abcd"), "e"));
        },
        endsWithStringWorks: function () {
            Bridge.Test.Assert.true(System.String.endsWith(("abcd"), "d"));
            Bridge.Test.Assert.false(System.String.endsWith(("abcd"), "e"));
        },
        staticEqualsWorks: function () {
            Bridge.Test.Assert.true(System.String.equals("abcd", "abcd"));
            Bridge.Test.Assert.false(System.String.equals("abcd", "abce"));
            Bridge.Test.Assert.false(System.String.equals("abcd", "ABCD"));
            Bridge.Test.Assert.true(System.String.equals("abcd", "abcd"));
            Bridge.Test.Assert.false(System.String.equals("abcd", "abce"));
            Bridge.Test.Assert.false(System.String.equals("abcd", "ABCD"));
        },
        formatWorks: function () {
            Bridge.Test.Assert.areEqual("x", System.String.format("x", null));
            Bridge.Test.Assert.areEqual("xa", System.String.format("x{0}", "a"));
            Bridge.Test.Assert.areEqual("xab", System.String.format("x{0}{1}", "a", "b"));
            Bridge.Test.Assert.areEqual("xabc", System.String.format("x{0}{1}{2}", "a", "b", "c"));
            Bridge.Test.Assert.areEqual("xabcd", System.String.format("x{0}{1}{2}{3}", "a", "b", "c", "d"));
    
            var arr1 = ["a"];
            var arr2 = ["a", "b"];
            var arr3 = ["a", "b", "c"];
            var arr4 = ["a", "b", "c", "d"];
            Bridge.Test.Assert.areEqual("xa", System.String.format.apply(System.String, ["x{0}"].concat(arr1)));
            Bridge.Test.Assert.areEqual("xab", System.String.format("x{0}{1}", arr2[0], arr2[1]));
            Bridge.Test.Assert.areEqual("xabc", System.String.format("x{0}{1}{2}", arr3[0], arr3[1], arr3[2]));
            Bridge.Test.Assert.areEqual("xabcd", System.String.format("x{0}{1}{2}{3}", arr4[0], arr4[1], arr4[2], arr4[3]));
        },
        formatWorksExtended: function () {
            var arr2 = ["a", "b"];
            var arr3 = ["a", "b", "c"];
            var arr4 = ["a", "b", "c", "d"];
    
            Bridge.Test.Assert.areEqual("xab", System.String.format.apply(System.String, ["x{0}{1}"].concat(arr2)));
            Bridge.Test.Assert.areEqual("xabc", System.String.format.apply(System.String, ["x{0}{1}{2}"].concat(arr3)));
            Bridge.Test.Assert.areEqual("xabcd", System.String.format.apply(System.String, ["x{0}{1}{2}{3}"].concat(arr4)));
        },
        formatWorksWithIFormattable: function () {
            Bridge.Test.Assert.areEqual("3.14", System.String.format("{0:F2}", 3.1428571428571428));
        },
        formatCanUseEscapedBraces: function () {
            Bridge.Test.Assert.areEqual("{0}", System.String.format("{{0}}", null));
        },
        fromCharCodeWorks: function () {
            Bridge.Test.Assert.areEqual("", String.fromCharCode());
            Bridge.Test.Assert.areEqual("a", String.fromCharCode(97));
            Bridge.Test.Assert.areEqual("ab", String.fromCharCode(97, 98));
            Bridge.Test.Assert.areEqual("abc", String.fromCharCode(97, 98, 99));
        },
        indexOfCharWorks: function () {
            Bridge.Test.Assert.areEqual(1, System.String.indexOf(("abc"), String.fromCharCode(98)));
            Bridge.Test.Assert.areEqual(-1, System.String.indexOf(("abc"), String.fromCharCode(100)));
        },
        indexOfStringWorks: function () {
            Bridge.Test.Assert.areEqual(1, System.String.indexOf(("abc"), "bc"));
            Bridge.Test.Assert.areEqual(-1, System.String.indexOf(("abc"), "bd"));
        },
        indexOfCharWithStartIndexWorks: function () {
            Bridge.Test.Assert.areEqual(4, System.String.indexOf(("abcabc"), String.fromCharCode(98), 3));
            Bridge.Test.Assert.areEqual(-1, System.String.indexOf(("abcabc"), String.fromCharCode(100), 3));
        },
        indexOfCharWithStartIndexAndCountWorks: function () {
            Bridge.Test.Assert.areEqual(7, System.String.indexOf(("xxxxxabcxxx"), String.fromCharCode(99), 3, 8));
            Bridge.Test.Assert.areEqual(7, System.String.indexOf(("xxxxxabcxxx"), String.fromCharCode(99), 3, 5));
            Bridge.Test.Assert.areEqual(-1, System.String.indexOf(("xxxxxabcxxx"), String.fromCharCode(99), 3, 4));
        },
        indexOfStringWithStartIndexWorks: function () {
            Bridge.Test.Assert.areEqual(4, System.String.indexOf(("abcabc"), "bc", 3));
            Bridge.Test.Assert.areEqual(-1, System.String.indexOf(("abcabc"), "bd", 3));
        },
        indexOfStringWithStartIndexAndCountWorks: function () {
            Bridge.Test.Assert.areEqual(5, System.String.indexOf(("xxxxxabcxxx"), "abc", 3, 8));
            Bridge.Test.Assert.areEqual(5, System.String.indexOf(("xxxxxabcxxx"), "abc", 3, 5));
            Bridge.Test.Assert.areEqual(-1, System.String.indexOf(("xxxxxabcxxx"), "abc", 3, 4));
        },
        indexOfAnyWorks: function () {
            Bridge.Test.Assert.areEqual(1, System.String.indexOfAny(("abcd"), [98]));
            Bridge.Test.Assert.areEqual(1, System.String.indexOfAny(("abcd"), [98, 120]));
            Bridge.Test.Assert.areEqual(1, System.String.indexOfAny(("abcd"), [98, 120, 121]));
            Bridge.Test.Assert.areEqual(-1, System.String.indexOfAny(("abcd"), [120, 121]));
        },
        indexOfAnyWithStartIndexWorks: function () {
            Bridge.Test.Assert.areEqual(5, System.String.indexOfAny(("abcdabcd"), [98], 4));
            Bridge.Test.Assert.areEqual(5, System.String.indexOfAny(("abcdabcd"), [98, 120], 4));
            Bridge.Test.Assert.areEqual(5, System.String.indexOfAny(("abcdabcd"), [98, 120, 121], 4));
            Bridge.Test.Assert.areEqual(-1, System.String.indexOfAny(("abcdabcd"), [120, 121], 4));
        },
        indexOfAnyWithStartIndexAndCountWorks: function () {
            Bridge.Test.Assert.areEqual(5, System.String.indexOfAny(("abcdabcd"), [98], 4, 2));
            Bridge.Test.Assert.areEqual(5, System.String.indexOfAny(("abcdabcd"), [98, 120], 4, 2));
            Bridge.Test.Assert.areEqual(5, System.String.indexOfAny(("abcdabcd"), [98, 120, 121], 4, 2));
            Bridge.Test.Assert.areEqual(-1, System.String.indexOfAny(("abcdabcd"), [120, 121], 4, 2));
            Bridge.Test.Assert.areEqual(-1, System.String.indexOfAny(("abcdabcd"), [99], 4, 2));
        },
        insertWorks: function () {
            Bridge.Test.Assert.areEqual("abxyzcd", System.String.insert(2, ("abcd"), "xyz"));
        },
        isNullOrEmptyWorks: function () {
            Bridge.Test.Assert.true(System.String.isNullOrEmpty(null));
            Bridge.Test.Assert.true(System.String.isNullOrEmpty(""));
            Bridge.Test.Assert.false(System.String.isNullOrEmpty(" "));
            Bridge.Test.Assert.false(System.String.isNullOrEmpty("0"));
        },
        lastIndexOfCharWorks: function () {
            Bridge.Test.Assert.areEqual(1, ("abc").lastIndexOf("b"));
            Bridge.Test.Assert.areEqual(-1, ("abc").lastIndexOf("d"));
        },
        lastIndexOfStringWorks: function () {
            Bridge.Test.Assert.areEqual(1, ("abc").lastIndexOf("bc"));
            Bridge.Test.Assert.areEqual(-1, ("abc").lastIndexOf("bd"));
        },
        lastIndexOfCharWithStartIndexWorks: function () {
            Bridge.Test.Assert.areEqual(1, ("abcabc").lastIndexOf("b", 3));
            Bridge.Test.Assert.areEqual(-1, ("abcabc").lastIndexOf("d", 3));
        },
        lastIndexOfStringWithStartIndexWorks: function () {
            Bridge.Test.Assert.areEqual(1, ("abcabc").lastIndexOf("bc", 3));
            Bridge.Test.Assert.areEqual(-1, ("abcabc").lastIndexOf("bd", 3));
        },
        lastIndexOfCharWithStartIndexAndCountWorks: function () {
            Bridge.Test.Assert.areEqual(1, System.String.lastIndexOf(("abcabc"), String.fromCharCode(98), 3, 3));
            Bridge.Test.Assert.areEqual(-1, System.String.lastIndexOf(("abcabc"), String.fromCharCode(98), 3, 2));
            Bridge.Test.Assert.areEqual(-1, System.String.lastIndexOf(("abcabc"), String.fromCharCode(100), 3, 3));
        },
        lastIndexOfStringWithStartIndexAndCountWorks: function () {
            Bridge.Test.Assert.areEqual(1, System.String.lastIndexOf(("xbcxxxbc"), "bc", 3, 3));
            Bridge.Test.Assert.areEqual(-1, System.String.lastIndexOf(("xbcxxxbc"), "bc", 3, 2));
            Bridge.Test.Assert.areEqual(-1, System.String.lastIndexOf(("xbcxxxbc"), "bd", 3, 3));
        },
        lastIndexOfAnyWorks: function () {
            Bridge.Test.Assert.areEqual(1, System.String.lastIndexOfAny(("abcd"), [98]));
            Bridge.Test.Assert.areEqual(1, System.String.lastIndexOfAny(("abcd"), [98, 120]));
            Bridge.Test.Assert.areEqual(1, System.String.lastIndexOfAny(("abcd"), [98, 120, 121]));
            Bridge.Test.Assert.areEqual(-1, System.String.lastIndexOfAny(("abcd"), [120, 121]));
        },
        lastIndexOfAnyWithStartIndexWorks: function () {
            Bridge.Test.Assert.areEqual(1, System.String.lastIndexOfAny(("abcdabcd"), [98], 4));
            Bridge.Test.Assert.areEqual(1, System.String.lastIndexOfAny(("abcdabcd"), [98, 120], 4));
            Bridge.Test.Assert.areEqual(1, System.String.lastIndexOfAny(("abcdabcd"), [98, 120, 121], 4));
            Bridge.Test.Assert.areEqual(-1, System.String.lastIndexOfAny(("abcdabcd"), [120, 121], 4));
        },
        lastIndexOfAnyWithStartIndexAndCountWorks: function () {
            Bridge.Test.Assert.areEqual(1, System.String.lastIndexOfAny(("abcdabcd"), [98], 4, 4));
            Bridge.Test.Assert.areEqual(1, System.String.lastIndexOfAny(("abcdabcd"), [98, 120], 4, 4));
            Bridge.Test.Assert.areEqual(1, System.String.lastIndexOfAny(("abcdabcd"), [98, 120, 121], 4, 4));
            Bridge.Test.Assert.areEqual(-1, System.String.lastIndexOfAny(("abcdabcd"), [120, 121], 4, 4));
            Bridge.Test.Assert.areEqual(-1, System.String.lastIndexOfAny(("abcdabcd"), [98], 4, 2));
        },
        localeCompareWorks: function () {
            Bridge.Test.Assert.true(("abcd").localeCompare("abcd") === 0);
            Bridge.Test.Assert.true(("abcd").localeCompare("abcb") > 0);
            Bridge.Test.Assert.true(("abcd").localeCompare("abce") < 0);
        },
        matchWorks: function () {
            var result = ("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz").match(new RegExp("[A-E]", "gi"));
            Bridge.Test.Assert.areDeepEqual(["A", "B", "C", "D", "E", "a", "b", "c", "d", "e"], result);
        },
        padLeftWorks: function () {
            Bridge.Test.Assert.areEqual("  abc", System.String.alignString(("abc"), 5));
        },
        padLeftWithCharWorks: function () {
            Bridge.Test.Assert.areEqual("00abc", System.String.alignString(("abc"), 5, 48));
        },
        padRightWorks: function () {
            Bridge.Test.Assert.areEqual("abc  ", System.String.alignString(("abc"), -5));
        },
        padRightWithCharWorks: function () {
            Bridge.Test.Assert.areEqual("abc00", System.String.alignString(("abc"), -5, 48));
        },
        removeWorks: function () {
            Bridge.Test.Assert.areEqual("ab", System.String.remove(("abcde"), 2));
    
            var val = "Hello";
            Bridge.Test.Assert.throws$6(System.ArgumentOutOfRangeException, function () {
                System.String.remove(val, -2);
            });
            Bridge.Test.Assert.throws$6(System.ArgumentOutOfRangeException, function () {
                System.String.remove(val, 5);
            });
    
            var s = null;
            Bridge.Test.Assert.throws$6(System.NullReferenceException, function () {
                System.String.remove(s, 2);
            });
        },
        removeWithCountWorks: function () {
            Bridge.Test.Assert.areEqual("abe", System.String.remove(("abcde"), 2, 2));
    
            var val = "Hello";
    
            Bridge.Test.Assert.areEqual("Hello", System.String.remove(val, 0, 0));
            Bridge.Test.Assert.areEqual("ello", System.String.remove(val, 0, 1));
            Bridge.Test.Assert.areEqual("llo", System.String.remove(val, 0, 2));
            Bridge.Test.Assert.areEqual("lo", System.String.remove(val, 0, 3));
            Bridge.Test.Assert.areEqual("o", System.String.remove(val, 0, 4));
            Bridge.Test.Assert.areEqual("", System.String.remove(val, 0, 5));
    
            Bridge.Test.Assert.areEqual("Hello", System.String.remove(val, 1, 0));
            Bridge.Test.Assert.areEqual("Hello", System.String.remove(val, 2, 0));
            Bridge.Test.Assert.areEqual("Hello", System.String.remove(val, 3, 0));
            Bridge.Test.Assert.areEqual("Hello", System.String.remove(val, 4, 0));
            Bridge.Test.Assert.areEqual("Hello", System.String.remove(val, 5, 0));
    
            Bridge.Test.Assert.throws$6(System.ArgumentOutOfRangeException, function () {
                System.String.remove(val, -2, 2);
            });
            Bridge.Test.Assert.throws$6(System.ArgumentOutOfRangeException, function () {
                System.String.remove(val, 2, -2);
            });
            Bridge.Test.Assert.throws$6(System.ArgumentOutOfRangeException, function () {
                System.String.remove(val, 2, 4);
            });
    
            var s = null;
            Bridge.Test.Assert.throws$6(System.NullReferenceException, function () {
                System.String.remove(s, 0, 0);
            });
        },
        replaceWorks: function () {
            Bridge.Test.Assert.areEqual("xbcxbcxbc", System.String.replaceAll(("abcabcabc"), "a", "x"));
            Bridge.Test.Assert.areEqual("xcxcxc", System.String.replaceAll(("abcabcabc"), "ab", "x"));
        },
        replaceCharWorks: function () {
            Bridge.Test.Assert.areEqual("xbcxbcxbc", System.String.replaceAll(("abcabcabc"), "a", "x"));
        },
        replaceRegexWithReplaceTextWorks: function () {
            Bridge.Test.Assert.areEqual("xxcxxcxxc", ("abcabcabc").replace(new RegExp("a|b", "g"), "x"));
        },
        replaceRegexWithReplaceCallbackWorks: function () {
            Bridge.Test.Assert.areEqual("xycxycxyc", ("abcabcabc").replace(new RegExp("a|b", "g"), $_.Bridge.ClientTest.SimpleTypes.StringTests.f1));
        },
        searchWorks: function () {
            Bridge.Test.Assert.areEqual(2, ("abcabcabc").search(new RegExp("ca")));
            Bridge.Test.Assert.areEqual(-1, ("abcabcabc").search(new RegExp("x")));
        },
        sliceWorks: function () {
            var numbers = "0123456789";
    
            // Let's start by using both begin and end.
            Bridge.Test.Assert.areEqual(numbers.slice(3, 7), "3456");
    
            // What happens when we start with a negative number.
            Bridge.Test.Assert.areEqual(numbers.slice(-7, 7), "3456");
    
            // What happens when we use two negative numbers.
            Bridge.Test.Assert.areEqual(numbers.slice(-7, -3), "3456");
    
            // What happens when we omit the last argument.
            Bridge.Test.Assert.areEqual(numbers.slice(3), "3456789");
    
            // And with the negative, end-relevant index.
            Bridge.Test.Assert.areEqual(numbers.slice(-7), "3456789");
    
            // If the index is out of range, it returns the empty string.
            Bridge.Test.Assert.areEqual(numbers.slice(100, 101), "");
        },
        splitWithStringWorks: function () {
            Bridge.Test.Assert.areDeepEqual(["a", "ca", "ca", "c"], ("abcabcabc").split("b"));
        },
        splitWithCharWorks: function () {
            Bridge.Test.Assert.areDeepEqual(["a", "ca", "ca", "c"], ("abcabcabc").split(String.fromCharCode(98)));
        },
        jsSplitWithStringAndLimitWorks: function () {
            Bridge.Test.Assert.areDeepEqual(["a", "ax"], ("abcaxbcabce").split("bc", 2));
        },
        jsSplitWithCharAndLimitWorks: function () {
            Bridge.Test.Assert.areDeepEqual(["a", "ca"], ("abcabcabc").split(String.fromCharCode(98), 2));
        },
        splitWithCharsAndLimitWorks: function () {
            Bridge.Test.Assert.areDeepEqual(["a", "cabcabc"], System.String.split(("abcabcabc"), [98].map(function(i) {{ return String.fromCharCode(i); }}), 2));
        },
        splitWithCharsAndStringSplitOptionsAndLimitWorks: function () {
            Bridge.Test.Assert.areDeepEqual(["a", "cabcabc"], System.String.split(("abxcabcabc"), [98, 120].map(function(i) {{ return String.fromCharCode(i); }}), 2, 1));
        },
        splitWithRegexWorks: function () {
            Bridge.Test.Assert.areDeepEqual(["a", "ca", "ca", "c"], ("abcaxcaxc").split(new RegExp("b|x", "g")));
        },
        someNetSplitTests: function () {
            Bridge.Test.Assert.areDeepEqual(["a", "bc", "de"], System.String.split(("axybcxzde"), ["xy", "xz"], null, 0));
            Bridge.Test.Assert.areDeepEqual(["a", "bc", "de", ""], System.String.split(("axybcxzdexz"), ["xy", "xz"], null, 0));
            Bridge.Test.Assert.areDeepEqual(["", "a", "bc", "de", ""], System.String.split(("xzaxybcxzdexz"), ["xy", "xz"], null, 0));
            Bridge.Test.Assert.areDeepEqual(["", "a", "", "bc", "de", ""], System.String.split(("xzaxyxzbcxzdexz"), ["xy", "xz"], null, 0));
            Bridge.Test.Assert.areDeepEqual(["", "a", "", "", "bc", "de", ""], System.String.split(("xzaxyxzxybcxzdexz"), ["xy", "xz"], null, 0));
    
            Bridge.Test.Assert.areDeepEqual(["a", "bc", "de"], System.String.split(("axybcxzde"), ["xy", "xz"], null, 1));
            Bridge.Test.Assert.areDeepEqual(["a", "bc", "de"], System.String.split(("axybcxzdexz"), ["xy", "xz"], null, 1));
            Bridge.Test.Assert.areDeepEqual(["a", "bc", "de"], System.String.split(("xzaxybcxzdexz"), ["xy", "xz"], null, 1));
            Bridge.Test.Assert.areDeepEqual(["a", "bc", "de"], System.String.split(("xzaxyxzbcxzdexz"), ["xy", "xz"], null, 1));
            Bridge.Test.Assert.areDeepEqual(["a", "bc", "de"], System.String.split(("xzaxyxzxybcxzdexz"), ["xy", "xz"], null, 1));
    
            Bridge.Test.Assert.areDeepEqual(["a", "bc", "de"], System.String.split(("axybcxzde"), ["xy", "xz"], 100, 0));
            Bridge.Test.Assert.areDeepEqual(["a", "bc", "de", ""], System.String.split(("axybcxzdexz"), ["xy", "xz"], 100, 0));
            Bridge.Test.Assert.areDeepEqual(["", "a", "bc", "de", ""], System.String.split(("xzaxybcxzdexz"), ["xy", "xz"], 100, 0));
            Bridge.Test.Assert.areDeepEqual(["", "a", "", "bc", "de", ""], System.String.split(("xzaxyxzbcxzdexz"), ["xy", "xz"], 100, 0));
            Bridge.Test.Assert.areDeepEqual(["", "a", "", "", "bc", "de", ""], System.String.split(("xzaxyxzxybcxzdexz"), ["xy", "xz"], 100, 0));
    
            Bridge.Test.Assert.areDeepEqual(["a", "bcxzde"], System.String.split(("axybcxzde"), ["xy", "xz"], 2, 0));
            Bridge.Test.Assert.areDeepEqual(["a", "bcxzdexz"], System.String.split(("axybcxzdexz"), ["xy", "xz"], 2, 0));
            Bridge.Test.Assert.areDeepEqual(["a", "xzbcxzdexz"], System.String.split(("axyxzbcxzdexz"), ["xy", "xz"], 2, 0));
            Bridge.Test.Assert.areDeepEqual(["", "axybcxzdexz"], System.String.split(("xzaxybcxzdexz"), ["xy", "xz"], 2, 0));
    
            Bridge.Test.Assert.areDeepEqual(["a", "bcxzde"], System.String.split(("axybcxzde"), ["xy", "xz"], 2, 1));
            Bridge.Test.Assert.areDeepEqual(["a", "bcxzdexz"], System.String.split(("axybcxzdexz"), ["xy", "xz"], 2, 1));
            Bridge.Test.Assert.areDeepEqual(["a", "bcxzdexz"], System.String.split(("axyxzbcxzdexz"), ["xy", "xz"], 2, 1));
            Bridge.Test.Assert.areDeepEqual(["a", "bcxzdexz"], System.String.split(("xzaxyxzbcxzdexz"), ["xy", "xz"], 2, 1));
        },
        splitWithCharsWorks: function () {
            Bridge.Test.Assert.areDeepEqual(["Lorem", "Ipsum", "", "dolor", "sit", "amet"], System.String.split(("Lorem Ipsum, dolor[sit amet"), [44, 32, 91].map(function(i) {{ return String.fromCharCode(i); }})));
            Bridge.Test.Assert.areDeepEqual(["Lorem", "Ipsum", "", "dolor", "sit", "amet"], System.String.split(("Lorem Ipsum, dolor[sit amet"), [44, 32, 91].map(function(i) {{ return String.fromCharCode(i); }}), null, 0));
            Bridge.Test.Assert.areDeepEqual(["Lorem", "Ipsum", "dolor", "sit", "amet"], System.String.split(("Lorem Ipsum, dolor[sit amet"), [44, 32, 91].map(function(i) {{ return String.fromCharCode(i); }}), null, 1));
        },
        splitWithStringsWorks: function () {
            Bridge.Test.Assert.areDeepEqual(["a ", " b ", " b ", " c and c ", "", "", " d ", " d ", " e"], System.String.split(("a is b if b is c and c isifis d if d is e"), ["is", "if"], null, 0));
            Bridge.Test.Assert.areDeepEqual(["a ", " b ", " b ", " c and c ", " d ", " d ", " e"], System.String.split(("a is b if b is c and c isifis d if d is e"), ["is", "if"], null, 1));
        },
        splitWithStringsAndLimitWorks: function () {
            Bridge.Test.Assert.areDeepEqual(["a", "abcabc"], System.String.split(("abcbcabcabc"), ["bc"], 2, 1));
        },
        startsWithCharWorks: function () {
            Bridge.Test.Assert.true(System.String.startsWith(("abc"), "a"));
            Bridge.Test.Assert.false(System.String.startsWith(("abc"), "b"));
        },
        startsWithStringWorks: function () {
            Bridge.Test.Assert.true(System.String.startsWith(("abc"), "ab"));
            Bridge.Test.Assert.false(System.String.startsWith(("abc"), "bc"));
        },
        substrWorks: function () {
            Bridge.Test.Assert.areEqual("cde", ("abcde").substr(2));
            Bridge.Test.Assert.areEqual("cd", ("abcde").substr(2, 2));
    
            var numbers = "0123456789";
    
            // Let's start by using both start and length
            Bridge.Test.Assert.areEqual(numbers.substr(3, 4), "3456");
    
            // What happens when we start with a negative number.
            Bridge.Test.Assert.areEqual(numbers.substr(-7, 4), "3456");
    
            // What happens when we omit the last argument.
            Bridge.Test.Assert.areEqual(numbers.substr(3), "3456789");
    
            // And with the negative, end-relevant index.
            Bridge.Test.Assert.areEqual(numbers.substr(-7), "3456789");
    
            // If the index is out of range, it returns the empty string.
            Bridge.Test.Assert.areEqual(numbers.substr(100, 1), "");
    
            Bridge.Test.Assert.areEqual(numbers.substr(2, 4), "2345");
        },
        substringWorks: function () {
            Bridge.Test.Assert.areEqual("cde", ("abcde").substr(2));
            Bridge.Test.Assert.areEqual("cd", ("abcde").substr(2, 2));
    
            var numbers = "0123456789";
            // Let's start by using both begin and end.
            Bridge.Test.Assert.areEqual(numbers.substr(3, 7), "3456789");
    
            // What happens when we start with a negative number.
            Bridge.Test.Assert.areEqual(numbers.substr(-7, 7), "3456789");
    
            // What happens when we use two negative numbers.
            Bridge.Test.Assert.areEqual(numbers.substr(-7, -3), "");
    
            // What happens when we omit the last argument.
            Bridge.Test.Assert.areEqual(numbers.substr(3), "3456789");
    
            // And with the negative, end-relevant index.
            Bridge.Test.Assert.areEqual(numbers.substr(-7), "3456789");
    
            // If the index is out of range, it returns the empty string.
            Bridge.Test.Assert.areEqual(numbers.substr(100, 101), "");
    
            Bridge.Test.Assert.areEqual(numbers.substr(2, 4), "2345");
        },
        jsSubstringWorks: function () {
            var numbers = "0123456789";
    
            // Let's start by using both begin and end.
            Bridge.Test.Assert.areEqual(numbers.substring(3, 7), "3456");
    
            // What happens when we start with a negative number.
            Bridge.Test.Assert.areEqual(numbers.substring(-7, 7), "0123456");
    
            // What happens when we use two negative numbers.
            Bridge.Test.Assert.areEqual(numbers.substring(-7, -3), "");
    
            // What happens when we omit the last argument.
            Bridge.Test.Assert.areEqual(numbers.substring(3), "3456789");
    
            // And with the negative, end-relevant index.
            Bridge.Test.Assert.areEqual(numbers.substring(-7), "0123456789");
    
            // If the index is out of range, it returns the empty string.
            Bridge.Test.Assert.areEqual(numbers.substring(100, 101), "");
    
            Bridge.Test.Assert.areEqual(numbers.substring(2, 4), "23");
        },
        toLowerCaseWorks: function () {
            Bridge.Test.Assert.areEqual("abcd", ("ABcd").toLowerCase());
        },
        toUpperCaseWorks: function () {
            Bridge.Test.Assert.areEqual("ABCD", ("ABcd").toUpperCase());
        },
        toLowerWorks: function () {
            Bridge.Test.Assert.areEqual("abcd", ("ABcd").toLowerCase());
        },
        toUpperWorks: function () {
            Bridge.Test.Assert.areEqual("ABCD", ("ABcd").toUpperCase());
        },
        trimWorks: function () {
            Bridge.Test.Assert.areEqual("abc", ("  abc  ").trim());
        },
        trimCharsWorks: function () {
            Bridge.Test.Assert.areEqual("aa, aa", System.String.trim((",., aa, aa,... "), [44, 46, 32]));
        },
        trimStartCharsWorks: function () {
            Bridge.Test.Assert.areEqual("aa, aa,... ", System.String.trimStart((",., aa, aa,... "), [44, 46, 32]));
        },
        trimEndCharsWorks: function () {
            Bridge.Test.Assert.areEqual(",., aa, aa", System.String.trimEnd((",., aa, aa,... "), [44, 46, 32]));
        },
        trimStartWorks: function () {
            Bridge.Test.Assert.areEqual("abc  ", System.String.trimStart(("  abc  ")));
        },
        trimEndWorks: function () {
            Bridge.Test.Assert.areEqual("  abc", System.String.trimEnd(("  abc  ")));
        },
        stringEqualityWorks: function () {
            var s1 = "abc", s2 = null, s3 = null;
            Bridge.Test.Assert.true(Bridge.referenceEquals(s1, "abc"));
            Bridge.Test.Assert.false(Bridge.referenceEquals(s1, "aBc"));
            Bridge.Test.Assert.false(Bridge.referenceEquals(s1, s2));
            Bridge.Test.Assert.true(Bridge.referenceEquals(s2, s3));
        },
        stringInequalityWorks: function () {
            var s1 = "abc", s2 = null, s3 = null;
            Bridge.Test.Assert.false(!Bridge.referenceEquals(s1, "abc"));
            Bridge.Test.Assert.true(!Bridge.referenceEquals(s1, "aBc"));
            Bridge.Test.Assert.true(!Bridge.referenceEquals(s1, s2));
            Bridge.Test.Assert.false(!Bridge.referenceEquals(s2, s3));
        },
        stringIndexingWorks: function () {
            var s = "abcd";
            Bridge.Test.Assert.areEqual(97, s.charCodeAt(0));
            Bridge.Test.Assert.areEqual(98, s.charCodeAt(1));
            Bridge.Test.Assert.areEqual(99, s.charCodeAt(2));
            Bridge.Test.Assert.areEqual(100, s.charCodeAt(3));
        },
        getHashCodeWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.getHashCode(("a")), Bridge.getHashCode(("a")));
            Bridge.Test.Assert.areEqual(Bridge.getHashCode(("b")), Bridge.getHashCode(("b")));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode(("b")), Bridge.getHashCode(("a")));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode(("ab")), Bridge.getHashCode(("a")));
            Bridge.Test.Assert.true(System.Int64(Bridge.getHashCode(("abcdefghijklmnopq"))).lt(System.Int64([-1,0])));
        },
        instanceEqualsWorks: function () {
            var r = "a";
            Bridge.Test.Assert.true(Bridge.equals(("a"), r));
            Bridge.Test.Assert.false(Bridge.equals(("b"), r));
            r = "b";
            Bridge.Test.Assert.false(Bridge.equals(("a"), r));
            Bridge.Test.Assert.true(Bridge.equals(("b"), r));
            r = "A";
            Bridge.Test.Assert.false(Bridge.equals(("a"), r));
            r = "ab";
            Bridge.Test.Assert.false(Bridge.equals(("a"), r));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.Assert.true(System.String.equals(("a"), "a"));
            Bridge.Test.Assert.false(System.String.equals(("b"), "a"));
            Bridge.Test.Assert.false(System.String.equals(("a"), "b"));
            Bridge.Test.Assert.true(System.String.equals(("b"), "b"));
            Bridge.Test.Assert.false(System.String.equals(("a"), "A"));
            Bridge.Test.Assert.false(System.String.equals(("a"), "ab"));
    
            Bridge.Test.Assert.true(Bridge.equalsT("a", "a"));
            Bridge.Test.Assert.false(Bridge.equalsT("b", "a"));
            Bridge.Test.Assert.false(Bridge.equalsT("a", "b"));
            Bridge.Test.Assert.true(Bridge.equalsT("b", "b"));
            Bridge.Test.Assert.false(Bridge.equalsT("a", "A"));
            Bridge.Test.Assert.false(Bridge.equalsT("a", "ab"));
        },
        stringEqualsWorks: function () {
            Bridge.Test.Assert.true(System.String.equals(("a"), "a"));
            Bridge.Test.Assert.false(System.String.equals(("b"), "a"));
            Bridge.Test.Assert.false(System.String.equals(("a"), "b"));
            Bridge.Test.Assert.true(System.String.equals(("b"), "b"));
            Bridge.Test.Assert.false(System.String.equals(("a"), "A"));
            Bridge.Test.Assert.false(System.String.equals(("a"), "ab"));
        },
        compareToWorks: function () {
            Bridge.Test.Assert.true(System.String.compare("abcd", "abcd") === 0);
            Bridge.Test.Assert.true(System.String.compare("abcd", "abcD") !== 0);
            Bridge.Test.Assert.true(System.String.compare("abcd", "abcb") > 0);
            Bridge.Test.Assert.true(System.String.compare("abcd", "abce") < 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare("abcd", "abcd") === 0);
            Bridge.Test.Assert.true(Bridge.compare("abcd", "abcD") !== 0);
            Bridge.Test.Assert.true(Bridge.compare("abcd", "abcb") > 0);
            Bridge.Test.Assert.true(Bridge.compare("abcd", "abce") < 0);
    
            Bridge.Test.Assert.true(Bridge.compare("", null) > 0);
        },
        joinWorks: function () {
            Bridge.Test.Assert.areEqual("a, ab, abc, abcd", ["a", "ab", "abc", "abcd"].join(", "));
            Bridge.Test.Assert.areEqual("ab, abc", ["a", "ab", "abc", "abcd"].slice(1, 1 + 2).join(", "));
    
            var intValues = new Bridge.ClientTest.SimpleTypes.StringTests.MyEnumerable$1(System.Int32)([1, 5, 6]);
            Bridge.Test.Assert.areEqual("1, 5, 6", Bridge.toArray(intValues).join(", "));
            var stringValues = new Bridge.ClientTest.SimpleTypes.StringTests.MyEnumerable$1(String)(["a", "ab", "abc", "abcd"]);
            Bridge.Test.Assert.areEqual("a, ab, abc, abcd", Bridge.toArray(stringValues).join(", "));
    
            // TODO: c# makes it False but js false
            Bridge.Test.Assert.areEqual("a, 1, abc, false", ["a", 1, "abc", false].join(", ")); // False");
        },
        containsWorks: function () {
            var text = "Lorem ipsum dolor sit amet";
            Bridge.Test.Assert.true(System.String.contains(text,"Lorem"));
            Bridge.Test.Assert.false(System.String.contains(text,"lorem"));
            Bridge.Test.Assert.true(System.String.contains(text,text));
        },
        toCharArrayWorks: function () {
            var text = "Lorem sit dolor";
            Bridge.Test.Assert.areDeepEqual([76, 111, 114, 101, 109, 32, 115, 105, 116, 32, 100, 111, 108, 111, 114], System.String.toCharArray(text, 0, text.length));
        }
    });
    
    Bridge.ns("Bridge.ClientTest.SimpleTypes.StringTests", $_);
    
    Bridge.apply($_.Bridge.ClientTest.SimpleTypes.StringTests, {
        f1: function (s) {
            return Bridge.referenceEquals(s, "a") ? "x" : "y";
        }
    });
    
    Bridge.define('Bridge.ClientTest.SimpleTypes.StringTests.MyEnumerable$1', function (T) { return {
        inherits: [System.Collections.Generic.IEnumerable$1(T)],
        _items: null,
        constructor: function (items) {
            this._items = items;
        },
        getEnumerator: function () {
            return this.getEnumerator$1();
        },
        getEnumerator$1: function () {
            return Bridge.cast(Bridge.getEnumerator(this._items), System.Collections.Generic.IEnumerator$1(T));
        }
    }; });
    
    Bridge.define('Bridge.ClientTest.SimpleTypes.TestVersion', {
        statics: {
            testConstructors: function () {
                var v1 = new System.Version("constructor");
    
                Bridge.Test.Assert.true$1(System.Version.op_Inequality(v1, null), "v1 created");
                Bridge.Test.Assert.areEqual$1(0, v1.getMajor(), "v1.Major 0");
                Bridge.Test.Assert.areEqual$1(0, v1.getMinor(), "v1.Minor 0");
                Bridge.Test.Assert.areEqual$1(-1, v1.getBuild(), "v1.Build -1");
                Bridge.Test.Assert.areEqual$1(-1, v1.getRevision(), "v1.Revision -1");
                Bridge.Test.Assert.areEqual$1(-1, v1.getMajorRevision(), "v1.MajorRevision -1");
                Bridge.Test.Assert.areEqual$1(-1, v1.getMinorRevision(), "v1.MinorRevision -1");
    
                var v2 = new System.Version("constructor$4", "2.4.1128.2");
                Bridge.Test.Assert.true$1(System.Version.op_Inequality(v2, null), "v2 created");
                Bridge.Test.Assert.areEqual$1(2, v2.getMajor(), "v2.Major 2");
                Bridge.Test.Assert.areEqual$1(4, v2.getMinor(), "v2.Minor 4");
                Bridge.Test.Assert.areEqual$1(1128, v2.getBuild(), "v2.Build 1128");
                Bridge.Test.Assert.areEqual$1(2, v2.getRevision(), "v2.Revision 2");
                Bridge.Test.Assert.areEqual$1(0, v2.getMajorRevision(), "v2.MajorRevision 0");
                Bridge.Test.Assert.areEqual$1(2, v2.getMinorRevision(), "v2.MinorRevision 2");
    
                var v3 = new System.Version("constructor$4", "2.4.1128.65537");
                Bridge.Test.Assert.true$1(System.Version.op_Inequality(v3, null), "v3 created");
                Bridge.Test.Assert.areEqual$1(2, v3.getMajor(), "v3.Major 2");
                Bridge.Test.Assert.areEqual$1(4, v3.getMinor(), "v3.Minor 4");
                Bridge.Test.Assert.areEqual$1(1128, v3.getBuild(), "v3.Build 1128");
                Bridge.Test.Assert.areEqual$1(65537, v3.getRevision(), "v3.Revision 65537");
                Bridge.Test.Assert.areEqual$1(1, v3.getMajorRevision(), "v3.MajorRevision 1");
                Bridge.Test.Assert.areEqual$1(1, v3.getMinorRevision(), "v3.MinorRevision 1");
    
                var v4 = new System.Version("constructor$1", 20, 10);
                Bridge.Test.Assert.true$1(System.Version.op_Inequality(v4, null), "v4 created");
                Bridge.Test.Assert.areEqual$1(20, v4.getMajor(), "v4.Major 20");
                Bridge.Test.Assert.areEqual$1(10, v4.getMinor(), "v4.Minor 10");
                Bridge.Test.Assert.areEqual$1(-1, v4.getBuild(), "v4.Build -1");
                Bridge.Test.Assert.areEqual$1(-1, v4.getRevision(), "v4.Revision -1");
                Bridge.Test.Assert.areEqual$1(-1, v4.getMajorRevision(), "v4.MajorRevision -1");
                Bridge.Test.Assert.areEqual$1(-1, v4.getMinorRevision(), "v4.MinorRevision -1");
    
                var v5 = new System.Version("constructor$2", 200, 100, 300);
                Bridge.Test.Assert.true$1(System.Version.op_Inequality(v5, null), "v5 created");
                Bridge.Test.Assert.areEqual$1(200, v5.getMajor(), "v5.Major 200");
                Bridge.Test.Assert.areEqual$1(100, v5.getMinor(), "v5.Minor 100");
                Bridge.Test.Assert.areEqual$1(300, v5.getBuild(), "v5.Build 300");
                Bridge.Test.Assert.areEqual$1(-1, v5.getRevision(), "v5.Revision -1");
                Bridge.Test.Assert.areEqual$1(-1, v5.getMajorRevision(), "v5.MajorRevision -1");
                Bridge.Test.Assert.areEqual$1(-1, v5.getMinorRevision(), "v5.MinorRevision -1");
    
                var v6 = new System.Version("constructor$3", 2000, 1000, 3000, 22613920);
                Bridge.Test.Assert.true$1(System.Version.op_Inequality(v6, null), "v6 created");
                Bridge.Test.Assert.areEqual$1(2000, v6.getMajor(), "v6.Major 2000");
                Bridge.Test.Assert.areEqual$1(1000, v6.getMinor(), "v6.Minor 1000");
                Bridge.Test.Assert.areEqual$1(3000, v6.getBuild(), "v6.Build 3000");
                Bridge.Test.Assert.areEqual$1(22613920, v6.getRevision(), "v6.Revision (345 << 16) + 4000 = 22613920");
                Bridge.Test.Assert.areEqual$1(345, v6.getMajorRevision(), "v6.MajorRevision 345");
                Bridge.Test.Assert.areEqual$1(4000, v6.getMinorRevision(), "v6.MinorRevision 4");
            },
            testCloneCompare: function () {
                var v1 = new System.Version("constructor$3", 1, 2, 3, 262149);
    
                var o = v1.clone();
                Bridge.Test.Assert.true$1(o != null, "v1 Cloned");
    
                var v2 = Bridge.as(o, System.Version);
                Bridge.Test.Assert.true$1(System.Version.op_Inequality(v2, null), "v1 Cloned as Version");
    
                Bridge.Test.Assert.areEqual$1(1, v2.getMajor(), "v2.Major 1");
                Bridge.Test.Assert.areEqual$1(2, v2.getMinor(), "v2.Minor 2");
                Bridge.Test.Assert.areEqual$1(3, v2.getBuild(), "v2.Build 3");
                Bridge.Test.Assert.areEqual$1(262149, v2.getRevision(), "v2.Revision  (4 << 16) + 5 = 262149");
                Bridge.Test.Assert.areEqual$1(4, v2.getMajorRevision(), "v2.MajorRevision 4");
                Bridge.Test.Assert.areEqual$1(5, v2.getMinorRevision(), "v2.MinorRevision 5");
    
                var v3 = new System.Version("constructor$3", 1, 2, 2, 262149);
                Bridge.Test.Assert.areEqual$1(1, v1.compareTo(v3), "v1.CompareTo(v3)");
    
                var v4 = new System.Version("constructor$3", 1, 3, 3, 262149);
                Bridge.Test.Assert.areEqual$1(-1, v1.compareTo(v4), "v1.CompareTo(v4)");
    
                Bridge.Test.Assert.areEqual$1(0, v1.compareTo$1(o), "v1.CompareTo(o)");
                Bridge.Test.Assert.areEqual$1(0, v1.compareTo(v2), "v1.CompareTo(v2)");
                Bridge.Test.Assert.areNotEqual$1(0, v1.compareTo(null), "v1.CompareTo(null)");
            },
            testEqualsGetHashCode: function () {
                var v1 = new System.Version("constructor$3", 100, 200, 300, 26214900);
                var v2 = new System.Version("constructor$3", 100, 200, 300, 26214900);
                var v3 = new System.Version("constructor$3", 101, 200, 300, 26214900);
                var o = { };
                var o2 = v2;
    
                Bridge.Test.Assert.true$1(v1.equalsT(v2), "v1.Equals(v2)");
                Bridge.Test.Assert.false$1(v1.equalsT(v3), "v1.Equals(v3)");
                Bridge.Test.Assert.false$1(v1.equals(o), "v1.Equals(o)");
                Bridge.Test.Assert.false$1(v1.equalsT(null), "v1.Equals(null)");
                Bridge.Test.Assert.false$1(v1.equals(100), "v1.Equals(100)");
                Bridge.Test.Assert.true$1(v1.equals(o2), "v1.Equals(o2)");
    
                Bridge.Test.Assert.areEqual$1(1283637748, v1.getHashCode(), "v1.GetHashCode()");
                Bridge.Test.Assert.areEqual$1(1283637748, v2.getHashCode(), "v2.GetHashCode()");
                Bridge.Test.Assert.areEqual$1(1552073204, v3.getHashCode(), "v3.GetHashCode()");
            },
            testToString: function () {
                var v1 = new System.Version("constructor$4", "2.4.1128.65537");
                var v2 = new System.Version("constructor$3", 100, 200, 300, 26214900);
                var v3 = new System.Version("constructor$2", 100, 200, 300);
                var v4 = new System.Version("constructor$1", 100, 200);
                var v5 = new System.Version("constructor");
    
                Bridge.Test.Assert.areEqual$1("2.4.1128.65537", v1.toString(), "c1.ToString()");
                Bridge.Test.Assert.areEqual$1("100.200.300.26214900", v2.toString(), "c2.ToString()");
                Bridge.Test.Assert.areEqual$1("100.200.300", v3.toString(), "c3.ToString()");
                Bridge.Test.Assert.areEqual$1("100.200", v4.toString(), "c4.ToString()");
                Bridge.Test.Assert.areEqual$1("0.0", v5.toString(), "c5.ToString()");
    
                Bridge.Test.Assert.areEqual$1("2", v1.toString$1(1), "c1.ToString(1)");
                Bridge.Test.Assert.areEqual$1("2.4", v1.toString$1(2), "c1.ToString(2)");
                Bridge.Test.Assert.areEqual$1("2.4.1128", v1.toString$1(3), "c1.ToString(3)");
                Bridge.Test.Assert.areEqual$1("2.4.1128.65537", v1.toString$1(4), "c1.ToString(4)");
                Bridge.Test.Assert.throws$5(function () {
                    v1.toString$1(5);
                }, "c1.ToString(5)");
            },
            testParse: function () {
                var s1 = "105.1.1128.65547";
                var v1 = new System.Version("constructor$4", s1);
    
                Bridge.Test.Assert.areEqual$1(v1.toString(), System.Version.parse(s1).toString(), "Version.Parse(s1)");
    
                var s2 = "105.1";
                var v2 = new System.Version("constructor$4", s2);
    
                Bridge.Test.Assert.areEqual$1(v2.toString(), System.Version.parse(s2).toString(), "Version.Parse(s2)");
    
                Bridge.Test.Assert.throws$5($_.Bridge.ClientTest.SimpleTypes.TestVersion.f1, "Version.Parse(\"12,123.23.12\")");
    
                var vp1 = { };
                var b1 = System.Version.tryParse("12,123.23.12", vp1);
                Bridge.Test.Assert.areEqual$1(false, b1, "b1");
    
                var vp2 = { };
                var b2 = System.Version.tryParse("12.3.2.1", vp2);
                Bridge.Test.Assert.areEqual$1(true, b2, "b2");
                Bridge.Test.Assert.areEqual$1("12.3.2.1", vp2.v.toString(), "vp2.ToString()");
            },
            testOperators: function () {
                var v1 = new System.Version("constructor$3", 1, 2, 3, 262149);
                var v2 = new System.Version("constructor$3", 1, 2, 3, 262149);
                var v3 = new System.Version("constructor$3", 1, 3, 3, 262149);
    
                Bridge.Test.Assert.true$1(System.Version.op_Equality(v1, v2), "v1 == v2");
                Bridge.Test.Assert.false$1(System.Version.op_Inequality(v1, v2), "v1 != v2");
                Bridge.Test.Assert.false$1(System.Version.op_GreaterThan(v1, v2), "v1 > v2");
                Bridge.Test.Assert.true$1(System.Version.op_GreaterThanOrEqual(v1, v2), "v1 >= v2");
                Bridge.Test.Assert.false$1(System.Version.op_LessThan(v1, v2), "v1 < v2");
                Bridge.Test.Assert.true$1(System.Version.op_LessThanOrEqual(v1, v2), "v1 <= v2");
    
                Bridge.Test.Assert.false$1(System.Version.op_Equality(v1, v3), "v1 == v3");
                Bridge.Test.Assert.true$1(System.Version.op_Inequality(v1, v3), "v1 != v3");
                Bridge.Test.Assert.false$1(System.Version.op_GreaterThan(v1, v3), "v1 > v3");
                Bridge.Test.Assert.false$1(System.Version.op_GreaterThanOrEqual(v1, v3), "v1 >= v3");
                Bridge.Test.Assert.true$1(System.Version.op_LessThan(v1, v3), "v1 < v3");
                Bridge.Test.Assert.true$1(System.Version.op_LessThanOrEqual(v1, v3), "v1 <= v3");
    
                Bridge.Test.Assert.false$1(System.Version.op_Equality(v1, null), "v1 == null");
                Bridge.Test.Assert.true$1(System.Version.op_Inequality(v1, null), "v1 != null");
                Bridge.Test.Assert.true$1(System.Version.op_GreaterThan(v1, null), "v1 > null");
                Bridge.Test.Assert.true$1(System.Version.op_GreaterThanOrEqual(v1, null), "v1 >= null");
                Bridge.Test.Assert.false$1(System.Version.op_LessThan(v1, null), "v1 < null");
                Bridge.Test.Assert.false$1(System.Version.op_LessThanOrEqual(v1, null), "v1 <= null");
    
                Bridge.Test.Assert.false$1(System.Version.op_Equality(null, v3), "null == v3");
                Bridge.Test.Assert.true$1(System.Version.op_Inequality(null, v3), "null != v3");
                Bridge.Test.Assert.false$1(System.Version.op_GreaterThan(null, v3), "null > v3");
                Bridge.Test.Assert.false$1(System.Version.op_GreaterThanOrEqual(null, v3), "null >= v3");
                Bridge.Test.Assert.true$1(System.Version.op_LessThan(null, v3), "null < v3");
                Bridge.Test.Assert.true$1(System.Version.op_LessThanOrEqual(null, v3), "null <= v3");
    
                var v4 = null;
                var v5 = null;
    
                Bridge.Test.Assert.true$1(System.Version.op_Equality(v4, v5), "v4 == v5");
                Bridge.Test.Assert.false$1(System.Version.op_Inequality(v4, v5), "v4 != v5");
                Bridge.Test.Assert.false$1(System.Version.op_GreaterThan(v4, v5), "v4 > v5");
                Bridge.Test.Assert.false$1(System.Version.op_GreaterThanOrEqual(v4, v5), "v4 >= v5");
                Bridge.Test.Assert.false$1(System.Version.op_LessThan(v4, v5), "v4 < v5");
                Bridge.Test.Assert.false$1(System.Version.op_LessThanOrEqual(v4, v5), "v4 <= v5");
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.SimpleTypes.TestVersion", $_);
    
    Bridge.apply($_.Bridge.ClientTest.SimpleTypes.TestVersion, {
        f1: function () {
            System.Version.parse("12,123.23.12");
        }
    });
    
    Bridge.define('Bridge.ClientTest.SimpleTypes.TimeSpanTests', {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual("System.TimeSpan", Bridge.getTypeName(System.TimeSpan));
            var d = new System.TimeSpan();
            Bridge.Test.Assert.true$1(Bridge.is(d, System.TimeSpan), "d is TimeSpan");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.IComparable$1(System.TimeSpan)), "d is IComparable<TimeSpan>");
            Bridge.Test.Assert.true$1(Bridge.is(d, System.IEquatable$1(System.TimeSpan)), "d is IEquatable<TimeSpan>");
        },
        defaultConstructorWorks: function () {
            var time = new System.TimeSpan();
            Bridge.Test.Assert.true(System.Int64(0).equals(time.getTicks()));
        },
        defaultValueWorks: function () {
            var ts = Bridge.getDefaultValue(System.TimeSpan);
            Bridge.Test.Assert.true(System.Int64(0).equals(ts.getTicks()));
        },
        zeroWorks: function () {
            var ts = System.TimeSpan.zero;
            Bridge.Test.Assert.true(System.Int64(0).equals(ts.getTicks()));
        },
        creatingInstanceReturnsTimeSpanWithZeroValue: function () {
            var ts = Bridge.createInstance(System.TimeSpan);
            Bridge.Test.Assert.true(System.Int64(0).equals(ts.getTicks()));
        },
        parameterConstructorsWorks: function () {
            var time = new System.TimeSpan(System.Int64(34567));
            Bridge.Test.Assert.true$1(Bridge.is(time, System.TimeSpan), "ticks type");
            Bridge.Test.Assert.true$1(System.Int64(34567).equals(time.getTicks()), "ticks value");
    
            time = new System.TimeSpan(10, 20, 5);
            Bridge.Test.Assert.true$1(Bridge.is(time, System.TimeSpan), "h, m, s type");
            Bridge.Test.Assert.true$1(System.Int64([-1612154752,86]).equals(time.getTicks()), "h, m, s value");
    
            time = new System.TimeSpan(15, 10, 20, 5);
            Bridge.Test.Assert.true$1(Bridge.is(time, System.TimeSpan), "d, h, m, s type");
            Bridge.Test.Assert.true$1(System.Int64([471513216,3104]).equals(time.getTicks()), "d, h, m, s value");
    
            time = new System.TimeSpan(15, 10, 20, 5, 14);
            Bridge.Test.Assert.true$1(Bridge.is(time, System.TimeSpan), "full type");
            Bridge.Test.Assert.true$1(System.Int64([471653216,3104]).equals(time.getTicks()), "full value");
        },
        factoryMethodsWork: function () {
            var time = System.TimeSpan.fromDays(3);
            Bridge.Test.Assert.true$1(Bridge.is(time, System.TimeSpan), "FromDays type");
            Bridge.Test.Assert.true$1(System.Int64([2134720512,603]).equals(time.getTicks()), "FromDays value");
    
            time = System.TimeSpan.fromHours(3);
            Bridge.Test.Assert.true$1(Bridge.is(time, System.TimeSpan), "FromHours type");
            Bridge.Test.Assert.true$1(System.Int64([625817600,25]).equals(time.getTicks()), "FromHours value");
    
            time = System.TimeSpan.fromMinutes(3);
            Bridge.Test.Assert.true$1(Bridge.is(time, System.TimeSpan), "FromMinutes type");
            Bridge.Test.Assert.true$1(System.Int64(1800000000).equals(time.getTicks()), "FromMinutes value");
    
            time = System.TimeSpan.fromSeconds(3);
            Bridge.Test.Assert.true$1(Bridge.is(time, System.TimeSpan), "FromSeconds type");
            Bridge.Test.Assert.true$1(System.Int64(30000000).equals(time.getTicks()), "FromSeconds value");
    
            time = System.TimeSpan.fromMilliseconds(3);
            Bridge.Test.Assert.true$1(Bridge.is(time, System.TimeSpan), "FromMilliseconds type");
            Bridge.Test.Assert.true$1(System.Int64(30000).equals(time.getTicks()), "FromMilliseconds value");
    
            time = System.TimeSpan.fromTicks(System.Int64(3));
            Bridge.Test.Assert.true$1(Bridge.is(time, System.TimeSpan), "FromTicks type");
            Bridge.Test.Assert.true$1(System.Int64(3).equals(time.getTicks()), "FromTicks value");
        },
        propertiesWork: function () {
            var time = new System.TimeSpan(15, 10, 20, 5, 14);
            Bridge.Test.Assert.areEqual(15, time.getDays());
            Bridge.Test.Assert.areEqual(10, time.getHours());
            Bridge.Test.Assert.areEqual(20, time.getMinutes());
            Bridge.Test.Assert.areEqual(5, time.getSeconds());
            Bridge.Test.Assert.areEqual(14, time.getMilliseconds());
            this.assertAlmostEqual(time.getTotalDays(), 15.430613587962963);
            this.assertAlmostEqual(time.getTotalHours(), 370.33472611111108);
            this.assertAlmostEqual(time.getTotalMinutes(), 22220.083566666668);
            this.assertAlmostEqual(time.getTotalSeconds(), 1333205.014);
            this.assertAlmostEqual(time.getTotalMilliseconds(), 1333205014.0);
            Bridge.Test.Assert.true(System.Int64([471653216,3104]).equals(time.getTicks()));
        },
        compareToWorks: function () {
            var time1 = new System.TimeSpan(15, 10, 20, 5, 14);
            var time2 = new System.TimeSpan(15, 10, 20, 5, 14);
            var time3 = new System.TimeSpan(14, 10, 20, 5, 14);
            var time4 = new System.TimeSpan(15, 11, 20, 5, 14);
            Bridge.Test.Assert.areEqual(time1.compareTo(time1), 0);
            Bridge.Test.Assert.areEqual(time1.compareTo(time2), 0);
            Bridge.Test.Assert.areEqual(time1.compareTo(time3), 1);
            Bridge.Test.Assert.areEqual(time1.compareTo(time4), -1);
        },
        compareWorks: function () {
            var time1 = new System.TimeSpan(15, 10, 20, 5, 14);
            var time2 = new System.TimeSpan(15, 10, 20, 5, 14);
            var time3 = new System.TimeSpan(14, 10, 20, 5, 14);
            var time4 = new System.TimeSpan(15, 11, 20, 5, 14);
            Bridge.Test.Assert.areEqual(time1.compareTo(time1), 0);
            Bridge.Test.Assert.areEqual(time1.compareTo(time2), 0);
            Bridge.Test.Assert.areEqual(time1.compareTo(time3), 1);
            Bridge.Test.Assert.areEqual(time1.compareTo(time4), -1);
        },
        staticEqualsWorks: function () {
            var time1 = new System.TimeSpan(15, 10, 20, 5, 14);
            var time2 = new System.TimeSpan(14, 10, 20, 5, 14);
            var time3 = new System.TimeSpan(15, 10, 20, 5, 14);
    
            Bridge.Test.Assert.false((time1).ticks.eq((time2).ticks));
            Bridge.Test.Assert.true((time1).ticks.eq((time3).ticks));
        },
        equalsWorks: function () {
            var time1 = new System.TimeSpan(15, 10, 20, 5, 14);
            var time2 = new System.TimeSpan(14, 10, 20, 5, 14);
            var time3 = new System.TimeSpan(15, 10, 20, 5, 14);
    
            Bridge.Test.Assert.false(time1.equalsT(time2));
            Bridge.Test.Assert.true(time1.equalsT(time3));
        },
        iEquatableEqualsWorks: function () {
            var time1 = new System.TimeSpan(15, 10, 20, 5, 14);
            var time2 = new System.TimeSpan(14, 10, 20, 5, 14);
            var time3 = new System.TimeSpan(15, 10, 20, 5, 14);
    
            Bridge.Test.Assert.false(Bridge.equalsT(Bridge.cast(time1, System.IEquatable$1(System.TimeSpan)), time2));
            Bridge.Test.Assert.true(Bridge.equalsT(Bridge.cast(time1, System.IEquatable$1(System.TimeSpan)), time3));
        },
        toStringWorks: function () {
            var time1 = new System.TimeSpan(15, 10, 20, 5, 14);
            var time2 = new System.TimeSpan(14, 10, 20, 5, 2);
            var time3 = new System.TimeSpan(15, 11, 20, 6, 14);
            var time4 = new System.TimeSpan(1, 2, 3);
            Bridge.Test.Assert.areEqual("15.10:20:05.0140000", time1.toString());
            Bridge.Test.Assert.areEqual("14.10:20:05.0020000", time2.toString());
            Bridge.Test.Assert.areEqual("15.11:20:06.0140000", time3.toString());
            Bridge.Test.Assert.areEqual("01:02:03", time4.toString());
        },
        addWorks: function () {
            var time1 = new System.TimeSpan(2, 3, 4, 5, 6);
            var time2 = new System.TimeSpan(3, 4, 5, 6, 7);
            var actual = time1.add(time2);
            Bridge.Test.Assert.true$1(Bridge.is(actual, System.TimeSpan), "Should be TimeSpan");
            Bridge.Test.Assert.areEqual$1(457751013, actual.getTotalMilliseconds(), "TotalMilliseconds should be correct");
        },
        subtractWorks: function () {
            var time1 = new System.TimeSpan(4, 3, 7, 2, 6);
            var time2 = new System.TimeSpan(3, 4, 5, 6, 7);
            var actual = time1.subtract(time2);
            Bridge.Test.Assert.true$1(Bridge.is(actual, System.TimeSpan), "Should be TimeSpan");
            Bridge.Test.Assert.areEqual$1(82915999, actual.getTotalMilliseconds(), "TotalMilliseconds should be correct");
        },
        durationWorks: function () {
            var time1 = new System.TimeSpan(-3, -2, -1, -5, -4);
            var time2 = new System.TimeSpan(2, 1, 5, 4, 3);
            var actual1 = time1.duration();
            var actual2 = time2.duration();
            Bridge.Test.Assert.true$1(Bridge.is(time1, System.TimeSpan), "Should be TimeSpan");
            Bridge.Test.Assert.areEqual$1(266465004, actual1.getTotalMilliseconds(), "Negative should be negated");
            Bridge.Test.Assert.areEqual$1(176704003, actual2.getTotalMilliseconds(), "Positive should be preserved");
        },
        negateWorks: function () {
            var time = new System.TimeSpan(-3, 2, -1, 5, -4);
            var actual = time.negate();
            Bridge.Test.Assert.true$1(Bridge.is(actual, System.TimeSpan), "Should be TimeSpan");
            Bridge.Test.Assert.areEqual$1(252055004, actual.getTotalMilliseconds(), "Ticks should be correct");
        },
        assertAlmostEqual: function (d1, d2) {
            var diff = d2 - d1;
            if (diff < 0) {
                diff = -diff;
            }
            Bridge.Test.Assert.true(diff < 1E-08);
        },
        comparisonOperatorsWork: function () {
            var time1 = new System.TimeSpan(15, 10, 20, 5, 14);
            var time2 = new System.TimeSpan(15, 10, 20, 5, 14);
            var time3 = new System.TimeSpan(14, 10, 20, 5, 14);
            var time4 = new System.TimeSpan(15, 11, 20, 5, 14);
    
            Bridge.Test.Assert.false$1(System.TimeSpan.gt(time1, time2), "> 1");
            Bridge.Test.Assert.true$1(System.TimeSpan.gt(time1, time3), "> 2");
            Bridge.Test.Assert.false$1(System.TimeSpan.gt(time1, time4), "> 3");
    
            Bridge.Test.Assert.true$1(System.TimeSpan.gte(time1, time2), ">= 1");
            Bridge.Test.Assert.true$1(System.TimeSpan.gte(time1, time3), ">= 2");
            Bridge.Test.Assert.false$1(System.TimeSpan.gte(time1, time4), ">= 3");
    
            Bridge.Test.Assert.false$1(System.TimeSpan.lt(time1, time2), "< 1");
            Bridge.Test.Assert.false$1(System.TimeSpan.lt(time1, time3), "< 2");
            Bridge.Test.Assert.true$1(System.TimeSpan.lt(time1, time4), "< 3");
    
            Bridge.Test.Assert.true$1(System.TimeSpan.lte(time1, time2), "<= 1");
            Bridge.Test.Assert.false$1(System.TimeSpan.lte(time1, time3), "<= 2");
            Bridge.Test.Assert.true$1(System.TimeSpan.lte(time1, time4), "<= 3");
    
            Bridge.Test.Assert.true$1(System.TimeSpan.eq(time1, time1), "== 1");
            Bridge.Test.Assert.true$1(System.TimeSpan.eq(time1, time2), "== 2");
            Bridge.Test.Assert.false$1(System.TimeSpan.eq(time1, time3), "== 3");
            Bridge.Test.Assert.false$1(System.TimeSpan.eq(time1, time4), "== 4");
    
            Bridge.Test.Assert.false$1(System.TimeSpan.neq(time1, time1), "!= 1");
            Bridge.Test.Assert.false$1(System.TimeSpan.neq(time1, time2), "!= 2");
            Bridge.Test.Assert.true$1(System.TimeSpan.neq(time1, time3), "!= 3");
            Bridge.Test.Assert.true$1(System.TimeSpan.neq(time1, time4), "!= 4");
        },
        additionOperatorWorks: function () {
            var time1 = new System.TimeSpan(2, 3, 4, 5, 6);
            var time2 = new System.TimeSpan(3, 4, 5, 6, 7);
            var actual = System.TimeSpan.add(time1, time2);
            Bridge.Test.Assert.true$1(Bridge.is(actual, System.TimeSpan), "Should be TimeSpan");
            Bridge.Test.Assert.areEqual$1(457751013, actual.getTotalMilliseconds(), "TotalMilliseconds should be correct");
        },
        subtractionOperatorWorks: function () {
            var time1 = new System.TimeSpan(4, 3, 7, 2, 6);
            var time2 = new System.TimeSpan(3, 4, 5, 6, 7);
            var actual = System.TimeSpan.sub(time1, time2);
            Bridge.Test.Assert.true$1(Bridge.is(actual, System.TimeSpan), "Should be TimeSpan");
            Bridge.Test.Assert.areEqual$1(82915999, actual.getTotalMilliseconds(), "TotalMilliseconds should be correct");
        },
        unaryPlusWorks: function () {
            var time = new System.TimeSpan(-3, 2, -1, 5, -4);
            var actual = System.TimeSpan.plus(time);
            Bridge.Test.Assert.true$1(Bridge.is(actual, System.TimeSpan), "Should be TimeSpan");
            Bridge.Test.Assert.areEqual$1(-252055004, actual.getTotalMilliseconds(), "Ticks should be correct");
        },
        unaryMinusWorks: function () {
            var time = new System.TimeSpan(-3, 2, -1, 5, -4);
            var actual = System.TimeSpan.neg(time);
            Bridge.Test.Assert.true$1(Bridge.is(actual, System.TimeSpan), "Should be TimeSpan");
            Bridge.Test.Assert.areEqual$1(252055004, actual.getTotalMilliseconds(), "Ticks should be correct");
        }
    });
    
    Bridge.define('Bridge.ClientTest.SimpleTypes.TupleTests', {
        tuple1Works: function () {
            for (var i = 0; i <= 1; i = (i + 1) | 0) {
                var t = i === 0 ? { item1: "a" } : { item1: "a" };
                Bridge.Test.Assert.areStrictEqual("a", t.item1);
            }
        },
        tuple2Works: function () {
            for (var i = 0; i <= 1; i = (i + 1) | 0) {
                var t = i === 0 ? { item1: "a", item2: "b" } : { item1: "a", item2: "b" };
                Bridge.Test.Assert.areStrictEqual("a", t.item1);
                Bridge.Test.Assert.areStrictEqual("b", t.item2);
            }
        },
        tuple3Works: function () {
            for (var i = 0; i <= 1; i = (i + 1) | 0) {
                var t = i === 0 ? { item1: "a", item2: "b", item3: "c" } : { item1: "a", item2: "b", item3: "c" };
                Bridge.Test.Assert.areStrictEqual("a", t.item1);
                Bridge.Test.Assert.areStrictEqual("b", t.item2);
                Bridge.Test.Assert.areStrictEqual("c", t.item3);
            }
        },
        tuple4Works: function () {
            for (var i = 0; i <= 1; i = (i + 1) | 0) {
                var t = i === 0 ? { item1: "a", item2: "b", item3: "c", item4: "d" } : { item1: "a", item2: "b", item3: "c", item4: "d" };
                Bridge.Test.Assert.areStrictEqual("a", t.item1);
                Bridge.Test.Assert.areStrictEqual("b", t.item2);
                Bridge.Test.Assert.areStrictEqual("c", t.item3);
                Bridge.Test.Assert.areStrictEqual("d", t.item4);
            }
        },
        tuple5Works: function () {
            for (var i = 0; i <= 1; i = (i + 1) | 0) {
                var t = i === 0 ? { item1: "a", item2: "b", item3: "c", item4: "d", item5: "e" } : { item1: "a", item2: "b", item3: "c", item4: "d", item5: "e" };
                Bridge.Test.Assert.areStrictEqual("a", t.item1);
                Bridge.Test.Assert.areStrictEqual("b", t.item2);
                Bridge.Test.Assert.areStrictEqual("c", t.item3);
                Bridge.Test.Assert.areStrictEqual("d", t.item4);
                Bridge.Test.Assert.areStrictEqual("e", t.item5);
            }
        },
        tuple6Works: function () {
            for (var i = 0; i <= 1; i = (i + 1) | 0) {
                var t = i === 0 ? { item1: "a", item2: "b", item3: "c", item4: "d", item5: "e", item6: "f" } : { item1: "a", item2: "b", item3: "c", item4: "d", item5: "e", item6: "f" };
                Bridge.Test.Assert.areStrictEqual("a", t.item1);
                Bridge.Test.Assert.areStrictEqual("b", t.item2);
                Bridge.Test.Assert.areStrictEqual("c", t.item3);
                Bridge.Test.Assert.areStrictEqual("d", t.item4);
                Bridge.Test.Assert.areStrictEqual("e", t.item5);
                Bridge.Test.Assert.areStrictEqual("f", t.item6);
            }
        },
        tuple7Works: function () {
            for (var i = 0; i <= 1; i = (i + 1) | 0) {
                var t = i === 0 ? { item1: "a", item2: "b", item3: "c", item4: "d", item5: "e", item6: "f", item7: "g" } : { item1: "a", item2: "b", item3: "c", item4: "d", item5: "e", item6: "f", item7: "g" };
                Bridge.Test.Assert.areStrictEqual("a", t.item1);
                Bridge.Test.Assert.areStrictEqual("b", t.item2);
                Bridge.Test.Assert.areStrictEqual("c", t.item3);
                Bridge.Test.Assert.areStrictEqual("d", t.item4);
                Bridge.Test.Assert.areStrictEqual("e", t.item5);
                Bridge.Test.Assert.areStrictEqual("f", t.item6);
                Bridge.Test.Assert.areStrictEqual("g", t.item7);
            }
        },
        tuple8Works: function () {
            for (var i = 0; i <= 1; i = (i + 1) | 0) {
                var t = i === 0 ? { item1: "a", item2: "b", item3: "c", item4: "d", item5: "e", item6: "f", item7: "g", rest: "h" } : { item1: "a", item2: "b", item3: "c", item4: "d", item5: "e", item6: "f", item7: "g", rest: "h" };
                Bridge.Test.Assert.areStrictEqual("a", t.item1);
                Bridge.Test.Assert.areStrictEqual("b", t.item2);
                Bridge.Test.Assert.areStrictEqual("c", t.item3);
                Bridge.Test.Assert.areStrictEqual("d", t.item4);
                Bridge.Test.Assert.areStrictEqual("e", t.item5);
                Bridge.Test.Assert.areStrictEqual("f", t.item6);
                Bridge.Test.Assert.areStrictEqual("g", t.item7);
                Bridge.Test.Assert.areStrictEqual("h", t.rest);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.SimpleTypes.UInt16Tests', {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.true(Bridge.is(0, System.UInt16));
            Bridge.Test.Assert.false(Bridge.is(0.5, System.UInt16));
            Bridge.Test.Assert.false(Bridge.is(-1, System.UInt16));
            Bridge.Test.Assert.false(Bridge.is(65536, System.UInt16));
            Bridge.Test.Assert.areEqual("System.UInt16", Bridge.getTypeName(System.UInt16));
    
            var s = 0;
            Bridge.Test.Assert.true(Bridge.is(s, System.UInt16));
            Bridge.Test.Assert.true(Bridge.is(s, System.IComparable$1(System.UInt16)));
            Bridge.Test.Assert.true(Bridge.is(s, System.IEquatable$1(System.UInt16)));
            Bridge.Test.Assert.true(Bridge.is(s, System.IFormattable));
        },
        castsWork: function () {
            var i1 = -1, i2 = 0, i3 = 234, i4 = 65535, i5 = 65536;
            var ni1 = -1, ni2 = 0, ni3 = 234, ni4 = 65535, ni5 = 65536, ni6 = null;
    
            Bridge.Test.Assert.areStrictEqual$1(65535, (i1 & 65535), "-1 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(0, (i2 & 65535), "0 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(234, (i3 & 65535), "234 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(65535, (i4 & 65535), "65535 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(0, (i5 & 65535), "65536 unchecked");
    
            Bridge.Test.Assert.areStrictEqual$1(65535, Bridge.Int.clipu16(ni1), "nullable -1 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(0, Bridge.Int.clipu16(ni2), "nullable 0 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(234, Bridge.Int.clipu16(ni3), "nullable 234 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(65535, Bridge.Int.clipu16(ni4), "nullable 65535 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(0, Bridge.Int.clipu16(ni5), "nullable 65536 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(null, Bridge.Int.clipu16(ni6), "null unchecked");
    
            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(i1, System.UInt16);
            }, $_.Bridge.ClientTest.SimpleTypes.UInt16Tests.f1);
            Bridge.Test.Assert.areStrictEqual$1(0, Bridge.Int.check(i2, System.UInt16), "0 checked");
            Bridge.Test.Assert.areStrictEqual$1(234, Bridge.Int.check(i3, System.UInt16), "234 checked");
            Bridge.Test.Assert.areStrictEqual$1(65535, Bridge.Int.check(i4, System.UInt16), "65535 checked");
            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(i5, System.UInt16);
            }, $_.Bridge.ClientTest.SimpleTypes.UInt16Tests.f1);
    
            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(ni1, System.UInt16);
            }, $_.Bridge.ClientTest.SimpleTypes.UInt16Tests.f1);
            Bridge.Test.Assert.areStrictEqual$1(0, Bridge.Int.check(ni2, System.UInt16), "nullable 0 checked");
            Bridge.Test.Assert.areStrictEqual$1(234, Bridge.Int.check(ni3, System.UInt16), "nullable 234 checked");
            Bridge.Test.Assert.areStrictEqual$1(65535, Bridge.Int.check(ni4, System.UInt16), "nullable 65535 checked");
            Bridge.Test.Assert.throws$1(function () {
                var b = Bridge.Int.check(ni5, System.UInt16);
            }, $_.Bridge.ClientTest.SimpleTypes.UInt16Tests.f1);
            Bridge.Test.Assert.areStrictEqual$1(null, Bridge.Int.check(ni6, System.UInt16), "null checked");
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueIs0: function () {
            Bridge.Test.Assert.areStrictEqual(0, this.getDefaultValue(System.UInt16));
        },
        defaultConstructorReturnsZero: function () {
            Bridge.Test.Assert.areStrictEqual(0, Number());
        },
        creatingInstanceReturnsZero: function () {
            Bridge.Test.Assert.areStrictEqual(0, Bridge.createInstance(System.UInt16));
        },
        constantsWork: function () {
            Bridge.Test.Assert.areEqual(0, 0);
            Bridge.Test.Assert.areEqual(65535, 65535);
        },
        formatWorks: function () {
            Bridge.Test.Assert.areEqual("123", System.UInt16.format((291), "x"));
        },
        iFormattableToStringWorks: function () {
            Bridge.Test.Assert.areEqual("123", System.UInt16.format((291), "x"));
        },
        tryParseWorks: function () {
            var numberResult = { };
            var result = System.UInt16.tryParse("23445", numberResult);
            Bridge.Test.Assert.true(result);
            Bridge.Test.Assert.areEqual(23445, numberResult.v);
    
            result = System.UInt16.tryParse("", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);
    
            result = System.UInt16.tryParse(null, numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);
    
            result = System.UInt16.tryParse("notanumber", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);
    
            result = System.UInt16.tryParse("32768", numberResult);
            Bridge.Test.Assert.true(result);
            Bridge.Test.Assert.areEqual(32768, numberResult.v);
    
            result = System.UInt16.tryParse("-1", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(-1, numberResult.v);
    
            result = System.UInt16.tryParse("2.5", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);
        },
        parseWorks: function () {
            Bridge.Test.Assert.areEqual(23445, System.UInt16.parse("23445"));
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.UInt16Tests.f2);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.UInt16Tests.f3);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.UInt16Tests.f4);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.UInt16Tests.f5);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.UInt16Tests.f6);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.UInt16Tests.f7);
        },
        toStringWithoutRadixWorks: function () {
            Bridge.Test.Assert.areEqual("123", (123).toString());
        },
        toStringWithRadixWorks: function () {
            Bridge.Test.Assert.areEqual("123", (123).toString(10));
            Bridge.Test.Assert.areEqual("123", (291).toString(16));
        },
        getHashCodeWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((0)), Bridge.getHashCode((0)));
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((1)), Bridge.getHashCode((1)));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode((1)), Bridge.getHashCode((0)));
        },
        equalsWorks: function () {
            Bridge.Test.Assert.true(Bridge.equals((0), 0));
            Bridge.Test.Assert.false(Bridge.equals((1), 0));
            Bridge.Test.Assert.false(Bridge.equals((0), 1));
            Bridge.Test.Assert.true(Bridge.equals((1), 1));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.Assert.true((0) === 0);
            Bridge.Test.Assert.false((1) === 0);
            Bridge.Test.Assert.false((0) === 1);
            Bridge.Test.Assert.true((1) === 1);
    
            Bridge.Test.Assert.true(Bridge.equalsT(0, 0));
            Bridge.Test.Assert.false(Bridge.equalsT(1, 0));
            Bridge.Test.Assert.false(Bridge.equalsT(0, 1));
            Bridge.Test.Assert.true(Bridge.equalsT(1, 1));
        },
        compareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare((0), 0) === 0);
            Bridge.Test.Assert.true(Bridge.compare((1), 0) > 0);
            Bridge.Test.Assert.true(Bridge.compare((0), 1) < 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare(0, 0) === 0);
            Bridge.Test.Assert.true(Bridge.compare(1, 0) > 0);
            Bridge.Test.Assert.true(Bridge.compare(0, 1) < 0);
        }
    });
    
    Bridge.ns("Bridge.ClientTest.SimpleTypes.UInt16Tests", $_);
    
    Bridge.apply($_.Bridge.ClientTest.SimpleTypes.UInt16Tests, {
        f1: function (err) {
            return Bridge.is(err, System.OverflowException);
        },
        f2: function () {
            System.UInt16.parse("");
        },
        f3: function () {
            System.UInt16.parse(null);
        },
        f4: function () {
            System.UInt16.parse("notanumber");
        },
        f5: function () {
            System.UInt16.parse("65536");
        },
        f6: function () {
            System.UInt16.parse("-1");
        },
        f7: function () {
            System.UInt16.parse("2.5");
        }
    });
    
    Bridge.define('Bridge.ClientTest.SimpleTypes.UInt32Tests', {
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.true(Bridge.is(0, System.UInt32));
            Bridge.Test.Assert.false(Bridge.is(0.5, System.UInt32));
            Bridge.Test.Assert.false(Bridge.is(-1, System.UInt32));
            Bridge.Test.Assert.false(Bridge.is(System.Int64([0,1]), System.UInt32));
            Bridge.Test.Assert.areEqual("System.UInt32", Bridge.getTypeName(System.UInt32));
            var i = 0;
            Bridge.Test.Assert.true(Bridge.is(i, System.UInt32));
            Bridge.Test.Assert.true(Bridge.is(i, System.IComparable$1(System.UInt32)));
            Bridge.Test.Assert.true(Bridge.is(i, System.IEquatable$1(System.UInt32)));
            Bridge.Test.Assert.true(Bridge.is(i, System.IFormattable));
        },
        castsWork: function () {
            var i1 = System.Int64(-1), i2 = System.Int64(0), i3 = System.Int64(234), i4 = System.Int64(4294967295), i5 = System.Int64([0,1]);
            var ni1 = System.Int64.lift(-1), ni2 = System.Int64(0), ni3 = System.Int64(234), ni4 = System.Int64(4294967295), ni5 = System.Int64([0,1]), ni6 = System.Int64.lift(null);
    
            Bridge.Test.Assert.areStrictEqual$1(4294967295, System.Int64.clipu32(i1), "-1 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(0, System.Int64.clipu32(i2), "0 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(234, System.Int64.clipu32(i3), "234 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(4294967295, System.Int64.clipu32(i4), "4294967295 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(0, System.Int64.clipu32(i5), "4294967296 unchecked");
    
            Bridge.Test.Assert.areStrictEqual$1(4294967295, System.Int64.clipu32(ni1), "nullable -1 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(0, System.Int64.clipu32(ni2), "nullable 0 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(234, System.Int64.clipu32(ni3), "nullable 234 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(4294967295, System.Int64.clipu32(ni4), "nullable 4294967295 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(0, System.Int64.clipu32(ni5), "nullable 4294967296 unchecked");
            Bridge.Test.Assert.areStrictEqual$1(null, System.Int64.clipu32(ni6), "null unchecked");
    
            Bridge.Test.Assert.throws$1(function () {
                var b = System.Int64.check(i1, System.UInt32);
            }, $_.Bridge.ClientTest.SimpleTypes.UInt32Tests.f1);
            Bridge.Test.Assert.areStrictEqual$1(0, System.Int64.check(i2, System.UInt32), "0 checked");
            Bridge.Test.Assert.areStrictEqual$1(234, System.Int64.check(i3, System.UInt32), "234 checked");
            Bridge.Test.Assert.areStrictEqual$1(4294967295, System.Int64.check(i4, System.UInt32), "4294967295 checked");
            Bridge.Test.Assert.throws$1(function () {
                var b = System.Int64.check(i5, System.UInt32);
            }, $_.Bridge.ClientTest.SimpleTypes.UInt32Tests.f1);
    
            Bridge.Test.Assert.throws$1(function () {
                var b = System.Int64.check(ni1, System.UInt32);
            }, $_.Bridge.ClientTest.SimpleTypes.UInt32Tests.f1);
            Bridge.Test.Assert.areStrictEqual$1(0, System.Int64.check(ni2, System.UInt32), "nullable 0 checked");
            Bridge.Test.Assert.areStrictEqual$1(234, System.Int64.check(ni3, System.UInt32), "nullable 234 checked");
            Bridge.Test.Assert.areStrictEqual$1(4294967295, System.Int64.check(ni4, System.UInt32), "nullable 4294967295 checked");
            Bridge.Test.Assert.throws$1(function () {
                var b = System.Int64.check(ni5, System.UInt32);
            }, $_.Bridge.ClientTest.SimpleTypes.UInt32Tests.f1);
            Bridge.Test.Assert.areStrictEqual$1(null, System.Int64.check(ni6, System.UInt32), "null checked");
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueIs0: function () {
            Bridge.Test.Assert.areStrictEqual(0, this.getDefaultValue(System.UInt32));
        },
        defaultConstructorReturnsZero: function () {
            Bridge.Test.Assert.areStrictEqual(0, Number());
        },
        creatingInstanceReturnsZero: function () {
            Bridge.Test.Assert.areStrictEqual(0, Bridge.createInstance(System.UInt32));
        },
        constantsWork: function () {
            Bridge.Test.Assert.areEqual(0, 0);
            Bridge.Test.Assert.areEqual(4294967295, 4294967295);
        },
        formatWorks: function () {
            Bridge.Test.Assert.areEqual("123", System.UInt32.format((291), "x"));
        },
        iFormattableToStringWorks: function () {
            Bridge.Test.Assert.areEqual("123", System.UInt32.format((291), "x"));
        },
        tryParseWorks: function () {
            var numberResult = { };
            var result = System.UInt32.tryParse("23445", numberResult);
            Bridge.Test.Assert.true(result);
            Bridge.Test.Assert.areEqual(23445, numberResult.v);
    
            result = System.UInt32.tryParse("", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);
    
            result = System.UInt32.tryParse(null, numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);
    
            result = System.UInt32.tryParse("notanumber", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);
    
            result = System.UInt32.tryParse("-1", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(-1, numberResult.v);
    
            result = System.UInt32.tryParse("2.5", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.areEqual(0, numberResult.v);
        },
        parseWorks: function () {
            Bridge.Test.Assert.areEqual(23445, System.UInt32.parse("23445"));
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.UInt32Tests.f2);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.UInt32Tests.f3);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.UInt32Tests.f4);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.UInt32Tests.f5);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.UInt32Tests.f6);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.UInt32Tests.f7);
        },
        toStringWithoutRadixWorks: function () {
            Bridge.Test.Assert.areEqual("123", (123).toString());
        },
        toStringWithRadixWorks: function () {
            Bridge.Test.Assert.areEqual("123", (123).toString(10));
            Bridge.Test.Assert.areEqual("123", (291).toString(16));
        },
        getHashCodeWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((0)), Bridge.getHashCode((0)));
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((1)), Bridge.getHashCode((1)));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode((1)), Bridge.getHashCode((0)));
        },
        equalsWorks: function () {
            Bridge.Test.Assert.true(Bridge.equals((0), 0));
            Bridge.Test.Assert.false(Bridge.equals((1), 0));
            Bridge.Test.Assert.false(Bridge.equals((0), 1));
            Bridge.Test.Assert.true(Bridge.equals((1), 1));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.Assert.true((0) === 0);
            Bridge.Test.Assert.false((1) === 0);
            Bridge.Test.Assert.false((0) === 1);
            Bridge.Test.Assert.true((1) === 1);
    
            Bridge.Test.Assert.true(Bridge.equalsT(0, 0));
            Bridge.Test.Assert.false(Bridge.equalsT(1, 0));
            Bridge.Test.Assert.false(Bridge.equalsT(0, 1));
            Bridge.Test.Assert.true(Bridge.equalsT(1, 1));
        },
        compareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare((0), 0) === 0);
            Bridge.Test.Assert.true(Bridge.compare((1), 0) > 0);
            Bridge.Test.Assert.true(Bridge.compare((0), 1) < 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare(0, 0) === 0);
            Bridge.Test.Assert.true(Bridge.compare(1, 0) > 0);
            Bridge.Test.Assert.true(Bridge.compare(0, 1) < 0);
        }
    });
    
    Bridge.ns("Bridge.ClientTest.SimpleTypes.UInt32Tests", $_);
    
    Bridge.apply($_.Bridge.ClientTest.SimpleTypes.UInt32Tests, {
        f1: function (err) {
            return Bridge.is(err, System.OverflowException);
        },
        f2: function () {
            System.UInt32.parse("");
        },
        f3: function () {
            System.UInt32.parse(null);
        },
        f4: function () {
            System.UInt32.parse("notanumber");
        },
        f5: function () {
            System.UInt32.parse("4294967296");
        },
        f6: function () {
            System.UInt32.parse("-1");
        },
        f7: function () {
            System.UInt32.parse("2.5");
        }
    });
    
    Bridge.define('Bridge.ClientTest.SimpleTypes.UInt64Tests', {
        assertULong: function (expected, actual, message, checkedType) {
            if (message === void 0) { message = ""; }
            if (checkedType === void 0) { checkedType = "System.UInt64"; }
            if (message == null) {
                message = "";
            }
    
            var typeMessage = message + "Type is " + checkedType;
            Bridge.Test.Assert.areEqual$1(checkedType, Bridge.getTypeName(Bridge.getType(actual)), typeMessage);
    
            Bridge.Test.Assert.areEqual$1(expected.toString(), actual.toString(), message);
        },
        typePropertiesAreCorrect: function () {
            Bridge.Test.Assert.true(Bridge.is(System.UInt64(0), System.UInt64));
            Bridge.Test.Assert.false(Bridge.is(0.5, System.UInt64));
            Bridge.Test.Assert.areEqual("System.UInt64", Bridge.getTypeName(System.UInt64));
            var l = System.UInt64(0);
            Bridge.Test.Assert.true(Bridge.is(l, System.UInt64));
            Bridge.Test.Assert.true(Bridge.is(l, System.IComparable$1(System.UInt64)));
            Bridge.Test.Assert.true(Bridge.is(l, System.IEquatable$1(System.UInt64)));
            Bridge.Test.Assert.true(Bridge.is(l, System.IFormattable));
        },
        minMaxValuesAreCorrect: function () {
            this.assertULong("0", System.UInt64.MinValue);
            this.assertULong("18446744073709551615", System.UInt64.MaxValue);
        },
        castsWork: function () {
            var i2 = System.Int64(0), i3 = System.Int64(234), i4 = System.Int64([-808,2147483647]);
            var ni2 = System.Int64(0), ni3 = System.Int64(234), ni4 = System.Int64([-808,2147483647]), ni6 = System.Int64.lift(null);
    
            Bridge.Test.Assert.true$1(System.UInt64(0).equals(System.Int64.clipu64(i2)), "0 unchecked");
            Bridge.Test.Assert.true$1(System.UInt64(234).equals(System.Int64.clipu64(i3)), "234 unchecked");
            Bridge.Test.Assert.true$1(System.UInt64(System.Int64([-808,2147483647])).equals(System.Int64.clipu64(i4)), "9223372036854775000 unchecked");
    
            Bridge.Test.Assert.true$1(System.Nullable.lifteq("equals", System.UInt64(0), System.Int64.clipu64(ni2)), "nullable 0 unchecked");
            Bridge.Test.Assert.true$1(System.Nullable.lifteq("equals", System.UInt64(234), System.Int64.clipu64(ni3)), "nullable 234 unchecked");
            Bridge.Test.Assert.true$1(System.Nullable.lifteq("equals", System.UInt64(System.Int64([-808,2147483647])), System.Int64.clipu64(ni4)), "nullable 9223372036854775000 unchecked");
            Bridge.Test.Assert.true$1(System.Nullable.lifteq("equals", System.UInt64.lift(null), System.Int64.clipu64(ni6)), "null unchecked");
    
            Bridge.Test.Assert.true$1(System.UInt64(0).equals(System.Int64.check(i2, System.UInt64)), "0 checked");
            Bridge.Test.Assert.true$1(System.UInt64(234).equals(System.Int64.check(i3, System.UInt64)), "234 checked");
            Bridge.Test.Assert.true$1(System.UInt64(System.Int64([-808,2147483647])).equals(System.Int64.check(i4, System.UInt64)), "9223372036854775000 checked");
    
            Bridge.Test.Assert.true$1(System.Nullable.lifteq("equals", System.UInt64(0), System.Int64.check(ni2, System.UInt64)), "nullable 0 checked");
            Bridge.Test.Assert.true$1(System.Nullable.lifteq("equals", System.UInt64(234), System.Int64.check(ni3, System.UInt64)), "nullable 234 checked");
            Bridge.Test.Assert.true$1(System.Nullable.lifteq("equals", System.UInt64(System.Int64([-808,2147483647])), System.Int64.check(ni4, System.UInt64)), "nullable 9223372036854775000 checked");
            Bridge.Test.Assert.true$1(System.Nullable.lifteq("equals", System.UInt64.lift(null), System.Int64.check(ni6, System.UInt64)), "null checked");
        },
        overflowWorks: function () {
            var min = System.UInt64.MinValue;
            var max = System.UInt64.MaxValue;
    
            Bridge.Test.Assert.true$1((max.add(System.UInt64(1))).equals(min), "max + 1 unchecked");
            Bridge.Test.Assert.true$1((min.sub(System.UInt64(1))).equals(max), "min - 1 unchecked");
    
            Bridge.Test.Assert.throws$2(function () {
                var l = max.add(System.UInt64(1), 1);
            }, $_.Bridge.ClientTest.SimpleTypes.UInt64Tests.f1, "max + 1 should be OverflowException");
            Bridge.Test.Assert.throws$2(function () {
                var l = min.sub(System.UInt64(1), 1);
            }, $_.Bridge.ClientTest.SimpleTypes.UInt64Tests.f1, "min - 1 should be OverflowException");
            Bridge.Test.Assert.throws$2(function () {
                var l = max.mul(max, 1);
            }, $_.Bridge.ClientTest.SimpleTypes.UInt64Tests.f1, "max * max should be OverflowException");
        },
        combinedTypesOperationsWork: function () {
            var ub = 1;
            var sb = 2;
            var us = 3;
            var ss = 4;
            var ui = 5;
            var si = 6;
            var sl = System.Int64(7);
    
            var l1 = System.UInt64(256);
            var l2 = System.UInt64(128);
            var l3 = System.UInt64(65536);
            var l4 = System.UInt64(32768);
            var l5 = System.UInt64([0,1]);
            var l6 = System.UInt64(2147483648);
            var l7 = System.UInt64(1);
    
            this.assertULong("257", System.UInt64(ub).add(l1));
            this.assertULong("130", Bridge.Int.clipu64(sb).add(l2));
            this.assertULong("65539", System.UInt64(us).add(l3));
            this.assertULong("32772", Bridge.Int.clipu64(ss).add(l4));
            this.assertULong("4294967301", System.UInt64(ui).add(l5));
            this.assertULong("2147483654", Bridge.Int.clipu64(si).add(l6));
            this.assertULong("8", System.Int64.clipu64(sl).add(l7));
    
            var dcml = System.Decimal(11.0);
            var dbl = 12.0;
            var flt = 13;
    
            var l = System.Int64(100);
    
            this.assertULong("111", dcml.add(System.Decimal(l)), null, "System.Decimal");
            this.assertULong("112", dbl + System.Int64.toNumber(l), null, "System.Int32");
            this.assertULong("113", flt + System.Int64.toNumber(l), null, "System.Int32");
        },
        getDefaultValue: function (T) {
            return Bridge.getDefaultValue(T);
        },
        defaultValueIs0: function () {
            Bridge.Test.Assert.true(System.UInt64(0).equals(this.getDefaultValue(System.UInt64)));
        },
        defaultConstructorReturnsZero: function () {
            Bridge.Test.Assert.true(System.UInt64(0).equals(new System.UInt64()));
        },
        creatingInstanceReturnsZero: function () {
            Bridge.Test.Assert.true(System.UInt64(0).equals(Bridge.createInstance(System.UInt64)));
        },
        constantsWork: function () {
            Bridge.Test.Assert.true(true);
        },
        formatWorks: function () {
            Bridge.Test.Assert.areEqual("123", (System.UInt64(291)).format("x"));
        },
        iFormattableToStringWorks: function () {
            Bridge.Test.Assert.areEqual("123", (System.UInt64(291)).toString("x"));
        },
        castingOfLargeValuesToUInt64Works: function () {
            var d1 = 5000000000.5, d2 = -d1;
            Bridge.Test.Assert.true$1(System.UInt64(System.Int64([705032704,1])).equals(Bridge.Int.clipu64(d1)), "Positive");
            Bridge.Test.Assert.false$1(Bridge.Int.clipu64(d2).gt(System.UInt64(2147483647)), "Negative");
        },
        divisionOfLargeUInt64Works: function () {
            var v1 = System.UInt64(System.Int64([-1539607552,11])), v2 = System.UInt64(3);
            Bridge.Test.Assert.true(System.UInt64(System.Int64([-513202518,3])).equals((v1.div(v2))));
        },
        tryParseWorks: function () {
            var numberResult = { };
            var result = System.UInt64.tryParse("23445", numberResult);
            Bridge.Test.Assert.true(result);
            Bridge.Test.Assert.true(System.UInt64(23445).equals(numberResult.v));
    
            result = System.UInt64.tryParse("", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.true(System.UInt64(0).equals(numberResult.v));
    
            result = System.UInt64.tryParse(null, numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.true(System.UInt64(0).equals(numberResult.v));
    
            result = System.UInt64.tryParse("notanumber", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.true(System.UInt64(0).equals(numberResult.v));
    
            result = System.UInt64.tryParse("-1", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.true(System.UInt64(0).equals(numberResult.v));
    
            result = System.UInt64.tryParse("2.5", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.true(System.UInt64(0).equals(numberResult.v));
    
            result = System.UInt64.tryParse("100000000000000000000", numberResult);
            Bridge.Test.Assert.false(result);
            Bridge.Test.Assert.true(numberResult.v.equals(System.UInt64(0)));
        },
        parseWorks: function () {
            Bridge.Test.Assert.true(System.UInt64(23445).equals(System.UInt64.parse("23445")));
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.UInt64Tests.f2);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.UInt64Tests.f3);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.UInt64Tests.f4);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.UInt64Tests.f5);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.UInt64Tests.f6);
            Bridge.Test.Assert.throws($_.Bridge.ClientTest.SimpleTypes.UInt64Tests.f7);
        },
        toStringWithoutRadixWorks: function () {
            Bridge.Test.Assert.areEqual("123", (System.UInt64(123)).toString());
        },
        toStringWithRadixWorks: function () {
            Bridge.Test.Assert.areEqual("123", (System.UInt64(123)).toString(10));
            Bridge.Test.Assert.areEqual("123", (System.UInt64(291)).toString(16));
        },
        getHashCodeWorks: function () {
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((System.UInt64(0))), Bridge.getHashCode((System.UInt64(0))));
            Bridge.Test.Assert.areEqual(Bridge.getHashCode((System.UInt64(1))), Bridge.getHashCode((System.UInt64(1))));
            Bridge.Test.Assert.areNotEqual(Bridge.getHashCode((System.UInt64(1))), Bridge.getHashCode((System.UInt64(0))));
        },
        equalsWorks: function () {
            Bridge.Test.Assert.true(Bridge.equals((System.UInt64(0)), System.UInt64(0)));
            Bridge.Test.Assert.false(Bridge.equals((System.UInt64(1)), System.UInt64(0)));
            Bridge.Test.Assert.false(Bridge.equals((System.UInt64(0)), System.UInt64(1)));
            Bridge.Test.Assert.true(Bridge.equals((System.UInt64(1)), System.UInt64(1)));
        },
        iEquatableEqualsWorks: function () {
            Bridge.Test.Assert.true((System.UInt64(0)).equalsT(System.UInt64(0)));
            Bridge.Test.Assert.false((System.UInt64(1)).equalsT(System.UInt64(0)));
            Bridge.Test.Assert.false((System.UInt64(0)).equalsT(System.UInt64(1)));
            Bridge.Test.Assert.true((System.UInt64(1)).equalsT(System.UInt64(1)));
    
            Bridge.Test.Assert.true(Bridge.equalsT(System.UInt64(0), System.UInt64(0)));
            Bridge.Test.Assert.false(Bridge.equalsT(System.UInt64(1), System.UInt64(0)));
            Bridge.Test.Assert.false(Bridge.equalsT(System.UInt64(0), System.UInt64(1)));
            Bridge.Test.Assert.true(Bridge.equalsT(System.UInt64(1), System.UInt64(1)));
        },
        compareToWorks: function () {
            Bridge.Test.Assert.true((System.UInt64(0)).compareTo(System.UInt64(0)) === 0);
            Bridge.Test.Assert.true((System.UInt64(1)).compareTo(System.UInt64(0)) > 0);
            Bridge.Test.Assert.true((System.UInt64(0)).compareTo(System.UInt64(1)) < 0);
        },
        iComparableCompareToWorks: function () {
            Bridge.Test.Assert.true(Bridge.compare(System.UInt64(0), System.UInt64(0)) === 0);
            Bridge.Test.Assert.true(Bridge.compare(System.UInt64(1), System.UInt64(0)) > 0);
            Bridge.Test.Assert.true(Bridge.compare(System.UInt64(0), System.UInt64(1)) < 0);
        }
    });
    
    Bridge.ns("Bridge.ClientTest.SimpleTypes.UInt64Tests", $_);
    
    Bridge.apply($_.Bridge.ClientTest.SimpleTypes.UInt64Tests, {
        f1: function (err) {
            return Bridge.is(err, System.OverflowException);
        },
        f2: function () {
            System.UInt64.parse("");
        },
        f3: function () {
            System.UInt64.parse(null);
        },
        f4: function () {
            System.UInt64.parse("notanumber");
        },
        f5: function () {
            System.UInt64.parse("-1");
        },
        f6: function () {
            System.UInt64.parse("2.5");
        },
        f7: function () {
            System.UInt64.parse("100000000000000000000");
        }
    });
    
    Bridge.define('Bridge.ClientTest.Text.RegularExpressions.JavaScript.BridgeRegexTests', {
        statics: {
            escapeWorks: function () {
                var escaped = Bridge.regexpEscape("[-/\\^$*+?.()|[]{}]");
                Bridge.Test.Assert.areEqual("\\[\\-\\/\\\\\\^\\$\\*\\+\\?\\.\\(\\)\\|\\[\\]\\{\\}\\]", escaped);
            }
        },
        typePropertiesAreCorrect: function () {
            var re = new RegExp("");
            Bridge.Test.Assert.areEqual("RegExp", Bridge.getTypeName(RegExp));
            Bridge.Test.Assert.true(true);
        },
        stringOnlyConstructorWorks: function () {
            var re = new RegExp("test123");
            Bridge.Test.Assert.areEqual("test123", re.source);
            Bridge.Test.Assert.false(re.global);
        },
        constructorWithFlagsWorks: function () {
            var re = new RegExp("test123", "g");
            Bridge.Test.Assert.areEqual("test123", re.source);
            Bridge.Test.Assert.true(re.global);
        },
        globalFlagWorks: function () {
            Bridge.Test.Assert.false(new RegExp("x", "").global);
            Bridge.Test.Assert.true(new RegExp("x", "g").global);
        },
        ignoreCaseFlagWorks: function () {
            Bridge.Test.Assert.false(new RegExp("x", "").ignoreCase);
            Bridge.Test.Assert.true(new RegExp("x", "i").ignoreCase);
        },
        multilineFlagWorks: function () {
            Bridge.Test.Assert.false(new RegExp("x", "").multiline);
            Bridge.Test.Assert.true(new RegExp("x", "m").multiline);
        },
        patternPropertyWorks: function () {
            Bridge.Test.Assert.areEqual("test123", new RegExp("test123", "").source);
        },
        sourcePropertyWorks: function () {
            Bridge.Test.Assert.areEqual("test123", new RegExp("test123", "").source);
        },
        execWorks: function () {
            var re = new RegExp("a|b", "g");
            var m = re.exec("xaybz");
            //Assert.AreEqual(m.Index, 1);
            Bridge.Test.Assert.areEqual(1, m.length);
            Bridge.Test.Assert.areEqual("a", m[0]);
        },
        lastIndexWorks: function () {
            var re = new RegExp("a|b", "g");
            re.exec("xaybz");
            Bridge.Test.Assert.areEqual(2, re.lastIndex);
        },
        testWorks: function () {
            Bridge.Test.Assert.true(new RegExp("a|b").test("xaybz"));
            Bridge.Test.Assert.false(new RegExp("c").test("xaybz"));
        }
    });
    
    Bridge.define('Bridge.ClientTest.Text.RegularExpressions.RegexTestBase', {
        validateMatchNotFound: function (match) {
            this.validateMatch(match, 0, 0, "", 1, false);
        },
        validateMatch: function (match, index, length, value, groupCount, success) {
            if (success === void 0) { success = true; }
            var matchCapCount = success ? 1 : 0;
            this.validateGroupImpl(match, index, length, success, value, matchCapCount, "ValidateMatch: Match");
    
            Bridge.Test.Assert.notNull$1(match.getGroups(), "ValidateMatch: Match.Groups is not NULL");
            Bridge.Test.Assert.areEqual(groupCount, match.getGroups().getCount());
            if (groupCount > 0) {
                this.validateGroupImpl(match.getGroups().get(0), index, length, success, value, matchCapCount, "ValidateMatch: Match.Group0");
            }
    
            Bridge.Test.Assert.notNull$1(match.getCaptures(), "ValidateMatch: Match.Captures is not NULL");
            Bridge.Test.Assert.areEqual$1(matchCapCount, match.getCaptures().getCount(), "ValidateMatch: Match.Captures.Count");
            if (success) {
                this.validateCaptureImpl(match.getCaptures().get(0), index, length, value, "ValidateMatch: Match.Capture0");
            }
        },
        validateGroup: function (match, groupIndex, index, length, success, value, captureCount) {
            var group = match.getGroups().get(groupIndex);
            this.validateGroupImpl(group, index, length, success, value, captureCount, "ValidateGroup: Group" + groupIndex);
        },
        validateGroupImpl: function (group, index, length, success, value, captureCount, descr) {
            this.validateCaptureImpl(group, index, length, value, descr);
            Bridge.Test.Assert.areEqual$1(success, group.getSuccess(), descr + ".Success");
    
            Bridge.Test.Assert.notNull$1(group.getCaptures(), descr + ".Captures is not NULL");
            Bridge.Test.Assert.areEqual$1(captureCount, group.getCaptures().getCount(), descr + ".Captures.Count");
        },
        validateCapture: function (match, groupIndex, captureIndex, index, length, value) {
            Bridge.Test.Assert.notNull$1(match, "ValidateCapture: Match is not NULL");
            Bridge.Test.Assert.notNull$1(match.getGroups(), "ValidateCapture: Match.Groups is not NULL");
            var group = match.getGroups().get(groupIndex);
    
            Bridge.Test.Assert.notNull$1(group, "ValidateCapture: Group" + groupIndex + " is not NULL");
            Bridge.Test.Assert.notNull$1(group.getCaptures(), "ValidateCapture: Group" + groupIndex + ".Captures is not NULL");
            var capture = group.getCaptures().get(captureIndex);
    
            this.validateCaptureImpl(capture, index, length, value, "ValidateCapture: Group" + groupIndex + ".Capture" + captureIndex);
        },
        validateCaptureImpl: function (capture, index, length, value, descr) {
            Bridge.Test.Assert.notNull$1(capture, descr + " is not NULL");
    
            Bridge.Test.Assert.areEqual$1(index, capture.getIndex(), descr + ".Index");
            Bridge.Test.Assert.areEqual$1(length, capture.getLength(), descr + ".Length");
            Bridge.Test.Assert.areEqual$1(value, capture.getValue(), descr + ".Value");
            Bridge.Test.Assert.areEqual$1(value, capture.toString(), descr + ".ToString()");
        },
        capturesAreEqual: function (expected, actual, descr) {
            if (expected == null) {
                Bridge.Test.Assert.null$1(actual, descr + " is NULL");
            }
            else  {
                Bridge.Test.Assert.notNull$1(actual, descr + " is not NULL");
    
                Bridge.Test.Assert.areEqual$1(expected.getIndex(), actual.getIndex(), descr + ".Index");
                Bridge.Test.Assert.areEqual$1(expected.getLength(), actual.getLength(), descr + ".Length");
                Bridge.Test.Assert.areEqual$1(expected.getValue(), actual.getValue(), descr + ".Value");
                Bridge.Test.Assert.areEqual$1(expected.toString(), actual.toString(), descr + ".ToString()");
            }
        },
        groupsAreEqual: function (expected, actual, descr) {
            if (expected == null) {
                Bridge.Test.Assert.null$1(actual, descr + " is NULL");
            }
            else  {
                Bridge.Test.Assert.notNull$1(actual, descr + " is not NULL");
    
                this.capturesAreEqual(expected, actual, descr);
                Bridge.Test.Assert.areEqual$1(expected.getSuccess(), actual.getSuccess(), descr + ".Success");
    
                if (expected.getCaptures() == null) {
                    Bridge.Test.Assert.null$1(actual.getCaptures(), descr + ".Captures is NULL");
                }
                else  {
                    Bridge.Test.Assert.notNull$1(actual.getCaptures(), descr + ".Captures is not NULL");
                    Bridge.Test.Assert.areEqual$1(expected.getCaptures().getCount(), actual.getCaptures().getCount(), descr + ".Captures.Count");
                    for (var i = 0; i < expected.getCaptures().getCount(); i = (i + 1) | 0) {
                        this.capturesAreEqual(expected.getCaptures().get(i), actual.getCaptures().get(i), descr + ".Captures[" + i + "]");
                    }
                }
            }
        },
        matchesAreEqual: function (expected, actual, descr) {
            if (expected == null) {
                Bridge.Test.Assert.null$1(actual, descr + " is NULL");
            }
            else  {
                Bridge.Test.Assert.notNull$1(actual, descr + " is not NULL");
                this.groupsAreEqual(expected, actual, descr);
    
                if (expected.getGroups() == null) {
                    Bridge.Test.Assert.null$1(actual.getGroups(), descr + ".Groups is NULL");
                }
                else  {
                    Bridge.Test.Assert.notNull$1(actual.getGroups(), descr + ".Groups is not NULL");
                    Bridge.Test.Assert.areEqual$1(expected.getGroups().getCount(), actual.getGroups().getCount(), descr + ".Groups.Count");
                    for (var i = 0; i < expected.getGroups().getCount(); i = (i + 1) | 0) {
                        this.capturesAreEqual(expected.getGroups().get(i), actual.getGroups().get(i), descr + ".Groups[" + i + "]");
                    }
                }
            }
        },
        validateCollection: function (T, expected, actual, msg) {
            if (expected == null) {
                Bridge.Test.Assert.null$1(actual, msg + " is NULL");
            }
            else  {
                Bridge.Test.Assert.notNull$1(actual, msg + " is not NULL");
                Bridge.Test.Assert.areEqual$1(expected.length, actual.length, msg + ".Length");
    
                var minLength = Math.min(expected.length, actual.length);
                for (var i = 0; i < minLength; i = (i + 1) | 0) {
                    Bridge.Test.Assert.areEqual$1(expected[i], actual[i], msg + "[" + i + "]");
                }
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.Text.RegularExpressions.Msdn.RegexIsMatchTests', {
        _isMatchTestData: null,
        _isMatchWithOffsetTestData: null,
        config: {
            init: function () {
                this._isMatchTestData = Bridge.merge(new System.Collections.Generic.List$1(Object)(), [
        [{ item1: "1298-673-4192", item2: true }],
        [{ item1: "1298-673-4192", item2: true }],
        [{ item1: "A08Z-931-468A", item2: true }],
        [{ item1: "_A90-123-129X", item2: false }],
        [{ item1: "12345-KKA-1230", item2: false }],
        [{ item1: "0919-2893-1256", item2: false }]
    ] );
                this._isMatchWithOffsetTestData = Bridge.merge(new System.Collections.Generic.List$1(Object)(), [
        [{ item1: "ID: 1234-567-8901", item2: true }],
        [{ item1: "Identifier: A170-222-777z", item2: true }],
        [{ item1: "1234-567-8901 IDENTITY: 9287-5555-1233", item2: false }]
    ] );
            }
        },
        isMatchTest: function () {
            var rgx = new System.Text.RegularExpressions.Regex("constructor", "^[a-zA-Z0-9]\\d{2}[a-zA-Z0-9](-\\d{3}){2}[A-Za-z0-9]$");
            for (var i = 0; i < this._isMatchTestData.getCount(); i = (i + 1) | 0) {
                var testValue = this._isMatchTestData.getItem(i).item1;
                var exptected = this._isMatchTestData.getItem(i).item2;
    
                var actual = rgx.isMatch(testValue);
                Bridge.Test.Assert.areEqual(exptected, actual);
            }
        },
        isMatchWithOffsetTest: function () {
            var rgx = new System.Text.RegularExpressions.Regex("constructor", "[a-zA-Z0-9]\\d{2}[a-zA-Z0-9](-\\d{3}){2}[A-Za-z0-9]");
            for (var i = 0; i < this._isMatchWithOffsetTestData.getCount(); i = (i + 1) | 0) {
                var testValue = this._isMatchWithOffsetTestData.getItem(i).item1;
                var exptected = this._isMatchWithOffsetTestData.getItem(i).item2;
    
                var startAt = System.String.indexOf(testValue, String.fromCharCode(58));
                var actual = rgx.isMatch$1(testValue, startAt);
                Bridge.Test.Assert.areEqual(exptected, actual);
            }
        },
        isMatchStaticTest: function () {
            var pattern = "^[a-zA-Z0-9]\\d{2}[a-zA-Z0-9](-\\d{3}){2}[A-Za-z0-9]$";
            for (var i = 0; i < this._isMatchTestData.getCount(); i = (i + 1) | 0) {
                var testValue = this._isMatchTestData.getItem(i).item1;
                var exptected = this._isMatchTestData.getItem(i).item2;
    
                var actual = System.Text.RegularExpressions.Regex.isMatch(testValue, pattern);
                Bridge.Test.Assert.areEqual(exptected, actual);
            }
        },
        isMatchStaticWithOptionsTest: function () {
            var pattern = "^[a-zA-Z0-9]\\d{2}[a-zA-Z0-9](-\\d{3}){2}[A-Za-z0-9]$";
            for (var i = 0; i < this._isMatchTestData.getCount(); i = (i + 1) | 0) {
                var testValue = this._isMatchTestData.getItem(i).item1;
                var exptected = this._isMatchTestData.getItem(i).item2;
    
                var actual = System.Text.RegularExpressions.Regex.isMatch$1(testValue, pattern, 0);
                Bridge.Test.Assert.areEqual(exptected, actual);
            }
        },
        isMatchStaticWithOptionsAndTimeoutTest: function () {
            var pattern = "^[a-zA-Z0-9]\\d{2}[a-zA-Z0-9](-\\d{3}){2}[A-Za-z0-9]$";
            for (var i = 0; i < this._isMatchTestData.getCount(); i = (i + 1) | 0) {
                var testValue = this._isMatchTestData.getItem(i).item1;
                var exptected = this._isMatchTestData.getItem(i).item2;
    
                var actual = System.Text.RegularExpressions.Regex.isMatch$2(testValue, pattern, 0, System.TimeSpan.fromDays(1));
                Bridge.Test.Assert.areEqual(exptected, actual);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.Text.RegularExpressions.Msdn.RegexReplaceTests', {
        statics: {
            capText: function (m) {
                // Get the matched string.
                var x = m.toString();
                // If the first char is lower case...
                if (Bridge.isLower(x.charCodeAt(0))) {
                    // Capitalize it.
                    return String.fromCharCode(String.fromCharCode(x.charCodeAt(0)).toUpperCase().charCodeAt(0)) + x.substr(1, ((x.length - 1) | 0));
                }
                return x;
            },
            reverseLetter: function (match) {
                return System.Text.RegularExpressions.Regex.replace$1(match.getValue(), "([ie])([ie])", "$2$1", 1);
            },
            wordScrambler: function (match) {
                // Adjusted logic here. Will just reverse the value string.
    
                var value = match.getValue();
                var letters = System.Array.init(value.length, function (){
                    return new System.Char();
                });
                for (var i = 0; i < value.length; i = (i + 1) | 0) {
                    letters[i] = value.charCodeAt(((((value.length - i) | 0) - 1) | 0));
                }
    
                return String.fromCharCode.apply(null, letters);
            }
        },
        replaceTest1: function () {
            var expected = "This is text with far too much whitespace.";
    
            var input = "This is   text with   far  too   much   whitespace.";
            var pattern = "\\s+";
            var replacement = " ";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var result = rgx.replace(input, replacement);
    
            Bridge.Test.Assert.areEqual(expected, result);
        },
        replaceAtPositionTest: function () {
            var expected = "abcdefghijkklmm";
    
            var str = "aabccdeefgghiijkklmm";
            var pattern = "(\\w)\\1";
            var replacement = "$1";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
    
            var result = rgx.replace$1(str, replacement, 5);
            Bridge.Test.Assert.areEqual(expected, result);
        },
        replaceAtPositionAndLengthTest: function () {
            var expected = "Instantiating a New Type\n\nGenerally, there are two ways that an\n\ninstance of a class or structure can\n\nbe instantiated. ";
    
            var input = "Instantiating a New Type\nGenerally, there are two ways that an\ninstance of a class or structure can\nbe instantiated. ";
            var pattern = "^.*$";
            var replacement = "\n$&";
            var rgx = new System.Text.RegularExpressions.Regex("constructor$1", pattern, 2);
    
            var match = rgx.match(input);
    
            var result = rgx.replace$2(input, replacement, -1, ((((match.getIndex() + match.getLength()) | 0) + 1) | 0));
            Bridge.Test.Assert.areEqual(expected, result);
        },
        replaceWithEvaluatorTest: function () {
            var expected = "Four Score And Seven Years Ago";
            var text = "four score and seven years ago";
            var rx = new System.Text.RegularExpressions.Regex("constructor", "\\w+");
            var result = rx.replace$3(text, Bridge.ClientTest.Text.RegularExpressions.Msdn.RegexReplaceTests.capText);
            Bridge.Test.Assert.areEqual(expected, result);
        },
        replaceWithEvaluatorAndCountTest: function () {
            var expected = "decieve releive acheive belief fierce receive";
            var input = "deceive relieve achieve belief fierce receive";
            var pattern = "\\w*(ie|ei)\\w*";
            var rgx = new System.Text.RegularExpressions.Regex("constructor$1", pattern, 1);
    
            var result = rgx.replace$4(input, Bridge.ClientTest.Text.RegularExpressions.Msdn.RegexReplaceTests.reverseLetter, ((Bridge.Int.div(input.split(String.fromCharCode(32)).length, 2)) | 0));
            Bridge.Test.Assert.areEqual(expected, result);
        },
        replaceWithEvaluatorAndCountAtPostitionTest: function () {
            var expected = "deceive releive acheive belief fierce receive";
            var input = "deceive relieve achieve belief fierce receive";
            var pattern = "\\w*(ie|ei)\\w*";
            var rgx = new System.Text.RegularExpressions.Regex("constructor$1", pattern, 1);
    
            var result = rgx.replace$5(input, Bridge.ClientTest.Text.RegularExpressions.Msdn.RegexReplaceTests.reverseLetter, ((((Bridge.Int.div(input.split(String.fromCharCode(32)).length, 2)) | 0) - 1) | 0), 7);
            Bridge.Test.Assert.areEqual(expected, result);
        },
        replaceStaticTest1: function () {
            var expected = "This is text with far too much whitespace.";
    
            var input = "This is   text with   far  too   much   whitespace.";
            var pattern = "\\s+";
            var replacement = " ";
            var result = System.Text.RegularExpressions.Regex.replace(input, pattern, replacement);
    
            Bridge.Test.Assert.areEqual(expected, result);
        },
        replaceStaticTest2: function () {
            var pattern = "\\\\\\\\MyMachine(?:\\.\\w+)*\\\\([cde])\\$";
            var replacement = "$1:";
            var uncPaths = ["\\\\MyMachine.domain1.mycompany.com\\c$\\ThingsToDo.txt", "\\\\MyMachine\\c$\\ThingsToDo.txt", "\\\\MyMachine\\d$\\documents\\mydocument.docx"];
            var expected = ["c:\\ThingsToDo.txt", "c:\\ThingsToDo.txt", "d:\\documents\\mydocument.docx"];
    
            for (var i = 0; i < uncPaths.length; i = (i + 1) | 0) {
                var uncPath = uncPaths[i];
                var result = System.Text.RegularExpressions.Regex.replace(uncPath, pattern, replacement);
                Bridge.Test.Assert.areEqual$1(expected[i], result, "Result at #" + i);
            }
        },
        replaceStaticWithOptionsTest: function () {
            var pattern = "\\\\\\\\MyMachine(?:\\.\\w+)*\\\\([cde])\\$";
            var replacement = "$1:";
            var uncPaths = ["\\\\MyMachine.domain1.mycompany.com\\C$\\ThingsToDo.txt", "\\\\MyMachine\\c$\\ThingsToDo.txt", "\\\\MyMachine\\D$\\documents\\mydocument.docx"];
            var expected = ["C:\\ThingsToDo.txt", "c:\\ThingsToDo.txt", "D:\\documents\\mydocument.docx"];
    
            for (var i = 0; i < uncPaths.length; i = (i + 1) | 0) {
                var uncPath = uncPaths[i];
                var result = System.Text.RegularExpressions.Regex.replace$1(uncPath, pattern, replacement, 1);
                Bridge.Test.Assert.areEqual$1(expected[i], result, "Result at #" + i);
            }
        },
        replaceStaticWithOptionsAndTimeoutTest: function () {
            var pattern = "\\\\\\\\MyMachine(?:\\.\\w+)*\\\\([cde])\\$";
            var replacement = "$1:";
            var uncPaths = ["\\\\MyMachine.domain1.mycompany.com\\C$\\ThingsToDo.txt", "\\\\MyMachine\\c$\\ThingsToDo.txt", "\\\\MyMachine\\D$\\documents\\mydocument.docx"];
            var expected = ["C:\\ThingsToDo.txt", "c:\\ThingsToDo.txt", "D:\\documents\\mydocument.docx"];
    
            for (var i = 0; i < uncPaths.length; i = (i + 1) | 0) {
                var uncPath = uncPaths[i];
                var result = System.Text.RegularExpressions.Regex.replace$2(uncPath, pattern, replacement, 1, System.TimeSpan.fromSeconds(1));
                Bridge.Test.Assert.areEqual$1(expected[i], result, "Result at #" + i);
            }
        },
        replaceStaticWithEvaluatorTest: function () {
            var expected = "rettel lacitebahpla gnissim kcal esaeler tnahcnep kcals cillyrca yrdnual esaec";
            var words = "letter alphabetical missing lack release penchant slack acryllic laundry cease";
    
            var pattern = "\\w+";
            var evaluator = Bridge.ClientTest.Text.RegularExpressions.Msdn.RegexReplaceTests.wordScrambler;
    
            var result = System.Text.RegularExpressions.Regex.replace$3(words, pattern, evaluator);
            Bridge.Test.Assert.areEqual(expected, result);
    
        },
        replaceStaticWithEvaluatorAndOptionsTest: function () {
            var expected1 = "LETTER lacitebahpla gnissim kcal esaeler tnahcnep kcals cillyrca yrdnual esaec";
            var expected2 = "RETTEL lacitebahpla gnissim kcal esaeler tnahcnep kcals cillyrca yrdnual esaec";
            var words = "LETTER alphabetical missing lack release penchant slack acryllic laundry cease";
    
            var pattern = "[a-z]+";
            var evaluator = Bridge.ClientTest.Text.RegularExpressions.Msdn.RegexReplaceTests.wordScrambler;
    
            var result1 = System.Text.RegularExpressions.Regex.replace$4(words, pattern, evaluator, 0);
            Bridge.Test.Assert.areEqual(expected1, result1);
    
            var result2 = System.Text.RegularExpressions.Regex.replace$4(words, pattern, evaluator, 1);
            Bridge.Test.Assert.areEqual(expected2, result2);
        },
        replaceStaticWithEvaluatorAndOptionsAndTimoutTest: function () {
            var expected = "RETTEL lacitebahpla gnissim kcal esaeler tnahcnep kcals cillyrca yrdnual esaec";
            var words = "LETTER alphabetical missing lack release penchant slack acryllic laundry cease";
    
            var pattern = "[a-z]+";
            var evaluator = Bridge.ClientTest.Text.RegularExpressions.Msdn.RegexReplaceTests.wordScrambler;
    
            var result = System.Text.RegularExpressions.Regex.replace$5(words, pattern, evaluator, 1, System.TimeSpan.fromSeconds(1));
            Bridge.Test.Assert.areEqual(expected, result);
        }
    });
    
    Bridge.define('Bridge.ClientTest.Text.RegularExpressions.Msdn.RegexSplitTests', {
        validateResult: function (expected, actual) {
            Bridge.Test.Assert.areEqual$1(expected.length, actual.length, "Length");
            for (var i = 0; i < actual.length; i = (i + 1) | 0) {
                Bridge.Test.Assert.areEqual$1(expected[i], actual[i], "Result at " + i);
            }
        },
        splitTest1: function () {
            var expected = ["plum", "", "pear"];
    
            var regex = new System.Text.RegularExpressions.Regex("constructor", "-"); // Split on hyphens.
            var substrings = regex.split("plum--pear");
    
            this.validateResult(expected, substrings);
        },
        splitTest2: function () {
            var expected = ["", "ABCDE", "FGHIJKL", "MNOPQ", ""];
    
            var pattern = "\\d+";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var input = "123ABCDE456FGHIJKL789MNOPQ012";
            var substrings = rgx.split(input);
    
            this.validateResult(expected, substrings);
        },
        splitTest3: function () {
            var expected = ["plum", "-", "pear"];
    
            var regex = new System.Text.RegularExpressions.Regex("constructor", "(-)"); // Split on hyphens.
            var substrings = regex.split("plum-pear");
    
            this.validateResult(expected, substrings);
        },
        splitTest4: function () {
            var expected = ["07", "/", "14", "/", "2007"];
    
            var input = "07/14/2007";
            var pattern = "(-)|(/)";
            var regex = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var substrings = regex.split(input);
    
            this.validateResult(expected, substrings);
        },
        splitTest5: function () {
            var expected = ["", "c", "h", "a", "r", "a", "c", "t", "e", "r", "s", ""];
    
            var input = "characters";
            var regex = new System.Text.RegularExpressions.Regex("constructor", "");
            var substrings = regex.split(input);
    
            this.validateResult(expected, substrings);
        },
        splitWithCountTest1: function () {
            var expected = ["", "ABCDE", "FGHIJKL789MNOPQ012"];
    
            var pattern = "\\d+";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var input = "123ABCDE456FGHIJKL789MNOPQ012";
            var substrings = rgx.split$1(input, 3);
    
            this.validateResult(expected, substrings);
        },
        splitWithCountTest2: function () {
            var expected = ["apple", "-", "apricot", "-", "plum", "-", "pear-banana"];
    
            var pattern = "(-)";
            var input = "apple-apricot-plum-pear-banana";
            var regex = new System.Text.RegularExpressions.Regex("constructor", pattern); // Split on hyphens.
            var substrings = regex.split$1(input, 4);
    
            this.validateResult(expected, substrings);
        },
        splitWithCountTest3: function () {
            var expected = ["07", "/", "14/2007"];
    
            var input = "07/14/2007";
            var pattern = "(-)|(/)";
            var regex = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var substrings = regex.split$1(input, 2);
    
            this.validateResult(expected, substrings);
        },
        splitWithCountTest4: function () {
            var expected = ["", "c", "h", "a", "r", "a", "c", "t", "e", "rs"];
    
            var input = "characters";
            var regex = new System.Text.RegularExpressions.Regex("constructor", "");
            var substrings = regex.split$1(input, input.length);
    
            this.validateResult(expected, substrings);
        },
        splitWithCountAndStartAtTest1: function () {
            var expected = ["", "ABCDE", "FGHIJ789KLMNO012PQRST"];
    
            var pattern = "\\d+";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var input = "123ABCDE456FGHIJ789KLMNO012PQRST";
            var m = rgx.match(input);
            if (m.getSuccess()) {
                var startAt = m.getIndex();
                var substrings = rgx.split$2(input, 3, startAt);
    
                this.validateResult(expected, substrings);
            }
        },
        splitWithCountAndStartAtTest2: function () {
            var expected = ["apple-apricot-plum", "-", "pear", "-", "pomegranate", "-", "pineapple-peach"];
    
            var pattern = "(-)";
            var input = "apple-apricot-plum-pear-pomegranate-pineapple-peach";
    
            var regex = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var substrings = regex.split$2(input, 4, 15); // Split on hyphens from 15th character on
    
            this.validateResult(expected, substrings);
        },
        splitWithCountAndStartAtTest3: function () {
            var expected = ["apple|apricot|plum", "|", "pear", "|", "pomegranate", "|", "pineapple|peach"];
    
            var pattern = "(-)|([|])"; // possible delimiters found in string
            var input = "apple|apricot|plum|pear|pomegranate|pineapple|peach";
            var regex = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var substrings = regex.split$2(input, 4, 15); // Split on delimiters from 15th character on
    
            this.validateResult(expected, substrings);
        },
        splitWithCountAndStartAtTest4: function () {
            var expected = ["ch", "a", "r", "a", "c", "t", "e", "r", "s", ""];
    
            var input = "characters";
            var regex = new System.Text.RegularExpressions.Regex("constructor", "");
            var substrings = regex.split$2(input, input.length, System.String.indexOf(input, "a"));
    
            this.validateResult(expected, substrings);
        },
        splitStaticTest1: function () {
            var expected = ["plum", "", "pear"];
    
            var substrings = System.Text.RegularExpressions.Regex.split("plum--pear", "-");
    
            this.validateResult(expected, substrings);
        },
        splitStaticTest2: function () {
            var expected = ["", "ABCDE", "FGHIJKL", "MNOPQ", ""];
    
            var pattern = "\\d+";
            var input = "123ABCDE456FGHIJKL789MNOPQ012";
            var substrings = System.Text.RegularExpressions.Regex.split(input, pattern);
    
            this.validateResult(expected, substrings);
        },
        splitStaticTest3: function () {
            var expected = ["plum", "-", "pear"];
    
            var substrings = System.Text.RegularExpressions.Regex.split("plum-pear", "(-)");
    
            this.validateResult(expected, substrings);
        },
        splitStaticTest4: function () {
            var expected = ["07", "/", "14", "/", "2007"];
    
            var input = "07/14/2007";
            var pattern = "(-)|(/)";
            var substrings = System.Text.RegularExpressions.Regex.split(input, pattern);
    
            this.validateResult(expected, substrings);
        },
        splitStaticTest5: function () {
            var expected = ["", "c", "h", "a", "r", "a", "c", "t", "e", "r", "s", ""];
    
            var input = "characters";
            var substrings = System.Text.RegularExpressions.Regex.split(input, "");
    
            this.validateResult(expected, substrings);
        },
        splitStaticWithOptionsTest: function () {
            var expected = ["", "1234", "5678", "9012", ""];
    
            var pattern = "[a-z]+";
            var input = "Abc1234Def5678Ghi9012Jklm";
            var substrings = System.Text.RegularExpressions.Regex.split$1(input, pattern, 1);
    
            this.validateResult(expected, substrings);
        },
        splitStaticWithOptionsAndTimeout: function () {
            var expected = ["", "1234", "5678", "9012", ""];
    
            var pattern = "[a-z]+";
            var input = "Abc1234Def5678Ghi9012Jklm";
            //TODO: check timeout
            var substrings = System.Text.RegularExpressions.Regex.split$2(input, pattern, 1, System.TimeSpan.fromMilliseconds(500));
    
    
            this.validateResult(expected, substrings);
        }
    });
    
    Bridge.define('Bridge.ClientTest.Text.StringBuilderTests', {
        statics: {
            stringBuilders: function () {
                // TEST constructors
                var sb = new System.Text.StringBuilder();
                var sb1 = new System.Text.StringBuilder("", 128);
                Bridge.Test.Assert.areEqual$1("", sb.toString(), "StringBuilder() .ctor");
                Bridge.Test.Assert.areEqual$1(sb1.toString(), sb.toString(), "StringBuilder(capacity) .ctor");
    
                sb = new System.Text.StringBuilder("foo");
                sb1 = new System.Text.StringBuilder("foo", 2);
                Bridge.Test.Assert.areEqual$1("foo", sb.toString(), "StringBuilder(string) .ctor");
                Bridge.Test.Assert.areEqual$1(sb1.toString(), sb.toString(), "StringBuilder(string, capacity) .ctor");
    
                sb = new System.Text.StringBuilder("foo bar", 4, 3);
                Bridge.Test.Assert.areEqual$1("bar", sb.toString(), "StringBuilder(string) .ctor");
    
                // TEST properties
    
                // Capacity
                sb = new System.Text.StringBuilder("", 128);
                Bridge.Test.Assert.areEqual$1(128, sb.getCapacity(), ".Capacity");
                sb = new System.Text.StringBuilder("foo", 2);
                Bridge.Test.Assert.areEqual$1(16, sb.getCapacity(), ".Capacity");
                sb.setCapacity(10);
                Bridge.Test.Assert.areEqual$1(10, sb.getCapacity(), ".Capacity");
    
                // Length
                Bridge.Test.Assert.areEqual$1(("foo").length, sb.getLength(), ".Length");
    
                // TEST methods
    
                // Clear
                sb.clear();
                Bridge.Test.Assert.areEqual$1(0, sb.getLength(), ".Clear()");
                Bridge.Test.Assert.areEqual$1("", sb.toString(), ".Clear()");
    
                // Append
                sb.append("foo");
                sb.append("foo bar", 3, 4);
                sb.append(true);
                sb.append(String.fromCharCode(61));
                sb.append(123);
                Bridge.Test.Assert.areEqual$1("foo bartrue=123", sb.toString(), ".Append()");
    
                // AppendLine
                sb.appendLine();
                Bridge.Test.Assert.areEqual$1("foo bartrue=123\r\n", sb.toString(), ".AppendLine()");
                sb.appendLine("foo bar");
                Bridge.Test.Assert.areEqual$1("foo bartrue=123\r\nfoo bar\r\n", sb.toString(), ".AppendLine(string)");
    
                // AppendFormat
                sb.appendFormat("({0}, {1})", "foo", false);
                Bridge.Test.Assert.areEqual$1("foo bartrue=123\r\nfoo bar\r\n(foo, false)", sb.toString(), ".AppendFormat(format, args)");
    
                // Insert
                sb.insert(0, 56.7);
                Bridge.Test.Assert.areEqual$1("56.7foo bartrue=123\r\nfoo bar\r\n(foo, false)", sb.toString(), ".Insert()");
    
                // Remove
                sb.remove(4, 7);
                Bridge.Test.Assert.areEqual$1("56.7true=123\r\nfoo bar\r\n(foo, false)", sb.toString(), ".Remove(start, length)");
    
                // Replace
                sb.replace("foo bar", "bar foo");
                Bridge.Test.Assert.areEqual$1("56.7true=123\r\nbar foo\r\n(foo, false)", sb.toString(), ".Replace(string, string)");
                sb.replace(String.fromCharCode(13), String.fromCharCode(10));
                Bridge.Test.Assert.areEqual$1("56.7true=123\n\nbar foo\n\n(foo, false)", sb.toString(), ".Replace(char, char)");
                sb.replace(String.fromCharCode(102), String.fromCharCode(70), 23, 6);
                Bridge.Test.Assert.areEqual$1("56.7true=123\n\nbar foo\n\n(Foo, false)", sb.toString(), ".Replace(char, char, start, length)");
                sb.replace("Foo", "foo", 23, 6);
                Bridge.Test.Assert.areEqual$1("56.7true=123\n\nbar foo\n\n(foo, false)", sb.toString(), ".Replace(string, string, start, length)");
            }
        },
        typePropertiesAreCorrect: function () {
            var sb = new System.Text.StringBuilder();
            Bridge.Test.Assert.areEqual("System.Text.StringBuilder", Bridge.getTypeName(System.Text.StringBuilder));
            Bridge.Test.Assert.true(true);
        },
        defaultConstructorWorks: function () {
            var sb = new System.Text.StringBuilder();
            Bridge.Test.Assert.areEqual$1("", sb.toString(), "Text");
            Bridge.Test.Assert.areEqual$1(0, sb.getLength(), "Length");
        },
        constructorWithCapacityWorks: function () {
            var sb = new System.Text.StringBuilder("", 55);
            Bridge.Test.Assert.areEqual$1("", sb.toString(), "Text");
            Bridge.Test.Assert.areEqual$1(0, sb.getLength(), "Length");
        },
        initialTextConstructorWorks: function () {
            var sb = new System.Text.StringBuilder("some text");
            Bridge.Test.Assert.areEqual$1("some text", sb.toString(), "Text");
            Bridge.Test.Assert.areEqual$1(9, sb.getLength(), "Length");
        },
        initialTextConstructorWithCapacityWorks: function () {
            var sb = new System.Text.StringBuilder("some text", 55);
            Bridge.Test.Assert.areEqual$1("some text", sb.toString(), "Text");
            Bridge.Test.Assert.areEqual$1(9, sb.getLength(), "Length");
        },
        substringConstructorWorks: function () {
            var sb = new System.Text.StringBuilder("some text", 5, 3);
            Bridge.Test.Assert.areEqual$1("tex", sb.toString(), "Text");
            Bridge.Test.Assert.areEqual$1(3, sb.getLength(), "Length");
        },
        appendBoolWorks: function () {
            var sb = new System.Text.StringBuilder("|");
            Bridge.Test.Assert.true(Bridge.referenceEquals(sb.append(true), sb));
            Bridge.Test.Assert.areEqual$1("|true", sb.toString(), "Text");
            Bridge.Test.Assert.areEqual$1(5, sb.getLength(), "Length");
        },
        appendCharWorks: function () {
            var sb = new System.Text.StringBuilder("|");
            Bridge.Test.Assert.true(Bridge.referenceEquals(sb.append(String.fromCharCode(99)), sb));
            Bridge.Test.Assert.areEqual$1("|c", sb.toString(), "Text");
            Bridge.Test.Assert.areEqual$1(2, sb.getLength(), "Length");
        },
        appendIntWorks: function () {
            var sb = new System.Text.StringBuilder("|");
            Bridge.Test.Assert.true(Bridge.referenceEquals(sb.append(123), sb));
            Bridge.Test.Assert.areEqual$1("|123", sb.toString(), "Text");
            Bridge.Test.Assert.areEqual$1(4, sb.getLength(), "Length");
        },
        appendDoubleWorks: function () {
            var sb = new System.Text.StringBuilder("|");
            Bridge.Test.Assert.true(Bridge.referenceEquals(sb.append(123.0), sb));
            Bridge.Test.Assert.areEqual$1("|123", sb.toString(), "Text");
            Bridge.Test.Assert.areEqual$1(4, sb.getLength(), "Length");
        },
        appendObjectWorks: function () {
            var sb = new System.Text.StringBuilder("|");
            Bridge.Test.Assert.true(Bridge.referenceEquals(sb.append(new Bridge.ClientTest.Text.StringBuilderTests.SomeClass()), sb));
            Bridge.Test.Assert.areEqual$1("|some text", sb.toString(), "Text");
            Bridge.Test.Assert.areEqual$1(10, sb.getLength(), "Length");
        },
        appendStringWorks: function () {
            var sb = new System.Text.StringBuilder("|");
            Bridge.Test.Assert.true(Bridge.referenceEquals(sb.append("some text"), sb));
            Bridge.Test.Assert.areEqual$1("|some text", sb.toString(), "Text");
            Bridge.Test.Assert.areEqual$1(10, sb.getLength(), "Length");
        },
        appendLineWorks: function () {
            var sb = new System.Text.StringBuilder("|");
            Bridge.Test.Assert.true(Bridge.referenceEquals(sb.appendLine(), sb));
            Bridge.Test.Assert.areEqual$1("|\r\n", sb.toString(), "Text");
            Bridge.Test.Assert.areEqual$1(3, sb.getLength(), "Length");
        },
        appendLineStringWorks: function () {
            var sb = new System.Text.StringBuilder("|");
            Bridge.Test.Assert.true(Bridge.referenceEquals(sb.appendLine("some text"), sb));
            Bridge.Test.Assert.areEqual$1("|some text\r\n", sb.toString(), "Text");
            Bridge.Test.Assert.areEqual$1(12, sb.getLength(), "Length");
        },
        clearWorks: function () {
            var sb = new System.Text.StringBuilder("some text");
            sb.clear();
            Bridge.Test.Assert.areEqual$1("", sb.toString(), "Text");
            Bridge.Test.Assert.areEqual$1(0, sb.getLength(), "Length");
        },
        toStringWorks: function () {
            // Yes, this is tested by every other test as well. Included for completeness only
            var sb = new System.Text.StringBuilder("some text");
            Bridge.Test.Assert.areEqual("some text", sb.toString());
        },
        lengthPropertyWorks: function () {
            // Yes, this is tested by every other test as well. Included for completeness only
            var sb = new System.Text.StringBuilder("some text");
            Bridge.Test.Assert.areEqual(9, sb.getLength());
        }
    });
    
    Bridge.define('Bridge.ClientTest.Text.StringBuilderTests.SomeClass', {
        toString: function () {
            return "some text";
        }
    });
    
    Bridge.define('Bridge.ClientTest.Threading.AsyncTests', {
        asyncVoid: function () {
            var done = Bridge.Test.Assert.async();
    
            var state = 0;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;
    
            var someMethod = function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1], $step);
                            switch ($step) {
                                case 0: {
                                    state = 1;
                                    $task1 = task;
                                    $step = 1;
                                    $task1.continueWith($asyncBody, true);
                                    return;
                                }
                                case 1: {
                                    $task1.getAwaitedResult();
                                    state = 2;
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);
    
                $asyncBody();
            };
    
            someMethod();
    
            Bridge.Test.Assert.areEqual$1(1, state, "Async method should start running after being invoked");
    
            task.continueWith(function (x) {
                Bridge.Test.Assert.areEqual$1(2, state, "Async method should finish after the task is finished");
                done();
            });
    
            Bridge.Test.Assert.areEqual$1(1, state, "Async method should not continue past point 1 until task is finished");
    
            tcs.setResult(0);
        },
        asyncTask: function () {
            var done = Bridge.Test.Assert.async();
    
            var state = 0;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;
    
            var someMethod = function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        state = 1;
                                        $task1 = task;
                                        $step = 1;
                                        $task1.continueWith($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        state = 2;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);
    
                $asyncBody();
                return $tcs.task;
            };
    
            var asyncTask = someMethod();
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, asyncTask.status, "asyncTask should be running immediately");
            Bridge.Test.Assert.areEqual$1(1, state, "Async method should start running after being invoked");
    
            asyncTask.continueWith(function (x) {
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, asyncTask.status, "asyncTask should run to completion");
                Bridge.Test.Assert.true$1(asyncTask.exception == null, "asyncTask should not throw an exception");
                Bridge.Test.Assert.areEqual$1(2, state, "Async method should finish after the task is finished");
    
                done();
            });
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, asyncTask.status, "asyncTask should be running before awaited task is finished");
            Bridge.Test.Assert.areEqual$1(1, state, "Async method should not continue past point 1 until task is finished");
    
            tcs.setResult(0);
        },
        asyncTaskBodyThrowsException: function () {
            var done = Bridge.Test.Assert.async();
    
            var state = 0;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;
            var ex = new System.Exception("Some text");
    
            var someMethod = function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        state = 1;
                                        $task1 = task;
                                        $step = 1;
                                        $task1.continueWith($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        state = 2;
                                        throw ex;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);
    
                $asyncBody();
                return $tcs.task;
            };
    
            var asyncTask = someMethod();
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, asyncTask.status, "asyncTask should be running immediately");
            Bridge.Test.Assert.areEqual$1(1, state, "Async method should start running after being invoked");
    
            asyncTask.continueWith(function (x) {
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, asyncTask.status, "asyncTask should fault");
                Bridge.Test.Assert.true$1(asyncTask.exception != null, "asyncTask should have an exception");
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(asyncTask.exception.innerExceptions.get(0), ex), "asyncTask should throw the correct exception");
                Bridge.Test.Assert.areEqual$1(2, state, "Async method should finish after the task is finished");
    
                done();
            });
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, asyncTask.status, "asyncTask should be running before awaited task is finished");
            Bridge.Test.Assert.areEqual$1(1, state, "Async method should not continue past point 1 until task is finished");
    
            tcs.setResult(0);
        },
        awaitTaskThatFaults: function () {
            var done = Bridge.Test.Assert.async();
    
            var state = 0;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;
            var ex = new System.Exception("Some text");
    
            var someMethod = function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        state = 1;
                                        $task1 = task;
                                        $step = 1;
                                        $task1.continueWith($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        state = 2;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);
    
                $asyncBody();
                return $tcs.task;
            };
    
            var asyncTask = someMethod();
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, asyncTask.status, "asyncTask should be running immediately");
            Bridge.Test.Assert.areEqual$1(1, state, "Async method should start running after being invoked");
    
            asyncTask.continueWith(function (x) {
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, asyncTask.status, "asyncTask should fault");
                Bridge.Test.Assert.true$1(asyncTask.exception != null, "asyncTask should have an exception");
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(asyncTask.exception.innerExceptions.get(0), ex), "asyncTask should throw the correct exception");
                Bridge.Test.Assert.areEqual$1(1, state, "Async method should not have reach anything after the faulting await");
    
                done();
            });
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, asyncTask.status, "asyncTask should be running before awaited task is finished");
            Bridge.Test.Assert.areEqual$1(1, state, "Async method should not continue past point 1 until task is finished");
    
            tcs.setException(ex);
        },
        aggregateExceptionsAreUnwrappedWhenAwaitingTask: function () {
            var done = Bridge.Test.Assert.async();
    
            var state = 0;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;
    
            var ex = new System.Exception("Some text");
            tcs.setException(ex);
    
            var someMethod = function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    ex2, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([1,2,3,4], $step);
                                switch ($step) {
    
                                    case 1: {
                                        $task1 = task;
                                        $step = 2;
                                        $task1.continueWith($asyncBody);
                                        return;
                                    }
                                    case 2: {
                                        $task1.getAwaitedResult();
                                        Bridge.Test.Assert.fail$1("Await should have thrown");
                                        $step = 4;
                                        continue;
                                    }
                                    case 3: {
                                        Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex, ex2), "The exception should be correct");
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        state = 1;
                                        $tcs.setResult(null);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 1 && $step <= 2 ){
                                ex2 = $async_e;
                                $step = 3;
                                $asyncBody();
                                return;
                            }
                            $tcs.setException($async_e);
                        }
                    }, arguments);
    
                $asyncBody();
                return $tcs.task;
            };
    
            someMethod();
    
            task.continueWith(function (x) {
                Bridge.Test.Assert.areEqual$1(1, state, "Should have reached the termination state");
    
                done();
            });
        },
        asyncTaskThatReturnsValue: function () {
            var done = Bridge.Test.Assert.async();
    
            var state = 0;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;
    
            var someMethod = function () {
                var $step = 0,
                    $task1, 
                    $jumpFromFinally, 
                    $tcs = new System.Threading.Tasks.TaskCompletionSource(), 
                    $returnValue, 
                    $async_e, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([0,1], $step);
                                switch ($step) {
                                    case 0: {
                                        state = 1;
                                        $task1 = task;
                                        $step = 1;
                                        $task1.continueWith($asyncBody);
                                        return;
                                    }
                                    case 1: {
                                        $task1.getAwaitedResult();
                                        state = 2;
                                        $tcs.setResult(42);
                                        return;
                                    }
                                    default: {
                                        $tcs.setResult(null);
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            $tcs.setException($async_e);
                        }
                    }, arguments);
    
                $asyncBody();
                return $tcs.task;
            };
    
            var asyncTask = someMethod();
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, asyncTask.status, "asyncTask should be running immediately");
            Bridge.Test.Assert.areEqual$1(1, state, "Async method should start running after being invoked");
    
            asyncTask.continueWith(function (x) {
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, asyncTask.status, "asyncTask should run to completion");
                Bridge.Test.Assert.true$1(asyncTask.exception == null, "asyncTask should not throw an exception");
                Bridge.Test.Assert.areEqual$1(2, state, "Async method should finish after the task is finished");
                Bridge.Test.Assert.areEqual$1(42, asyncTask.getResult(), "Result should be correct");
    
                done();
            });
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, asyncTask.status, "asyncTask should be running before awaited task is finished");
            Bridge.Test.Assert.areEqual$1(1, state, "Async method should not continue past point 1 until task is finished");
    
            tcs.setResult(0);
        }
    });
    
    Bridge.define('Bridge.ClientTest.Threading.CancellationTokenTests', {
        typePropertiesForCancellationTokenSourceAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.Threading.CancellationTokenSource", Bridge.getTypeName(System.Threading.CancellationTokenSource), "FullName");
            var cts = new System.Threading.CancellationTokenSource();
            Bridge.Test.Assert.true(Bridge.is(cts, System.Threading.CancellationTokenSource));
            Bridge.Test.Assert.true(Bridge.is(cts, System.IDisposable));
        },
        typePropertiesForCancellationTokenAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.Threading.CancellationToken", Bridge.getTypeName(System.Threading.CancellationToken), "FullName");
    
            Bridge.Test.Assert.true(true);
            Bridge.Test.Assert.true(true);
            Bridge.Test.Assert.true(true);
        },
        typePropertiesForCancellationTokenRegistrationAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.Threading.CancellationTokenRegistration", Bridge.getTypeName(System.Threading.CancellationTokenRegistration), "FullName");
    
            var ctr = new System.Threading.CancellationTokenRegistration();
            Bridge.Test.Assert.true$1(Bridge.is(ctr, System.Threading.CancellationTokenRegistration), "CancellationTokenRegistration");
            Bridge.Test.Assert.true$1(Bridge.is(ctr, System.IDisposable), "IDisposable");
            Bridge.Test.Assert.true$1(Bridge.is(ctr, System.IEquatable$1(System.Threading.CancellationTokenRegistration)), "IEquatable<CancellationTokenRegistration>");
        },
        cancellationTokenCreatedWithDefaultConstructorIsNotCanceledAndCannotBe: function () {
            var ct = new System.Threading.CancellationToken();
            Bridge.Test.Assert.false$1(ct.getCanBeCanceled(), "CanBeCanceled");
            Bridge.Test.Assert.false$1(ct.getIsCancellationRequested(), "IsCancellationRequested");
            ct.throwIfCancellationRequested();
        },
        cancellationTokenCreatedWithFalseArgumentToConstructorIsNotCanceledAndCannotBe: function () {
            var ct = new System.Threading.CancellationToken(false);
            Bridge.Test.Assert.false$1(ct.getCanBeCanceled(), "CanBeCanceled");
            Bridge.Test.Assert.false$1(ct.getIsCancellationRequested(), "IsCancellationRequested");
            ct.throwIfCancellationRequested();
        },
        cancellationTokenCreatedWithTrueArgumentToConstructorIsCanceled: function () {
            var ct = new System.Threading.CancellationToken(true);
            Bridge.Test.Assert.true$1(ct.getCanBeCanceled(), "CanBeCanceled");
            Bridge.Test.Assert.true$1(ct.getIsCancellationRequested(), "IsCancellationRequested");
            Bridge.Test.Assert.throws(function () {
                ct.throwIfCancellationRequested();
            });
        },
        cancellationTokenNoneIsNotCancelledAndCannotBe: function () {
            Bridge.Test.Assert.false$1(System.Threading.CancellationToken.none.getCanBeCanceled(), "CanBeCanceled");
            Bridge.Test.Assert.false$1(System.Threading.CancellationToken.none.getIsCancellationRequested(), "IsCancellationRequested");
            System.Threading.CancellationToken.none.throwIfCancellationRequested();
        },
        creatingADefaultCancellationTokenReturnsACancellationTokenThatIsNotCancelled: function () {
            var ct = Bridge.getDefaultValue(System.Threading.CancellationToken);
            Bridge.Test.Assert.false$1(ct.getCanBeCanceled(), "CanBeCanceled");
            Bridge.Test.Assert.false$1(ct.getIsCancellationRequested(), "IsCancellationRequested");
            ct.throwIfCancellationRequested();
        },
        activatorCreateForCancellationTokenReturnsACancellationTokenThatIsNotCancelled: function () {
            var ct = Bridge.createInstance(System.Threading.CancellationToken);
            Bridge.Test.Assert.false$1(ct.getCanBeCanceled(), "CanBeCanceled");
            Bridge.Test.Assert.false$1(ct.getIsCancellationRequested(), "IsCancellationRequested");
            ct.throwIfCancellationRequested();
        },
        canBeCanceledIsTrueForTokenCreatedForCancellationTokenSource: function () {
            var cts = new System.Threading.CancellationTokenSource();
            Bridge.Test.Assert.true$1(cts.token.getCanBeCanceled(), "cts.Token");
        },
        isCancellationRequestedForTokenCreatedForCancellationTokenSourceIsSetByTheCancelMethod: function () {
            var cts = new System.Threading.CancellationTokenSource();
            Bridge.Test.Assert.false$1(cts.isCancellationRequested, "cts.IsCancellationRequested false");
            Bridge.Test.Assert.false$1(cts.token.getIsCancellationRequested(), "cts.Token.IsCancellationRequested false");
            cts.cancel();
            Bridge.Test.Assert.true$1(cts.isCancellationRequested, "cts.IsCancellationRequested true");
            Bridge.Test.Assert.true$1(cts.token.getIsCancellationRequested(), "cts.Token.IsCancellationRequested true");
        },
        throwIfCancellationRequestedForTokenCreatedForCancellationTokenSourceThrowsAfterTheCancelMethodIsCalled: function () {
            var cts = new System.Threading.CancellationTokenSource();
            cts.token.throwIfCancellationRequested();
            cts.cancel();
            Bridge.Test.Assert.throws$5(function () {
                cts.token.throwIfCancellationRequested();
            }, "cts.Token.ThrowIfCancellationRequested");
        },
        cancelWithoutArgumentsWorks: function () {
            var ex1 = new System.Exception();
            var ex2 = new System.Exception();
            var cts = new System.Threading.CancellationTokenSource();
            var calledHandlers = new System.Collections.Generic.List$1(System.Int32)();
            cts.token.register(function () {
                calledHandlers.add(0);
            });
            cts.token.register(function () {
                calledHandlers.add(1);
                throw ex1;
            });
            cts.token.register(function () {
                calledHandlers.add(2);
            });
            cts.token.register(function () {
                calledHandlers.add(3);
                throw ex2;
            });
            cts.token.register(function () {
                calledHandlers.add(4);
            });
    
            try {
                cts.cancel();
                Bridge.Test.Assert.fail$1("Should have thrown");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                var ex;
                if (Bridge.is($e1, System.AggregateException)) {
                    ex = $e1;
                    Bridge.Test.Assert.areEqual$1(2, ex.innerExceptions.getCount(), "count");
                    Bridge.Test.Assert.true$1(ex.innerExceptions.contains(ex1), "ex1");
                    Bridge.Test.Assert.true$1(ex.innerExceptions.contains(ex2), "ex2");
                }
                else {
                    throw $e1;
                }
            }
    
            Bridge.Test.Assert.true(calledHandlers.contains(0) && calledHandlers.contains(1) && calledHandlers.contains(2) && calledHandlers.contains(3) && calledHandlers.contains(4));
        },
        cancelWorksWhenThrowOnFirstExceptionIsFalse: function () {
            var ex1 = new System.Exception();
            var ex2 = new System.Exception();
            var cts = new System.Threading.CancellationTokenSource();
            var calledHandlers = new System.Collections.Generic.List$1(System.Int32)();
            cts.token.register(function () {
                calledHandlers.add(0);
            });
            cts.token.register(function () {
                calledHandlers.add(1);
                throw ex1;
            });
            cts.token.register(function () {
                calledHandlers.add(2);
            });
            cts.token.register(function () {
                calledHandlers.add(3);
                throw ex2;
            });
            cts.token.register(function () {
                calledHandlers.add(4);
            });
    
            try {
                cts.cancel(false);
                Bridge.Test.Assert.fail$1("Should have thrown");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                var ex;
                if (Bridge.is($e1, System.AggregateException)) {
                    ex = $e1;
                    Bridge.Test.Assert.areEqual$1(2, ex.innerExceptions.getCount(), "ex count");
                    Bridge.Test.Assert.true$1(ex.innerExceptions.contains(ex1), "ex1");
                    Bridge.Test.Assert.true$1(ex.innerExceptions.contains(ex2), "ex2");
                }
                else {
                    throw $e1;
                }
            }
    
            Bridge.Test.Assert.areEqual$1(5, calledHandlers.getCount(), "called handler count");
            Bridge.Test.Assert.true(calledHandlers.contains(0) && calledHandlers.contains(1) && calledHandlers.contains(2) && calledHandlers.contains(3) && calledHandlers.contains(4));
        },
        cancelWorksWhenThrowOnFirstExceptionIsTrue: function () {
            var ex1 = new System.Exception();
            var ex2 = new System.Exception();
            var cts = new System.Threading.CancellationTokenSource();
            var calledHandlers = new System.Collections.Generic.List$1(System.Int32)();
            cts.token.register(function () {
                calledHandlers.add(0);
            });
            cts.token.register(function () {
                calledHandlers.add(1);
                throw ex1;
            });
            cts.token.register(function () {
                calledHandlers.add(2);
            });
            cts.token.register(function () {
                calledHandlers.add(3);
                throw ex2;
            });
            cts.token.register(function () {
                calledHandlers.add(4);
            });
    
            try {
                cts.cancel(true);
                Bridge.Test.Assert.fail$1("Should have thrown");
            }
            catch (ex) {
                ex = System.Exception.create(ex);
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex, ex1), "ex");
            }
    
            Bridge.Test.Assert.areEqual$1(2, calledHandlers.getCount(), "called handler count");
            Bridge.Test.Assert.true(calledHandlers.contains(0) && calledHandlers.contains(1));
        },
        registerOnACancelledSourceWithoutContextInvokesTheCallback: function () {
            var cts = new System.Threading.CancellationTokenSource();
            cts.cancel();
            var state = 0;
            cts.token.register(function () {
                state = 1;
            });
            Bridge.Test.Assert.areEqual(1, state);
        },
        registerWithArgumentOnACancelledSourceInvokesTheCallback: function () {
            var cts = new System.Threading.CancellationTokenSource();
            var context = { };
            cts.cancel();
            var state = 0;
            cts.token.register(function (c) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(context, c), "context");
                state = 1;
            }, context);
            Bridge.Test.Assert.areEqual(1, state);
        },
        registerOnACancelledSourceWithoutContextRethrowsAThrownException: function () {
            var ex1 = new System.Exception();
            var cts = new System.Threading.CancellationTokenSource();
            cts.cancel();
            try {
                cts.token.register(function () {
                    throw ex1;
                });
                Bridge.Test.Assert.fail$1("Should have thrown");
            }
            catch (ex) {
                ex = System.Exception.create(ex);
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex, ex1), "Exception");
            }
        },
        registerOnACancelledSourceWithContextRethrowsAThrownException: function () {
            var ex1 = new System.Exception();
            var context = { };
            var cts = new System.Threading.CancellationTokenSource();
            cts.cancel();
            try {
                cts.token.register(function (c) {
                    Bridge.Test.Assert.true$1(Bridge.referenceEquals(context, c), "context");
                    throw ex1;
                }, context);
                Bridge.Test.Assert.fail$1("Should have thrown");
            }
            catch (ex) {
                ex = System.Exception.create(ex);
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(ex, ex1), "Exception");
            }
        },
        registerOverloadsWithUseSynchronizationContextWork: function () {
            var cts = new System.Threading.CancellationTokenSource();
            var context = { };
            cts.cancel();
            var numCalled = 0;
            cts.token.register(function (c) {
                Bridge.identity(numCalled, (numCalled = (numCalled + 1) | 0));
            }, true);
            cts.token.register(function (c) {
                Bridge.identity(numCalled, (numCalled = (numCalled + 1) | 0));
            }, false);
            cts.token.register(function (c) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(context, c), "context");
                numCalled = (numCalled + 1) | 0;
            }, context);
            cts.token.register(function (c) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(context, c), "context");
                numCalled = (numCalled + 1) | 0;
            }, context);
            Bridge.Test.Assert.areEqual(4, numCalled);
        },
        cancellationTokenSourceCanBeDisposed: function () {
            var cts = new System.Threading.CancellationTokenSource();
            cts.dispose();
    
            Bridge.Test.Assert.true(true);
        },
        registerOnCancellationTokenCreatedNonCancelledDoesNothing: function () {
            var ct = new System.Threading.CancellationToken(false);
    
            var state = 0;
            ct.register(function () {
                state = 1;
            });
    
            Bridge.Test.Assert.areEqual(0, state);
        },
        registerOnCancellationTokenCreatedCancelledInvokesTheActionImmediately: function () {
            var ct = new System.Threading.CancellationToken(true);
    
            var state = 0;
            var context = { };
            ct.register(function () {
                state = 1;
            });
            Bridge.Test.Assert.areEqual$1(1, state, "state 1");
            ct.register(function (c) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(context, c), "context");
                state = 2;
            }, context);
            Bridge.Test.Assert.areEqual$1(2, state, "state 2");
        },
        duplicateCancelDoesNotCauseCallbacksToBeCalledTwice: function () {
            var cts = new System.Threading.CancellationTokenSource();
            var calls = 0;
            cts.token.register(function () {
                calls = 1;
            });
            cts.cancel();
            cts.cancel();
    
            Bridge.Test.Assert.areEqual(1, calls);
        },
        registrationsCanBeCompared: function () {
            var cts = new System.Threading.CancellationTokenSource();
            var ctr1 = cts.token.register($_.Bridge.ClientTest.Threading.CancellationTokenTests.f1);
            var ctr2 = cts.token.register($_.Bridge.ClientTest.Threading.CancellationTokenTests.f1);
    
            Bridge.Test.Assert.true$1(ctr1.equalsT(ctr1), "#1");
            Bridge.Test.Assert.false$1(ctr1.equalsT(ctr2), "#2");
            Bridge.Test.Assert.true$1(Bridge.equals(ctr1, ctr1), "#3");
            Bridge.Test.Assert.false$1(Bridge.equals(ctr1, ctr2), "#4");
    
            Bridge.Test.Assert.true$1(Bridge.equals(ctr1, ctr1), "#5");
            Bridge.Test.Assert.false$1(Bridge.equals(ctr1, ctr2), "#6");
            Bridge.Test.Assert.false$1(!Bridge.equals(ctr1, ctr1), "#7");
            Bridge.Test.Assert.true$1(!Bridge.equals(ctr1, ctr2), "#8");
        },
        registrationsCanBeUnregistered: function () {
            var cts = new System.Threading.CancellationTokenSource();
            var calledHandlers = new System.Collections.Generic.List$1(System.Int32)();
            cts.token.register(function () {
                calledHandlers.add(0);
            });
            var reg = cts.token.register(function () {
                calledHandlers.add(1);
            });
            Bridge.Test.Assert.true(true);
    
            cts.token.register(function () {
                calledHandlers.add(2);
            });
    
            reg.dispose();
    
            cts.cancel();
    
            Bridge.Test.Assert.areEqual(2, calledHandlers.getCount());
            Bridge.Test.Assert.true(calledHandlers.contains(0) && calledHandlers.contains(2));
        },
        creatingADefaultCancellationTokenRegistrationReturnsARegistrationThatCanBeDisposedWithoutHarm: function () {
            var ct = Bridge.getDefaultValue(System.Threading.CancellationTokenRegistration);
            Bridge.Test.Assert.notNull$1(ct, "not null");
            Bridge.Test.Assert.true$1(true, "is CancellationTokenRegistration");
            ct.dispose();
        },
        linkedSourceWithTwoTokensWorks: function () {
            {
                var cts1 = new System.Threading.CancellationTokenSource();
                var cts2 = new System.Threading.CancellationTokenSource();
                var linked = System.Threading.CancellationTokenSource.createLinked(cts1.token, cts2.token);
    
                Bridge.Test.Assert.false$1(linked.isCancellationRequested, "#1");
                cts1.cancel();
                Bridge.Test.Assert.true$1(linked.isCancellationRequested, "#2");
            }
    
            {
                var cts11 = new System.Threading.CancellationTokenSource();
                var cts21 = new System.Threading.CancellationTokenSource();
                var linked1 = System.Threading.CancellationTokenSource.createLinked(cts11.token, cts21.token);
    
                Bridge.Test.Assert.false$1(linked1.isCancellationRequested, "#1");
                cts21.cancel();
                Bridge.Test.Assert.true$1(linked1.isCancellationRequested, "#2");
            }
        },
        linkedSourceWithThreeTokensWorks: function () {
            {
                var cts1 = new System.Threading.CancellationTokenSource();
                var cts2 = new System.Threading.CancellationTokenSource();
                var cts3 = new System.Threading.CancellationTokenSource();
                var linked = System.Threading.CancellationTokenSource.createLinked(cts1.token, cts2.token, cts3.token);
    
                Bridge.Test.Assert.false$1(linked.isCancellationRequested, "#1 1");
                cts1.cancel();
                Bridge.Test.Assert.true$1(linked.isCancellationRequested, "#1 2");
            }
    
            {
                var cts11 = new System.Threading.CancellationTokenSource();
                var cts21 = new System.Threading.CancellationTokenSource();
                var cts31 = new System.Threading.CancellationTokenSource();
                var linked1 = System.Threading.CancellationTokenSource.createLinked(cts11.token, cts21.token, cts31.token);
    
                Bridge.Test.Assert.false$1(linked1.isCancellationRequested, "#2 1");
                cts21.cancel();
                Bridge.Test.Assert.true$1(linked1.isCancellationRequested, "#2 2");
            }
    
            {
                var cts12 = new System.Threading.CancellationTokenSource();
                var cts22 = new System.Threading.CancellationTokenSource();
                var cts32 = new System.Threading.CancellationTokenSource();
                var linked2 = System.Threading.CancellationTokenSource.createLinked(cts12.token, cts22.token, cts32.token);
    
                Bridge.Test.Assert.false$1(linked2.isCancellationRequested, "#3 1");
                cts32.cancel();
                Bridge.Test.Assert.true$1(linked2.isCancellationRequested, "#3 2");
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.Threading.CancellationTokenTests", $_);
    
    Bridge.apply($_.Bridge.ClientTest.Threading.CancellationTokenTests, {
        f1: function () {
        }
    });
    
    Bridge.define('Bridge.ClientTest.Threading.PromiseTests', {
        config: {
            properties: {
                PromiseProgress: 0
            }
        },
        createPromise: function () {
            return new Bridge.ClientTest.Threading.PromiseTests.SimplePromise();
        },
        taskFromPromiseWithoutResultFactoryWorksWhenPromiseCompletes: function () {
            var completeAsync = Bridge.Test.Assert.async();
    
            var promise = this.createPromise();
            var task = System.Threading.Tasks.Task.fromPromise(promise);
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "Task should be running after being created");
    
            var continuationRun = false;
    
            var task1 = task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, task), "ContinueWith parameter should be correct");
                continuationRun = true;
            });
    
            Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "Task should be running before promise is completed.");
            promise.resolve([42, "result 123", 101]);
    
            task1.continueWith(function (x) {
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "Task should be completed after promise");
                Bridge.Test.Assert.true$1(continuationRun, "Continuation should have been run after promise was completed.");
                Bridge.Test.Assert.areDeepEqual$1([42, "result 123", 101], task.getResult(), "The result should be correct");
    
                completeAsync();
            });
        },
        taskFromPromiseWithResultFactoryWorksWhenPromiseCompletes: function () {
            var completeAsync = Bridge.Test.Assert.async();
    
            var trh = $_.Bridge.ClientTest.Threading.PromiseTests.f1;
    
            var promise = this.createPromise();
            var task = System.Threading.Tasks.Task.fromPromise(promise, trh);
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "Task should be running after being created");
    
            var continuationRun = false;
    
            var task1 = task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, task), "ContinueWith parameter should be correct");
                continuationRun = true;
            });
    
            Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "Task should be running before promise is completed.");
            promise.resolve([42, "result 123", 101]);
    
            task1.continueWith(function (x) {
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "Task should be completed after promise");
                Bridge.Test.Assert.true$1(continuationRun, "Continuation should have been run after promise was completed.");
                Bridge.Test.Assert.areDeepEqual(Bridge.merge(new Bridge.ClientTest.Threading.PromiseTests.TaskResult(), {
                    setI: 42,
                    setS: "result 123",
                    setJ: 101
                } ), task.getResult());
    
                completeAsync();
            });
        },
        taskFromPromiseWorksWhenPromiseFails: function () {
            var completeAsync = Bridge.Test.Assert.async();
    
            var promise = this.createPromise();
            var task = System.Threading.Tasks.Task.fromPromise(promise);
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "Task should be running after being created");
    
            var continuationRun = false;
    
            var task1 = task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, task), "ContinueWith parameter should be correct");
                continuationRun = true;
            });
    
            Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "Task should be running before promise is completed.");
            promise.reject([42, "result 123", 101]);
    
    
            task1.continueWith(function (x) {
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, task.status, "Task should have faulted after the promise was rejected.");
                Bridge.Test.Assert.true$1(continuationRun, "Continuation should have been run after promise was rejected.");
                Bridge.Test.Assert.true$1(Bridge.is(task.exception, System.AggregateException), "Exception should be an AggregateException");
                Bridge.Test.Assert.areEqual$1(1, task.exception.innerExceptions.getCount(), "Exception should have one inner exception");
                Bridge.Test.Assert.true$1(Bridge.is(task.exception.innerExceptions.get(0), Bridge.PromiseException), "Inner exception should be a PromiseException");
                Bridge.Test.Assert.areDeepEqual$1([42, "result 123", 101], Bridge.cast(task.exception.innerExceptions.get(0), Bridge.PromiseException).arguments, "The PromiseException arguments should be correct");
    
                completeAsync();
            });
        },
        completingPromiseCanBeAwaited: function () {
            var $step = 0,
                $task1, 
                $taskResult1, 
                $jumpFromFinally, 
                completeAsync, 
                promise, 
                result, 
                task, 
                $asyncBody = Bridge.fn.bind(this, function () {
                    for (;;) {
                        $step = System.Array.min([0,1], $step);
                        switch ($step) {
                            case 0: {
                                completeAsync = Bridge.Test.Assert.async();
                                
                                promise = this.createPromise();
                                result = null;
                                
                                task = System.Threading.Tasks.Task.run(function () {
                                    Bridge.Test.Assert.true$1(result == null, "Await should not finish too early (a).");
                                    promise.resolve([42, "result 123", 101]);
                                });
                                
                                Bridge.Test.Assert.true$1(result == null, "Await should not finish too early (b).");
                                
                                $task1 = System.Threading.Tasks.Task.fromPromise(promise);
                                $step = 1;
                                $task1.continueWith($asyncBody, true);
                                return;
                            }
                            case 1: {
                                $taskResult1 = $task1.getAwaitedResult();
                                result = $taskResult1;
                                
                                Bridge.Test.Assert.areEqual$1([42, "result 123", 101], result, "The result should be correct");
                                completeAsync();
                                return;
                            }
                            default: {
                                return;
                            }
                        }
                    }
                }, arguments);
    
            $asyncBody();
        },
        failingPromiseCanBeAwaited: function () {
            var $step = 0,
                $task1, 
                $taskResult1, 
                $jumpFromFinally, 
                $returnValue, 
                completeAsync, 
                promise, 
                continuationRun, 
                task, 
                ex, 
                ex1, 
                $async_e, 
                $async_e1, 
                $asyncBody = Bridge.fn.bind(this, function () {
                    try {
                        for (;;) {
                            $step = System.Array.min([0,1,2,3,4,5], $step);
                            switch ($step) {
                                case 0: {
                                    completeAsync = Bridge.Test.Assert.async();
                                    
                                    promise = this.createPromise();
                                    
                                    continuationRun = false;
                                    
                                    task = System.Threading.Tasks.Task.run(function () {
                                        Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early (a).");
                                        promise.reject([42, "result 123", 101]);
                                    });
                                    $step = 1;
                                    continue;
                                }
                                case 1: {
                                    Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early (b).");
                                    $task1 = System.Threading.Tasks.Task.fromPromise(promise);
                                    $step = 2;
                                    $task1.continueWith($asyncBody, true);
                                    return;
                                }
                                case 2: {
                                    $taskResult1 = $task1.getAwaitedResult();
                                    
                                    Bridge.Test.Assert.fail$1("Await should throw");
                                    $step = 5;
                                    continue;
                                }
                                case 3: {
                                    continuationRun = true;
                                    Bridge.Test.Assert.areEqual$1([42, "result 123", 101], ex.arguments, "The PromiseException arguments should be correct");
                                    $step = 5;
                                    continue;
                                }
                                case 4: {
                                    Bridge.Test.Assert.fail$1("Thrown exception should have been an AggregateException, was " + Bridge.getTypeName(ex1));
                                    $step = 5;
                                    continue;
                                }
                                case 5: {
                                    
                                    Bridge.Test.Assert.true$1(continuationRun, "Continuation should have been run after promise was rejected.");
                                    
                                    completeAsync();
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    } catch($async_e1) {
                        $async_e = System.Exception.create($async_e1);
                        if ( $step >= 1 && $step <= 2 ){
                            if (Bridge.is($async_e, Bridge.PromiseException)) {
                                ex = $async_e;
                                $step = 3;
                                $asyncBody();
                                return;
                            } else {
                                ex1 = $async_e;
                                $step = 4;
                                $asyncBody();
                                return;
                            }
                        }
                        throw $async_e;
                    }
                }, arguments);
    
            $asyncBody();
        },
        handleProgress: function (args) {
            if (args === void 0) { args = []; }
            var i = Bridge.cast(args[0], System.Int32);
            this.setPromiseProgress(i);
        },
        taskFromPromiseWithProgressWithoutResultFactoryWorksWhenPromiseProgressesAndCompletes: function () {
            var completeAsync = Bridge.Test.Assert.async();
    
            var promise = this.createPromise();
    
            this.setPromiseProgress(-1);
            var task = System.Threading.Tasks.Task.fromPromise(promise, null, null, Bridge.fn.bind(this, this.handleProgress));
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "Task should be running after being created");
    
            var continuationRun = false;
    
            var task1 = task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, task), "ContinueWith parameter should be correct");
                continuationRun = true;
            });
    
            Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "Task should be running before promise is completed.");
    
            promise.progress([20]);
            Bridge.Test.Assert.areEqual$1(20, this.getPromiseProgress(), "Progress 20");
    
            // Resolve will set Progress to 100%
            promise.resolve([42, "result 123", 101]);
            Bridge.Test.Assert.areEqual$1(100, this.getPromiseProgress(), "Progress 100");
    
            task1.continueWith(function (x) {
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "Task should be completed after promise");
                Bridge.Test.Assert.true$1(continuationRun, "Continuation should have been run after promise was completed.");
                Bridge.Test.Assert.areDeepEqual$1([42, "result 123", 101], task.getResult(), "The result should be correct");
    
                completeAsync();
            });
        }
    });
    
    Bridge.ns("Bridge.ClientTest.Threading.PromiseTests", $_);
    
    Bridge.apply($_.Bridge.ClientTest.Threading.PromiseTests, {
        f1: function (i, s, j) {
            return Bridge.merge(new Bridge.ClientTest.Threading.PromiseTests.TaskResult(), {
                setI: i,
                setS: s,
                setJ: j
            } );
        }
    });
    
    Bridge.define('Bridge.ClientTest.Threading.PromiseTests.SimplePromise', {
        inherits: [Bridge.IPromise],
        doThen: null,
        config: {
            properties: {
                Thens: null
            }
        },
        constructor: function () {
            this.setThens(new System.Collections.Generic.List$1(Bridge.ClientTest.Threading.PromiseTests.SimplePromise.A)());
    
            this.doThen = Bridge.fn.bind(this, $_.Bridge.ClientTest.Threading.PromiseTests.SimplePromise.f1);
        },
        then: function (fulfilledHandler, errorHandler, progressHandler) {
            if (errorHandler === void 0) { errorHandler = null; }
            if (progressHandler === void 0) { progressHandler = null; }
            this.doThen(fulfilledHandler, errorHandler, progressHandler);
        },
        resolve: function (args) {
            if (args === void 0) { args = []; }
            this.complete(Bridge.ClientTest.Threading.PromiseTests.SimplePromise.Which.Resolve, args);
        },
        reject: function (args) {
            if (args === void 0) { args = []; }
            this.complete(Bridge.ClientTest.Threading.PromiseTests.SimplePromise.Which.Reject, args);
        },
        progress: function (args) {
            if (args === void 0) { args = []; }
            var i = 0;
            while (i < this.getThens().getCount()) {
                var aThen = this.getThens().getItem(i);
    
                if (!Bridge.staticEquals(aThen.getProgress(), null)) {
                    aThen.getProgress()(args);
                }
    
                i = (i + 1) | 0;
            }
        },
        complete: function (which, args) {
            if (args === void 0) { args = []; }
            if (which === Bridge.ClientTest.Threading.PromiseTests.SimplePromise.Which.Resolve) {
                this.doThen = Bridge.fn.bind(this, function (f, e, p) {
                    this.resolve(args);
                });
            }
            else  {
                this.doThen = Bridge.fn.bind(this, function (f, e, p) {
                    this.reject(args);
                });
            }
    
            var i = 0;
            while (i < this.getThens().getCount()) {
                var aThen = this.getThens().getItem(i);
    
                if (which === Bridge.ClientTest.Threading.PromiseTests.SimplePromise.Which.Resolve) {
                    if (!Bridge.staticEquals(aThen.getFilled(), null)) {
                        aThen.getFilled().apply(null, args);
                    }
                }
                else  {
                    if (!Bridge.staticEquals(aThen.getError(), null)) {
                        aThen.getError().apply(null, args);
                    }
                }
    
                if (!Bridge.staticEquals(aThen.getProgress(), null)) {
                    aThen.getProgress()([100]);
                }
    
                i = (i + 1) | 0;
            }
            this.getThens().clear();
        }
    });
    
    Bridge.ns("Bridge.ClientTest.Threading.PromiseTests.SimplePromise", $_);
    
    Bridge.apply($_.Bridge.ClientTest.Threading.PromiseTests.SimplePromise, {
        f1: function (f, e, p) {
            this.getThens().add(Bridge.merge(new Bridge.ClientTest.Threading.PromiseTests.SimplePromise.A(), {
                setFilled: f,
                setError: e,
                setProgress: p
            } ));
        }
    });
    
    Bridge.define('Bridge.ClientTest.Threading.PromiseTests.SimplePromise.A', {
        config: {
            properties: {
                Filled: null,
                Error: null,
                Progress: null
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.Threading.PromiseTests.SimplePromise.Which', {
        statics: {
            Resolve: 0,
            Reject: 1
        },
        $enum: true
    });
    
    Bridge.define('Bridge.ClientTest.Threading.PromiseTests.TaskResult', {
        config: {
            properties: {
                I: 0,
                S: null,
                J: 0
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.Threading.TaskTests', {
        makeEnumerable: function (T, args) {
            var $t;
            if (args === void 0) { args = []; }
            var $yield = [];
            $t = Bridge.getEnumerator(args);
            while ($t.moveNext()) {
                var a = $t.getCurrent();
                $yield.push(a);
            }
            return System.Array.toEnumerable($yield);
        },
        taskCompletionSourceTypePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.Threading.Tasks.TaskCompletionSource", Bridge.getTypeName(System.Threading.Tasks.TaskCompletionSource), "FullName should be correct");
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            Bridge.Test.Assert.true(true);
        },
        taskTypePropertiesAreCorrect: function () {
            Bridge.Test.Assert.areEqual$1("System.Threading.Tasks.Task", Bridge.getTypeName(System.Threading.Tasks.Task), "FullName for non-generic task should be correct");
            Bridge.Test.Assert.areEqual$1("System.Threading.Tasks.Task", Bridge.getTypeName(System.Threading.Tasks.Task), "FullName for generic task should be correct");
    
            var task = new System.Threading.Tasks.TaskCompletionSource().task;
            Bridge.Test.Assert.true(true);
            Bridge.Test.Assert.true(Bridge.is(task, System.Threading.Tasks.Task));
            Bridge.Test.Assert.true(Bridge.is(task, System.IDisposable));
    
            task.dispose(); // Should not throw
        },
        taskCompletionSourceWorksWhenSettingResult: function () {
            var completeAsync = Bridge.Test.Assert.async();
    
            var callbackRun = false;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
    
            var task = tcs.task;
    
            task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, task), "Callback parameter should be correct");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "Task should be completed when in the callback");
                Bridge.Test.Assert.areEqual$1(1, task.getResult(), "Result should be 1 after the callback");
                Bridge.Test.Assert.areEqual$1(null, task.exception, "Exception should be null in the callback");
    
                callbackRun = true;
            });
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "The task should be running before SetResult is called");
            Bridge.Test.Assert.false$1(callbackRun, "Callback should not be run before SetResult() is called");
    
            tcs.setResult(1);
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "Task should be completed directly after SetResult() is called");
            Bridge.Test.Assert.areEqual$1(1, task.getResult(), "Result should be set immediately");
            Bridge.Test.Assert.areEqual$1(null, task.exception, "Exception should be null after SetResult()");
    
            System.Threading.Tasks.Task.run(function () {
                Bridge.Test.Assert.true$1(callbackRun, "Callback should be run");
    
                completeAsync();
            });
        },
        taskCompletionSourceWorksWhenSettingASingleException: function () {
            var completeAsync = Bridge.Test.Assert.async();
    
            var callbackRun = false;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;
    
            var ex = new System.Exception("Some text");
    
            task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, task), "Callback parameter should be correct");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, task.status, "Task should be faulted in the callback");
                Bridge.Test.Assert.true(Bridge.is(task.exception, System.AggregateException));
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(task.exception.innerExceptions.get(0), ex), "The exception should be correct");
                Bridge.Test.Assert.throws$5(function () {
                    var x = task.getResult();
                }, "Getting the result property in the callback should throw");
    
                callbackRun = true;
            });
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "The task should be running before the SetException() call");
            Bridge.Test.Assert.false$1(callbackRun, "Callback should not be run before SetException() is called");
    
            tcs.setException(ex);
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, task.status, "The task should be faulted immediately after the SetException() call");
            Bridge.Test.Assert.true(Bridge.is(task.exception, System.AggregateException));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(task.exception.innerExceptions.get(0), ex), "The exception should be correct immediately after SetException()");
            Bridge.Test.Assert.throws$5(function () {
                var x = task.getResult();
            }, "Getting the result property after SetException() should throw");
    
            System.Threading.Tasks.Task.run(function () {
                Bridge.Test.Assert.true$1(callbackRun, "Callback should be run");
    
                completeAsync();
            });
        },
        taskCompletionSourceWorksWhenSettingTwoExceptions: function () {
            var completeAsync = Bridge.Test.Assert.async();
    
            var callbackRun = false;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;
            var ex1 = new System.Exception("Some text");
            var ex2 = new System.Exception("Some other text");
    
            task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, task), "Callback parameter should be correct");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, task.status, "Task should be faulted in the callback");
                Bridge.Test.Assert.true(Bridge.is(task.exception, System.AggregateException));
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(task.exception.innerExceptions.get(0), ex1), "InnerExceptions[0] should be correct in callback");
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(task.exception.innerExceptions.get(1), ex2), "InnerExceptions[1] should be correct in callback");
                Bridge.Test.Assert.throws$5(function () {
                    var x = task.getResult();
                }, "Getting the result property in the callback should throw");
    
                callbackRun = true;
            });
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "The task should be running before the SetException() call");
            Bridge.Test.Assert.false$1(callbackRun, "Callback should not be run before SetException() is called");
    
            tcs.setException(this.makeEnumerable(System.Exception, [ex1, ex2]));
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, task.status, "The task should be faulted immediately after the SetException() call");
            Bridge.Test.Assert.true(Bridge.is(task.exception, System.AggregateException));
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(task.exception.innerExceptions.get(0), ex1), "InnerExceptions[0] should be correct immediately after SetException");
            Bridge.Test.Assert.true$1(Bridge.referenceEquals(task.exception.innerExceptions.get(1), ex2), "InnerExceptions[1] should be correct immediately after SetException");
            Bridge.Test.Assert.throws$5(function () {
                var x = task.getResult();
            }, "Getting the result property after SetException() should throw");
    
            System.Threading.Tasks.Task.run(function () {
                Bridge.Test.Assert.true$1(callbackRun, "Callback should be run");
    
                completeAsync();
            });
        },
        taskCompletionSourceWorksWhenCancelling: function () {
            var completeAsync = Bridge.Test.Assert.async();
    
            var callbackRun = false;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;
    
            var task1 = task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, task), "Callback parameter should be correct");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.canceled, task.status, "Task should be cancelled in the callback");
                Bridge.Test.Assert.true$1(task.exception == null, "Exception should be null in the callback");
                Bridge.Test.Assert.throws$5(function () {
                    var x = task.getResult();
                }, "Getting the result property in the callback should throw");
    
                callbackRun = true;
            });
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "The task should be running before the SetCanceled() call");
            Bridge.Test.Assert.false$1(callbackRun, "Callback should not be run before SetCanceled() is called");
    
            tcs.setCanceled();
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.canceled, task.status, "The task should be cancelled immediately after the SetCanceled() call");
            Bridge.Test.Assert.true$1(task.exception == null, "The exception should be correct immediately after SetCanceled()");
            Bridge.Test.Assert.throws$5(function () {
                var x = task.getResult();
            }, "Getting the result property after SetCanceled() should throw");
    
            task1.continueWith(function (x) {
                Bridge.Test.Assert.true$1(callbackRun, "The callback should be run");
    
                completeAsync();
            });
        },
        cancelledTaskThrowsTaskCanceledExceptionWhenAwaited: function () {
            var completeAsync = Bridge.Test.Assert.async();
    
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            tcs.setCanceled();
    
            var caughtException = null;
    
            var someMethod = function () {
                var $step = 0,
                    $task1, 
                    $taskResult1, 
                    $jumpFromFinally, 
                    $returnValue, 
                    ex, 
                    $async_e, 
                    $async_e1, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        try {
                            for (;;) {
                                $step = System.Array.min([1,2,3,4], $step);
                                switch ($step) {
    
                                    case 1: {
                                        $task1 = tcs.task;
                                        $step = 2;
                                        $task1.continueWith($asyncBody, true);
                                        return;
                                    }
                                    case 2: {
                                        $taskResult1 = $task1.getAwaitedResult();
                                        
                                        Bridge.Test.Assert.fail$1("Await should throw");
                                        $step = 4;
                                        continue;
                                    }
                                    case 3: {
                                        caughtException = ex;
                                        $step = 4;
                                        continue;
                                    }
                                    case 4: {
                                        return;
                                    }
                                    default: {
                                        return;
                                    }
                                }
                            }
                        } catch($async_e1) {
                            $async_e = System.Exception.create($async_e1);
                            if ( $step >= 1 && $step <= 2 ){
                                if (Bridge.is($async_e, System.Threading.Tasks.TaskCanceledException)) {
                                    ex = $async_e;
                                    $step = 3;
                                    $asyncBody();
                                    return;
                                }
                            }
                            throw $async_e;
                        }
                    }, arguments);
    
                $asyncBody();
            };
    
            someMethod();
    
            System.Threading.Tasks.Task.run(function () {
                Bridge.Test.Assert.notNull$1(caughtException, "Should catch");
                Bridge.Test.Assert.true(Bridge.referenceEquals(tcs.task, caughtException.task));
    
                completeAsync();
            });
        },
        cancelledTaskThrowsAggregateExceptionWithTaskCanceledExceptionWhenResultIsAccessed: function () {
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            tcs.setCanceled();
    
            try {
                var r = tcs.task.getResult();
    
                Bridge.Test.Assert.fail$1("Should throw");
            }
            catch ($e1) {
                $e1 = System.Exception.create($e1);
                var ex;
                if (Bridge.is($e1, System.AggregateException)) {
                    ex = $e1;
                    Bridge.Test.Assert.areEqual$1(1, ex.innerExceptions.getCount(), "InnerExceptions.Count");
                    var tce = Bridge.as(ex.innerExceptions.get(0), System.Threading.Tasks.TaskCanceledException);
                    Bridge.Test.Assert.notNull$1(tce, "is TaskCanceledException");
                    Bridge.Test.Assert.true$1(Bridge.referenceEquals(tcs.task, tce.task), "Task");
                }
                else {
                    throw $e1;
                }
            }
        },
        setResultFailsWhenTheTaskIsCompleted: function () {
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            tcs.setResult(1);
            Bridge.Test.Assert.throws(function () {
                tcs.setResult(1);
            });
        },
        setCanceledFailsWhenTheTaskIsCompleted: function () {
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            tcs.setCanceled();
            Bridge.Test.Assert.throws(function () {
                tcs.setCanceled();
            });
        },
        setExceptionFailsWhenTheTaskIsCompleted: function () {
            var ex = new System.Exception();
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            tcs.setException(ex);
            Bridge.Test.Assert.throws(function () {
                tcs.setException(ex);
            });
        },
        completedTaskHasCorrectIsXProperties: function () {
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            tcs.setResult(1);
            Bridge.Test.Assert.true(tcs.task.isCompleted());
            Bridge.Test.Assert.false(tcs.task.isFaulted());
            Bridge.Test.Assert.false(tcs.task.isCanceled());
        },
        cancelledTaskHasCorrectIsXProperties: function () {
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            tcs.setCanceled();
            Bridge.Test.Assert.true(tcs.task.isCompleted());
            Bridge.Test.Assert.false(tcs.task.isFaulted());
            Bridge.Test.Assert.true(tcs.task.isCanceled());
        },
        faultedTaskHasCorrectIsXProperties: function () {
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            tcs.setException(new System.Exception());
            Bridge.Test.Assert.true(tcs.task.isCompleted());
            Bridge.Test.Assert.true(tcs.task.isFaulted());
            Bridge.Test.Assert.false(tcs.task.isCanceled());
        },
        trySetResultReturnsFalseWhenTheTaskIsCompleted: function () {
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            Bridge.Test.Assert.true(tcs.trySetResult(1));
            Bridge.Test.Assert.false(tcs.trySetResult(1));
        },
        trySetCanceledReturnsFalseWhenTheTaskIsCompleted: function () {
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            Bridge.Test.Assert.true(tcs.trySetCanceled());
            Bridge.Test.Assert.false(tcs.trySetCanceled());
        },
        trySetExceptionReturnsFalseWhenTheTaskIsCompleted: function () {
            var ex = new System.Exception();
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            Bridge.Test.Assert.true(tcs.trySetException(ex));
            Bridge.Test.Assert.false(tcs.trySetException(ex));
        },
        continueWithForNonGenericTaskWorkWithNoResultAndNoException: function () {
            var completeAsync = Bridge.Test.Assert.async();
    
            var complete = false;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running at point 1");
    
            var continuedTask = null;
    
            continuedTask = task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, task), "argument to task.ContinueWith callback should be correct");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "task should have run to completion at point 2");
                Bridge.Test.Assert.areEqual$1(null, task.exception, "task should not have an exception");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, continuedTask.status, "continuedTask should be running at point 2");
            });
    
            Bridge.Test.Assert.false$1(Bridge.referenceEquals(task, continuedTask), "task and continuedTask should not be the same");
    
            var continuedTask1 = continuedTask.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, continuedTask), "argument to continuedTask.ContinueWith callback should be correct");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, continuedTask.status, "continuedTask should have run to completion at point 3");
                Bridge.Test.Assert.areEqual$1(null, continuedTask.exception, "continuedTask should not have an exception");
    
                complete = true;
            });
    
            tcs.setResult(0);
    
            continuedTask1.continueWith(function (x) {
                Bridge.Test.Assert.true$1(complete, "We should not time out");
    
                completeAsync();
            });
        },
        continueWithWhenCallbackThrowsAnException: function () {
            var completeAsync = Bridge.Test.Assert.async();
    
            var cb1Invoked = false, cb2Invoked = false;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running at point 1");
    
            var t1 = task.continueWith(function (t) {
                cb1Invoked = true;
                throw new System.Exception("Test");
            });
    
            var t2 = task.continueWith(function (t) {
                cb2Invoked = true;
            });
    
            tcs.setResult(0);
    
            System.Threading.Tasks.Task.run(function () {
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "task status should be RanToCompletion");
    
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, t1.status, "t1 status should be Faulted");
                Bridge.Test.Assert.true$1(cb1Invoked, "Callback 1 should have been invoked");
    
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, t2.status, "t2 status should be RanToCompletion");
                Bridge.Test.Assert.true$1(cb2Invoked, "Callback 2 should have been invoked");
    
                completeAsync();
            });
        },
        exceptionInTaskBodyAppearsInTheExceptionMemberForNonGenericTask: function () {
            var completeAsync = Bridge.Test.Assert.async();
    
            var complete = false;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running at point 1");
    
            var continuedTask = null;
    
            continuedTask = task.continueWith($_.Bridge.ClientTest.Threading.TaskTests.f1);
    
            Bridge.Test.Assert.false$1(Bridge.referenceEquals(task, continuedTask), "task and continuedTask should not be the same");
    
            var continuedTask1 = continuedTask.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, continuedTask), "argument to continuedTask.ContinueWith callback should be correct");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, continuedTask.status, "continuedTask should have run to completion at point 3");
                Bridge.Test.Assert.areNotEqual$1(null, continuedTask.exception, "continuedTask should have an exception");
                Bridge.Test.Assert.true(Bridge.is(continuedTask.exception, System.AggregateException));
                Bridge.Test.Assert.areEqual("This is a test message", continuedTask.exception.innerExceptions.get(0).getMessage());
    
                complete = true;
            });
    
            tcs.setResult(0);
    
            continuedTask1.continueWith(function (x) {
                Bridge.Test.Assert.true$1(complete, "We should not time out");
    
                completeAsync();
            });
        },
        continueWithForNonGenericTaskCanReturnAValue: function () {
            var completeAsync = Bridge.Test.Assert.async();
    
            var done = false;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running at point 1");
    
            var continuedTask = null;
            continuedTask = task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, task), "argument to task.ContinueWith callback should be correct");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "task should have run to completion at point 2");
                Bridge.Test.Assert.areEqual$1(null, task.exception, "task should not have an exception");
    
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, continuedTask.status, "continuedTask should be running at point 2");
    
                return 42;
            });
    
            Bridge.Test.Assert.false$1(Bridge.referenceEquals(task, continuedTask), "task and continuedTask should not be the same");
    
            var continuedTask1 = continuedTask.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, continuedTask), "argument to continuedTask.ContinueWith callback should be correct");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, continuedTask.status, "continuedTask should have run to completion at point 3");
                Bridge.Test.Assert.areEqual$1(null, continuedTask.exception, "continuedTask should not have an exception");
                Bridge.Test.Assert.areEqual(42, t.getResult());
    
                done = true;
            });
    
            tcs.setResult(0);
    
            continuedTask1.continueWith(function (x) {
                Bridge.Test.Assert.true$1(done, "We should not time out");
    
                completeAsync();
            });
        },
        continueWithWithNoReturnValueForGenericTaskWorks: function () {
            var completeAsync = Bridge.Test.Assert.async();
    
            var done = false;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running at point 1");
    
            var continuedTask = null;
    
            continuedTask = task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, task), "argument to task.ContinueWith callback should be correct");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "task should have run to completion at point 2");
                Bridge.Test.Assert.areEqual$1(null, task.exception, "task should not have an exception");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, continuedTask.status, "continuedTask should be running at point 2");
            });
    
            Bridge.Test.Assert.false$1(Bridge.referenceEquals(task, continuedTask), "task and continuedTask should not be the same");
    
            var continuedTask1 = continuedTask.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, continuedTask), "argument to continuedTask.ContinueWith callback should be correct");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, continuedTask.status, "continuedTask should have run to completion at point 3");
                Bridge.Test.Assert.areEqual$1(null, continuedTask.exception, "continuedTask should not have an exception");
    
                done = true;
            });
    
            tcs.setResult(0);
    
            continuedTask1.continueWith(function (x) {
                Bridge.Test.Assert.true$1(done, "We should not time out");
    
                completeAsync();
            });
        },
        continueWithForGenericTaskCanReturnAValue: function () {
            var completeAsync = Bridge.Test.Assert.async();
    
            var done = false;
            var tcs = new System.Threading.Tasks.TaskCompletionSource();
            var task = tcs.task;
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running at point 1");
    
            var continuedTask = null;
    
            continuedTask = task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, task), "argument to task.ContinueWith callback should be correct");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "task should have run to completion at point 2");
                Bridge.Test.Assert.areEqual$1(null, task.exception, "task should not have an exception");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, continuedTask.status, "continuedTask should be running at point 2");
    
                return t.getResult() + "_";
            });
    
            Bridge.Test.Assert.false$1(Bridge.referenceEquals(task, continuedTask), "task and continuedTask should not be the same");
    
            var doneTask = continuedTask.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, continuedTask), "argument to continuedTask.ContinueWith callback should be correct");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, continuedTask.status, "continuedTask should have run to completion at point 3");
                Bridge.Test.Assert.areEqual$1(null, continuedTask.exception, "continuedTask should not have an exception");
                Bridge.Test.Assert.areEqual("42_", t.getResult());
    
                done = true;
            });
    
            tcs.setResult(42);
    
            doneTask.continueWith(function (x) {
                Bridge.Test.Assert.true$1(done, "We should not time out");
    
                completeAsync();
            });
        },
        delayWorks: function () {
            var completeAsync = Bridge.Test.Assert.async();
    
            var done = false;
    
            System.Threading.Tasks.Task.run(function () {
                Bridge.Test.Assert.false$1(done, "Done should not be set too early");
            });
    
            var delay = System.Threading.Tasks.Task.delay(100);
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, delay.status, "delay should be running at point 1");
    
            var afterDelay = delay.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, delay), "argument to delay.ContinueWith callback should be correct");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, delay.status, "delay should have run to completion at point 2");
                Bridge.Test.Assert.areEqual$1(null, delay.exception, "delay should not have an exception");
    
                done = true;
            });
    
            afterDelay.continueWith(function (x) {
                Bridge.Test.Assert.true$1(done, "We should not time out");
    
                completeAsync();
            });
        },
        fromResultWorks: function () {
            var t = System.Threading.Tasks.Task.fromResult(3);
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, t.status, "Task should be finished");
            Bridge.Test.Assert.areEqual$1(3, t.getResult(), "Result should be correct");
            Bridge.Test.Assert.areEqual$1(null, t.exception, "Exception should be null");
        },
        runWithoutResultWorks: function () {
            var completeAsync = Bridge.Test.Assert.async();
            var bodyRun = false, continuationRun = false;
    
            var task = System.Threading.Tasks.Task.run(function () {
                bodyRun = true;
            });
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running at point 1");
    
            var doneTask = task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, task), "argument to task.ContinueWith callback should be correct");
                Bridge.Test.Assert.true$1(bodyRun, "Body should be run before continuation");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "task should have run to completion at point 2");
                Bridge.Test.Assert.areEqual$1(null, task.exception, "task should not have an exception");
    
                continuationRun = true;
            });
    
            doneTask.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "We should not time out");
    
                completeAsync();
            });
        },
        runWithResultWorks: function () {
            var completeAsync = Bridge.Test.Assert.async();
            var bodyRun = false, continuationRun = false;
    
            var task = System.Threading.Tasks.Task.run(function () {
                bodyRun = true;
                return 42;
            });
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running at point 1");
    
            var doneTask = task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, task), "argument to task.ContinueWith callback should be correct");
                Bridge.Test.Assert.true$1(bodyRun, "Body should be run before continuation");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "task should have run to completion at point 2");
                Bridge.Test.Assert.areEqual(42, task.getResult());
                Bridge.Test.Assert.areEqual$1(null, task.exception, "task should not have an exception");
    
                continuationRun = true;
            });
    
            doneTask.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "We should not time out");
    
                completeAsync();
            });
        },
        runWorksWhenBodyThrows: function () {
            var completeAsync = Bridge.Test.Assert.async();
            var bodyRun = false, continuationRun = false;
    
            var task = System.Threading.Tasks.Task.run(function () {
                bodyRun = true;
                eval("throw 'This is a test message'");
            });
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running at point 1");
    
            var doneTask = task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t, task), "argument to task.ContinueWith callback should be correct");
                Bridge.Test.Assert.true$1(bodyRun, "Body should be run before continuation");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, task.status, "task should have faulted at point 2");
                Bridge.Test.Assert.true(Bridge.is(task.exception, System.AggregateException));
                Bridge.Test.Assert.areEqual("This is a test message", task.exception.innerExceptions.get(0).getMessage());
    
                continuationRun = true;
            });
    
            doneTask.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "We should not time out");
    
                completeAsync();
            });
        },
        whenAllParamArrayWithResultWorks: function () {
            var completeAsync = Bridge.Test.Assert.async();
    
            var continuationRun = false;
            var tcs1 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs2 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs3 = new System.Threading.Tasks.TaskCompletionSource();
    
            tcs1.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });
    
            tcs2.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });
    
            tcs3.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });
    
            var task = System.Threading.Tasks.Task.whenAll(tcs1.task, tcs2.task, tcs3.task);
    
            var doneTask = task.continueWith(function (t) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should only be run once.");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs1.task.status, "Task1 should have run to completion");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs2.task.status, "Task2 should have run to completion");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs3.task.status, "Task3 should have run to completion");
    
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(task, t), "Callback parameter should be correct");
    
                Bridge.Test.Assert.areEqual$1([101, 3, 42], t.getResult(), "Result should be correct");
                Bridge.Test.Assert.areEqual$1(null, t.exception, "Exception for the aggregate task should be null");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, t.status, "Aggregate task should have run to completion");
    
                continuationRun = true;
            });
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running after creation.");
    
            tcs2.setResult(3);
            tcs1.setResult(101);
            tcs3.setResult(42);
    
            doneTask.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "We should not time out");
    
                completeAsync();
            });
        },
        whenAllEnumerableWithResultWorks: function () {
            var completeAsync = Bridge.Test.Assert.async();
    
            var continuationRun = false;
            var tcs1 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs2 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs3 = new System.Threading.Tasks.TaskCompletionSource();
    
            tcs1.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });
    
            tcs2.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });
    
            tcs3.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });
    
            var task = System.Threading.Tasks.Task.whenAll(this.makeEnumerable(System.Threading.Tasks.Task, [tcs1.task, tcs2.task, tcs3.task]));
    
            var doneTask = task.continueWith(function (t) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should only be run once.");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs1.task.status, "Task1 should have run to completion");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs2.task.status, "Task2 should have run to completion");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs3.task.status, "Task3 should have run to completion");
    
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(task, t), "Callback parameter should be correct");
    
                Bridge.Test.Assert.areEqual$1([101, 3, 42], t.getResult(), "Result should be correct");
                Bridge.Test.Assert.areEqual$1(null, t.exception, "Exception for the aggregate task should be null");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, t.status, "Aggregate task should have run to completion");
    
                continuationRun = true;
            });
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running after creation.");
    
            tcs2.setResult(3);
            tcs1.setResult(101);
            tcs3.setResult(42);
    
            doneTask.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "We should not time out");
    
                completeAsync();
            });
        },
        whenAllParamArrayWithoutResultWorks: function () {
            var completeAsync = Bridge.Test.Assert.async();
    
            var continuationRun = false;
            var tcs1 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs2 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs3 = new System.Threading.Tasks.TaskCompletionSource();
    
            tcs1.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });
    
            tcs2.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });
    
            tcs3.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });
    
            var task = System.Threading.Tasks.Task.whenAll(Bridge.cast(tcs1.task, System.Threading.Tasks.Task), Bridge.cast(tcs2.task, System.Threading.Tasks.Task), Bridge.cast(tcs3.task, System.Threading.Tasks.Task));
    
            var doneTask = task.continueWith(function (t) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should only be run once.");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs1.task.status, "Task1 should have run to completion");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs2.task.status, "Task2 should have run to completion");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs3.task.status, "Task3 should have run to completion");
    
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(task, t), "Callback parameter should be correct");
    
                Bridge.Test.Assert.areEqual$1(null, t.exception, "Exception for the aggregate task should be null");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, t.status, "Aggregate task should have run to completion");
    
                continuationRun = true;
            });
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running after creation.");
    
            tcs2.setResult(3);
            tcs1.setResult(101);
            tcs3.setResult(42);
    
            doneTask.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "We should not time out");
    
                completeAsync();
            });
        },
        whenAllEnumerableWithoutResultWorks: function () {
            var completeAsync = Bridge.Test.Assert.async();
    
            var continuationRun = false;
            var tcs1 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs2 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs3 = new System.Threading.Tasks.TaskCompletionSource();
    
            tcs1.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });
    
            tcs2.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });
    
            tcs3.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });
    
            var task = System.Threading.Tasks.Task.whenAll(this.makeEnumerable(System.Threading.Tasks.Task, [Bridge.cast(tcs1.task, System.Threading.Tasks.Task), Bridge.cast(tcs2.task, System.Threading.Tasks.Task), Bridge.cast(tcs3.task, System.Threading.Tasks.Task)]));
    
            var doneTask = task.continueWith(function (t) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should only be run once.");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs1.task.status, "Task1 should have run to completion");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs2.task.status, "Task2 should have run to completion");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs3.task.status, "Task3 should have run to completion");
    
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(task, t), "Callback parameter should be correct");
    
                Bridge.Test.Assert.areEqual$1(null, t.exception, "Exception for the aggregate task should be null");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, t.status, "Aggregate task should have run to completion");
    
                continuationRun = true;
            });
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running after creation.");
    
            tcs2.setResult(3);
            tcs1.setResult(101);
            tcs3.setResult(42);
    
            doneTask.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "We should not time out");
    
                completeAsync();
            });
        },
        whenAllShouldHaveAnErrorIfAnyIncludedTaskFaulted: function () {
            var completeAsync = Bridge.Test.Assert.async();
    
            var continuationRun = false;
            var tcs1 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs2 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs3 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs4 = new System.Threading.Tasks.TaskCompletionSource();
    
            tcs1.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });
    
            tcs2.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });
    
            tcs3.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });
    
            tcs4.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });
    
            var ex1 = new System.Exception("exception 1");
            var ex2 = new System.Exception("exception 1");
    
            var task = System.Threading.Tasks.Task.whenAll(this.makeEnumerable(System.Threading.Tasks.Task, [Bridge.cast(tcs1.task, System.Threading.Tasks.Task), Bridge.cast(tcs2.task, System.Threading.Tasks.Task), Bridge.cast(tcs3.task, System.Threading.Tasks.Task), Bridge.cast(tcs4.task, System.Threading.Tasks.Task)]));
    
            var doneTask = task.continueWith(function (t) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should only be run once.");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs1.task.status, "Task1 should have run to completion");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, tcs2.task.status, "Task2 should be faulted");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, tcs3.task.status, "Task3 should be faulted");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.canceled, tcs4.task.status, "Task4 should be cancelled");
    
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(task, t), "Callback parameter should be correct");
    
                Bridge.Test.Assert.true$1(true, "Exception for the aggregate task should be null");
                Bridge.Test.Assert.areEqual$1(2, t.exception.innerExceptions.getCount(), "Should be 2 inner exceptions");
                Bridge.Test.Assert.true$1(t.exception.innerExceptions.contains(ex1), "ex1 should be propagated");
                Bridge.Test.Assert.true$1(t.exception.innerExceptions.contains(ex2), "ex2 should be propagated");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, t.status, "Aggregate task should be faulted");
    
                continuationRun = true;
            });
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running after creation.");
    
            tcs2.setException(ex1);
            tcs1.setResult(101);
            tcs3.setException(ex2);
            tcs4.setCanceled();
    
            doneTask.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "We should not time out");
    
                completeAsync();
            });
        },
        whenAllShouldBeCancelledIfNoTaskWasFaultedButSomeWasCancelled: function () {
            var completeAsync = Bridge.Test.Assert.async();
    
            var continuationRun = false;
            var tcs1 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs2 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs3 = new System.Threading.Tasks.TaskCompletionSource();
            tcs1.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });
    
            tcs2.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });
    
            tcs3.task.continueWith(function (_) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should not be run too early.");
            });
    
            var task = System.Threading.Tasks.Task.whenAll(tcs1.task, tcs2.task, tcs3.task);
    
            var doneTask = task.continueWith(function (t) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should only be run once.");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.canceled, tcs1.task.status, "Task1 should be cancelled");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs2.task.status, "Task2 should have run to completion");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs3.task.status, "Task3 should have run to completion");
    
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(task, t), "Callback parameter should be correct");
    
                Bridge.Test.Assert.areEqual$1(null, t.exception, "Exception for the aggregate task should be null");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.canceled, t.status, "Aggregate task should have run to completion");
    
                continuationRun = true;
            });
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running after creation.");
    
            tcs2.setResult(3);
            tcs1.setCanceled();
            tcs3.setResult(42);
    
            doneTask.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "We should not time out");
    
                completeAsync();
            });
        },
        whenAnyParamArrayWithResultWorks: function () {
            var completeAsync = Bridge.Test.Assert.async();
    
            var continuationRun = false;
    
            var tcs1 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs2 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs3 = new System.Threading.Tasks.TaskCompletionSource();
    
            var task = System.Threading.Tasks.Task.whenAny(tcs1.task, tcs2.task, tcs3.task);
    
            var task1 = task.continueWith(function (t) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should only be run once.");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs2.task.status, "Task2 should have run to completion");
    
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(task, t), "Callback parameter should be correct");
    
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t.getResult(), tcs2.task), "Result should be correct");
                Bridge.Test.Assert.areEqual$1(3, t.getResult().getResult(), "Result should be correct");
                Bridge.Test.Assert.areEqual$1(null, t.exception, "Exception for the aggregate task should be null");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, t.status, "Aggregate task should have run to completion");
    
                continuationRun = true;
            });
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running after creation.");
    
            tcs2.setResult(3);
    
            var doneTask = task1.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "Continuation should be run immediately");
    
                tcs1.setResult(101);
                tcs3.setResult(42);
            });
    
            doneTask.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "We should not time out");
    
                completeAsync();
            });
        },
        whenAnyEnumerableWithResultWorks: function () {
            var completeAsync = Bridge.Test.Assert.async();
    
            var continuationRun = false;
            var tcs1 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs2 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs3 = new System.Threading.Tasks.TaskCompletionSource();
    
            var task = System.Threading.Tasks.Task.whenAny(this.makeEnumerable(System.Threading.Tasks.Task, [tcs1.task, tcs2.task, tcs3.task]));
    
            var task1 = task.continueWith(function (t) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should only be run once.");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs2.task.status, "Task2 should have run to completion");
    
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(task, t), "Callback parameter should be correct");
    
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t.getResult(), tcs2.task), "Result should be correct");
                Bridge.Test.Assert.areEqual$1(3, t.getResult().getResult(), "Result should be correct");
                Bridge.Test.Assert.areEqual$1(null, t.exception, "Exception for the aggregate task should be null");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, t.status, "Aggregate task should have run to completion");
    
                continuationRun = true;
            });
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running after creation.");
    
            tcs2.setResult(3);
    
            var doneTask = task1.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "Continuation should be run immediately");
    
                tcs1.setResult(101);
                tcs3.setResult(42);
            });
    
            doneTask.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "We should not time out");
    
                completeAsync();
            });
        },
        whenAnyParamArrayWithoutResultWorks: function () {
            var completeAsync = Bridge.Test.Assert.async();
    
            var continuationRun = false;
    
            var tcs1 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs2 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs3 = new System.Threading.Tasks.TaskCompletionSource();
    
            var task = System.Threading.Tasks.Task.whenAny(Bridge.cast(tcs1.task, System.Threading.Tasks.Task), Bridge.cast(tcs2.task, System.Threading.Tasks.Task), Bridge.cast(tcs3.task, System.Threading.Tasks.Task));
    
            var task1 = task.continueWith(function (t) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should only be run once.");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs2.task.status, "Task2 should have run to completion");
    
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(task, t), "Callback parameter should be correct");
    
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t.getResult(), tcs2.task), "Result should be correct");
                Bridge.Test.Assert.areEqual$1(null, t.exception, "Exception for the aggregate task should be null");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, t.status, "Aggregate task should have run to completion");
    
                continuationRun = true;
            });
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running after creation.");
    
            tcs2.setResult(3);
    
            var doneTask = task1.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "Continuation should be run immediately");
    
                tcs1.setResult(101);
                tcs3.setResult(42);
            });
    
            doneTask.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "We should not time out");
    
                completeAsync();
            });
        },
        whenAnyEnumerableWithoutResultWorks: function () {
            var completeAsync = Bridge.Test.Assert.async();
    
            var continuationRun = false;
    
            var tcs1 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs2 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs3 = new System.Threading.Tasks.TaskCompletionSource();
    
            var task = System.Threading.Tasks.Task.whenAny(this.makeEnumerable(System.Threading.Tasks.Task, [Bridge.cast(tcs1.task, System.Threading.Tasks.Task), Bridge.cast(tcs2.task, System.Threading.Tasks.Task), Bridge.cast(tcs3.task, System.Threading.Tasks.Task)]));
    
            var task1 = task.continueWith(function (t) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should only be run once.");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, tcs2.task.status, "Task2 should have run to completion");
    
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(task, t), "Callback parameter should be correct");
    
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t.getResult(), tcs2.task), "Result should be correct");
                Bridge.Test.Assert.areEqual$1(null, t.exception, "Exception for the aggregate task should be null");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "Aggregate task should have run to completion");
    
                continuationRun = true;
            });
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running after creation.");
    
            tcs2.setResult(3);
    
            var doneTask = task1.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "Continuation should be run immediately");
    
                tcs1.setResult(101);
                tcs3.setResult(42);
            });
    
            doneTask.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "We should not time out");
    
                completeAsync();
            });
        },
        whenAnyFaultsIfTheFirstTaskFaulted: function () {
            var completeAsync = Bridge.Test.Assert.async();
    
            var continuationRun = false;
    
            var tcs1 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs2 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs3 = new System.Threading.Tasks.TaskCompletionSource();
            var ex = new System.Exception("Some text");
    
            var task = System.Threading.Tasks.Task.whenAny(this.makeEnumerable(System.Threading.Tasks.Task, [tcs1.task, tcs2.task, tcs3.task]));
    
            var task1 = task.continueWith(function (t) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should only be run once.");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, tcs2.task.status, "Task2 should have faulted");
    
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(task, t), "Callback parameter should be correct");
    
                Bridge.Test.Assert.areEqual$1(1, t.exception.innerExceptions.getCount(), "There should be one inner exception");
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(t.exception.innerExceptions.get(0), ex), "Exception for the aggregate task should be correct");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, task.status, "Aggregate task should have faulted");
    
                continuationRun = true;
            });
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running after creation.");
    
            tcs2.setException(ex);
    
            var doneTask = task1.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "Continuation should be run immediately");
    
                tcs1.setResult(101);
                tcs3.setResult(42);
            });
    
            doneTask.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "We should not time out");
    
                completeAsync();
            });
        },
        whenAnyIsCancelledIfTheFirstTaskWasCancelled: function () {
            var completeAsync = Bridge.Test.Assert.async();
    
            var continuationRun = false;
            var tcs1 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs2 = new System.Threading.Tasks.TaskCompletionSource();
            var tcs3 = new System.Threading.Tasks.TaskCompletionSource();
    
            var task = System.Threading.Tasks.Task.whenAny(this.makeEnumerable(System.Threading.Tasks.Task, [tcs1.task, tcs2.task, tcs3.task]));
    
            var task1 = task.continueWith(function (t) {
                Bridge.Test.Assert.false$1(continuationRun, "Continuation should only be run once.");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.canceled, tcs2.task.status, "Task2 should be cancelled");
    
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(task, t), "Callback parameter should be correct");
    
                Bridge.Test.Assert.areEqual$1(null, t.exception, "Aggregate task should not have exception");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.canceled, task.status, "Aggregate task should be cancelled");
    
                continuationRun = true;
            });
    
            Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.running, task.status, "task should be running after creation.");
    
            tcs2.setCanceled();
    
            var doneTask = task1.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "Continuation should be run immediately");
    
                tcs1.setResult(101);
                tcs3.setResult(42);
            });
    
            doneTask.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "We should not time out");
    
                completeAsync();
            });
        },
        constructorWithOnlyActionWorks: function () {
            var completeAsync = Bridge.Test.Assert.async();
    
            var taskRun = false, continuationRun = false;
    
            var task = new System.Threading.Tasks.Task(function () {
                taskRun = true;
            });
    
            var task1 = task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(taskRun, "Task should be run before continuation");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "Task should have run to completion");
                Bridge.Test.Assert.true$1(task.exception == null, "Exception should be null");
    
                continuationRun = true;
            });
    
            Bridge.Test.Assert.areEqual(System.Threading.Tasks.TaskStatus.created, task.status);
    
            System.Threading.Tasks.Task.run(function () {
                Bridge.Test.Assert.false$1(taskRun, "Task should not be run before being started");
    
                task.start();
    
                Bridge.Test.Assert.areEqual(System.Threading.Tasks.TaskStatus.running, task.status);
            });
    
            task1.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "The continuation should be run");
                completeAsync();
            });
        },
        constructorWithActionAndStateWorks: function () {
            var completeAsync = Bridge.Test.Assert.async();
    
            var taskRun = false, continuationRun = false;
            var state = { };
    
            var task = new System.Threading.Tasks.Task(function (s) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(state, s), "The state should be correct.");
                taskRun = true;
            }, state);
    
            var task1 = task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(taskRun, "Task should be run before continuation");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "Task should have run to completion");
                Bridge.Test.Assert.true$1(task.exception == null, "Exception should be null");
    
                continuationRun = true;
            });
    
            Bridge.Test.Assert.areEqual(System.Threading.Tasks.TaskStatus.created, task.status);
    
            System.Threading.Tasks.Task.run(function () {
                Bridge.Test.Assert.false$1(taskRun, "Task should not be run before being started");
    
                task.start();
    
                Bridge.Test.Assert.areEqual(System.Threading.Tasks.TaskStatus.running, task.status);
            });
    
            task1.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "The continuation should be run");
    
                completeAsync();
            });
        },
        exceptionInManuallyCreatedTaskIsStoredOnTheTask: function () {
            var completeAsync = Bridge.Test.Assert.async();
    
            var taskRun = false, continuationRun = false;
            var ex = new System.Exception();
    
            var task = new System.Threading.Tasks.Task(function () {
                taskRun = true;
                throw ex;
            });
    
            var task1 = task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(taskRun, "Task should be run before continuation");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.faulted, task.status, "Task should be faulted");
                Bridge.Test.Assert.true$1(Bridge.is(task.exception, System.AggregateException), "Exception should be correct");
                Bridge.Test.Assert.areEqual$1(1, task.exception.innerExceptions.getCount(), "There should be one inner exception");
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(task.exception.innerExceptions.get(0), ex), "InnerException should be correct");
    
                continuationRun = true;
            });
    
            Bridge.Test.Assert.areEqual(System.Threading.Tasks.TaskStatus.created, task.status);
    
            System.Threading.Tasks.Task.run(function () {
                Bridge.Test.Assert.false$1(taskRun, "Task should not be run before being started");
    
                task.start();
            });
    
            task1.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "The continuation should be run");
    
                completeAsync();
            });
        },
        constructorWithOnlyFunctionWorks: function () {
            var completeAsync = Bridge.Test.Assert.async();
    
            var taskRun = false, continuationRun = false;
    
            var task = new System.Threading.Tasks.Task(function () {
                taskRun = true;
                return 42;
            });
    
            var doneTask = task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(taskRun, "Task should be run before continuation");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "Task should have run to completion");
                Bridge.Test.Assert.areEqual$1(42, task.getResult(), "Result should be correct");
                Bridge.Test.Assert.true$1(task.exception == null, "Exception should be null");
    
                continuationRun = true;
            });
    
            Bridge.Test.Assert.areEqual(System.Threading.Tasks.TaskStatus.created, task.status);
    
            System.Threading.Tasks.Task.run(function () {
                Bridge.Test.Assert.false$1(taskRun, "Task should not be run before being started");
    
                task.start();
    
                Bridge.Test.Assert.areEqual(System.Threading.Tasks.TaskStatus.running, task.status);
            });
    
            doneTask.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "The continuation should be run");
    
                completeAsync();
            });
        },
        constructorWithFunctionAndStateWorks: function () {
            var completeAsync = Bridge.Test.Assert.async();
    
            var taskRun = false, continuationRun = false;
            var state = { };
    
            var task = new System.Threading.Tasks.Task(function (s) {
                Bridge.Test.Assert.true$1(Bridge.referenceEquals(state, s), "The state should be correct.");
                taskRun = true;
                return 42;
            }, state);
    
            var doneTask = task.continueWith(function (t) {
                Bridge.Test.Assert.true$1(taskRun, "Task should be run before continuation");
                Bridge.Test.Assert.areEqual$1(System.Threading.Tasks.TaskStatus.ranToCompletion, task.status, "Task should have run to completion");
                Bridge.Test.Assert.areEqual$1(42, task.getResult(), "Result should be correct");
                Bridge.Test.Assert.true$1(task.exception == null, "Exception should be null");
    
                continuationRun = true;
            });
    
            Bridge.Test.Assert.areEqual(System.Threading.Tasks.TaskStatus.created, task.status);
    
            System.Threading.Tasks.Task.run(function () {
                Bridge.Test.Assert.false$1(taskRun, "Task should not be run before being started");
    
                task.start();
    
                Bridge.Test.Assert.areEqual(System.Threading.Tasks.TaskStatus.running, task.status);
            });
    
            doneTask.continueWith(function (x) {
                Bridge.Test.Assert.true$1(continuationRun, "The continuation should be run");
    
                completeAsync();
            });
        }
    });
    
    Bridge.ns("Bridge.ClientTest.Threading.TaskTests", $_);
    
    Bridge.apply($_.Bridge.ClientTest.Threading.TaskTests, {
        f1: function (t) {
            eval("throw 'This is a test message'");
        }
    });
    
    Bridge.define('Bridge.ClientTest.Threading.TimerTests', {
        statics: {
            config: {
                properties: {
                    StaticCounter: 0,
                    StaticData: null
                }
            },
            staticHandleTimer: function (state) {
                Bridge.ClientTest.Threading.TimerTests.setStaticCounter((Bridge.ClientTest.Threading.TimerTests.getStaticCounter() + 1) | 0);
                Bridge.ClientTest.Threading.TimerTests.setStaticData(state);
            },
            testStaticCallbackWithDispose: function () {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $jumpFromFinally, 
                    done, 
                    timer, 
                    count, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1,2], $step);
                            switch ($step) {
                                case 0: {
                                    done = Bridge.Test.Assert.async();
                                    
                                    Bridge.ClientTest.Threading.TimerTests.setStaticCounter(0);
                                    Bridge.ClientTest.Threading.TimerTests.setStaticData(null);
                                    
                                    timer = new System.Threading.Timer("constructor$1", Bridge.ClientTest.Threading.TimerTests.staticHandleTimer, "SomeState", 1, 1);
                                    
                                    $task2 = System.Threading.Tasks.Task.delay(200);
                                    $step = 1;
                                    $task2.continueWith($asyncBody, true);
                                    return;
                                }
                                case 1: {
                                    $task2.getAwaitedResult();
                                    
                                    count = Bridge.ClientTest.Threading.TimerTests.getStaticCounter();
                                    timer.dispose();
                                    
                                    Bridge.Test.Assert.throws$7(System.InvalidOperationException, function () {
                                        timer.change(1, 1);
                                    }, "No change after Dispose allowed");
                                    Bridge.Test.Assert.true$1(count > 0, "Ticks: " + count);
                                    Bridge.Test.Assert.areEqual$1("SomeState", Bridge.ClientTest.Threading.TimerTests.getStaticData(), "State works");
                                    
                                    $task1 = System.Threading.Tasks.Task.delay(200);
                                    $step = 2;
                                    $task1.continueWith($asyncBody, true);
                                    return;
                                }
                                case 2: {
                                    $task1.getAwaitedResult();
                                    
                                    Bridge.Test.Assert.areEqual$1(count, Bridge.ClientTest.Threading.TimerTests.getStaticCounter(), "Timer disposed - no more ticks");
                                    
                                    done();
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);
    
                $asyncBody();
            },
            testInstanceCallbackWithDispose: function () {
                var $step = 0,
                    $task1, 
                    $task2, 
                    $jumpFromFinally, 
                    done, 
                    ts, 
                    timer, 
                    count, 
                    $asyncBody = Bridge.fn.bind(this, function () {
                        for (;;) {
                            $step = System.Array.min([0,1,2], $step);
                            switch ($step) {
                                case 0: {
                                    done = Bridge.Test.Assert.async();
                                    
                                    ts = new Bridge.ClientTest.Threading.TimerTests.TimerState();
                                    timer = new System.Threading.Timer("constructor$1", Bridge.fn.bind(ts, ts.handleTimer), "SomeState", 1, 1);
                                    
                                    $task2 = System.Threading.Tasks.Task.delay(200);
                                    $step = 1;
                                    $task2.continueWith($asyncBody, true);
                                    return;
                                }
                                case 1: {
                                    $task2.getAwaitedResult();
                                    
                                    count = ts.getCounter();
                                    timer.dispose();
                                    
                                    Bridge.Test.Assert.throws$7(System.InvalidOperationException, function () {
                                        timer.change(1, 1);
                                    }, "No change after Dispose allowed");
                                    Bridge.Test.Assert.true$1(count > 0, "Ticks: " + count);
                                    Bridge.Test.Assert.areEqual$1("SomeState", ts.getData(), "State works");
                                    
                                    $task1 = System.Threading.Tasks.Task.delay(200);
                                    $step = 2;
                                    $task1.continueWith($asyncBody, true);
                                    return;
                                }
                                case 2: {
                                    $task1.getAwaitedResult();
                                    
                                    Bridge.Test.Assert.areEqual$1(count, ts.getCounter(), "Timer disposed - no more ticks");
                                    
                                    done();
                                    return;
                                }
                                default: {
                                    return;
                                }
                            }
                        }
                    }, arguments);
    
                $asyncBody();
            }
        },
        testTimerThrows: function () {
            var ts = new Bridge.ClientTest.Threading.TimerTests.TimerState();
            var tc = Bridge.fn.bind(ts, ts.handleTimer);
    
            var okSpan = System.TimeSpan.fromMilliseconds(1);
            var smallSpan = System.TimeSpan.fromMilliseconds(-2);
            var bigSpan = System.TimeSpan.fromMilliseconds(System.Int64([0,1]));
    
            var small = -2;
            var big = System.Int64([0,1]);
    
            Bridge.Test.Assert.throws$7(System.ArgumentNullException, $_.Bridge.ClientTest.Threading.TimerTests.f1, "Null callback");
    
            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                new System.Threading.Timer("constructor$1", tc, null, small, 1);
            }, "Small due int");
            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                new System.Threading.Timer("constructor$1", tc, null, 1, small);
            }, "Small period int ");
    
            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                new System.Threading.Timer("constructor$2", tc, null, System.Int64(small), System.Int64(1));
            }, "Small due long");
            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                new System.Threading.Timer("constructor$2", tc, null, System.Int64(1), System.Int64(small));
            }, "Small period long");
            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                new System.Threading.Timer("constructor$2", tc, null, big, System.Int64(1));
            }, "Big due long");
            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                new System.Threading.Timer("constructor$2", tc, null, System.Int64(1), big);
            }, "Big period long");
    
            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                new System.Threading.Timer("constructor$3", tc, null, smallSpan, okSpan);
            }, "Small due TimeSpan");
            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                new System.Threading.Timer("constructor$3", tc, null, okSpan, smallSpan);
            }, "Small period TimeSpan");
            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                new System.Threading.Timer("constructor$3", tc, null, bigSpan, okSpan);
            }, "Big due TimeSpan");
            Bridge.Test.Assert.throws$7(System.ArgumentOutOfRangeException, function () {
                new System.Threading.Timer("constructor$3", tc, null, okSpan, bigSpan);
            }, "Big period TimeSpan");
        },
        testStaticCallbackWithChange: function () {
            var $step = 0,
                $task1, 
                $task2, 
                $jumpFromFinally, 
                done, 
                copy, 
                timer, 
                count, 
                $asyncBody = Bridge.fn.bind(this, function () {
                    for (;;) {
                        $step = System.Array.min([0,1,2], $step);
                        switch ($step) {
                            case 0: {
                                done = Bridge.Test.Assert.async();
                                
                                Bridge.ClientTest.Threading.TimerTests.setStaticCounter(0);
                                Bridge.ClientTest.Threading.TimerTests.setStaticData(null);
                                
                                copy = null;
                                
                                timer = new System.Threading.Timer("constructor$1", Bridge.ClientTest.Threading.TimerTests.staticHandleTimer, "SomeState", 1, 1);
                                
                                copy = timer;
                                
                                $task2 = System.Threading.Tasks.Task.delay(200);
                                $step = 1;
                                $task2.continueWith($asyncBody, true);
                                return;
                            }
                            case 1: {
                                $task2.getAwaitedResult();
                                
                                count = Bridge.ClientTest.Threading.TimerTests.getStaticCounter();
                                timer.change(-1, 0);
                                
                                Bridge.Test.Assert.true$1(count > 0, "Ticks: " + count);
                                Bridge.Test.Assert.areEqual$1("SomeState", Bridge.ClientTest.Threading.TimerTests.getStaticData(), "State works");
                                
                                $task1 = System.Threading.Tasks.Task.delay(200);
                                $step = 2;
                                $task1.continueWith($asyncBody, true);
                                return;
                            }
                            case 2: {
                                $task1.getAwaitedResult();
                                
                                Bridge.Test.Assert.areEqual$1(count, Bridge.ClientTest.Threading.TimerTests.getStaticCounter(), "Timer disposed");
                                
                                timer.dispose();
                                
                                Bridge.Test.Assert.throws$7(System.InvalidOperationException, function () {
                                    copy.change(1, 1);
                                }, "No change after Dispose allowed");
                                
                                done();
                                return;
                            }
                            default: {
                                return;
                            }
                        }
                    }
                }, arguments);
    
            $asyncBody();
        },
        testInstanceCallbackWithChange: function () {
            var $step = 0,
                $task1, 
                $task2, 
                $jumpFromFinally, 
                done, 
                ts, 
                copy, 
                timer, 
                count, 
                $asyncBody = Bridge.fn.bind(this, function () {
                    for (;;) {
                        $step = System.Array.min([0,1,2], $step);
                        switch ($step) {
                            case 0: {
                                done = Bridge.Test.Assert.async();
                                
                                ts = new Bridge.ClientTest.Threading.TimerTests.TimerState();
                                
                                copy = null;
                                
                                timer = new System.Threading.Timer("constructor$1", Bridge.fn.bind(ts, ts.handleTimer), "SomeState", 1, 1);
                                
                                copy = timer;
                                
                                $task2 = System.Threading.Tasks.Task.delay(200);
                                $step = 1;
                                $task2.continueWith($asyncBody, true);
                                return;
                            }
                            case 1: {
                                $task2.getAwaitedResult();
                                
                                count = ts.getCounter();
                                timer.change(-1, 0);
                                
                                Bridge.Test.Assert.true$1(count > 0, "Ticks: " + count);
                                Bridge.Test.Assert.areEqual$1("SomeState", ts.getData(), "State works");
                                
                                $task1 = System.Threading.Tasks.Task.delay(200);
                                $step = 2;
                                $task1.continueWith($asyncBody, true);
                                return;
                            }
                            case 2: {
                                $task1.getAwaitedResult();
                                
                                timer.dispose();
                                
                                Bridge.Test.Assert.areEqual$1(count, ts.getCounter(), "Timer disposed");
                                
                                
                                Bridge.Test.Assert.throws$7(System.InvalidOperationException, function () {
                                    copy.change(1, 1);
                                }, "No change after Dispose allowed");
                                
                                done();
                                return;
                            }
                            default: {
                                return;
                            }
                        }
                    }
                }, arguments);
    
            $asyncBody();
        },
        testInfiniteTimer: function () {
            var $step = 0,
                $task1, 
                $task2, 
                $jumpFromFinally, 
                done, 
                ts, 
                timer, 
                $asyncBody = Bridge.fn.bind(this, function () {
                    for (;;) {
                        $step = System.Array.min([0,1,2], $step);
                        switch ($step) {
                            case 0: {
                                done = Bridge.Test.Assert.async();
                                
                                ts = new Bridge.ClientTest.Threading.TimerTests.TimerState();
                                
                                timer = new System.Threading.Timer("constructor$1", Bridge.fn.bind(ts, ts.handleTimer), null, -1, 1);
                                $task2 = System.Threading.Tasks.Task.delay(200);
                                $step = 1;
                                $task2.continueWith($asyncBody, true);
                                return;
                            }
                            case 1: {
                                $task2.getAwaitedResult();
                                Bridge.Test.Assert.areEqual$1(ts.getCounter(), 0, "new -1, 1");
                                
                                timer.change(-1, -1);
                                $task1 = System.Threading.Tasks.Task.delay(200);
                                $step = 2;
                                $task1.continueWith($asyncBody, true);
                                return;
                            }
                            case 2: {
                                $task1.getAwaitedResult();
                                Bridge.Test.Assert.areEqual$1(ts.getCounter(), 0, "Change -1, -1");
                                
                                done();
                                return;
                            }
                            default: {
                                return;
                            }
                        }
                    }
                }, arguments);
    
            $asyncBody();
        }
    });
    
    Bridge.ns("Bridge.ClientTest.Threading.TimerTests", $_);
    
    Bridge.apply($_.Bridge.ClientTest.Threading.TimerTests, {
        f1: function () {
            new System.Threading.Timer("constructor$1", null, null, 1, 1);
        }
    });
    
    Bridge.define('Bridge.ClientTest.Threading.TimerTests.TimerState', {
        config: {
            properties: {
                Counter: 0,
                Data: null
            }
        },
        handleTimer: function (state) {
            this.setCounter((this.getCounter() + 1) | 0);
            this.setData(state);
        }
    });
    
    Bridge.define('Bridge.ClientTest.TypeSystemTests', {
        gettingBaseTypeWorks: function () {
            Bridge.Test.Assert.areEqual$1(null, Bridge.getBaseType(Bridge.ClientTest.TypeSystemTests.I1), "#1");
            Bridge.Test.Assert.areEqual$1(null, Bridge.getBaseType(Bridge.ClientTest.TypeSystemTests.I2), "#2");
            Bridge.Test.Assert.areEqual$1(Object, Bridge.getBaseType(Bridge.ClientTest.TypeSystemTests.B), "#3");
            Bridge.Test.Assert.areEqual$1(Bridge.ClientTest.TypeSystemTests.B, Bridge.getBaseType(Bridge.ClientTest.TypeSystemTests.C), "#4");
            Bridge.Test.Assert.areEqual$1(null, Bridge.getBaseType(Object), "#5");
    
            var t = null;
            Bridge.Test.Assert.throws$7(System.NullReferenceException, function () {
                var b = Bridge.getBaseType(t);
            }, "NullReferenceException");
        },
        isAssignableFromWorks: function () {
            Bridge.Test.Assert.true$1(Bridge.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.C1, Bridge.ClientTest.TypeSystemTests.AssignableTypes.C1), "#1");
            Bridge.Test.Assert.false$1(Bridge.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.C1, Object), "#2");
            Bridge.Test.Assert.true$1(Bridge.isAssignableFrom(Object, Bridge.ClientTest.TypeSystemTests.AssignableTypes.C1), "#3");
            Bridge.Test.Assert.false$1(Bridge.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.I1, Object), "#4");
            Bridge.Test.Assert.true$1(Bridge.isAssignableFrom(Object, Bridge.ClientTest.TypeSystemTests.AssignableTypes.I1), "#5");
            Bridge.Test.Assert.false$1(Bridge.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.I3, Bridge.ClientTest.TypeSystemTests.AssignableTypes.I1), "#6");
            Bridge.Test.Assert.true$1(Bridge.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.I1, Bridge.ClientTest.TypeSystemTests.AssignableTypes.I3), "#7");
            Bridge.Test.Assert.false$1(Bridge.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.D1, Bridge.ClientTest.TypeSystemTests.AssignableTypes.C1), "#8");
            Bridge.Test.Assert.true$1(Bridge.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.C1, Bridge.ClientTest.TypeSystemTests.AssignableTypes.D1), "#9");
            Bridge.Test.Assert.true$1(Bridge.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.I1, Bridge.ClientTest.TypeSystemTests.AssignableTypes.D1), "#10");
            Bridge.Test.Assert.true$1(Bridge.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.C2$1(System.Int32), Bridge.ClientTest.TypeSystemTests.AssignableTypes.D2$1(System.Int32)), "#11");
            Bridge.Test.Assert.false$1(Bridge.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.C2$1(String), Bridge.ClientTest.TypeSystemTests.AssignableTypes.D2$1(System.Int32)), "#12");
            Bridge.Test.Assert.true$1(Bridge.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.I2$1(System.Int32), Bridge.ClientTest.TypeSystemTests.AssignableTypes.D2$1(System.Int32)), "#13");
            Bridge.Test.Assert.false$1(Bridge.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.I2$1(String), Bridge.ClientTest.TypeSystemTests.AssignableTypes.D2$1(System.Int32)), "#14");
            Bridge.Test.Assert.true$1(Bridge.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.I1, Bridge.ClientTest.TypeSystemTests.AssignableTypes.D2$1(System.Int32)), "#15");
            Bridge.Test.Assert.false$1(Bridge.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.C2$1(String), Bridge.ClientTest.TypeSystemTests.AssignableTypes.D3), "#16");
            Bridge.Test.Assert.true$1(Bridge.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.C2$1(System.Int32), Bridge.ClientTest.TypeSystemTests.AssignableTypes.D3), "#17");
            Bridge.Test.Assert.false$1(Bridge.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.I2$1(System.Int32), Bridge.ClientTest.TypeSystemTests.AssignableTypes.D3), "#18");
            Bridge.Test.Assert.true$1(Bridge.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.I2$1(String), Bridge.ClientTest.TypeSystemTests.AssignableTypes.D3), "#19");
            Bridge.Test.Assert.false$1(Bridge.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.I2$1(System.Int32), Bridge.ClientTest.TypeSystemTests.AssignableTypes.I5$1(String)), "#20");
            Bridge.Test.Assert.true$1(Bridge.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.I2$1(System.Int32), Bridge.ClientTest.TypeSystemTests.AssignableTypes.I5$1(System.Int32)), "#21");
            Bridge.Test.Assert.false$1(Bridge.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.I5$1(System.Int32), Bridge.ClientTest.TypeSystemTests.AssignableTypes.I2$1(System.Int32)), "#22");
            Bridge.Test.Assert.true$1(Bridge.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.I1, Bridge.ClientTest.TypeSystemTests.AssignableTypes.D4), "#23");
            Bridge.Test.Assert.true$1(Bridge.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.I3, Bridge.ClientTest.TypeSystemTests.AssignableTypes.D4), "#24");
            Bridge.Test.Assert.true$1(Bridge.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.I4, Bridge.ClientTest.TypeSystemTests.AssignableTypes.D4), "#25");
            Bridge.Test.Assert.true$1(Bridge.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.AssignableTypes.I1, Bridge.ClientTest.TypeSystemTests.AssignableTypes.X2), "#26");
            Bridge.Test.Assert.false$1(Bridge.isAssignableFrom(Bridge.ClientTest.TypeSystemTests.E1, Bridge.ClientTest.TypeSystemTests.E2), "#30");
            Bridge.Test.Assert.false$1(Bridge.isAssignableFrom(System.Int32, Bridge.ClientTest.TypeSystemTests.E1), "#31");
            Bridge.Test.Assert.true$1(Bridge.isAssignableFrom(Object, Bridge.ClientTest.TypeSystemTests.E1), "#32");
        }
    });
    
    Bridge.define('Bridge.ClientTest.TypeSystemTests.AssignableTypes');
    
    Bridge.define('Bridge.ClientTest.TypeSystemTests.AssignableTypes.C1');
    
    Bridge.define('Bridge.ClientTest.TypeSystemTests.AssignableTypes.C2$1', function (T) { return {
    
    }; });
    
    Bridge.define('Bridge.ClientTest.TypeSystemTests.AssignableTypes.I1', {
        $interface: true
    });
    
    Bridge.define('Bridge.ClientTest.TypeSystemTests.AssignableTypes.I2$1', function (T1) { return {
        $interface: true
    }; });
    
    Bridge.define('Bridge.ClientTest.TypeSystemTests.AssignableTypes.I4', {
        $interface: true
    });
    
    Bridge.define('Bridge.ClientTest.TypeSystemTests.AssignableTypes.I7$1', function (T) { return {
        $interface: true
    }; });
    
    Bridge.define('Bridge.ClientTest.TypeSystemTests.AssignableTypes.I6$1', function (T) { return {
        $interface: true
    }; });
    
    Bridge.define('Bridge.ClientTest.TypeSystemTests.AssignableTypes.I9$2', function (T1, T2) { return {
        $interface: true
    }; });
    
    Bridge.define('Bridge.ClientTest.TypeSystemTests.I1', {
        $interface: true
    });
    
    Bridge.define('Bridge.ClientTest.TypeSystemTests.I3', {
        $interface: true
    });
    
    Bridge.define('Bridge.ClientTest.TypeSystemTests.E1', {
        $enum: true
    });
    
    Bridge.define('Bridge.ClientTest.TypeSystemTests.E2', {
        $enum: true,
        $flags: true
    });
    
    Bridge.define('Bridge.ClientTest.Utilities.BrowserHelper', {
        statics: {
            isPhantomJs: function () {
                return System.String.contains(navigator.userAgent,"PhantomJS");
            },
            isFirefox: function () {
                return System.String.contains(navigator.userAgent,"Firefox");
            },
            isChrome: function () {
                return System.String.contains(navigator.userAgent,"Chrome");
            },
            getBrowserInfo: function () {
                var userAgent = navigator.userAgent;
                var appVersion = navigator.appVersion;
                var product = navigator.product;
                var appName = navigator.appName;
                var appCodeName = navigator.appCodeName;
    
                return System.String.format("userAgent:{0} appVersion:{1} product:{2} appName:{3} appCodeName:{4}", userAgent, appVersion, product, appName, appCodeName);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.Utilities.DecimalHelper', {
        statics: {
            assertIsDecimalAndEqualTo$1: function (v, d, message) {
                if (message === void 0) { message = null; }
                Bridge.Test.Assert.areStrictEqual$1(true, Bridge.is(v, System.Decimal), message);
                Bridge.Test.Assert.areStrictEqual$1(System.Double.format(d, 'G'), v.toString(), message);
            },
            assertIsDecimalAndEqualTo: function (v, d, message) {
                if (message === void 0) { message = null; }
                Bridge.Test.Assert.areStrictEqual$1(true, Bridge.is(v, System.Decimal), message);
                Bridge.Test.Assert.areStrictEqual$1(Bridge.Int.format(d, 'G'), v.toString(), message);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.Utilities.Group', {
        statics: {
            getGroups: function () {
                var groups = new System.Collections.Generic.List$1(Bridge.ClientTest.Utilities.Group)();
                groups.add(Bridge.merge(new Bridge.ClientTest.Utilities.Group(), {
                    setName: "A",
                    setLimit: 1000
                } ));
                groups.add(Bridge.merge(new Bridge.ClientTest.Utilities.Group(), {
                    setName: "B",
                    setLimit: 400
                } ));
                groups.add(Bridge.merge(new Bridge.ClientTest.Utilities.Group(), {
                    setName: "C",
                    setLimit: 800
                } ));
                groups.add(Bridge.merge(new Bridge.ClientTest.Utilities.Group(), {
                    setName: "D",
                    setLimit: 200
                } ));
    
                return groups;
            }
        },
        config: {
            properties: {
                Name: null,
                Limit: 0
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.Utilities.Person', {
        statics: {
            getPersons: function () {
                var persons = new System.Collections.Generic.List$1(Bridge.ClientTest.Utilities.Person)();
    
                persons.add(Bridge.merge(new Bridge.ClientTest.Utilities.Person(), {
                    setID: 1,
                    setName: "Frank",
                    setCity: "Edmonton",
                    setCount: 300,
                    setGroup: "A"
                } ));
                persons.add(Bridge.merge(new Bridge.ClientTest.Utilities.Person(), {
                    setID: 2,
                    setName: "Zeppa",
                    setCity: "Tokyo",
                    setCount: 100,
                    setGroup: "C"
                } ));
                persons.add(Bridge.merge(new Bridge.ClientTest.Utilities.Person(), {
                    setID: 3,
                    setName: "John",
                    setCity: "Lisbon",
                    setCount: 700,
                    setGroup: "B"
                } ));
                persons.add(Bridge.merge(new Bridge.ClientTest.Utilities.Person(), {
                    setID: 4,
                    setName: "Billy",
                    setCity: "Paris",
                    setCount: 500,
                    setGroup: "C"
                } ));
                persons.add(Bridge.merge(new Bridge.ClientTest.Utilities.Person(), {
                    setID: 5,
                    setName: "Dora",
                    setCity: "Budapest",
                    setCount: 50,
                    setGroup: "B"
                } ));
                persons.add(Bridge.merge(new Bridge.ClientTest.Utilities.Person(), {
                    setID: 6,
                    setName: "Ian",
                    setCity: "Rome",
                    setCount: 550,
                    setGroup: "B"
                } ));
                persons.add(Bridge.merge(new Bridge.ClientTest.Utilities.Person(), {
                    setID: 7,
                    setName: "Mary",
                    setCity: "Dortmund",
                    setCount: 700,
                    setGroup: "B"
                } ));
                persons.add(Bridge.merge(new Bridge.ClientTest.Utilities.Person(), {
                    setID: 8,
                    setName: "Nemo",
                    setCity: "Ocean",
                    setCount: 3000,
                    setGroup: null
                } ));
    
                return persons;
            }
        },
        config: {
            properties: {
                ID: 0,
                Name: null,
                City: null,
                Count: 0,
                Group: null
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.Utilities.TypeHelper', {
        statics: {
            getTypeName: function (o) {
                return Bridge.getTypeName(o);
                // return Script.Get<string>("o.__proto__.$$name");
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.D1', {
        inherits: [Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.B1]
    });
    
    Bridge.define('Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.D2', {
        inherits: [Bridge.ClientTest.ArrayTests1.ArrayTestsSet2.B2]
    });
    
    Bridge.define('Bridge.ClientTest.BasicCSharp.TestAbstractClass.B', {
        inherits: [Bridge.ClientTest.BasicCSharp.TestAbstractClass.A],
        getString: function () {
            this.setData((this.getData() + 1) | 0);
            return "B";
        }
    });
    
    Bridge.define('Bridge.ClientTest.BasicCSharp.TestInheritance.B', {
        inherits: [Bridge.ClientTest.BasicCSharp.TestInheritance.A],
        config: {
            properties: {
                Y: 0
            }
        },
        constructor: function (x, y) {
            Bridge.ClientTest.BasicCSharp.TestInheritance.A.prototype.$constructor.call(this, x);
    
            this.setY(y);
        },
        handleNumber$1: function (i) {
            return ((i * 100) | 0);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BasicCSharp.TestInterfaces.A', {
        inherits: [Bridge.ClientTest.BasicCSharp.TestInterfaces.ISimple],
        config: {
            properties: {
                Data: 0
            }
        },
        constructor: function () {
            this.setData(1);
        },
        getString: function () {
            return "A.ISimple";
        }
    });
    
    Bridge.define('Bridge.ClientTest.BasicCSharp.TestInterfaces.B', {
        inherits: [Bridge.ClientTest.BasicCSharp.TestInterfaces.ISimple],
        data: 0,
        constructor: function () {
            this.data = 2;
        },
        getData: function () {
            return this.data;
        },
        setData: function (value) {
            this.data = value;
        },
        getString: function () {
            return "explicit B.ISimple";
        }
    });
    
    Bridge.define('Bridge.ClientTest.BasicCSharp.TestInterfaces.C', {
        inherits: [Bridge.ClientTest.BasicCSharp.TestInterfaces.ISimple,Bridge.ClientTest.BasicCSharp.TestInterfaces.ISimpleAsWell],
        data: 0,
        dataAsWell: 0,
        constructor: function () {
            this.data = 3;
            this.dataAsWell = 4;
        },
        getData: function () {
            return this.data;
        },
        setData: function (value) {
            this.data = value;
        },
        getDataAsWell: function () {
            return this.dataAsWell;
        },
        setDataAsWell: function (value) {
            this.dataAsWell = value;
        },
        getString: function () {
            return "C.ISimple";
        },
        getStringAsWell: function () {
            return "C.ISimpleAsWell";
        }
    });
    
    Bridge.define('Bridge.ClientTest.BasicCSharp.TestVirtualMethods.B', {
        inherits: [Bridge.ClientTest.BasicCSharp.TestVirtualMethods.A],
        testA: function () {
            return Bridge.ClientTest.BasicCSharp.TestVirtualMethods.A.prototype.test.call(this);
        },
        test: function () {
            return "B";
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1000.ObjectTestFixture', {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge1000.TestFixture$1(Object)]
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1001.Button', {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge1001.Control]
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1001.TextBox', {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge1001.Control]
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1024.ClassB', {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge1024.ClassC],
        constructor: function (p) {
            if (p === void 0) { p = "classB"; }
    
            Bridge.ClientTest.BridgeIssues.Bridge1024.ClassC.prototype.$constructor.call(this, p);
    
        },
        getFieldA: function () {
            return this.a;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1071.A$1', function (T) { return {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge1071.A],
        constructor: function (b) {
            Bridge.ClientTest.BridgeIssues.Bridge1071.A.prototype.$constructor.call(this, b, [T]);
    
        }
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1071.A$2', function (T, T2) { return {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge1071.A],
        constructor: function (b) {
            Bridge.ClientTest.BridgeIssues.Bridge1071.A.prototype.$constructor.call(this, b, [T, T2]);
    
    
        }
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1128.Foo1.Comparer', {
        inherits: [System.Collections.Generic.IComparer$1(Bridge.ClientTest.BridgeIssues.Bridge1128.Foo1.Item)],
        compare: function (x, y) {
            return System.String.compare(x.value, y.value);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1217.DemoNavigator', {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge1217.Navigator]
    });
    
    Bridge.define('Demo.Bridge1231.Class1$1.MyStruct', function (T) { return {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge1231.I1$1(T)],
        statics: {
            getDefaultValue: function () { return new Demo.Bridge1231.Class1$1.MyStruct(T)(); }
        },
        field: 0,
        constructor$1: function (field) {
            this.field = field;
        },
        constructor: function () {
        },
        $struct: true,
        getHashCode: function () {
            var hash = 17;
            hash = hash * 23 + 1473705463;
            hash = hash * 23 + (this.field == null ? 0 : Bridge.getHashCode(this.field));
            return hash;
        },
        equals: function (o) {
            if (!Bridge.is(o, Demo.Bridge1231.Class1$1.MyStruct(T))) {
                return false;
            }
            return Bridge.equals(this.field, o.field);
        },
        $clone: function (to) {
            var s = to || new Demo.Bridge1231.Class1$1.MyStruct(T)();
            s.field = this.field;
            return s;
        }
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1313.Class', {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge1313.IInterface],
        function: function (v) {
            return v;
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1339.Foo1', {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge1339.FooBase]
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1340.DataClass1$2', function (T, K) { return {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge1340.DataClass$2(T,K)]
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass1$2', function (T, K) { return {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass$2(T,K)]
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1411.Doodad', {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge1411.Thing],
        constructor: function () {
            Bridge.ClientTest.BridgeIssues.Bridge1411.Thing.prototype.$constructor.call(this);
    
            // 3
            this.setData(3);
        },
        constructor$1: function (x) {
            Bridge.ClientTest.BridgeIssues.Bridge1411.Thing.prototype.$constructor.call(this, x);
    
            // 4
            this.setData(4);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge240B', {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge240A],
        getString: function () {
            this.setData((this.getData() + 1) | 0);
            return "B";
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge304', {
        inherits: [Bridge.ClientTest.BridgeIssues.IBridge304],
        config: {
            properties: {
                X: null
            }
        },
        f: function (x) {
            this.setX(x);
        },
        f$1: function () {
            this.setX("void F()");
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge306A', {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge306Component$1(Bridge.ClientTest.BridgeIssues.Bridge306A.Props)],
        statics: {
            new: function (props) {
                return Bridge.ClientTest.BridgeIssues.Bridge306Component$1(Bridge.ClientTest.BridgeIssues.Bridge306A.Props).new(Bridge.ClientTest.BridgeIssues.Bridge306A, props);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge306B', {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge306Component$1(Bridge.ClientTest.BridgeIssues.Bridge306B.Props)],
        statics: {
            new: function (props) {
                return Bridge.ClientTest.BridgeIssues.Bridge306Component$1(Bridge.ClientTest.BridgeIssues.Bridge306B.Props).new(Bridge.ClientTest.BridgeIssues.Bridge306B, props);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge436Second', {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge436First],
        toObject: function () {
            return Bridge.ClientTest.BridgeIssues.Bridge436First.prototype.toObject.call(this) + "2";
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge522.DerivedClass1', {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge522.BaseClass],
        constructor: function () {
            Bridge.ClientTest.BridgeIssues.Bridge522.BaseClass.prototype.$constructor.call(this);
    
    
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge522.DerivedClass2', {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge522.BaseClass],
        config: {
            properties: {
                B: 0
            }
        },
        constructor: function () {
            Bridge.ClientTest.BridgeIssues.Bridge522.BaseClass.prototype.$constructor.call(this);
    
    
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge537B', {
        inherits: [System.Collections.Generic.IEnumerable$1(Bridge.ClientTest.BridgeIssues.Bridge537A)],
        statics: {
            getCount: function (l) {
                return l.list.getCount();
            },
            testB1: function () {
                var l = new Bridge.ClientTest.BridgeIssues.Bridge537B();
    
                l.add(Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge537A(), {
                    id: 101
                } ));
                l.add(Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge537A(), {
                    id: 102
                } ));
    
                return l.getCount();
            },
            testB2: function () {
                var l = new Bridge.ClientTest.BridgeIssues.Bridge537B();
    
                l.add(Bridge.merge(new Bridge.ClientTest.BridgeIssues.Bridge537A(), {
                    id: 103
                } ));
    
                return Bridge.ClientTest.BridgeIssues.Bridge537B.getCount(l);
            }
        },
        list: null,
        constructor: function () {
            this.list = new System.Collections.Generic.List$1(Bridge.ClientTest.BridgeIssues.Bridge537A)();
        },
        add: function (value) {
            this.list.add(value);
        },
        getEnumerator$1: function () {
            return this.list.getEnumerator();
        },
        getEnumerator: function () {
            return this.list.getEnumerator();
        },
        getCount: function () {
            return this.list.getCount();
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge558B', {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge558A],
        zz: function (a) {
            return Bridge.ClientTest.BridgeIssues.Bridge558A.prototype.zz.call(this, a);
        },
        zz$1: function (a) {
            return Bridge.ClientTest.BridgeIssues.Bridge558A.prototype.zz$1.call(this, a);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge559B1', {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge559A1],
        constructor: function () {
            Bridge.ClientTest.BridgeIssues.Bridge559A1.prototype.$constructor.call(this);
    
            this.result += " -> Bridge559B1 -- unexpected!";
        },
        constructor$1: function (a) {
            Bridge.ClientTest.BridgeIssues.Bridge559A1.prototype.constructor$1.call(this, a);
    
            this.result += " -> Bridge559B1$1";
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge559B2', {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge559A2],
        constructor: function () {
            Bridge.ClientTest.BridgeIssues.Bridge559A2.prototype.$constructor.call(this);
    
            this.result += " ClassB -- unexpected!";
        },
        constructor$1: function (a) {
            Bridge.ClientTest.BridgeIssues.Bridge559A2.prototype.constructor$1.call(this, a);
    
            this.result += " ClassB$1";
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge566B', {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge566A],
        getName: function () {
            return "Ted";
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge623B1', {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge623A],
        constructor: function (foo, func) {
            Bridge.ClientTest.BridgeIssues.Bridge623A.prototype.$constructor.call(this, foo, func);
    
        },
        getFoo: function () {
            return ((2 * this.foo) | 0);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge635B', {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge635A],
        internalFunc1: function () {
            return "B.Test1";
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge652.Bridge652A1', {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge652.Bridge652C$1(Bridge.ClientTest.BridgeIssues.Bridge652.Bridge652B1)]
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge652.Bridge652A2', {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge652.Bridge652D$1(Bridge.ClientTest.BridgeIssues.Bridge652.Bridge652B2)]
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge693B.Bridge693C', {
        inherits: [Bridge.ClientTest.BridgeIssues.IBridge693D]
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge883_2', {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge883_IInterface]
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge883_4', {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge883_3],
        statics: {
            field1: 1
        }
    });
    
    Bridge.define('Bridge.ClientTest.ConvertTests.ConvertToBooleanTests', {
        inherits: [Bridge.ClientTest.ConvertTests.ConvertTestBase$1(Boolean)],
        fromBoolean: function () {
            var testValues = [true, false];
            this.verifyViaObj(Boolean, function (value) { return System.Convert.toBoolean(value); }, testValues, testValues);
        },
        fromByte: function () {
            var testValues = [0, 255];
            var expectedValues = [false, true];
            this.verifyViaObj(System.Byte, function (value) { return System.Convert.toBoolean(value); }, testValues, expectedValues);
        },
        fromDecimal: function () {
            var testValues = [System.Decimal.MaxValue, System.Decimal.MinValue, System.Decimal.One, System.Decimal.Zero, System.Decimal(0.0), System.Decimal(0.0), System.Decimal(1.5), System.Decimal(-1.5), System.Decimal(500.0)];
            var expectedValues = [true, true, true, false, false, false, true, true, true];
            this.verifyViaObj(System.Decimal, function (value) { return System.Convert.toBoolean(value); }, testValues, expectedValues);
        },
        fromDouble: function () {
            var testValues = [4.94065645841247E-324, System.Double.max, System.Double.min, Number.NaN, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, 0.0, 0.0, 1.5, -1.5, 1.5E+300, 0.0, -1.7E+300, -1.69958582169389E-320];
            var expectedValues = [true, true, true, true, true, true, false, false, true, true, true, false, true, true];
            this.verifyViaObj(System.Double, function (value) { return System.Convert.toBoolean(value); }, testValues, expectedValues);
        },
        fromInt16: function () {
            var testValues = [-32768, 32767, 0];
            var expectedValues = [true, true, false];
            this.verifyViaObj(System.Int16, function (value) { return System.Convert.toBoolean(value); }, testValues, expectedValues);
        },
        fromInt32: function () {
            var testValues = [-2147483648, 2147483647, 0];
            var expectedValues = [true, true, false];
            this.verifyViaObj(System.Int32, function (value) { return System.Convert.toBoolean(value); }, testValues, expectedValues);
        },
        fromInt64: function () {
            var testValues = [System.Int64.MinValue, System.Int64.MaxValue, System.Int64(0)];
            var expectedValues = [true, true, false];
            this.verifyViaObj(System.Int64, function (value) { return System.Convert.toBoolean(value); }, testValues, expectedValues);
        },
        fromString: function () {
            var testValues = [null, "True", "true ", " true", " true ", " false ", " false", "false ", "False"];
            var expectedValues = [false, true, true, true, true, false, false, false, false];
            this.verifyFromString(function (value) { return System.Convert.toBoolean(value); }, function (value, provider) { return System.Convert.toBoolean(value, provider); }, testValues, expectedValues);
    
            var invalidValues = ["Hello"];
            this.verifyFromStringThrows(System.FormatException, function (value) { return System.Convert.toBoolean(value); }, function (value, provider) { return System.Convert.toBoolean(value, provider); }, invalidValues);
        },
        fromObject: function () {
            var testValues = [null];
            var expectedValues = [false];
            this.verifyFromObject(function (value) { return System.Convert.toBoolean(value); }, function (value, provider) { return System.Convert.toBoolean(value, provider); }, testValues, expectedValues);
    
            var invalidValues = [{ }, new Date()];
            this.verifyFromObjectThrows(System.InvalidCastException, function (value) { return System.Convert.toBoolean(value); }, function (value, provider) { return System.Convert.toBoolean(value, provider); }, invalidValues);
        },
        fromSByte: function () {
            var testValues = [0, 127, -128];
            var expectedValues = [false, true, true];
            this.verifyViaObj(System.SByte, function (value) { return System.Convert.toBoolean(value); }, testValues, expectedValues);
        },
        fromSingle: function () {
            var testValues = [1.401298E-45, 3.40282347E+38, -3.40282347E+38, Number.NaN, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, 0.0, 0.0, 1.5, -1.5, 1.5E+30, 0.0, -1.7E+30, -1.699999E-40];
            var expectedValues = [true, true, true, true, true, true, false, false, true, true, true, false, true, true];
            this.verifyViaObj(System.Single, function (value) { return System.Convert.toBoolean(value); }, testValues, expectedValues);
        },
        fromUInt16: function () {
            var testValues = [0, 65535];
            var expectedValues = [false, true];
            this.verifyViaObj(System.UInt16, function (value) { return System.Convert.toBoolean(value); }, testValues, expectedValues);
        },
        fromUInt32: function () {
            var testValues = [0, 4294967295];
            var expectedValues = [false, true];
            this.verifyViaObj(System.UInt32, function (value) { return System.Convert.toBoolean(value); }, testValues, expectedValues);
        },
        fromUInt64: function () {
            var testValues = [System.UInt64.MinValue, System.UInt64.MaxValue];
            var expectedValues = [false, true];
            this.verifyViaObj(System.UInt64, function (value) { return System.Convert.toBoolean(value); }, testValues, expectedValues);
        }
    });
    
    Bridge.define('Bridge.ClientTest.ConvertTests.ConvertToByteTests', {
        inherits: [Bridge.ClientTest.ConvertTests.ConvertTestBase$1(System.Byte)],
        fromBoolean: function () {
            var testValues = [true, false];
            var expectedValues = [1, 0];
            this.verifyViaObj(Boolean, function (value) { return System.Convert.toByte(value); }, testValues, expectedValues);
        },
        fromChar: function () {
            var testValues = [65, 0];
            var expectedValues = [65, 0];
            this.verifyViaObj(System.Char, function (value) { return System.Convert.toByte(value); }, testValues, expectedValues);
    
            var overflowValues = [65535];
            this.verifyThrowsViaObj(System.OverflowException, System.Char, function (value) { return System.Convert.toByte(value); }, overflowValues);
        },
        fromDecimal: function () {
            var testValues = [System.Decimal(255), System.Decimal(0), System.Decimal(254.01), System.Decimal(254.9)];
            var expectedValues = [255, 0, 254, 255];
            this.verifyViaObj(System.Decimal, function (value) { return System.Convert.toByte(value); }, testValues, expectedValues);
    
            var overflowValues = [System.Decimal.MinValue, System.Decimal.MaxValue];
            this.verifyThrowsViaObj(System.OverflowException, System.Decimal, function (value) { return System.Convert.toByte(value); }, overflowValues);
        },
        fromDouble: function () {
            var testValues = [0, 255, 100.0, 254.9, 255.2];
            var expectedValues = [0, 255, 100, 255, 255];
            this.verifyViaObj(System.Double, function (value) { return System.Convert.toByte(value); }, testValues, expectedValues);
    
            var overflowValues = [-System.Double.max, System.Double.max];
            this.verifyThrowsViaObj(System.OverflowException, System.Double, function (value) { return System.Convert.toByte(value); }, overflowValues);
        },
        fromInt16: function () {
            var testValues = [0, 255, 10, 2];
            var expectedValues = [0, 255, 10, 2];
            this.verifyViaObj(System.Int16, function (value) { return System.Convert.toByte(value); }, testValues, expectedValues);
    
            var overflowValues = [-32768, 32767];
            this.verifyThrowsViaObj(System.OverflowException, System.Int16, function (value) { return System.Convert.toByte(value); }, overflowValues);
        },
        fromInt32: function () {
            var testValues = [0, 255, 10];
            var expectedValues = [0, 255, 10];
            this.verifyViaObj(System.Int32, function (value) { return System.Convert.toByte(value); }, testValues, expectedValues);
    
            var overflowValues = [-2147483648, 2147483647];
            this.verifyThrowsViaObj(System.OverflowException, System.Int32, function (value) { return System.Convert.toByte(value); }, overflowValues);
        },
        fromInt64: function () {
            var testValues = [System.Int64(0), System.Int64(255), System.Int64(10)];
            var expectedValues = [0, 255, 10];
            this.verifyViaObj(System.Int64, function (value) { return System.Convert.toByte(value); }, testValues, expectedValues);
    
            var overflowValues = [System.Int64.MinValue, System.Int64.MaxValue];
            this.verifyThrowsViaObj(System.OverflowException, System.Int64, function (value) { return System.Convert.toByte(value); }, overflowValues);
        },
        fromObject: function () {
            var testValues = [null];
            var expectedValues = [0];
            this.verifyFromObject(function (value) { return System.Convert.toByte(value); }, function (value, provider) { return System.Convert.toByte(value, provider); }, testValues, expectedValues);
    
            var invalidValues = [{ }, new Date()];
            this.verifyFromObjectThrows(System.InvalidCastException, function (value) { return System.Convert.toByte(value); }, function (value, provider) { return System.Convert.toByte(value, provider); }, invalidValues);
        },
        fromSByte: function () {
            var testValues = [0, 10, 127];
            var expectedValues = [0, 10, 127];
            this.verifyViaObj(System.SByte, function (value) { return System.Convert.toByte(value); }, testValues, expectedValues);
    
            var overflowValues = [-128];
            this.verifyThrowsViaObj(System.OverflowException, System.SByte, function (value) { return System.Convert.toByte(value); }, overflowValues);
        },
        fromSingle: function () {
            var testValues = [255, 0, 254.01, 254.9];
            var expectedValues = [255, 0, 254, 255];
            this.verifyViaObj(System.Single, function (value) { return System.Convert.toByte(value); }, testValues, expectedValues);
    
            var overflowValues = [-3.40282347E+38, 3.40282347E+38];
            this.verifyThrowsViaObj(System.OverflowException, System.Single, function (value) { return System.Convert.toByte(value); }, overflowValues);
        },
        fromString: function () {
            var byteMinValue = 0;
            var byteMaxValue = 255;
            var intMinValue = -2147483648;
            var intMaxValue = 2147483647;
    
            var testValues = [byteMaxValue.toString(), byteMinValue.toString(), "0", "100", null];
            var expectedValues = [byteMaxValue, byteMinValue, 0, 100, 0];
            this.verifyFromString(function (value) { return System.Convert.toByte(value); }, function (value, provider) { return System.Convert.toByte(value, provider); }, testValues, expectedValues);
    
            var overflowValues = [intMinValue.toString(), intMaxValue.toString()];
            this.verifyFromStringThrows(System.OverflowException, function (value) { return System.Convert.toByte(value); }, function (value, provider) { return System.Convert.toByte(value, provider); }, overflowValues);
    
            var formatExceptionValues = ["abba"];
            this.verifyFromStringThrows(System.FormatException, function (value) { return System.Convert.toByte(value); }, function (value, provider) { return System.Convert.toByte(value, provider); }, formatExceptionValues);
        },
        fromStringWithBase: function () {
            var testValues = [null, null, null, null, "10", "100", "1011", "ff", "0xff", "77", "11", "11111111"];
            var testBases = [10, 2, 8, 16, 10, 10, 2, 16, 16, 8, 2, 2];
            var expectedValues = [0, 0, 0, 0, 10, 100, 11, 255, 255, 63, 3, 255];
            this.verifyFromStringWithBase(function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 6); }, testValues, testBases, expectedValues);
    
            var overflowValues = ["256", "111111111", "ffffe", "7777777", "-1"];
            var overflowBases = [10, 2, 16, 8, 10];
            this.verifyFromStringWithBaseThrows(System.OverflowException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 6); }, overflowValues, overflowBases);
    
            var formatExceptionValues = ["fffg", "0xxfff", "8", "112", "!56"];
            var formatExceptionBases = [16, 16, 8, 2, 10];
            this.verifyFromStringWithBaseThrows(System.FormatException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 6); }, formatExceptionValues, formatExceptionBases);
    
            var argumentExceptionValues = [null];
            var argumentExceptionBases = [11];
            this.verifyFromStringWithBaseThrows(System.ArgumentException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 6); }, argumentExceptionValues, argumentExceptionBases);
        },
        fromUInt16: function () {
            var testValues = [0, 255, 10, 100];
            var expectedValues = [0, 255, 10, 100];
            this.verifyViaObj(System.UInt16, function (value) { return System.Convert.toByte(value); }, testValues, expectedValues);
    
            var overflowValues = [65535];
            this.verifyThrowsViaObj(System.OverflowException, System.UInt16, function (value) { return System.Convert.toByte(value); }, overflowValues);
        },
        fromUInt32: function () {
            var testValues = [0, 255, 10, 100];
            var expectedValues = [0, 255, 10, 100];
            this.verifyViaObj(System.UInt32, function (value) { return System.Convert.toByte(value); }, testValues, expectedValues);
    
            var overflowValues = [4294967295];
            this.verifyThrowsViaObj(System.OverflowException, System.UInt32, function (value) { return System.Convert.toByte(value); }, overflowValues);
        },
        fromUInt64: function () {
            var testValues = [System.UInt64(0), System.UInt64(255), System.UInt64(10), System.UInt64(100)];
            var expectedValues = [0, 255, 10, 100];
            this.verifyViaObj(System.UInt64, function (value) { return System.Convert.toByte(value); }, testValues, expectedValues);
    
            var overflowValues = [System.UInt64.MaxValue];
            this.verifyThrowsViaObj(System.OverflowException, System.UInt64, function (value) { return System.Convert.toByte(value); }, overflowValues);
        }
    });
    
    Bridge.define('Bridge.ClientTest.ConvertTests.ConvertToCharTests', {
        inherits: [Bridge.ClientTest.ConvertTests.ConvertTestBase$1(System.Char)],
        fromByte: function () {
            var testValues = [255, 0];
            var expectedValues = [255, 0];
            this.verify(System.Byte, function (value) { return System.Convert.toChar(value, null, 6); }, testValues, expectedValues);
        },
        fromChar: function () {
            var testValues = [65535, 0, 98];
            var expectedValues = [65535, 0, 98];
            this.verify(System.Char, function (value) { return System.Convert.toChar(value, null, 4); }, testValues, expectedValues);
        },
        fromDecimal: function () {
            var invalidValues = [System.Decimal(0.0), System.Decimal.MinValue, System.Decimal.MaxValue];
            this.verifyThrows(System.InvalidCastException, System.Decimal, function (value) { return System.Convert.toChar(value, null, 15); }, invalidValues);
        },
        fromDecimalViaObject: function () {
            var invalidValues = [System.Decimal(0.0), System.Decimal.MinValue, System.Decimal.MaxValue];
            this.verifyFromObjectThrows(System.InvalidCastException, function (value) { return System.Convert.toChar(value, null, 1); }, function (value, provider) { return System.Convert.toChar(value, provider, 1); }, invalidValues);
        },
        fromDouble: function () {
            var invalidValues = [0.0, System.Double.min, System.Double.max];
            this.verifyThrows(System.InvalidCastException, System.Double, function (value) { return System.Convert.toChar(value, null, 14); }, invalidValues);
        },
        fromDoubleViaObject: function () {
            var invalidValues = [0.0, System.Double.min, System.Double.max];
            this.verifyFromObjectThrows(System.InvalidCastException, function (value) { return System.Convert.toChar(value, null, 1); }, function (value, provider) { return System.Convert.toChar(value, provider, 1); }, invalidValues);
        },
        fromInt16: function () {
            var testValues = [32767, 0];
            var expectedValues = [32767, 0];
            this.verify(System.Int16, function (value) { return System.Convert.toChar(value, null, 7); }, testValues, expectedValues);
    
            var overflowValues = [-32768, -1000];
            this.verifyThrows(System.OverflowException, System.Int16, function (value) { return System.Convert.toChar(value, null, 7); }, overflowValues);
        },
        fromInt32: function () {
            var testValues = [65535, 0];
            var expectedValues = [65535, 0];
            this.verify(System.Int32, function (value) { return System.Convert.toChar(value, null, 9); }, testValues, expectedValues);
    
            var overflowValues = [-2147483648, 2147483647, 65536, -1000];
            this.verifyThrows(System.OverflowException, System.Int32, function (value) { return System.Convert.toChar(value, null, 9); }, overflowValues);
        },
        fromInt64: function () {
            var testValues = [System.Int64(0), System.Int64(98), System.Int64(65535)];
            var expectedValues = [0, 98, 65535];
            this.verify(System.Int64, function (value) { return System.Convert.toChar(value, null, 11); }, testValues, expectedValues);
    
            var overflowValues = [System.Int64.MinValue, System.Int64.MaxValue, System.Int64(-1)];
            this.verifyThrows(System.OverflowException, System.Int64, function (value) { return System.Convert.toChar(value, null, 11); }, overflowValues);
        },
        fromObject: function () {
            var testValues = [null];
            var expectedValues = [0];
            this.verify(Object, function (value) { return System.Convert.toChar(value, null, 1); }, testValues, expectedValues);
    
            var invalidValues = [{ }, new Date()];
            this.verifyThrows(System.InvalidCastException, Object, function (value) { return System.Convert.toChar(value, null, 1); }, invalidValues);
        },
        fromSByte: function () {
            var testValues = [127, 0];
            var expectedValues = [127, 0];
            this.verify(System.SByte, function (value) { return System.Convert.toChar(value, null, 5); }, testValues, expectedValues);
    
            var overflowValues = [-128, -100, -1];
            this.verifyThrows(System.OverflowException, System.SByte, function (value) { return System.Convert.toChar(value, null, 5); }, overflowValues);
        },
        fromSingle: function () {
            var invalidValues = [0.0, -3.40282347E+38, 3.40282347E+38];
            this.verifyThrows(System.InvalidCastException, System.Single, function (value) { return System.Convert.toChar(value, null, 13); }, invalidValues);
        },
        fromSingleViaObject: function () {
            var invalidValues = [0.0, -3.40282347E+38, 3.40282347E+38];
            this.verifyFromObjectThrows(System.InvalidCastException, function (value) { return System.Convert.toChar(value, null, 1); }, function (value, provider) { return System.Convert.toChar(value, provider, 1); }, invalidValues);
        },
        fromString: function () {
            var testValues = ["a", "T", "z", "a"];
            var expectedValues = [97, 84, 122, 97];
            this.verifyFromString(function (value) { return System.Convert.toChar(value, null, 18); }, function (value, provider) { return System.Convert.toChar(value, provider, 18); }, testValues, expectedValues);
    
            var formatExceptionValues = ["", "ab"];
            this.verifyFromStringThrows(System.FormatException, function (value) { return System.Convert.toChar(value, null, 18); }, function (value, provider) { return System.Convert.toChar(value, provider, 18); }, formatExceptionValues);
            this.verifyFromStringThrows(System.ArgumentNullException, function (value) { return System.Convert.toChar(value, null, 18); }, function (value, provider) { return System.Convert.toChar(value, provider, 18); }, [null]);
        },
        fromUInt16: function () {
            var testValues = [0, 98, 65535];
            var expectedValues = [0, 98, 65535];
            this.verify(System.UInt16, function (value) { return System.Convert.toChar(value, null, 8); }, testValues, expectedValues);
        },
        fromUInt32: function () {
            var testValues = [65535, 0];
            var expectedValues = [65535, 0];
            this.verify(System.UInt32, function (value) { return System.Convert.toChar(value, null, 10); }, testValues, expectedValues);
    
            var overflowValues = [4294967295];
            this.verifyThrows(System.OverflowException, System.UInt32, function (value) { return System.Convert.toChar(value, null, 10); }, overflowValues);
        },
        fromUInt64: function () {
            var testValues = [System.UInt64(0), System.UInt64(98), System.UInt64(65535)];
            var expectedValues = [0, 98, 65535];
            this.verify(System.UInt64, function (value) { return System.Convert.toChar(value, null, 12); }, testValues, expectedValues);
    
            var overflowValues = [System.UInt64.MaxValue, System.UInt64(65536)];
            this.verifyThrows(System.OverflowException, System.UInt64, function (value) { return System.Convert.toChar(value, null, 12); }, overflowValues);
        }
    });
    
    Bridge.define('Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests', {
        inherits: [Bridge.ClientTest.ConvertTests.ConvertTestBase$1(Date)],
        statics: {
            s_dateTimeFormatInfo: null,
            config: {
                init: function () {
                    this.s_dateTimeFormatInfo = new System.Globalization.DateTimeFormatInfo();
                }
            }
        },
        fromString: function () {
            var expectedValues = [new Date(1999, 12 - 1, 31, 23, 59, 59), new Date(100, 1 - 1, 1, 0, 0, 0), new Date(2216, 2 - 1, 29, 0, 0, 0), new Date(1, 1 - 1, 1, 0, 0, 0)];
    
            var dateTimeFormat = System.Globalization.CultureInfo.getCurrentCulture().dateTimeFormat;
            var pattern = dateTimeFormat.longDatePattern + String.fromCharCode(32) + dateTimeFormat.longTimePattern;
            var testValues = System.Array.init(expectedValues.length, null);
            for (var i = 0; i < expectedValues.length; i = (i + 1) | 0) {
                testValues[i] = Bridge.Date.format(expectedValues[i], pattern, dateTimeFormat);
            }
    
            this.verifyFromString(function (value) { return System.Convert.toDateTime(value); }, function (value, provider) { return System.Convert.toDateTime(value, provider); }, testValues, expectedValues);
            this.verifyFromObject(function (value) { return System.Convert.toDateTime(value); }, function (value, provider) { return System.Convert.toDateTime(value, provider); }, testValues, expectedValues);
    
            var formatExceptionValues = ["null", "201-5-14T00:00:00"];
    
            this.verifyFromStringThrows(System.FormatException, function (value) { return System.Convert.toDateTime(value); }, function (value, provider) { return System.Convert.toDateTime(value, provider); }, formatExceptionValues);
        },
        fromStringWithCustomFormatProvider: function () {
            var testValues = ["1999/12/31 11:59:59 PM", "2005/01/01 12:00:00 AM", "1492/02/29 12:00:00 AM", "1930/01/01 12:00:00 AM"];
            var expectedValues = [new Date(1999, 12 - 1, 31, 23, 59, 59), new Date(2005, 1 - 1, 1, 0, 0, 0), new Date(1492, 2 - 1, 29, 0, 0, 0), new Date(1930, 1 - 1, 1, 0, 0, 0)];
            Bridge.Test.Assert.areEqual(expectedValues.length, testValues.length);
    
            for (var i = 0; i < testValues.length; i = (i + 1) | 0) {
                var result = System.Convert.toDateTime(testValues[i], Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.s_dateTimeFormatInfo);
                Bridge.Test.Assert.areEqual(expectedValues[i], result);
                result = System.Convert.toDateTime(testValues[i], Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.s_dateTimeFormatInfo);
                Bridge.Test.Assert.areEqual(expectedValues[i], result);
            }
    
            //#348
            //string minDateExpected;
            //if (Utilities.BrowserHelper.IsFirefox())
            //{
            //    minDateExpected = "Mon Jan 01 0001";
            //}
            //else
            //{
            //    minDateExpected = "Mon Jan 01 1";
            //}
    
            //var minDate = Convert.ToDateTime(null);
            //Assert.AreEqual(minDateExpected, minDate.ToDateString());
        },
        fromDateTime: function () {
            var expectedValues = [new Date(1999, 12 - 1, 31, 23, 59, 59), new Date(100, 1 - 1, 1, 0, 0, 0), new Date(1492, 2 - 1, 29, 0, 0, 0), new Date(1, 1 - 1, 1, 0, 0, 0)];
            for (var i = 0; i < expectedValues.length; i = (i + 1) | 0) {
                var result = System.Convert.toDateTime(expectedValues[i]);
                Bridge.Test.Assert.areEqual(expectedValues[i], result);
            }
        },
        fromObject: function () {
            Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f1, $_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f2);
            Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f3, $_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f2);
        },
        fromBoolean: function () {
            Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f4, $_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f2);
        },
        fromChar: function () {
            Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f5, $_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f2);
        },
        fromInt16: function () {
            Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f6, $_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f2);
        },
        fromInt32: function () {
            Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f6, $_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f2);
        },
        fromInt64: function () {
            Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f7, $_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f2);
        },
        fromUInt16: function () {
            Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f6, $_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f2);
        },
        fromUInt32: function () {
            Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f6, $_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f2);
        },
        fromUInt64: function () {
            Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f8, $_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f2);
        },
        fromSingle: function () {
            Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f9, $_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f2);
        },
        fromDouble: function () {
            Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f10, $_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f2);
        },
        fromDecimal: function () {
            Bridge.Test.Assert.throws$1($_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f11, $_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.f2);
        }
    });
    
    Bridge.ns("Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests", $_);
    
    Bridge.apply($_.Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests, {
        f1: function () {
            System.Convert.toDateTime({ });
        },
        f2: function (err) {
            return Bridge.is(err, System.InvalidCastException);
        },
        f3: function () {
            System.Convert.toDateTime({ }, Bridge.ClientTest.ConvertTests.ConvertToDateTimeTests.s_dateTimeFormatInfo);
        },
        f4: function () {
            System.Convert.toDateTime(false);
        },
        f5: function () {
            System.Convert.toDateTime(97);
        },
        f6: function () {
            System.Convert.toDateTime(5);
        },
        f7: function () {
            System.Convert.toDateTime(System.Int64(5));
        },
        f8: function () {
            System.Convert.toDateTime(System.UInt64(5));
        },
        f9: function () {
            System.Convert.toDateTime(1.0);
        },
        f10: function () {
            System.Convert.toDateTime(1.1);
        },
        f11: function () {
            System.Convert.toDateTime(System.Decimal(1.0));
        }
    });
    
    Bridge.define('Bridge.ClientTest.ConvertTests.ConvertToDecimalTests', {
        inherits: [Bridge.ClientTest.ConvertTests.ConvertTestBase$1(System.Decimal)],
        fromBoolean: function () {
            var testValues = [true, false];
            var expectedValues = [System.Decimal(1.0), System.Decimal.Zero];
            this.verifyViaObj(Boolean, function (value) { return System.Convert.toDecimal(value); }, testValues, expectedValues);
        },
        fromByte: function () {
            var testValues = [255, 0];
            var expectedValues = [System.Decimal(255), System.Decimal(0)];
            this.verifyViaObj(System.Byte, function (value) { return System.Convert.toDecimal(value); }, testValues, expectedValues);
        },
        fromDecimal: function () {
            var testValues = [System.Decimal.MaxValue, System.Decimal.MinValue, System.Decimal(0)];
            var expectedValues = [System.Decimal.MaxValue, System.Decimal.MinValue, System.Decimal(0)];
            this.verifyViaObj(System.Decimal, function (value) { return System.Convert.toDecimal(value); }, testValues, expectedValues);
        },
        fromDouble: function () {
            var testValues = [1000.0, 100.0, 0.0, 0.001, -1000.0, -100.0];
            var expectedValues = [System.Decimal(1000.0), System.Decimal(100.0), System.Decimal(0.0), System.Decimal(0.001), System.Decimal(-1000.0), System.Decimal(-100.0)];
            this.verifyViaObj(System.Double, function (value) { return System.Convert.toDecimal(value); }, testValues, expectedValues);
    
            var overflowValues = [System.Double.max, -System.Double.max];
            this.verifyThrowsViaObj(System.OverflowException, System.Double, function (value) { return System.Convert.toDecimal(value); }, overflowValues);
        },
        fromInt16: function () {
            var testValues = [32767, -32768, 0];
            var expectedValues = [System.Decimal(32767), System.Decimal(-32768), System.Decimal(0)];
            this.verifyViaObj(System.Int16, function (value) { return System.Convert.toDecimal(value); }, testValues, expectedValues);
        },
        fromInt32: function () {
            var testValues = [2147483647, -2147483648, 0];
            var expectedValues = [System.Decimal(2147483647), System.Decimal(-2147483648), System.Decimal(0)];
            this.verifyViaObj(System.Int32, function (value) { return System.Convert.toDecimal(value); }, testValues, expectedValues);
        },
        fromInt64: function () {
            var longMinValue = System.Int64.MinValue;
            var longMaxValue = System.Int64.MaxValue;
    
            var testValues = [longMaxValue, longMinValue, System.Int64(0)];
            var expectedValues = [System.Decimal(longMaxValue), System.Decimal(longMinValue), System.Decimal(0)];
            this.verifyViaObj(System.Int64, function (value) { return System.Convert.toDecimal(value); }, testValues, expectedValues);
        },
        fromObject: function () {
            var testValues = [null];
            var expectedValues = [System.Decimal(0)];
            this.verifyFromObject(function (value) { return System.Convert.toDecimal(value); }, function (value, provider) { return System.Convert.toDecimal(value, provider); }, testValues, expectedValues);
    
            var invalidValues = [{ }, new Date()];
            this.verifyFromObjectThrows(System.InvalidCastException, function (value) { return System.Convert.toDecimal(value); }, function (value, provider) { return System.Convert.toDecimal(value, provider); }, invalidValues);
        },
        fromSByte: function () {
            var testValues = [-128, 127, 0];
            var expectedValues = [System.Decimal(-128), System.Decimal(127), System.Decimal(0)];
            this.verifyViaObj(System.SByte, function (value) { return System.Convert.toDecimal(value); }, testValues, expectedValues);
        },
        fromSingle: function () {
            var testValues = [1000.0, 100.0, 0.0, -1.0, -100.0];
            var expectedValues = [System.Decimal(1000.0), System.Decimal(100.0), System.Decimal(0.0), System.Decimal(-1.0), System.Decimal(-100.0)];
            this.verifyViaObj(System.Single, function (value) { return System.Convert.toDecimal(value); }, testValues, expectedValues);
    
            var overflowValues = [3.40282347E+38, -3.40282347E+38];
            this.verifyThrowsViaObj(System.OverflowException, System.Single, function (value) { return System.Convert.toDecimal(value); }, overflowValues);
        },
        fromString: function () {
            var longMaxValue = System.Int64.MaxValue;
            var intMaxValue = 2147483647;
    
            var decimalMaxValueStr = System.Decimal.MaxValue.toFixed(0, 4);
            var decimalMinValueStr = System.Decimal.MinValue.toFixed(0, 4);
    
            var testValues = [intMaxValue.toString(), longMaxValue.toString(), decimalMaxValueStr, decimalMinValueStr, "0", null];
            var expectedValues = [System.Decimal(intMaxValue), System.Decimal(longMaxValue), System.Decimal.MaxValue, System.Decimal.MinValue, System.Decimal(0), System.Decimal(0)];
            this.verifyFromString(function (value) { return System.Convert.toDecimal(value); }, function (value, provider) { return System.Convert.toDecimal(value, provider); }, testValues, expectedValues);
    
            var overflowValues = ["792281625142643000000000000000"];
            this.verifyFromStringThrows(System.OverflowException, function (value) { return System.Convert.toDecimal(value); }, function (value, provider) { return System.Convert.toDecimal(value, provider); }, overflowValues);
    
            var formatExceptionValues = ["100E12"];
            this.verifyFromStringThrows(System.FormatException, function (value) { return System.Convert.toDecimal(value); }, function (value, provider) { return System.Convert.toDecimal(value, provider); }, formatExceptionValues);
        },
        fromUInt16: function () {
            var testValues = [65535, 0];
            var expectedValues = [System.Decimal(65535), System.Decimal(0)];
            this.verifyViaObj(System.UInt16, function (value) { return System.Convert.toDecimal(value); }, testValues, expectedValues);
        },
        fromUInt32: function () {
            var testValues = [4294967295, 0];
            var expectedValues = [System.Decimal(4294967295), System.Decimal(0)];
            this.verifyViaObj(System.UInt32, function (value) { return System.Convert.toDecimal(value); }, testValues, expectedValues);
        },
        fromUInt64: function () {
            var ulongMaxValue = System.UInt64.MaxValue;
    
            var testValues = [ulongMaxValue, System.UInt64(0)];
            var expectedValues = [System.Decimal(ulongMaxValue), System.Decimal(0)];
            this.verifyViaObj(System.UInt64, function (value) { return System.Convert.toDecimal(value); }, testValues, expectedValues);
        }
    });
    
    Bridge.define('Bridge.ClientTest.ConvertTests.ConvertToDoubleTests', {
        inherits: [Bridge.ClientTest.ConvertTests.ConvertTestBase$1(System.Double)],
        fromBoolean: function () {
            var testValues = [true, false];
            var expectedValues = [1.0, 0.0];
            this.verifyViaObj(Boolean, function (value) { return System.Convert.toDouble(value); }, testValues, expectedValues);
        },
        fromByte: function () {
            var testValues = [255, 0];
            var expectedValues = [255, 0];
            this.verifyViaObj(System.Byte, function (value) { return System.Convert.toDouble(value); }, testValues, expectedValues);
        },
        fromDecimal: function () {
            var testValues = [System.Decimal.MaxValue, System.Decimal.MinValue, System.Decimal(0.0)];
            var expectedValues = [System.Decimal.toFloat(System.Decimal.MaxValue), System.Decimal.toFloat(System.Decimal.MinValue), 0.0];
            this.verifyViaObj(System.Decimal, function (value) { return System.Convert.toDouble(value); }, testValues, expectedValues);
        },
        fromDouble: function () {
            var testValues = [System.Double.max, System.Double.min, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, 4.94065645841247E-324];
            var expectedValues = [System.Double.max, System.Double.min, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, 4.94065645841247E-324];
            this.verifyViaObj(System.Double, function (value) { return System.Convert.toDouble(value); }, testValues, expectedValues);
        },
        fromInt16: function () {
            var testValues = [32767, -32768, 0];
            var expectedValues = [32767, -32768, 0];
            this.verifyViaObj(System.Int16, function (value) { return System.Convert.toDouble(value); }, testValues, expectedValues);
        },
        fromInt32: function () {
            var testValues = [2147483647, -2147483648, 0];
            var expectedValues = [2147483647, -2147483648, 0];
            this.verifyViaObj(System.Int32, function (value) { return System.Convert.toDouble(value); }, testValues, expectedValues);
        },
        fromInt64: function () {
            var testValues = [System.Int64.MaxValue, System.Int64.MinValue, System.Int64(0)];
            var expectedValues = [9.2233720368547758E+18, -9.2233720368547758E+18, 0];
            this.verifyViaObj(System.Int64, function (value) { return System.Convert.toDouble(value); }, testValues, expectedValues);
        },
        fromObject: function () {
            var testValues = [null];
            var expectedValues = [0.0];
            this.verifyFromObject(function (value) { return System.Convert.toDouble(value); }, function (value, provider) { return System.Convert.toDouble(value, provider); }, testValues, expectedValues);
    
            var invalidValues = [{ }, new Date()];
            this.verifyFromObjectThrows(System.InvalidCastException, function (value) { return System.Convert.toDouble(value); }, function (value, provider) { return System.Convert.toDouble(value, provider); }, invalidValues);
        },
        fromSByte: function () {
            var testValues = [127, -128];
            var expectedValues = [127, -128];
            this.verifyViaObj(System.SByte, function (value) { return System.Convert.toDouble(value); }, testValues, expectedValues);
        },
        fromSingle: function () {
            var testValues = [3.40282347E+38, -3.40282347E+38, 0.0];
            var expectedValues = [3.40282347E+38, -3.40282347E+38, 0.0];
            this.verifyViaObj(System.Single, function (value) { return System.Convert.toDouble(value); }, testValues, expectedValues);
        },
        fromString: function () {
            var doubleMaxValue = System.Double.max;
            var doubleMinValue = -System.Double.max;
    
            var testValues = [System.Double.format(doubleMinValue, "R"), System.Double.format(doubleMaxValue, "R"), System.Double.format((0.0), 'G'), System.Double.format((10.0), 'G'), System.Double.format((-10.0), 'G'), null];
            var expectedValues = [-System.Double.max, System.Double.max, 0.0, 10.0, -10.0, 0.0];
            this.verifyFromString(function (value) { return System.Convert.toDouble(value); }, function (value, provider) { return System.Convert.toDouble(value, provider); }, testValues, expectedValues);
    
            var overflowValues = ["1.79769313486232E+308", "-1.79769313486232E+308"];
            this.verifyFromStringThrows(System.OverflowException, function (value) { return System.Convert.toDouble(value); }, function (value, provider) { return System.Convert.toDouble(value, provider); }, overflowValues);
    
            var formatExceptionValues = ["123xyz"];
            this.verifyFromStringThrows(System.FormatException, function (value) { return System.Convert.toDouble(value); }, function (value, provider) { return System.Convert.toDouble(value, provider); }, formatExceptionValues);
        },
        fromUInt16: function () {
            var testValues = [65535, 0];
            var expectedValues = [65535, 0];
            this.verifyViaObj(System.UInt16, function (value) { return System.Convert.toDouble(value); }, testValues, expectedValues);
        },
        fromUInt32: function () {
            var testValues = [4294967295, 0];
            var expectedValues = [4294967295, 0];
            this.verifyViaObj(System.UInt32, function (value) { return System.Convert.toDouble(value); }, testValues, expectedValues);
        },
        fromUInt64: function () {
            var testValues = [System.UInt64.MaxValue, System.UInt64.MinValue];
            var expectedValues = [1.8446744073709552E+19, 0.0];
            this.verifyViaObj(System.UInt64, function (value) { return System.Convert.toDouble(value); }, testValues, expectedValues);
        }
    });
    
    Bridge.define('Bridge.ClientTest.ConvertTests.ConvertToInt16Tests', {
        inherits: [Bridge.ClientTest.ConvertTests.ConvertTestBase$1(System.Int16)],
        fromBoolean: function () {
            var testValues = [true, false];
            var expectedValues = [1, 0];
            this.verifyViaObj(Boolean, function (value) { return System.Convert.toInt16(value); }, testValues, expectedValues);
        },
        fromByte: function () {
            var testValues = [255, 0];
            var expectedValues = [255, 0];
            this.verifyViaObj(System.Byte, function (value) { return System.Convert.toInt16(value); }, testValues, expectedValues);
        },
        fromChar: function () {
            var testValues = [65, 0];
            var expectedValues = [65, 0];
            this.verifyViaObj(System.Char, function (value) { return System.Convert.toInt16(value); }, testValues, expectedValues);
        },
        fromDecimal: function () {
            var testValues = [System.Decimal(100.0), System.Decimal(-100.0), System.Decimal(0.0)];
            var expectedValues = [100, -100, 0];
            this.verifyViaObj(System.Decimal, function (value) { return System.Convert.toInt16(value); }, testValues, expectedValues);
    
            var overflowValues = [System.Decimal.MaxValue, System.Decimal.MinValue];
            this.verifyThrowsViaObj(System.OverflowException, System.Decimal, function (value) { return System.Convert.toInt16(value); }, overflowValues);
        },
        fromDouble: function () {
            var testValues = [100.0, -100.0, 0];
            var expectedValues = [100, -100, 0];
            this.verifyViaObj(System.Double, function (value) { return System.Convert.toInt16(value); }, testValues, expectedValues);
    
            var overflowValues = [System.Double.max, -System.Double.max];
            this.verifyThrowsViaObj(System.OverflowException, System.Double, function (value) { return System.Convert.toInt16(value); }, overflowValues);
        },
        fromInt16: function () {
            var testValues = [32767, -32768, 0];
            var expectedValues = [32767, -32768, 0];
            this.verifyViaObj(System.Int16, function (value) { return System.Convert.toInt16(value); }, testValues, expectedValues);
        },
        fromInt32: function () {
            var testValues = [100, -100, 0];
            var expectedValues = [100, -100, 0];
            this.verifyViaObj(System.Int32, function (value) { return System.Convert.toInt16(value); }, testValues, expectedValues);
    
            var overflowValues = [2147483647, -2147483648];
            this.verifyThrowsViaObj(System.OverflowException, System.Int32, function (value) { return System.Convert.toInt16(value); }, overflowValues);
        },
        fromInt64: function () {
            var testValues = [System.Int64(100), System.Int64(-100), System.Int64(0)];
            var expectedValues = [100, -100, 0];
            this.verifyViaObj(System.Int64, function (value) { return System.Convert.toInt16(value); }, testValues, expectedValues);
    
            var overflowValues = [System.Int64.MaxValue, System.Int64.MinValue];
            this.verifyThrowsViaObj(System.OverflowException, System.Int64, function (value) { return System.Convert.toInt16(value); }, overflowValues);
        },
        fromObject: function () {
            var testValues = [null];
            var expectedValues = [0];
            this.verifyFromObject(function (value) { return System.Convert.toInt16(value); }, function (value, provider) { return System.Convert.toInt16(value, provider); }, testValues, expectedValues);
    
            var invalidValues = [{ }, new Date()];
            this.verifyFromObjectThrows(System.InvalidCastException, function (value) { return System.Convert.toInt16(value); }, function (value, provider) { return System.Convert.toInt16(value, provider); }, invalidValues);
        },
        fromSByte: function () {
            var testValues = [100, -100, 0];
            var expectedValues = [100, -100, 0];
            this.verifyViaObj(System.SByte, function (value) { return System.Convert.toInt16(value); }, testValues, expectedValues);
        },
        fromSingle: function () {
            var testValues = [100.0, -100.0, 0.0];
            var expectedValues = [100, -100, 0];
            this.verifyViaObj(System.Single, function (value) { return System.Convert.toInt16(value); }, testValues, expectedValues);
    
            var overflowValues = [3.40282347E+38, -3.40282347E+38];
            this.verifyThrowsViaObj(System.OverflowException, System.Single, function (value) { return System.Convert.toInt16(value); }, overflowValues);
        },
        fromString: function () {
            var shortMinValue = -32768;
            var shortMaxValue = 32767;
            var intMinValue = -2147483648;
            var intMaxValue = 2147483647;
    
            var testValues = ["100", "-100", "0", shortMinValue.toString(), shortMaxValue.toString(), null];
            var expectedValues = [100, -100, 0, shortMinValue, shortMaxValue, 0];
            this.verifyFromString(function (value) { return System.Convert.toInt16(value); }, function (value, provider) { return System.Convert.toInt16(value, provider); }, testValues, expectedValues);
    
            var overflowValues = [intMinValue.toString(), intMaxValue.toString()];
            this.verifyFromStringThrows(System.OverflowException, function (value) { return System.Convert.toInt16(value); }, function (value, provider) { return System.Convert.toInt16(value, provider); }, overflowValues);
    
            var formatExceptionValues = ["abba"];
            this.verifyFromStringThrows(System.FormatException, function (value) { return System.Convert.toInt16(value); }, function (value, provider) { return System.Convert.toInt16(value, provider); }, formatExceptionValues);
        },
        fromStringWithBase: function () {
            var testValues = [null, null, null, null, Bridge.ClientTest.ConvertTests.ConvertConstants.INT16_MAX_STRING_BASE_16, (32767).toString(), Bridge.ClientTest.ConvertTests.ConvertConstants.INT16_MAX_STRING_BASE_8, Bridge.ClientTest.ConvertTests.ConvertConstants.INT16_MAX_STRING_BASE_2, Bridge.ClientTest.ConvertTests.ConvertConstants.INT16_MIN_STRING_BASE_16, (-32768).toString(), Bridge.ClientTest.ConvertTests.ConvertConstants.INT16_MIN_STRING_BASE_8, Bridge.ClientTest.ConvertTests.ConvertConstants.INT16_MIN_STRING_BASE_2];
            var testBases = [10, 2, 8, 16, 16, 10, 8, 2, 16, 10, 8, 2];
            var expectedValues = [0, 0, 0, 0, 32767, 32767, 32767, 32767, -32768, -32768, -32768, -32768];
            this.verifyFromStringWithBase(function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 7); }, testValues, testBases, expectedValues);
    
            var overflowValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.INT16_OVERFLOW_MAX_STRING, Bridge.ClientTest.ConvertTests.ConvertConstants.INT16_OVERFLOW_MIN_STRING, Bridge.ClientTest.ConvertTests.ConvertConstants.INT16_OVERFLOW_MAX_STRING_BASE_2, Bridge.ClientTest.ConvertTests.ConvertConstants.INT16_OVERFLOW_MAX_STRING_BASE_16, Bridge.ClientTest.ConvertTests.ConvertConstants.INT16_OVERFLOW_MAX_STRING_BASE_8];
            var overflowBases = [10, 10, 2, 16, 8];
            this.verifyFromStringWithBaseThrows(System.OverflowException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 7); }, overflowValues, overflowBases);
    
            var formatExceptionValues = ["12", "ffffffffffffffffffff"];
            var formatExceptionBases = [2, 8];
            this.verifyFromStringWithBaseThrows(System.FormatException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 7); }, formatExceptionValues, formatExceptionBases);
    
            var argumentExceptionValues = ["10", "11", "abba", "-ab"];
            var argumentExceptionBases = [-1, 3, 0, 16];
            this.verifyFromStringWithBaseThrows(System.ArgumentException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 7); }, argumentExceptionValues, argumentExceptionBases);
        },
        fromUInt16: function () {
            var testValues = [100, 0];
            var expectedValues = [100, 0];
            this.verifyViaObj(System.UInt16, function (value) { return System.Convert.toInt16(value); }, testValues, expectedValues);
    
            var overflowValues = [65535];
            this.verifyThrowsViaObj(System.OverflowException, System.UInt16, function (value) { return System.Convert.toInt16(value); }, overflowValues);
        },
        fromUInt32: function () {
            var testValues = [100, 0];
            var expectedValues = [100, 0];
            this.verifyViaObj(System.UInt32, function (value) { return System.Convert.toInt16(value); }, testValues, expectedValues);
    
            var overflowValues = [4294967295];
            this.verifyThrowsViaObj(System.OverflowException, System.UInt32, function (value) { return System.Convert.toInt16(value); }, overflowValues);
        },
        fromUInt64: function () {
            var testValues = [System.UInt64(100), System.UInt64(0)];
            var expectedValues = [100, 0];
            this.verifyViaObj(System.UInt64, function (value) { return System.Convert.toInt16(value); }, testValues, expectedValues);
    
            var overflowValues = [System.UInt64.MaxValue];
            this.verifyThrowsViaObj(System.OverflowException, System.UInt64, function (value) { return System.Convert.toInt16(value); }, overflowValues);
        }
    });
    
    Bridge.define('Bridge.ClientTest.ConvertTests.ConvertToInt32Tests', {
        inherits: [Bridge.ClientTest.ConvertTests.ConvertTestBase$1(System.Int32)],
        fromBoolean: function () {
            var testValues = [true, false];
            var expectedValues = [1, 0];
            this.verifyViaObj(Boolean, function (value) { return System.Convert.toInt32(value); }, testValues, expectedValues);
        },
        fromByte: function () {
            var testValues = [255, 0];
            var expectedValues = [255, 0];
            this.verifyViaObj(System.Byte, function (value) { return System.Convert.toInt32(value); }, testValues, expectedValues);
        },
        fromChar: function () {
            var testValues = [0, 65535, 98];
            var expectedValues = [0, 65535, 98];
            this.verifyViaObj(System.Char, function (value) { return System.Convert.toInt32(value); }, testValues, expectedValues);
        },
        fromDecimal: function () {
            var testValues = [System.Decimal(100.0), System.Decimal(-100.0), System.Decimal(0.0)];
            var expectedValues = [100, -100, 0];
            this.verifyViaObj(System.Decimal, function (value) { return System.Convert.toInt32(value); }, testValues, expectedValues);
    
            var overflowValues = [System.Decimal.MaxValue, System.Decimal.MinValue];
            this.verifyThrowsViaObj(System.OverflowException, System.Decimal, function (value) { return System.Convert.toInt32(value); }, overflowValues);
        },
        fromDouble: function () {
            var testValues = [100.0, -100.0, 0];
            var expectedValues = [100, -100, 0];
            this.verifyViaObj(System.Double, function (value) { return System.Convert.toInt32(value); }, testValues, expectedValues);
    
            var overflowValues = [System.Double.max, -System.Double.max];
            this.verifyThrowsViaObj(System.OverflowException, System.Double, function (value) { return System.Convert.toInt32(value); }, overflowValues);
        },
        fromInt16: function () {
            var testValues = [100, -100, 0];
            var expectedValues = [100, -100, 0];
            this.verifyViaObj(System.Int16, function (value) { return System.Convert.toInt32(value); }, testValues, expectedValues);
        },
        fromInt32: function () {
            var testValues = [2147483647, -2147483648, 0];
            var expectedValues = [2147483647, -2147483648, 0];
            this.verifyViaObj(System.Int32, function (value) { return System.Convert.toInt32(value); }, testValues, expectedValues);
        },
        fromInt64: function () {
            var testValues = [System.Int64(100), System.Int64(-100), System.Int64(0)];
            var expectedValues = [100, -100, 0];
            this.verifyViaObj(System.Int64, function (value) { return System.Convert.toInt32(value); }, testValues, expectedValues);
    
            var overflowValues = [System.Int64.MaxValue, System.Int64.MinValue];
            this.verifyThrowsViaObj(System.OverflowException, System.Int64, function (value) { return System.Convert.toInt32(value); }, overflowValues);
        },
        fromObject: function () {
            var testValues = [null];
            var expectedValues = [0];
            this.verifyFromObject(function (value) { return System.Convert.toInt32(value); }, function (value, provider) { return System.Convert.toInt32(value, provider); }, testValues, expectedValues);
    
            var invalidValues = [{ }];
            this.verifyFromObjectThrows(System.InvalidCastException, function (value) { return System.Convert.toInt32(value); }, function (value, provider) { return System.Convert.toInt32(value, provider); }, invalidValues);
        },
        fromSByte: function () {
            var testValues = [100, -100, 0];
            var expectedValues = [100, -100, 0];
            this.verifyViaObj(System.SByte, function (value) { return System.Convert.toInt32(value); }, testValues, expectedValues);
        },
        fromSingle: function () {
            var testValues = [100.0, -100.0, 0.0];
            var expectedValues = [100, -100, 0];
            this.verifyViaObj(System.Single, function (value) { return System.Convert.toInt32(value); }, testValues, expectedValues);
    
            var overflowValues = [3.40282347E+38, -3.40282347E+38];
            this.verifyThrowsViaObj(System.OverflowException, System.Single, function (value) { return System.Convert.toInt32(value); }, overflowValues);
        },
        fromString: function () {
            var intMinValue = -2147483648;
            var intMaxValue = 2147483647;
            var longMinValue = System.Int64.MinValue;
            var longMaxValue = System.Int64.MaxValue;
    
            var testValues = ["100", "-100", "0", intMinValue.toString(), intMaxValue.toString(), null];
            var expectedValues = [100, -100, 0, intMinValue, intMaxValue, 0];
            this.verifyFromString(function (value) { return System.Convert.toInt32(value); }, function (value, provider) { return System.Convert.toInt32(value, provider); }, testValues, expectedValues);
    
            var overflowValues = [longMinValue.toString(), longMaxValue.toString()];
            this.verifyFromStringThrows(System.OverflowException, function (value) { return System.Convert.toInt32(value); }, function (value, provider) { return System.Convert.toInt32(value, provider); }, overflowValues);
    
            var formatExceptionValues = ["abba"];
            this.verifyFromStringThrows(System.FormatException, function (value) { return System.Convert.toInt32(value); }, function (value, provider) { return System.Convert.toInt32(value, provider); }, formatExceptionValues);
        },
        fromStringWithBase: function () {
            var testValues = [null, null, null, null, Bridge.ClientTest.ConvertTests.ConvertConstants.INT32_MAX_STRING_BASE_16, (2147483647).toString(), Bridge.ClientTest.ConvertTests.ConvertConstants.INT32_MAX_STRING_BASE_8, Bridge.ClientTest.ConvertTests.ConvertConstants.INT32_MAX_STRING_BASE_2, Bridge.ClientTest.ConvertTests.ConvertConstants.INT32_MIN_STRING_BASE_16, (-2147483648).toString(), Bridge.ClientTest.ConvertTests.ConvertConstants.INT32_MIN_STRING_BASE_8, Bridge.ClientTest.ConvertTests.ConvertConstants.INT32_MIN_STRING_BASE_2];
            var testBases = [10, 2, 8, 16, 16, 10, 8, 2, 16, 10, 8, 2];
            var expectedValues = [0, 0, 0, 0, 2147483647, 2147483647, 2147483647, 2147483647, -2147483648, -2147483648, -2147483648, -2147483648];
            this.verifyFromStringWithBase(function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 9); }, testValues, testBases, expectedValues);
    
            var overflowValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.INT32_OVERFLOW_MAX_STRING, Bridge.ClientTest.ConvertTests.ConvertConstants.INT32_OVERFLOW_MIN_STRING, Bridge.ClientTest.ConvertTests.ConvertConstants.INT32_OVERFLOW_MAX_STRING_BASE_2, Bridge.ClientTest.ConvertTests.ConvertConstants.INT32_OVERFLOW_MAX_STRING_BASE_16, Bridge.ClientTest.ConvertTests.ConvertConstants.INT32_OVERFLOW_MAX_STRING_BASE_8];
            var overflowBases = [10, 10, 2, 16, 8];
            this.verifyFromStringWithBaseThrows(System.OverflowException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 9); }, overflowValues, overflowBases);
    
            var formatExceptionValues = ["12", "ffffffffffffffffffff"];
            var formatExceptionBases = [2, 8];
            this.verifyFromStringWithBaseThrows(System.FormatException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 9); }, formatExceptionValues, formatExceptionBases);
    
            var argumentExceptionValues = ["10", "11", "abba", "-ab"];
            var argumentExceptionBases = [-1, 3, 0, 16];
            this.verifyFromStringWithBaseThrows(System.ArgumentException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 9); }, argumentExceptionValues, argumentExceptionBases);
        },
        fromUInt16: function () {
            var testValues = [100, 0];
            var expectedValues = [100, 0];
            this.verifyViaObj(System.UInt16, function (value) { return System.Convert.toInt32(value); }, testValues, expectedValues);
        },
        fromUInt32: function () {
            var testValues = [100, 0];
            var expectedValues = [100, 0];
            this.verifyViaObj(System.UInt32, function (value) { return System.Convert.toInt32(value); }, testValues, expectedValues);
    
            var overflowValues = [4294967295];
            this.verifyThrowsViaObj(System.OverflowException, System.UInt32, function (value) { return System.Convert.toInt32(value); }, overflowValues);
        },
        fromUInt64: function () {
            var testValues = [System.UInt64(100), System.UInt64(0)];
            var expectedValues = [100, 0];
            this.verifyViaObj(System.UInt64, function (value) { return System.Convert.toInt32(value); }, testValues, expectedValues);
    
            var overflowValues = [System.UInt64.MaxValue];
            this.verifyThrowsViaObj(System.OverflowException, System.UInt64, function (value) { return System.Convert.toInt32(value); }, overflowValues);
        }
    });
    
    Bridge.define('Bridge.ClientTest.ConvertTests.ConvertToInt64Tests', {
        inherits: [Bridge.ClientTest.ConvertTests.ConvertTestBase$1(System.Int64)],
        fromBoolean: function () {
            var testValues = [true, false];
            var expectedValues = [System.Int64(1), System.Int64(0)];
            this.verifyViaObj(Boolean, function (value) { return System.Convert.toInt64(value); }, testValues, expectedValues);
        },
        fromByte: function () {
            var testValues = [255, 0];
            var expectedValues = [System.Int64(255), System.Int64(0)];
            this.verifyViaObj(System.Byte, function (value) { return System.Convert.toInt64(value); }, testValues, expectedValues);
        },
        fromChar: function () {
            var testValues = [65535, 0, 98];
            var expectedValues = [System.Int64(65535), System.Int64(0), System.Int64(98)];
            this.verifyViaObj(System.Char, function (value) { return System.Convert.toInt64(value); }, testValues, expectedValues);
        },
        fromDecimal: function () {
            var testValues = [System.Decimal(100.0), System.Decimal(-100.0), System.Decimal(0.0)];
            var expectedValues = [System.Int64(100), System.Int64(-100), System.Int64(0)];
            this.verifyViaObj(System.Decimal, function (value) { return System.Convert.toInt64(value); }, testValues, expectedValues);
    
            var overflowValues = [System.Decimal.MaxValue, System.Decimal.MinValue];
            this.verifyThrowsViaObj(System.OverflowException, System.Decimal, function (value) { return System.Convert.toInt64(value); }, overflowValues);
        },
        fromDouble: function () {
            var testValues = [100.0, -100.0, 0];
            var expectedValues = [System.Int64(100), System.Int64(-100), System.Int64(0)];
            this.verifyViaObj(System.Double, function (value) { return System.Convert.toInt64(value); }, testValues, expectedValues);
    
            var overflowValues = [System.Double.max, -System.Double.max];
            this.verifyThrowsViaObj(System.OverflowException, System.Double, function (value) { return System.Convert.toInt64(value); }, overflowValues);
        },
        fromInt16: function () {
            var testValues = [100, -100, 0];
            var expectedValues = [System.Int64(100), System.Int64(-100), System.Int64(0)];
            this.verifyViaObj(System.Int16, function (value) { return System.Convert.toInt64(value); }, testValues, expectedValues);
        },
        fromInt32: function () {
            var testValues = [2147483647, -2147483648, 0];
            var expectedValues = [System.Int64(2147483647), System.Int64(-2147483648), System.Int64(0)];
            this.verifyViaObj(System.Int32, function (value) { return System.Convert.toInt64(value); }, testValues, expectedValues);
        },
        fromInt64: function () {
            var testValues = [System.Int64.MaxValue, System.Int64.MinValue, System.Int64(0)];
            var expectedValues = [System.Int64.MaxValue, System.Int64.MinValue, System.Int64(0)];
            this.verifyViaObj(System.Int64, function (value) { return System.Convert.toInt64(value); }, testValues, expectedValues);
        },
        fromObject: function () {
            var testValues = [null];
            var expectedValues = [System.Int64(0)];
            this.verifyFromObject(function (value) { return System.Convert.toInt64(value); }, function (value, provider) { return System.Convert.toInt64(value, provider); }, testValues, expectedValues);
    
            var invalidValues = [{ }, new Date()];
            this.verifyFromObjectThrows(System.InvalidCastException, function (value) { return System.Convert.toInt64(value); }, function (value, provider) { return System.Convert.toInt64(value, provider); }, invalidValues);
        },
        fromSByte: function () {
            var testValues = [100, -100, 0];
            var expectedValues = [System.Int64(100), System.Int64(-100), System.Int64(0)];
            this.verifyViaObj(System.SByte, function (value) { return System.Convert.toInt64(value); }, testValues, expectedValues);
        },
        fromSingle: function () {
            var testValues = [100.0, -100.0, 0.0];
            var expectedValues = [System.Int64(100), System.Int64(-100), System.Int64(0)];
            this.verifyViaObj(System.Single, function (value) { return System.Convert.toInt64(value); }, testValues, expectedValues);
    
            var overflowValues = [3.40282347E+38, -3.40282347E+38];
            this.verifyThrowsViaObj(System.OverflowException, System.Single, function (value) { return System.Convert.toInt64(value); }, overflowValues);
        },
        fromString: function () {
            var longMinValue = System.Int64.MinValue;
            var longMaxValue = System.Int64.MaxValue;
    
            var testValues = ["100", "-100", "0", longMinValue.toString(), longMaxValue.toString(), null];
            var expectedValues = [System.Int64(100), System.Int64(-100), System.Int64(0), longMinValue, longMaxValue, System.Int64(0)];
            this.verifyFromString(function (value) { return System.Convert.toInt64(value); }, function (value, provider) { return System.Convert.toInt64(value, provider); }, testValues, expectedValues, true);
    
            var overflowValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.INT64_OVERFLOW_MAX_STRING, Bridge.ClientTest.ConvertTests.ConvertConstants.INT64_OVERFLOW_MIN_STRING];
            this.verifyFromStringThrows(System.OverflowException, function (value) { return System.Convert.toInt64(value); }, function (value, provider) { return System.Convert.toInt64(value, provider); }, overflowValues);
    
            var formatExceptionValues = ["abba"];
            this.verifyFromStringThrows(System.FormatException, function (value) { return System.Convert.toInt64(value); }, function (value, provider) { return System.Convert.toInt64(value, provider); }, formatExceptionValues);
        },
        fromStringWithBase: function () {
            var minSafeValue = System.Int64.MinValue;
            var maxSafeValue = System.Int64.MaxValue;
    
            var testValues = [null, null, null, null, Bridge.ClientTest.ConvertTests.ConvertConstants.INT64_MAX_STRING_BASE_16, maxSafeValue.toString(), Bridge.ClientTest.ConvertTests.ConvertConstants.INT64_MAX_STRING_BASE_8, Bridge.ClientTest.ConvertTests.ConvertConstants.INT64_MAX_STRING_BASE_2, Bridge.ClientTest.ConvertTests.ConvertConstants.INT64_MIN_STRING_BASE_16, minSafeValue.toString(), Bridge.ClientTest.ConvertTests.ConvertConstants.INT64_MIN_STRING_BASE_8, Bridge.ClientTest.ConvertTests.ConvertConstants.INT64_MIN_STRING_BASE_2];
            var testBases = [10, 2, 8, 16, 16, 10, 8, 2, 16, 10, 8, 2];
            var expectedValues = [System.Int64(0), System.Int64(0), System.Int64(0), System.Int64(0), maxSafeValue, maxSafeValue, maxSafeValue, maxSafeValue, minSafeValue, minSafeValue, minSafeValue, minSafeValue];
            this.verifyFromStringWithBase(function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 11); }, testValues, testBases, expectedValues, true);
    
            var overflowValues = ["FFE0000000000001", "1777400000000000000001", "1111111111100000000000000000000000000000000000000000000000000001", "9223372036854775808", "-9223372036854775809", "11111111111111111111111111111111111111111111111111111111111111111", "1FFFFffffFFFFffff", "7777777777777777777777777"];
            var overflowBases = [16, 8, 2, 10, 10, 2, 16, 8];
            this.verifyFromStringWithBaseThrows(System.OverflowException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 11); }, overflowValues, overflowBases);
    
            var formatExceptionValues = ["12", "ffffffffffffffffffff"];
            var formatExceptionBases = [2, 8];
            this.verifyFromStringWithBaseThrows(System.FormatException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 11); }, formatExceptionValues, formatExceptionBases);
    
            var argumentExceptionValues = ["10", "11", "abba", "-ab"];
            var argumentExceptionBases = [-1, 3, 0, 16];
            this.verifyFromStringWithBaseThrows(System.ArgumentException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 11); }, argumentExceptionValues, argumentExceptionBases);
        },
        fromUInt16: function () {
            var testValues = [100, 0];
            var expectedValues = [System.Int64(100), System.Int64(0)];
            this.verifyViaObj(System.UInt16, function (value) { return System.Convert.toInt64(value); }, testValues, expectedValues);
        },
        fromUInt32: function () {
            var testValues = [100, 0];
            var expectedValues = [System.Int64(100), System.Int64(0)];
            this.verifyViaObj(System.UInt32, function (value) { return System.Convert.toInt64(value); }, testValues, expectedValues);
        },
        fromUInt64: function () {
            var testValues = [System.UInt64(100), System.UInt64(0)];
            var expectedValues = [System.Int64(100), System.Int64(0)];
            this.verifyViaObj(System.UInt64, function (value) { return System.Convert.toInt64(value); }, testValues, expectedValues);
    
            var overflowValues = [System.UInt64([0,-2147483648])];
            this.verifyThrowsViaObj(System.OverflowException, System.UInt64, function (value) { return System.Convert.toInt64(value); }, overflowValues);
        }
    });
    
    Bridge.define('Bridge.ClientTest.ConvertTests.ConvertToSByteTests', {
        inherits: [Bridge.ClientTest.ConvertTests.ConvertTestBase$1(System.SByte)],
        fromBoolean: function () {
            var testValues = [true, false];
            var expectedValues = [1, 0];
            this.verifyViaObj(Boolean, function (value) { return System.Convert.toSByte(value); }, testValues, expectedValues);
        },
        fromByte: function () {
            var testValues = [100, 0];
            var expectedValues = [100, 0];
            this.verifyViaObj(System.Byte, function (value) { return System.Convert.toSByte(value); }, testValues, expectedValues);
    
            var overflowValues = [255];
            this.verifyThrowsViaObj(System.OverflowException, System.Byte, function (value) { return System.Convert.toSByte(value); }, overflowValues);
        },
        fromChar: function () {
            var testValues = [65, 0];
            var expectedValues = [65, 0];
            this.verifyViaObj(System.Char, function (value) { return System.Convert.toSByte(value); }, testValues, expectedValues);
        },
        fromDecimal: function () {
            var testValues = [System.Decimal(100.0), System.Decimal(-100.0), System.Decimal(0.0)];
            var expectedValues = [100, -100, 0];
            this.verifyViaObj(System.Decimal, function (value) { return System.Convert.toSByte(value); }, testValues, expectedValues);
    
            var overflowValues = [System.Decimal.MaxValue, System.Decimal.MinValue];
            this.verifyThrowsViaObj(System.OverflowException, System.Decimal, function (value) { return System.Convert.toSByte(value); }, overflowValues);
        },
        fromDouble: function () {
            var testValues = [100.0, -100.0, 0];
            var expectedValues = [100, -100, 0];
            this.verifyViaObj(System.Double, function (value) { return System.Convert.toSByte(value); }, testValues, expectedValues);
    
            var overflowValues = [System.Double.max, -System.Double.max];
            this.verifyThrowsViaObj(System.OverflowException, System.Double, function (value) { return System.Convert.toSByte(value); }, overflowValues);
        },
        fromInt16: function () {
            var testValues = [100, -100, 0];
            var expectedValues = [100, -100, 0];
            this.verifyViaObj(System.Int16, function (value) { return System.Convert.toSByte(value); }, testValues, expectedValues);
    
            var overflowValues = [System.Int64.MaxValue, System.Int64.MinValue];
            this.verifyThrowsViaObj(System.OverflowException, System.Int64, function (value) { return System.Convert.toSByte(value); }, overflowValues);
        },
        fromInt32: function () {
            var testValues = [100, -100, 0];
            var expectedValues = [100, -100, 0];
            this.verifyViaObj(System.Int32, function (value) { return System.Convert.toSByte(value); }, testValues, expectedValues);
    
            var overflowValues = [2147483647, -2147483648];
            this.verifyThrowsViaObj(System.OverflowException, System.Int32, function (value) { return System.Convert.toSByte(value); }, overflowValues);
        },
        fromInt64: function () {
            var testValues = [System.Int64(100), System.Int64(-100), System.Int64(0)];
            var expectedValues = [100, -100, 0];
            this.verifyViaObj(System.Int64, function (value) { return System.Convert.toSByte(value); }, testValues, expectedValues);
    
            var overflowValues = [System.Int64.MaxValue, System.Int64.MinValue];
            this.verifyThrowsViaObj(System.OverflowException, System.Int64, function (value) { return System.Convert.toSByte(value); }, overflowValues);
        },
        fromObject: function () {
            var testValues = [null];
            var expectedValues = [0];
            this.verifyFromObject(function (value) { return System.Convert.toSByte(value); }, function (value, provider) { return System.Convert.toSByte(value, provider); }, testValues, expectedValues);
    
            var invalidValues = [{ }, new Date()];
            this.verifyFromObjectThrows(System.InvalidCastException, function (value) { return System.Convert.toSByte(value); }, function (value, provider) { return System.Convert.toSByte(value, provider); }, invalidValues);
        },
        fromSByte: function () {
            var testValues = [127, -128];
            var expectedValues = [127, -128];
            this.verifyViaObj(System.SByte, function (value) { return System.Convert.toSByte(value); }, testValues, expectedValues);
        },
        fromSingle: function () {
            var testValues = [100.0, -100.0, 0.0];
            var expectedValues = [100, -100, 0];
            this.verifyViaObj(System.Single, function (value) { return System.Convert.toSByte(value); }, testValues, expectedValues);
    
            var overflowValues = [3.40282347E+38, -3.40282347E+38];
            this.verifyThrowsViaObj(System.OverflowException, System.Single, function (value) { return System.Convert.toSByte(value); }, overflowValues);
        },
        fromString: function () {
            var sbyteMinValue = -128;
            var sbyteMaxValue = 127;
            var shortMinValue = -32768;
            var shortMaxValue = 32767;
    
            var testValues = ["100", "-100", "0", sbyteMinValue.toString(), sbyteMaxValue.toString()];
            var expectedValues = [100, -100, 0, sbyteMinValue, sbyteMaxValue];
            this.verifyFromString(function (value) { return System.Convert.toSByte(value, null, 18); }, function (value, provider) { return System.Convert.toSByte(value, provider, 18); }, testValues, expectedValues);
    
            var overflowValues = [shortMinValue.toString(), shortMaxValue.toString()];
            this.verifyFromStringThrows(System.OverflowException, function (value) { return System.Convert.toSByte(value, null, 18); }, function (value, provider) { return System.Convert.toSByte(value, provider, 18); }, overflowValues);
    
            var formatExceptionValues = ["abba"];
            this.verifyFromStringThrows(System.FormatException, function (value) { return System.Convert.toSByte(value, null, 18); }, function (value, provider) { return System.Convert.toSByte(value, provider, 18); }, formatExceptionValues);
    
            // Note: Only the Convert.ToSByte(String, IFormatProvider) overload throws an ArgumentNullException.
            // This is inconsistent with the other numeric conversions, but fixing this behavior is not worth making
            // a breaking change which will affect the desktop CLR.
            this.verifyThrows(System.ArgumentNullException, String, $_.Bridge.ClientTest.ConvertTests.ConvertToSByteTests.f1, [null]);
        },
        fromStringWithBase: function () {
            var testValues = [null, null, null, null, Bridge.ClientTest.ConvertTests.ConvertConstants.INT8_MAX_STRING_BASE_16, (127).toString(), Bridge.ClientTest.ConvertTests.ConvertConstants.INT8_MAX_STRING_BASE_8, Bridge.ClientTest.ConvertTests.ConvertConstants.INT8_MAX_STRING_BASE_2, Bridge.ClientTest.ConvertTests.ConvertConstants.INT8_MIN_STRING_BASE_16, (-128).toString(), Bridge.ClientTest.ConvertTests.ConvertConstants.INT8_MIN_STRING_BASE_8, Bridge.ClientTest.ConvertTests.ConvertConstants.INT8_MIN_STRING_BASE_2];
            var testBases = [10, 2, 8, 16, 16, 10, 8, 2, 16, 10, 8, 2];
            var expectedValues = [0, 0, 0, 0, 127, 127, 127, 127, -128, -128, -128, -128];
            this.verifyFromStringWithBase(function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 5); }, testValues, testBases, expectedValues);
    
            var overflowValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.INT8_OVERFLOW_MAX_STRING, Bridge.ClientTest.ConvertTests.ConvertConstants.INT8_OVERFLOW_MIN_STRING, Bridge.ClientTest.ConvertTests.ConvertConstants.INT8_OVERFLOW_MAX_STRING_BASE_2, Bridge.ClientTest.ConvertTests.ConvertConstants.INT8_OVERFLOW_MAX_STRING_BASE_16, Bridge.ClientTest.ConvertTests.ConvertConstants.INT8_OVERFLOW_MAX_STRING_BASE_8];
            var overflowBases = [10, 10, 2, 16, 8];
            this.verifyFromStringWithBaseThrows(System.OverflowException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 5); }, overflowValues, overflowBases);
    
            var formatExceptionValues = ["12", "ffffffffffffffffffff"];
            var formatExceptionBases = [2, 8];
            this.verifyFromStringWithBaseThrows(System.FormatException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 5); }, formatExceptionValues, formatExceptionBases);
    
            var argumentExceptionValues = ["10", "11", "abba", "-ab"];
            var argumentExceptionBases = [-1, 3, 0, 16];
            this.verifyFromStringWithBaseThrows(System.ArgumentException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 5); }, argumentExceptionValues, argumentExceptionBases);
        },
        fromUInt16: function () {
            var testValues = [100, 0];
            var expectedValues = [100, 0];
            this.verifyViaObj(System.UInt16, function (value) { return System.Convert.toSByte(value); }, testValues, expectedValues);
    
            var overflowValues = [65535];
            this.verifyThrowsViaObj(System.OverflowException, System.UInt16, function (value) { return System.Convert.toSByte(value); }, overflowValues);
        },
        fromUInt32: function () {
            var testValues = [100, 0];
            var expectedValues = [100, 0];
            this.verifyViaObj(System.UInt32, function (value) { return System.Convert.toSByte(value); }, testValues, expectedValues);
    
            var overflowValues = [4294967295];
            this.verifyThrowsViaObj(System.OverflowException, System.UInt32, function (value) { return System.Convert.toSByte(value); }, overflowValues);
        },
        fromUInt64: function () {
            var testValues = [System.UInt64(100), System.UInt64(0)];
            var expectedValues = [100, 0];
            this.verifyViaObj(System.UInt64, function (value) { return System.Convert.toSByte(value); }, testValues, expectedValues);
    
            var overflowValues = [System.UInt64.MaxValue];
            this.verifyThrowsViaObj(System.OverflowException, System.UInt64, function (value) { return System.Convert.toSByte(value); }, overflowValues);
        }
    });
    
    Bridge.ns("Bridge.ClientTest.ConvertTests.ConvertToSByteTests", $_);
    
    Bridge.apply($_.Bridge.ClientTest.ConvertTests.ConvertToSByteTests, {
        f1: function (input) {
            return System.Convert.toSByte(input, Bridge.ClientTest.ConvertTests.ConvertTestBase$1.TestFormatProvider(System.SByte).s_instance, 18);
        }
    });
    
    Bridge.define('Bridge.ClientTest.ConvertTests.ConvertToSingleTests', {
        inherits: [Bridge.ClientTest.ConvertTests.ConvertTestBase$1(System.Single)],
        fromBoolean: function () {
            var testValues = [false, true];
            var expectedValues = [0.0, 1.0];
            this.verifyViaObj(Boolean, function (value) { return System.Convert.toSingle(value); }, testValues, expectedValues);
        },
        fromByte: function () {
            var testValues = [255, 0];
            var expectedValues = [255, 0];
            this.verifyViaObj(System.Byte, function (value) { return System.Convert.toSingle(value); }, testValues, expectedValues);
        },
        fromDecimal: function () {
            var testValues = [System.Decimal(1000.0), System.Decimal(0.0), System.Decimal(-1000.0), System.Decimal.MaxValue, System.Decimal.MinValue];
            var expectedValues = [1000.0, 0.0, -1000.0, System.Decimal.toFloat(System.Decimal.MaxValue), System.Decimal.toFloat(System.Decimal.MinValue)];
            this.verifyViaObj(System.Decimal, function (value) { return System.Convert.toSingle(value); }, testValues, expectedValues);
        },
        fromDouble: function () {
            var testValues = [1000.0, 100.0, 0.0, -100.0, -1000.0, System.Double.max, -System.Double.max];
            var expectedValues = [1000.0, 100.0, 0.0, -100.0, -1000.0, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY];
            this.verifyViaObj(System.Double, function (value) { return System.Convert.toSingle(value); }, testValues, expectedValues);
        },
        fromInt16: function () {
            var testValues = [32767, -32768, 0];
            var expectedValues = [32767, -32768, 0.0];
            this.verifyViaObj(System.Int16, function (value) { return System.Convert.toSingle(value); }, testValues, expectedValues);
        },
        fromInt32: function () {
            var testValues = [2147483647, -2147483648, 0];
            var expectedValues = [2147483647, -2147483648, 0.0];
            this.verifyViaObj(System.Int32, function (value) { return System.Convert.toSingle(value); }, testValues, expectedValues);
        },
        fromInt64: function () {
            var testValues = [System.Int64.MaxValue, System.Int64.MinValue, System.Int64(0)];
            var expectedValues = [System.Int64.toNumber(System.Int64.MaxValue), System.Int64.toNumber(System.Int64.MinValue), 0.0];
            this.verifyViaObj(System.Int64, function (value) { return System.Convert.toSingle(value); }, testValues, expectedValues);
        },
        fromObject: function () {
            var testValues = [null];
            var expectedValues = [0.0];
            this.verifyFromObject(function (value) { return System.Convert.toSingle(value); }, function (value, provider) { return System.Convert.toSingle(value, provider); }, testValues, expectedValues);
    
            var invalidValues = [{ }, new Date()];
            this.verifyFromObjectThrows(System.InvalidCastException, function (value) { return System.Convert.toSingle(value); }, function (value, provider) { return System.Convert.toSingle(value, provider); }, invalidValues);
        },
        fromSByte: function () {
            var testValues = [100, -100, 0];
            var expectedValues = [100.0, -100.0, 0.0];
            this.verifyViaObj(System.SByte, function (value) { return System.Convert.toSingle(value); }, testValues, expectedValues);
        },
        fromSingle: function () {
            var testValues = [3.40282347E+38, -3.40282347E+38, Number(), Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, 1.401298E-45];
            var expectedValues = [3.40282347E+38, -3.40282347E+38, Number(), Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY, 1.401298E-45];
            this.verifyViaObj(System.Single, function (value) { return System.Convert.toSingle(value); }, testValues, expectedValues);
        },
        fromString: function () {
            var testValues = [System.Single.format(3.40282347E+38, "R"), System.Single.format((0.0), 'G'), System.Single.format(-3.40282347E+38, "R"), null];
            var expectedValues = [3.40282347E+38, 0.0, -3.40282347E+38, 0.0];
            this.verifyFromString(function (value) { return System.Convert.toSingle(value); }, function (value, provider) { return System.Convert.toSingle(value, provider); }, testValues, expectedValues);
    
            var doubleMaxValue = System.Double.max;
            var doubleMinValue = -System.Double.max;
            var overflowValues = [System.Double.format(doubleMinValue, "R"), System.Double.format(doubleMaxValue, "R")];
            this.verifyFromStringThrows(System.OverflowException, function (value) { return System.Convert.toSingle(value); }, function (value, provider) { return System.Convert.toSingle(value, provider); }, overflowValues);
    
            var formatExceptionValues = ["1f2d"];
            this.verifyFromStringThrows(System.FormatException, function (value) { return System.Convert.toSingle(value); }, function (value, provider) { return System.Convert.toSingle(value, provider); }, formatExceptionValues);
        },
        fromUInt16: function () {
            var testValues = [65535, 0];
            var expectedValues = [65535, 0];
            this.verifyViaObj(System.UInt16, function (value) { return System.Convert.toSingle(value); }, testValues, expectedValues);
        },
        fromUInt32: function () {
            var testValues = [4294967295, 0];
            var expectedValues = [4294967295, 0];
            this.verifyViaObj(System.UInt32, function (value) { return System.Convert.toSingle(value); }, testValues, expectedValues);
        },
        fromUInt64: function () {
            var testValues = [System.UInt64.MaxValue, System.UInt64.MinValue];
            var expectedValues = [System.Int64.toNumber(System.UInt64.MaxValue), System.Int64.toNumber(System.UInt64.MinValue)];
            this.verifyViaObj(System.UInt64, function (value) { return System.Convert.toSingle(value); }, testValues, expectedValues);
        }
    });
    
    Bridge.define('Bridge.ClientTest.ConvertTests.ConvertToUInt16Tests', {
        inherits: [Bridge.ClientTest.ConvertTests.ConvertTestBase$1(System.UInt16)],
        fromBoolean: function () {
            var testValues = [true, false];
            var expectedValues = [1, 0];
            this.verifyViaObj(Boolean, function (value) { return System.Convert.toUInt16(value); }, testValues, expectedValues);
        },
        fromByte: function () {
            var testValues = [255, 0];
            var expectedValues = [255, 0];
            this.verifyViaObj(System.Byte, function (value) { return System.Convert.toUInt16(value); }, testValues, expectedValues);
        },
        fromChar: function () {
            var testValues = [65535, 0, 98];
            var expectedValues = [65535, 0, 98];
            this.verifyViaObj(System.Char, function (value) { return System.Convert.toUInt16(value); }, testValues, expectedValues);
        },
        fromDecimal: function () {
            var testValues = [System.Decimal(1000.0), System.Decimal(0.0)];
            var expectedValues = [1000, 0];
            this.verifyViaObj(System.Decimal, function (value) { return System.Convert.toUInt16(value); }, testValues, expectedValues);
    
            var overflowValues = [System.Decimal.MaxValue, System.Decimal.MinValue];
            this.verifyThrowsViaObj(System.OverflowException, System.Decimal, function (value) { return System.Convert.toUInt16(value); }, overflowValues);
        },
        fromDouble: function () {
            var testValues = [1000.0, 0.0];
            var expectedValues = [1000, 0];
            this.verifyViaObj(System.Double, function (value) { return System.Convert.toUInt16(value); }, testValues, expectedValues);
    
            var overflowValues = [System.Double.max, -100.0];
            this.verifyThrowsViaObj(System.OverflowException, System.Double, function (value) { return System.Convert.toUInt16(value); }, overflowValues);
        },
        fromInt16: function () {
            var testValues = [1000, 0, 32767];
            var expectedValues = [1000, 0, 32767];
            this.verifyViaObj(System.Int16, function (value) { return System.Convert.toUInt16(value); }, testValues, expectedValues);
    
            var overflowValues = [-32768];
            this.verifyThrowsViaObj(System.OverflowException, System.Int16, function (value) { return System.Convert.toUInt16(value); }, overflowValues);
        },
        fromInt32: function () {
            var testValues = [1000, 0];
            var expectedValues = [1000, 0];
            this.verifyViaObj(System.Int32, function (value) { return System.Convert.toUInt16(value); }, testValues, expectedValues);
    
            var overflowValues = [-2147483648, 2147483647];
            this.verifyThrowsViaObj(System.OverflowException, System.Int32, function (value) { return System.Convert.toUInt16(value); }, overflowValues);
        },
        fromInt64: function () {
            var testValues = [System.Int64(1000), System.Int64(0)];
            var expectedValues = [1000, 0];
            this.verifyViaObj(System.Int64, function (value) { return System.Convert.toUInt16(value); }, testValues, expectedValues);
    
            var overflowValues = [System.Int64.MinValue, System.Int64.MaxValue];
            this.verifyThrowsViaObj(System.OverflowException, System.Int64, function (value) { return System.Convert.toUInt16(value); }, overflowValues);
        },
        fromObject: function () {
            var testValues = [null];
            var expectedValues = [0];
            this.verifyFromObject(function (value) { return System.Convert.toUInt16(value); }, function (value, provider) { return System.Convert.toUInt16(value, provider); }, testValues, expectedValues);
    
            var invalidValues = [{ }, new Date()];
            this.verifyFromObjectThrows(System.InvalidCastException, function (value) { return System.Convert.toUInt16(value); }, function (value, provider) { return System.Convert.toUInt16(value, provider); }, invalidValues);
        },
        fromSByte: function () {
            var testValues = [100, 0];
            var expectedValues = [100, 0];
            this.verifyViaObj(System.SByte, function (value) { return System.Convert.toUInt16(value); }, testValues, expectedValues);
    
            var values = [-128];
            this.verifyThrowsViaObj(System.OverflowException, System.SByte, function (value) { return System.Convert.toUInt16(value); }, values);
        },
        fromSingle: function () {
            var testValues = [1000.0, 0.0];
            var expectedValues = [1000, 0];
            this.verifyViaObj(System.Single, function (value) { return System.Convert.toUInt16(value); }, testValues, expectedValues);
    
            var values = [3.40282347E+38, -100.0];
            this.verifyThrowsViaObj(System.OverflowException, System.Single, function (value) { return System.Convert.toUInt16(value); }, values);
        },
        fromString: function () {
            var ushortMaxValue = 65535;
    
            var testValues = ["1000", (0).toString(), ushortMaxValue.toString(), null];
            var expectedValues = [1000, 0, ushortMaxValue, 0];
            this.verifyFromString(function (value) { return System.Convert.toUInt16(value); }, function (value, provider) { return System.Convert.toUInt16(value, provider); }, testValues, expectedValues);
    
            var overflowValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.UINT16_OVERFLOW_MIN_STRING, System.Decimal.MaxValue.toFixed(0, 4)];
            this.verifyFromStringThrows(System.OverflowException, function (value) { return System.Convert.toUInt16(value); }, function (value, provider) { return System.Convert.toUInt16(value, provider); }, overflowValues);
    
            var formatExceptionValues = ["abba"];
            this.verifyFromStringThrows(System.FormatException, function (value) { return System.Convert.toUInt16(value); }, function (value, provider) { return System.Convert.toUInt16(value, provider); }, formatExceptionValues);
        },
        fromStringWithBase: function () {
            var testValues = [null, null, null, null, Bridge.ClientTest.ConvertTests.ConvertConstants.UINT16_MAX_STRING_BASE_16, (65535).toString(), Bridge.ClientTest.ConvertTests.ConvertConstants.UINT16_MAX_STRING_BASE_8, Bridge.ClientTest.ConvertTests.ConvertConstants.UINT16_MAX_STRING_BASE_2, (0).toString(), (0).toString(), (0).toString(), (0).toString()];
            var testBases = [10, 2, 8, 16, 16, 10, 8, 2, 16, 10, 8, 2];
            var expectedValues = [0, 0, 0, 0, 65535, 65535, 65535, 65535, 0, 0, 0, 0];
            this.verifyFromStringWithBase(function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 8); }, testValues, testBases, expectedValues);
    
            var overflowValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.UINT16_OVERFLOW_MAX_STRING, Bridge.ClientTest.ConvertTests.ConvertConstants.UINT16_OVERFLOW_MIN_STRING, Bridge.ClientTest.ConvertTests.ConvertConstants.UINT16_OVERFLOW_MAX_STRING_BASE_2, Bridge.ClientTest.ConvertTests.ConvertConstants.UINT16_OVERFLOW_MAX_STRING_BASE_16, Bridge.ClientTest.ConvertTests.ConvertConstants.UINT16_OVERFLOW_MAX_STRING_BASE_8];
            var overflowBases = [10, 10, 2, 16, 8];
            this.verifyFromStringWithBaseThrows(System.OverflowException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 8); }, overflowValues, overflowBases);
    
            var formatExceptionValues = ["12", "ffffffffffffffffffff"];
            var formatExceptionBases = [2, 8];
            this.verifyFromStringWithBaseThrows(System.FormatException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 8); }, formatExceptionValues, formatExceptionBases);
    
            var argumentExceptionValues = ["10", "11", "abba", "-ab"];
            var argumentExceptionBases = [-1, 3, 0, 16];
            this.verifyFromStringWithBaseThrows(System.ArgumentException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 8); }, argumentExceptionValues, argumentExceptionBases);
        },
        fromUInt16: function () {
            var testValues = [65535, 0];
            var expectedValues = [65535, 0];
            this.verifyViaObj(System.UInt16, function (value) { return System.Convert.toUInt16(value); }, testValues, expectedValues);
        },
        fromUInt32: function () {
            var testValues = [100, 0];
            var expectedValues = [100, 0];
            this.verifyViaObj(System.UInt32, function (value) { return System.Convert.toUInt16(value); }, testValues, expectedValues);
    
            var overflowValues = [4294967295];
            this.verifyThrowsViaObj(System.OverflowException, System.UInt32, function (value) { return System.Convert.toUInt16(value); }, overflowValues);
        },
        fromUInt64: function () {
            var testValues = [System.UInt64(100), System.UInt64(0)];
            var expectedValues = [100, 0];
            this.verifyViaObj(System.UInt64, function (value) { return System.Convert.toUInt16(value); }, testValues, expectedValues);
    
            var overflowValues = [System.UInt64.MaxValue];
            this.verifyThrowsViaObj(System.OverflowException, System.UInt64, function (value) { return System.Convert.toUInt16(value); }, overflowValues);
        }
    });
    
    Bridge.define('Bridge.ClientTest.ConvertTests.ConvertToUInt32Tests', {
        inherits: [Bridge.ClientTest.ConvertTests.ConvertTestBase$1(System.UInt32)],
        fromBoolean: function () {
            var testValues = [true, false];
            var expectedValues = [1, 0];
            this.verifyViaObj(Boolean, function (value) { return System.Convert.toUInt32(value); }, testValues, expectedValues);
        },
        fromByte: function () {
            var testValues = [255, 0];
            var expectedValues = [255, 0];
            this.verifyViaObj(System.Byte, function (value) { return System.Convert.toUInt32(value); }, testValues, expectedValues);
        },
        fromChar: function () {
            var testValues = [0, 65535, 98];
            var expectedValues = [0, 65535, 98];
            this.verifyViaObj(System.Char, function (value) { return System.Convert.toUInt32(value); }, testValues, expectedValues);
        },
        fromDecimal: function () {
            var testValues = [System.Decimal(1000.0), System.Decimal(0.0)];
            var expectedValues = [1000, 0];
            this.verifyViaObj(System.Decimal, function (value) { return System.Convert.toUInt32(value); }, testValues, expectedValues);
    
            var overflowValues = [System.Decimal.MaxValue, System.Decimal.MinValue];
            this.verifyThrowsViaObj(System.OverflowException, System.Decimal, function (value) { return System.Convert.toUInt32(value); }, overflowValues);
        },
        fromDouble: function () {
            var testValues = [1000.0, 0.0, -0.5, 4294967295.49999, 472.2, 472.6, 472.5, 471.5];
            var expectedValues = [1000, 0, 0, 4294967295, 472, 473, 472, 472];
            this.verifyViaObj(System.Double, function (value) { return System.Convert.toUInt32(value); }, testValues, expectedValues);
    
            var overflowValues = [System.Double.max, -0.500000000001, -100.0, System.Int64.toNumber(System.Int64([0,1])), 4294967295.5];
            this.verifyThrowsViaObj(System.OverflowException, System.Double, function (value) { return System.Convert.toUInt32(value); }, overflowValues);
        },
        fromInt16: function () {
            var testValues = [1000, 0, 32767];
            var expectedValues = [1000, 0, 32767];
            this.verifyViaObj(System.Int16, function (value) { return System.Convert.toUInt32(value); }, testValues, expectedValues);
    
            var overflowValues = [-32768];
            this.verifyThrowsViaObj(System.OverflowException, System.Int16, function (value) { return System.Convert.toUInt32(value); }, overflowValues);
        },
        fromInt32: function () {
            var testValues = [1000, 0, 2147483647];
            var expectedValues = [1000, 0, 2147483647];
            this.verifyViaObj(System.Int32, function (value) { return System.Convert.toUInt32(value); }, testValues, expectedValues);
    
            var overflowValues = [-2147483648];
            this.verifyThrowsViaObj(System.OverflowException, System.Int32, function (value) { return System.Convert.toUInt32(value); }, overflowValues);
        },
        fromInt64: function () {
            var testValues = [System.Int64(1000), System.Int64(0)];
            var expectedValues = [1000, 0];
            this.verifyViaObj(System.Int64, function (value) { return System.Convert.toUInt32(value); }, testValues, expectedValues);
    
            var overflowValues = [System.Int64.MaxValue, System.Int64.MinValue];
            this.verifyThrowsViaObj(System.OverflowException, System.Int64, function (value) { return System.Convert.toUInt32(value); }, overflowValues);
        },
        fromObject: function () {
            var testValues = [null];
            var expectedValues = [0];
            this.verifyFromObject(function (value) { return System.Convert.toUInt32(value); }, function (value, provider) { return System.Convert.toUInt32(value, provider); }, testValues, expectedValues);
    
            var invalidValues = [{ }, new Date()];
            this.verifyFromObjectThrows(System.InvalidCastException, function (value) { return System.Convert.toUInt32(value); }, function (value, provider) { return System.Convert.toUInt32(value, provider); }, invalidValues);
        },
        fromSByte: function () {
            var testValues = [100, 0];
            var expectedValues = [100, 0];
            this.verifyViaObj(System.SByte, function (value) { return System.Convert.toUInt32(value); }, testValues, expectedValues);
    
            var overflowValues = [-128];
            this.verifyThrowsViaObj(System.OverflowException, System.SByte, function (value) { return System.Convert.toUInt32(value); }, overflowValues);
        },
        fromSingle: function () {
            var testValues = [1000.0, 0.0];
            var expectedValues = [1000, 0];
            this.verifyViaObj(System.Single, function (value) { return System.Convert.toUInt32(value); }, testValues, expectedValues);
    
            var overflowValues = [3.40282347E+38, -100.0];
            this.verifyThrowsViaObj(System.OverflowException, System.Single, function (value) { return System.Convert.toUInt32(value); }, overflowValues);
        },
        fromString: function () {
            var ushortMaxValue = 65535;
            var intMaxValue = 2147483647;
            var uintMaxValue = 4294967295;
    
            var testValues = ["1000", "0", ushortMaxValue.toString(), uintMaxValue.toString(), intMaxValue.toString(), "2147483648", "2147483649", null];
            var expectedValues = [1000, 0, 65535, 4294967295, 2147483647, 2147483648, 2147483649, 0];
            this.verifyFromString(function (value) { return System.Convert.toUInt32(value); }, function (value, provider) { return System.Convert.toUInt32(value, provider); }, testValues, expectedValues);
    
            var overflowValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.UINT32_OVERFLOW_MIN_STRING, System.Decimal.MaxValue.toFixed(0, 4)];
            this.verifyFromStringThrows(System.OverflowException, function (value) { return System.Convert.toUInt32(value); }, function (value, provider) { return System.Convert.toUInt32(value, provider); }, overflowValues);
    
            var formatExceptionValues = ["abba"];
            this.verifyFromStringThrows(System.FormatException, function (value) { return System.Convert.toUInt32(value); }, function (value, provider) { return System.Convert.toUInt32(value, provider); }, formatExceptionValues);
        },
        fromStringWithBase: function () {
            var testValues = [null, null, null, null, Bridge.ClientTest.ConvertTests.ConvertConstants.UINT32_MAX_STRING_BASE_16, (4294967295).toString(), Bridge.ClientTest.ConvertTests.ConvertConstants.UINT32_MAX_STRING_BASE_8, Bridge.ClientTest.ConvertTests.ConvertConstants.UINT32_MAX_STRING_BASE_2, "0", "0", "0", "0", "2147483647", "2147483648", "2147483649"];
            var testBases = [10, 2, 8, 16, 16, 10, 8, 2, 16, 10, 8, 2, 10, 10, 10];
            var expectedValues = [0, 0, 0, 0, 4294967295, 4294967295, 4294967295, 4294967295, 0, 0, 0, 0, 2147483647, 2147483648, 2147483649];
            this.verifyFromStringWithBase(function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 10); }, testValues, testBases, expectedValues);
    
            var overflowValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.UINT32_OVERFLOW_MAX_STRING, Bridge.ClientTest.ConvertTests.ConvertConstants.UINT32_OVERFLOW_MIN_STRING, "18446744073709551618", "18446744073709551619", "18446744073709551620", "-4294967297", Bridge.ClientTest.ConvertTests.ConvertConstants.UINT32_OVERFLOW_MAX_STRING_BASE_2, Bridge.ClientTest.ConvertTests.ConvertConstants.UINT32_OVERFLOW_MAX_STRING_BASE_16, Bridge.ClientTest.ConvertTests.ConvertConstants.UINT32_OVERFLOW_MAX_STRING_BASE_8];
            var overflowBases = [10, 10, 10, 10, 10, 10, 2, 16, 8];
            this.verifyFromStringWithBaseThrows(System.OverflowException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 10); }, overflowValues, overflowBases);
    
            var formatExceptionValues = ["12", "ffffffffffffffffffff"];
            var formatExceptionBases = [2, 8];
            this.verifyFromStringWithBaseThrows(System.FormatException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 10); }, formatExceptionValues, formatExceptionBases);
    
            var argumentExceptionValues = ["10", "11", "abba", "-ab"];
            var argumentExceptionBases = [-1, 3, 0, 16];
            this.verifyFromStringWithBaseThrows(System.ArgumentException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 10); }, argumentExceptionValues, argumentExceptionBases);
        },
        fromUInt16: function () {
            var testValues = [100, 0];
            var expectedValues = [100, 0];
            this.verifyViaObj(System.UInt16, function (value) { return System.Convert.toUInt32(value); }, testValues, expectedValues);
        },
        fromUInt32: function () {
            var testValues = [4294967295, 0];
            var expectedValues = [4294967295, 0];
            this.verifyViaObj(System.UInt32, function (value) { return System.Convert.toUInt32(value); }, testValues, expectedValues);
        },
        fromUInt64: function () {
            var testValues = [System.UInt64(100), System.UInt64(0)];
            var expectedValues = [100, 0];
            this.verifyViaObj(System.UInt64, function (value) { return System.Convert.toUInt32(value); }, testValues, expectedValues);
    
            var values = [System.UInt64.MaxValue];
            this.verifyThrowsViaObj(System.OverflowException, System.UInt64, function (value) { return System.Convert.toUInt32(value); }, values);
        }
    });
    
    Bridge.define('Bridge.ClientTest.ConvertTests.ConvertToUInt64Tests', {
        inherits: [Bridge.ClientTest.ConvertTests.ConvertTestBase$1(System.UInt64)],
        fromBoolean: function () {
            var testValues = [true, false];
            var expectedValues = [System.UInt64(1), System.UInt64(0)];
            this.verifyViaObj(Boolean, function (value) { return System.Convert.toUInt64(value); }, testValues, expectedValues);
        },
        fromByte: function () {
            var testValues = [255, 0];
            var expectedValues = [System.UInt64(255), System.UInt64(0)];
            this.verifyViaObj(System.Byte, function (value) { return System.Convert.toUInt64(value); }, testValues, expectedValues);
        },
        fromChar: function () {
            var testValues = [65535, 0, 98];
            var expectedValues = [System.UInt64(65535), System.UInt64(0), System.UInt64(98)];
            this.verifyViaObj(System.Char, function (value) { return System.Convert.toUInt64(value); }, testValues, expectedValues);
        },
        fromDecimal: function () {
            var testValues = [System.Decimal(1000.0), System.Decimal(0.0)];
            var expectedValues = [System.UInt64(1000), System.UInt64(0)];
            this.verifyViaObj(System.Decimal, function (value) { return System.Convert.toUInt64(value); }, testValues, expectedValues);
    
            var overflowValues = [System.Decimal.MinValue, System.Decimal.MaxValue];
            this.verifyThrowsViaObj(System.OverflowException, System.Decimal, function (value) { return System.Convert.toUInt64(value); }, overflowValues);
        },
        fromDouble: function () {
            var testValues = [1000.0, 0.0];
            var expectedValues = [System.UInt64(1000), System.UInt64(0)];
            this.verifyViaObj(System.Double, function (value) { return System.Convert.toUInt64(value); }, testValues, expectedValues);
    
            var overflowValues = [System.Double.max, -100.0];
            this.verifyThrowsViaObj(System.OverflowException, System.Double, function (value) { return System.Convert.toUInt64(value); }, overflowValues);
        },
        fromInt16: function () {
            var testValues = [1000, 0, 32767];
            var expectedValues = [System.UInt64(1000), System.UInt64(0), System.UInt64(32767)];
            this.verifyViaObj(System.Int16, function (value) { return System.Convert.toUInt64(value); }, testValues, expectedValues);
    
            var overflowValues = [-32768];
            this.verifyThrowsViaObj(System.OverflowException, System.Int16, function (value) { return System.Convert.toUInt64(value); }, overflowValues);
        },
        fromInt32: function () {
            var testValues = [1000, 0, 2147483647];
            var expectedValues = [System.UInt64(1000), System.UInt64(0), System.UInt64(2147483647)];
            this.verifyViaObj(System.Int32, function (value) { return System.Convert.toUInt64(value); }, testValues, expectedValues);
    
            var overflowValues = [-2147483648];
            this.verifyThrowsViaObj(System.OverflowException, System.Int32, function (value) { return System.Convert.toUInt64(value); }, overflowValues);
        },
        fromInt64: function () {
            var testValues = [System.Int64(1000), System.Int64(0), System.Int64.MaxValue];
            var expectedValues = [System.UInt64(1000), System.UInt64(0), System.UInt64(System.Int64.MaxValue)];
            this.verifyViaObj(System.Int64, function (value) { return System.Convert.toUInt64(value); }, testValues, expectedValues);
    
            var overflowValues = [System.Int64.MinValue];
            this.verifyThrowsViaObj(System.OverflowException, System.Int64, function (value) { return System.Convert.toUInt64(value); }, overflowValues);
        },
        fromObject: function () {
            var testValues = [null];
            var expectedValues = [System.UInt64(0)];
            this.verifyFromObject(function (value) { return System.Convert.toUInt64(value); }, function (value, provider) { return System.Convert.toUInt64(value, provider); }, testValues, expectedValues);
    
            var invalidValues = [{ }, new Date()];
            this.verifyFromObjectThrows(System.InvalidCastException, function (value) { return System.Convert.toUInt64(value); }, function (value, provider) { return System.Convert.toUInt64(value, provider); }, invalidValues);
        },
        fromSByte: function () {
            var testValues = [100, 0];
            var expectedValues = [System.UInt64(100), System.UInt64(0)];
            this.verifyViaObj(System.SByte, function (value) { return System.Convert.toUInt64(value); }, testValues, expectedValues);
    
            var overflowValues = [-128];
            this.verifyThrowsViaObj(System.OverflowException, System.SByte, function (value) { return System.Convert.toUInt64(value); }, overflowValues);
        },
        fromSingle: function () {
            var testValues = [1000.0, 0.0];
            var expectedValues = [System.UInt64(1000), System.UInt64(0)];
            this.verifyViaObj(System.Single, function (value) { return System.Convert.toUInt64(value); }, testValues, expectedValues);
    
            var overflowValues = [3.40282347E+38, -100.0];
            this.verifyThrowsViaObj(System.OverflowException, System.Single, function (value) { return System.Convert.toUInt64(value); }, overflowValues);
        },
        fromString: function () {
            var ushortMaxValue = 65535;
            var uintMaxValue = 4294967295;
    
            var testValues = ["1000", "0", ushortMaxValue.toString(), uintMaxValue.toString(), null];
            var expectedValues = [System.UInt64(1000), System.UInt64(0), System.UInt64(65535), System.UInt64(4294967295), System.UInt64(0)];
            this.verifyFromString(function (value) { return System.Convert.toUInt64(value); }, function (value, provider) { return System.Convert.toUInt64(value, provider); }, testValues, expectedValues);
    
            var longMaxValue = System.UInt64.MaxValue;
            var testValuesLong = [longMaxValue.toString()];
            var expectedValuesLong = [longMaxValue];
            this.verifyFromString(function (value) { return System.Convert.toUInt64(value); }, function (value, provider) { return System.Convert.toUInt64(value, provider); }, testValuesLong, expectedValuesLong);
    
            var overflowValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.UINT64_OVERFLOW_MIN_STRING, System.Decimal.MaxValue.toFixed(0, 4)];
            this.verifyFromStringThrows(System.OverflowException, function (value) { return System.Convert.toUInt64(value); }, function (value, provider) { return System.Convert.toUInt64(value, provider); }, overflowValues);
    
            var formatExceptionValues = ["abba"];
            this.verifyFromStringThrows(System.FormatException, function (value) { return System.Convert.toUInt64(value); }, function (value, provider) { return System.Convert.toUInt64(value, provider); }, formatExceptionValues);
        },
        fromStringWithBase: function () {
            var maxSafeValue = System.UInt64.MaxValue;
    
            var testValues = [null, null, null, null, Bridge.ClientTest.ConvertTests.ConvertConstants.UINT64_MAX_STRING_BASE_16, maxSafeValue.toString(), Bridge.ClientTest.ConvertTests.ConvertConstants.UINT64_MAX_STRING_BASE_8, Bridge.ClientTest.ConvertTests.ConvertConstants.UINT64_MAX_STRING_BASE_2];
            var testBases = [10, 2, 8, 16, 16, 10, 8, 2];
            var expectedValues = [System.UInt64(0), System.UInt64(0), System.UInt64(0), System.UInt64(0), maxSafeValue, maxSafeValue, maxSafeValue, maxSafeValue];
            this.verifyFromStringWithBase(function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 12); }, testValues, testBases, expectedValues, true);
    
            var overflowValues = [Bridge.ClientTest.ConvertTests.ConvertConstants.UINT64_OVERFLOW_MAX_STRING, Bridge.ClientTest.ConvertTests.ConvertConstants.UINT64_OVERFLOW_MIN_STRING];
            var overflowBases = [10, 10];
            this.verifyFromStringWithBaseThrows(System.OverflowException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 12); }, overflowValues, overflowBases);
    
            var overflowValuesBig = [Bridge.ClientTest.ConvertTests.ConvertConstants.UINT64_OVERFLOW_MAX_STRING_BASE_2, Bridge.ClientTest.ConvertTests.ConvertConstants.UINT64_OVERFLOW_MAX_STRING_BASE_16, Bridge.ClientTest.ConvertTests.ConvertConstants.UINT64_OVERFLOW_MAX_STRING_BASE_8];
            var overflowBasesBig = [2, 16, 8];
            this.verifyFromStringWithBaseThrows(System.OverflowException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 12); }, overflowValuesBig, overflowBasesBig);
    
            var formatExceptionValues = ["12", "ffffffffffffffffffff"];
            var formatExceptionBases = [2, 8];
            this.verifyFromStringWithBaseThrows(System.FormatException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 12); }, formatExceptionValues, formatExceptionBases);
    
            var argumentExceptionValues = ["10", "11", "abba", "-ab"];
            var argumentExceptionBases = [-1, 3, 0, 16];
            this.verifyFromStringWithBaseThrows(System.ArgumentException, function (value, fromBase) { return System.Convert.toNumberInBase(value, fromBase, 12); }, argumentExceptionValues, argumentExceptionBases);
        },
        fromUInt16: function () {
            var testValues = [100, 0];
            var expectedValues = [System.UInt64(100), System.UInt64(0)];
            this.verifyViaObj(System.UInt16, function (value) { return System.Convert.toUInt64(value); }, testValues, expectedValues);
        },
        fromUInt32: function () {
            var testValues = [0, 4294967295];
            var expectedValues = [System.UInt64(0), System.UInt64(4294967295)];
            this.verifyViaObj(System.UInt32, function (value) { return System.Convert.toUInt64(value); }, testValues, expectedValues);
        },
        fromUInt64: function () {
            var testValues = [System.UInt64.MaxValue, System.UInt64.MinValue];
            var expectedValues = [System.UInt64.MaxValue, System.UInt64.MinValue];
            this.verifyViaObj(System.UInt64, function (value) { return System.Convert.toUInt64(value); }, testValues, expectedValues);
        }
    });
    
    Bridge.define('Bridge.ClientTest.Exceptions.CommonExceptionTests.E2', {
        inherits: [Bridge.ClientTest.Exceptions.CommonExceptionTests.E1],
        constructor: function (message) {
            Bridge.ClientTest.Exceptions.CommonExceptionTests.E1.prototype.$constructor.call(this, message);
    
        }
    });
    
    Bridge.define('Bridge.ClientTest.PropertyAccessorTests.D3', {
        inherits: [Bridge.ClientTest.PropertyAccessorTests.B3],
        getP1: function () {
            return ((Bridge.ClientTest.PropertyAccessorTests.B3.prototype.getP1.call(this) + 1) | 0);
        },
        setP1: function (value) {
            Bridge.ClientTest.PropertyAccessorTests.B3.prototype.setP1.call(this, (value - 1) | 0);
        },
        getP2: function () {
            return ((Bridge.ClientTest.PropertyAccessorTests.B3.prototype.getP2.call(this) + 1) | 0);
        },
        setP3: function (value) {
            Bridge.ClientTest.PropertyAccessorTests.B3.prototype.setP3.call(this, (value - 1) | 0);
        }
    });
    
    Bridge.define('Bridge.ClientTest.PropertyAccessorTests.D4$1', function (T) { return {
        inherits: [Bridge.ClientTest.PropertyAccessorTests.B4$1(T)],
        getP1: function () {
            return Bridge.ClientTest.PropertyAccessorTests.B4$1(T).prototype.getP1.call(this) + 1;
        },
        setP1: function (value) {
            Bridge.ClientTest.PropertyAccessorTests.B4$1(T).prototype.setP1.call(this, value - 1);
        },
        getP2: function () {
            return Bridge.ClientTest.PropertyAccessorTests.B4$1(T).prototype.getP2.call(this) + 1;
        },
        setP3: function (value) {
            Bridge.ClientTest.PropertyAccessorTests.B4$1(T).prototype.setP3.call(this, value - 1);
        }
    }; });
    
    Bridge.define('Bridge.ClientTest.SimpleTypes.ObjectTests.C2', {
        inherits: [Bridge.ClientTest.SimpleTypes.ObjectTests.C1]
    });
    
    Bridge.define('Bridge.ClientTest.Text.RegularExpressions.Msdn.RegexAnchorsTests', {
        inherits: [Bridge.ClientTest.Text.RegularExpressions.RegexTestBase],
        startOfStringOrLineTest: function () {
            var $t;
            var startPos = 0, endPos = 70;
            var input = "Brooklyn Dodgers, National League, 1911, 1912, 1932-1957\nChicago Cubs, National League, 1903-present\nDetroit Tigers, American League, 1901-present\nNew York Giants, National League, 1885-1957\nWashington Senators, American League, 1901-1960\n";
            var pattern = "^((\\w+(\\s?)){2,}),\\s(\\w+\\s\\w+),(\\s\\d{4}(-(\\d{4}|present))?,?)+";
    
            var actuals = new System.Collections.Generic.List$1(String)();
            var expecteds = ["The Brooklyn Dodgers played in the National League in 1911, 1912, 1932-1957."];
    
            if (System.String.contains(input.substr(startPos, endPos),",")) {
                var match = System.Text.RegularExpressions.Regex.match(input, pattern);
                while (match.getSuccess()) {
                    var actual = System.String.format("The {0} played in the {1} in", match.getGroups().get(1).getValue(), match.getGroups().get(4).getValue());
                    $t = Bridge.getEnumerator(match.getGroups().get(5).getCaptures());
                    while ($t.moveNext()) {
                        var capture = $t.getCurrent();
                        actual += capture.getValue();
                    }
                    actual += ".";
                    actuals.add(actual);
    
                    startPos = (match.getIndex() + match.getLength()) | 0;
                    endPos = ((startPos + 70) | 0) <= input.length ? 70 : ((input.length - startPos) | 0);
                    if (!System.String.contains(input.substr(startPos, endPos),",")) {
                        break;
                    }
                    match = match.nextMatch();
                }
            }
    
            this.validateCollection(String, expecteds, actuals.toArray(), "Result");
        },
        startOfStringOrLineMultilineModeTest: function () {
            var $t;
            var startPos = 0, endPos = 70;
            var input = "Brooklyn Dodgers, National League, 1911, 1912, 1932-1957\nChicago Cubs, National League, 1903-present\nDetroit Tigers, American League, 1901-present\nNew York Giants, National League, 1885-1957\nWashington Senators, American League, 1901-1960\n";
            var pattern = "^((\\w+(\\s?)){2,}),\\s(\\w+\\s\\w+),(\\s\\d{4}(-(\\d{4}|present))?,?)+";
    
            var actuals = new System.Collections.Generic.List$1(String)();
            var expecteds = ["The Brooklyn Dodgers played in the National League in 1911, 1912, 1932-1957.", "The Chicago Cubs played in the National League in 1903-present.", "The Detroit Tigers played in the American League in 1901-present.", "The New York Giants played in the National League in 1885-1957.", "The Washington Senators played in the American League in 1901-1960."];
    
            if (System.String.contains(input.substr(startPos, endPos),",")) {
                var match = System.Text.RegularExpressions.Regex.match$1(input, pattern, 2);
                while (match.getSuccess()) {
                    var actual = System.String.format("The {0} played in the {1} in", match.getGroups().get(1).getValue(), match.getGroups().get(4).getValue());
                    $t = Bridge.getEnumerator(match.getGroups().get(5).getCaptures());
                    while ($t.moveNext()) {
                        var capture = $t.getCurrent();
                        actual += capture.getValue();
                    }
                    actual += ".";
                    actuals.add(actual);
    
                    startPos = (match.getIndex() + match.getLength()) | 0;
                    endPos = ((startPos + 70) | 0) <= input.length ? 70 : ((input.length - startPos) | 0);
                    if (!System.String.contains(input.substr(startPos, endPos),",")) {
                        break;
                    }
                    match = match.nextMatch();
                }
            }
    
            this.validateCollection(String, expecteds, actuals.toArray(), "Result");
        },
        endOfStringOrLineTest1: function () {
            var $t;
            // Attempting to match the entire input string
    
            var startPos = 0, endPos = 70;
            var cr = '\n';
            var input = "Brooklyn Dodgers, National League, 1911, 1912, 1932-1957" + cr + "Chicago Cubs, National League, 1903-present" + cr + "Detroit Tigers, American League, 1901-present" + cr + "New York Giants, National League, 1885-1957" + cr + "Washington Senators, American League, 1901-1960" + cr;
    
            var basePattern = "^((\\w+(\\s?)){2,}),\\s(\\w+\\s\\w+),(\\s\\d{4}(-(\\d{4}|present))?,?)+";
            var pattern = basePattern + "$";
    
            var actuals = new System.Collections.Generic.List$1(String)();
            var expecteds = System.Array.init(0, null);
    
            if (System.String.contains(input.substr(startPos, endPos),",")) {
                var match = System.Text.RegularExpressions.Regex.match(input, pattern);
                while (match.getSuccess()) {
                    var actual = System.String.format("The {0} played in the {1} in", match.getGroups().get(1).getValue(), match.getGroups().get(4).getValue());
                    $t = Bridge.getEnumerator(match.getGroups().get(5).getCaptures());
                    while ($t.moveNext()) {
                        var capture = $t.getCurrent();
                        actual += capture.getValue();
                    }
                    actual += ".";
                    actuals.add(actual);
    
                    startPos = (match.getIndex() + match.getLength()) | 0;
                    endPos = ((startPos + 70) | 0) <= input.length ? 70 : ((input.length - startPos) | 0);
                    if (!System.String.contains(input.substr(startPos, endPos),",")) {
                        break;
                    }
                    match = match.nextMatch();
                }
            }
    
            this.validateCollection(String, expecteds, actuals.toArray(), "Result");
        },
        endOfStringOrLineTest2: function () {
            var $t, $t1;
            // Attempting to match each element in a string array
    
            var cr = '\n';
            var input = "Brooklyn Dodgers, National League, 1911, 1912, 1932-1957" + cr + "Chicago Cubs, National League, 1903-present" + cr + "Detroit Tigers, American League, 1901-present" + cr + "New York Giants, National League, 1885-1957" + cr + "Washington Senators, American League, 1901-1960" + cr;
    
            var basePattern = "^((\\w+(\\s?)){2,}),\\s(\\w+\\s\\w+),(\\s\\d{4}(-(\\d{4}|present))?,?)+";
            var pattern = basePattern + "$";
    
            var actuals = new System.Collections.Generic.List$1(String)();
            var expecteds = ["The Brooklyn Dodgers played in the National League in 1911, 1912, 1932-1957.", "The Chicago Cubs played in the National League in 1903-present.", "The Detroit Tigers played in the American League in 1901-present.", "The New York Giants played in the National League in 1885-1957.", "The Washington Senators played in the American League in 1901-1960."];
    
            var teams = System.String.split(input, [cr], null, 1);
            $t = Bridge.getEnumerator(teams);
            while ($t.moveNext()) {
                var team = $t.getCurrent();
                if (team.length > 70) {
                    continue;
                }
    
                var match = System.Text.RegularExpressions.Regex.match(team, pattern);
                if (match.getSuccess()) {
                    var actual = System.String.format("The {0} played in the {1} in", match.getGroups().get(1).getValue(), match.getGroups().get(4).getValue());
                    $t1 = Bridge.getEnumerator(match.getGroups().get(5).getCaptures());
                    while ($t1.moveNext()) {
                        var capture = $t1.getCurrent();
                        actual += capture.getValue();
                    }
                    actual += ".";
                    actuals.add(actual);
                }
            }
    
            this.validateCollection(String, expecteds, actuals.toArray(), "Result");
        },
        endOfStringOrLineTest3: function () {
            var $t;
            // Attempting to match each line of an input string with '$'
    
            var cr = "\r\n";
            var input = "Brooklyn Dodgers, National League, 1911, 1912, 1932-1957" + cr + "Chicago Cubs, National League, 1903-present" + cr + "Detroit Tigers, American League, 1901-present" + cr + "New York Giants, National League, 1885-1957" + cr + "Washington Senators, American League, 1901-1960" + cr;
    
            var basePattern = "^((\\w+(\\s?)){2,}),\\s(\\w+\\s\\w+),(\\s\\d{4}(-(\\d{4}|present))?,?)+";
            var pattern = basePattern + "$";
    
            var actuals = new System.Collections.Generic.List$1(String)();
            var expecteds = System.Array.init(0, null);
    
            var startPos = 0;
            var endPos = 70;
            if (System.String.contains(input.substr(startPos, endPos),",")) {
                var match = System.Text.RegularExpressions.Regex.match$1(input, pattern, 2);
                while (match.getSuccess()) {
                    var actual = System.String.format("The {0} played in the {1} in", match.getGroups().get(1).getValue(), match.getGroups().get(4).getValue());
                    $t = Bridge.getEnumerator(match.getGroups().get(5).getCaptures());
                    while ($t.moveNext()) {
                        var capture = $t.getCurrent();
                        actual += capture.getValue();
                    }
                    actual += ".";
                    actuals.add(actual);
    
                    startPos = (match.getIndex() + match.getLength()) | 0;
                    endPos = ((startPos + 70) | 0) <= input.length ? 70 : ((input.length - startPos) | 0);
                    if (!System.String.contains(input.substr(startPos, endPos),",")) {
                        break;
                    }
                    match = match.nextMatch();
                }
            }
    
            this.validateCollection(String, expecteds, actuals.toArray(), "Result");
        },
        endOfStringOrLineTest4: function () {
            var $t;
            // Attempting to match each line of an input string with '\r?$'
    
            var cr = '\n';
            var input = "Brooklyn Dodgers, National League, 1911, 1912, 1932-1957" + cr + "Chicago Cubs, National League, 1903-present" + cr + "Detroit Tigers, American League, 1901-present" + cr + "New York Giants, National League, 1885-1957" + cr + "Washington Senators, American League, 1901-1960" + cr;
    
            var basePattern = "^((\\w+(\\s?)){2,}),\\s(\\w+\\s\\w+),(\\s\\d{4}(-(\\d{4}|present))?,?)+";
            var pattern;
    
            var actuals = new System.Collections.Generic.List$1(String)();
            var expecteds = ["The Brooklyn Dodgers played in the National League in 1911, 1912, 1932-1957.", "The Chicago Cubs played in the National League in 1903-present.", "The Detroit Tigers played in the American League in 1901-present.", "The New York Giants played in the National League in 1885-1957.", "The Washington Senators played in the American League in 1901-1960."];
    
            var startPos = 0;
            var endPos = 70;
            pattern = basePattern + "\r?$";
            if (System.String.contains(input.substr(startPos, endPos),",")) {
                var match = System.Text.RegularExpressions.Regex.match$1(input, pattern, 2);
                while (match.getSuccess()) {
                    var actual = System.String.format("The {0} played in the {1} in", match.getGroups().get(1).getValue(), match.getGroups().get(4).getValue());
                    $t = Bridge.getEnumerator(match.getGroups().get(5).getCaptures());
                    while ($t.moveNext()) {
                        var capture = $t.getCurrent();
                        actual += capture.getValue();
                    }
                    actual += ".";
                    actuals.add(actual);
    
                    startPos = (match.getIndex() + match.getLength()) | 0;
                    endPos = ((startPos + 70) | 0) <= input.length ? 70 : ((input.length - startPos) | 0);
                    if (!System.String.contains(input.substr(startPos, endPos),",")) {
                        break;
                    }
                    match = match.nextMatch();
                }
            }
    
            this.validateCollection(String, expecteds, actuals.toArray(), "Result");
        },
        startOfStringOnlyTest: function () {
            var $t;
            var startPos = 0, endPos = 70;
            var input = "Brooklyn Dodgers, National League, 1911, 1912, 1932-1957\nChicago Cubs, National League, 1903-present\nDetroit Tigers, American League, 1901-present\nNew York Giants, National League, 1885-1957\nWashington Senators, American League, 1901-1960\n";
    
            var pattern = "\\A((\\w+(\\s?)){2,}),\\s(\\w+\\s\\w+),(\\s\\d{4}(-(\\d{4}|present))?,?)+";
    
            var actuals = new System.Collections.Generic.List$1(String)();
            var expecteds = ["The Brooklyn Dodgers played in the National League in 1911, 1912, 1932-1957."];
    
            if (System.String.contains(input.substr(startPos, endPos),",")) {
                var match = System.Text.RegularExpressions.Regex.match$1(input, pattern, 2);
                while (match.getSuccess()) {
                    var actual = System.String.format("The {0} played in the {1} in", match.getGroups().get(1).getValue(), match.getGroups().get(4).getValue());
                    $t = Bridge.getEnumerator(match.getGroups().get(5).getCaptures());
                    while ($t.moveNext()) {
                        var capture = $t.getCurrent();
                        actual += capture.getValue();
                    }
                    actual += ".";
                    actuals.add(actual);
    
                    startPos = (match.getIndex() + match.getLength()) | 0;
                    endPos = ((startPos + 70) | 0) <= input.length ? 70 : ((input.length - startPos) | 0);
                    if (!System.String.contains(input.substr(startPos, endPos),",")) {
                        break;
                    }
                    match = match.nextMatch();
                }
            }
    
            this.validateCollection(String, expecteds, actuals.toArray(), "Result");
        },
        endOfStringOrNewlineTest: function () {
            var $t;
            var inputs = ["Brooklyn Dodgers, National League, 1911, 1912, 1932-1957", "Chicago Cubs, National League, 1903-present" + '\n', "Detroit Tigers, American League, 1901-present" + System.Text.RegularExpressions.Regex.unescape("\\n"), "New York Giants, National League, 1885-1957", "Washington Senators, American League, 1901-1960" + '\n'];
            var pattern = "^((\\w+(\\s?)){2,}),\\s(\\w+\\s\\w+),(\\s\\d{4}(-(\\d{4}|present))?,?)+\\r?\\Z";
    
            var actuals = new System.Collections.Generic.List$1(Boolean)();
            var expecteds = [true, true, true, true, true];
    
            $t = Bridge.getEnumerator(inputs);
            while ($t.moveNext()) {
                var input = $t.getCurrent();
                if (input.length > 70 || !System.String.contains(input,",")) {
                    continue;
                }
                var match = System.Text.RegularExpressions.Regex.match(input, pattern);
                actuals.add(match.getSuccess());
            }
    
            this.validateCollection(Boolean, expecteds, actuals.toArray(), "Result");
        },
        endOfStringOnlyTest: function () {
            var $t;
            var inputs = ["Brooklyn Dodgers, National League, 1911, 1912, 1932-1957", "Chicago Cubs, National League, 1903-present\r\n", "Detroit Tigers, American League, 1901-present" + System.Text.RegularExpressions.Regex.unescape("\\n"), "New York Giants, National League, 1885-1957", "Washington Senators, American League, 1901-1960\r\n"];
            var pattern = "^((\\w+(\\s?)){2,}),\\s(\\w+\\s\\w+),(\\s\\d{4}(-(\\d{4}|present))?,?)+\\r?\\z";
    
            var actuals = new System.Collections.Generic.List$1(Boolean)();
            var expecteds = [true, false, false, true, false];
    
            $t = Bridge.getEnumerator(inputs);
            while ($t.moveNext()) {
                var input = $t.getCurrent();
                if (input.length > 70 || !System.String.contains(input,",")) {
                    continue;
                }
                var match = System.Text.RegularExpressions.Regex.match(input, pattern);
                actuals.add(match.getSuccess());
            }
    
            this.validateCollection(Boolean, expecteds, actuals.toArray(), "Result");
        },
        contiguousMatchesTest: function () {
            var input = "capybara,squirrel,chipmunk,porcupine,gopher,beaver,groundhog,hamster,guinea pig,gerbil,chinchilla,prairie dog,mouse,rat";
    
            var pattern = "\\G(\\w+\\s?\\w*),?";
    
            var actuals = new System.Collections.Generic.List$1(String)();
            var expecteds = ["capybara", "squirrel", "chipmunk", "porcupine", "gopher", "beaver", "groundhog", "hamster", "guinea pig", "gerbil", "chinchilla", "prairie dog", "mouse", "rat"];
    
            var match = System.Text.RegularExpressions.Regex.match(input, pattern);
            while (match.getSuccess()) {
                actuals.add(match.getGroups().get(1).getValue());
                match = match.nextMatch();
            }
    
            this.validateCollection(String, expecteds, actuals.toArray(), "Result");
        },
        wordBoundaryTest: function () {
            var $t;
            var input = "area bare arena mare";
            var pattern = "\\bare\\w*\\b";
    
            var actuals = new System.Collections.Generic.List$1(String)();
            var expecteds = ["area_0", "arena_10"];
    
            $t = Bridge.getEnumerator(System.Text.RegularExpressions.Regex.matches(input, pattern));
            while ($t.moveNext()) {
                var match = $t.getCurrent();
                actuals.add(System.String.format("{0}_{1}", match.getValue(), match.getIndex()));
            }
    
            this.validateCollection(String, expecteds, actuals.toArray(), "Result");
        },
        nonWordBoundaryTest: function () {
            var $t;
            var input = "equity queen equip acquaint quiet";
            var pattern = "\\Bqu\\w+";
    
            var actuals = new System.Collections.Generic.List$1(String)();
            var expecteds = ["quity_1", "quip_14", "quaint_21"];
    
            $t = Bridge.getEnumerator(System.Text.RegularExpressions.Regex.matches(input, pattern));
            while ($t.moveNext()) {
                var match = $t.getCurrent();
                actuals.add(System.String.format("{0}_{1}", match.getValue(), match.getIndex()));
            }
    
            this.validateCollection(String, expecteds, actuals.toArray(), "Result");
        },
        startAndEndOfStringCustomTest1: function () {
            var pattern = "^.*$";
            var text = "abc\ndef";
            var rgx = new System.Text.RegularExpressions.Regex("constructor$1", pattern, 2);
            var ms = rgx.matches(text);
    
            Bridge.Test.Assert.areEqual$1(2, ms.getCount(), "Matches count is correct.");
    
            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 3, "abc", 1, true);
    
            this.validateGroup(ms.get(0), 0, 0, 3, true, "abc", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 3, "abc");
    
            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 4, 3, "def", 1, true);
    
            this.validateGroup(ms.get(1), 0, 4, 3, true, "def", 1);
            this.validateCapture(ms.get(1), 0, 0, 4, 3, "def");
        },
        startAndEndOfStringCustomTest2: function () {
            var pattern = ".*$";
            var text = "abc\ndef";
            var rgx = new System.Text.RegularExpressions.Regex("constructor$1", pattern, 2);
            var ms = rgx.matches(text);
    
            Bridge.Test.Assert.areEqual$1(4, ms.getCount(), "Matches count is correct.");
    
            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 3, "abc", 1, true);
    
            this.validateGroup(ms.get(0), 0, 0, 3, true, "abc", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 3, "abc");
    
            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 3, 0, "", 1, true);
    
            this.validateGroup(ms.get(1), 0, 3, 0, true, "", 1);
            this.validateCapture(ms.get(1), 0, 0, 3, 0, "");
    
            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 4, 3, "def", 1, true);
    
            this.validateGroup(ms.get(2), 0, 4, 3, true, "def", 1);
            this.validateCapture(ms.get(2), 0, 0, 4, 3, "def");
    
            // Match #3:
            Bridge.Test.Assert.notNull$1(ms.get(3), "Match[3] is not null.");
            this.validateMatch(ms.get(3), 7, 0, "", 1, true);
    
            this.validateGroup(ms.get(3), 0, 7, 0, true, "", 1);
            this.validateCapture(ms.get(3), 0, 0, 7, 0, "");
        },
        endOfStringOrNewlineCustomTest1: function () {
            var actuals = new System.Collections.Generic.List$1(Boolean)();
            var expecteds = [false, false, true];
    
            var text = "line1\nline2\nline3\n";
    
            var match = System.Text.RegularExpressions.Regex.match(text, "line1\\Z");
            actuals.add(match.getSuccess());
    
            match = System.Text.RegularExpressions.Regex.match(text, "line2\\Z");
            actuals.add(match.getSuccess());
    
            match = System.Text.RegularExpressions.Regex.match(text, "line3\\Z");
            actuals.add(match.getSuccess());
    
            this.validateCollection(Boolean, expecteds, actuals.toArray(), "Result");
        },
        endOfStringOrNewlineCustomTest2: function () {
            var actuals = new System.Collections.Generic.List$1(Boolean)();
            var expecteds = [false, false, true];
    
            var text = "line1\nline2\nline3\n";
    
            var match = System.Text.RegularExpressions.Regex.match$1(text, "line1\\Z", 2);
            actuals.add(match.getSuccess());
    
            match = System.Text.RegularExpressions.Regex.match$1(text, "line2\\Z", 2);
            actuals.add(match.getSuccess());
    
            match = System.Text.RegularExpressions.Regex.match$1(text, "line3\\Z", 2);
            actuals.add(match.getSuccess());
    
            this.validateCollection(Boolean, expecteds, actuals.toArray(), "Result");
        },
        endOfStringOnlyCustomTest1: function () {
            var actuals = new System.Collections.Generic.List$1(Boolean)();
            var expecteds = [false, false, false];
    
            var text = "line1\nline2\nline3\n";
    
            var match = System.Text.RegularExpressions.Regex.match(text, "line1\\z");
            actuals.add(match.getSuccess());
    
            match = System.Text.RegularExpressions.Regex.match(text, "line2\\z");
            actuals.add(match.getSuccess());
    
            match = System.Text.RegularExpressions.Regex.match(text, "line3\\z");
            actuals.add(match.getSuccess());
    
            this.validateCollection(Boolean, expecteds, actuals.toArray(), "Result");
        },
        endOfStringOnlyCustomTest2: function () {
            var actuals = new System.Collections.Generic.List$1(Boolean)();
            var expecteds = [false, false, false];
    
            var text = "line1\nline2\nline3\n";
    
            var match = System.Text.RegularExpressions.Regex.match$1(text, "line1\\z", 2);
            actuals.add(match.getSuccess());
    
            match = System.Text.RegularExpressions.Regex.match$1(text, "line2\\z", 2);
            actuals.add(match.getSuccess());
    
            match = System.Text.RegularExpressions.Regex.match$1(text, "line3\\z", 2);
            actuals.add(match.getSuccess());
    
            this.validateCollection(Boolean, expecteds, actuals.toArray(), "Result");
        },
        endOfStringOnlyCustomTest3: function () {
            var actuals = new System.Collections.Generic.List$1(Boolean)();
            var expecteds = [false, false, true];
    
            var text = "line1\nline2\nline3";
    
            var match = System.Text.RegularExpressions.Regex.match$1(text, "line1\\z", 2);
            actuals.add(match.getSuccess());
    
            match = System.Text.RegularExpressions.Regex.match$1(text, "line2\\z", 2);
            actuals.add(match.getSuccess());
    
            match = System.Text.RegularExpressions.Regex.match$1(text, "line3\\z", 2);
            actuals.add(match.getSuccess());
    
            this.validateCollection(Boolean, expecteds, actuals.toArray(), "Result");
        },
        contiguousMatchesCustomTest1: function () {
            var pattern = "\\GContiguous";
            var input = "ContiguousContiguous";
    
            var actuals = new System.Collections.Generic.List$1(String)();
            var expecteds = ["Contiguous", "Contiguous"];
    
            var match = System.Text.RegularExpressions.Regex.match(input, pattern);
            while (match.getSuccess()) {
                actuals.add(match.getValue());
                match = match.nextMatch();
            }
    
            this.validateCollection(String, expecteds, actuals.toArray(), "Result");
        },
        contiguousMatchesCustomTest2: function () {
            var pattern = "\\GContiguous";
            var input = "ContiguousNonContiguous";
    
            var actuals = new System.Collections.Generic.List$1(String)();
            var expecteds = ["Contiguous"];
    
            var match = System.Text.RegularExpressions.Regex.match(input, pattern);
            while (match.getSuccess()) {
                actuals.add(match.getValue());
                match = match.nextMatch();
            }
    
            this.validateCollection(String, expecteds, actuals.toArray(), "Result");
        }
    });
    
    Bridge.define('Bridge.ClientTest.Text.RegularExpressions.Msdn.RegexBackreferenceTests', {
        inherits: [Bridge.ClientTest.Text.RegularExpressions.RegexTestBase],
        msdnNumberedBackrefTest: function () {
            var pattern = "(\\w)\\1";
            var text = "trellis llama webbing dresser swagger";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var ms = rgx.matches(text);
    
            Bridge.Test.Assert.areEqual$1(5, ms.getCount(), "Matches count is correct.");
    
            // Match #0:
            this.validateMatch(ms.get(0), 3, 2, "ll", 2, true);
    
            this.validateGroup(ms.get(0), 0, 3, 2, true, "ll", 1);
            this.validateCapture(ms.get(0), 0, 0, 3, 2, "ll");
    
            this.validateGroup(ms.get(0), 1, 3, 1, true, "l", 1);
            this.validateCapture(ms.get(0), 1, 0, 3, 1, "l");
    
            // Match #1:
            this.validateMatch(ms.get(1), 8, 2, "ll", 2, true);
    
            this.validateGroup(ms.get(1), 0, 8, 2, true, "ll", 1);
            this.validateCapture(ms.get(1), 0, 0, 8, 2, "ll");
    
            this.validateGroup(ms.get(1), 1, 8, 1, true, "l", 1);
            this.validateCapture(ms.get(1), 1, 0, 8, 1, "l");
    
            // Match #2:
            this.validateMatch(ms.get(2), 16, 2, "bb", 2, true);
    
            this.validateGroup(ms.get(2), 0, 16, 2, true, "bb", 1);
            this.validateCapture(ms.get(2), 0, 0, 16, 2, "bb");
    
            this.validateGroup(ms.get(2), 1, 16, 1, true, "b", 1);
            this.validateCapture(ms.get(2), 1, 0, 16, 1, "b");
    
            // Match #3:
            this.validateMatch(ms.get(3), 25, 2, "ss", 2, true);
    
            this.validateGroup(ms.get(3), 0, 25, 2, true, "ss", 1);
            this.validateCapture(ms.get(3), 0, 0, 25, 2, "ss");
    
            this.validateGroup(ms.get(3), 1, 25, 1, true, "s", 1);
            this.validateCapture(ms.get(3), 1, 0, 25, 1, "s");
    
            // Match #4:
            this.validateMatch(ms.get(4), 33, 2, "gg", 2, true);
    
            this.validateGroup(ms.get(4), 0, 33, 2, true, "gg", 1);
            this.validateCapture(ms.get(4), 0, 0, 33, 2, "gg");
    
            this.validateGroup(ms.get(4), 1, 33, 1, true, "g", 1);
            this.validateCapture(ms.get(4), 1, 0, 33, 1, "g");
        },
        msdnNamedBackrefTest: function () {
            var pattern = "(?<char>\\w)\\k<char>";
            var text = "trellis llama webbing dresser swagger";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var ms = rgx.matches(text);
    
            Bridge.Test.Assert.areEqual$1(5, ms.getCount(), "Matches count is correct.");
    
            // Match #0:
            this.validateMatch(ms.get(0), 3, 2, "ll", 2, true);
    
            this.validateGroup(ms.get(0), 0, 3, 2, true, "ll", 1);
            this.validateCapture(ms.get(0), 0, 0, 3, 2, "ll");
    
            this.validateGroup(ms.get(0), 1, 3, 1, true, "l", 1);
            this.validateCapture(ms.get(0), 1, 0, 3, 1, "l");
    
            // Match #1:
            this.validateMatch(ms.get(1), 8, 2, "ll", 2, true);
    
            this.validateGroup(ms.get(1), 0, 8, 2, true, "ll", 1);
            this.validateCapture(ms.get(1), 0, 0, 8, 2, "ll");
    
            this.validateGroup(ms.get(1), 1, 8, 1, true, "l", 1);
            this.validateCapture(ms.get(1), 1, 0, 8, 1, "l");
    
            // Match #2:
            this.validateMatch(ms.get(2), 16, 2, "bb", 2, true);
    
            this.validateGroup(ms.get(2), 0, 16, 2, true, "bb", 1);
            this.validateCapture(ms.get(2), 0, 0, 16, 2, "bb");
    
            this.validateGroup(ms.get(2), 1, 16, 1, true, "b", 1);
            this.validateCapture(ms.get(2), 1, 0, 16, 1, "b");
    
            // Match #3:
            this.validateMatch(ms.get(3), 25, 2, "ss", 2, true);
    
            this.validateGroup(ms.get(3), 0, 25, 2, true, "ss", 1);
            this.validateCapture(ms.get(3), 0, 0, 25, 2, "ss");
    
            this.validateGroup(ms.get(3), 1, 25, 1, true, "s", 1);
            this.validateCapture(ms.get(3), 1, 0, 25, 1, "s");
    
            // Match #4:
            this.validateMatch(ms.get(4), 33, 2, "gg", 2, true);
    
            this.validateGroup(ms.get(4), 0, 33, 2, true, "gg", 1);
            this.validateCapture(ms.get(4), 0, 0, 33, 2, "gg");
    
            this.validateGroup(ms.get(4), 1, 33, 1, true, "g", 1);
            this.validateCapture(ms.get(4), 1, 0, 33, 1, "g");
        },
        msdnNamedBackrefWithNumberAsNameTest: function () {
            var pattern = "(?<2>\\w)\\k<2>";
            var text = "trellis llama webbing dresser swagger";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var ms = rgx.matches(text);
    
            Bridge.Test.Assert.areEqual$1(5, ms.getCount(), "Matches count is correct.");
    
            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 3, 2, "ll", 2, true);
    
            this.validateGroup(ms.get(0), 0, 3, 2, true, "ll", 1);
            this.validateCapture(ms.get(0), 0, 0, 3, 2, "ll");
    
            this.validateGroup(ms.get(0), 2, 3, 1, true, "l", 1);
            this.validateCapture(ms.get(0), 2, 0, 3, 1, "l");
    
            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 8, 2, "ll", 2, true);
    
            this.validateGroup(ms.get(1), 0, 8, 2, true, "ll", 1);
            this.validateCapture(ms.get(1), 0, 0, 8, 2, "ll");
    
            this.validateGroup(ms.get(1), 2, 8, 1, true, "l", 1);
            this.validateCapture(ms.get(1), 2, 0, 8, 1, "l");
    
            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 16, 2, "bb", 2, true);
    
            this.validateGroup(ms.get(2), 0, 16, 2, true, "bb", 1);
            this.validateCapture(ms.get(2), 0, 0, 16, 2, "bb");
    
            this.validateGroup(ms.get(2), 2, 16, 1, true, "b", 1);
            this.validateCapture(ms.get(2), 2, 0, 16, 1, "b");
    
            // Match #3:
            Bridge.Test.Assert.notNull$1(ms.get(3), "Match[3] is not null.");
            this.validateMatch(ms.get(3), 25, 2, "ss", 2, true);
    
            this.validateGroup(ms.get(3), 0, 25, 2, true, "ss", 1);
            this.validateCapture(ms.get(3), 0, 0, 25, 2, "ss");
    
            this.validateGroup(ms.get(3), 2, 25, 1, true, "s", 1);
            this.validateCapture(ms.get(3), 2, 0, 25, 1, "s");
    
            // Match #4:
            Bridge.Test.Assert.notNull$1(ms.get(4), "Match[4] is not null.");
            this.validateMatch(ms.get(4), 33, 2, "gg", 2, true);
    
            this.validateGroup(ms.get(4), 0, 33, 2, true, "gg", 1);
            this.validateCapture(ms.get(4), 0, 0, 33, 2, "gg");
    
            this.validateGroup(ms.get(4), 2, 33, 1, true, "g", 1);
            this.validateCapture(ms.get(4), 2, 0, 33, 1, "g");
        },
        msdnNamedBackrefWithRedefinedGroupTest: function () {
            //TODO: Uncomment when backreferences to redefined groups are supported.
            // Currently such cases intentionally not supported (they require manual processing of each single referenced capture).
    
            var pattern = "(?<1>a)(?<1>\\1b)*";
            var text = "aababb";
    
            Bridge.Test.Assert.throws$6(System.NotSupportedException, function () {
                var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
                rgx.match(text);
            });
    
            //var m = rgx.Match(text);
            //ValidateMatch(m, 0, 6, "aababb", 2, true);
    
            //ValidateGroup(m, 0, 0, 6, true, "aababb", 1);
            //ValidateCapture(m, 0, 0, 0, 6, "aababb");
    
            //ValidateGroup(m, 1, 3, 3, true, "abb", 3);
            //ValidateCapture(m, 1, 0, 0, 1, "a");
            //ValidateCapture(m, 1, 1, 1, 2, "ab");
            //ValidateCapture(m, 1, 2, 3, 3, "abb");
        },
        msdnNamedBackrefWithEmptyCaptureTest1: function () {
            var pattern = "\\b([A-Z]{2})(\\d{2})?([A-Z]{2})\\b";
            var text = "AA22ZZ";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 6, "AA22ZZ", 4, true);
    
            this.validateGroup(m, 0, 0, 6, true, "AA22ZZ", 1);
            this.validateCapture(m, 0, 0, 0, 6, "AA22ZZ");
    
            this.validateGroup(m, 1, 0, 2, true, "AA", 1);
            this.validateCapture(m, 1, 0, 0, 2, "AA");
    
            this.validateGroup(m, 2, 2, 2, true, "22", 1);
            this.validateCapture(m, 2, 0, 2, 2, "22");
    
            this.validateGroup(m, 3, 4, 2, true, "ZZ", 1);
            this.validateCapture(m, 3, 0, 4, 2, "ZZ");
        },
        msdnNamedBackrefWithEmptyCaptureTest2: function () {
            var pattern = "\\b([A-Z]{2})(\\d{2})?([A-Z]{2})\\b";
            var text = "AABB";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 4, "AABB", 4, true);
    
            this.validateGroup(m, 0, 0, 4, true, "AABB", 1);
            this.validateCapture(m, 0, 0, 0, 4, "AABB");
    
            this.validateGroup(m, 1, 0, 2, true, "AA", 1);
            this.validateCapture(m, 1, 0, 0, 2, "AA");
    
            this.validateGroup(m, 2, 0, 0, false, "", 0);
    
            this.validateGroup(m, 3, 2, 2, true, "BB", 1);
            this.validateCapture(m, 3, 0, 2, 2, "BB");
        },
        namedBackrefToUnreachableGroupTest: function () {
            //TODO: Uncomment if backreferences to unreachable groups are supported.
            // Currently such cases intentionally not supported (there is no sense in such queries, they always return "Success=False").
    
            var pattern = "(a)\\2(b)";
            var text = "abb";
    
            Bridge.Test.Assert.throws$6(System.NotSupportedException, function () {
                var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
                rgx.match(text);
            });
    
    
            //const string pattern = @"(a)\2(b)";
            //const string text = @"abb";
            //var rgx = new Regex(pattern);
            //var m = rgx.Match(text);
    
            //ValidateMatch(m, 0, 0, "", 1, false);
    
            //ValidateGroup(m, 0, 0, 0, false, "", 0);
    
            //ValidateGroup(m, 1, 0, 0, false, "", 0);
    
            //ValidateGroup(m, 2, 0, 0, false, "", 0);
        },
        namedBackrefToSelfGroupTest: function () {
            //TODO: Uncomment if backreferences to self are supported.
            // Currently such cases intentionally not supported (there is no sense in such queries, they always return "Success=False").
    
            var pattern = "(?<gr1>a\\k<gr1>)";
            var text = "aaa";
    
            Bridge.Test.Assert.throws$6(System.NotSupportedException, function () {
                var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
                rgx.match(text);
            });
    
    
            //const string pattern = @"(?<gr1>a\k<gr1>)";
            //const string text = @"aaa";
            //var rgx = new Regex(pattern);
            //var m = rgx.Match(text);
    
            //ValidateMatch(m, 0, 0, "", 1, false);
    
            //ValidateGroup(m, 0, 0, 0, false, "", 0);
    
            //ValidateGroup(m, 1, 0, 0, false, "", 0);
        },
        namedBackrefToParentGroupTest: function () {
            //TODO: Uncomment if backreferences to parent groups are supported.
            // Currently such cases intentionally not supported (there is no sense in such queries, they always return "Success=False").
    
            var pattern = "(?<parent>a(?<child>b\\k<parent>))";
            var text = "aabb";
    
            Bridge.Test.Assert.throws$6(System.NotSupportedException, function () {
                var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
                rgx.match(text);
            });
    
    
            //const string pattern = @"(?<parent>a(?<child>b\k<parent>))";
            //const string text = @"aabb";
            //var rgx = new Regex(pattern);
            //var m = rgx.Match(text);
    
            //ValidateMatch(m, 0, 0, "", 1, false);
    
            //ValidateGroup(m, 0, 0, 0, false, "", 0);
    
            //ValidateGroup(m, 1, 0, 0, false, "", 0);
    
            //ValidateGroup(m, 2, 0, 0, false, "", 0);
        },
        numberedBackrefTest: function () {
            var pattern = "((abc)def)\\2";
            var text = "abcdefabc";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 9, "abcdefabc", 3, true);
    
            this.validateGroup(m, 0, 0, 9, true, "abcdefabc", 1);
            this.validateCapture(m, 0, 0, 0, 9, "abcdefabc");
    
            this.validateGroup(m, 1, 0, 6, true, "abcdef", 1);
            this.validateCapture(m, 1, 0, 0, 6, "abcdef");
    
            this.validateGroup(m, 2, 0, 3, true, "abc", 1);
            this.validateCapture(m, 2, 0, 0, 3, "abc");
        },
        numberedBackrefInGroupFailsTest: function () {
            Bridge.Test.Assert.throws$6(System.NotSupportedException, $_.Bridge.ClientTest.Text.RegularExpressions.Msdn.RegexBackreferenceTests.f1);
        },
        namedBackrefInGroupFailsTest: function () {
            Bridge.Test.Assert.throws$6(System.NotSupportedException, $_.Bridge.ClientTest.Text.RegularExpressions.Msdn.RegexBackreferenceTests.f2);
        }
    });
    
    Bridge.ns("Bridge.ClientTest.Text.RegularExpressions.Msdn.RegexBackreferenceTests", $_);
    
    Bridge.apply($_.Bridge.ClientTest.Text.RegularExpressions.Msdn.RegexBackreferenceTests, {
        f1: function () {
            var pattern = "((abc)def)(\\2)";
            var text = "abcdefabc";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            rgx.match(text);
    
        },
        f2: function () {
            var pattern = "((?<name>abc)def)(\\k<name>)";
            var text = "abcdefabc";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            rgx.match(text);
    
        }
    });
    
    Bridge.define('Bridge.ClientTest.Text.RegularExpressions.Msdn.RegexEscapeTests', {
        inherits: [Bridge.ClientTest.Text.RegularExpressions.RegexTestBase],
        escapeTest: function () {
            var $t, $t1;
            var expected1 = ["?", "?"];
            var actual1 = new System.Collections.Generic.List$1(String)();
    
            var expected2 = ["[what kind?]", "[by whom?]"];
            var actual2 = new System.Collections.Generic.List$1(String)();
    
    
            var pattern = "[(.*?)]";
            var input = "The animal [what kind?] was visible [by whom?] from the window";
    
            var matches = System.Text.RegularExpressions.Regex.matches(input, pattern);
            $t = Bridge.getEnumerator(matches);
            while ($t.moveNext()) {
                var match = $t.getCurrent();
                actual1.add(match.getValue());
            }
            this.validateCollection(String, expected1, actual1.toArray(), "MatchValues1");
    
            pattern = System.Text.RegularExpressions.Regex.escape("[") + "(.*?)]";
            var matches2 = System.Text.RegularExpressions.Regex.matches(input, pattern);
            $t1 = Bridge.getEnumerator(matches2);
            while ($t1.moveNext()) {
                var match1 = $t1.getCurrent();
                actual2.add(match1.getValue());
            }
    
            this.validateCollection(String, expected2, actual2.toArray(), "MatchValues2");
    
        },
        unescapeTest: function () {
            var pattern = "\n\r\t\f[](){}!123abc \\, *, +, ?, |, {, [, (,), ^, $,., #,  \u0007, \b, \t, and \u000b";
            var escaped = System.Text.RegularExpressions.Regex.escape(pattern);
            var unescaped = System.Text.RegularExpressions.Regex.unescape(escaped);
    
            Bridge.Test.Assert.areEqual(pattern, unescaped);
        },
        escapeCharSetTest: function () {
            var $t;
            var escapable = "!\"#%&'()*,-./:;?@ABDGSWZ[\\]abdefnrstvwz{}";
            $t = Bridge.getEnumerator(escapable);
            while ($t.moveNext()) {
                var ch = $t.getCurrent();
                try {
                    var rgx = new System.Text.RegularExpressions.Regex("constructor", "\\" + String.fromCharCode(ch));
                    rgx.match("" + String.fromCharCode(ch));
                }
                catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    Bridge.Test.Assert.false$1(true, "Char must be escapable: " + String.fromCharCode(ch));
                }
            }
        },
        nonEscapeCharSetTest: function () {
            var $t;
            var escapable = "CEFHIJKLMNOPQRTUVXY_cghijklmopquxy";
            $t = Bridge.getEnumerator(escapable);
            while ($t.moveNext()) {
                (function () {
                    var ch = $t.getCurrent();
                    Bridge.Test.Assert.throws$7(System.ArgumentException, function () {
                        var rgx = new System.Text.RegularExpressions.Regex("constructor", "\\" + String.fromCharCode(ch));
                        rgx.match("" + String.fromCharCode(ch));
                    }, "Char must not be escapable: " + String.fromCharCode(ch));
                }).call(this);
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.Text.RegularExpressions.Msdn.RegexMatchesTests', {
        inherits: [Bridge.ClientTest.Text.RegularExpressions.RegexTestBase],
        matchesTest: function () {
            var $t;
            var expectedMatchValues = ["writes", "notes"];
            var expectedMatchIndexes = [4, 17];
    
            var actualMatchValues = new System.Collections.Generic.List$1(String)();
            var actualMatchIndexes = new System.Collections.Generic.List$1(System.Int32)();
    
            var pattern = "\\b\\w+es\\b";
            var sentence = "Who writes these notes?";
    
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
    
            $t = Bridge.getEnumerator(rgx.matches(sentence));
            while ($t.moveNext()) {
                var match = $t.getCurrent();
                actualMatchValues.add(match.getValue());
                actualMatchIndexes.add(match.getIndex());
            }
    
            this.validateCollection(String, expectedMatchValues, actualMatchValues.toArray(), "MatchValues");
            this.validateCollection(System.Int32, expectedMatchIndexes, actualMatchIndexes.toArray(), "MatchIndexes");
        },
        matchesAtPositionTest: function () {
            var $t;
            var expectedMatchValues = ["writes", "notes", "uses"];
            var expectedMatchIndexes = [4, 17, 27];
    
            var actualMatchValues = new System.Collections.Generic.List$1(String)();
            var actualMatchIndexes = new System.Collections.Generic.List$1(System.Int32)();
    
            var pattern = "\\b\\w+es\\b";
            var sentence = "Who writes these notes and uses our paper?";
    
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
    
            var match = rgx.match(sentence);
            actualMatchValues.add(match.getValue());
            actualMatchIndexes.add(match.getIndex());
    
            $t = Bridge.getEnumerator(rgx.matches$1(sentence, ((match.getIndex() + match.getLength()) | 0)));
            while ($t.moveNext()) {
                var m = $t.getCurrent();
                actualMatchValues.add(m.getValue());
                actualMatchIndexes.add(m.getIndex());
            }
    
            this.validateCollection(String, expectedMatchValues, actualMatchValues.toArray(), "MatchValues");
            this.validateCollection(System.Int32, expectedMatchIndexes, actualMatchIndexes.toArray(), "MatchIndexes");
        },
        matchesStaticTest: function () {
            var $t;
            var expectedMatchValues = ["writes", "notes"];
            var expectedMatchIndexes = [4, 17];
    
            var actualMatchValues = new System.Collections.Generic.List$1(String)();
            var actualMatchIndexes = new System.Collections.Generic.List$1(System.Int32)();
    
            var pattern = "\\b\\w+es\\b";
            var sentence = "Who writes these notes?";
    
            $t = Bridge.getEnumerator(System.Text.RegularExpressions.Regex.matches(sentence, pattern));
            while ($t.moveNext()) {
                var match = $t.getCurrent();
                actualMatchValues.add(match.getValue());
                actualMatchIndexes.add(match.getIndex());
            }
    
            this.validateCollection(String, expectedMatchValues, actualMatchValues.toArray(), "MatchValues");
            this.validateCollection(System.Int32, expectedMatchIndexes, actualMatchIndexes.toArray(), "MatchIndexes");
        },
        matchesStaticWithOptionsTest: function () {
            var $t, $t1;
            var expectedMatchValues1 = ["notes"];
            var expectedMatchIndexes1 = [11];
    
            var expectedMatchValues2 = ["NOTES", "notes"];
            var expectedMatchIndexes2 = [0, 11];
    
            var actualMatchValues1 = new System.Collections.Generic.List$1(String)();
            var actualMatchIndexes1 = new System.Collections.Generic.List$1(System.Int32)();
    
            var actualMatchValues2 = new System.Collections.Generic.List$1(String)();
            var actualMatchIndexes2 = new System.Collections.Generic.List$1(System.Int32)();
    
            var pattern = "\\b\\w+es\\b";
            var sentence = "NOTES: Any notes or comments are optional.";
            $t = Bridge.getEnumerator(System.Text.RegularExpressions.Regex.matches$1(sentence, pattern, 0));
            while ($t.moveNext()) {
                var match = $t.getCurrent();
                actualMatchValues1.add(match.getValue());
                actualMatchIndexes1.add(match.getIndex());
            }
    
            $t1 = Bridge.getEnumerator(System.Text.RegularExpressions.Regex.matches$1(sentence, pattern, 1));
            while ($t1.moveNext()) {
                var match1 = $t1.getCurrent();
                actualMatchValues2.add(match1.getValue());
                actualMatchIndexes2.add(match1.getIndex());
            }
    
            this.validateCollection(String, expectedMatchValues1, actualMatchValues1.toArray(), "MatchValues1");
            this.validateCollection(System.Int32, expectedMatchIndexes1, actualMatchIndexes1.toArray(), "MatchIndexes1");
    
            this.validateCollection(String, expectedMatchValues2, actualMatchValues2.toArray(), "MatchValues2");
            this.validateCollection(System.Int32, expectedMatchIndexes2, actualMatchIndexes2.toArray(), "MatchIndexes2");
        },
        matchesStaticWithOptionsAndTimeoutTest: function () {
            var $t, $t1;
            var expectedMatchValues1 = ["notes"];
            var expectedMatchIndexes1 = [11];
    
            var expectedMatchValues2 = ["NOTES", "notes"];
            var expectedMatchIndexes2 = [0, 11];
    
            var actualMatchValues1 = new System.Collections.Generic.List$1(String)();
            var actualMatchIndexes1 = new System.Collections.Generic.List$1(System.Int32)();
    
            var actualMatchValues2 = new System.Collections.Generic.List$1(String)();
            var actualMatchIndexes2 = new System.Collections.Generic.List$1(System.Int32)();
    
            var pattern = "\\b\\w+es\\b";
            var sentence = "NOTES: Any notes or comments are optional.";
            $t = Bridge.getEnumerator(System.Text.RegularExpressions.Regex.matches$2(sentence, pattern, 0, System.TimeSpan.fromSeconds(1)));
            while ($t.moveNext()) {
                var match = $t.getCurrent();
                actualMatchValues1.add(match.getValue());
                actualMatchIndexes1.add(match.getIndex());
            }
    
            $t1 = Bridge.getEnumerator(System.Text.RegularExpressions.Regex.matches$2(sentence, pattern, 1, System.TimeSpan.fromSeconds(1)));
            while ($t1.moveNext()) {
                var match1 = $t1.getCurrent();
                actualMatchValues2.add(match1.getValue());
                actualMatchIndexes2.add(match1.getIndex());
            }
    
            this.validateCollection(String, expectedMatchValues1, actualMatchValues1.toArray(), "MatchValues1");
            this.validateCollection(System.Int32, expectedMatchIndexes1, actualMatchIndexes1.toArray(), "MatchIndexes1");
    
            this.validateCollection(String, expectedMatchValues2, actualMatchValues2.toArray(), "MatchValues2");
            this.validateCollection(System.Int32, expectedMatchIndexes2, actualMatchIndexes2.toArray(), "MatchIndexes2");
        }
    });
    
    Bridge.define('Bridge.ClientTest.Text.RegularExpressions.Msdn.RegexMatchTests', {
        inherits: [Bridge.ClientTest.Text.RegularExpressions.RegexTestBase],
        matchTest: function () {
            var expectedGroupValues = ["One", "car", "red", "car", "blue", "car"];
            var expectedCaptureValues = ["One", "car", "red", "car", "blue", "car"];
            var expectedCaptureIndexes = [0, 4, 8, 12, 16, 21];
    
            var actualGroupValues = new System.Collections.Generic.List$1(String)();
            var actualCaptureValues = new System.Collections.Generic.List$1(String)();
            var actualCaptureIndexes = new System.Collections.Generic.List$1(System.Int32)();
    
            var text = "One car red car blue car";
            var pat = "(\\w+)\\s+(car)";
    
            // Instantiate the regular expression object.
            var r = new System.Text.RegularExpressions.Regex("constructor$1", pat, 1);
    
            // Match the regular expression pattern against a text string.
            var m = r.match(text);
            while (m.getSuccess()) {
                for (var i = 1; i <= 2; i = (i + 1) | 0) {
                    var g = m.getGroups().get(i);
                    actualGroupValues.add(g.toString());
    
                    var cc = g.getCaptures();
                    for (var j = 0; j < cc.getCount(); j = (j + 1) | 0) {
                        var c = cc.get(j);
                        actualCaptureValues.add(c.toString());
                        actualCaptureIndexes.add(c.getIndex());
                    }
                }
                m = m.nextMatch();
            }
    
            this.validateCollection(String, expectedGroupValues, actualGroupValues.toArray(), "GroupValues");
            this.validateCollection(String, expectedCaptureValues, actualCaptureValues.toArray(), "CaptureValues");
            this.validateCollection(System.Int32, expectedCaptureIndexes, actualCaptureIndexes.toArray(), "CaptureIndexes");
        },
        matchAtPositionTest: function () {
            var expectedGroupValues = ["red", "car", "blue", "car"];
            var expectedCaptureValues = ["red", "car", "blue", "car"];
            var expectedCaptureIndexes = [8, 12, 16, 21];
    
            var actualGroupValues = new System.Collections.Generic.List$1(String)();
            var actualCaptureValues = new System.Collections.Generic.List$1(String)();
            var actualCaptureIndexes = new System.Collections.Generic.List$1(System.Int32)();
    
            var text = "One car red car blue car";
            var pat = "(\\w+)\\s+(car)";
    
            // Instantiate the regular expression object.
            var r = new System.Text.RegularExpressions.Regex("constructor$1", pat, 1);
    
            // Match the regular expression pattern against a text string.
            var m = r.match$1(text, 3);
            while (m.getSuccess()) {
                for (var i = 1; i <= 2; i = (i + 1) | 0) {
                    var g = m.getGroups().get(i);
                    actualGroupValues.add(g.toString());
    
                    var cc = g.getCaptures();
                    for (var j = 0; j < cc.getCount(); j = (j + 1) | 0) {
                        var c = cc.get(j);
                        actualCaptureValues.add(c.toString());
                        actualCaptureIndexes.add(c.getIndex());
                    }
                }
                m = m.nextMatch();
            }
    
            this.validateCollection(String, expectedGroupValues, actualGroupValues.toArray(), "GroupValues");
            this.validateCollection(String, expectedCaptureValues, actualCaptureValues.toArray(), "CaptureValues");
            this.validateCollection(System.Int32, expectedCaptureIndexes, actualCaptureIndexes.toArray(), "CaptureIndexes");
        },
        matchAtPositionAndLengthTest: function () {
            var expectedGroupValues = ["red", "car"];
            var expectedCaptureValues = ["red", "car"];
            var expectedCaptureIndexes = [8, 12];
    
            var actualGroupValues = new System.Collections.Generic.List$1(String)();
            var actualCaptureValues = new System.Collections.Generic.List$1(String)();
            var actualCaptureIndexes = new System.Collections.Generic.List$1(System.Int32)();
    
            var text = "One car red car blue car";
            var pat = "(\\w+)\\s+(car)";
    
            // Instantiate the regular expression object.
            var r = new System.Text.RegularExpressions.Regex("constructor$1", pat, 1);
    
            // Match the regular expression pattern against a text string.
            var m = r.match$2(text, 3, 15);
            while (m.getSuccess()) {
                for (var i = 1; i <= 2; i = (i + 1) | 0) {
                    var g = m.getGroups().get(i);
                    actualGroupValues.add(g.toString());
    
                    var cc = g.getCaptures();
                    for (var j = 0; j < cc.getCount(); j = (j + 1) | 0) {
                        var c = cc.get(j);
                        actualCaptureValues.add(c.toString());
                        actualCaptureIndexes.add(c.getIndex());
                    }
                }
                m = m.nextMatch();
                if (m.getIndex() > 15) {
                    break;
                }
            }
    
            this.validateCollection(String, expectedGroupValues, actualGroupValues.toArray(), "GroupValues");
            this.validateCollection(String, expectedCaptureValues, actualCaptureValues.toArray(), "CaptureValues");
            this.validateCollection(System.Int32, expectedCaptureIndexes, actualCaptureIndexes.toArray(), "CaptureIndexes");
        },
        matchStaticTest: function () {
            var expectedMatchValues = ["ablaze", "dozen", "glaze", "jazz", "pizza", "quiz", "whiz", "zealous"];
            var expectedMatchIndexes = [0, 21, 46, 65, 104, 110, 157, 174];
    
            var actualMatchValues = new System.Collections.Generic.List$1(String)();
            var actualMatchIndexes = new System.Collections.Generic.List$1(System.Int32)();
    
            var pattern = "\\b\\w*z+\\w*\\b";
            var input = "ablaze beagle choral dozen elementary fanatic glaze hunger inept jazz kitchen lemon minus night optical pizza quiz restoration stamina train unrest vertical whiz xray yellow zealous";
    
            var m = System.Text.RegularExpressions.Regex.match(input, pattern);
            while (m.getSuccess()) {
                actualMatchValues.add(m.getValue());
                actualMatchIndexes.add(m.getIndex());
                m = m.nextMatch();
            }
    
            this.validateCollection(String, expectedMatchValues, actualMatchValues.toArray(), "MatchValues");
            this.validateCollection(System.Int32, expectedMatchIndexes, actualMatchIndexes.toArray(), "MatchIndexes");
        },
        matchStaticWithOptionsTest: function () {
            var expectedMatchValues = ["An"];
            var expectedMatchIndexes = [0];
    
            var actualMatchValues = new System.Collections.Generic.List$1(String)();
            var actualMatchIndexes = new System.Collections.Generic.List$1(System.Int32)();
    
            var pattern = "\\ba\\w*\\b";
            var input = "An extraordinary day dawns with each new day.";
    
            var m = System.Text.RegularExpressions.Regex.match$1(input, pattern, 1);
            while (m.getSuccess()) {
                actualMatchValues.add(m.getValue());
                actualMatchIndexes.add(m.getIndex());
                m = m.nextMatch();
            }
    
            this.validateCollection(String, expectedMatchValues, actualMatchValues.toArray(), "MatchValues");
            this.validateCollection(System.Int32, expectedMatchIndexes, actualMatchIndexes.toArray(), "MatchIndexes");
        },
        matchStaticWithOptionsAndTimeoutTest: function () {
            var expectedMatchValues = ["An"];
            var expectedMatchIndexes = [0];
    
            var actualMatchValues = new System.Collections.Generic.List$1(String)();
            var actualMatchIndexes = new System.Collections.Generic.List$1(System.Int32)();
    
            var pattern = "\\ba\\w*\\b";
            var input = "An extraordinary day dawns with each new day.";
    
            var m = System.Text.RegularExpressions.Regex.match$2(input, pattern, 1, System.TimeSpan.fromSeconds(1));
            while (m.getSuccess()) {
                actualMatchValues.add(m.getValue());
                actualMatchIndexes.add(m.getIndex());
                m = m.nextMatch();
            }
    
            this.validateCollection(String, expectedMatchValues, actualMatchValues.toArray(), "MatchValues");
            this.validateCollection(System.Int32, expectedMatchIndexes, actualMatchIndexes.toArray(), "MatchIndexes");
        }
    });
    
    Bridge.define('Bridge.ClientTest.Text.RegularExpressions.RegexCaptureCollectionTests', {
        inherits: [Bridge.ClientTest.Text.RegularExpressions.RegexTestBase],
        statics: {
            Pattern: "((?:\\w)+[\\s\\.])+",
            Text: "This is a sentance. This is another sentance.",
            getTestDataMatch: function (matchIndex) {
                if (matchIndex === void 0) { matchIndex = 1; }
                var rgx = new System.Text.RegularExpressions.Regex("constructor", Bridge.ClientTest.Text.RegularExpressions.RegexCaptureCollectionTests.Pattern);
                var m = rgx.match(Bridge.ClientTest.Text.RegularExpressions.RegexCaptureCollectionTests.Text);
                for (var i = 1; i < matchIndex; i = (i + 1) | 0) {
                    m = rgx.match$1(Bridge.ClientTest.Text.RegularExpressions.RegexCaptureCollectionTests.Text, ((m.getIndex() + m.getLength()) | 0));
                }
    
                return m;
            }
        },
        caseDataTest: function () {
            var m1 = Bridge.ClientTest.Text.RegularExpressions.RegexCaptureCollectionTests.getTestDataMatch();
    
            this.validateMatch(m1, 0, 19, "This is a sentance.", 2, true);
    
            this.validateGroup(m1, 0, 0, 19, true, "This is a sentance.", 1);
            this.validateCapture(m1, 0, 0, 0, 19, "This is a sentance.");
    
            this.validateGroup(m1, 1, 10, 9, true, "sentance.", 4);
            this.validateCapture(m1, 1, 0, 0, 5, "This ");
            this.validateCapture(m1, 1, 1, 5, 3, "is ");
            this.validateCapture(m1, 1, 2, 8, 2, "a ");
            this.validateCapture(m1, 1, 3, 10, 9, "sentance.");
    
            var m2 = Bridge.ClientTest.Text.RegularExpressions.RegexCaptureCollectionTests.getTestDataMatch(2);
    
            this.validateMatch(m2, 20, 25, "This is another sentance.", 2, true);
    
            this.validateGroup(m2, 0, 20, 25, true, "This is another sentance.", 1);
            this.validateCapture(m2, 0, 0, 20, 25, "This is another sentance.");
    
            this.validateGroup(m2, 1, 36, 9, true, "sentance.", 4);
            this.validateCapture(m2, 1, 0, 20, 5, "This ");
            this.validateCapture(m2, 1, 1, 25, 3, "is ");
            this.validateCapture(m2, 1, 2, 28, 8, "another ");
            this.validateCapture(m2, 1, 3, 36, 9, "sentance.");
        },
        captureCollectionFieldsTest: function () {
            var m = Bridge.ClientTest.Text.RegularExpressions.RegexCaptureCollectionTests.getTestDataMatch();
            var group = m.getGroups().get(1);
            var captures = group.getCaptures();
    
            Bridge.Test.Assert.areEqual$1(4, captures.getCount(), "Captures.Count");
            Bridge.Test.Assert.areEqual$1(true, captures.getIsReadOnly(), "Captures.IsReadOnly");
            Bridge.Test.Assert.areEqual$1(false, captures.getIsSynchronized(), "Captures.IsSynchronized");
            Bridge.Test.Assert.areEqual$1(group, captures.getSyncRoot(), "Captures.SyncRoot");
        },
        captureCollectionForeachTest: function () {
            var $t;
            var m = Bridge.ClientTest.Text.RegularExpressions.RegexCaptureCollectionTests.getTestDataMatch();
            var group = m.getGroups().get(1);
            var captures = group.getCaptures();
    
            var i = 0;
            $t = Bridge.getEnumerator(captures);
            while ($t.moveNext()) {
                var captureObj = $t.getCurrent();
                var capture = Bridge.as(captureObj, System.Text.RegularExpressions.Capture);
                this.capturesAreEqual(captures.get(i), capture, "Captures[" + i + "]");
                i = (i + 1) | 0;
            }
        },
        captureCollectionEnumeratorTest: function () {
            var m = Bridge.ClientTest.Text.RegularExpressions.RegexCaptureCollectionTests.getTestDataMatch();
            var group = m.getGroups().get(1);
            var captures = group.getCaptures();
    
            var en = captures.getEnumerator();
    
            Bridge.Test.Assert.true$1(en.moveNext(), "First call - MoveNext()");
    
            var i = 0;
            do  {
                var capture = Bridge.as(en.getCurrent(), System.Text.RegularExpressions.Capture);
                this.capturesAreEqual(captures.get(i), capture, "Captures[" + i + "]");
                i = (i + 1) | 0;
    
            } while (en.moveNext());
    
            Bridge.Test.Assert.areEqual$1(captures.getCount(), i, "Captures.Count");
        },
        captureCollectionCopyToTest: function () {
            var m = Bridge.ClientTest.Text.RegularExpressions.RegexCaptureCollectionTests.getTestDataMatch();
            var group = m.getGroups().get(1);
            var captures = group.getCaptures();
    
            var dstArray = System.Array.init(captures.getCount(), null);
            captures.copyTo(dstArray, 0);
    
            for (var i = 0; i < captures.getCount(); i = (i + 1) | 0) {
                this.capturesAreEqual(captures.get(i), dstArray[i], "Captures[" + i + "]");
            }
    
            Bridge.Test.Assert.throws$2(function () {
                captures.copyTo(null, 0);
            }, $_.Bridge.ClientTest.Text.RegularExpressions.RegexCaptureCollectionTests.f1, "Exception: Array is not null.");
            Bridge.Test.Assert.throws$2(function () {
                captures.copyTo(dstArray, 1);
            }, $_.Bridge.ClientTest.Text.RegularExpressions.RegexCaptureCollectionTests.f2, "Exception: Out of range.");
        }
    });
    
    Bridge.ns("Bridge.ClientTest.Text.RegularExpressions.RegexCaptureCollectionTests", $_);
    
    Bridge.apply($_.Bridge.ClientTest.Text.RegularExpressions.RegexCaptureCollectionTests, {
        f1: function (err) {
            return Bridge.referenceEquals(Bridge.getTypeName(err), Bridge.getTypeName(System.ArgumentNullException));
        },
        f2: function (err) {
            return Bridge.referenceEquals(Bridge.getTypeName(err), Bridge.getTypeName(System.IndexOutOfRangeException));
        }
    });
    
    Bridge.define('Bridge.ClientTest.Text.RegularExpressions.RegexEntityTests', {
        inherits: [Bridge.ClientTest.Text.RegularExpressions.RegexTestBase],
        statics: {
            Pattern: "((?:\\w)+[\\s\\.])+",
            Text: "This is a sentance. This is another sentance.",
            getTestDataMatch: function (matchIndex) {
                if (matchIndex === void 0) { matchIndex = 1; }
                var rgx = new System.Text.RegularExpressions.Regex("constructor", Bridge.ClientTest.Text.RegularExpressions.RegexEntityTests.Pattern);
                var m = rgx.match(Bridge.ClientTest.Text.RegularExpressions.RegexEntityTests.Text);
                for (var i = 1; i < matchIndex; i = (i + 1) | 0) {
                    m = rgx.match$1(Bridge.ClientTest.Text.RegularExpressions.RegexEntityTests.Text, ((m.getIndex() + m.getLength()) | 0));
                }
    
                return m;
            }
        },
        caseDataTest: function () {
            var m1 = Bridge.ClientTest.Text.RegularExpressions.RegexEntityTests.getTestDataMatch();
    
            this.validateMatch(m1, 0, 19, "This is a sentance.", 2, true);
    
            this.validateGroup(m1, 0, 0, 19, true, "This is a sentance.", 1);
            this.validateCapture(m1, 0, 0, 0, 19, "This is a sentance.");
    
            this.validateGroup(m1, 1, 10, 9, true, "sentance.", 4);
            this.validateCapture(m1, 1, 0, 0, 5, "This ");
            this.validateCapture(m1, 1, 1, 5, 3, "is ");
            this.validateCapture(m1, 1, 2, 8, 2, "a ");
            this.validateCapture(m1, 1, 3, 10, 9, "sentance.");
    
            var m2 = Bridge.ClientTest.Text.RegularExpressions.RegexEntityTests.getTestDataMatch(2);
    
            this.validateMatch(m2, 20, 25, "This is another sentance.", 2, true);
    
            this.validateGroup(m2, 0, 20, 25, true, "This is another sentance.", 1);
            this.validateCapture(m2, 0, 0, 20, 25, "This is another sentance.");
    
            this.validateGroup(m2, 1, 36, 9, true, "sentance.", 4);
            this.validateCapture(m2, 1, 0, 20, 5, "This ");
            this.validateCapture(m2, 1, 1, 25, 3, "is ");
            this.validateCapture(m2, 1, 2, 28, 8, "another ");
            this.validateCapture(m2, 1, 3, 36, 9, "sentance.");
        },
        getGroupNamesTest: function () {
            var rgx = new System.Text.RegularExpressions.Regex("constructor", "");
            var names = rgx.getGroupNames();
            this.validateCollection(String, ["0"], names, "EmptyRegex");
    
            rgx = new System.Text.RegularExpressions.Regex("constructor", "()");
            names = rgx.getGroupNames();
            this.validateCollection(String, ["0", "1"], names, "EmptyGroup");
    
            rgx = new System.Text.RegularExpressions.Regex("constructor", "(group1)");
            names = rgx.getGroupNames();
            this.validateCollection(String, ["0", "1"], names, "Group1");
    
            rgx = new System.Text.RegularExpressions.Regex("constructor", "(group1)(group2)");
            names = rgx.getGroupNames();
            this.validateCollection(String, ["0", "1", "2"], names, "Group2");
    
            rgx = new System.Text.RegularExpressions.Regex("constructor", "(group1())(group2)");
            names = rgx.getGroupNames();
            this.validateCollection(String, ["0", "1", "2", "3"], names, "Group3");
    
            rgx = new System.Text.RegularExpressions.Regex("constructor", "(?<name1>)");
            names = rgx.getGroupNames();
            this.validateCollection(String, ["0", "name1"], names, "NameGroup1");
    
            rgx = new System.Text.RegularExpressions.Regex("constructor", "(?<name1>)(?'name2')");
            names = rgx.getGroupNames();
            this.validateCollection(String, ["0", "name1", "name2"], names, "NameGroup2");
    
            rgx = new System.Text.RegularExpressions.Regex("constructor", "(?<name1>(?'inner1'))(?'name2')");
            names = rgx.getGroupNames();
            this.validateCollection(String, ["0", "name1", "inner1", "name2"], names, "NameGroup3");
    
            rgx = new System.Text.RegularExpressions.Regex("constructor", "(?<test>)()");
            names = rgx.getGroupNames();
            this.validateCollection(String, ["0", "1", "test"], names, "NameGroupAndNoname1");
        },
        getGroupNumbersTest: function () {
            var rgx = new System.Text.RegularExpressions.Regex("constructor", "");
            var numbers = rgx.getGroupNumbers();
            this.validateCollection(System.Int32, [0], numbers, "EmptyRegex");
    
            rgx = new System.Text.RegularExpressions.Regex("constructor", "()");
            numbers = rgx.getGroupNumbers();
            this.validateCollection(System.Int32, [0, 1], numbers, "EmptyGroup");
    
            rgx = new System.Text.RegularExpressions.Regex("constructor", "(group1)");
            numbers = rgx.getGroupNumbers();
            this.validateCollection(System.Int32, [0, 1], numbers, "Group1");
    
            rgx = new System.Text.RegularExpressions.Regex("constructor", "(group1)(group2)");
            numbers = rgx.getGroupNumbers();
            this.validateCollection(System.Int32, [0, 1, 2], numbers, "Group2");
    
            rgx = new System.Text.RegularExpressions.Regex("constructor", "(group1())(group2)");
            numbers = rgx.getGroupNumbers();
            this.validateCollection(System.Int32, [0, 1, 2, 3], numbers, "Group3");
    
            rgx = new System.Text.RegularExpressions.Regex("constructor", "(?<name1>)");
            numbers = rgx.getGroupNumbers();
            this.validateCollection(System.Int32, [0, 1], numbers, "NameGroup1");
    
            rgx = new System.Text.RegularExpressions.Regex("constructor", "(?<name1>)(?'name2')");
            numbers = rgx.getGroupNumbers();
            this.validateCollection(System.Int32, [0, 1, 2], numbers, "NameGroup2");
    
            rgx = new System.Text.RegularExpressions.Regex("constructor", "(?<name1>(?'inner1'))(?'name2')");
            numbers = rgx.getGroupNumbers();
            this.validateCollection(System.Int32, [0, 1, 2, 3], numbers, "NameGroup3");
    
            rgx = new System.Text.RegularExpressions.Regex("constructor", "(?<test>)()");
            numbers = rgx.getGroupNumbers();
            this.validateCollection(System.Int32, [0, 1, 2], numbers, "NameGroupAndNoname1");
        },
        groupNameFromNumberTest: function () {
            var rgx = new System.Text.RegularExpressions.Regex("constructor", "");
            Bridge.Test.Assert.areEqual$1("0", rgx.groupNameFromNumber(0), "EmptyRegex.GroupNameFromNumber(0)");
    
            rgx = new System.Text.RegularExpressions.Regex("constructor", "()");
            Bridge.Test.Assert.areEqual$1("0", rgx.groupNameFromNumber(0), "EmptyGroup.GroupNameFromNumber(0)");
            Bridge.Test.Assert.areEqual$1("1", rgx.groupNameFromNumber(1), "EmptyGroup.GroupNameFromNumber(1)");
    
            rgx = new System.Text.RegularExpressions.Regex("constructor", "(group1)");
            Bridge.Test.Assert.areEqual$1("0", rgx.groupNameFromNumber(0), "Group1.GroupNameFromNumber(0)");
            Bridge.Test.Assert.areEqual$1("1", rgx.groupNameFromNumber(1), "Group1.GroupNameFromNumber(1)");
    
            rgx = new System.Text.RegularExpressions.Regex("constructor", "(group1)(group2)");
            Bridge.Test.Assert.areEqual$1("0", rgx.groupNameFromNumber(0), "Group2.GroupNameFromNumber(0)");
            Bridge.Test.Assert.areEqual$1("1", rgx.groupNameFromNumber(1), "Group2.GroupNameFromNumber(1)");
            Bridge.Test.Assert.areEqual$1("2", rgx.groupNameFromNumber(2), "Group2.GroupNameFromNumber(2)");
    
            rgx = new System.Text.RegularExpressions.Regex("constructor", "(group1())(group2)");
            Bridge.Test.Assert.areEqual$1("0", rgx.groupNameFromNumber(0), "Group3.GroupNameFromNumber(0)");
            Bridge.Test.Assert.areEqual$1("1", rgx.groupNameFromNumber(1), "Group3.GroupNameFromNumber(1)");
            Bridge.Test.Assert.areEqual$1("2", rgx.groupNameFromNumber(2), "Group3.GroupNameFromNumber(2)");
            Bridge.Test.Assert.areEqual$1("3", rgx.groupNameFromNumber(3), "Group3.GroupNameFromNumber(3)");
    
            rgx = new System.Text.RegularExpressions.Regex("constructor", "(?<name1>)");
            Bridge.Test.Assert.areEqual$1("0", rgx.groupNameFromNumber(0), "NameGroup1.GroupNameFromNumber(0)");
            Bridge.Test.Assert.areEqual$1("name1", rgx.groupNameFromNumber(1), "NameGroup1.GroupNameFromNumber(1)");
    
    
            rgx = new System.Text.RegularExpressions.Regex("constructor", "(?<name1>)(?'name2')");
            Bridge.Test.Assert.areEqual$1("0", rgx.groupNameFromNumber(0), "NameGroup2.GroupNameFromNumber(0)");
            Bridge.Test.Assert.areEqual$1("name1", rgx.groupNameFromNumber(1), "NameGroup2.GroupNameFromNumber(1)");
            Bridge.Test.Assert.areEqual$1("name2", rgx.groupNameFromNumber(2), "NameGroup2.GroupNameFromNumber(2)");
    
            rgx = new System.Text.RegularExpressions.Regex("constructor", "(?<name1>(?'inner1'))(?'name2')");
            Bridge.Test.Assert.areEqual$1("0", rgx.groupNameFromNumber(0), "NameGroup3.GroupNameFromNumber(0)");
            Bridge.Test.Assert.areEqual$1("name1", rgx.groupNameFromNumber(1), "NameGroup3.GroupNameFromNumber(1)");
            Bridge.Test.Assert.areEqual$1("inner1", rgx.groupNameFromNumber(2), "NameGroup3.GroupNameFromNumber(2)");
            Bridge.Test.Assert.areEqual$1("name2", rgx.groupNameFromNumber(3), "NameGroup3.GroupNameFromNumber(3)");
    
            Bridge.Test.Assert.areEqual$1("", rgx.groupNameFromNumber(999), "NameGroup3.GroupNameFromNumber(999)");
    
            rgx = new System.Text.RegularExpressions.Regex("constructor", "(?<test>)()");
            Bridge.Test.Assert.areEqual$1("0", rgx.groupNameFromNumber(0), "NameGroupAndNoname1.GroupNameFromNumber(0)");
            Bridge.Test.Assert.areEqual$1("1", rgx.groupNameFromNumber(1), "NameGroupAndNoname1.GroupNameFromNumber(1)");
            Bridge.Test.Assert.areEqual$1("test", rgx.groupNameFromNumber(2), "NameGroupAndNoname1.GroupNameFromNumber(2)");
        },
        groupNumberFromNameTest: function () {
            var rgx = new System.Text.RegularExpressions.Regex("constructor", "");
            Bridge.Test.Assert.areEqual$1(0, rgx.groupNumberFromName("0"), "EmptyRegex.GroupNumberFromName(\"0\")");
    
            rgx = new System.Text.RegularExpressions.Regex("constructor", "()");
            Bridge.Test.Assert.areEqual$1(0, rgx.groupNumberFromName("0"), "EmptyGroup.GroupNumberFromName(\"0\")");
            Bridge.Test.Assert.areEqual$1(1, rgx.groupNumberFromName("1"), "EmptyGroup.GroupNumberFromName(\"1\")");
    
            rgx = new System.Text.RegularExpressions.Regex("constructor", "(group1)");
            Bridge.Test.Assert.areEqual$1(0, rgx.groupNumberFromName("0"), "Group1.GroupNumberFromName(\"0\")");
            Bridge.Test.Assert.areEqual$1(1, rgx.groupNumberFromName("1"), "Group1.GroupNumberFromName(\"1\")");
    
            rgx = new System.Text.RegularExpressions.Regex("constructor", "(group1)(group2)");
            Bridge.Test.Assert.areEqual$1("0", rgx.groupNameFromNumber(0), "Group2.GroupNameFromNumber(0)");
            Bridge.Test.Assert.areEqual$1("1", rgx.groupNameFromNumber(1), "Group2.GroupNameFromNumber(1)");
            Bridge.Test.Assert.areEqual$1("2", rgx.groupNameFromNumber(2), "Group2.GroupNameFromNumber(2)");
    
            rgx = new System.Text.RegularExpressions.Regex("constructor", "(group1())(group2)");
            Bridge.Test.Assert.areEqual$1(0, rgx.groupNumberFromName("0"), "Group3.GroupNumberFromName(\"0\")");
            Bridge.Test.Assert.areEqual$1(1, rgx.groupNumberFromName("1"), "Group3.GroupNumberFromName(\"1\")");
            Bridge.Test.Assert.areEqual$1(2, rgx.groupNumberFromName("2"), "Group3.GroupNumberFromName(\"2\")");
            Bridge.Test.Assert.areEqual$1(3, rgx.groupNumberFromName("3"), "Group3.GroupNumberFromName(\"3\")");
    
            rgx = new System.Text.RegularExpressions.Regex("constructor", "(?<name1>)");
            Bridge.Test.Assert.areEqual$1(0, rgx.groupNumberFromName("0"), "NameGroup1.GroupNumberFromName(\"0\")");
            Bridge.Test.Assert.areEqual$1(1, rgx.groupNumberFromName("name1"), "NameGroup1.GroupNumberFromName(\"name1\")");
    
            rgx = new System.Text.RegularExpressions.Regex("constructor", "(?<name1>)(?'name2')");
            Bridge.Test.Assert.areEqual$1(0, rgx.groupNumberFromName("0"), "NameGroup2.GroupNumberFromName(\"0\")");
            Bridge.Test.Assert.areEqual$1(1, rgx.groupNumberFromName("name1"), "NameGroup2.GroupNumberFromName(\"name1\")");
            Bridge.Test.Assert.areEqual$1(2, rgx.groupNumberFromName("name2"), "NameGroup2.GroupNumberFromName(\"name2\")");
    
    
            rgx = new System.Text.RegularExpressions.Regex("constructor", "(?<name1>(?'inner1'))(?'name2')");
            Bridge.Test.Assert.areEqual$1(0, rgx.groupNumberFromName("0"), "NameGroup3.GroupNumberFromName(\"0\")");
            Bridge.Test.Assert.areEqual$1(1, rgx.groupNumberFromName("name1"), "NameGroup3.GroupNumberFromName(\"name1\")");
            Bridge.Test.Assert.areEqual$1(2, rgx.groupNumberFromName("inner1"), "NameGroup3.GroupNumberFromName(\"inner1\")");
            Bridge.Test.Assert.areEqual$1(3, rgx.groupNumberFromName("name2"), "NameGroup3.GroupNumberFromName(\"name2\")");
    
            Bridge.Test.Assert.areEqual$1(-1, rgx.groupNumberFromName("Fake"), "NameGroup3.GroupNumberFromName(\"Fake\")");
    
            rgx = new System.Text.RegularExpressions.Regex("constructor", "(?<test>)()");
            Bridge.Test.Assert.areEqual$1(0, rgx.groupNumberFromName("0"), "NameGroupAndNoname1.GroupNumberFromName(\"0\")");
            Bridge.Test.Assert.areEqual$1(1, rgx.groupNumberFromName("1"), "NameGroupAndNoname1.GroupNumberFromName(\"1\")");
            Bridge.Test.Assert.areEqual$1(2, rgx.groupNumberFromName("test"), "NameGroupAndNoname1.GroupNumberFromName(\"test\")");
        },
        supportedOptionsTest: function () {
            var $t;
            var supportedOptions = Bridge.merge(new System.Collections.Generic.Dictionary$2(System.Text.RegularExpressions.RegexOptions,Boolean)(), [
                [0, true],
                [1, true],
                [2, true],
                [4, false],
                [8, false],
                [16, true],
                [32, true],
                [64, false],
                [256, false],
                [512, false]
            ] );
    
            $t = Bridge.getEnumerator(supportedOptions);
            while ($t.moveNext()) {
                (function () {
                    var supportedOption = $t.getCurrent();
                    if (supportedOption.value) {
                        var rgx = new System.Text.RegularExpressions.Regex("constructor$1", Bridge.ClientTest.Text.RegularExpressions.RegexEntityTests.Pattern, supportedOption.key);
                    }
                    else  {
                        Bridge.Test.Assert.throws$6(System.NotSupportedException, function () {
                            new System.Text.RegularExpressions.Regex("constructor$1", Bridge.ClientTest.Text.RegularExpressions.RegexEntityTests.Pattern, supportedOption.key);
                        });
                    }
                }).call(this);
            }
        },
        matchNamedGroupTest: function () {
            var pattern = "(?<test>A)(B)";
            var text = "AB";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 2, "AB", 3, true);
    
            this.validateGroup(m, 0, 0, 2, true, "AB", 1);
            this.validateCapture(m, 0, 0, 0, 2, "AB");
    
            this.validateGroup(m, 1, 1, 1, true, "B", 1);
            this.validateCapture(m, 1, 0, 1, 1, "B");
    
            this.validateGroup(m, 2, 0, 1, true, "A", 1);
            this.validateCapture(m, 2, 0, 0, 1, "A");
    
            this.groupsAreEqual(m.getGroups().get(2), m.getGroups().getByName("test"), "Named Group is correct");
        },
        matchInnerNamedGroupTest1: function () {
            var pattern = "((?<test>A)(B))";
            var text = "AB";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 2, "AB", 4, true);
    
            this.validateGroup(m, 0, 0, 2, true, "AB", 1);
            this.validateCapture(m, 0, 0, 0, 2, "AB");
    
            this.validateGroup(m, 1, 0, 2, true, "AB", 1);
            this.validateCapture(m, 1, 0, 0, 2, "AB");
    
            this.validateGroup(m, 2, 1, 1, true, "B", 1);
            this.validateCapture(m, 2, 0, 1, 1, "B");
    
            this.validateGroup(m, 3, 0, 1, true, "A", 1);
            this.validateCapture(m, 3, 0, 0, 1, "A");
    
            this.groupsAreEqual(m.getGroups().get(3), m.getGroups().getByName("test"), "Named Group is correct");
        },
        matchInnerNamedGroupTest2: function () {
            var pattern = "(?<outer>(C)(?<inner1>(?<inner2>A)+)(B))";
            var text = "CAAAB";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 5, "CAAAB", 6, true);
    
            this.validateGroup(m, 0, 0, 5, true, "CAAAB", 1);
            this.validateCapture(m, 0, 0, 0, 5, "CAAAB");
    
            this.validateGroup(m, 1, 0, 1, true, "C", 1);
            this.validateCapture(m, 1, 0, 0, 1, "C");
    
            this.validateGroup(m, 2, 4, 1, true, "B", 1);
            this.validateCapture(m, 2, 0, 4, 1, "B");
    
            this.validateGroup(m, 3, 0, 5, true, "CAAAB", 1);
            this.validateCapture(m, 3, 0, 0, 5, "CAAAB");
    
            this.validateGroup(m, 4, 1, 3, true, "AAA", 1);
            this.validateCapture(m, 4, 0, 1, 3, "AAA");
    
            this.validateGroup(m, 5, 3, 1, true, "A", 3);
            this.validateCapture(m, 5, 0, 1, 1, "A");
            this.validateCapture(m, 5, 1, 2, 1, "A");
            this.validateCapture(m, 5, 2, 3, 1, "A");
    
            this.groupsAreEqual(m.getGroups().get(4), m.getGroups().getByName("inner1"), "Named Group is correct");
        },
        groupOrderingTest: function () {
            var $t;
            var pattern = "(C)(?<group1>A)+(B)";
            var text = "CAAAB";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 5, "CAAAB", 4, true);
    
            var expected = new System.Collections.Generic.List$1(String)();
    
            this.validateGroup(m, 0, 0, 5, true, "CAAAB", 1);
            this.validateCapture(m, 0, 0, 0, 5, "CAAAB");
            expected.add("CAAAB");
    
            this.validateGroup(m, 1, 0, 1, true, "C", 1);
            this.validateCapture(m, 1, 0, 0, 1, "C");
            expected.add("C");
    
            this.validateGroup(m, 2, 4, 1, true, "B", 1);
            this.validateCapture(m, 2, 0, 4, 1, "B");
            expected.add("B");
    
            this.validateGroup(m, 3, 3, 1, true, "A", 3);
            this.validateCapture(m, 3, 0, 1, 1, "A");
            this.validateCapture(m, 3, 1, 2, 1, "A");
            this.validateCapture(m, 3, 2, 3, 1, "A");
            expected.add("A");
    
            var i = 0;
            $t = Bridge.getEnumerator(m.getGroups());
            while ($t.moveNext()) {
                var group = $t.getCurrent();
                Bridge.Test.Assert.areEqual$1(expected.getItem(i), group.getValue(), "Group[" + i + "].Value is correct");
                i = (i + 1) | 0;
            }
        },
        repeatingGroupTest: function () {
            var pattern = "((A(\\d)*A)x(B(\\d)*B)+)";
            var text = "A123AxBBB";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 8, "A123AxBB", 6, true);
    
            this.validateGroup(m, 0, 0, 8, true, "A123AxBB", 1);
            this.validateCapture(m, 0, 0, 0, 8, "A123AxBB");
    
            this.validateGroup(m, 1, 0, 8, true, "A123AxBB", 1);
            this.validateCapture(m, 1, 0, 0, 8, "A123AxBB");
    
            this.validateGroup(m, 2, 0, 5, true, "A123A", 1);
            this.validateCapture(m, 2, 0, 0, 5, "A123A");
    
            this.validateGroup(m, 3, 3, 1, true, "3", 3);
            this.validateCapture(m, 3, 0, 1, 1, "1");
            this.validateCapture(m, 3, 1, 2, 1, "2");
            this.validateCapture(m, 3, 2, 3, 1, "3");
    
            this.validateGroup(m, 4, 6, 2, true, "BB", 1);
            this.validateCapture(m, 4, 0, 6, 2, "BB");
    
            this.validateGroup(m, 5, 0, 0, false, "", 0);
        },
        zeroResultTest: function () {
            // Case 1:
            var pattern = "()";
            var text = "ABC";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 0, "", 2, true);
    
            this.validateGroup(m, 0, 0, 0, true, "", 1);
            this.validateCapture(m, 0, 0, 0, 0, "");
    
            this.validateGroup(m, 1, 0, 0, true, "", 1);
            this.validateCapture(m, 1, 0, 0, 0, "");
    
    
            // Case 2:
            pattern = "(B?)";
            text = "ABC";
            rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            m = rgx.match(text);
    
            this.validateMatch(m, 0, 0, "", 2, true);
    
            this.validateGroup(m, 0, 0, 0, true, "", 1);
            this.validateCapture(m, 0, 0, 0, 0, "");
    
            this.validateGroup(m, 1, 0, 0, true, "", 1);
            this.validateCapture(m, 1, 0, 0, 0, "");
    
    
            // Case 3:
            pattern = "(B)?";
            text = "ABC";
            rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            m = rgx.match(text);
    
            this.validateMatch(m, 0, 0, "", 2, true);
    
            this.validateGroup(m, 0, 0, 0, true, "", 1);
            this.validateCapture(m, 0, 0, 0, 0, "");
    
            this.validateGroup(m, 1, 0, 0, false, "", 0);
        },
        nonCapturingGroupsTest: function () {
            var pattern = "(?:Q(?<noncapInner>A)Z)(B)(?:C)";
            var text = "QAZBC";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 5, "QAZBC", 3, true);
    
            this.validateGroup(m, 0, 0, 5, true, "QAZBC", 1);
            this.validateCapture(m, 0, 0, 0, 5, "QAZBC");
    
            this.validateGroup(m, 1, 3, 1, true, "B", 1);
            this.validateCapture(m, 1, 0, 3, 1, "B");
    
            this.validateGroup(m, 2, 1, 1, true, "A", 1);
            this.validateCapture(m, 2, 0, 1, 1, "A");
    
        }
    });
    
    Bridge.define('Bridge.ClientTest.Text.RegularExpressions.RegexGroupCollectionTests', {
        inherits: [Bridge.ClientTest.Text.RegularExpressions.RegexTestBase],
        statics: {
            Pattern: "((?:\\w)+[\\s\\.])+",
            Text: "This is a sentance. This is another sentance.",
            getTestDataMatch: function (matchIndex) {
                if (matchIndex === void 0) { matchIndex = 1; }
                var rgx = new System.Text.RegularExpressions.Regex("constructor", Bridge.ClientTest.Text.RegularExpressions.RegexGroupCollectionTests.Pattern);
                var m = rgx.match(Bridge.ClientTest.Text.RegularExpressions.RegexGroupCollectionTests.Text);
                for (var i = 1; i < matchIndex; i = (i + 1) | 0) {
                    m = rgx.match$1(Bridge.ClientTest.Text.RegularExpressions.RegexGroupCollectionTests.Text, ((m.getIndex() + m.getLength()) | 0));
                }
    
                return m;
            }
        },
        caseDataTest: function () {
            var m1 = Bridge.ClientTest.Text.RegularExpressions.RegexGroupCollectionTests.getTestDataMatch();
    
            this.validateMatch(m1, 0, 19, "This is a sentance.", 2, true);
    
            this.validateGroup(m1, 0, 0, 19, true, "This is a sentance.", 1);
            this.validateCapture(m1, 0, 0, 0, 19, "This is a sentance.");
    
            this.validateGroup(m1, 1, 10, 9, true, "sentance.", 4);
            this.validateCapture(m1, 1, 0, 0, 5, "This ");
            this.validateCapture(m1, 1, 1, 5, 3, "is ");
            this.validateCapture(m1, 1, 2, 8, 2, "a ");
            this.validateCapture(m1, 1, 3, 10, 9, "sentance.");
    
            var m2 = Bridge.ClientTest.Text.RegularExpressions.RegexGroupCollectionTests.getTestDataMatch(2);
    
            this.validateMatch(m2, 20, 25, "This is another sentance.", 2, true);
    
            this.validateGroup(m2, 0, 20, 25, true, "This is another sentance.", 1);
            this.validateCapture(m2, 0, 0, 20, 25, "This is another sentance.");
    
            this.validateGroup(m2, 1, 36, 9, true, "sentance.", 4);
            this.validateCapture(m2, 1, 0, 20, 5, "This ");
            this.validateCapture(m2, 1, 1, 25, 3, "is ");
            this.validateCapture(m2, 1, 2, 28, 8, "another ");
            this.validateCapture(m2, 1, 3, 36, 9, "sentance.");
        },
        groupCollectionFieldsTest: function () {
            var m = Bridge.ClientTest.Text.RegularExpressions.RegexGroupCollectionTests.getTestDataMatch();
            var groups = m.getGroups();
    
            Bridge.Test.Assert.areEqual$1(2, groups.getCount(), "Groups.Count");
            Bridge.Test.Assert.areEqual$1(true, groups.getIsReadOnly(), "Groups.IsReadOnly");
            Bridge.Test.Assert.areEqual$1(false, groups.getIsSynchronized(), "Groups.IsSynchronized");
            Bridge.Test.Assert.areEqual$1(m, groups.getSyncRoot(), "Groups.SyncRoot");
        },
        groupCollectionForeachTest: function () {
            var $t;
            var m = Bridge.ClientTest.Text.RegularExpressions.RegexGroupCollectionTests.getTestDataMatch();
            var groups = m.getGroups();
    
            var i = 0;
            $t = Bridge.getEnumerator(groups);
            while ($t.moveNext()) {
                var groupObj = $t.getCurrent();
                var group = Bridge.as(groupObj, System.Text.RegularExpressions.Group);
                this.groupsAreEqual(groups.get(i), group, "Groups[" + i + "]");
                i = (i + 1) | 0;
            }
        },
        groupCollectionEnumeratorTest: function () {
            var m = Bridge.ClientTest.Text.RegularExpressions.RegexGroupCollectionTests.getTestDataMatch();
            var groups = m.getGroups();
    
            var en = groups.getEnumerator();
    
            Bridge.Test.Assert.true$1(en.moveNext(), "First call - MoveNext()");
    
            var i = 0;
            do  {
                var group = Bridge.as(en.getCurrent(), System.Text.RegularExpressions.Group);
                this.groupsAreEqual(groups.get(i), group, "Groups[" + i + "]");
                i = (i + 1) | 0;
    
            } while (en.moveNext());
    
            Bridge.Test.Assert.areEqual$1(groups.getCount(), i, "Groups.Count");
        },
        groupCollectionCopyToTest: function () {
            var m = Bridge.ClientTest.Text.RegularExpressions.RegexGroupCollectionTests.getTestDataMatch();
            var groups = m.getGroups();
    
            var dstArray = System.Array.init(groups.getCount(), null);
            groups.copyTo(dstArray, 0);
    
            for (var i = 0; i < groups.getCount(); i = (i + 1) | 0) {
                this.groupsAreEqual(groups.get(i), dstArray[i], "Groups[" + i + "]");
            }
    
            Bridge.Test.Assert.throws$2(function () {
                groups.copyTo(null, 0);
            }, $_.Bridge.ClientTest.Text.RegularExpressions.RegexGroupCollectionTests.f1, "Exception: Array is not null.");
            Bridge.Test.Assert.throws$2(function () {
                groups.copyTo(dstArray, 1);
            }, $_.Bridge.ClientTest.Text.RegularExpressions.RegexGroupCollectionTests.f2, "Exception: Out of range.");
        }
    });
    
    Bridge.ns("Bridge.ClientTest.Text.RegularExpressions.RegexGroupCollectionTests", $_);
    
    Bridge.apply($_.Bridge.ClientTest.Text.RegularExpressions.RegexGroupCollectionTests, {
        f1: function (err) {
            return Bridge.referenceEquals(Bridge.getTypeName(err), Bridge.getTypeName(System.ArgumentNullException));
        },
        f2: function (err) {
            return Bridge.referenceEquals(Bridge.getTypeName(err), Bridge.getTypeName(System.IndexOutOfRangeException));
        }
    });
    
    Bridge.define('Bridge.ClientTest.Text.RegularExpressions.RegexInlineOptionsTests', {
        inherits: [Bridge.ClientTest.Text.RegularExpressions.RegexTestBase],
        msdnMultilineInlineOptionTest: function () {
            var pattern = "(?m)^(\\w+)\\s(\\d+)\\r*$";
            var text = "Joe 164\nSam 208\nAllison 211\nGwen 171\n";
    
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var ms = rgx.matches(text);
    
            Bridge.Test.Assert.areEqual$1(4, ms.getCount(), "Matches count is correct.");
    
            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 7, "Joe 164", 3, true);
    
            this.validateGroup(ms.get(0), 0, 0, 7, true, "Joe 164", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 7, "Joe 164");
    
            this.validateGroup(ms.get(0), 1, 0, 3, true, "Joe", 1);
            this.validateCapture(ms.get(0), 1, 0, 0, 3, "Joe");
    
            this.validateGroup(ms.get(0), 2, 4, 3, true, "164", 1);
            this.validateCapture(ms.get(0), 2, 0, 4, 3, "164");
    
            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 8, 7, "Sam 208", 3, true);
    
            this.validateGroup(ms.get(1), 0, 8, 7, true, "Sam 208", 1);
            this.validateCapture(ms.get(1), 0, 0, 8, 7, "Sam 208");
    
            this.validateGroup(ms.get(1), 1, 8, 3, true, "Sam", 1);
            this.validateCapture(ms.get(1), 1, 0, 8, 3, "Sam");
    
            this.validateGroup(ms.get(1), 2, 12, 3, true, "208", 1);
            this.validateCapture(ms.get(1), 2, 0, 12, 3, "208");
    
            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 16, 11, "Allison 211", 3, true);
    
            this.validateGroup(ms.get(2), 0, 16, 11, true, "Allison 211", 1);
            this.validateCapture(ms.get(2), 0, 0, 16, 11, "Allison 211");
    
            this.validateGroup(ms.get(2), 1, 16, 7, true, "Allison", 1);
            this.validateCapture(ms.get(2), 1, 0, 16, 7, "Allison");
    
            this.validateGroup(ms.get(2), 2, 24, 3, true, "211", 1);
            this.validateCapture(ms.get(2), 2, 0, 24, 3, "211");
    
            // Match #3:
            Bridge.Test.Assert.notNull$1(ms.get(3), "Match[3] is not null.");
            this.validateMatch(ms.get(3), 28, 8, "Gwen 171", 3, true);
    
            this.validateGroup(ms.get(3), 0, 28, 8, true, "Gwen 171", 1);
            this.validateCapture(ms.get(3), 0, 0, 28, 8, "Gwen 171");
    
            this.validateGroup(ms.get(3), 1, 28, 4, true, "Gwen", 1);
            this.validateCapture(ms.get(3), 1, 0, 28, 4, "Gwen");
    
            this.validateGroup(ms.get(3), 2, 33, 3, true, "171", 1);
            this.validateCapture(ms.get(3), 2, 0, 33, 3, "171");
    
        },
        msdnSinglelineInlineOptionTest: function () {
            var pattern = "(?s)^.+";
            var text = "This is one line and\r\nthis is the second.";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 41, "This is one line and\r\nthis is the second.", 1, true);
    
            this.validateGroup(m, 0, 0, 41, true, "This is one line and\r\nthis is the second.", 1);
            this.validateCapture(m, 0, 0, 0, 41, "This is one line and\r\nthis is the second.");
        },
        msdnIngoreWhitespaceInlineOptionTest1: function () {
            var pattern = "\\b(D\\w+)(?x) \\s (d\\w+) \\b";
            var text = "double dare double Double a Drooling dog The Dreaded Deep";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var m = rgx.match(text);
    
            this.validateMatch(m, 28, 12, "Drooling dog", 3, true);
    
            this.validateGroup(m, 0, 28, 12, true, "Drooling dog", 1);
            this.validateCapture(m, 0, 0, 28, 12, "Drooling dog");
    
            this.validateGroup(m, 1, 28, 8, true, "Drooling", 1);
            this.validateCapture(m, 1, 0, 28, 8, "Drooling");
    
            this.validateGroup(m, 2, 37, 3, true, "dog", 1);
            this.validateCapture(m, 2, 0, 37, 3, "dog");
    
        },
        msdnIngoreWhitespaceInlineOptionTest2: function () {
            var pattern = "\\{\\d+(,-*\\d+)*(\\:\\w{1,4}?)*\\}(?x) # Looks for a composite format item.";
            var text = "{0,-3:F}";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 8, "{0,-3:F}", 3, true);
    
            this.validateGroup(m, 0, 0, 8, true, "{0,-3:F}", 1);
            this.validateCapture(m, 0, 0, 0, 8, "{0,-3:F}");
    
            this.validateGroup(m, 1, 2, 3, true, ",-3", 1);
            this.validateCapture(m, 1, 0, 2, 3, ",-3");
    
            this.validateGroup(m, 2, 5, 2, true, ":F", 1);
            this.validateCapture(m, 2, 0, 5, 2, ":F");
        },
        msdnIngoreWhitespaceInlineOptionTest3: function () {
            var pattern = "(?x)\\b \\(? ( (?:\\w+) ,?\\s? )+  [\\.!?] \\)? # Matches an entire sentence.";
            var text = "This is the first sentence. Is it the beginning of a literary masterpiece? I think not. Instead, it is a nonsensical paragraph.";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var ms = rgx.matches(text);
    
            Bridge.Test.Assert.areEqual$1(4, ms.getCount(), "Matches count is correct.");
    
            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 27, "This is the first sentence.", 2, true);
    
            this.validateGroup(ms.get(0), 0, 0, 27, true, "This is the first sentence.", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 27, "This is the first sentence.");
    
            this.validateGroup(ms.get(0), 1, 18, 8, true, "sentence", 5);
            this.validateCapture(ms.get(0), 1, 0, 0, 5, "This ");
            this.validateCapture(ms.get(0), 1, 1, 5, 3, "is ");
            this.validateCapture(ms.get(0), 1, 2, 8, 4, "the ");
            this.validateCapture(ms.get(0), 1, 3, 12, 6, "first ");
            this.validateCapture(ms.get(0), 1, 4, 18, 8, "sentence");
    
            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 28, 46, "Is it the beginning of a literary masterpiece?", 2, true);
    
            this.validateGroup(ms.get(1), 0, 28, 46, true, "Is it the beginning of a literary masterpiece?", 1);
            this.validateCapture(ms.get(1), 0, 0, 28, 46, "Is it the beginning of a literary masterpiece?");
    
            this.validateGroup(ms.get(1), 1, 62, 11, true, "masterpiece", 8);
            this.validateCapture(ms.get(1), 1, 0, 28, 3, "Is ");
            this.validateCapture(ms.get(1), 1, 1, 31, 3, "it ");
            this.validateCapture(ms.get(1), 1, 2, 34, 4, "the ");
            this.validateCapture(ms.get(1), 1, 3, 38, 10, "beginning ");
            this.validateCapture(ms.get(1), 1, 4, 48, 3, "of ");
            this.validateCapture(ms.get(1), 1, 5, 51, 2, "a ");
            this.validateCapture(ms.get(1), 1, 6, 53, 9, "literary ");
            this.validateCapture(ms.get(1), 1, 7, 62, 11, "masterpiece");
    
            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 75, 12, "I think not.", 2, true);
    
            this.validateGroup(ms.get(2), 0, 75, 12, true, "I think not.", 1);
            this.validateCapture(ms.get(2), 0, 0, 75, 12, "I think not.");
    
            this.validateGroup(ms.get(2), 1, 83, 3, true, "not", 3);
            this.validateCapture(ms.get(2), 1, 0, 75, 2, "I ");
            this.validateCapture(ms.get(2), 1, 1, 77, 6, "think ");
            this.validateCapture(ms.get(2), 1, 2, 83, 3, "not");
    
            // Match #3:
            Bridge.Test.Assert.notNull$1(ms.get(3), "Match[3] is not null.");
            this.validateMatch(ms.get(3), 88, 39, "Instead, it is a nonsensical paragraph.", 2, true);
    
            this.validateGroup(ms.get(3), 0, 88, 39, true, "Instead, it is a nonsensical paragraph.", 1);
            this.validateCapture(ms.get(3), 0, 0, 88, 39, "Instead, it is a nonsensical paragraph.");
    
            this.validateGroup(ms.get(3), 1, 117, 9, true, "paragraph", 6);
            this.validateCapture(ms.get(3), 1, 0, 88, 9, "Instead, ");
            this.validateCapture(ms.get(3), 1, 1, 97, 3, "it ");
            this.validateCapture(ms.get(3), 1, 2, 100, 3, "is ");
            this.validateCapture(ms.get(3), 1, 3, 103, 2, "a ");
            this.validateCapture(ms.get(3), 1, 4, 105, 12, "nonsensical ");
            this.validateCapture(ms.get(3), 1, 5, 117, 9, "paragraph");
        },
        multilineInlineOptionTest1: function () {
            var pattern = "(?-m)^abc$";
            var text = "abc\nabc";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 0, "", 1, false);
    
            this.validateGroup(m, 0, 0, 0, false, "", 0);
    
        },
        multilineInlineOptionTest2: function () {
            var pattern = "(?m)^abc$";
            var text = "abc\nabc";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var ms = rgx.matches(text);
    
            Bridge.Test.Assert.areEqual$1(2, ms.getCount(), "Matches count is correct.");
    
            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 3, "abc", 1, true);
    
            this.validateGroup(ms.get(0), 0, 0, 3, true, "abc", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 3, "abc");
    
            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 4, 3, "abc", 1, true);
    
            this.validateGroup(ms.get(1), 0, 4, 3, true, "abc", 1);
            this.validateCapture(ms.get(1), 0, 0, 4, 3, "abc");
    
        },
        multilineInlineOptionTest3: function () {
            var pattern = "(?m)^abc(?-m)$";
            var text = "abc\nabc";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var m = rgx.match(text);
    
            this.validateMatch(m, 4, 3, "abc", 1, true);
    
            this.validateGroup(m, 0, 4, 3, true, "abc", 1);
            this.validateCapture(m, 0, 0, 4, 3, "abc");
        },
        multilineInlineOptionTest4: function () {
            var pattern = "^abc(?-m)$";
            var text = "abc\nabc";
            var rgx = new System.Text.RegularExpressions.Regex("constructor$1", pattern, 2);
            var m = rgx.match(text);
    
            this.validateMatch(m, 4, 3, "abc", 1, true);
    
            this.validateGroup(m, 0, 4, 3, true, "abc", 1);
            this.validateCapture(m, 0, 0, 4, 3, "abc");
        },
        multilineInlineOptionTest5: function () {
            var pattern = "(?m:^ab(c(?-m)$))";
            var text = "abc\nabc";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var m = rgx.match(text);
    
            this.validateMatch(m, 4, 3, "abc", 2, true);
    
            this.validateGroup(m, 0, 4, 3, true, "abc", 1);
            this.validateCapture(m, 0, 0, 4, 3, "abc");
    
            this.validateGroup(m, 1, 6, 1, true, "c", 1);
            this.validateCapture(m, 1, 0, 6, 1, "c");
        },
        multilineInlineOptionTest6: function () {
            var pattern = "(?m:^(.*)$)";
            var text = "abc\r\ndef\r\nhij";
            var rgx = new System.Text.RegularExpressions.Regex("constructor$1", pattern, 2);
            var ms = rgx.matches(text);
    
            Bridge.Test.Assert.areEqual$1(3, ms.getCount(), "Matches count is correct.");
    
            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 4, "abc\r", 2, true);
    
            this.validateGroup(ms.get(0), 0, 0, 4, true, "abc\r", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 4, "abc\r");
    
            this.validateGroup(ms.get(0), 1, 0, 4, true, "abc\r", 1);
            this.validateCapture(ms.get(0), 1, 0, 0, 4, "abc\r");
    
            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 5, 4, "def\r", 2, true);
    
            this.validateGroup(ms.get(1), 0, 5, 4, true, "def\r", 1);
            this.validateCapture(ms.get(1), 0, 0, 5, 4, "def\r");
    
            this.validateGroup(ms.get(1), 1, 5, 4, true, "def\r", 1);
            this.validateCapture(ms.get(1), 1, 0, 5, 4, "def\r");
    
            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 10, 3, "hij", 2, true);
    
            this.validateGroup(ms.get(2), 0, 10, 3, true, "hij", 1);
            this.validateCapture(ms.get(2), 0, 0, 10, 3, "hij");
    
            this.validateGroup(ms.get(2), 1, 10, 3, true, "hij", 1);
            this.validateCapture(ms.get(2), 1, 0, 10, 3, "hij");
        },
        multilineInlineOptionTest7: function () {
            var pattern = "(?m:^(.*)(?-m)$)";
            var text = "abc\r\nabc";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var m = rgx.match(text);
    
            this.validateMatch(m, 5, 3, "abc", 2, true);
    
            this.validateGroup(m, 0, 5, 3, true, "abc", 1);
            this.validateCapture(m, 0, 0, 5, 3, "abc");
    
            this.validateGroup(m, 1, 5, 3, true, "abc", 1);
            this.validateCapture(m, 1, 0, 5, 3, "abc");
    
        },
        singlelineInlineOptionTest1: function () {
            var pattern = "(?s).+";
            var text = "abc\r\nabc";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 8, "abc\r\nabc", 1, true);
    
            this.validateGroup(m, 0, 0, 8, true, "abc\r\nabc", 1);
            this.validateCapture(m, 0, 0, 0, 8, "abc\r\nabc");
        },
        singlelineInlineOptionTest2: function () {
            var pattern = "(?s).+def(?-s)(.+hij)?";
            var text = "abc\r\ndef\r\nhij";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 8, "abc\r\ndef", 2, true);
    
            this.validateGroup(m, 0, 0, 8, true, "abc\r\ndef", 1);
            this.validateCapture(m, 0, 0, 0, 8, "abc\r\ndef");
    
            this.validateGroup(m, 1, 0, 0, false, "", 0);
        },
        singlelineInlineOptionTest3: function () {
            var pattern = "abc(.+)((?-s:.+))(.+)xyz";
            var text = "abc\r\n123\r\nxyz";
            var rgx = new System.Text.RegularExpressions.Regex("constructor$1", pattern, 16);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 13, "abc\r\n123\r\nxyz", 4, true);
    
            this.validateGroup(m, 0, 0, 13, true, "abc\r\n123\r\nxyz", 1);
            this.validateCapture(m, 0, 0, 0, 13, "abc\r\n123\r\nxyz");
    
            this.validateGroup(m, 1, 3, 5, true, "\r\n123", 1);
            this.validateCapture(m, 1, 0, 3, 5, "\r\n123");
    
            this.validateGroup(m, 2, 8, 1, true, "\r", 1);
            this.validateCapture(m, 2, 0, 8, 1, "\r");
    
            this.validateGroup(m, 3, 9, 1, true, "\n", 1);
            this.validateCapture(m, 3, 0, 9, 1, "\n");
        },
        ingoreWhitespaceInlineOptionTest1: function () {
            var pattern = "(?x)abc def";
            var text = "abc def";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 0, "", 1, false);
    
            this.validateGroup(m, 0, 0, 0, false, "", 0);
        },
        ingoreWhitespaceInlineOptionTest2: function () {
            var pattern = "(?x)abc def";
            var text = "abcdef";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 6, "abcdef", 1, true);
    
            this.validateGroup(m, 0, 0, 6, true, "abcdef", 1);
            this.validateCapture(m, 0, 0, 0, 6, "abcdef");
    
        },
        ingoreWhitespaceInlineOptionTest3: function () {
            var pattern = "(?x)abc def(?-x) hij";
            var text = "abcdef hij";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 10, "abcdef hij", 1, true);
    
            this.validateGroup(m, 0, 0, 10, true, "abcdef hij", 1);
            this.validateCapture(m, 0, 0, 0, 10, "abcdef hij");
        },
        ingoreWhitespaceInlineOptionTest4: function () {
            var pattern = "(?-x)abc\tdef";
            var text = "abc\tdef";
            var rgx = new System.Text.RegularExpressions.Regex("constructor$1", pattern, 32);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 7, "abc\tdef", 1, true);
    
            this.validateGroup(m, 0, 0, 7, true, "abc\tdef", 1);
            this.validateCapture(m, 0, 0, 0, 7, "abc\tdef");
        },
        ingoreWhitespaceInlineOptionTest5: function () {
            var pattern = "(?x)[abc ]{3}";
            var text = "ab ";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 3, "ab ", 1, true);
    
            this.validateGroup(m, 0, 0, 3, true, "ab ", 1);
            this.validateCapture(m, 0, 0, 0, 3, "ab ");
        },
        ingoreWhitespaceInlineOptionTest6: function () {
            var pattern = "(?x)abc\\ \\sdef";
            var text = "abc  def";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 8, "abc  def", 1, true);
    
            this.validateGroup(m, 0, 0, 8, true, "abc  def", 1);
            this.validateCapture(m, 0, 0, 0, 8, "abc  def");
        },
        ingoreWhitespaceInlineOptionTest7: function () {
            var pattern = "(?x)abc#def";
            var text = "abcdef";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 3, "abc", 1, true);
    
            this.validateGroup(m, 0, 0, 3, true, "abc", 1);
            this.validateCapture(m, 0, 0, 0, 3, "abc");
        },
        ingoreWhitespaceInlineOptionTest8: function () {
            var pattern = "abc(?x: def) hij";
            var text = "abcdef hij";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 10, "abcdef hij", 1, true);
    
            this.validateGroup(m, 0, 0, 10, true, "abcdef hij", 1);
            this.validateCapture(m, 0, 0, 0, 10, "abcdef hij");
        },
        ingoreWhitespaceInlineOptionTest9: function () {
            var pattern = "(?x)abc #CommentToEOL\ndef";
            var text = "abcdef";
            var rgx = new System.Text.RegularExpressions.Regex("constructor$1", pattern, 0);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 6, "abcdef", 1, true);
    
            this.validateGroup(m, 0, 0, 6, true, "abcdef", 1);
            this.validateCapture(m, 0, 0, 0, 6, "abcdef");
        },
        inlineCommentTest1: function () {
            var pattern = "abc(?# comment )";
            var text = "abc";
            var rgx = new System.Text.RegularExpressions.Regex("constructor$1", pattern, 0);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 3, "abc", 1, true);
    
            this.validateGroup(m, 0, 0, 3, true, "abc", 1);
            this.validateCapture(m, 0, 0, 0, 3, "abc");
        }
    });
    
    Bridge.define('Bridge.ClientTest.Text.RegularExpressions.RegexMatchCollectionTests', {
        inherits: [Bridge.ClientTest.Text.RegularExpressions.RegexTestBase],
        statics: {
            Pattern: "((?:\\w)+[\\s\\.])+",
            Text: "This is a sentance. This is another sentance.",
            getTestDataMatch: function (matchIndex) {
                if (matchIndex === void 0) { matchIndex = 1; }
                var rgx = new System.Text.RegularExpressions.Regex("constructor", Bridge.ClientTest.Text.RegularExpressions.RegexMatchCollectionTests.Pattern);
                var m = rgx.match(Bridge.ClientTest.Text.RegularExpressions.RegexMatchCollectionTests.Text);
                for (var i = 1; i < matchIndex; i = (i + 1) | 0) {
                    m = rgx.match$1(Bridge.ClientTest.Text.RegularExpressions.RegexMatchCollectionTests.Text, ((m.getIndex() + m.getLength()) | 0));
                }
    
                return m;
            },
            getTestDataMatches: function () {
                var rgx = new System.Text.RegularExpressions.Regex("constructor", Bridge.ClientTest.Text.RegularExpressions.RegexMatchCollectionTests.Pattern);
                var m = rgx.matches(Bridge.ClientTest.Text.RegularExpressions.RegexMatchCollectionTests.Text);
                return m;
            }
        },
        caseDataTest: function () {
            var m1 = Bridge.ClientTest.Text.RegularExpressions.RegexMatchCollectionTests.getTestDataMatch();
    
            this.validateMatch(m1, 0, 19, "This is a sentance.", 2, true);
    
            this.validateGroup(m1, 0, 0, 19, true, "This is a sentance.", 1);
            this.validateCapture(m1, 0, 0, 0, 19, "This is a sentance.");
    
            this.validateGroup(m1, 1, 10, 9, true, "sentance.", 4);
            this.validateCapture(m1, 1, 0, 0, 5, "This ");
            this.validateCapture(m1, 1, 1, 5, 3, "is ");
            this.validateCapture(m1, 1, 2, 8, 2, "a ");
            this.validateCapture(m1, 1, 3, 10, 9, "sentance.");
    
            var m2 = Bridge.ClientTest.Text.RegularExpressions.RegexMatchCollectionTests.getTestDataMatch(2);
    
            this.validateMatch(m2, 20, 25, "This is another sentance.", 2, true);
    
            this.validateGroup(m2, 0, 20, 25, true, "This is another sentance.", 1);
            this.validateCapture(m2, 0, 0, 20, 25, "This is another sentance.");
    
            this.validateGroup(m2, 1, 36, 9, true, "sentance.", 4);
            this.validateCapture(m2, 1, 0, 20, 5, "This ");
            this.validateCapture(m2, 1, 1, 25, 3, "is ");
            this.validateCapture(m2, 1, 2, 28, 8, "another ");
            this.validateCapture(m2, 1, 3, 36, 9, "sentance.");
        },
        matchCollectionFieldsTest: function () {
            var matches = Bridge.ClientTest.Text.RegularExpressions.RegexMatchCollectionTests.getTestDataMatches();
    
            Bridge.Test.Assert.areEqual$1(2, matches.getCount(), "Matches.Count");
            Bridge.Test.Assert.areEqual$1(true, matches.getIsReadOnly(), "Matches.IsReadOnly");
            Bridge.Test.Assert.areEqual$1(false, matches.getIsSynchronized(), "Matches.IsSynchronized");
            Bridge.Test.Assert.areEqual$1(matches, matches.getSyncRoot(), "Matches.SyncRoot");
        },
        matchCollectionItemsTest: function () {
            var match1 = Bridge.ClientTest.Text.RegularExpressions.RegexMatchCollectionTests.getTestDataMatch();
            var match2 = Bridge.ClientTest.Text.RegularExpressions.RegexMatchCollectionTests.getTestDataMatch(2);
            var expected = [match1, match2];
    
            var matches = Bridge.ClientTest.Text.RegularExpressions.RegexMatchCollectionTests.getTestDataMatches();
    
            Bridge.Test.Assert.areEqual(expected.length, matches.getCount());
            for (var i = 0; i < expected.length; i = (i + 1) | 0) {
                this.matchesAreEqual(expected[i], matches.get(i), "Matches[" + i + "]");
            }
        },
        matchCollectionForeachTest: function () {
            var $t;
            var match1 = Bridge.ClientTest.Text.RegularExpressions.RegexMatchCollectionTests.getTestDataMatch();
            var match2 = Bridge.ClientTest.Text.RegularExpressions.RegexMatchCollectionTests.getTestDataMatch(2);
            var expected = [match1, match2];
    
            var matches = Bridge.ClientTest.Text.RegularExpressions.RegexMatchCollectionTests.getTestDataMatches();
            var i = 0;
            $t = Bridge.getEnumerator(matches);
            while ($t.moveNext()) {
                var matchObj = $t.getCurrent();
                var match = Bridge.as(matchObj, System.Text.RegularExpressions.Match);
                this.matchesAreEqual(expected[i], match, "Matches[" + i + "]");
                i = (i + 1) | 0;
            }
        },
        matchCollectionEnumeratorTest: function () {
            var match1 = Bridge.ClientTest.Text.RegularExpressions.RegexMatchCollectionTests.getTestDataMatch();
            var match2 = Bridge.ClientTest.Text.RegularExpressions.RegexMatchCollectionTests.getTestDataMatch(2);
            var expected = [match1, match2];
    
            var matches = Bridge.ClientTest.Text.RegularExpressions.RegexMatchCollectionTests.getTestDataMatches();
    
            var en = matches.getEnumerator();
    
            Bridge.Test.Assert.true$1(en.moveNext(), "First call - MoveNext()");
    
            var i = 0;
            do  {
                var match = Bridge.as(en.getCurrent(), System.Text.RegularExpressions.Match);
                this.matchesAreEqual(expected[i], match, "Matches[" + i + "]");
                i = (i + 1) | 0;
    
            } while (en.moveNext());
    
            Bridge.Test.Assert.areEqual$1(expected.length, i, "Matches.Count");
        },
        matchCollectionCopyToTest: function () {
            var matches = Bridge.ClientTest.Text.RegularExpressions.RegexMatchCollectionTests.getTestDataMatches();
            var dstArray = System.Array.init(matches.getCount(), null);
            matches.copyTo(dstArray, 0);
    
            for (var i = 0; i < matches.getCount(); i = (i + 1) | 0) {
                this.matchesAreEqual(matches.get(i), dstArray[i], "Matches[" + i + "]");
            }
    
            Bridge.Test.Assert.throws$2(function () {
                matches.copyTo(null, 0);
            }, $_.Bridge.ClientTest.Text.RegularExpressions.RegexMatchCollectionTests.f1, "Exception: Array is not null.");
            Bridge.Test.Assert.throws$2(function () {
                matches.copyTo(dstArray, 1);
            }, $_.Bridge.ClientTest.Text.RegularExpressions.RegexMatchCollectionTests.f2, "Exception: Out of range.");
        },
        matchCollectionWithEmptyPatternTest: function () {
            var pattern = "";
            var tstText = "characters";
    
            var rx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var matches = rx.matches(tstText);
    
            Bridge.Test.Assert.areEqual(((tstText.length + 1) | 0), matches.getCount());
            for (var i = 0; i < matches.getCount(); i = (i + 1) | 0) {
                Bridge.Test.Assert.areEqual$1(i, matches.get(i).getIndex(), "Matches[" + i + "].Index");
                Bridge.Test.Assert.areEqual$1(0, matches.get(i).getLength(), "Matches[" + i + "].Length");
            }
        }
    });
    
    Bridge.ns("Bridge.ClientTest.Text.RegularExpressions.RegexMatchCollectionTests", $_);
    
    Bridge.apply($_.Bridge.ClientTest.Text.RegularExpressions.RegexMatchCollectionTests, {
        f1: function (err) {
            return Bridge.referenceEquals(Bridge.getTypeName(err), Bridge.getTypeName(System.ArgumentNullException));
        },
        f2: function (err) {
            return Bridge.referenceEquals(Bridge.getTypeName(err), Bridge.getTypeName(System.IndexOutOfRangeException));
        }
    });
    
    Bridge.define('Bridge.ClientTest.Text.RegularExpressions.RegexMatchEntityTests', {
        inherits: [Bridge.ClientTest.Text.RegularExpressions.RegexTestBase],
        statics: {
            Pattern: "((?:\\w)+[\\s\\.])+",
            Text: "This is a sentance. This is another sentance.",
            getTestDataMatch: function (matchIndex) {
                if (matchIndex === void 0) { matchIndex = 1; }
                var rgx = new System.Text.RegularExpressions.Regex("constructor", Bridge.ClientTest.Text.RegularExpressions.RegexMatchEntityTests.Pattern);
                var m = rgx.match(Bridge.ClientTest.Text.RegularExpressions.RegexMatchEntityTests.Text);
                for (var i = 1; i < matchIndex; i = (i + 1) | 0) {
                    m = rgx.match$1(Bridge.ClientTest.Text.RegularExpressions.RegexMatchEntityTests.Text, ((m.getIndex() + m.getLength()) | 0));
                }
    
                return m;
            }
        },
        caseDataTest: function () {
            var m1 = Bridge.ClientTest.Text.RegularExpressions.RegexMatchEntityTests.getTestDataMatch();
    
            this.validateMatch(m1, 0, 19, "This is a sentance.", 2, true);
    
            this.validateGroup(m1, 0, 0, 19, true, "This is a sentance.", 1);
            this.validateCapture(m1, 0, 0, 0, 19, "This is a sentance.");
    
            this.validateGroup(m1, 1, 10, 9, true, "sentance.", 4);
            this.validateCapture(m1, 1, 0, 0, 5, "This ");
            this.validateCapture(m1, 1, 1, 5, 3, "is ");
            this.validateCapture(m1, 1, 2, 8, 2, "a ");
            this.validateCapture(m1, 1, 3, 10, 9, "sentance.");
    
            var m2 = Bridge.ClientTest.Text.RegularExpressions.RegexMatchEntityTests.getTestDataMatch(2);
    
            this.validateMatch(m2, 20, 25, "This is another sentance.", 2, true);
    
            this.validateGroup(m2, 0, 20, 25, true, "This is another sentance.", 1);
            this.validateCapture(m2, 0, 0, 20, 25, "This is another sentance.");
    
            this.validateGroup(m2, 1, 36, 9, true, "sentance.", 4);
            this.validateCapture(m2, 1, 0, 20, 5, "This ");
            this.validateCapture(m2, 1, 1, 25, 3, "is ");
            this.validateCapture(m2, 1, 2, 28, 8, "another ");
            this.validateCapture(m2, 1, 3, 36, 9, "sentance.");
        },
        matchEmptyPatternTest: function () {
            var pattern = "";
            var tstText = "characters";
    
            var rx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var m = rx.match(tstText);
    
            this.validateMatch(m, 0, 0, "", 1, true);
        },
        matchEmptyFieldsTest: function () {
            var m = System.Text.RegularExpressions.Match.getEmpty();
            this.validateMatchNotFound(m);
        },
        matchNextMatchTest: function () {
            var match1 = Bridge.ClientTest.Text.RegularExpressions.RegexMatchEntityTests.getTestDataMatch();
            var match2 = Bridge.ClientTest.Text.RegularExpressions.RegexMatchEntityTests.getTestDataMatch(2);
    
            var actual = match1.nextMatch();
            this.matchesAreEqual(match2, actual, "Matches[1]");
    
            actual = actual.nextMatch();
            this.matchesAreEqual(System.Text.RegularExpressions.Match.getEmpty(), actual, "Matches[1] is Empty");
    
            actual = System.Text.RegularExpressions.Match.getEmpty().nextMatch();
            this.matchesAreEqual(System.Text.RegularExpressions.Match.getEmpty(), actual, "Empty.NextMatch()");
        },
        matchNextMatchWithEmptyPatternTest: function () {
            var pattern = "";
            var tstText = "characters";
    
            var rx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var m = rx.match(tstText);
            this.validateMatch(m, 0, 0, "", 1, true);
    
            for (var i = 1; i < ((tstText.length + 1) | 0); i = (i + 1) | 0) {
                m = m.nextMatch();
                this.validateMatch(m, i, 0, "", 1, true);
            }
    
            m = m.nextMatch();
            this.validateMatchNotFound(m);
        },
        matchResultTest: function () {
            var $t;
            var expected = ["(decisively)", "(whatever time it was)"];
            var actual = new System.Collections.Generic.List$1(String)();
    
            var pattern = "--(.+?)--";
            var replacement = "($1)";
            var input = "He said--decisively--that the time--whatever time it was--had come.";
            $t = Bridge.getEnumerator(System.Text.RegularExpressions.Regex.matches(input, pattern));
            while ($t.moveNext()) {
                var match = $t.getCurrent();
                var result = match.result(replacement);
                actual.add(result);
            }
    
            this.validateCollection(String, expected, actual.toArray(), "Result");
        },
        matchSearchGroupByNameTest: function () {
            var groupNames = ["groupName1", "groupName2", "groupName3"];
    
            var pattern = "(?<" + groupNames[0] + ">\\d+)(?'" + groupNames[1] + "'ZZ)(?<" + groupNames[2] + ">\\s+)";
            var tstText = "Number123ZZ   ";
    
            var rx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var m = rx.match(tstText);
    
            for (var i = 1; i < 4; i = (i + 1) | 0) {
                var groupName = groupNames[((i - 1) | 0)];
                var g = m.getGroups().getByName(groupName);
                this.validateGroup(m, i, g.getIndex(), g.getLength(), g.getSuccess(), g.getValue(), g.getCaptures().getCount());
            }
        }
    });
    
    Bridge.define('Bridge.ClientTest.Text.RegularExpressions.RegexMatchSparseTests', {
        inherits: [Bridge.ClientTest.Text.RegularExpressions.RegexTestBase],
        groupOrderingTest1: function () {
            var pattern = "(a)(b)(?<name>c)(d)";
            var text = "abcd";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 4, "abcd", 5, true);
    
            this.validateGroup(m, 0, 0, 4, true, "abcd", 1);
            this.validateCapture(m, 0, 0, 0, 4, "abcd");
    
            this.validateGroup(m, 1, 0, 1, true, "a", 1);
            this.validateCapture(m, 1, 0, 0, 1, "a");
    
            this.validateGroup(m, 2, 1, 1, true, "b", 1);
            this.validateCapture(m, 2, 0, 1, 1, "b");
    
            this.validateGroup(m, 3, 3, 1, true, "d", 1);
            this.validateCapture(m, 3, 0, 3, 1, "d");
    
            this.validateGroup(m, 4, 2, 1, true, "c", 1);
            this.validateCapture(m, 4, 0, 2, 1, "c");
        },
        groupOrderingTest2: function () {
            var pattern = "(a)(b)(?<4>c)(?<name>d)(e)";
            var text = "abcde";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 5, "abcde", 6, true);
    
            this.validateGroup(m, 0, 0, 5, true, "abcde", 1);
            this.validateCapture(m, 0, 0, 0, 5, "abcde");
    
            this.validateGroup(m, 1, 0, 1, true, "a", 1);
            this.validateCapture(m, 1, 0, 0, 1, "a");
    
            this.validateGroup(m, 2, 1, 1, true, "b", 1);
            this.validateCapture(m, 2, 0, 1, 1, "b");
    
            this.validateGroup(m, 3, 4, 1, true, "e", 1);
            this.validateCapture(m, 3, 0, 4, 1, "e");
    
            this.validateGroup(m, 4, 2, 1, true, "c", 1);
            this.validateCapture(m, 4, 0, 2, 1, "c");
    
            this.validateGroup(m, 5, 3, 1, true, "d", 1);
            this.validateCapture(m, 5, 0, 3, 1, "d");
    
        },
        groupOrderingTest3: function () {
            var pattern = "(a)(b)(?<5>c)(?<name>d)(e)";
            var text = "abcde";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 5, "abcde", 6, true);
    
            this.validateGroup(m, 0, 0, 5, true, "abcde", 1);
            this.validateCapture(m, 0, 0, 0, 5, "abcde");
    
            this.validateGroup(m, 1, 0, 1, true, "a", 1);
            this.validateCapture(m, 1, 0, 0, 1, "a");
    
            this.validateGroup(m, 2, 1, 1, true, "b", 1);
            this.validateCapture(m, 2, 0, 1, 1, "b");
    
            this.validateGroup(m, 3, 4, 1, true, "e", 1);
            this.validateCapture(m, 3, 0, 4, 1, "e");
    
            this.validateGroup(m, 4, 3, 1, true, "d", 1);
            this.validateCapture(m, 4, 0, 3, 1, "d");
    
            this.validateGroup(m, 5, 2, 1, true, "c", 1);
            this.validateCapture(m, 5, 0, 2, 1, "c");
        },
        sparseOrderingTest: function () {
            var pattern = "(?<60>n)(?<50>a)(b)(?<3>c)(?<name>d)(?<70>e)(f)";
            var text = "nabcdef";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 7, "nabcdef", 8, true);
    
            this.validateGroup(m, 0, 0, 7, true, "nabcdef", 1);
            this.validateCapture(m, 0, 0, 0, 7, "nabcdef");
    
            this.validateGroup(m, 1, 2, 1, true, "b", 1);
            this.validateCapture(m, 1, 0, 2, 1, "b");
    
            this.validateGroup(m, 2, 6, 1, true, "f", 1);
            this.validateCapture(m, 2, 0, 6, 1, "f");
    
            this.validateGroup(m, 3, 3, 1, true, "c", 1);
            this.validateCapture(m, 3, 0, 3, 1, "c");
    
            this.validateGroup(m, 4, 4, 1, true, "d", 1);
            this.validateCapture(m, 4, 0, 4, 1, "d");
    
            this.validateGroup(m, 50, 1, 1, true, "a", 1);
            this.validateCapture(m, 50, 0, 1, 1, "a");
    
            this.validateGroup(m, 60, 0, 1, true, "n", 1);
            this.validateCapture(m, 60, 0, 0, 1, "n");
    
            this.validateGroup(m, 70, 5, 1, true, "e", 1);
            this.validateCapture(m, 70, 0, 5, 1, "e");
        },
        groupCapturesMergeTest: function () {
            var pattern = "(a)(b)(?<2>c)(?<name>d)(e)";
            var text = "abcde";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 5, "abcde", 5, true);
    
            this.validateGroup(m, 0, 0, 5, true, "abcde", 1);
            this.validateCapture(m, 0, 0, 0, 5, "abcde");
    
            this.validateGroup(m, 1, 0, 1, true, "a", 1);
            this.validateCapture(m, 1, 0, 0, 1, "a");
    
            this.validateGroup(m, 2, 2, 1, true, "c", 2);
            this.validateCapture(m, 2, 0, 1, 1, "b");
            this.validateCapture(m, 2, 1, 2, 1, "c");
    
            this.validateGroup(m, 3, 4, 1, true, "e", 1);
            this.validateCapture(m, 3, 0, 4, 1, "e");
    
            this.validateGroup(m, 4, 3, 1, true, "d", 1);
            this.validateCapture(m, 4, 0, 3, 1, "d");
        }
    });
    
    Bridge.define('Bridge.ClientTest.Text.RegularExpressions.RegexOptionsTests', {
        inherits: [Bridge.ClientTest.Text.RegularExpressions.RegexTestBase],
        msdnIgnoreCaseOptionTest: function () {
            var pattern = "\\bthe\\w*\\b";
            var text = "The man then told them about that event.";
            var rgx = new System.Text.RegularExpressions.Regex("constructor$1", pattern, 1);
            var ms = rgx.matches(text);
    
            Bridge.Test.Assert.areEqual$1(3, ms.getCount(), "Matches count is correct.");
    
            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 3, "The", 1, true);
    
            this.validateGroup(ms.get(0), 0, 0, 3, true, "The", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 3, "The");
    
            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 8, 4, "then", 1, true);
    
            this.validateGroup(ms.get(1), 0, 8, 4, true, "then", 1);
            this.validateCapture(ms.get(1), 0, 0, 8, 4, "then");
    
            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 18, 4, "them", 1, true);
    
            this.validateGroup(ms.get(2), 0, 18, 4, true, "them", 1);
            this.validateCapture(ms.get(2), 0, 0, 18, 4, "them");
        },
        msdnMultilineOptionTest1: function () {
            var pattern = "^(\\w+)\\s(\\d+)$";
            var text = "Joe 164\nSam 208\nAllison 211\nGwen 171\n";
    
            var rgx = new System.Text.RegularExpressions.Regex("constructor$1", pattern, 0);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 0, "", 1, false);
    
            this.validateGroup(m, 0, 0, 0, false, "", 0);
    
            this.validateGroup(m, 1, 0, 0, false, "", 0);
    
            this.validateGroup(m, 2, 0, 0, false, "", 0);
        },
        msdnMultilineOptionTest2: function () {
            var pattern = "^(\\w+)\\s(\\d+)\\r*$";
            var text = "Joe 164\nSam 208\nAllison 211\nGwen 171\n";
    
            var rgx = new System.Text.RegularExpressions.Regex("constructor$1", pattern, 2);
            var ms = rgx.matches(text);
    
            Bridge.Test.Assert.areEqual$1(4, ms.getCount(), "Matches count is correct.");
    
            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 7, "Joe 164", 3, true);
    
            this.validateGroup(ms.get(0), 0, 0, 7, true, "Joe 164", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 7, "Joe 164");
    
            this.validateGroup(ms.get(0), 1, 0, 3, true, "Joe", 1);
            this.validateCapture(ms.get(0), 1, 0, 0, 3, "Joe");
    
            this.validateGroup(ms.get(0), 2, 4, 3, true, "164", 1);
            this.validateCapture(ms.get(0), 2, 0, 4, 3, "164");
    
            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 8, 7, "Sam 208", 3, true);
    
            this.validateGroup(ms.get(1), 0, 8, 7, true, "Sam 208", 1);
            this.validateCapture(ms.get(1), 0, 0, 8, 7, "Sam 208");
    
            this.validateGroup(ms.get(1), 1, 8, 3, true, "Sam", 1);
            this.validateCapture(ms.get(1), 1, 0, 8, 3, "Sam");
    
            this.validateGroup(ms.get(1), 2, 12, 3, true, "208", 1);
            this.validateCapture(ms.get(1), 2, 0, 12, 3, "208");
    
            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 16, 11, "Allison 211", 3, true);
    
            this.validateGroup(ms.get(2), 0, 16, 11, true, "Allison 211", 1);
            this.validateCapture(ms.get(2), 0, 0, 16, 11, "Allison 211");
    
            this.validateGroup(ms.get(2), 1, 16, 7, true, "Allison", 1);
            this.validateCapture(ms.get(2), 1, 0, 16, 7, "Allison");
    
            this.validateGroup(ms.get(2), 2, 24, 3, true, "211", 1);
            this.validateCapture(ms.get(2), 2, 0, 24, 3, "211");
    
            // Match #3:
            Bridge.Test.Assert.notNull$1(ms.get(3), "Match[3] is not null.");
            this.validateMatch(ms.get(3), 28, 8, "Gwen 171", 3, true);
    
            this.validateGroup(ms.get(3), 0, 28, 8, true, "Gwen 171", 1);
            this.validateCapture(ms.get(3), 0, 0, 28, 8, "Gwen 171");
    
            this.validateGroup(ms.get(3), 1, 28, 4, true, "Gwen", 1);
            this.validateCapture(ms.get(3), 1, 0, 28, 4, "Gwen");
    
            this.validateGroup(ms.get(3), 2, 33, 3, true, "171", 1);
            this.validateCapture(ms.get(3), 2, 0, 33, 3, "171");
        },
        msdnSinglelineOptionTest: function () {
            var pattern = "^.+";
            var text = "This is one line and\r\nthis is the second.";
            var rgx = new System.Text.RegularExpressions.Regex("constructor$1", pattern, 16);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 41, "This is one line and\r\nthis is the second.", 1, true);
    
            this.validateGroup(m, 0, 0, 41, true, "This is one line and\r\nthis is the second.", 1);
            this.validateCapture(m, 0, 0, 0, 41, "This is one line and\r\nthis is the second.");
        },
        msdnIgnoreWhitespaceOptionTest: function () {
            var pattern = " \\b \\(? ( (?:\\w+) ,?\\s? )+  [\\.!?] \\)? # Matches an entire sentence.";
            var text = "This is the first sentence. Is it the beginning of a literary masterpiece? I think not. Instead, it is a nonsensical paragraph.";
            var rgx = new System.Text.RegularExpressions.Regex("constructor$1", pattern, 32);
            var ms = rgx.matches(text);
    
            Bridge.Test.Assert.areEqual$1(4, ms.getCount(), "Matches count is correct.");
    
            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 27, "This is the first sentence.", 2, true);
    
            this.validateGroup(ms.get(0), 0, 0, 27, true, "This is the first sentence.", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 27, "This is the first sentence.");
    
            this.validateGroup(ms.get(0), 1, 18, 8, true, "sentence", 5);
            this.validateCapture(ms.get(0), 1, 0, 0, 5, "This ");
            this.validateCapture(ms.get(0), 1, 1, 5, 3, "is ");
            this.validateCapture(ms.get(0), 1, 2, 8, 4, "the ");
            this.validateCapture(ms.get(0), 1, 3, 12, 6, "first ");
            this.validateCapture(ms.get(0), 1, 4, 18, 8, "sentence");
    
            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 28, 46, "Is it the beginning of a literary masterpiece?", 2, true);
    
            this.validateGroup(ms.get(1), 0, 28, 46, true, "Is it the beginning of a literary masterpiece?", 1);
            this.validateCapture(ms.get(1), 0, 0, 28, 46, "Is it the beginning of a literary masterpiece?");
    
            this.validateGroup(ms.get(1), 1, 62, 11, true, "masterpiece", 8);
            this.validateCapture(ms.get(1), 1, 0, 28, 3, "Is ");
            this.validateCapture(ms.get(1), 1, 1, 31, 3, "it ");
            this.validateCapture(ms.get(1), 1, 2, 34, 4, "the ");
            this.validateCapture(ms.get(1), 1, 3, 38, 10, "beginning ");
            this.validateCapture(ms.get(1), 1, 4, 48, 3, "of ");
            this.validateCapture(ms.get(1), 1, 5, 51, 2, "a ");
            this.validateCapture(ms.get(1), 1, 6, 53, 9, "literary ");
            this.validateCapture(ms.get(1), 1, 7, 62, 11, "masterpiece");
    
            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 75, 12, "I think not.", 2, true);
    
            this.validateGroup(ms.get(2), 0, 75, 12, true, "I think not.", 1);
            this.validateCapture(ms.get(2), 0, 0, 75, 12, "I think not.");
    
            this.validateGroup(ms.get(2), 1, 83, 3, true, "not", 3);
            this.validateCapture(ms.get(2), 1, 0, 75, 2, "I ");
            this.validateCapture(ms.get(2), 1, 1, 77, 6, "think ");
            this.validateCapture(ms.get(2), 1, 2, 83, 3, "not");
    
            // Match #3:
            Bridge.Test.Assert.notNull$1(ms.get(3), "Match[3] is not null.");
            this.validateMatch(ms.get(3), 88, 39, "Instead, it is a nonsensical paragraph.", 2, true);
    
            this.validateGroup(ms.get(3), 0, 88, 39, true, "Instead, it is a nonsensical paragraph.", 1);
            this.validateCapture(ms.get(3), 0, 0, 88, 39, "Instead, it is a nonsensical paragraph.");
    
            this.validateGroup(ms.get(3), 1, 117, 9, true, "paragraph", 6);
            this.validateCapture(ms.get(3), 1, 0, 88, 9, "Instead, ");
            this.validateCapture(ms.get(3), 1, 1, 97, 3, "it ");
            this.validateCapture(ms.get(3), 1, 2, 100, 3, "is ");
            this.validateCapture(ms.get(3), 1, 3, 103, 2, "a ");
            this.validateCapture(ms.get(3), 1, 4, 105, 12, "nonsensical ");
            this.validateCapture(ms.get(3), 1, 5, 117, 9, "paragraph");
        },
        ignoreCaseOptionTest1: function () {
            var pattern = "ABcd";
            var text = "abcd";
            var rgx = new System.Text.RegularExpressions.Regex("constructor$1", pattern, 0);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 0, "", 1, false);
    
            this.validateGroup(m, 0, 0, 0, false, "", 0);
        },
        ignoreCaseOptionTest2: function () {
            var pattern = "ABcd";
            var text = "abcd";
            var rgx = new System.Text.RegularExpressions.Regex("constructor$1", pattern, 1);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 4, "abcd", 1, true);
    
            this.validateGroup(m, 0, 0, 4, true, "abcd", 1);
            this.validateCapture(m, 0, 0, 0, 4, "abcd");
        },
        ignoreCaseOptionTest3: function () {
            var pattern = "[AB]+cd";
            var text = "abcd";
            var rgx = new System.Text.RegularExpressions.Regex("constructor$1", pattern, 1);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 4, "abcd", 1, true);
    
            this.validateGroup(m, 0, 0, 4, true, "abcd", 1);
            this.validateCapture(m, 0, 0, 0, 4, "abcd");
        },
        defaultLineOptionsTest1: function () {
            var pattern = "^.*";
            var text = "The first line.\r\nThe second line.\r\nThe third line.";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 16, "The first line.\r", 1, true);
    
            this.validateGroup(m, 0, 0, 16, true, "The first line.\r", 1);
            this.validateCapture(m, 0, 0, 0, 16, "The first line.\r");
        },
        defaultLineOptionsTest2: function () {
            var pattern = ".+$";
            var text = "The first line.\r\nThe second line.\r\nThe third line.";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var m = rgx.match(text);
    
            this.validateMatch(m, 35, 15, "The third line.", 1, true);
    
            this.validateGroup(m, 0, 35, 15, true, "The third line.", 1);
            this.validateCapture(m, 0, 0, 35, 15, "The third line.");
        },
        multilineOptionTest1: function () {
            var pattern = ".*";
            var text = "The first line.\r\nThe second line.\r\nThe third line.";
            var rgx = new System.Text.RegularExpressions.Regex("constructor$1", pattern, 2);
            var ms = rgx.matches(text);
    
            Bridge.Test.Assert.areEqual$1(6, ms.getCount(), "Matches count is correct.");
    
            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 16, "The first line.\r", 1, true);
    
            this.validateGroup(ms.get(0), 0, 0, 16, true, "The first line.\r", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 16, "The first line.\r");
    
            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 16, 0, "", 1, true);
    
            this.validateGroup(ms.get(1), 0, 16, 0, true, "", 1);
            this.validateCapture(ms.get(1), 0, 0, 16, 0, "");
    
            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 17, 17, "The second line.\r", 1, true);
    
            this.validateGroup(ms.get(2), 0, 17, 17, true, "The second line.\r", 1);
            this.validateCapture(ms.get(2), 0, 0, 17, 17, "The second line.\r");
    
            // Match #3:
            Bridge.Test.Assert.notNull$1(ms.get(3), "Match[3] is not null.");
            this.validateMatch(ms.get(3), 34, 0, "", 1, true);
    
            this.validateGroup(ms.get(3), 0, 34, 0, true, "", 1);
            this.validateCapture(ms.get(3), 0, 0, 34, 0, "");
    
            // Match #4:
            Bridge.Test.Assert.notNull$1(ms.get(4), "Match[4] is not null.");
            this.validateMatch(ms.get(4), 35, 15, "The third line.", 1, true);
    
            this.validateGroup(ms.get(4), 0, 35, 15, true, "The third line.", 1);
            this.validateCapture(ms.get(4), 0, 0, 35, 15, "The third line.");
    
            // Match #5:
            Bridge.Test.Assert.notNull$1(ms.get(5), "Match[5] is not null.");
            this.validateMatch(ms.get(5), 50, 0, "", 1, true);
    
            this.validateGroup(ms.get(5), 0, 50, 0, true, "", 1);
            this.validateCapture(ms.get(5), 0, 0, 50, 0, "");
        },
        multilineOptionTest2: function () {
            var pattern = ".+$";
            var text = "The first line.\r\nThe second line.\r\nThe third line.";
            var rgx = new System.Text.RegularExpressions.Regex("constructor$1", pattern, 2);
            var ms = rgx.matches(text);
    
            Bridge.Test.Assert.areEqual$1(3, ms.getCount(), "Matches count is correct.");
    
            // Match #0:
            Bridge.Test.Assert.notNull$1(ms.get(0), "Match[0] is not null.");
            this.validateMatch(ms.get(0), 0, 16, "The first line.\r", 1, true);
    
            this.validateGroup(ms.get(0), 0, 0, 16, true, "The first line.\r", 1);
            this.validateCapture(ms.get(0), 0, 0, 0, 16, "The first line.\r");
    
            // Match #1:
            Bridge.Test.Assert.notNull$1(ms.get(1), "Match[1] is not null.");
            this.validateMatch(ms.get(1), 17, 17, "The second line.\r", 1, true);
    
            this.validateGroup(ms.get(1), 0, 17, 17, true, "The second line.\r", 1);
            this.validateCapture(ms.get(1), 0, 0, 17, 17, "The second line.\r");
    
            // Match #2:
            Bridge.Test.Assert.notNull$1(ms.get(2), "Match[2] is not null.");
            this.validateMatch(ms.get(2), 35, 15, "The third line.", 1, true);
    
            this.validateGroup(ms.get(2), 0, 35, 15, true, "The third line.", 1);
            this.validateCapture(ms.get(2), 0, 0, 35, 15, "The third line.");
        },
        singlelineOptionTest: function () {
            var pattern = "^.*";
            var text = "The first line.\r\nThe second line.\r\nThe third line.";
            var rgx = new System.Text.RegularExpressions.Regex("constructor$1", pattern, 16);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 50, "The first line.\r\nThe second line.\r\nThe third line.", 1, true);
    
            this.validateGroup(m, 0, 0, 50, true, "The first line.\r\nThe second line.\r\nThe third line.", 1);
            this.validateCapture(m, 0, 0, 0, 50, "The first line.\r\nThe second line.\r\nThe third line.");
        },
        singlelineDotCharTest: function () {
            var pattern = "[.]+$";
            var text = "The first line.\r\nThe second line.\r\nThe third line.";
            var rgx = new System.Text.RegularExpressions.Regex("constructor", pattern);
            var m = rgx.match(text);
    
            this.validateMatch(m, 49, 1, ".", 1, true);
    
            this.validateGroup(m, 0, 49, 1, true, ".", 1);
            this.validateCapture(m, 0, 0, 49, 1, ".");
    
        },
        multilineAndSinglelineOptionsTest: function () {
            var pattern = ".+$";
            var text = "The first line.\r\nThe second line.\r\nThe third line.";
            var rgx = new System.Text.RegularExpressions.Regex("constructor$1", pattern, 18);
            var m = rgx.match(text);
    
            this.validateMatch(m, 0, 50, "The first line.\r\nThe second line.\r\nThe third line.", 1, true);
    
            this.validateGroup(m, 0, 0, 50, true, "The first line.\r\nThe second line.\r\nThe third line.", 1);
            this.validateCapture(m, 0, 0, 0, 50, "The first line.\r\nThe second line.\r\nThe third line.");
        }
    });
    
    Bridge.define('Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests', {
        inherits: [Bridge.ClientTest.Text.RegularExpressions.RegexTestBase],
        statics: {
            constructor: function () {
                Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.longText = "";
                for (var i = 0; i < 10000; i = (i + 1) | 0) {
                    Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.longText += "TestStringForTimeout";
                }
    
                Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.shortText = "";
                for (var i1 = 0; i1 < 100; i1 = (i1 + 1) | 0) {
                    Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.shortText += "TestStringWithNoTimeout";
                }
            },
            pattern: "([0-9a-zA-Z]{1})+",
            shortText: null,
            longText: null,
            config: {
                init: function () {
                    this.shortTimeoutMs = System.TimeSpan.fromMilliseconds(1) || new System.TimeSpan();
                    this.longTimeoutMs = System.TimeSpan.fromMilliseconds(3000) || new System.TimeSpan();
                }
            }
        },
        regexTimeoutValidationWorks: function () {
            var rgx = new System.Text.RegularExpressions.Regex("constructor", "fakePattern");
            Bridge.Test.Assert.areEqual$1(System.TimeSpan.fromMilliseconds(-1), rgx.getMatchTimeout(), "Default Timeout #1");
    
            rgx = new System.Text.RegularExpressions.Regex("constructor$1", "fakePattern", 0);
            Bridge.Test.Assert.areEqual$1(System.TimeSpan.fromMilliseconds(-1), rgx.getMatchTimeout(), "Default Timeout #2");
    
            rgx = new System.Text.RegularExpressions.Regex("constructor$2", "fakePattern", 0, System.TimeSpan.fromSeconds(123));
            Bridge.Test.Assert.areEqual$1(System.TimeSpan.fromSeconds(123), rgx.getMatchTimeout(), "Specified Timeout");
    
            Bridge.Test.Assert.throws$6(System.ArgumentOutOfRangeException, $_.Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.f1);
        },
        regexIsMatchWorksWithShortTimeout: function () {
            var rgx = new System.Text.RegularExpressions.Regex("constructor$2", Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.pattern, 0, Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.shortTimeoutMs);
            Bridge.Test.Assert.throws$6(System.RegexMatchTimeoutException, function () {
                rgx.isMatch(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.longText);
            });
        },
        regexIsMatchWorksWithLongTimeout: function () {
            var rgx = new System.Text.RegularExpressions.Regex("constructor$2", Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.pattern, 0, Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.longTimeoutMs);
            rgx.isMatch(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.shortText);
            Bridge.Test.Assert.true(rgx != null);
        },
        regexMatchWorksWithShortTimeout: function () {
            var rgx = new System.Text.RegularExpressions.Regex("constructor$2", Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.pattern, 0, Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.shortTimeoutMs);
            Bridge.Test.Assert.throws$6(System.RegexMatchTimeoutException, function () {
                rgx.match(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.longText);
            });
        },
        regexMatchWorksWithLongTimeout: function () {
            var rgx = new System.Text.RegularExpressions.Regex("constructor$2", Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.pattern, 0, Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.longTimeoutMs);
            rgx.match(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.shortText);
            Bridge.Test.Assert.true(rgx != null);
        },
        regexNextMatchWorksWithShortTimeout: function () {
            var rgx = new System.Text.RegularExpressions.Regex("constructor$2", "%%|" + Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.pattern, 0, Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.shortTimeoutMs);
    
            Bridge.Test.Assert.throws$6(System.RegexMatchTimeoutException, function () {
                var result = rgx.match("%%" + Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.longText);
                result.nextMatch();
            });
        },
        regexNextMatchWorksWithLongTimeout: function () {
            var rgx = new System.Text.RegularExpressions.Regex("constructor$2", "%%| " + Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.pattern, 0, Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.longTimeoutMs);
    
            var result = rgx.match("%%" + Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.shortText);
            result.nextMatch();
    
            Bridge.Test.Assert.true(rgx != null);
        },
        regexReplaceWorksWithShortTimeout: function () {
            Bridge.Test.Assert.throws$6(System.RegexMatchTimeoutException, $_.Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.f2);
    
        },
        regexReplaceWorksWithLongTimeout: function () {
            System.Text.RegularExpressions.Regex.replace$2(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.shortText, Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.pattern, "fakeReplacement", 0, Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.longTimeoutMs);
            Bridge.Test.Assert.true(true);
        },
        regexReplaceEvaluatorWorksWithShortTimeout: function () {
            Bridge.Test.Assert.throws$6(System.RegexMatchTimeoutException, $_.Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.f4);
        },
        regexReplaceEvaluatorWorksWithLongTimeout: function () {
            System.Text.RegularExpressions.Regex.replace$5(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.shortText, Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.pattern, $_.Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.f3, 0, Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.longTimeoutMs);
            Bridge.Test.Assert.true(true);
        },
        regexSplitWorksWithShortTimeout: function () {
            Bridge.Test.Assert.throws$6(System.RegexMatchTimeoutException, $_.Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.f5);
        },
        regexSplitWorksWithLongTimeout: function () {
            System.Text.RegularExpressions.Regex.split$2(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.shortText, Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.pattern, 0, Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.longTimeoutMs);
            Bridge.Test.Assert.true(true);
        }
    });
    
    Bridge.ns("Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests", $_);
    
    Bridge.apply($_.Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests, {
        f1: function () {
            new System.Text.RegularExpressions.Regex("constructor$2", "fakePattern", 0, System.TimeSpan.fromMilliseconds(-5));
        },
        f2: function () {
            System.Text.RegularExpressions.Regex.replace$2(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.longText, Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.pattern, "fakeReplacement", 0, Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.shortTimeoutMs);
        },
        f3: function (m) {
            return "fakeReplacement";
        },
        f4: function () {
            System.Text.RegularExpressions.Regex.replace$5(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.longText, Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.pattern, $_.Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.f3, 0, Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.shortTimeoutMs);
        },
        f5: function () {
            System.Text.RegularExpressions.Regex.split$2(Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.longText, Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.pattern, 0, Bridge.ClientTest.Text.RegularExpressions.RegexTimeoutTests.shortTimeoutMs);
        }
    });
    
    Bridge.define('Bridge.ClientTest.TypeSystemTests.AssignableTypes.D1', {
        inherits: [Bridge.ClientTest.TypeSystemTests.AssignableTypes.C1,Bridge.ClientTest.TypeSystemTests.AssignableTypes.I1]
    });
    
    Bridge.define('Bridge.ClientTest.TypeSystemTests.AssignableTypes.D2$1', function (T) { return {
        inherits: [Bridge.ClientTest.TypeSystemTests.AssignableTypes.C2$1(T),Bridge.ClientTest.TypeSystemTests.AssignableTypes.I2$1(T),Bridge.ClientTest.TypeSystemTests.AssignableTypes.I1]
    }; });
    
    Bridge.define('Bridge.ClientTest.TypeSystemTests.AssignableTypes.D3', {
        inherits: [Bridge.ClientTest.TypeSystemTests.AssignableTypes.C2$1(System.Int32),Bridge.ClientTest.TypeSystemTests.AssignableTypes.I2$1(String)]
    });
    
    Bridge.define('Bridge.ClientTest.TypeSystemTests.AssignableTypes.I3', {
        inherits: [Bridge.ClientTest.TypeSystemTests.AssignableTypes.I1],
        $interface: true
    });
    
    Bridge.define('Bridge.ClientTest.TypeSystemTests.AssignableTypes.I8$2', function (T1, T2) { return {
        inherits: [Bridge.ClientTest.TypeSystemTests.AssignableTypes.I6$1(T1),Bridge.ClientTest.TypeSystemTests.AssignableTypes.I7$1(T2)],
        $interface: true
    }; });
    
    Bridge.define('Bridge.ClientTest.TypeSystemTests.AssignableTypes.I5$1', function (T1) { return {
        inherits: [Bridge.ClientTest.TypeSystemTests.AssignableTypes.I2$1(T1)],
        $interface: true
    }; });
    
    Bridge.define('Bridge.ClientTest.TypeSystemTests.AssignableTypes.X1', {
        inherits: [Bridge.ClientTest.TypeSystemTests.AssignableTypes.I1]
    });
    
    Bridge.define('Bridge.ClientTest.TypeSystemTests.I2', {
        inherits: [Bridge.ClientTest.TypeSystemTests.I1],
        $interface: true
    });
    
    Bridge.define('Bridge.ClientTest.TypeSystemTests.I4', {
        inherits: [Bridge.ClientTest.TypeSystemTests.I3],
        $interface: true
    });
    
    Bridge.define('Bridge.ClientTest.BasicCSharp.TestAbstractClass.C', {
        inherits: [Bridge.ClientTest.BasicCSharp.TestAbstractClass.B],
        getString: function () {
            this.setData((this.getData() - 1) | 0);
            return "C";
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1339.Foo2', {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge1339.Foo1]
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1340.DataClass2$2', function (T, K) { return {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge1340.DataClass1$2(System.Int32,String)]
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass2$2', function (T, K) { return {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass1$2(System.Int32,String)]
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge436Third', {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge436Second],
        toObject: function () {
            return Bridge.ClientTest.BridgeIssues.Bridge436Second.prototype.toObject.call(this) + "3";
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge623B2', {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge623B1],
        constructor: function (foo, func) {
            Bridge.ClientTest.BridgeIssues.Bridge623B1.prototype.$constructor.call(this, foo, func);
    
        },
        getFoo: function () {
            return ((3 * this.foo) | 0);
        },
        call: function () {
            return ((this.func() + 1000) | 0);
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge693B', {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge693A$1(Bridge.ClientTest.BridgeIssues.Bridge693B.Bridge693C)],
        constructor: function () {
            Bridge.ClientTest.BridgeIssues.Bridge693A$1(Bridge.ClientTest.BridgeIssues.Bridge693B.Bridge693C).prototype.$constructor.call(this, new Bridge.ClientTest.BridgeIssues.Bridge693B.Bridge693C());
    
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge883_1', {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge883_2]
    });
    
    Bridge.define('Bridge.ClientTest.TypeSystemTests.AssignableTypes.D4', {
        inherits: [Bridge.ClientTest.TypeSystemTests.AssignableTypes.I3,Bridge.ClientTest.TypeSystemTests.AssignableTypes.I4]
    });
    
    Bridge.define('Bridge.ClientTest.TypeSystemTests.AssignableTypes.I10$2', function (T1, T2) { return {
        inherits: [Bridge.ClientTest.TypeSystemTests.AssignableTypes.I8$2(T1,T2)],
        $interface: true
    }; });
    
    Bridge.define('Bridge.ClientTest.TypeSystemTests.AssignableTypes.X2', {
        inherits: [Bridge.ClientTest.TypeSystemTests.AssignableTypes.X1]
    });
    
    Bridge.define('Bridge.ClientTest.TypeSystemTests.B', {
        inherits: [Bridge.ClientTest.TypeSystemTests.I2]
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1339.Foo3', {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge1339.Foo2],
        statics: {
            Bar: "Do"
        }
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1340.DataClass3$2', function (T, K) { return {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge1340.DataClass2$2(System.Int32,String)],
        value4: Bridge.getDefaultValue(K),
        config: {
            properties: {
                Value3: Bridge.getDefaultValue(T)
            }
        }
    }; });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass3$2', function (T, K) { return {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge1340.StaticDataClass2$2(System.Int32,String)],
        statics: {
            value4: Bridge.getDefaultValue(K),
            config: {
                properties: {
                    Value3: Bridge.getDefaultValue(T)
                }
            }
        }
    }; });
    
    Bridge.define('Bridge.ClientTest.TypeSystemTests.C', {
        inherits: [Bridge.ClientTest.TypeSystemTests.B,Bridge.ClientTest.TypeSystemTests.I4]
    });
    
    Bridge.define('Bridge.ClientTest.BridgeIssues.Bridge1339.Foo4', {
        inherits: [Bridge.ClientTest.BridgeIssues.Bridge1339.Foo3]
    });
    
    Bridge.init();
})(this);
